{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking/TicketVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Fees.sol\\\";\\n \\ncontract TicketVault is Context, Ownable, Fees {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice enum Status contains multiple status.\\n    enum Status { Collecting, Staking, Completed }\\n\\n    struct VaultInfo {\\n        Status status; // vault status\\n        uint256 stakingPeriod; // the timestamp length of staking vault.\\n        uint256 startTimestamp;  // block.number when the vault start accouring rewards.\\n        uint256 stopTimestamp; // the block.number to end the staking vault.\\n        uint256 totalVaultShares; // total tokens deposited into Vault.\\n        uint256 totalVaultRewards; // amount of tokens to reward this vault.\\n    }\\n\\n    struct RewardInfo {\\n        uint256 lastRewardUpdateTimeStamp;\\n        uint256 rewardRate; // rewardRate is totalVaultRewards / stakingPeriod.\\n        uint256 pendingVaultRewards;\\n        uint256 claimedVaultRewards; // claimed rewards for the vault.\\n        uint256 remainingVaultRewards; // remaining rewards for this vault.        \\n    }\\n    \\n    IERC20 public token;\\n    VaultInfo public vault;\\n    RewardInfo private _reward;\\n    mapping(address => uint256) private _balances;\\n\\n    error NotAuthorized();\\n    error NoZeroValues();\\n    error MaxStaked();\\n    error AddRewardsFailed();\\n    error DepositFailed();\\n    error RewardFailed();\\n    error WithdrawFailed();\\n    error NotCollecting();  \\n    error NotStaking();\\n    error NotCompleted();\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount, uint256 rewards);\\n    event StakingStarted();\\n    event StakingCompleted();\\n\\n    /// @notice modifier checks that a user is staking.\\n    /// @param account The account address to check.\\n    modifier isStakeholder(address account) {\\n        if (_balances[account] == 0) revert NotAuthorized();\\n        _;\\n    }\\n\\n    /// @notice modifier checks that contract is in status Collecting.\\n    modifier isCollecting() {\\n        if (vault.status != Status.Collecting) revert NotCollecting();\\n        _;\\n    }\\n\\n    /// @notice modifier checks that contract has status Staking.\\n    modifier isStaking() {\\n        if (vault.status != Status.Staking) revert NotStaking();\\n        _;\\n    }\\n\\n    /// @notice modifier checks that contract has status Completed.\\n    modifier isCompleted() {\\n        if (vault.status != Status.Completed) revert NotCompleted();\\n        _;\\n    }\\n\\n    /// @notice modifier checks for zero values.\\n    /// @param amount The user amount to deposit in Wei.\\n    modifier noZeroValues(uint256 amount) {\\n        if (_msgSender() == address(0) || amount <= 0) revert NoZeroValues();\\n        _;\\n    }\\n\\n    /// @notice modifier sets a max limit to 1 million tokens staked per user.\\n    modifier limiter(uint256 amount) {\\n        uint256 balance = _balances[_msgSender()];\\n        uint256 totalBalance = balance + amount;\\n        if (totalBalance > 1000000000000000000000000) revert MaxStaked();\\n        _;\\n    }\\n\\n    /// @notice modifier updates the vault reward stats.\\n    modifier updateVaultRewards() {\\n        require(_reward.remainingVaultRewards > 0);\\n        \\n        uint256 _currentValue = _reward.rewardRate * (block.timestamp - _reward.lastRewardUpdateTimeStamp);\\n        _reward.pendingVaultRewards += _currentValue;\\n        _reward.remainingVaultRewards -= _currentValue;\\n        _reward.lastRewardUpdateTimeStamp = block.timestamp;\\n        _;\\n    }\\n\\n    /// @notice Constructor for TicketVault, staking contract.\\n    /// @param Token The token used for staking.\\n    constructor(address Token) {\\n        token = IERC20(Token);\\n        feeAddress = _msgSender();\\n        vault.stakingPeriod = 13 weeks; // 3 months staking period.\\n        withdrawFeePeriod = vault.stakingPeriod; // 3 months fee period.\\n        withdrawPenaltyPeriod = 2 weeks; // 2 weeks penalty period.\\n        withdrawFee = 700; // 7% withdraw fee.\\n        vault.status = Status.Collecting; \\n    }   \\n\\n    /// @notice receive function reverts and returns the funds to the sender.\\n    receive() external payable {\\n        revert(\\\"not payable receive\\\");\\n    }\\n\\n/// ------------------------------- PUBLIC METHODS -------------------------------\\n\\n    /// Method to get the users erc20 balance.\\n    /// @param account The account of the user to check.\\n    /// @return user erc20 balance.\\n    function getAccountErc20Balance(address account) external view returns (uint256) {\\n        return token.balanceOf(account);\\n    }\\n\\n    /// Method to get the users vault balance.\\n    /// @param account The account of the user to check.\\n    /// @return user balance staked in vault.\\n    function getAccountVaultBalance(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// Method to get the vaults RewardInfo.\\n    function getRewardInfo() external view returns (\\n        uint256 lastRewardUpdateTimeStamp,\\n        uint256 rewardRate, \\n        uint256 pendingVaultRewards,\\n        uint256 claimedVaultRewards, \\n        uint256 remainingVaultRewards\\n    ) {\\n        return (\\n            _reward.lastRewardUpdateTimeStamp,\\n            _reward.rewardRate,\\n            _reward.pendingVaultRewards,\\n            _reward.claimedVaultRewards,\\n            _reward.remainingVaultRewards);\\n    }\\n\\n    /// @notice Method to let a user deposit funds into the vault.\\n    /// @param amount The amount to be staked.\\n    function deposit(uint256 amount) external isCollecting limiter(amount) noZeroValues(amount) {\\n        _balances[_msgSender()] += amount;\\n        vault.totalVaultShares += amount;\\n        if (!_deposit(_msgSender(), amount)) revert DepositFailed();\\n        emit Deposit(_msgSender(), amount);\\n    }\\n    \\n    /// @notice Lets a user exit their position while status is Collecting. \\n    /// @notice ATT. The user is subject to an 7% early withdraw fee.\\n    /// @dev Can only be executed while status is Collecting.\\n    function exitWhileCollecting() external isStakeholder(_msgSender()) isCollecting {\\n        require(_msgSender() != address(0), \\\"Not zero address\\\");\\n\\n        uint256 _totalUserShares = _balances[_msgSender()];\\n        delete _balances[_msgSender()];\\n\\n        (uint256 _feeAmount, uint256 _withdrawAmount) = super._calculateFee(_totalUserShares);\\n        vault.totalVaultShares -= _totalUserShares;\\n        \\n        // Pay 7% withdrawFee before withdraw.\\n        if (!_withdraw(address(feeAddress), _feeAmount)) revert ExitFeesFailed();\\n        if (!_withdraw(address(_msgSender()), _withdrawAmount)) revert WithdrawFailed();\\n        \\n        emit ExitWithFees(_msgSender(), _withdrawAmount, _feeAmount);\\n    }\\n\\n    /// @notice Lets a user exit their position while staking. \\n    /// @notice ATT. The user is subject to an 7% early withdraw fee.\\n    /// @dev Can only be executed while status is Staking.\\n    function exitWhileStaking() external isStakeholder(_msgSender()) isStaking updateVaultRewards {\\n        require(_msgSender() != address(0), \\\"Not zero address\\\");\\n\\n        uint256 _totalUserShares = _balances[_msgSender()];\\n        delete _balances[_msgSender()];\\n\\n        (uint256 _feeAmount, uint256 _withdrawAmount) = super._calculateFee(_totalUserShares);\\n\\n        // if withdrawPenaltyPeriod is over, calculate user rewards.\\n        if (block.timestamp >= (vault.startTimestamp + withdrawPenaltyPeriod)) {\\n            uint256 _pendingUserReward = _calculateUserReward(_totalUserShares);\\n            _withdrawAmount += _pendingUserReward;\\n\\n            _reward.pendingVaultRewards -= _pendingUserReward;\\n            _reward.remainingVaultRewards -= _pendingUserReward;\\n            _reward.claimedVaultRewards += _pendingUserReward;\\n        }\\n        vault.totalVaultShares -= _totalUserShares;\\n\\n        // Pay 7% in withdrawFee before the withdraw is transacted.\\n        if (!_withdraw(address(feeAddress), _feeAmount)) revert ExitFeesFailed();\\n        if (!_withdraw(address(_msgSender()), _withdrawAmount)) revert WithdrawFailed();\\n\\n        emit ExitWithFees(_msgSender(), _withdrawAmount, _feeAmount);\\n    }\\n\\n    /// @notice Let the user remove their stake and receive the accumulated rewards, without paying extra fees.\\n    function withdraw() external isStakeholder(_msgSender()) isCompleted {\\n        require(_msgSender() != address(0), \\\"Not zero adress\\\");\\n        \\n        uint256 _totalUserShares =  _balances[_msgSender()];\\n        delete _balances[_msgSender()];\\n    \\n        uint256 _pendingUserReward = _calculateUserReward(_totalUserShares);\\n        \\n        _reward.pendingVaultRewards -= _pendingUserReward;\\n        _reward.claimedVaultRewards += _pendingUserReward;\\n        vault.totalVaultShares -= _totalUserShares;\\n\\n        if (!_withdraw(_msgSender(), _pendingUserReward)) revert RewardFailed();\\n        if (!_withdraw(_msgSender(), _totalUserShares)) revert WithdrawFailed();\\n        \\n\\n        emit Withdraw(_msgSender(), _totalUserShares, _pendingUserReward);\\n    }\\n\\n/// ------------------------------- ADMIN METHODS -------------------------------\\n\\n    /// @notice Add reward amount to the vault.\\n    /// @param amount The amount to deposit in Wei.\\n    /// @dev Restricted to onlyOwner.  \\n    function addRewards(uint256 amount) external onlyOwner {\\n        if (!_deposit(_msgSender(), amount)) revert AddRewardsFailed();\\n        \\n        vault.totalVaultRewards += amount;\\n        _reward.rewardRate = (vault.totalVaultRewards / vault.stakingPeriod);\\n        _reward.remainingVaultRewards += amount;\\n    }\\n\\n    /// @notice Sets the contract status to Staking.\\n    function startStaking() external isCollecting onlyOwner {\\n        vault.status = Status.Staking;\\n        vault.startTimestamp = block.timestamp;\\n        vault.stopTimestamp = vault.startTimestamp + vault.stakingPeriod;\\n        _reward.lastRewardUpdateTimeStamp = vault.startTimestamp;\\n\\n        emit StakingStarted();\\n    }\\n\\n    /// @notice Sets the contract status to Completed.\\n    /// @dev modifier updateVaultRewards is called before status is set to Completed.\\n    function stopStaking() external isStaking onlyOwner {\\n        vault.status = Status.Completed;\\n        _reward.pendingVaultRewards += _reward.remainingVaultRewards;\\n        _reward.remainingVaultRewards = 0;\\n        emit StakingCompleted();\\n    }\\n\\n    /// @notice Withdraw unexpected tokens sent to the TicketVault\\n    function inCaseTokensGetStuck(address _to, address _token) external onlyOwner {\\n        require(_token != address(token), \\\"Token cannot be same as deposit token\\\");\\n\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(address(_to), amount);\\n    }\\n    \\n/// ------------------------------- PRIVATE METHODS -------------------------------\\n\\n    /// @notice Internal function to deposit funds to vault.\\n    /// @param _from The from address that deposits the funds.\\n    /// @param _amount The amount to be deposited in Wei.\\n    /// @return true if valid.\\n    function _deposit(address _from, uint256 _amount) private returns (bool) {\\n        token.safeTransferFrom(_from, address(this), _amount);\\n        return true;\\n    }\\n \\n    /// @notice Internal function to withdraw funds from the vault.\\n    /// @param _to The address that receives the withdrawn funds.\\n    /// @param _amount The amount to be withdrawn.\\n    /// @return true if valid.\\n    function _withdraw(address _to, uint256 _amount) private returns (bool){\\n        token.safeTransfer(_to, _amount);\\n        return true;\\n    }\\n\\n    /// @notice Internal function to calculate the pending user rewards.\\n    /// @param _totalUserShares The total amount deposited to vault by user.\\n    /// @return pending user reward amount.\\n    function _calculateUserReward(uint256 _totalUserShares) private view returns (uint256) {\\n        require(_reward.pendingVaultRewards > 0, \\\"No pending rewards\\\");\\n        \\n        uint256 _userPercentOfVault = _totalUserShares * 100 / vault.totalVaultShares;\\n        uint256 _pendingUserReward = _reward.pendingVaultRewards * _userPercentOfVault / 100;\\n\\n        return _pendingUserReward;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/Fees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Fees is Ownable {\\n\\n    address public feeAddress; // deafult Owner account.\\n    uint256 internal withdrawFeePeriod; // default 3 months.\\n    uint256 internal withdrawPenaltyPeriod; // default 14 days.\\n    uint256 internal withdrawFee; // default 7%.\\n\\n    error ExitFeesFailed();\\n\\n    event ExitWithFees(address indexed user, uint256 amount, uint256 fees);\\n\\n    /// @notice Internal function to calculate the early withdraw fees.\\n    /// @notice return feeAmount and withdrawAmount.\\n    function _calculateFee(uint256 _amount) \\n        internal \\n        view \\n        returns (\\n            uint256 feeAmount, \\n            uint256 withdrawAmount\\n        ) \\n    {\\n        feeAmount = _amount * withdrawFee / 10000;\\n        withdrawAmount = _amount - feeAmount; \\n    }\\n\\n    /// @notice Admin function to set a new fee address.\\n    function setFeeAddress(address _newFeeAddress) external onlyOwner {\\n        feeAddress = _newFeeAddress;\\n    }\\n    /// @notice Admin function to set a new withdraw fee.\\n    /// @notice example: 50 = 0.5%, 100 = 1%, 200 = 2%, 1000 = 10%.\\n    function setWithdrawFee(uint256 _newWithdrawFee) external onlyOwner {\\n        withdrawFee = _newWithdrawFee;\\n    }\\n\\n    /// @notice Function returns the current withdraw fee.\\n    function getWithdrawFee() external view returns (uint256){\\n        return withdrawFee;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddRewardsFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExitFeesFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCollecting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotStaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"ExitWithFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StakingCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StakingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitWhileCollecting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitWhileStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountErc20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardUpdateTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingVaultRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedVaultRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingVaultRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"enum TicketVault.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVaultShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVaultRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TicketVault", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000008ba718f288c3b12b01146816bef9fa03cc635bc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}