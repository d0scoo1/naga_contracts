{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ElfCampaigns.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./DataStructures.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract ElfCampaignsV2 {\\r\\n\\r\\nstruct Camps {\\r\\n            uint32 baseRewards; \\r\\n            uint32 creatureCount; \\r\\n            uint32 creatureHealth; \\r\\n            uint32 expPoints; \\r\\n            uint32 minLevel;\\r\\n    }\\r\\n\\r\\n    bool private initialized;\\r\\n    address elfcontract;\\r\\n    \\r\\n    uint256 public MAX_LEVEL;\\r\\n    uint256 public TIME_CONSTANT; \\r\\n    uint256 public REGEN_TIME; \\r\\n    address admin;\\r\\n    \\r\\n    mapping(uint256 => Camps) public camps; //memory slot for campaigns\\r\\n    \\r\\n    bytes32 internal ketchup;\\r\\n\\r\\n    //EVENTS\\r\\n    event LastKill(address indexed from); \\r\\n    event AddCamp(uint256 indexed id, uint256 baseRewards, uint256 creatureCount, uint256 creatureHealth, uint256 expPoints, uint256 minLevel);\\r\\n\\r\\n\\r\\n\\r\\nfunction initialize(address _elfcontract) public {\\r\\n    \\r\\n    require(!initialized, \\\"Already initialized\\\");\\r\\n     \\r\\n        camps[1] = Camps({baseRewards: 10, creatureCount: 6000, creatureHealth: 12,  expPoints:9,   minLevel:1});\\r\\n        camps[2] = Camps({baseRewards: 20, creatureCount: 3000, creatureHealth: 72,  expPoints:9,   minLevel:15});\\r\\n        camps[3] = Camps({baseRewards: 30, creatureCount: 3000, creatureHealth: 132, expPoints:9,   minLevel:30});\\r\\n        MAX_LEVEL = 100;\\r\\n        TIME_CONSTANT = 1 hours; \\r\\n        REGEN_TIME = 300 hours; \\r\\n        admin = msg.sender;\\r\\n        elfcontract = _elfcontract;\\r\\n        initialized = true;\\r\\n     \\r\\n    }\\r\\n\\r\\n\\r\\nfunction gameEngine(uint256 _campId, uint256 _sector, uint256 _level, uint256 _attackPoints, uint256 _healthPoints, uint256 _inventory, bool _useItem) external \\r\\nreturns(uint256 level, uint256 rewards, uint256 timestamp, uint256 inventory){\\r\\n  \\r\\n  Camps memory camp = camps[_campId];  \\r\\n  \\r\\n  require(elfcontract == msg.sender, \\\"not elf contract\\\"); \\r\\n  require(camp.minLevel <= _level, \\\"level too low\\\");\\r\\n  require(camp.creatureCount > 0, \\\"no creatures left\\\");\\r\\n  \\r\\n  camps[_campId].creatureCount = camp.creatureCount - 1;\\r\\n\\r\\n  rewards = camp.baseRewards + (2 * (_sector - 1));\\r\\n  \\r\\n  rewards = rewards * (1 ether);\\r\\n\\r\\n  level = (uint256(camp.expPoints)/3); //convetrt xp to levels\\r\\n \\r\\n  if(_useItem){\\r\\n         _attackPoints = _inventory == 1 ? _attackPoints * 2   : _attackPoints;\\r\\n         _healthPoints = _inventory == 2 ? _healthPoints * 2   : _healthPoints; \\r\\n          rewards      = _inventory == 3 ?  rewards * 2        : rewards;\\r\\n          level        = _inventory == 4 ?  level * 2          : level; //if inventory is 4, level reward is doubled\\r\\n         _healthPoints = _inventory == 5 ? _healthPoints + 200 : _healthPoints; \\r\\n         _attackPoints = _inventory == 6 ? _attackPoints * 3   : _attackPoints;\\r\\n         \\r\\n         inventory = 0;\\r\\n  }\\r\\n\\r\\n  level = _level + level;  //add level to current level\\r\\n  level = level < MAX_LEVEL ? level : MAX_LEVEL; //if level is greater than max level, set to max level\\r\\n                             \\r\\n  uint256 creatureHealth =  ((_sector - 1) * 12) + camp.creatureHealth; \\r\\n  uint256 attackTime = creatureHealth/_attackPoints;\\r\\n  \\r\\n  attackTime = attackTime > 0 ? attackTime * TIME_CONSTANT : 0;\\r\\n  \\r\\n  timestamp = REGEN_TIME/(_healthPoints) + (block.timestamp + attackTime);\\r\\n  \\r\\n  if(camp.creatureCount == 0){    \\r\\n    emit LastKill(msg.sender);\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nfunction addCamp(uint256 id, uint16 baseRewards_, uint16 creatureCount_, uint16 expPoints_, uint16 creatureHealth_, uint16 minLevel_) external      \\r\\n    {\\r\\n        require(admin == msg.sender);\\r\\n        Camps memory newCamp = Camps({\\r\\n            baseRewards:    baseRewards_, \\r\\n            creatureCount:  creatureCount_, \\r\\n            expPoints:      expPoints_,\\r\\n            creatureHealth: creatureHealth_, \\r\\n            minLevel:       minLevel_\\r\\n            });\\r\\n\\r\\n        camps[id] = newCamp;\\r\\n         emit AddCamp(id, baseRewards_, creatureCount_, expPoints_, creatureHealth_, minLevel_);\\r\\n    }\\r\\n\\r\\n  \\r\\n\\r\\n//////Random Number Generator/////\\r\\n\\r\\n    function _randomize(uint256 ran, string memory dom, uint256 ness) internal pure returns (uint256) {\\r\\n    return uint256(keccak256(abi.encode(ran,dom,ness)));}\\r\\n\\r\\n    function _rand() internal view returns (uint256) {\\r\\n    return uint256(keccak256(abi.encodePacked(msg.sender, block.difficulty, block.timestamp, block.basefee, ketchup)));}\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/DataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n//import \\\"hardhat/console.sol\\\"; ///REMOVE BEFORE DEPLOYMENT\\r\\n\\r\\nlibrary DataStructures {\\r\\n\\r\\n/////////////DATA STRUCTURES///////////////////////////////\\r\\n    struct Elf {\\r\\n            address owner;  \\r\\n            uint256 timestamp; \\r\\n            uint256 action; \\r\\n            uint256 healthPoints;\\r\\n            uint256 attackPoints; \\r\\n            uint256 primaryWeapon; \\r\\n            uint256 level;\\r\\n            uint256 hair;\\r\\n            uint256 race; \\r\\n            uint256 accessories; \\r\\n            uint256 sentinelClass; \\r\\n            uint256 weaponTier; \\r\\n            uint256 inventory; \\r\\n    }\\r\\n\\r\\n    struct Token {\\r\\n            address owner;  \\r\\n            uint256 timestamp; \\r\\n            uint8 action; \\r\\n            uint8 healthPoints;\\r\\n            uint8 attackPoints; \\r\\n            uint8 primaryWeapon; \\r\\n            uint8 level;\\r\\n            uint8 hair;\\r\\n            uint8 race; \\r\\n            uint8 accessories; \\r\\n            uint8 sentinelClass; \\r\\n            uint8 weaponTier; \\r\\n            uint8 inventory; \\r\\n    }\\r\\n\\r\\n    struct ActionVariables {\\r\\n\\r\\n            uint256 reward;\\r\\n            uint256 timeDiff;\\r\\n            uint256 traits; \\r\\n            uint256 class;  \\r\\n    }\\r\\n\\r\\n    struct Camps {\\r\\n            uint32 baseRewards; \\r\\n            uint32 creatureCount; \\r\\n            uint32 creatureHealth; \\r\\n            uint32 expPoints; \\r\\n            uint32 minLevel;\\r\\n            uint32 itemDrop;\\r\\n            uint32 weaponDrop;\\r\\n            uint32 spare;\\r\\n    }\\r\\n\\r\\n    /*Dont Delete, just keep it for reference\\r\\n\\r\\n    struct Attributes { \\r\\n            uint256 hair; //MAX 3 3 hair traits\\r\\n            uint256 race;  //MAX 6 Body 4 for body\\r\\n            uint256 accessories; //MAX 7 4 \\r\\n            uint256 sentinelClass; //MAX 3 3 in class\\r\\n            uint256 weaponTier; //MAX 6 5 tiers\\r\\n            uint256 inventory; //MAX 7 6 items\\r\\n    }\\r\\n\\r\\n    */\\r\\n\\r\\n/////////////////////////////////////////////////////\\r\\nfunction getElf(uint256 character) internal pure returns(Elf memory _elf) {\\r\\n   \\r\\n    _elf.owner =          address(uint160(uint256(character)));\\r\\n    _elf.timestamp =      uint256(uint40(character>>160));\\r\\n    _elf.action =         uint256(uint8(character>>200));\\r\\n    _elf.healthPoints =       uint256(uint8(character>>208));\\r\\n    _elf.attackPoints =   uint256(uint8(character>>216));\\r\\n    _elf.primaryWeapon =  uint256(uint8(character>>224));\\r\\n    _elf.level    =       uint256(uint8(character>>232));\\r\\n    _elf.hair           = (uint256(uint8(character>>240)) / 100) % 10;\\r\\n    _elf.race           = (uint256(uint8(character>>240)) / 10) % 10;\\r\\n    _elf.accessories    = (uint256(uint8(character>>240))) % 10;\\r\\n    _elf.sentinelClass  = (uint256(uint8(character>>248)) / 100) % 10;\\r\\n    _elf.weaponTier     = (uint256(uint8(character>>248)) / 10) % 10;\\r\\n    _elf.inventory      = (uint256(uint8(character>>248))) % 10; \\r\\n\\r\\n} \\r\\n\\r\\nfunction getToken(uint256 character) internal pure returns(Token memory token) {\\r\\n   \\r\\n    token.owner          = address(uint160(uint256(character)));\\r\\n    token.timestamp      = uint256(uint40(character>>160));\\r\\n    token.action         = (uint8(character>>200));\\r\\n    token.healthPoints   = (uint8(character>>208));\\r\\n    token.attackPoints   = (uint8(character>>216));\\r\\n    token.primaryWeapon  = (uint8(character>>224));\\r\\n    token.level          = (uint8(character>>232));\\r\\n    token.hair           = ((uint8(character>>240)) / 100) % 10; //MAX 3\\r\\n    token.race           = ((uint8(character>>240)) / 10) % 10; //Max6\\r\\n    token.accessories    = ((uint8(character>>240))) % 10; //Max7\\r\\n    token.sentinelClass  = ((uint8(character>>248)) / 100) % 10; //MAX 3\\r\\n    token.weaponTier     = ((uint8(character>>248)) / 10) % 10; //MAX 6\\r\\n    token.inventory      = ((uint8(character>>248))) % 10; //MAX 7\\r\\n\\r\\n    token.hair = (token.sentinelClass * 3) + (token.hair + 1);\\r\\n    token.race = (token.sentinelClass * 4) + (token.race + 1);\\r\\n    token.primaryWeapon = token.primaryWeapon == 69 ? 69 : (token.sentinelClass * 15) + (token.primaryWeapon + 1);\\r\\n    token.accessories = (token.sentinelClass * 7) + (token.accessories + 1);\\r\\n\\r\\n}\\r\\n\\r\\nfunction _setElf(\\r\\n                address owner, uint256 timestamp, uint256 action, uint256 healthPoints, \\r\\n                uint256 attackPoints, uint256 primaryWeapon, \\r\\n                uint256 level, uint256 traits, uint256 class )\\r\\n\\r\\n    internal pure returns (uint256 sentinel) {\\r\\n\\r\\n    uint256 character = uint256(uint160(address(owner)));\\r\\n    \\r\\n    character |= timestamp<<160;\\r\\n    character |= action<<200;\\r\\n    character |= healthPoints<<208;\\r\\n    character |= attackPoints<<216;\\r\\n    character |= primaryWeapon<<224;\\r\\n    character |= level<<232;\\r\\n    character |= traits<<240;\\r\\n    character |= class<<248;\\r\\n    \\r\\n    return character;\\r\\n}\\r\\n\\r\\n//////////////////////////////HELPERS/////////////////\\r\\n\\r\\nfunction packAttributes(uint hundreds, uint tens, uint ones) internal pure returns (uint256 packedAttributes) {\\r\\n    packedAttributes = uint256(hundreds*100 + tens*10 + ones);\\r\\n    return packedAttributes;\\r\\n}\\r\\n\\r\\nfunction calcAttackPoints(uint256 sentinelClass, uint256 weaponTier) internal pure returns (uint256 attackPoints) {\\r\\n\\r\\n        attackPoints = ((sentinelClass + 1) * 2) + (weaponTier * 2);\\r\\n        \\r\\n        return attackPoints;\\r\\n}\\r\\n\\r\\nfunction calcHealthPoints(uint256 sentinelClass, uint256 level) internal pure returns (uint256 healthPoints) {\\r\\n\\r\\n        healthPoints = (level/(3) +2) + (20 - (sentinelClass * 4));\\r\\n        \\r\\n        return healthPoints;\\r\\n}\\r\\n\\r\\nfunction calcCreatureHealth(uint256 sector, uint256 baseCreatureHealth) internal pure returns (uint256 creatureHealth) {\\r\\n\\r\\n        creatureHealth = ((sector - 1) * 12) + baseCreatureHealth; \\r\\n        \\r\\n        return creatureHealth;\\r\\n}\\r\\n\\r\\nfunction roll(uint256 id_, uint256 level_, uint256 rand, uint256 rollOption_, uint256 weaponTier_, uint256 primaryWeapon_, uint256 inventory_) \\r\\ninternal view \\r\\nreturns (uint256 newWeaponTier, uint256 newWeapon, uint256 newInventory) {\\r\\n\\r\\n   uint256 levelTier = level_ == 100 ? 5 : uint256((level_/20) + 1);\\r\\n\\r\\n   newWeaponTier = weaponTier_;\\r\\n   newWeapon     = primaryWeapon_;\\r\\n   newInventory  = inventory_;\\r\\n\\r\\n\\r\\n   if(rollOption_ == 1 || rollOption_ == 3){\\r\\n       //Weapons\\r\\n       // uint256 weaponTier = levelTier; stack to deep, use levelTier instead\\r\\n        uint16  chance = uint16(_randomize(rand, \\\"Weapon\\\", id_)) % 100;\\r\\n       // console.log(\\\"chance: \\\", chance);\\r\\n                if(chance > 10 && chance < 80){\\r\\n        \\r\\n                              newWeaponTier = levelTier;\\r\\n        \\r\\n                        }else if (chance > 80 ){\\r\\n        \\r\\n                              newWeaponTier = levelTier + 1 > 5 ? 5 : levelTier + 1;\\r\\n        \\r\\n                        }else{\\r\\n\\r\\n                                newWeaponTier = levelTier - 1 < 1 ? 1 : levelTier - 1;          \\r\\n                        }\\r\\n\\r\\n                                         \\r\\n        \\r\\n\\r\\n        newWeapon = newWeaponTier == 0 ? 0 : ((newWeaponTier - 1) * 3) + (rand % 3);  \\r\\n        \\r\\n\\r\\n   }else if(rollOption_ == 2 || rollOption_ == 3){\\r\\n       //Inventory\\r\\n       //console.log(\\\"Inventory ENTERED\\\");\\r\\n       \\r\\n        uint16 morerand = uint16(_randomize(rand, \\\"Inventory\\\", id_));\\r\\n        uint16 diceRoll = uint16(_randomize(rand, \\\"Dice\\\", id_));\\r\\n       // console.log(\\\"morerand: \\\", morerand);\\r\\n      //  console.log(\\\"diceRoll: \\\", diceRoll);\\r\\n\\r\\n        diceRoll = (diceRoll % 6);\\r\\n        \\r\\n        if(diceRoll % 2 == 1){\\r\\n\\r\\n            newInventory = levelTier > 3 ? morerand % 3 + 3: morerand % 6 + 1;\\r\\n            \\r\\n        } \\r\\n\\r\\n   }\\r\\n                      \\r\\n              \\r\\n}\\r\\n\\r\\n\\r\\nfunction _randomize(uint256 ran, string memory dom, uint256 ness) internal pure returns (uint256) {\\r\\n    return uint256(keccak256(abi.encode(ran,dom,ness)));}\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatureCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatureHealth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLevel\",\"type\":\"uint256\"}],\"name\":\"AddCamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"LastKill\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGEN_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_CONSTANT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"baseRewards_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"creatureCount_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expPoints_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"creatureHealth_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minLevel_\",\"type\":\"uint16\"}],\"name\":\"addCamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"camps\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"baseRewards\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"creatureCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"creatureHealth\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expPoints\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minLevel\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sector\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_attackPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_healthPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inventory\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useItem\",\"type\":\"bool\"}],\"name\":\"gameEngine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventory\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_elfcontract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElfCampaignsV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}