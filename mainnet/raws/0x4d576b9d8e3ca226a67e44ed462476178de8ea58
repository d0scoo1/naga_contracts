{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @title Zen Apes Staking contract\r\n * @author The Core Devs (@thecoredevs)\r\n */\r\n\r\ninterface IZenApes {\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function multiTransferFrom(address from_, address to_, uint256[] memory tokenIds_) external;\r\n}\r\n\r\ninterface IZenToken {\r\n    function mintAsController(address to_, uint256 amount_) external;\r\n}\r\n\r\ncontract ZenStakingV1 {\r\n    \r\n    uint private yieldPerDay;\r\n    uint40 private _requiredStakeTime;\r\n    address public owner;\r\n\r\n    struct StakedToken {\r\n        uint40 stakingTimestamp;\r\n        uint40 lastClaimTimestamp;\r\n        address tokenOwner;\r\n    }\r\n\r\n    // seconds in 24 hours: 86400\r\n\r\n    mapping(uint16 => StakedToken) private stakedTokens;\r\n    mapping(address => uint) public stakedTokensAmount;\r\n    \r\n    IZenApes zenApesContract;\r\n    IZenToken zenTokenContract;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller Not Owner!\");\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        uint yieldAmountPerDay,\r\n        uint40 requiredStakeTimeInSeconds, \r\n        address zenApesContractAddr,\r\n        address zenTokenContractAddr\r\n        ) {\r\n        _setZenApesContractAddr(zenApesContractAddr);\r\n        _setZenTokenContractAddr(zenTokenContractAddr);\r\n        yieldPerDay = yieldAmountPerDay;\r\n        _requiredStakeTime = requiredStakeTimeInSeconds;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setYieldPerDay(uint amount) external onlyOwner {\r\n        yieldPerDay = amount;\r\n    }\r\n    \r\n    function setRequiredStakeTime(uint40 timeInSeconds) external onlyOwner {\r\n        _requiredStakeTime = timeInSeconds;\r\n    }\r\n\r\n    function setZenApesContractAddr(address contractAddress) external onlyOwner {\r\n        _setZenApesContractAddr(contractAddress);\r\n    }\r\n\r\n    function _setZenApesContractAddr(address _contractAddress) private {\r\n        _requireContract(_contractAddress);\r\n        zenApesContract = IZenApes(_contractAddress);\r\n    }\r\n\r\n    function setZenTokenContractAddr(address contractAddress) external onlyOwner {\r\n        _setZenTokenContractAddr(contractAddress);\r\n    }\r\n\r\n    function _setZenTokenContractAddr(address _contractAddress) private {\r\n        _requireContract(_contractAddress);\r\n        zenTokenContract = IZenToken(_contractAddress);\r\n    }\r\n\r\n    function _requireContract(address contractAddr) private view {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(contractAddr)\r\n        }\r\n        require(size > 0, \"Not A Contract!\");\r\n    }\r\n\r\n    function claim(uint tokenId) external {\r\n        StakedToken memory tokenInfo = stakedTokens[uint16(tokenId)];\r\n        require(tokenInfo.tokenOwner == msg.sender, \"Caller is not token owner!\");\r\n\r\n        uint claimAmount = _getClaimableAmount(tokenInfo);\r\n\r\n        require(claimAmount > 0, \"No claimable Tokens!\");\r\n\r\n        stakedTokens[uint16(tokenId)].lastClaimTimestamp = uint40(block.timestamp);\r\n        zenTokenContract.mintAsController(msg.sender, claimAmount);\r\n    }\r\n\r\n    function batchClaim(uint[] memory tokenIds) external {\r\n        uint length = tokenIds.length;\r\n        uint claimAmount;\r\n        uint cId;\r\n        StakedToken memory tokenInfo;\r\n\r\n        for (uint i; i < length;) {\r\n            assembly {\r\n                cId := mload(add(add(tokenIds, 0x20), mul(i, 0x20)))\r\n            }\r\n\r\n            tokenInfo = stakedTokens[uint16(cId)];\r\n            require(tokenInfo.tokenOwner == msg.sender, \"Caller is not token owner!\");\r\n\r\n            claimAmount += _getClaimableAmount(tokenInfo);\r\n            stakedTokens[uint16(cId)].lastClaimTimestamp = uint40(block.timestamp);\r\n            \r\n            unchecked { ++i; }\r\n        }\r\n\r\n        zenTokenContract.mintAsController(msg.sender, claimAmount);\r\n    }\r\n\r\n    function _getClaimableAmount(StakedToken memory tokenInfo) private view returns(uint claimAmount) {\r\n\r\n        if (tokenInfo.lastClaimTimestamp == 0) {\r\n            uint timeStaked;\r\n            unchecked { timeStaked = block.timestamp - tokenInfo.stakingTimestamp; }\r\n            uint requiredStakeTime = _requiredStakeTime;\r\n\r\n            require(timeStaked >= requiredStakeTime, \"Required stake time not met!\");\r\n            claimAmount = ((timeStaked - requiredStakeTime) / 86400) * yieldPerDay ;\r\n        } else {\r\n            uint secondsSinceLastClaim;\r\n            unchecked { secondsSinceLastClaim = block.timestamp - tokenInfo.lastClaimTimestamp; }\r\n            require(secondsSinceLastClaim > 86399, \"Cannot cliam zero tokens!\");\r\n\r\n            claimAmount = (secondsSinceLastClaim / 86400) * yieldPerDay ;\r\n        }\r\n    }\r\n\r\n\r\n    function stake(uint tokenId) external {\r\n        require(zenApesContract.ownerOf(tokenId) == msg.sender);\r\n        stakedTokens[uint16(tokenId)].stakingTimestamp = uint40(block.timestamp);\r\n        stakedTokens[uint16(tokenId)].tokenOwner = msg.sender;\r\n        unchecked { ++stakedTokensAmount[msg.sender]; }\r\n        zenApesContract.transferFrom(msg.sender, address(this), tokenId);\r\n    }\r\n\r\n    function stakeBatch(uint[] memory tokenIds) external {\r\n        uint amount = tokenIds.length;\r\n        uint cId;\r\n        for(uint i; i < amount;) {\r\n\r\n            assembly {\r\n                cId := mload(add(add(tokenIds, 0x20), mul(i, 0x20)))\r\n            }\r\n\r\n            require(zenApesContract.ownerOf(cId) == msg.sender);\r\n            stakedTokens[uint16(cId)].stakingTimestamp = uint40(block.timestamp);\r\n            stakedTokens[uint16(cId)].tokenOwner = msg.sender;\r\n\r\n            unchecked {\r\n                ++stakedTokensAmount[msg.sender];\r\n                ++i;\r\n            }\r\n        }\r\n        zenApesContract.multiTransferFrom(msg.sender, address(this), tokenIds);\r\n    }\r\n\r\n    function unstake(uint tokenId) external {\r\n        require(stakedTokens[uint16(tokenId)].tokenOwner == msg.sender);\r\n        delete stakedTokens[uint16(tokenId)];\r\n        unchecked { --stakedTokensAmount[msg.sender]; }\r\n        zenApesContract.transferFrom(address(this), msg.sender, tokenId);\r\n    }\r\n\r\n    function unstakeBatch(uint[] memory tokenIds) external {\r\n        uint amount = tokenIds.length;\r\n        uint cId;\r\n        for(uint i; i < amount;) {\r\n\r\n            assembly {\r\n                cId := mload(add(add(tokenIds, 0x20), mul(i, 0x20)))\r\n            }\r\n\r\n            require(stakedTokens[uint16(cId)].tokenOwner == msg.sender);\r\n            delete stakedTokens[uint16(cId)];\r\n\r\n            unchecked {\r\n                ++i;\r\n                --stakedTokensAmount[msg.sender]; \r\n            }\r\n        }\r\n        \r\n        zenApesContract.multiTransferFrom(address(this), msg.sender, tokenIds);\r\n    }\r\n\r\n    function ownerUnstakeBatch(uint[] memory tokenIds) external onlyOwner {\r\n        uint amount = tokenIds.length;\r\n        uint cId;\r\n        for(uint i; i < amount;) {\r\n\r\n            assembly {\r\n                cId := mload(add(add(tokenIds, 0x20), mul(i, 0x20)))\r\n            }\r\n\r\n            zenApesContract.transferFrom(address(this), stakedTokens[uint16(cId)].tokenOwner, cId);\r\n            delete stakedTokens[uint16(cId)];\r\n\r\n            unchecked {\r\n                ++i;\r\n                --stakedTokensAmount[msg.sender]; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function getTokenInfo(uint16 id) external view returns(uint40 stakingTimestamp, uint40 lastClaimTimestamp, address tokenOwner) {\r\n        return (stakedTokens[id].stakingTimestamp, stakedTokens[id].lastClaimTimestamp, stakedTokens[id].tokenOwner);\r\n    }\r\n\r\n    function getUserTokenInfo(address user) external view returns(uint[] memory stakingTimestamp, uint[] memory lastClaimTimestamp, uint[] memory tokenIds) {\r\n        uint x;\r\n        uint tokenAmount = zenApesContract.balanceOf(address(this));\r\n        uint stakedAmount = stakedTokensAmount[user];\r\n        StakedToken memory st;\r\n\r\n        stakingTimestamp = new uint[](stakedAmount);\r\n        lastClaimTimestamp = new uint[](stakedAmount);\r\n        tokenIds = new uint[](stakedAmount);\r\n\r\n        for(uint i = 1; i < tokenAmount;) {\r\n            st = stakedTokens[uint16(i)];\r\n            if(st.tokenOwner == user) {\r\n                stakingTimestamp[x] = st.stakingTimestamp;\r\n                lastClaimTimestamp[x] = st.lastClaimTimestamp;\r\n                tokenIds[x] = i;\r\n                unchecked { ++x; }\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    function getStakingSettings() external view returns (uint, uint40) {\r\n        return (yieldPerDay, _requiredStakeTime);\r\n    }\r\n\r\n    function getContractAddresses() external view returns(address zenApes, address zenToken) {\r\n        return(address(zenApesContract), address(zenTokenContract));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldAmountPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"requiredStakeTimeInSeconds\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"zenApesContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zenTokenContractAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"zenApes\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zenToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"stakingTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTokenInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakingTimestamp\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ownerUnstakeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"timeInSeconds\",\"type\":\"uint40\"}],\"name\":\"setRequiredStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setYieldPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setZenApesContractAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setZenTokenContractAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZenStakingV1", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000838804a3dd7c717396a68f94e736eaf76b911632000000000000000000000000884345a7b7e7ffd7f4298ad6115f5d5afb2f7660", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://da34482b034d9f02b6f5a2dcc372b85969dbe6815a6f24cc87e449a1cf53a044"}]}