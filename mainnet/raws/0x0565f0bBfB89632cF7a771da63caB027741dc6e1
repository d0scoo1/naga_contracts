{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/BrickedStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {BaseStrategy} from \\\"./lib/BaseStrategy.sol\\\";\\n\\ncontract BrickedStrategy is BaseStrategy {\\n    /// @dev Initialize the Strategy with security settings as well as tokens\\n    /// @notice Proxies will set any non constant variable you declare as default value\\n    /// @dev add any extra changeable variable at end of initializer as shown\\n    function initialize(address _vault, address _want) public initializer {\\n        require(_vault != address(0), \\\"address 0 invalid\\\");\\n        require(_want != address(0), \\\"address 0 invalid\\\");\\n        __BaseStrategy_init(_vault);\\n        want = _want;\\n    }\\n\\n    /// @dev Return the name of the strategy\\n    function getName() external pure override returns (string memory) {\\n        return \\\"BrickedStrategy\\\";\\n    }\\n\\n    /// @dev Return a list of protected tokens\\n    /// @notice It's very important all tokens that are meant to be in the strategy to be marked as protected\\n    /// @notice this provides security guarantees to the depositors they can't be sweeped away\\n    function getProtectedTokens()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        address[] memory protectedTokens = new address[](1);\\n        protectedTokens[0] = want;\\n        return protectedTokens;\\n    }\\n\\n    /// @dev Deposit `_amount` of want, investing it to earn yield\\n    // solhint-disable-next-line no-empty-blocks\\n    function _deposit(uint256 _amount) internal override {\\n        // No-op\\n    }\\n\\n    /// @dev Withdraw all funds, this is used for migrations, most of the time for emergency reasons\\n    // solhint-disable-next-line no-empty-blocks\\n    function _withdrawAll() internal override {\\n        // No-op\\n    }\\n\\n    /// @dev Withdraw `_amount` of want, so that it can be sent to the vault / depositor\\n    /// @notice just unlock the funds and return the amount you could unlock\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        // No-op\\n        return _amount;\\n    }\\n\\n    /// @dev Does this function require `tend` to be called?\\n    function _isTendable() internal pure override returns (bool) {\\n        return false; // Change to true if the strategy should be tended\\n    }\\n\\n    function _harvest()\\n        internal\\n        override\\n        returns (TokenAmount[] memory harvested)\\n    {\\n        // No-op as we don't do anything with funds\\n\\n        // Nothing harvested, we have 2 tokens, return both 0s\\n        harvested = new TokenAmount[](1);\\n        harvested[0] = TokenAmount(want, 0);\\n\\n        // keep this to get paid!\\n        _reportToVault(0);\\n\\n        return harvested;\\n    }\\n\\n    // Example tend is a no-op which returns the values, could also just revert\\n    function _tend() internal override returns (TokenAmount[] memory tended) {\\n        // Nothing tended\\n        tended = new TokenAmount[](1);\\n        tended[0] = TokenAmount(want, 0);\\n        return tended;\\n    }\\n\\n    /// @dev Return the balance (in want) that the strategy has invested somewhere\\n    function balanceOfPool() public view override returns (uint256) {\\n        // No pool\\n        return 0;\\n    }\\n\\n    /// @dev Return the balance of rewards that the strategy has accrued\\n    /// @notice Used for offChain APY and Harvest Health monitoring\\n    function balanceOfRewards()\\n        external\\n        view\\n        override\\n        returns (TokenAmount[] memory rewards)\\n    {\\n        // Rewards are 0\\n        rewards = new TokenAmount[](1);\\n        rewards[0] = TokenAmount(want, 0);\\n        return rewards;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/badger/IVault.sol\\\";\\n\\n/*\\n    ===== Badger Base Strategy =====\\n    Common base class for all Sett strategies\\n\\n    Changelog\\n    V1.1\\n    - Verify amount unrolled from strategy positions on withdraw() is within a threshold relative to the requested amount as a sanity check\\n    - Add version number which is displayed with baseStrategyVersion(). If a strategy does not implement this function, it can be assumed to be 1.0\\n\\n    V1.2\\n    - Remove idle want handling from base withdraw() function. This should be handled as the strategy sees fit in _withdrawSome()\\n\\n    V1.5\\n    - No controller as middleman. The Strategy directly interacts with the vault\\n    - withdrawToVault would withdraw all the funds from the strategy and move it into vault\\n    - strategy would take the actors from the vault it is connected to\\n        - SettAccessControl removed\\n    - fees calculation for autocompounding rewards moved to vault\\n    - autoCompoundRatio param added to keep a track in which ratio harvested rewards are being autocompounded\\n*/\\n\\nabstract contract BaseStrategy is PausableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256 public constant MAX_BPS = 10_000; // MAX_BPS in terms of BPS = 100%\\n\\n    address public want; // Token used for deposits\\n    address public vault; // address of the vault the strategy is connected to\\n    uint256 public withdrawalMaxDeviationThreshold; // max allowed slippage when withdrawing\\n\\n    /// @notice percentage of rewards converted to want\\n    /// @dev converting of rewards to want during harvest should take place in this ratio\\n    /// @dev change this ratio if rewards are converted in a different percentage\\n    /// value ranges from 0 to 10_000\\n    /// 0: keeping 100% harvest in reward tokens\\n    /// 10_000: converting all rewards tokens to want token\\n    uint256 public autoCompoundRatio; // NOTE: I believe this is unused\\n\\n    // NOTE: You have to set autoCompoundRatio in the initializer of your strategy\\n\\n    event SetWithdrawalMaxDeviationThreshold(uint256 newMaxDeviationThreshold);\\n\\n    // Return value for harvest, tend and balanceOfRewards\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Initializes BaseStrategy. Can only be called once.\\n    ///         Make sure to call it from the initializer of the derived strategy.\\n    /// @param _vault Address of the vault that the strategy reports to.\\n    function __BaseStrategy_init(address _vault)\\n        public\\n        onlyInitializing\\n        whenNotPaused\\n    {\\n        require(_vault != address(0), \\\"Address 0\\\");\\n        __Pausable_init();\\n\\n        vault = _vault;\\n\\n        withdrawalMaxDeviationThreshold = 50; // BPS\\n        // NOTE: See above\\n        autoCompoundRatio = 10_000;\\n    }\\n\\n    // ===== Modifiers =====\\n\\n    /// @notice Checks whether a call is from governance.\\n    /// @dev For functions that only the governance should be able to call\\n    ///      Most of the time setting setters, or to rescue/sweep funds\\n    function _onlyGovernance() internal view {\\n        require(msg.sender == governance(), \\\"onlyGovernance\\\");\\n    }\\n\\n    /// @notice Checks whether a call is from strategist or governance.\\n    /// @dev For functions that only known benign entities should call\\n    function _onlyGovernanceOrStrategist() internal view {\\n        require(\\n            msg.sender == strategist() || msg.sender == governance(),\\n            \\\"onlyGovernanceOrStrategist\\\"\\n        );\\n    }\\n\\n    /// @notice Checks whether a call is from keeper or governance.\\n    /// @dev For functions that only known benign entities should call\\n    function _onlyAuthorizedActors() internal view {\\n        require(\\n            msg.sender == keeper() || msg.sender == governance(),\\n            \\\"onlyAuthorizedActors\\\"\\n        );\\n    }\\n\\n    /// @notice Checks whether a call is from the vault.\\n    /// @dev For functions that only the vault should use\\n    function _onlyVault() internal view {\\n        require(msg.sender == vault, \\\"onlyVault\\\");\\n    }\\n\\n    /// @notice Checks whether a call is from keeper, governance or the vault.\\n    /// @dev Modifier used to check if the function is being called by a benign entity\\n    function _onlyAuthorizedActorsOrVault() internal view {\\n        require(\\n            msg.sender == keeper() ||\\n                msg.sender == governance() ||\\n                msg.sender == vault,\\n            \\\"onlyAuthorizedActorsOrVault\\\"\\n        );\\n    }\\n\\n    /// @notice Checks whether a call is from guardian or governance.\\n    /// @dev Modifier used exclusively for pausing\\n    function _onlyAuthorizedPausers() internal view {\\n        require(\\n            msg.sender == guardian() || msg.sender == governance(),\\n            \\\"onlyPausers\\\"\\n        );\\n    }\\n\\n    /// ===== View Functions =====\\n    /// @notice Used to track the deployed version of BaseStrategy.\\n    /// @return Current version of the contract.\\n    function baseStrategyVersion() external pure returns (string memory) {\\n        return \\\"1.5\\\";\\n    }\\n\\n    /// @notice Gives the balance of want held idle in the Strategy.\\n    /// @dev Public because used internally for accounting\\n    /// @return Balance of want held idle in the strategy.\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20Upgradeable(want).balanceOf(address(this));\\n    }\\n\\n    /// @notice Gives the total balance of want managed by the strategy.\\n    ///         This includes all want deposited to active strategy positions as well as any idle want in the strategy.\\n    /// @return Total balance of want managed by the strategy.\\n    function balanceOf() external view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    /// @notice Tells whether the strategy is supposed to be tended.\\n    /// @dev This is usually a constant. The harvest keeper would only call `tend` if this is true.\\n    /// @return Boolean indicating whether strategy is supposed to be tended or not.\\n    function isTendable() external pure returns (bool) {\\n        return _isTendable();\\n    }\\n\\n    function _isTendable() internal pure virtual returns (bool);\\n\\n    /// @notice Checks whether a token is a protected token.\\n    ///         Protected tokens are managed by the strategy and can't be transferred/sweeped.\\n    /// @return Boolean indicating whether the token is a protected token.\\n    function isProtectedToken(address token) public view returns (bool) {\\n        require(token != address(0), \\\"Address 0\\\");\\n\\n        address[] memory protectedTokens = getProtectedTokens();\\n        for (uint256 i = 0; i < protectedTokens.length; i++) {\\n            if (token == protectedTokens[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Fetches the governance address from the vault.\\n    /// @return The governance address.\\n    function governance() public view returns (address) {\\n        return IVault(vault).governance();\\n    }\\n\\n    /// @notice Fetches the strategist address from the vault.\\n    /// @return The strategist address.\\n    function strategist() public view returns (address) {\\n        return IVault(vault).strategist();\\n    }\\n\\n    /// @notice Fetches the keeper address from the vault.\\n    /// @return The keeper address.\\n    function keeper() public view returns (address) {\\n        return IVault(vault).keeper();\\n    }\\n\\n    /// @notice Fetches the guardian address from the vault.\\n    /// @return The guardian address.\\n    function guardian() public view returns (address) {\\n        return IVault(vault).guardian();\\n    }\\n\\n    /// ===== Permissioned Actions: Governance =====\\n\\n    /// @notice Sets the max withdrawal deviation (percentage loss) that is acceptable to the strategy.\\n    ///         This can only be called by governance.\\n    /// @dev This is used as a slippage check against the actual funds withdrawn from strategy positions.\\n    ///      See `withdraw`.\\n    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external {\\n        _onlyGovernance();\\n        require(_threshold <= MAX_BPS, \\\"_threshold should be <= MAX_BPS\\\");\\n        withdrawalMaxDeviationThreshold = _threshold;\\n        emit SetWithdrawalMaxDeviationThreshold(_threshold);\\n    }\\n\\n    /// @notice Deposits any idle want in the strategy into positions.\\n    ///         This can be called by either the vault, keeper or governance.\\n    ///         Note that deposits don't work when the strategy is paused.\\n    /// @dev See `deposit`.\\n    function earn() external whenNotPaused {\\n        deposit();\\n    }\\n\\n    /// @notice Deposits any idle want in the strategy into positions.\\n    ///         This can be called by either the vault, keeper or governance.\\n    ///         Note that deposits don't work when the strategy is paused.\\n    /// @dev Is basically the same as tend, except without custom code for it\\n    function deposit() public whenNotPaused {\\n        _onlyAuthorizedActorsOrVault();\\n        uint256 _amount = IERC20Upgradeable(want).balanceOf(address(this));\\n        if (_amount > 0) {\\n            _deposit(_amount);\\n        }\\n    }\\n\\n    // ===== Permissioned Actions: Vault =====\\n\\n    /// @notice Withdraw all funds from the strategy to the vault, unrolling all positions.\\n    ///         This can only be called by the vault.\\n    /// @dev This can be called even when paused, and strategist can trigger this via the vault.\\n    ///      The idea is that this can allow recovery of funds back to the strategy faster.\\n    ///      The risk is that if _withdrawAll causes a loss, this can be triggered.\\n    ///      However the loss could only be triggered once (just like if governance called)\\n    ///      as pausing the strats would prevent earning again.\\n    function withdrawToVault() external {\\n        _onlyVault();\\n\\n        _withdrawAll();\\n\\n        uint256 balance = IERC20Upgradeable(want).balanceOf(address(this));\\n        _transferToVault(balance);\\n    }\\n\\n    /// @notice Withdraw partial funds from the strategy to the vault, unrolling from strategy positions as necessary.\\n    ///         This can only be called by the vault.\\n    ///         Note that withdraws don't work when the strategy is paused.\\n    /// @dev If the strategy fails to recover sufficient funds (defined by `withdrawalMaxDeviationThreshold`),\\n    ///      the withdrawal would fail so that this unexpected behavior can be investigated.\\n    /// @param _amount Amount of funds required to be withdrawn.\\n    function withdraw(uint256 _amount) external whenNotPaused {\\n        _onlyVault();\\n        require(_amount != 0, \\\"Amount 0\\\");\\n\\n        // Withdraw from strategy positions, typically taking from any idle want first.\\n        _withdrawSome(_amount);\\n        uint256 _postWithdraw = IERC20Upgradeable(want).balanceOf(\\n            address(this)\\n        );\\n\\n        // Sanity check: Ensure we were able to retrieve sufficient want from strategy positions\\n        // If we end up with less than the amount requested, make sure it does not deviate beyond a maximum threshold\\n        if (_postWithdraw < _amount) {\\n            uint256 diff = _diff(_amount, _postWithdraw);\\n\\n            // Require that difference between expected and actual values is less than the deviation threshold percentage\\n            require(\\n                diff <=\\n                    _amount.mul(withdrawalMaxDeviationThreshold).div(MAX_BPS),\\n                \\\"withdraw-exceed-max-deviation-threshold\\\"\\n            );\\n        }\\n\\n        // Return the amount actually withdrawn if less than amount requested\\n        uint256 _toWithdraw = MathUpgradeable.min(_postWithdraw, _amount);\\n\\n        // Transfer remaining to Vault to handle withdrawal\\n        _transferToVault(_toWithdraw);\\n    }\\n\\n    // Discussion: https://discord.com/channels/785315893960900629/837083557557305375\\n    /// @notice Sends balance of any extra token earned by the strategy (from airdrops, donations etc.) to the vault.\\n    ///         The `_token` should be different from any tokens managed by the strategy.\\n    ///         This can only be called by the vault.\\n    /// @dev This is a counterpart to `_processExtraToken`.\\n    ///      This is for tokens that the strategy didn't expect to receive. Instead of sweeping, we can directly\\n    ///      emit them via the badgerTree. This saves time while offering security guarantees.\\n    ///      No address(0) check because _onlyNotProtectedTokens does it.\\n    ///      This is not a rug vector as it can't use protected tokens.\\n    /// @param _token Address of the token to be emitted.\\n    function emitNonProtectedToken(address _token) external {\\n        _onlyVault();\\n        _onlyNotProtectedTokens(_token);\\n        IERC20Upgradeable(_token).safeTransfer(\\n            vault,\\n            IERC20Upgradeable(_token).balanceOf(address(this))\\n        );\\n        IVault(vault).reportAdditionalToken(_token);\\n    }\\n\\n    /// @notice Withdraw the balance of a non-protected token to the vault.\\n    ///         This can only be called by the vault.\\n    /// @dev Should only be used in an emergency to sweep any asset.\\n    ///      This is the version that sends the assets to governance.\\n    ///      No address(0) check because _onlyNotProtectedTokens does it.\\n    /// @param _asset Address of the token to be withdrawn.\\n    function withdrawOther(address _asset) external {\\n        _onlyVault();\\n        _onlyNotProtectedTokens(_asset);\\n        IERC20Upgradeable(_asset).safeTransfer(\\n            vault,\\n            IERC20Upgradeable(_asset).balanceOf(address(this))\\n        );\\n    }\\n\\n    /// ===== Permissioned Actions: Authorized Contract Pausers =====\\n\\n    /// @notice Pauses the strategy.\\n    ///         This can be called by either guardian or governance.\\n    /// @dev Check the `onlyWhenPaused` modifier for functionality that is blocked when pausing\\n    function pause() external {\\n        _onlyAuthorizedPausers();\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the strategy.\\n    ///         This can only be called by governance (usually a multisig behind a timelock).\\n    function unpause() external {\\n        _onlyGovernance();\\n        _unpause();\\n    }\\n\\n    /// ===== Internal Helper Functions =====\\n\\n    /// @notice Transfers `_amount` of want to the vault.\\n    /// @dev Strategy should have idle funds >= `_amount`.\\n    /// @param _amount Amount of want to be transferred to the vault.\\n    function _transferToVault(uint256 _amount) internal {\\n        if (_amount > 0) {\\n            IERC20Upgradeable(want).safeTransfer(vault, _amount);\\n        }\\n    }\\n\\n    /// @notice Report an harvest to the vault.\\n    /// @param _harvestedAmount Amount of want token autocompounded during harvest.\\n    function _reportToVault(uint256 _harvestedAmount) internal {\\n        IVault(vault).reportHarvest(_harvestedAmount);\\n    }\\n\\n    /// @notice Sends balance of an additional token (eg. reward token) earned by the strategy to the vault.\\n    ///         This should usually be called exclusively on protectedTokens.\\n    ///         Calls `Vault.reportAdditionalToken` to process fees and forward amount to badgerTree to be emitted.\\n    /// @dev This is how you emit tokens in V1.5\\n    ///      After calling this function, the tokens are gone, sent to fee receivers and badgerTree\\n    ///      This is a rug vector as it allows to move funds to the tree\\n    ///      For this reason, it is recommended to verify the tree is the badgerTree from the registry\\n    ///      and also check for this to be used exclusively on harvest, exclusively on protectedTokens.\\n    /// @param _token Address of the token to be emitted.\\n    /// @param _amount Amount of token to transfer to vault.\\n    function _processExtraToken(address _token, uint256 _amount) internal {\\n        require(_token != want, \\\"Not want, use _reportToVault\\\");\\n        require(_token != address(0), \\\"Address 0\\\");\\n        require(_amount != 0, \\\"Amount 0\\\");\\n\\n        IERC20Upgradeable(_token).safeTransfer(vault, _amount);\\n        IVault(vault).reportAdditionalToken(_token);\\n    }\\n\\n    /// @notice Utility function to diff two numbers, expects higher value in first position\\n    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(a >= b, \\\"a should be >= b\\\");\\n        return a.sub(b);\\n    }\\n\\n    // ===== Abstract Functions: To be implemented by specific Strategies =====\\n\\n    /// @dev Internal deposit logic to be implemented by a derived strategy.\\n    /// @param _want Amount of want token to be deposited into the strategy.\\n    function _deposit(uint256 _want) internal virtual;\\n\\n    /// @notice Checks if a token is not used in yield process.\\n    /// @param _asset Address of token.\\n    function _onlyNotProtectedTokens(address _asset) internal view {\\n        require(!isProtectedToken(_asset), \\\"_onlyNotProtectedTokens\\\");\\n    }\\n\\n    /// @notice Gives the list of protected tokens.\\n    /// @return Array of protected tokens.\\n    function getProtectedTokens()\\n        public\\n        view\\n        virtual\\n        returns (address[] memory);\\n\\n    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible.\\n    function _withdrawAll() internal virtual;\\n\\n    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\\n    ///      Should ideally use idle want in the strategy before attempting to exit strategy positions.\\n    /// @param _amount Amount of want token to be withdrawn from the strategy.\\n    /// @return Withdrawn amount from the strategy.\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    /// @notice Realize returns from strategy positions.\\n    ///         This can only be called by keeper or governance.\\n    ///         Note that harvests don't work when the strategy is paused.\\n    /// @dev Returns can be reinvested into positions, or distributed in another fashion.\\n    /// @return harvested An array of `TokenAmount` containing the address and amount harvested for each token.\\n    function harvest()\\n        external\\n        whenNotPaused\\n        returns (TokenAmount[] memory harvested)\\n    {\\n        _onlyAuthorizedActors();\\n        return _harvest();\\n    }\\n\\n    /// @dev Virtual function that should be overridden with the logic for harvest.\\n    ///      Should report any want or non-want gains to the vault.\\n    ///      Also see `harvest`.\\n    function _harvest()\\n        internal\\n        virtual\\n        returns (TokenAmount[] memory harvested);\\n\\n    /// @notice Tend strategy positions as needed to maximize returns.\\n    ///         This can only be called by keeper or governance.\\n    ///         Note that tend doesn't work when the strategy is paused.\\n    /// @dev Is only called by the keeper when `isTendable` is true.\\n    /// @return tended An array of `TokenAmount` containing the address and amount tended for each token.\\n    function tend()\\n        external\\n        whenNotPaused\\n        returns (TokenAmount[] memory tended)\\n    {\\n        _onlyAuthorizedActors();\\n\\n        return _tend();\\n    }\\n\\n    /// @dev Virtual function that should be overridden with the logic for tending.\\n    ///      Also see `tend`.\\n    function _tend() internal virtual returns (TokenAmount[] memory tended);\\n\\n    /// @notice Fetches the name of the strategy.\\n    /// @dev Should be user-friendly and easy to read.\\n    /// @return Name of the strategy.\\n    function getName() external pure virtual returns (string memory);\\n\\n    /// @notice Gives the balance of want held in strategy positions.\\n    /// @return Balance of want held in strategy positions.\\n    function balanceOfPool() public view virtual returns (uint256);\\n\\n    /// @notice Gives the total amount of pending rewards accrued for each token.\\n    /// @dev Should take into account all reward tokens.\\n    /// @return rewards An array of `TokenAmount` containing the address and amount of each reward token.\\n    function balanceOfRewards()\\n        external\\n        view\\n        virtual\\n        returns (TokenAmount[] memory rewards);\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/badger/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0 <=0.9.0;\\n\\nimport {IERC20} from \\\"../erc20/IERC20.sol\\\";\\n\\ninterface IVault is IERC20 {\\n    function token() external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function reportHarvest(uint256 _harvestedAmount) external;\\n\\n    function reportAdditionalToken(address _token) external;\\n\\n    // Fees\\n    function performanceFeeGovernance() external view returns (uint256);\\n\\n    function performanceFeeStrategist() external view returns (uint256);\\n\\n    function withdrawalFee() external view returns (uint256);\\n\\n    function managementFee() external view returns (uint256);\\n\\n    // Actors\\n    function governance() external view returns (address);\\n\\n    function keeper() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function strategist() external view returns (address);\\n\\n    // External\\n    function deposit(uint256 _amount) external;\\n\\n    function depositFor(address _recipient, uint256 _amount) external;\\n\\n    // View\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/erc20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0 <=0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxDeviationThreshold\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalMaxDeviationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"__BaseStrategy_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoCompoundRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStrategy.TokenAmount[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStrategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emitNonProtectedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtectedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStrategy.TokenAmount[]\",\"name\":\"harvested\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isProtectedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTendable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalMaxDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStrategy.TokenAmount[]\",\"name\":\"tended\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalMaxDeviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BrickedStrategy", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}