{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CheersUpPeriodStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/*\\n ____                   _           _         \\n|  _ \\\\                 | |         | |        \\n| |_) | __ _ ___  ___  | |     __ _| |__  ___ \\n|  _ < / _` / __|/ _ \\\\ | |    / _` | '_ \\\\/ __|\\n| |_) | (_| \\\\__ \\\\  __/ | |___| (_| | |_) \\\\__ \\\\\\n|____/ \\\\__,_|___/\\\\___| |______\\\\__,_|_.__/|___/\\n                                              \\n*/\\n\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title CheersUpPeriodStake\\n * @author BaseLabs\\n */\\ncontract CheersUpPeriodStake is Ownable, ReentrancyGuard {\\n    event StakeStarted(uint256 indexed tokenId, address indexed account);\\n    event StakeStopped(uint256 indexed tokenId, address indexed account);\\n    event StakeInterrupted(uint256 indexed tokenId);\\n    event StakeConfigChanged(StakeConfig config);\\n    event TransferUnstakingToken(uint256 indexed tokenId, address indexed account);\\n    event StakingTokenTransfered(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Withdraw(address indexed account, uint256 amount);\\n\\n    struct StakeStatus {\\n        address owner;\\n        uint256 lastStartTime;\\n        uint256 total;\\n    }\\n    struct StakeConfig {\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n    struct StakeReward {\\n        bool isStaking;\\n        uint256 total;\\n        uint256 current;\\n        address owner;\\n    }\\n    string public name = \\\"Cheers UP Period Stake\\\";\\n    string public symbol = \\\"CUPS\\\";\\n    StakeConfig public stakeConfig;\\n    address public cheersUpPeriodContractAddress;\\n    mapping(uint256 => StakeStatus) private _stakeStatuses;\\n    IERC721 cheersUpPeriodContract;\\n\\n    constructor(address cheersUpPeriodContractAddress_, StakeConfig memory stakeConfig_) {\\n        require(cheersUpPeriodContractAddress_ != address(0), \\\"cheers up period contract address is required\\\");\\n        cheersUpPeriodContractAddress = cheersUpPeriodContractAddress_;\\n        cheersUpPeriodContract = IERC721(cheersUpPeriodContractAddress);\\n        stakeConfig = stakeConfig_;\\n    }\\n\\n    /***********************************|\\n    |               Core                |\\n    |__________________________________*/\\n\\n    /**\\n     * @notice _stake is used to set the stake state of NFT.\\n     * @param owner_ the owner of the token\\n     * @param tokenId_ the tokenId of the token\\n     */\\n    function _stake(address owner_, uint256 tokenId_) internal {\\n        require(isStakeEnabled(), \\\"stake is not allowed\\\");\\n        StakeStatus storage status = _stakeStatuses[tokenId_];\\n        require(status.lastStartTime == 0, \\\"token is staking\\\");\\n        status.owner = owner_;\\n        status.lastStartTime = block.timestamp;\\n        emit StakeStarted(tokenId_, owner_);\\n    }\\n\\n    /**\\n     * @notice unstake is used to release the stake state of a batch of tokenId.\\n     * @param tokenIds_ the tokenIds to operate\\n     */\\n    function unstake(uint256[] calldata tokenIds_) external nonReentrant {\\n        for (uint256 i; i < tokenIds_.length; i++) {\\n            _unstake(tokenIds_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice _unstake is used to release the stake status of a token.\\n     * @param tokenId_ the tokenId to operate\\n     */\\n    function _unstake(uint256 tokenId_) internal {\\n        StakeStatus storage status = _stakeStatuses[tokenId_];\\n        require(status.lastStartTime > 0, \\\"token is not staking\\\");\\n        require(status.owner == msg.sender || owner() == msg.sender, \\\"not the owner\\\");\\n        cheersUpPeriodContract.safeTransferFrom(address(this), status.owner, tokenId_);\\n        status.total += block.timestamp - status.lastStartTime;\\n        status.lastStartTime = 0;\\n        status.owner = address(0);\\n        emit StakeStopped(tokenId_, msg.sender);\\n    }\\n\\n    /**\\n     * @notice safeTransferWhileStaking is used to transfer NFT ownership in the staked state.\\n     * @param to_ the address to which the `token owner` will be transferred\\n     * @param tokenId_ the tokenId to operate\\n     */\\n    function safeTransferWhileStaking(address to_, uint256 tokenId_) external nonReentrant {\\n        StakeStatus storage status = _stakeStatuses[tokenId_];\\n        require(status.lastStartTime > 0, \\\"token is not staking\\\");\\n        require(status.owner == msg.sender, \\\"not the owner\\\");\\n        status.owner = to_;\\n        emit StakingTokenTransfered(msg.sender, to_, tokenId_);\\n    }\\n\\n\\n    /***********************************|\\n    |             Getter                |\\n    |__________________________________*/\\n\\n    /**\\n     * @notice getStakeReward is used to get the stake status of the token.\\n     * @param tokenId_ tokenId\\n     */\\n    function getStakeReward(uint256 tokenId_) external view returns (StakeReward memory) {\\n        StakeStatus memory status = _stakeStatuses[tokenId_];\\n        StakeReward memory reward;\\n        if (status.lastStartTime != 0) {\\n            reward.isStaking = true;\\n            reward.owner = status.owner;\\n            reward.current = block.timestamp - status.lastStartTime;\\n        }\\n        reward.total = status.total + reward.current;\\n        return reward;\\n    }\\n    \\n    /**\\n     * @notice isStakeEnabled is used to return whether the stake has been enabled.\\n     */\\n    function isStakeEnabled() public view returns (bool) {\\n        if (stakeConfig.endTime > 0 && block.timestamp > stakeConfig.endTime) {\\n            return false;\\n        }\\n        return stakeConfig.startTime > 0 && block.timestamp > stakeConfig.startTime;\\n    }\\n\\n    /***********************************|\\n    |              Admin                |\\n    |__________________________________*/\\n\\n    /**\\n     * @notice setStakeConfig is used to modify the stake configuration.\\n     * @param config_ the stake config\\n     */\\n    function setStakeConfig(StakeConfig calldata config_) external onlyOwner {\\n        stakeConfig = config_;\\n        emit StakeConfigChanged(stakeConfig);\\n    }\\n\\n    /**\\n     * @notice interruptStake is used to forcibly interrupt NFTs in the stake state\\n     * and return them to their original owners.\\n     * This process is under the supervision of the community.\\n     * caution: Because safeTransferFrom is called for refund (when the target address is a contract,  its onERC721Received logic will be triggered), \\n     * be sure to set a reasonable GasLimit before calling this method, or check adequately if the target address is a malicious contract to \\n     * prevent bear the high gas cost accidentally.\\n     * @param tokenIds_ the tokenId list\\n     */\\n    function interruptStake(uint256[] calldata tokenIds_) external onlyOwner {\\n        for (uint256 i; i < tokenIds_.length; i++) {\\n            uint256 tokenId = tokenIds_[i];\\n            _unstake(tokenId);\\n            emit StakeInterrupted(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice transferUnstakingTokens is used to return the NFT that was mistakenly transferred into the contract to the original owner.\\n     * This contract realizes the stake feature through \\\"safeTransferFrom\\\".\\n     * This method is used to prevent some users from mistakenly using transferFrom (instead of safeTransferFrom) to transfer NFT into the contract.\\n     * caution: Because safeTransferFrom is called for refund (when the target address is a contract,  its onERC721Received logic will be triggered), \\n     * be sure to set a reasonable GasLimit before calling this method, or check adequately if the target address is a malicious contract to \\n     * prevent bear the high gas cost accidentally.\\n     * @param contractAddress_ contract address of NFT\\n     * @param tokenIds_ the tokenId list\\n     * @param accounts_ the address list\\n     */\\n    function transferUnstakingTokens(address contractAddress_, uint256[] calldata tokenIds_, address[] calldata accounts_) external onlyOwner {\\n        require(tokenIds_.length == accounts_.length, \\\"tokenIds_ and accounts_ length mismatch\\\");\\n        require(tokenIds_.length > 0, \\\"no tokenId\\\");\\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\\n            uint256 tokenId = tokenIds_[i];\\n            address account = accounts_[i];\\n            if (address(this) == contractAddress_) {\\n                require(_stakeStatuses[tokenId].lastStartTime == 0, \\\"token is staking\\\");\\n            }\\n            IERC721(contractAddress_).safeTransferFrom(address(this), account, tokenId);\\n            emit TransferUnstakingToken(tokenId, account);\\n        }\\n    }\\n\\n    /**\\n     * @notice issuer withdraws the ETH temporarily stored in the contract through this method.\\n     */\\n    function withdraw() external onlyOwner nonReentrant {\\n        uint256 balance = address(this).balance;\\n        payable(_msgSender()).transfer(balance);\\n        emit Withdraw(_msgSender(), balance);\\n    }\\n\\n    /***********************************|\\n    |               Hook                |\\n    |__________________________________*/\\n\\n    /**\\n     * @notice onERC721Received is a hook function, which is the key to implementing the stake feature.\\n     * When the user calls the safeTransferFrom method to transfer the NFT to the current contract, \\n     * onERC721Received will be called, and the stake state is modified at this time.\\n     */\\n    function onERC721Received(\\n        address,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes memory\\n    ) public returns (bytes4) {\\n        require(msg.sender == cheersUpPeriodContractAddress, \\\"this contract is not allowed\\\");\\n        _stake(_from, _tokenId);\\n        return this.onERC721Received.selector;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cheersUpPeriodContractAddress_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct CheersUpPeriodStake.StakeConfig\",\"name\":\"stakeConfig_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CheersUpPeriodStake.StakeConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"StakeConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StakeInterrupted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"StakeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"StakeStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StakingTokenTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TransferUnstakingToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cheersUpPeriodContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getStakeReward\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isStaking\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct CheersUpPeriodStake.StakeReward\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"interruptStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"safeTransferWhileStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct CheersUpPeriodStake.StakeConfig\",\"name\":\"config_\",\"type\":\"tuple\"}],\"name\":\"setStakeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"}],\"name\":\"transferUnstakingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CheersUpPeriodStake", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a5bb28eecc6134f89745e34ec6ab5d5bcb16dad70000000000000000000000000000000000000000000000000000000062b3d7300000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}