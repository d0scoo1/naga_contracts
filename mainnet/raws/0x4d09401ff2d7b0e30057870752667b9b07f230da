{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.17;\r\n\r\n//SmartVows Marriage Smart Contract for Partner 1 and Partner 2\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Util{\r\n\r\n    function Util() public{}\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function toString(address x) internal pure returns (string) {\r\n        bytes memory b = new bytes(20);\r\n        for (uint i = 0; i < 20; i++)\r\n        b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n        return string(b);\r\n    }\r\n}\r\n\r\ncontract SmartVows is Ownable, Util {\r\n\r\n    // Names of marriage partners\r\n    string public partner1_name;\r\n    string public partner2_name;\r\n    \r\n    // Partners' eth address\r\n    address public partner1_address;\r\n    address public partner2_address;\r\n    \r\n    // Partners Vows\r\n    string public partner1_vows;\r\n    string public partner2_vows;\r\n\r\n    // Marriage Date\r\n    string public marriageDate;\r\n\r\n    //Marital Status\r\n    string public maritalStatus;\r\n\r\n    // Couple Image Hash\r\n    bytes public coupleImageIPFShash;\r\n\r\n    // Marriage License Image Hash\r\n    bytes public marriageLicenceImageIPFShash;\r\n\r\n    // prenup Text\r\n    string public prenupAgreement;\r\n    \r\n    //Last Will and Testaments\r\n    string public partner1_will;\r\n    string public partner2_will;\r\n\r\n    // Partners Signed Marriage Contract\r\n    bool public partner1_signed;\r\n    bool public partner2_signed;\r\n    \r\n    // Partners Voted to update the prenup\r\n    bool public partner1_voted_update_prenup;\r\n    bool public partner2_voted_update_prenup;\r\n    \r\n    //Partners Voted to update the marriage status\r\n    bool public partner1_voted_update_marriage_status;\r\n    bool public partner2_voted_update_marriage_status;\r\n    \r\n    // Did both partners signed the contract\r\n     bool public is_signed;\r\n    \r\n    // Officiant\r\n    string public officiant;\r\n\r\n    // Witnesses\r\n    string public witnesses;\r\n\r\n    // Location of marriage\r\n    string public location;\r\n    \r\n    Event[] public lifeEvents;\r\n\r\n    struct Event {\r\n        uint date;\r\n        string name;\r\n        string description;\r\n        string mesg;\r\n    }\r\n    \r\n    uint public eventcount; \r\n\r\n    // Declare Life event structure\r\n    event LifeEvent(string name, string description, string mesg);\r\n\r\n    contractEvent[] public contractEvents;\r\n\r\n    struct contractEvent {\r\n        uint ce_date;\r\n        string ce_description;\r\n        string ce_mesg;\r\n    }\r\n    \r\n    uint public contracteventcount; \r\n\r\n    // Declare Contract event structure\r\n    event ContractEvent(string ce_description, string ce_mesg);\r\n\r\n    function SmartVows(string _partner1, address _partner1_address, string _partner2, address _partner2_address, string _marriageDate, string _maritalStatus, string _officiant, string _witnesses, string _location, string coupleImageIPFShash, string marriageLicenceImageIPFShash) public{        \r\n        partner1_name = _partner1;\r\n        partner2_name = _partner2;  \r\n        partner1_address=_partner1_address;\r\n        partner2_address=_partner2_address;\r\n        marriageDate =_marriageDate;\r\n        maritalStatus = _maritalStatus;\r\n        officiant=_officiant;\r\n        witnesses=_witnesses;\r\n        location=_location;\r\n        //coupleImageIPFShash=_coupleImageIPFShash;\r\n        //marriageLicenceImageIPFShash=_marriageLicenceImageIPFShash;\r\n\r\n        //Record contract creation in events\r\n        saveContractEvent(\"Blockchain marriage smart contract created\",\"Marriage smart contract added to the blockchain\");\r\n        \r\n    }\r\n\r\n    // Add Life event, either partner can update\r\n    function addLifeEvent(string name, string description, string mesg) public{\r\n        require(msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address);\r\n        saveLifeEvent(name, description, mesg);\r\n    }\r\n\r\n    function saveLifeEvent(string name, string description, string mesg) private {\r\n        lifeEvents.push(Event(block.timestamp, name, description, mesg));\r\n        LifeEvent(name, description, mesg);\r\n        eventcount++;\r\n    }\r\n    \r\n    \r\n    function saveContractEvent(string description, string mesg) private {\r\n        contractEvents.push(contractEvent(block.timestamp, description, mesg));\r\n        ContractEvent(description, mesg);\r\n        contracteventcount++;\r\n    }\r\n\r\n    \r\n    // Update partner 1 vows only once\r\n    function updatePartner1_vows(string _partner1_vows) public {\r\n        require((msg.sender == owner || msg.sender == partner1_address) && (bytes(partner1_vows).length == 0));\r\n        partner1_vows = _partner1_vows;\r\n    }\r\n\r\n    // Update partner 2 vows only once\r\n    function updatePartner2_vows(string _partner2_vows) public {\r\n        require((msg.sender == owner || msg.sender == partner2_address) && (bytes(partner2_vows).length == 0));\r\n        partner2_vows = _partner2_vows;\r\n    }\r\n\r\n    // Update Marriage status only if both partners have previously voted to update the prenup\r\n    function updateMaritalStatus(string _maritalStatus) public {\r\n        require((msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address) && (partner1_voted_update_marriage_status == true)&&(partner2_voted_update_marriage_status == true));\r\n        saveContractEvent(\"Marital status updated\", strConcat(\"Marital status changed from \", maritalStatus , \" to \", _maritalStatus));\r\n        maritalStatus = _maritalStatus;\r\n        partner1_voted_update_marriage_status = false;\r\n        partner2_voted_update_marriage_status = false;\r\n    }\r\n\r\n    // Partners can sign the contract\r\n    function sign() public {\r\n        require(msg.sender == partner1_address || msg.sender == partner2_address);\r\n        if(msg.sender == partner1_address){\r\n            partner1_signed = true;\r\n            saveContractEvent(\"Marriage signed\", \"Smart Contract signed by Partner 1\");\r\n        }else {\r\n            partner2_signed = true;\r\n            saveContractEvent(\"Marriage signed\", \"Smart Contract signed by Partner 2\");\r\n        }\r\n        \r\n        if(partner1_signed && partner2_signed){// if both signed then make the contract as signed\r\n            is_signed = true;\r\n        }\r\n    }\r\n    \r\n    //Function to vote to allow for updating marital status, both partners must vote to allow update\r\n        function voteToUpdateMaritalStatus() public {\r\n        if(msg.sender == partner1_address){\r\n            partner1_voted_update_marriage_status = true;\r\n            saveContractEvent(\"Vote - Change Marital Status\", \"Partner 1 voted to updated Marital Status\");\r\n        }\r\n        if(msg.sender == partner2_address){\r\n            partner2_voted_update_marriage_status = true;\r\n            saveContractEvent(\"Vote - Change Marital Status\", \"Partner 2 voted to updated Marital Status\");\r\n        }\r\n    }\r\n    \r\n    //Function to vote to allow for updating prenup, both partners must vote true to allow update\r\n    function voteToUpdatePrenup() public {\r\n        if(msg.sender == partner1_address){\r\n            partner1_voted_update_prenup = true;\r\n            saveContractEvent(\"Vote - Update Prenup\", \"Partner 1 voted to updated Prenuptial Aggreement\");\r\n        }\r\n        if(msg.sender == partner2_address){\r\n            partner2_voted_update_prenup = true;\r\n            saveContractEvent(\"Vote - Update Prenup\", \"Partner 2 voted to updated Prenuptial Aggreement\");\r\n        }\r\n    }\r\n\r\n    // Update coupleImage hash, either partner can update\r\n    function updateCoupleImageIPFShash(bytes _coupleImageIPFShash) public{\r\n        require(msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address);\r\n        coupleImageIPFShash = _coupleImageIPFShash;\r\n    }\r\n\r\n    // Update marriage licence image hash, either partner can update\r\n    function updateMarriageLicenceImageIPFShash(bytes _marriageLicenceImageIPFShash) public{\r\n        require(msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address);\r\n        marriageLicenceImageIPFShash = _marriageLicenceImageIPFShash;\r\n    }\r\n\r\n    // Update prenup text, but only if both partners have previously agreed to update the prenup\r\n    function updatePrenup(string _prenupAgreement) public{\r\n        require((msg.sender == owner || msg.sender == partner1_address || msg.sender == partner2_address) && (partner1_voted_update_prenup == true)&&(partner2_voted_update_prenup == true));\r\n        prenupAgreement = _prenupAgreement;\r\n        saveContractEvent(\"Update - Prenup\", \"Prenuptial Agreement Updated\");\r\n        partner1_voted_update_prenup = false;\r\n        partner2_voted_update_prenup = false;\r\n    }\r\n     \r\n    // Update partner 1 will, only partner 1 can update\r\n    function updatePartner1_will(string _partner1_will) public {\r\n        require(msg.sender == partner1_address);\r\n        partner1_will = _partner1_will;\r\n        saveContractEvent(\"Update - Will\", \"Partner 1 Will Updated\");\r\n    }\r\n  \r\n    // Update partner 2 will, only partner 2 can update\r\n    function updatePartner2_will(string _partner2_will) public {\r\n        require(msg.sender == partner2_address);\r\n        partner2_will = _partner2_will;\r\n        saveContractEvent(\"Update - Will\", \"Partner 2 Will Updated\");\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"prenupAgreement\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1_will\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2_will\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coupleImageIPFShash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1_voted_update_marriage_status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marriageLicenceImageIPFShash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractEvents\",\"outputs\":[{\"name\":\"ce_date\",\"type\":\"uint256\"},{\"name\":\"ce_description\",\"type\":\"string\"},{\"name\":\"ce_mesg\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner2_vows\",\"type\":\"string\"}],\"name\":\"updatePartner2_vows\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marriageLicenceImageIPFShash\",\"type\":\"bytes\"}],\"name\":\"updateMarriageLicenceImageIPFShash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marriageDate\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"location\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eventcount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"witnesses\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteToUpdateMaritalStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_prenupAgreement\",\"type\":\"string\"}],\"name\":\"updatePrenup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maritalStatus\",\"type\":\"string\"}],\"name\":\"updateMaritalStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner1_will\",\"type\":\"string\"}],\"name\":\"updatePartner1_will\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officiant\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner2_will\",\"type\":\"string\"}],\"name\":\"updatePartner2_will\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2_signed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lifeEvents\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"mesg\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1_signed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2_voted_update_prenup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1_voted_update_prenup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"mesg\",\"type\":\"string\"}],\"name\":\"addLifeEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteToUpdatePrenup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"is_signed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner1_vows\",\"type\":\"string\"}],\"name\":\"updatePartner1_vows\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2_voted_update_marriage_status\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maritalStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1_vows\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner2_vows\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracteventcount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partner1_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coupleImageIPFShash\",\"type\":\"bytes\"}],\"name\":\"updateCoupleImageIPFShash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_partner1\",\"type\":\"string\"},{\"name\":\"_partner1_address\",\"type\":\"address\"},{\"name\":\"_partner2\",\"type\":\"string\"},{\"name\":\"_partner2_address\",\"type\":\"address\"},{\"name\":\"_marriageDate\",\"type\":\"string\"},{\"name\":\"_maritalStatus\",\"type\":\"string\"},{\"name\":\"_officiant\",\"type\":\"string\"},{\"name\":\"_witnesses\",\"type\":\"string\"},{\"name\":\"_location\",\"type\":\"string\"},{\"name\":\"coupleImageIPFShash\",\"type\":\"string\"},{\"name\":\"marriageLicenceImageIPFShash\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"mesg\",\"type\":\"string\"}],\"name\":\"LifeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ce_description\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"ce_mesg\",\"type\":\"string\"}],\"name\":\"ContractEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "SmartVows", "CompilerVersion": "v0.4.17+commit.bdeb9e52", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000056c863babb529c3fdc176bb2661a9759e738a23b00000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000e2c258dd75d5f4c060537d85ea1e5bc25b86b67e00000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000034f76690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000756696f72656c6100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a30362f30392f323031380000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074d61727269656400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e44656e6973205675636b6f766163000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c546973686f205065746b6f76000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000145461726775204d757265732c20526f6d616e696100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ff2df006a0c6d260647566a49468e7c9bdd6e996c2f56a07bd3cb8a1016d8ae9"}]}