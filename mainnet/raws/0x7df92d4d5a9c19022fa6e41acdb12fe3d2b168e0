{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.5.3;\r\n\r\n/**\r\n* @title ERC223Interface\r\n* @dev ERC223 Contract Interface\r\n*/\r\ncontract ERC223Interface {\r\n    function balanceOf(address who)public view returns (uint);\r\n    function transfer(address to, uint value)public returns (bool success);\r\n    function transfer(address to, uint value, bytes memory data)public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n/// @title Interface for the contract that will work with ERC223 tokens.\r\ninterface ERC223ReceivingContract {\r\n    /**\r\n     * @dev Standard ERC223 function that will handle incoming token transfers.\r\n     *\r\n     * @param _from  Token sender address.\r\n     * @param _value Amount of tokens.\r\n     * @param _data  Transaction data.\r\n     */\r\n    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes  memory) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() public  {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public  onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public  onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract MaxxerVesting is ERC223ReceivingContract,Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Address of MaxxerToken smart contract.\r\n     */\r\n    address public maxxerToken;\r\n\r\n    /**\r\n     * Founder receiving wallet address.\r\n     */\r\n    address public FOUNDERS_ADDRESS;\r\n\r\n    /**\r\n     * Advisors receiving wallet address.\r\n     */\r\n    address public ADVISORS_ADDRESS;\r\n\r\n    /**\r\n     * Team receiving wallet address.\r\n     */\r\n    address public TEAM_ADDRESS;\r\n\r\n    /**\r\n     * Total Amount of tokens for Founders.\r\n     */\r\n    uint256 constant public FOUNDERS_TOTAL_TOKEN = 270000000 * 10**18;\r\n\r\n    /**\r\n     * Total Amount of tokens for Advisors.\r\n     */\r\n    uint256 constant public ADVISORS_TOTAL_TOKEN = 36000000 * 10**18;\r\n\r\n    /**\r\n     * Total Amount of tokens for Team.\r\n     */\r\n    uint256 constant public TEAM_TOTAL_TOKEN = 54000000 * 10**18;\r\n\r\n    /**\r\n     * Amount of tokens already sent to Founder receiving wallet.\r\n     */\r\n    uint256 public FOUNDERS_TOKEN_SENT;\r\n\r\n    /**\r\n     * Amount of tokens already sent to Advisors receiving wallet.\r\n     */\r\n    uint256 public ADVISORS_TOKEN_SENT;\r\n\r\n    /**\r\n     * Amount of tokens already sent to Team receiving wallet.\r\n     */\r\n    uint256 public TEAM_TOKEN_SENT;\r\n\r\n    /**\r\n     * Starting timestamp of the first stage of vesting (Wednesday, July 31, 2022 0:00:00 AM).\r\n     * Will be used as a starting point for all dates calculations.\r\n     */\r\n    uint256 public VESTING_START_TIMESTAMP;\r\n\r\n    /**\r\n     * Tokens vesting stage structure with vesting date and tokens allowed to unlock.\r\n     */\r\n    struct VestingStage {\r\n        uint256 date;\r\n        uint256 foundersTokensUnlocked;\r\n        uint256 advisorsTokensUnlocked;\r\n        uint256 teamTokensUnlocked;\r\n    }\r\n\r\n    /**\r\n     * Array for storing all vesting stages with structure defined above.\r\n     */\r\n    VestingStage[36] public stages;\r\n\r\n    event Withdraw(address _to, uint256 _value);\r\n\r\n    constructor (address _maxxerToken,uint256 _vestingStartTimestamp, address _foundersAddress,address _advisorsAddress,address _teamAddress) public {\r\n        maxxerToken = _maxxerToken;\r\n        VESTING_START_TIMESTAMP=_vestingStartTimestamp;\r\n        FOUNDERS_ADDRESS=_foundersAddress;\r\n        ADVISORS_ADDRESS=_advisorsAddress;\r\n        TEAM_ADDRESS=_teamAddress;\r\n        initVestingStages();\r\n    }\r\n\r\n    /**\r\n     * Setup array with vesting stages dates and token amounts.\r\n     */\r\n    function initVestingStages () internal {\r\n        uint256 month = 30 days;\r\n\r\n        stages[0].date = VESTING_START_TIMESTAMP;\r\n        stages[0].foundersTokensUnlocked = 67500010 * 10**18;\r\n        stages[0].advisorsTokensUnlocked = 9000020 * 10**18;\r\n        stages[0].teamTokensUnlocked = 13500030 * 10**18;\r\n\r\n        for (uint8 i = 1; i < 36; i++) {\r\n                stages[i].date = stages[i-1].date + month;\r\n                stages[i].foundersTokensUnlocked = stages[i-1].foundersTokensUnlocked.add(5785714 * 10**18);\r\n                stages[i].advisorsTokensUnlocked = stages[i-1].advisorsTokensUnlocked.add(771428 * 10**18);\r\n                stages[i].teamTokensUnlocked = stages[i-1].teamTokensUnlocked.add(1157142 * 10**18);\r\n        }\r\n    }\r\n\r\n    function tokenFallback(address, uint _value, bytes calldata) external {\r\n        require(msg.sender == maxxerToken);\r\n        uint256 TOTAL_TOKENS = FOUNDERS_TOTAL_TOKEN.add(ADVISORS_TOTAL_TOKEN).add(TEAM_TOTAL_TOKEN);\r\n        require(_value == TOTAL_TOKENS);\r\n    }\r\n\r\n    /**\r\n     * Method for Founders withdraw tokens from vesting.\r\n     */\r\n    function withdrawFoundersToken () external onlyOwner {\r\n        uint256 tokensToSend = getAvailableTokensOfFounders();\r\n        require(tokensToSend > 0,\"Vesting: No withdrawable tokens available.\");\r\n        sendTokens(FOUNDERS_ADDRESS,tokensToSend);\r\n    }\r\n\r\n    /**\r\n     * Method for Advisors withdraw tokens from vesting.\r\n     */\r\n    function withdrawAdvisorsToken () external onlyOwner {\r\n        uint256 tokensToSend = getAvailableTokensOfAdvisors();\r\n        require(tokensToSend > 0,\"Vesting: No withdrawable tokens available.\");\r\n        sendTokens(ADVISORS_ADDRESS,tokensToSend);\r\n    }\r\n\r\n    /**\r\n     * Method for Team withdraw tokens from vesting.\r\n     */\r\n    function withdrawTeamToken () external onlyOwner {\r\n        uint256 tokensToSend = getAvailableTokensOfTeam();\r\n        require(tokensToSend > 0,\"Vesting: No withdrawable tokens available.\");\r\n        sendTokens(TEAM_ADDRESS,tokensToSend);\r\n    }\r\n\r\n    /**\r\n     * Calculate tokens amount that is sent to Founder wallet Address.\r\n     *\r\n     * @return Amount of tokens that can be sent.\r\n     */\r\n    function getAvailableTokensOfFounders () public view returns (uint256 tokensToSend) {\r\n        uint256 tokensUnlocked = getTokensUnlocked(FOUNDERS_ADDRESS);\r\n        tokensToSend = getTokensAmountAllowedToWithdraw(FOUNDERS_ADDRESS,tokensUnlocked);\r\n    }\r\n\r\n    /**\r\n     * Calculate tokens amount that is sent to Advisor wallet Address.\r\n     *\r\n     * @return Amount of tokens that can be sent.\r\n     */\r\n    function getAvailableTokensOfAdvisors () public view returns (uint256 tokensToSend) {\r\n        uint256 tokensUnlocked = getTokensUnlocked(ADVISORS_ADDRESS);\r\n        tokensToSend = getTokensAmountAllowedToWithdraw(ADVISORS_ADDRESS,tokensUnlocked);\r\n    }\r\n\r\n    /**\r\n     * Calculate tokens amount that is sent to Team wallet Address.\r\n     *\r\n     * @return Amount of tokens that can be sent.\r\n     */\r\n    function getAvailableTokensOfTeam () public view returns (uint256 tokensToSend) {\r\n        uint256 tokensUnlocked = getTokensUnlocked(TEAM_ADDRESS);\r\n        tokensToSend = getTokensAmountAllowedToWithdraw(TEAM_ADDRESS,tokensUnlocked);\r\n    }\r\n\r\n    /**\r\n     * Get tokens unlocked on current stage.\r\n     *\r\n     * @return Tokens allowed to be sent.\r\n     */\r\n    function getTokensUnlocked (address role) private view returns (uint256) {\r\n        uint256 allowedTokens;\r\n\r\n        for (uint8 i = 0; i < stages.length; i++) {\r\n            if (now >= stages[i].date) {\r\n                if(role == FOUNDERS_ADDRESS){\r\n                    allowedTokens = stages[i].foundersTokensUnlocked;\r\n                } else if(role == ADVISORS_ADDRESS){\r\n                    allowedTokens = stages[i].advisorsTokensUnlocked;\r\n                } else if(role == TEAM_ADDRESS){\r\n                    allowedTokens = stages[i].teamTokensUnlocked;\r\n                }\r\n            }\r\n        }\r\n\r\n        return allowedTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate tokens available for withdrawal.\r\n     *\r\n     * @param role Role address for which you want the amount of tokens.\r\n     *\r\n     * @param tokensUnlocked Percent of tokens that are allowed to be sent.\r\n     *\r\n     * @return Amount of tokens that can be sent according to provided role and tokensUnlocked.\r\n     */\r\n    function getTokensAmountAllowedToWithdraw (address role,uint256 tokensUnlocked) private view returns (uint256) {\r\n        uint256 unsentTokensAmount;\r\n        if(role == FOUNDERS_ADDRESS){\r\n            unsentTokensAmount = tokensUnlocked.sub(FOUNDERS_TOKEN_SENT);\r\n        } else if(role == ADVISORS_ADDRESS){\r\n            unsentTokensAmount = tokensUnlocked.sub(ADVISORS_TOKEN_SENT);\r\n        } else if(role == TEAM_ADDRESS){\r\n            unsentTokensAmount = tokensUnlocked.sub(TEAM_TOKEN_SENT);\r\n        }\r\n        return unsentTokensAmount;\r\n    }\r\n\r\n    /**\r\n     * Send tokens to given address.\r\n     */\r\n    function sendTokens (address role,uint256 tokensToSend) private {\r\n        if (tokensToSend > 0) {\r\n            if(role == FOUNDERS_ADDRESS){\r\n                // Updating tokens sent counter\r\n                FOUNDERS_TOKEN_SENT = FOUNDERS_TOKEN_SENT.add(tokensToSend);\r\n                // Sending allowed tokens amount\r\n                ERC223Interface(maxxerToken).transfer(FOUNDERS_ADDRESS, tokensToSend);\r\n                emit Withdraw(FOUNDERS_ADDRESS,tokensToSend);\r\n            } else if(role == ADVISORS_ADDRESS){\r\n                // Updating tokens sent counter\r\n                ADVISORS_TOKEN_SENT = ADVISORS_TOKEN_SENT.add(tokensToSend);\r\n                // Sending allowed tokens amount\r\n                ERC223Interface(maxxerToken).transfer(ADVISORS_ADDRESS, tokensToSend);\r\n                emit Withdraw(ADVISORS_ADDRESS,tokensToSend);\r\n            } else if(role == TEAM_ADDRESS){\r\n                // Updating tokens sent counter\r\n                TEAM_TOKEN_SENT = TEAM_TOKEN_SENT.add(tokensToSend);\r\n                // Sending allowed tokens amount\r\n                ERC223Interface(maxxerToken).transfer(TEAM_ADDRESS, tokensToSend);\r\n                emit Withdraw(TEAM_ADDRESS,tokensToSend);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTokensOfAdvisors\",\"outputs\":[{\"name\":\"tokensToSend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTeamToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISORS_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAdvisorsToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDERS_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_TOTAL_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTokensOfFounders\",\"outputs\":[{\"name\":\"tokensToSend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISORS_TOKEN_SENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDERS_TOTAL_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOUNDERS_TOKEN_SENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"foundersTokensUnlocked\",\"type\":\"uint256\"},{\"name\":\"advisorsTokensUnlocked\",\"type\":\"uint256\"},{\"name\":\"teamTokensUnlocked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_TOKEN_SENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VESTING_START_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFoundersToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISORS_TOTAL_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTokensOfTeam\",\"outputs\":[{\"name\":\"tokensToSend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxxerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_maxxerToken\",\"type\":\"address\"},{\"name\":\"_vestingStartTimestamp\",\"type\":\"uint256\"},{\"name\":\"_foundersAddress\",\"type\":\"address\"},{\"name\":\"_advisorsAddress\",\"type\":\"address\"},{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "MaxxerVesting", "CompilerVersion": "v0.5.3+commit.10d17f24", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009af096c0c46e413fe46889255017e6f1f8bc18e20000000000000000000000000000000000000000000000000000000062e5c600000000000000000000000000f2329cd31911bb6020dd83538c330b7027dd1a470000000000000000000000009786d3c1d3b1c3d0003347bd5dbd3c6894a948e90000000000000000000000002b7e9371e14027a5b2bc8bd383c7f5a92b66bbed", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b132e20d705519ce772d0c989da12192e9ed4f17847687dc760c6b554e605b69"}]}