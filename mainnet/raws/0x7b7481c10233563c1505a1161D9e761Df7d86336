{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n\n\n// Part: IBasicRewards\n\ninterface IBasicRewards {\n    function stakeFor(address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function earned(address) external view returns (uint256);\n\n    function withdrawAll(bool) external returns (bool);\n\n    function withdraw(uint256, bool) external returns (bool);\n\n    function getReward() external returns (bool);\n\n    function stake(uint256) external returns (bool);\n}\n\n// Part: IBooster\n\ninterface IBooster {\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\n}\n\n// Part: ICVXLocker\n\ninterface ICVXLocker {\n    function lock(\n        address _account,\n        uint256 _amount,\n        uint256 _spendRatio\n    ) external;\n\n    function balances(address _user)\n        external\n        view\n        returns (\n            uint112 locked,\n            uint112 boosted,\n            uint32 nextUnlockIndex\n        );\n}\n\n// Part: ICurveFactoryPool\n\ninterface ICurveFactoryPool {\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_balances() external view returns (uint256[2] memory);\n\n    function add_liquidity(\n        uint256[2] memory _amounts,\n        uint256 _min_mint_amount,\n        address _receiver\n    ) external returns (uint256);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 _dx,\n        uint256 _min_dy,\n        address _receiver\n    ) external returns (uint256);\n}\n\n// Part: ICurveTriCrypto\n\ninterface ICurveTriCrypto {\n    function exchange(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy,\n        bool use_eth\n    ) external payable;\n\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n}\n\n// Part: ICurveV2Pool\n\ninterface ICurveV2Pool {\n    function get_dy(\n        uint256 i,\n        uint256 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        uint256 i,\n        uint256 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external payable returns (uint256);\n}\n\n// Part: IMerkleDistributorV2\n\ninterface IMerkleDistributorV2 {\n    enum Option {\n        Claim,\n        ClaimAsETH,\n        ClaimAsCRV,\n        ClaimAsCVX,\n        ClaimAndStake\n    }\n\n    function vault() external view returns (address);\n\n    function merkleRoot() external view returns (bytes32);\n\n    function week() external view returns (uint32);\n\n    function frozen() external view returns (bool);\n\n    function isClaimed(uint256 index) external view returns (bool);\n\n    function setApprovals() external;\n\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external;\n\n    function claimAs(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        Option option\n    ) external;\n\n    function claimAs(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        Option option,\n        uint256 minAmountOut\n    ) external;\n\n    function freeze() external;\n\n    function unfreeze() external;\n\n    function stake() external;\n\n    function updateMerkleRoot(bytes32 newMerkleRoot, bool unfreeze) external;\n\n    function updateDepositor(address newDepositor) external;\n\n    function updateAdmin(address newAdmin) external;\n\n    function updateVault(address newVault) external;\n\n    event Claimed(\n        uint256 index,\n        uint256 amount,\n        address indexed account,\n        uint256 indexed week,\n        Option option\n    );\n\n    event DepositorUpdated(\n        address indexed oldDepositor,\n        address indexed newDepositor\n    );\n\n    event AdminUpdated(address indexed oldAdmin, address indexed newAdmin);\n\n    event VaultUpdated(address indexed oldVault, address indexed newVault);\n\n    event MerkleRootUpdated(bytes32 indexed merkleRoot, uint32 indexed week);\n}\n\n// Part: IRewards\n\ninterface IRewards {\n    function balanceOf(address) external view returns (uint256);\n\n    function stake(address, uint256) external;\n\n    function stakeFor(address, uint256) external;\n\n    function withdraw(address, uint256) external;\n\n    function exit(address) external;\n\n    function getReward(address) external;\n\n    function queueNewRewards(uint256) external;\n\n    function notifyRewardAmount(uint256) external;\n\n    function addExtraReward(address) external;\n\n    function stakingToken() external view returns (address);\n\n    function rewardToken() external view returns (address);\n\n    function earned(address account) external view returns (uint256);\n}\n\n// Part: ITriPool\n\ninterface ITriPool {\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\n        external;\n\n    function get_virtual_price() external view returns (uint256);\n}\n\n// Part: IUniV2Router\n\ninterface IUniV2Router {\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n// Part: IUnionVault\n\ninterface IUnionVault {\n    enum Option {\n        Claim,\n        ClaimAsETH,\n        ClaimAsCRV,\n        ClaimAsCVX,\n        ClaimAndStake\n    }\n\n    function withdraw(address _to, uint256 _shares)\n        external\n        returns (uint256 withdrawn);\n\n    function withdrawAll(address _to) external returns (uint256 withdrawn);\n\n    function withdrawAs(\n        address _to,\n        uint256 _shares,\n        Option option\n    ) external;\n\n    function withdrawAs(\n        address _to,\n        uint256 _shares,\n        Option option,\n        uint256 minAmountOut\n    ) external;\n\n    function withdrawAllAs(address _to, Option option) external;\n\n    function withdrawAllAs(\n        address _to,\n        Option option,\n        uint256 minAmountOut\n    ) external;\n\n    function depositAll(address _to) external returns (uint256 _shares);\n\n    function deposit(address _to, uint256 _amount)\n        external\n        returns (uint256 _shares);\n\n    function harvest() external;\n\n    function balanceOfUnderlying(address user)\n        external\n        view\n        returns (uint256 amount);\n\n    function outstanding3CrvRewards() external view returns (uint256 total);\n\n    function outstandingCvxRewards() external view returns (uint256 total);\n\n    function outstandingCrvRewards() external view returns (uint256 total);\n\n    function totalUnderlying() external view returns (uint256 total);\n\n    function underlying() external view returns (address);\n\n    function setPlatform(address _platform) external;\n\n    function setPlatformFee(uint256 _fee) external;\n\n    function setCallIncentive(uint256 _incentive) external;\n\n    function setWithdrawalPenalty(uint256 _penalty) external;\n\n    function setApprovals() external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/Context\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/Ownable\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.1.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: UnionBase\n\n// Common variables and functions\ncontract UnionBase {\n    address public constant CVXCRV_STAKING_CONTRACT =\n        0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e;\n    address public constant CURVE_CRV_ETH_POOL =\n        0x8301AE4fc9c624d1D396cbDAa1ed877821D7C511;\n    address public constant CURVE_CVX_ETH_POOL =\n        0xB576491F1E6e5E62f1d8F26062Ee822B40B0E0d4;\n    address public constant CURVE_CVXCRV_CRV_POOL =\n        0x9D0464996170c6B9e75eED71c68B99dDEDf279e8;\n\n    address public constant CRV_TOKEN =\n        0xD533a949740bb3306d119CC777fa900bA034cd52;\n    address public constant CVXCRV_TOKEN =\n        0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;\n    address public constant CVX_TOKEN =\n        0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\n\n    uint256 public constant CRVETH_ETH_INDEX = 0;\n    uint256 public constant CRVETH_CRV_INDEX = 1;\n    int128 public constant CVXCRV_CRV_INDEX = 0;\n    int128 public constant CVXCRV_CVXCRV_INDEX = 1;\n    uint256 public constant CVXETH_ETH_INDEX = 0;\n    uint256 public constant CVXETH_CVX_INDEX = 1;\n\n    IBasicRewards cvxCrvStaking = IBasicRewards(CVXCRV_STAKING_CONTRACT);\n    ICurveV2Pool cvxEthSwap = ICurveV2Pool(CURVE_CVX_ETH_POOL);\n    ICurveV2Pool crvEthSwap = ICurveV2Pool(CURVE_CRV_ETH_POOL);\n    ICurveFactoryPool crvCvxCrvSwap = ICurveFactoryPool(CURVE_CVXCRV_CRV_POOL);\n\n    /// @notice Swap CRV for cvxCRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @return amount of CRV obtained after the swap\n    function _swapCrvToCvxCrv(uint256 amount, address recipient)\n        internal\n        returns (uint256)\n    {\n        return _crvToCvxCrv(amount, recipient, 0);\n    }\n\n    /// @notice Swap CRV for cvxCRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapCrvToCvxCrv(\n        uint256 amount,\n        address recipient,\n        uint256 minAmountOut\n    ) internal returns (uint256) {\n        return _crvToCvxCrv(amount, recipient, minAmountOut);\n    }\n\n    /// @notice Swap CRV for cvxCRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _crvToCvxCrv(\n        uint256 amount,\n        address recipient,\n        uint256 minAmountOut\n    ) internal returns (uint256) {\n        return\n            crvCvxCrvSwap.exchange(\n                CVXCRV_CRV_INDEX,\n                CVXCRV_CVXCRV_INDEX,\n                amount,\n                minAmountOut,\n                recipient\n            );\n    }\n\n    /// @notice Swap cvxCRV for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @return amount of CRV obtained after the swap\n    function _swapCvxCrvToCrv(uint256 amount, address recipient)\n        internal\n        returns (uint256)\n    {\n        return _cvxCrvToCrv(amount, recipient, 0);\n    }\n\n    /// @notice Swap cvxCRV for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapCvxCrvToCrv(\n        uint256 amount,\n        address recipient,\n        uint256 minAmountOut\n    ) internal returns (uint256) {\n        return _cvxCrvToCrv(amount, recipient, minAmountOut);\n    }\n\n    /// @notice Swap cvxCRV for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param recipient - where swapped tokens will be sent to\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _cvxCrvToCrv(\n        uint256 amount,\n        address recipient,\n        uint256 minAmountOut\n    ) internal returns (uint256) {\n        return\n            crvCvxCrvSwap.exchange(\n                CVXCRV_CVXCRV_INDEX,\n                CVXCRV_CRV_INDEX,\n                amount,\n                minAmountOut,\n                recipient\n            );\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @return amount of ETH obtained after the swap\n    function _swapCrvToEth(uint256 amount) internal returns (uint256) {\n        return _crvToEth(amount, 0);\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _swapCrvToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _crvToEth(amount, minAmountOut);\n    }\n\n    /// @notice Swap CRV for native ETH on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of ETH obtained after the swap\n    function _crvToEth(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            crvEthSwap.exchange_underlying{value: 0}(\n                CRVETH_CRV_INDEX,\n                CRVETH_ETH_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCrv(uint256 amount) internal returns (uint256) {\n        return _ethToCrv(amount, 0);\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCrv(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _ethToCrv(amount, minAmountOut);\n    }\n\n    /// @notice Swap native ETH for CRV on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _ethToCrv(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            crvEthSwap.exchange_underlying{value: amount}(\n                CRVETH_ETH_INDEX,\n                CRVETH_CRV_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCvx(uint256 amount) internal returns (uint256) {\n        return _ethToCvx(amount, 0);\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _swapEthToCvx(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return _ethToCvx(amount, minAmountOut);\n    }\n\n    /// @notice Swap native ETH for CVX on Curve\n    /// @param amount - amount to swap\n    /// @param minAmountOut - minimum expected amount of output tokens\n    /// @return amount of CRV obtained after the swap\n    function _ethToCvx(uint256 amount, uint256 minAmountOut)\n        internal\n        returns (uint256)\n    {\n        return\n            cvxEthSwap.exchange_underlying{value: amount}(\n                CVXETH_ETH_INDEX,\n                CVXETH_CVX_INDEX,\n                amount,\n                minAmountOut\n            );\n    }\n\n    modifier notToZeroAddress(address _to) {\n        require(_to != address(0), \"Invalid address!\");\n        _;\n    }\n}\n\n// File: ExtraZaps.sol\n\ncontract ExtraZaps is Ownable, UnionBase {\n    using SafeERC20 for IERC20;\n\n    address public immutable vault;\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\n\n    address private constant TRICRYPTO =\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\n    address private constant TRIPOOL =\n        0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n    address private constant TRICRV =\n        0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n    address private constant BOOSTER =\n        0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\n    address private constant CONVEX_TRIPOOL_TOKEN =\n        0x30D9410ED1D5DA1F6C8391af5338C93ab8d4035C;\n    address private constant CONVEX_TRIPOOL_REWARDS =\n        0x689440f2Ff927E1f24c72F1087E1FAF471eCe1c8;\n    address private constant CONVEX_LOCKER =\n        0xD18140b4B819b895A3dba5442F959fA44994AF50;\n\n    ICurveTriCrypto triCryptoSwap = ICurveTriCrypto(TRICRYPTO);\n    ITriPool triPool = ITriPool(TRIPOOL);\n    IBooster booster = IBooster(BOOSTER);\n    IRewards triPoolRewards = IRewards(CONVEX_TRIPOOL_REWARDS);\n    ICVXLocker locker = ICVXLocker(CONVEX_LOCKER);\n    IMerkleDistributorV2 distributor;\n\n    constructor(address _vault, address _distributor) {\n        vault = _vault;\n        distributor = IMerkleDistributorV2(_distributor);\n    }\n\n    function setApprovals() external {\n        IERC20(TRICRV).safeApprove(BOOSTER, 0);\n        IERC20(TRICRV).safeApprove(BOOSTER, type(uint256).max);\n\n        IERC20(USDT).safeApprove(TRIPOOL, 0);\n        IERC20(USDT).safeApprove(TRIPOOL, type(uint256).max);\n\n        IERC20(CONVEX_TRIPOOL_TOKEN).safeApprove(CONVEX_TRIPOOL_REWARDS, 0);\n        IERC20(CONVEX_TRIPOOL_TOKEN).safeApprove(\n            CONVEX_TRIPOOL_REWARDS,\n            type(uint256).max\n        );\n\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CVXCRV_CRV_POOL, 0);\n        IERC20(CRV_TOKEN).safeApprove(CURVE_CVXCRV_CRV_POOL, type(uint256).max);\n\n        IERC20(CVXCRV_TOKEN).safeApprove(CVXCRV_STAKING_CONTRACT, 0);\n        IERC20(CVXCRV_TOKEN).safeApprove(\n            CVXCRV_STAKING_CONTRACT,\n            type(uint256).max\n        );\n\n        IERC20(CVX).safeApprove(CONVEX_LOCKER, 0);\n        IERC20(CVX).safeApprove(CONVEX_LOCKER, type(uint256).max);\n    }\n\n    /// @notice Retrieves user's uCRV and unstake to ETH\n    /// @param amount - the amount of uCRV to unstake\n    function _withdrawFromVaultAsEth(uint256 amount) internal {\n        IERC20(vault).safeTransferFrom(msg.sender, address(this), amount);\n        IUnionVault(vault).withdrawAllAs(\n            address(this),\n            IUnionVault.Option.ClaimAsETH\n        );\n    }\n\n    /// @notice swap ETH to USDT via Curve's tricrypto\n    /// @param amount - the amount of ETH to swap\n    /// @param minAmountOut - the minimum amount expected\n    function _swapEthToUsdt(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        triCryptoSwap.exchange{value: amount}(\n            2, // ETH\n            0, // USDT\n            amount,\n            minAmountOut,\n            true\n        );\n    }\n\n    /// @notice Unstake from the Pounder to USDT\n    /// @param amount - the amount of uCRV to unstake\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the USDT\n    /// @return amount of USDT obtained\n    function claimFromVaultAsUsdt(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) returns (uint256) {\n        _withdrawFromVaultAsEth(amount);\n        _swapEthToUsdt(address(this).balance, minAmountOut, to);\n        uint256 _usdtAmount = IERC20(USDT).balanceOf(address(this));\n        if (to != address(this)) {\n            IERC20(USDT).safeTransfer(to, _usdtAmount);\n        }\n        return _usdtAmount;\n    }\n\n    /// @notice Claim from the distributor, unstake and returns USDT.\n    /// @param index - claimer index\n    /// @param account - claimer account\n    /// @param amount - claim amount\n    /// @param merkleProof - merkle proof for the claim\n    /// @param minAmountOut - the min expected amount of USDT to receive\n    /// @param to - the adress that will receive the USDT\n    /// @return amount of USDT obtained\n    function claimFromDistributorAsUsdt(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) returns (uint256) {\n        distributor.claim(index, account, amount, merkleProof);\n        return claimFromVaultAsUsdt(amount, minAmountOut, to);\n    }\n\n    /// @notice Unstake from the Pounder to stables and stake on 3pool convex for yield\n    /// @param amount - amount of uCRV to unstake\n    /// @param minAmountOut - minimum amount of 3CRV (NOT USDT!)\n    /// @param to - address on behalf of which to stake\n    function claimFromVaultAndStakeIn3PoolConvex(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) {\n        // claim as USDT\n        uint256 _usdtAmount = claimFromVaultAsUsdt(amount, 0, address(this));\n        // add USDT to Tripool\n        triPool.add_liquidity([0, 0, _usdtAmount], minAmountOut);\n        // deposit on Convex\n        booster.depositAll(9, false);\n        // stake on behalf of user\n        triPoolRewards.stakeFor(\n            to,\n            IERC20(CONVEX_TRIPOOL_TOKEN).balanceOf(address(this))\n        );\n    }\n\n    /// @notice Claim from the distributor, unstake and deposits in 3pool.\n    /// @param index - claimer index\n    /// @param account - claimer account\n    /// @param amount - claim amount\n    /// @param merkleProof - merkle proof for the claim\n    /// @param minAmountOut - minimum amount of 3CRV (NOT USDT!)\n    /// @param to - address on behalf of which to stake\n    function claimFromDistributorAndStakeIn3PoolConvex(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        distributor.claim(index, account, amount, merkleProof);\n        claimFromVaultAndStakeIn3PoolConvex(amount, minAmountOut, to);\n    }\n\n    /// @notice Claim to any token via a univ2 router\n    /// @notice Use at your own risk\n    /// @param amount - amount of uCRV to unstake\n    /// @param minAmountOut - min amount of output token expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param outputToken - address of the token to swap to\n    /// @param to - address of the final recipient of the swapped tokens\n    function claimFromVaultViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address outputToken,\n        address to\n    ) public notToZeroAddress(to) {\n        require(router != address(0));\n        _withdrawFromVaultAsEth(amount);\n        address[] memory _path = new address[](2);\n        _path[0] = WETH;\n        _path[1] = outputToken;\n        IUniV2Router(router).swapExactETHForTokens{\n            value: address(this).balance\n        }(minAmountOut, _path, to, block.timestamp + 60);\n    }\n\n    /// @notice Claim to any token via a univ2 router\n    /// @notice Use at your own risk\n    /// @param amount - amount of uCRV to unstake\n    /// @param minAmountOut - min amount of output token expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param outputToken - address of the token to swap to\n    /// @param to - address of the final recipient of the swapped tokens\n    function claimFromDistributorViaUniV2EthPair(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 minAmountOut,\n        address router,\n        address outputToken,\n        address to\n    ) external notToZeroAddress(to) {\n        distributor.claim(index, account, amount, merkleProof);\n        claimFromVaultViaUniV2EthPair(\n            amount,\n            minAmountOut,\n            router,\n            outputToken,\n            to\n        );\n    }\n\n    /// @notice Unstake from the Pounder as CVX and locks it\n    /// @param amount - amount of uCRV to unstake\n    /// @param minAmountOut - min amount of CVX expected\n    /// @param to - address to lock on behalf of\n    function claimFromVaultAsCvxAndLock(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) public notToZeroAddress(to) {\n        IERC20(vault).safeTransferFrom(msg.sender, address(this), amount);\n        IUnionVault(vault).withdrawAllAs(\n            address(this),\n            IUnionVault.Option.ClaimAsCVX,\n            minAmountOut\n        );\n        locker.lock(to, IERC20(CVX).balanceOf(address(this)), 0);\n    }\n\n    /// @notice Claim from the distributor, unstake to CVX and lock.\n    /// @param index - claimer index\n    /// @param account - claimer account\n    /// @param amount - claim amount\n    /// @param merkleProof - merkle proof for the claim\n    /// @param minAmountOut - min amount of CVX expected\n    /// @param to - address to lock on behalf of\n    function claimFromDistributorAsCvxAndLock(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        distributor.claim(index, account, amount, merkleProof);\n        claimFromVaultAsCvxAndLock(amount, minAmountOut, to);\n    }\n\n    /// @notice Deposit into the pounder from ETH\n    /// @param minAmountOut - min amount of cvxCRV expected\n    /// @param to - address to stake on behalf of\n    function depositFromEth(uint256 minAmountOut, address to)\n        external\n        payable\n        notToZeroAddress(to)\n    {\n        require(msg.value > 0, \"cheap\");\n        _depositFromEth(msg.value, minAmountOut, to);\n    }\n\n    /// @notice Internal function to deposit ETH to the pounder\n    /// @param amount - amount of ETH\n    /// @param minAmountOut - min amount of cvxCRV expected\n    /// @param to - address to stake on behalf of\n    function _depositFromEth(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) internal {\n        uint256 _crvAmount = _swapEthToCrv(amount);\n        uint256 _cvxCrvAmount = _swapCrvToCvxCrv(\n            _crvAmount,\n            address(this),\n            minAmountOut\n        );\n        cvxCrvStaking.stakeFor(\n            to,\n            IERC20(CVXCRV_TOKEN).balanceOf(address(this))\n        );\n    }\n\n    /// @notice Deposit into the pounder from CRV\n    /// @param minAmountOut - min amount of cvxCRV expected\n    /// @param to - address to stake on behalf of\n    function depositFromCrv(\n        uint256 amount,\n        uint256 minAmountOut,\n        address to\n    ) external notToZeroAddress(to) {\n        IERC20(CRV_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\n        uint256 _cvxCrvAmount = _swapCrvToCvxCrv(\n            amount,\n            address(this),\n            minAmountOut\n        );\n        cvxCrvStaking.stakeFor(\n            to,\n            IERC20(CVXCRV_TOKEN).balanceOf(address(this))\n        );\n    }\n\n    /// @notice Deposit into the pounder from any token via Uni interface\n    /// @notice Use at your own risk\n    /// @dev Zap contract needs approval for spending of inputToken\n    /// @param amount - min amount of input token\n    /// @param minAmountOut - min amount of cvxCRV expected\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\n    /// @param inputToken - address of the token to swap from, needs to have an ETH pair on router used\n    /// @param to - address to stake on behalf of\n    function depositViaUniV2EthPair(\n        uint256 amount,\n        uint256 minAmountOut,\n        address router,\n        address inputToken,\n        address to\n    ) external notToZeroAddress(to) {\n        require(router != address(0));\n\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), amount);\n        address[] memory _path = new address[](2);\n        _path[0] = inputToken;\n        _path[1] = WETH;\n\n        IERC20(inputToken).safeApprove(router, 0);\n        IERC20(inputToken).safeApprove(router, amount);\n\n        IUniV2Router(router).swapExactTokensForETH(\n            amount,\n            1,\n            _path,\n            address(this),\n            block.timestamp + 1\n        );\n        _depositFromEth(address(this).balance, minAmountOut, to);\n    }\n\n    receive() external payable {}\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRVETH_CRV_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRVETH_ETH_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_CRV_ETH_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_CVXCRV_CRV_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_CVX_ETH_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXCRV_CRV_INDEX\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXCRV_CVXCRV_INDEX\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXCRV_STAKING_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXCRV_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXETH_CVX_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXETH_ETH_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromDistributorAndStakeIn3PoolConvex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromDistributorAsCvxAndLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromDistributorAsUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromDistributorViaUniV2EthPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromVaultAndStakeIn3PoolConvex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromVaultAsCvxAndLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromVaultAsUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromVaultViaUniV2EthPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositFromCrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositFromEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositViaUniV2EthPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ExtraZaps", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000083507cc8c8b67ed48badd1f59f684d5d02884c81000000000000000000000000a83043df401346a67eddeb074679b4570b956183", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}