{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/royalty-registry/GenArt721RoyaltyOverride_PBAB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\nimport \\\"../interfaces/0.8.x/IArtblocksRoyaltyOverride.sol\\\";\\nimport \\\"../interfaces/0.8.x/IGenArt721CoreV2_PBAB.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Royalty Registry override for Art Blocks PBAB token contracts.\\n * @author Art Blocks Inc.\\n */\\ncontract GenArt721RoyaltyOverride_PBAB is ERC165, IArtblocksRoyaltyOverride {\\n    /**\\n     * @notice Platform royalty payment address for `contractAddress`\\n     * updated to be `platformRoyaltyAddress`.\\n     */\\n    event PlatformRoyaltyAddressForContractUpdated(\\n        address indexed contractAddress,\\n        address payable indexed platformRoyaltyAddress\\n    );\\n\\n    /**\\n     * @notice Render provider royalty payment basis points for `tokenAddress`\\n     * updated to be `bps` if `useOverride`, else updated to use default BPS.\\n     */\\n    event RenderProviderBpsForContractUpdated(\\n        address indexed tokenAddress,\\n        bool indexed useOverride,\\n        uint256 bps\\n    );\\n\\n    /**\\n     * @notice Platform royalty payment basis points for\\n     * `tokenAddress` updated to be `bps` if `useOverride`, else\\n     * updated to use default BPS.\\n     */\\n    event PlatformBpsForContractUpdated(\\n        address indexed tokenAddress,\\n        bool indexed useOverride,\\n        uint256 bps\\n    );\\n\\n    /// token contract => Platform royalty payment address\\n    mapping(address => address payable)\\n        public tokenAddressToPlatformRoyaltyAddress;\\n\\n    struct BpsOverride {\\n        bool useOverride;\\n        uint256 bps;\\n    }\\n\\n    /// Default Render Provider royalty basis points if no BPS override is set.\\n    uint256 public constant RENDER_PROVIDER_DEFAULT_BPS = 250; // 2.5 percent\\n    /// Default Platform royalty basis points if no BPS override is set.\\n    uint256 public constant PLATFORM_DEFAULT_BPS = 250; // 2.5 percent\\n    /// token contract => if render provider bps override is set, and bps value.\\n    mapping(address => BpsOverride)\\n        public tokenAddressToRenderProviderBpsOverride;\\n    /// token contract => if Platform bps override is set, and bps value.\\n    mapping(address => BpsOverride) public tokenAddressToPlatformBpsOverride;\\n\\n    modifier onlyAdminOnContract(address _tokenContract) {\\n        require(\\n            IGenArt721CoreV2_PBAB(_tokenContract).admin() == msg.sender,\\n            \\\"Only core admin for specified token contract\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            // register interface 0x9ca7dc7a - getRoyalties(address,uint256)\\n            interfaceId == type(IArtblocksRoyaltyOverride).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Updates platform royalty payment address for `_tokenContract`\\n     * to be `_platformRoyaltyAddress`.\\n     * @param _tokenContract Token contract to be updated.\\n     * @param _platformRoyaltyAddress Address to receive royalty payments.\\n     */\\n    function updatePlatformRoyaltyAddressForContract(\\n        address _tokenContract,\\n        address payable _platformRoyaltyAddress\\n    ) external onlyAdminOnContract(_tokenContract) {\\n        tokenAddressToPlatformRoyaltyAddress[\\n            _tokenContract\\n        ] = _platformRoyaltyAddress;\\n        emit PlatformRoyaltyAddressForContractUpdated(\\n            _tokenContract,\\n            _platformRoyaltyAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates render provider royalty payment BPS for `_tokenContract`\\n     * to be `_bps`.\\n     * @param _tokenContract Token contract to be updated.\\n     * @param _bps Render provider royalty payment basis points.\\n     */\\n    function updateRenderProviderBpsForContract(\\n        address _tokenContract,\\n        uint256 _bps\\n    ) external onlyAdminOnContract(_tokenContract) {\\n        require(_bps <= 10000, \\\"invalid bps\\\");\\n        tokenAddressToRenderProviderBpsOverride[_tokenContract] = BpsOverride(\\n            true,\\n            _bps\\n        );\\n        emit RenderProviderBpsForContractUpdated(_tokenContract, true, _bps);\\n    }\\n\\n    /**\\n     * @notice Updates platform royalty payment BPS for `_tokenContract` to be\\n     * `_bps`.\\n     * @param _tokenContract Token contract to be updated.\\n     * @param _bps Platform royalty payment basis points.\\n     */\\n    function updatePlatformBpsForContract(address _tokenContract, uint256 _bps)\\n        external\\n        onlyAdminOnContract(_tokenContract)\\n    {\\n        require(_bps <= 10000, \\\"invalid bps\\\");\\n        tokenAddressToPlatformBpsOverride[_tokenContract] = BpsOverride(\\n            true,\\n            _bps\\n        );\\n        emit PlatformBpsForContractUpdated(_tokenContract, true, _bps);\\n    }\\n\\n    /**\\n     * @notice Clears any overrides of render provider royalty payment BPS\\n     * for `_tokenContract`.\\n     * @param _tokenContract Token contract to be cleared.\\n     * @dev token contracts without overrides use default BPS value.\\n     */\\n    function clearRenderProviderBpsForContract(address _tokenContract)\\n        external\\n        onlyAdminOnContract(_tokenContract)\\n    {\\n        tokenAddressToRenderProviderBpsOverride[_tokenContract] = BpsOverride(\\n            false,\\n            0\\n        ); // initial values\\n        emit RenderProviderBpsForContractUpdated(_tokenContract, false, 0);\\n    }\\n\\n    /**\\n     * @notice Clears any overrides of platform provider royalty payment BPS\\n     * for `_tokenContract`.\\n     * @param _tokenContract Token contract to be cleared.\\n     * @dev token contracts without overrides use default BPS value.\\n     */\\n    function clearPlatformBpsForContract(address _tokenContract)\\n        external\\n        onlyAdminOnContract(_tokenContract)\\n    {\\n        tokenAddressToPlatformBpsOverride[_tokenContract] = BpsOverride(\\n            false,\\n            0\\n        ); // initial values\\n        emit PlatformBpsForContractUpdated(_tokenContract, false, 0);\\n    }\\n\\n    /**\\n     * @notice Gets royalites of token ID `_tokenId` on token contract\\n     * `_tokenAddress`.\\n     * @param _tokenAddress Token contract to be queried.\\n     * @param _tokenId Token ID to be queried.\\n     * @return recipients_ array of royalty recipients\\n     * @return bps array of basis points for each recipient, aligned by index\\n     */\\n    function getRoyalties(address _tokenAddress, uint256 _tokenId)\\n        external\\n        view\\n        returns (address payable[] memory recipients_, uint256[] memory bps)\\n    {\\n        recipients_ = new address payable[](4);\\n        bps = new uint256[](4);\\n        // get standard royalty data for artist and additional payee\\n        (\\n            address artistAddress,\\n            address additionalPayee,\\n            uint256 additionalPayeePercentage,\\n            uint256 royaltyFeeByID\\n        ) = IGenArt721CoreV2_PBAB(_tokenAddress).getRoyaltyData(_tokenId);\\n        // translate to desired output\\n        recipients_[0] = payable(artistAddress);\\n        bps[0] = (uint256(100) - additionalPayeePercentage) * royaltyFeeByID;\\n        recipients_[1] = payable(additionalPayee);\\n        bps[1] = additionalPayeePercentage * royaltyFeeByID;\\n        // append platform provider royalty\\n        require(\\n            tokenAddressToPlatformRoyaltyAddress[_tokenAddress] != address(0),\\n            \\\"Platform royalty address must be defined for contract\\\"\\n        );\\n        recipients_[2] = tokenAddressToPlatformRoyaltyAddress[_tokenAddress];\\n        bps[2] = tokenAddressToPlatformBpsOverride[_tokenAddress].useOverride\\n            ? tokenAddressToPlatformBpsOverride[_tokenAddress].bps\\n            : PLATFORM_DEFAULT_BPS;\\n        // append render provider royalty\\n        recipients_[3] = payable(\\n            IGenArt721CoreV2_PBAB(_tokenAddress).renderProviderAddress()\\n        );\\n        bps[3] = tokenAddressToRenderProviderBpsOverride[_tokenAddress]\\n            .useOverride\\n            ? tokenAddressToRenderProviderBpsOverride[_tokenAddress].bps\\n            : RENDER_PROVIDER_DEFAULT_BPS;\\n        return (recipients_, bps);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/0.8.x/IArtblocksRoyaltyOverride.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface for Art Blocks Royalty override.\\n * Supported by the Royalty Registry v1 Engine.\\n * @dev  ref: https://royaltyregistry.xyz / engine-v1.royaltyregistry.eth\\n */\\ninterface IArtblocksRoyaltyOverride is IERC165 {\\n    /**\\n     * @notice Gets royalites of token ID `_tokenId` on token contract\\n     * `_tokenAddress`.\\n     * @param tokenAddress Token contract to be queried.\\n     * @param tokenId Token ID to be queried.\\n     * @return recipients_ array of royalty recipients\\n     * @return bps array of basis points for each recipient, aligned by index\\n     * @dev Interface ID:\\n     *\\n     * bytes4(keccak256('getRoyalties(address,uint256)')) == 0x9ca7dc7a\\n     *\\n     * => 0x9ca7dc7a = 0x9ca7dc7a\\n     */\\n    function getRoyalties(address tokenAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory recipients_, uint256[] memory bps);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/0.8.x/IGenArt721CoreV2_PBAB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenArt721CoreV2_PBAB {\\n    /**\\n     * @notice Token ID `_tokenId` minted on project ID `_projectId` to `_to`.\\n     */\\n    event Mint(\\n        address indexed _to,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _projectId\\n    );\\n\\n    // getter function of public variable\\n    function admin() external view returns (address);\\n\\n    // getter function of public variable\\n    function nextProjectId() external view returns (uint256);\\n\\n    // getter function of public mapping\\n    function tokenIdToProjectId(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 projectId);\\n\\n    function isWhitelisted(address sender) external view returns (bool);\\n\\n    function projectIdToCurrencySymbol(uint256 _projectId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function projectIdToCurrencyAddress(uint256 _projectId)\\n        external\\n        view\\n        returns (address);\\n\\n    function projectIdToArtistAddress(uint256 _projectId)\\n        external\\n        view\\n        returns (address payable);\\n\\n    function projectIdToPricePerTokenInWei(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function projectIdToAdditionalPayee(uint256 _projectId)\\n        external\\n        view\\n        returns (address payable);\\n\\n    function projectIdToAdditionalPayeePercentage(uint256 _projectId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function projectTokenInfo(uint256 _projectId)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            address,\\n            uint256,\\n            string memory,\\n            address\\n        );\\n\\n    function renderProviderAddress() external view returns (address payable);\\n\\n    function renderProviderPercentage() external view returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        uint256 _projectId,\\n        address _by\\n    ) external returns (uint256 tokenId);\\n\\n    function getRoyaltyData(uint256 _tokenId)\\n        external\\n        view\\n        returns (\\n            address artistAddress,\\n            address additionalPayee,\\n            uint256 additionalPayeePercentage,\\n            uint256 royaltyFeeByID\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"useOverride\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"PlatformBpsForContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"platformRoyaltyAddress\",\"type\":\"address\"}],\"name\":\"PlatformRoyaltyAddressForContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"useOverride\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"RenderProviderBpsForContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PLATFORM_DEFAULT_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RENDER_PROVIDER_DEFAULT_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"clearPlatformBpsForContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"clearRenderProviderBpsForContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddressToPlatformBpsOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"useOverride\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddressToPlatformRoyaltyAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddressToRenderProviderBpsOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"useOverride\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"updatePlatformBpsForContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_platformRoyaltyAddress\",\"type\":\"address\"}],\"name\":\"updatePlatformRoyaltyAddressForContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"updateRenderProviderBpsForContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GenArt721RoyaltyOverride_PBAB", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}