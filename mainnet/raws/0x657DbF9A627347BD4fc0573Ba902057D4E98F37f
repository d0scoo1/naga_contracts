{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TRMeta.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport './Base64.sol';\\nimport './TRScript.sol';\\nimport './TRRolls.sol';\\n\\ninterface ITRMeta {\\n\\n  function tokenURI(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function tokenScript(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getElement(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getColorCount(TRKeys.RuneCore memory core) external view returns (uint256);\\n  function getColorByIndex(TRKeys.RuneCore memory core, uint256 index) external view returns (string memory);\\n  function getGrailId(TRKeys.RuneCore memory core) external view returns (uint256);\\n  function getMaxRelicLevel() external pure returns (uint8);\\n\\n}\\n\\n/// @notice The Reliquary Metadata v1\\ncontract TRMeta is Ownable, ITRMeta {\\n\\n  using Strings for uint256;\\n\\n  string public imageURL = 'https://vibes.art/reliquary/png/';\\n  string public imageSuffix = '.png';\\n  string public animationURL = 'https://vibes.art/reliquary/html/';\\n  string public animationSuffix = '.html';\\n  address public rollsContract;\\n  mapping(string => string) public descriptionsByElement;\\n  mapping(string => string) public descriptionsByEssence;\\n\\n  error RollsAreImmutable();\\n\\n  constructor() Ownable() {}\\n\\n  function tokenURI(TRKeys.RuneCore memory core)\\n    override\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    TRRolls.RelicInfo memory info = ITRRolls(rollsContract).getRelicInfo(core);\\n\\n    string memory json = string(abi.encodePacked(\\n      '{\\\"name\\\": \\\"Relic 0x', TRUtils.toCapsHexString(core.runeCode),\\n      '\\\", \\\"description\\\": \\\"', tokenDescription(core, info),\\n      '\\\", \\\"image\\\": \\\"', tokenImage(core),\\n      '\\\", \\\"animation_url\\\": \\\"', tokenAnimation(core),\\n      '\\\", \\\"attributes\\\": [{ \\\"trait_type\\\": \\\"Element\\\", \\\"value\\\": \\\"', info.element\\n    ));\\n\\n    json = string(abi.encodePacked(\\n      json,\\n      '\\\" }, { \\\"trait_type\\\": \\\"Type\\\", \\\"value\\\": \\\"', info.relicType,\\n      '\\\" }, { \\\"trait_type\\\": \\\"Essence\\\", \\\"value\\\": \\\"', info.essence,\\n      '\\\" }, { \\\"trait_type\\\": \\\"Palette\\\", \\\"value\\\": \\\"', info.palette,\\n      '\\\" }, { \\\"trait_type\\\": \\\"Style\\\", \\\"value\\\": \\\"', info.style\\n    ));\\n\\n    json = string(abi.encodePacked(\\n      json,\\n      '\\\" }, { \\\"trait_type\\\": \\\"Speed\\\", \\\"value\\\": \\\"', info.speed,\\n      '\\\" }, { \\\"trait_type\\\": \\\"Glyph\\\", \\\"value\\\": \\\"', info.glyphType,\\n      '\\\" }, { \\\"trait_type\\\": \\\"Colors\\\", \\\"value\\\": \\\"', TRUtils.toString(info.colorCount),\\n      '\\\" }, { \\\"trait_type\\\": \\\"Level\\\", \\\"value\\\": ', TRUtils.toString(core.level)\\n    ));\\n\\n    json = string(abi.encodePacked(\\n      json,\\n      ' }, { \\\"trait_type\\\": \\\"Mana\\\", \\\"value\\\": ', TRUtils.toString(core.mana),\\n      ' }], \\\"hidden\\\": [{ \\\"trait_type\\\": \\\"Runeflux\\\", \\\"value\\\": ', TRUtils.toString(info.runeflux),\\n      ' }, { \\\"trait_type\\\": \\\"Corruption\\\", \\\"value\\\": ', TRUtils.toString(info.corruption),\\n      ' }, { \\\"trait_type\\\": \\\"Grail\\\", \\\"value\\\": ', TRUtils.toString(info.grailId),\\n      ' }]}'\\n    ));\\n\\n    return string(abi.encodePacked(\\n      'data:application/json;base64,', Base64.encode(bytes(json))\\n    ));\\n  }\\n\\n  function tokenScript(TRKeys.RuneCore memory core)\\n    override\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    TRRolls.RelicInfo memory info = ITRRolls(rollsContract).getRelicInfo(core);\\n    string[] memory html = new string[](19);\\n    uint256[] memory glyph = core.glyph;\\n\\n    if (info.grailId != TRKeys.GRAIL_ID_NONE) {\\n      glyph = info.grailGlyph;\\n    }\\n\\n    html[0] = '<!doctype html><html><head><script>';\\n    html[1] = string(abi.encodePacked('var H=\\\"', core.runeHash, '\\\";'));\\n    html[2] = string(abi.encodePacked('var N=\\\"', info.essence, '\\\";'));\\n    html[3] = string(abi.encodePacked('var Y=\\\"', info.style, '\\\";'));\\n    html[4] = string(abi.encodePacked('var E=\\\"', info.speed, '\\\";'));\\n    html[5] = string(abi.encodePacked('var G=\\\"', info.gravity, '\\\";'));\\n    html[6] = string(abi.encodePacked('var D=\\\"', info.display, '\\\";'));\\n    html[7] = string(abi.encodePacked('var V=', TRUtils.toString(core.level), ';'));\\n    html[8] = string(abi.encodePacked('var F=', TRUtils.toString(info.runeflux), ';'));\\n    html[9] = string(abi.encodePacked('var C=', TRUtils.toString(info.corruption), ';'));\\n\\n    string memory itemString;\\n    string memory partString;\\n    uint256 i;\\n    for (; i < TRKeys.RELIC_SIZE; i++) {\\n      if (i < glyph.length) {\\n        itemString = glyph[i].toString();\\n      } else {\\n        itemString = '0';\\n      }\\n\\n      while (bytes(itemString).length < TRKeys.RELIC_SIZE) {\\n        itemString = string(abi.encodePacked('0', itemString));\\n      }\\n\\n      if (i == 0) {\\n        itemString = string(abi.encodePacked('var L=[\\\"', itemString, '\\\",'));\\n      } else if (i < TRKeys.RELIC_SIZE - 1) {\\n        itemString = string(abi.encodePacked('\\\"', itemString, '\\\",'));\\n      } else {\\n        itemString = string(abi.encodePacked('\\\"', itemString, '\\\"];'));\\n      }\\n\\n      partString = string(abi.encodePacked(partString, itemString));\\n    }\\n\\n    html[10] = partString;\\n\\n    for (i = 0; i < 6; i++) {\\n      if (i < info.colorCount) {\\n        itemString = ITRRolls(rollsContract).getColorByIndex(core, i);\\n      } else {\\n        itemString = '';\\n      }\\n\\n      if (i == 0) {\\n        partString = string(abi.encodePacked('var P=[\\\"', itemString, '\\\",'));\\n      } else if (i < info.colorCount - 1) {\\n        partString = string(abi.encodePacked('\\\"', itemString, '\\\",'));\\n      } else if (i < info.colorCount) {\\n        partString = string(abi.encodePacked('\\\"', itemString, '\\\"];'));\\n      } else {\\n        partString = '';\\n      }\\n\\n      html[11 + i] = partString;\\n    }\\n\\n    html[17] = getScript();\\n    html[18] = '</script></head><body></body></html>';\\n\\n    string memory output = string(abi.encodePacked(\\n      html[0], html[1], html[2], html[3], html[4], html[5], html[6], html[7], html[8]\\n    ));\\n\\n    output = string(abi.encodePacked(\\n      output, html[9], html[10], html[11], html[12], html[13], html[14], html[15], html[16]\\n    ));\\n\\n    return string(abi.encodePacked(\\n      output, html[17], html[18]\\n    ));\\n  }\\n\\n  function tokenDescription(TRKeys.RuneCore memory core, TRRolls.RelicInfo memory info)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    string memory desc = string(abi.encodePacked(\\n      'Relic 0x', TRUtils.toCapsHexString(core.runeCode),\\n      '\\\\\\\\n\\\\\\\\n', info.essence, ' ', info.relicType, ' of ', info.element\\n    ));\\n\\n    desc = string(abi.encodePacked(\\n      desc,\\n      '\\\\\\\\n\\\\\\\\nLevel: ', TRUtils.toString(core.level),\\n      '\\\\\\\\n\\\\\\\\nMana: ', TRUtils.toString(core.mana),\\n      '\\\\\\\\n\\\\\\\\nRuneflux: ', TRUtils.toString(info.runeflux),\\n      '\\\\\\\\n\\\\\\\\nCorruption: ', TRUtils.toString(info.corruption)\\n    ));\\n\\n    if (core.credit != address(0)) {\\n      desc = string(abi.encodePacked(desc, '\\\\\\\\n\\\\\\\\nGlyph by: 0x', TRUtils.toAsciiString(core.credit)));\\n    }\\n\\n    string memory additionalInfo = ITRRolls(rollsContract).getDescription(core);\\n    if (bytes(additionalInfo).length > 0) {\\n      desc = string(abi.encodePacked(desc, '\\\\\\\\n\\\\\\\\n', additionalInfo));\\n    }\\n\\n    if (bytes(descriptionsByElement[info.element]).length > 0) {\\n      desc = string(abi.encodePacked(desc, '\\\\\\\\n\\\\\\\\n', descriptionsByElement[info.element]));\\n    }\\n\\n    if (bytes(descriptionsByEssence[info.essence]).length > 0) {\\n      desc = string(abi.encodePacked(desc, '\\\\\\\\n\\\\\\\\n', descriptionsByEssence[info.essence]));\\n    }\\n\\n    return desc;\\n  }\\n\\n  function tokenImage(TRKeys.RuneCore memory core) public view returns (string memory) {\\n    if (bytes(imageSuffix).length > 0) {\\n      return string(abi.encodePacked(imageURL, TRUtils.toString(core.tokenId), imageSuffix));\\n    } else {\\n      return string(abi.encodePacked(imageURL, TRUtils.toString(core.tokenId)));\\n    }\\n  }\\n\\n  function tokenAnimation(TRKeys.RuneCore memory core) public view returns (string memory) {\\n    if (bytes(animationURL).length == 0) {\\n      return string(abi.encodePacked(\\n        'data:text/html;base64,', Base64.encode(bytes(tokenScript(core)))\\n      ));\\n    } else {\\n      if (bytes(animationSuffix).length > 0) {\\n        return string(abi.encodePacked(animationURL, TRUtils.toString(core.tokenId), animationSuffix));\\n      } else {\\n        return string(abi.encodePacked(animationURL, TRUtils.toString(core.tokenId)));\\n      }\\n    }\\n  }\\n\\n  function getElement(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    return ITRRolls(rollsContract).getElement(core);\\n  }\\n\\n  function getPalette(TRKeys.RuneCore memory core) public view returns (string memory) {\\n    return ITRRolls(rollsContract).getPalette(core);\\n  }\\n\\n  function getEssence(TRKeys.RuneCore memory core) public view returns (string memory) {\\n    return ITRRolls(rollsContract).getEssence(core);\\n  }\\n\\n  function getStyle(TRKeys.RuneCore memory core) public view returns (string memory) {\\n    return ITRRolls(rollsContract).getStyle(core);\\n  }\\n\\n  function getSpeed(TRKeys.RuneCore memory core) public view returns (string memory) {\\n    return ITRRolls(rollsContract).getSpeed(core);\\n  }\\n\\n  function getGravity(TRKeys.RuneCore memory core) public view returns (string memory) {\\n    return ITRRolls(rollsContract).getGravity(core);\\n  }\\n\\n  function getDisplay(TRKeys.RuneCore memory core) public view returns (string memory) {\\n    return ITRRolls(rollsContract).getDisplay(core);\\n  }\\n\\n  function getColorCount(TRKeys.RuneCore memory core) override public view returns (uint256) {\\n    return ITRRolls(rollsContract).getColorCount(core);\\n  }\\n\\n  function getColorByIndex(TRKeys.RuneCore memory core, uint256 index)\\n    override\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return ITRRolls(rollsContract).getColorByIndex(core, index);\\n  }\\n\\n  function getRelicType(TRKeys.RuneCore memory core) public view returns (string memory) {\\n    return ITRRolls(rollsContract).getRelicType(core);\\n  }\\n\\n  function getRuneflux(TRKeys.RuneCore memory core) public view returns (uint256) {\\n    return ITRRolls(rollsContract).getRuneflux(core);\\n  }\\n\\n  function getCorruption(TRKeys.RuneCore memory core) public view returns (uint256) {\\n    return ITRRolls(rollsContract).getCorruption(core);\\n  }\\n\\n  function getGrailId(TRKeys.RuneCore memory core) override public view returns (uint256) {\\n    return ITRRolls(rollsContract).getGrailId(core);\\n  }\\n\\n  function getMaxRelicLevel() override public pure returns (uint8) {\\n    return 2;\\n  }\\n\\n  function getScript() public pure returns (string memory) {\\n    return TRScript.getScript();\\n  }\\n\\n  function setDescriptionForElement(string memory element, string memory desc) public onlyOwner {\\n    descriptionsByElement[element] = desc;\\n  }\\n\\n  function setDescriptionForEssence(string memory essence, string memory desc) public onlyOwner {\\n    descriptionsByEssence[essence] = desc;\\n  }\\n\\n  function setImageURL(string memory url) public onlyOwner {\\n    imageURL = url;\\n  }\\n\\n  function setImageSuffix(string memory suffix) public onlyOwner {\\n    imageSuffix = suffix;\\n  }\\n\\n  function setAnimationURL(string memory url) public onlyOwner {\\n    animationURL = url;\\n  }\\n\\n  function setAnimationSuffix(string memory suffix) public onlyOwner {\\n    animationSuffix = suffix;\\n  }\\n\\n  function setRollsContract(address rolls) public onlyOwner {\\n    if (rollsContract != address(0)) revert RollsAreImmutable();\\n\\n    rollsContract = rolls;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\n\\npragma solidity ^0.8.4;\\n\\nlibrary Base64 {\\n  bytes internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return '';\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\"\r\n    },\r\n    \"contracts/TRScript.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice The Reliquary Canvas App\\nlibrary TRScript {\\n\\n  string public constant SCRIPT = 'for(var TH=\\\"\\\",i=0;8>i;i++)TH+=H.substr(2,6);H=\\\"0x\\\"+TH;for(var HB=!1,PC=64,MT=50,PI=Math.PI,TAU=2*PI,abs=Math.abs,min=Math.min,max=Math.max,sin=Math.sin,cos=Math.cos,pow=Math.pow,sqrt=Math.sqrt,ceil=Math.ceil,floor=Math.floor,rm=null,wW=0,wH=0,cS=1,canvas=null,ctx=null,L2=1<V,BC2=[{x:.5,y:.5},{x:.75,y:0}],BC3=[{x:.65,y:.15},{x:.5,y:.5},{x:.75,y:.75}],BC4=[{x:.5,y:0},{x:0,y:.5},{x:.5,y:1},{x:1,y:.5}],BC5=[{x:.5,y:.5},{x:.5,y:0},{x:0,y:.5},{x:.5,y:1},{x:1,y:.5}],BC6=[{x:.5,y:.5},{x:.5,y:0},{x:1,y:0},{x:1,y:1},{x:0,y:1},{x:0,y:0}],BC=[,,BC2,BC3,BC4,BC5,BC6],gvy=null,pxS=C/1e3,TS=TAU/127.5,DLO=.5+.5*F/1e3,DMD=1e3+19e3*F/1e3,DHI=8+24*F/1e3,RFOP=800<=F?.5+.5*(F-800)/199:0,wST=0,wS=[],wSE=0,eL=[],cPC=P.length,cP=[],pI=0,plC=BC[cPC],iFR=!0,dt=0,pvT=0,iPs=!1,iPt=!1,iEs=!1,iBx=!1,bxS=null,pB=9,pP=Array(PC),x=0;x<PC;x++){pP[x]=Array(PC);for(var y=0;y<PC;y++)pP[x][y]=0}if(L&&L.length===PC)for(var y=0;y<PC;y++)for(var row,x=0;x<PC;x++)row=\\\"\\\"+L[y],pP[x][y]=+row.charAt(x);var sp=0;\\\"Zen\\\"==E&&(sp=256),\\\"Tranquil\\\"==E&&(sp=64),\\\"Normal\\\"==E&&(sp=16),\\\"Fast\\\"==E&&(sp=4),\\\"Swift\\\"==E&&(sp=2),\\\"Hyper\\\"==E&&(sp=.5);var sM=SD,sV=-1,sSS=1/3;\\\"Pajamas\\\"==Y&&(sM=SS,sSS=1/99),\\\"Silk\\\"==Y&&(sM=SS,sSS=1/3),\\\"Sketch\\\"==Y&&(sM=SRS);function SD(c,a){return c.distance-a.distance}function SS(){var a=sV;return sV+=sSS,2<=sV&&(sV-=3),a}function SRS(){var a=sV;return sV+=1/(rm()*PC),2<=sV&&(sV-=3),a}var flipX=!(\\\"Mirrored\\\"!=D&&\\\"MirroredUpsideDown\\\"!=D),flipY=!(\\\"UpsideDown\\\"!=D&&\\\"MirroredUpsideDown\\\"!=D),gv=3;\\\"Lunar\\\"==G&&(gv=.5),\\\"Atmospheric\\\"==G&&(gv=1),\\\"Low\\\"==G&&(gv=2),\\\"High\\\"==G&&(gv=6),\\\"Massive\\\"==G&&(gv=9),\\\"Stellar\\\"==G&&(gv=12),\\\"Galactic\\\"==G&&(gv=24);var ess={l:[]};\\\"Heavenly\\\"==N&&(ess={c:{r:{o:64},g:{o:64},b:{o:32}},l:[{st:{x:.006},n:{s:.006,d:128,c:.024,xp:.5},op:.4},{st:{x:-.007},n:{s:.007,d:128,c:.022,xp:.5},op:.6},{st:{y:.008},n:{s:.008,d:128,c:.02,xp:.5},op:.8},{st:{y:-.009},n:{s:.009,d:128,c:.018,xp:.5},op:1}]}),\\\"Fae\\\"==N&&(ess={l:[{c:{a:{o:16,e:-96}},st:{x:.002,y:-.017},op:.75,sc:1},{c:{a:{o:-16,e:96}},st:{x:-.001,y:-.015},op:.9,sc:1},{c:{a:{o:52,e:8}},st:{x:-.01,y:-.03},op:.9,n:{s:.02,d:64,c:.015,xp:2}}]}),\\\"Prismatic\\\"==N&&(ess={l:[{c:{r:{o:-64,e:128},g:{o:-64,e:128},b:{o:-32,e:64}},op:.75,n:{s:.001,d:1024,c:.001,xp:1}},{c:{r:{o:-64,e:255},g:{o:-64,e:255},b:{o:-32,e:128}},op:.25,n:{s:.001,d:1024,c:.001,xp:1}}]}),\\\"Radiant\\\"==N&&(ess={c:{r:{o:60,e:80},g:{o:60,e:80},b:{o:40,e:60}},l:[{op:1,n:{s:3e-4,d:40,c:.0014,xp:1}}]}),\\\"Photonic\\\"==N&&(ess={c:{a:{o:-64,e:140}},l:[{op:1,n:{s:.01,d:9999,c:.001,xp:3}},{op:1,n:{s:.009,d:9999,c:.001,xp:3}},{op:1,n:{s:.008,d:9999,c:.001,xp:3}},{op:1,n:{s:.007,d:9999,c:.001,xp:3}},{op:1,n:{s:.006,d:9999,c:.001,xp:3}},{op:1,n:{s:.005,d:9999,c:.001,xp:3}}]}),\\\"Forest\\\"==N&&(ess={c:{r:{o:-16,e:96},g:{o:-16,e:96},b:{o:16,e:-96}},l:[{st:{x:.002,y:-.014},op:.4,sc:1},{st:{x:-.001,y:-.012},op:.4,sc:1},{c:{r:{o:96,e:8},g:{o:128,e:8},b:{o:32,e:8}},st:{y:-.05},op:.3,n:{s:.02,d:1024,c:.006,xp:1}}]}),\\\"Life\\\"==N&&(ess={st:{x:-.006},c:{r:{o:-6,e:12},g:{o:-48,e:128},b:{o:-6,e:12}},l:[{op:.1,n:{s:.06,d:32,c:.03,xp:1}},{op:.3,n:{s:.03,d:32,c:.05,xp:2}},{op:.5,n:{s:.02,d:32,c:.07,xp:3}}]}),\\\"Swamp\\\"==N&&(ess={l:[{c:{r:{o:-192},b:{o:32,e:128}},st:{x:.005,y:.005},op:.8,sc:1},{c:{r:{o:-128,e:-64},g:{o:-64,e:128},b:{o:-64,e:-64}},op:1,n:{s:0,d:256,c:.04,xp:2}}]}),\\\"Wildblood\\\"==N&&(ess={c:{r:{o:128,e:128},g:{o:-64,e:32},b:{o:-64,e:32}},l:[{op:.3,n:{s:.002,d:64,c:.075,xp:1}},{op:.3,n:{s:.003,d:64,c:.015,xp:2}},{op:.3,n:{s:.004,d:64,c:.0023,xp:3}}]}),\\\"Soul\\\"==N&&(ess={n:{s:.25,d:128,c:.01,xp:3},l:[{c:{r:{o:200},g:{o:-100},b:{o:-100}},st:{x:-.005,y:-.015},op:1/3},{c:{r:{o:-100},g:{o:200},b:{o:-100}},st:{x:.005,y:-.015},op:1/3},{c:{r:{o:-100},g:{o:-100},b:{o:200}},st:{x:0,y:-.03},op:1/3}]}),\\\"Magic\\\"==N&&(ess={n:{s:.05,d:128,c:.015,xp:.5},l:[{c:{r:{o:200},b:{o:-200}},st:{x:-.02},op:1/3},{c:{r:{o:-200},g:{o:200}},st:{y:-.02},op:1/3},{c:{g:{o:-200},b:{o:200}},st:{x:.02},op:1/3}]}),\\\"Astral\\\"==N&&(ess={c:{r:{o:-64,e:96},g:{o:-64,e:64},b:{o:-64,e:96}},l:[{op:.33,n:{s:.003,d:512,c:.003,xp:1}},{op:.33,n:{s:.003,d:512,c:.003,xp:1}},{op:.33,n:{s:.003,d:512,c:.003,xp:1}},{op:.33,n:{s:.003,d:512,c:.003,xp:1}},{op:.33,n:{s:.003,d:512,c:.003,xp:1}},{op:.33,n:{s:.003,d:512,c:.003,xp:1}}]}),\\\"Forbidden\\\"==N&&(ess={c:{r:{o:-64,e:32},g:{o:-64,e:32},b:{o:128,e:128}},l:[{op:.3,n:{s:.001,d:64,c:.1,xp:1}},{op:.3,n:{s:.002,d:64,c:.02,xp:2}},{op:.3,n:{s:.003,d:64,c:.003,xp:3}}]}),\\\"Runic\\\"==N&&(ess={st:{x:-.005,y:.025},c:{r:{o:-56,e:200},g:{o:-256},b:{o:200,e:56}},n:{noBlend:!0,s:.05,d:19,c:.019,xp:2},l:[{op:.9}]}),\\\"Unknown\\\"==N&&(ess={l:[{c:{a:{o:256}},st:{delay:2,x:.003},n:{s:.25,d:256,c:.01,xp:1},op:1},{c:{a:{o:-256}},st:{delay:1,y:-.006},n:{s:.5,d:256,c:.01,xp:1},op:1}]}),\\\"Tidal\\\"==N&&(ess={c:{r:{o:48},g:{o:48},b:{o:64}},l:[{st:{x:-.02,y:-.015},op:.25,n:{s:.025,d:44,c:.032,xp:2}},{st:{x:-.02,y:.015},op:.25,n:{s:.025,d:44,c:.032,xp:2}},{st:{x:-.04,y:-.03},op:.5,n:{s:.0125,d:44,c:.016,xp:1}},{st:{x:-.04,y:.03},op:.5,n:{s:.0125,d:44,c:.016,xp:1}}]}),\\\"Arctic\\\"==N&&(ess={c:{r:{o:-32,e:64},g:{o:-32,e:64},b:{o:64,e:196}},l:[{op:1,n:{s:2e-6,d:48,c:.0025,xp:1}},{op:.2,n:{s:1e-6,d:512,c:.0025,xp:1}}]}),\\\"Storm\\\"==N&&(ess={l:[{c:{b:{e:255}},st:{x:.04,y:.04},op:1,sc:1},{c:{b:{o:-64,e:128}},st:{x:.03,y:.03},op:1,sc:0},{c:{r:{o:64,e:8},g:{o:64,e:8},b:{o:96,e:8}},st:{x:.05,y:.05},op:.5,n:{s:.01,d:64,c:.008,xp:2}}]}),\\\"Illuvial\\\"==N&&(ess={c:{r:{o:48},g:{o:48},b:{o:64}},l:[{st:{x:.02,y:.025},op:.2,n:{s:.03,d:44,c:.096,xp:2}},{st:{x:.03,y:.025},op:.2,n:{s:.03,d:44,c:.096,xp:2}},{st:{x:.04,y:.05},op:.5,n:{s:.015,d:44,c:.048,xp:1}},{st:{x:.06,y:.05},op:.5,n:{s:.015,d:44,c:.048,xp:1}}]}),\\\"Undine\\\"==N&&(ess={l:[{c:{r:{e:64},g:{e:64},b:{o:32,e:64}},op:.5,n:{s:.01,d:4444,c:.001,xp:1}},{c:{r:{o:-16,e:-333},g:{o:-16,e:-333},b:{o:-16,e:-222}},op:1,n:{s:.008,d:222,c:1e-4,xp:3}}]}),\\\"Mineral\\\"==N&&(ess={l:[{c:{a:{o:-16,e:48}},op:1},{c:{a:{o:-8,e:24}},op:1}]}),\\\"Craggy\\\"==N&&(ess={c:{r:{o:-25,e:-45},g:{o:-35,e:-55},b:{o:-45,e:-65}},n:{s:0,d:240,c:.064,xp:.75},l:[{op:1}]}),\\\"Dwarven\\\"==N&&(ess={c:{r:{o:-75,e:-25},g:{o:-85,e:-35},b:{o:-95,e:-45}},n:{s:0,d:128,c:.016,xp:1},l:[{op:1}]}),\\\"Gnomic\\\"==N&&(ess={c:{r:{o:-25,e:-45},g:{o:-35,e:-55},b:{o:-45,e:-65}},n:{s:0,d:240,c:.0064,xp:.8},l:[{op:1}]}),\\\"Crystal\\\"==N&&(ess={c:{a:{o:-32,e:128}},l:[{op:1},{op:1}]}),\\\"Sylphic\\\"==N&&(ess={l:[{c:{a:{o:-48,e:96}},st:{x:.06},op:1},{c:{a:{o:-16,e:64}},st:{x:.03},op:1}]}),\\\"Visceral\\\"==N&&(ess={c:{r:{o:-48},g:{o:128},b:{o:-48}},l:[{st:{x:.09},op:.1,n:{s:.14,d:128,c:.02,xp:1}},{st:{x:.12},op:.1,n:{s:.16,d:256,c:.004,xp:2}},{st:{x:.15},op:.1,n:{s:.18,d:512,c:6e-4,xp:3}}]}),\\\"Frosted\\\"==N&&(ess={l:[{c:{a:{o:128}},st:{x:-.06,y:.01},op:.33},{c:{r:{o:128},g:{o:128},b:{o:255}},st:{x:-.04,y:.007},op:.33},{c:{a:{o:128,e:8}},st:{x:-.07,y:.015},op:.33,n:{s:.01,d:64,c:.008,xp:2}},{c:{a:{o:128,e:8}},st:{x:-.08,y:.016},op:.33,n:{s:.008,d:64,c:.008,xp:2}}]}),\\\"Electric\\\"==N&&(ess={st:{x:.002,y:-.01},c:{r:{o:-256},g:{o:200,e:56},b:{o:-56,e:200}},n:{noBlend:!0,s:.05,d:19,c:.019,xp:2},l:[{op:.9}]}),\\\"Magnetic\\\"==N&&(ess={l:[{c:{a:{o:-255}},st:{x:-.001,y:-.001},op:.5,n:{s:.0024,d:2,c:4,xp:6}},{c:{a:{o:255}},st:{x:.001,y:.001},op:.5,n:{s:.0018,d:2,c:4,xp:6}}]}),\\\"Infernal\\\"==N&&(ess={l:[{c:{r:{e:255}},st:{x:.006,y:-.03},op:1,sc:1},{c:{r:{o:-64,e:128}},st:{x:.003,y:-.015},op:1,sc:0}]}),\\\"Molten\\\"==N&&(ess={st:{x:.001,y:.001},c:{r:{o:200,e:56},g:{o:-128,e:256},b:{o:-256}},n:{noBlend:!0,s:0,d:20,c:.024,xp:1},l:[{op:.9}]}),\\\"Ashen\\\"==N&&(ess={l:[{c:{r:{o:256,e:256},g:{o:128,e:128}},op:1,n:{s:.004,d:64,c:.03,xp:4}},{c:{r:{o:-512,e:256},g:{o:-512},b:{o:-512}},op:1,n:{s:.004,d:256,c:.02,xp:1}}]}),\\\"Draconic\\\"==N&&(ess={st:{x:-.005,y:.025},c:{r:{o:200,e:56},g:{o:-56,e:200},b:{o:-256}},n:{noBlend:!0,s:.05,d:19,c:.019,xp:2},l:[{op:.9}]}),\\\"Celestial\\\"==N&&(ess={st:{x:.004,y:.002},c:{a:{o:224,e:64}},n:{s:.02,d:50,c:.032,xp:2},l:[{op:1}]}),\\\"Night\\\"==N&&(ess={c:{r:{o:64},g:{o:-128},b:{o:64}},l:[{st:{x:-.03},op:.4,n:{s:.03,d:256,c:.01,xp:1}},{st:{y:-.02},op:.5,n:{s:.02,d:256,c:.01,xp:1}},{st:{x:-.015},op:.6,n:{s:.015,d:256,c:.01,xp:1}}]}),\\\"Forgotten\\\"==N&&(ess={st:{x:.006,y:.006},c:{a:{o:-512}},n:{s:.06,d:256,c:.01,xp:1},l:[{op:1}]}),\\\"Abyssal\\\"==N&&(ess={c:{r:{o:32,e:-512},g:{e:-512},b:{o:96,e:-512}},l:[{st:{x:-.03},op:.8,n:{s:.03,d:32,c:.005,xp:1}},{st:{y:-.02},op:.6,n:{s:.02,d:32,c:.005,xp:1}},{st:{x:.015},op:.4,n:{s:.015,d:32,c:.005,xp:1}},{st:{y:.0125},op:.2,n:{s:.0125,d:32,c:.005,xp:1}}]}),\\\"Evil\\\"==N&&(ess={c:{r:{o:96,e:-512},g:{e:-512},b:{o:32,e:-512}},l:[{st:{x:.01},op:.2,n:{s:.01,d:60,c:.04,xp:1}},{st:{y:.011},op:.4,n:{s:.011,d:70,c:.03,xp:1}},{st:{x:-.012},op:.6,n:{s:.012,d:80,c:.02,xp:1}},{st:{y:-.013},op:.8,n:{s:.013,d:90,c:.01,xp:1}}]}),\\\"Lost\\\"==N&&(ess={c:{a:{e:-512}},l:[{st:{x:-.03},op:.5,n:{s:.03,d:200,c:.03,xp:1}},{st:{y:-.02},op:.5,n:{s:.02,d:200,c:.03,xp:1}},{st:{x:.015},op:.5,n:{s:.015,d:200,c:.03,xp:1}},{st:{y:.0125},op:.5,n:{s:.0125,d:200,c:.03,xp:1}}]}),window.onload=function(){init()};function gAD(){return{id:0,value:0,minValue:0,maxValue:1,target:1,duration:1,elapsed:0,direction:1,easing:lin,ease1:lin,ease2:lin,callback:null}}var animations=[];function animate(a){var b=a.value,c=a.target,d=a.duration,e=a.easing,f=a.callback;a.elapsed=0;var g=function(g){a.elapsed+=dt;var h=max(0,min(1,e(a.elapsed/d)));a.value=b+h*(c-b),a.elapsed>=d&&(animations.splice(g,1),f&&f())};animations.push(g)}function lin(a){return a}function eSin(a){return-(cos(PI*a)-1)/2}function rAL(a){a.direction=-a.direction,a.callback=function(){rAL(a)},0>a.direction?(a.easing=a.ease1,a.target=a.minValue):(a.easing=a.ease2,a.target=a.maxValue),animate(a)}function init(){sRO(),sS(),iD(),cEl(),rC(),lFI(),sR(),rAL(gvy),window.requestAnimationFrame(oAF)}function sRO(){HB=!!document.body;var a=HB?document.body:document.all[1];wW=max(a.clientWidth,window.innerWidth),wH=max(a.clientHeight,window.innerHeight);var b=wW>wH,c=b?wH:wW;cS=c/PC,sV=-1,pI=0,cP.length=0}function cEl(){var a=HB?document.body:document.all[1];canvas=HB?document.createElement(\\\"canvas\\\"):document.getElementById(\\\"canvas\\\"),ctx=canvas.getContext(\\\"2d\\\"),HB&&a.appendChild(canvas);var b=floor(cS*PC),c=document.createElement(\\\"style\\\");c.innerText=`canvas { width: ${b}px; height: ${b}px; image-rendering: -moz-crisp-edges; image-rendering: -webkit-crisp-edges; image-rendering: pixelated; image-rendering: crisp-edges; }`,a.appendChild(c)}function rC(){if(HB){var a=floor((wW-cS*PC)/2),b=floor((wH-cS*PC)/2);canvas.style.position=\\\"absolute\\\",canvas.style.left=a+\\\"px\\\",canvas.style.top=b+\\\"px\\\"}canvas.width=PC,canvas.height=PC}function gC(a,b){var c=PC*cS,d=floor((b-cS*PC)/2),e=floor(PC*(a-d)/c);return e}function iVC(a){return 0<=a&&a<PC}function gX(a){return gC(a.x,wW)}function gY(a){return gC(a.y,wH)}function pFE(a){if(iPt){var b=gX(a),c=gY(a);if(iVC(b)&&iVC(c)){var d=iEs?0:pB;if(iBx&&bxS){var e=gX(bxS),f=gY(bxS);if(iVC(e)&&iVC(f)){for(var g=b<e?b:e,h=c<f?c:f,i=b<e?e:b,j=c<f?f:c,k=g;k<=i;k++)for(var l=h;l<=j;l++)pP[k][l]=d;return}}pP[b][c]=d}}}function lFI(){document.addEventListener(\\\"keydown\\\",a=>{var b=a.key;\\\"Shift\\\"===b&&(iEs=!0),\\\" \\\"===b&&(iBx=!0)},!1),document.addEventListener(\\\"keyup\\\",a=>{var b=a.key,c=+b,d=a.ctrlKey;if(!isNaN(c))if(d)for(var e=0;e<PC;e++)for(var f=0;f<PC;f++)pP[e][f]=c;else\\\" \\\"!==b&&(pB=c);\\\"p\\\"===b||\\\"P\\\"===b?iPs=!iPs:\\\"l\\\"===b||\\\"L\\\"===b?lPP():\\\"Shift\\\"===b?iEs=!1:\\\" \\\"===b?(iBx=!1,bxS=null):void 0},!1),window.addEventListener(\\\"mousedown\\\",a=>{iPt=!0,iBx&&null===bxS&&(bxS=a)}),window.addEventListener(\\\"mousemove\\\",a=>pFE(a)),window.addEventListener(\\\"mouseup\\\",a=>{pFE(a),iPt=!1,bxS=null})}function lPP(){for(var a=[],b=0;b<PC;b++){for(var c=0;c<PC;c++)a.push(pP[c][b]);b<PC-1&&a.push(\\\",\\\")}var d=\\\"[\\\"+a.join(\\\"\\\")+\\\"]\\\";console.log(d),cGD(d)}function cGD(a){var b=HB?document.body:document.all[1],c=document.createElement(\\\"input\\\");c.className=\\\"clipboard\\\",b.appendChild(c),c.value=a,c.select(),document.execCommand(\\\"copy\\\"),b.removeChild(c)}function oAF(a){dt=a-pvT,dt>MT?dt=MT:0>dt&&(dt=0),iPs&&(dt=0),sV=-1,pI=0,cP.length=0,wSE+=dt,sS(),sR();for(var b=animations.length,c=b-1;0<=c;c--)animations[c](c);pvT=a,window.requestAnimationFrame(oAF)}function sS(){s=0,t=0;var a=Uint32Array.from([0,1,s=t=2,3].map(function(a){return parseInt(H.substr(11*a+2,11),16)}));rm=function(){return t=a[3],a[3]=a[2],a[2]=a[1],a[1]=s=a[0],t^=t<<11,a[0]^=t^t>>>8^s>>>19,a[0]/4294967296}}function iD(){null===gvy&&(gvy=gAD(),gvy.value=gv,gvy.minValue=gv/2,gvy.maxValue=2*gv,gvy.duration=1750*(sp+2),gvy.ease1=eSin,gvy.ease2=eSin)}function sCl(){var a=P.slice();wS.length=0,wST=0;for(var b=0;b<cPC;b++){var c=gCP(),d=a[b],e=parseInt(d,16);c.r=255&e>>16,c.g=255&e>>8,c.b=255&e,pPt(c),c.weight=pow(gvy.value,5-b),wS.push(c.weight),wST+=c.weight,cP.push(c)}var f=wS[cPC-1],g=2e3*sp;wST-=cPC*f;for(var b=0;b<cPC;b++){var c=cP[b],h=wSE+.5*g*b/(cPC-1),j=cos(TAU*(h%g)/g);c.weight=f+j*wST}if(2===cPC)for(var k=cP[0],l=cP[1];;){var m=l.y-k.y,n=l.x-k.x,o=m/(n||1);if(-1.2<=o&&-.8>=o)pI=0,pPt(k),pPt(l);else break}}var imgData=null,uD=Array(4*PC*PC);function sR(){iFR&&(imgData=ctx.getImageData(0,0,PC,PC),cID(imgData.data),cE());var a=imgData.data;sCl(),L2&&(cID(uD),aE(uD)),dCPG(a),0<RFOP&&aP(a,RFOP),L2?aUD(a):aE(a),aP(a,1),ctx.putImageData(imgData,0,0),iFR=!1}function cID(a){for(var b=a.length,c=0;c<b;c++)a[c]=0==(c+1)%4?255:0}function cE(){for(var c=ess.l,e=ess.st||{},f=ess.n,h=ess.c,k={o:0,e:0},l=0;l<c.length;l++){var o=c[l],p=o.st||e,q=o.n||f,u=o.c||h,v=o.op,w=u.a||k,a=u.r||w,r=u.g||w,g=u.b||w,b=a.o||0,z=a.e||0,A=r.o||0,B=r.e||0,I=g.o||0,J=g.e||0,K={oX:0,oY:0,nOf:0,data:null,nObj:null,nDp:null,config:o,nC:q,stC:p},M=4*PC*PC;if(q){M=PC*PC,p&&(0<p.x&&(K.oX=1e8),0<p.y&&(K.oY=1e8));var O=q.d;K.nObj=cN(q.c,q.xp),K.nDp=[];for(var d=0;d<O;d++){var Q;if(d<.5*O)Q=2*d/O;else{var R=d-.5*O;Q=1-2*R/O}K.nDp.push({r:b+rm()*z,g:A+rm()*B,b:I+rm()*J,a:v*Q})}}if(K.data=Array(M),q)for(var m=0;m<M;m++){var S=floor(m/PC),y=m-S*PC;K.data[m]=K.nObj.get(y,S)}else for(var m=0;m<M;m+=4)K.data[m+0]=rm()*(b+rm()*z),K.data[m+1]=rm()*(A+rm()*B),K.data[m+2]=rm()*(I+rm()*J);eL.push(K)}}function aE(a){for(var b=a.length,c=eL.length,e=0;e<c;e++){var f=eL[e],g=f.data,h=f.nObj,l=f.config,m=f.stC,n=m.x||0,o=m.y||0;if(f.oX-=dt*n,f.oY-=dt*o,h){var p=f.nC,q=f.nDp,r=p.d||2,d=p.s||0;f.nOf+=dt*d;var u=f.nOf;0>u?u=r+u%r:u>=r&&(u%=r);for(var v=0;v<b;v+=4){var w=floor(v/4),k=floor(w/PC),z=floor(w-k*PC)+f.oX;k+=f.oY;var x=h.get(z,k),A=r*x+u,B=ceil(A),I=floor(A),J=q[B%r],K=q[I%r],M=p.noBlend?1:1-(A-I),O=p.noBlend?0:1-M,Q=K.a,R=J.a;a[v]+=M*K.r*Q+O*J.r*R,a[v+1]+=M*K.g*Q+O*J.g*R,a[v+2]+=M*K.b*Q+O*J.b*R}}else{var S=f.oX,T=f.oY,U=l.op||1,W=l.sc||0,X=1-W,Z=floor(S),$=floor(T),_=ceil(S),aa=ceil(T),ba=4*Z,ca=4*PC*$,da=4*_,ea=4*PC*aa,fa=1-(S-Z),ga=1-(T-$),ha=1-fa,ia=1-ga,ja=fa*ga,ka=fa*ia,la=ha*ga,ma=ha*ia,na=ba+ca;0>na?na=b+na%b:na>=b&&(na%=b);var oa=ba+ea;0>oa?oa=b+oa%b:oa>=b&&(oa%=b);var pa=da+ca;0>pa?pa=b+pa%b:pa>=b&&(pa%=b);var qa=da+ea;0>qa?qa=b+qa%b:qa>=b&&(qa%=b);for(var v=0;v<b;v+=4){var ra=(v+na)%b,sa=(v+oa)%b,ta=(v+pa)%b,ua=(v+qa)%b,va=(X+W*rm())*U,wa=(X+W*rm())*U,xa=(X+W*rm())*U;a[v]+=va*(ja*g[ra]+ka*g[sa]+la*g[ta]+ma*g[ua]),a[v+1]+=wa*(ja*g[ra+1]+ka*g[sa+1]+la*g[ta+1]+ma*g[ua+1]),a[v+2]+=xa*(ja*g[ra+2]+ka*g[sa+2]+la*g[ta+2]+ma*g[ua+2])}}}}function aUD(a){for(var b=a.length,c=1-pxS,d=0;d<b;d+=4){var e=d,f=d+1,g=d+2;a[e]+=c*uD[e],a[f]+=c*uD[f],a[g]+=c*uD[g]}}function aP(a,c){for(var d=a.length,e=0;e<d;e+=4){var f=floor(e/4),h=floor(f/PC),i=floor(f-h*PC),j=+pP[i][h];if(j){var l=e,m=e+1,n=e+2,o=a[l],q=a[m],g=a[n],b=c*j/9,r=1-b;a[l]=r*o+b*(255-o),a[m]=r*q+b*(255-q),a[n]=r*g+b*(255-g)}}}function dCPG(a){for(var b=0,c=0;b<PC;){for(c=0;c<PC;)sGCFP(a,cP,b,c),c++;b++}}function gCP(){return{x:0,y:0,r:0,g:0,b:0,weight:1,distance:0}}function pPt(a){var b=plC[pI++];pI>=plC.length&&(pI=0);var c=-.125+.25*rm(),d=-.125+.25*rm();a.x=(b.x+c)*PC,a.y=(b.y+d)*PC}function sGCFP(a,b,d,e){sFCCP(b,d,e);for(var f=[],g=b.length,h=0;h<g;h+=2)h==g-1?f.push(b[h]):f.push(sC(b[h],b[h+1]));if(1===f.length){flipX&&(d=PC-d-1),flipY&&(e=PC-e-1);var j=4*d,k=4*(e*PC),l=k+j,m=f[0],c=l,n=l+1,o=l+2;if(L2){var p=pxS;0<+pP[d][e]&&(p=0);var q=1-p;a[c]=q*m.r+p*a[c],a[n]=q*m.g+p*a[n],a[o]=q*m.b+p*a[o]}else a[c]=m.r,a[n]=m.g,a[o]=m.b}else sGCFP(a,f,d,e)}function sFCCP(a,b,c){var d=a.length;if(L2){var e=b,f=c;flipX&&(e=PC-b-1),flipY&&(f=PC-c-1);var g=4*e,h=4*(f*PC),j=h+g,k=3,l=3,m=3,n=uD[j]-127.5,o=uD[j+1]-127.5,p=uD[j+2]-127.5;150>C?(n=abs(n)*n*DLO,o=abs(o)*o*DLO,p=abs(p)*p*DLO):850>C?(n=DMD*cos(TS*n),o=DMD*cos(TS*o),p=DMD*cos(TS*p)):(k=1+floor(abs((n+127.5)/DHI)),l=1+floor(abs((o+127.5)/DHI)),m=1+floor(abs((p+127.5)/DHI)),n=0,o=0,p=0);for(var q=0;q<d;q++){var r=a[q],u=r.x,v=r.y;r.distance=gDE(b,c,u,v,3),r.rd=gDE(b,c,u,v,k)+n,r.gd=gDE(b,c,u,v,l)+o,r.bd=gDE(b,c,u,v,m)+p}}else for(var r,q=0;q<d;q++)r=a[q],r.distance=gDE(b,c,r.x,r.y,3);a.sort(sM)}function gDE(a,b,c,d,e){return pow(c-a,e)+pow(d-b,e)}function sC(a,b){var c=gCP(),d=a.r,e=a.g,f=a.b,g=b.r,h=b.g,i=b.b,j=a.weight,k=b.weight,l=g-d,m=h-e,n=i-f;if(L2){var o=a.rd*j,p=b.rd*k,q=a.gd*j,r=b.gd*k,u=a.bd*j,v=b.bd*k;c.x=(a.x+b.x)/2,c.y=(a.y+b.y)/2,c.r=p/(o+p)*l+d,c.g=r/(q+r)*m+e,c.b=v/(u+v)*n+f,c.weight=(j+k)/2}else{var w=a.distance*j,x=b.distance*k,y=x/(w+x);c.x=(a.x+b.x)/2,c.y=(a.y+b.y)/2,c.r=y*l+d,c.g=y*m+e,c.b=y*n+f,c.weight=(j+k)/2}return c}function cN(a,b){a=a||1,b=b||1;for(var c=[],d=function(a,b,c){return b*a[0]+c*a[1]},e=sqrt(3),f=[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]],g=[],h=0;256>h;h++)g[h]=0|256*rm();for(var h=0;512>h;h++)c[h]=g[255&h];return{get:function(g,h){g*=a,h*=a;var k,l,m,n,o,p=(e-1)/2*(g+h),q=0|g+p,i=0|h+p,j=(3-e)/6,r=j*(q+i),u=g-(q-r),v=h-(i-r);u>v?(n=1,o=0):(n=0,o=1);var w=u-n+j,z=v-o+j,A=u-1+2*j,B=v-1+2*j,I=255&q,J=255&i,K=c[I+c[J]]%12,M=c[I+n+c[J+o]]%12,O=c[I+1+c[J+1]]%12,Q=.5-u*u-v*v;0>Q?k=0:(Q*=Q,k=Q*Q*d(f[K],u,v));var R=.5-w*w-z*z;0>R?l=0:(R*=R,l=R*R*d(f[M],w,z));var S=.5-A*A-B*B;0>S?m=0:(S*=S,m=S*S*d(f[O],A,B));var T=(70*(k+l+m)+1)/2;return 1!==b&&(T=pow(T,b)),T}}}';\\n\\n  function getScript() public pure returns (string memory) {\\n      return SCRIPT;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/TRRolls.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './TRColors.sol';\\n\\ninterface ITRRolls {\\n\\n  struct RelicInfo {\\n    string element;\\n    string palette;\\n    string essence;\\n    uint256 colorCount;\\n    string style;\\n    string speed;\\n    string gravity;\\n    string display;\\n    string relicType;\\n    string glyphType;\\n    uint256 runeflux;\\n    uint256 corruption;\\n    uint256 grailId;\\n    uint256[] grailGlyph;\\n  }\\n\\n  function getRelicInfo(TRKeys.RuneCore memory core) external view returns (RelicInfo memory);\\n  function getElement(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getPalette(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getEssence(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getStyle(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getSpeed(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getGravity(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getDisplay(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getColorCount(TRKeys.RuneCore memory core) external view returns (uint256);\\n  function getColorByIndex(TRKeys.RuneCore memory core, uint256 index) external view returns (string memory);\\n  function getRelicType(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getGlyphType(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getRuneflux(TRKeys.RuneCore memory core) external view returns (uint256);\\n  function getCorruption(TRKeys.RuneCore memory core) external view returns (uint256);\\n  function getDescription(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getGrailId(TRKeys.RuneCore memory core) external pure returns (uint256);\\n\\n}\\n\\n/// @notice The Reliquary Rarity Distribution\\ncontract TRRolls is Ownable, ITRRolls {\\n\\n  mapping(uint256 => address) public grailContracts;\\n\\n  error GrailsAreImmutable();\\n\\n  constructor() Ownable() {}\\n\\n  function getRelicInfo(TRKeys.RuneCore memory core)\\n    override\\n    public\\n    view\\n    returns (RelicInfo memory)\\n  {\\n    RelicInfo memory info;\\n    info.element = getElement(core);\\n    info.palette = getPalette(core);\\n    info.essence = getEssence(core);\\n    info.colorCount = getColorCount(core);\\n    info.style = getStyle(core);\\n    info.speed = getSpeed(core);\\n    info.gravity = getGravity(core);\\n    info.display = getDisplay(core);\\n    info.relicType = getRelicType(core);\\n    info.glyphType = getGlyphType(core);\\n    info.runeflux = getRuneflux(core);\\n    info.corruption = getCorruption(core);\\n    info.grailId = getGrailId(core);\\n\\n    if (info.grailId != TRKeys.GRAIL_ID_NONE) {\\n      info.grailGlyph = Grail(grailContracts[info.grailId]).getGlyph();\\n    }\\n\\n    return info;\\n  }\\n\\n  function getElement(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getElement();\\n    }\\n\\n    if (bytes(core.transmutation).length > 0) {\\n      return core.transmutation;\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_ELEMENT);\\n    if (roll <= uint256(125)) {\\n      return TRKeys.ELEM_NATURE;\\n    } else if (roll <= uint256(250)) {\\n      return TRKeys.ELEM_LIGHT;\\n    } else if (roll <= uint256(375)) {\\n      return TRKeys.ELEM_WATER;\\n    } else if (roll <= uint256(500)) {\\n      return TRKeys.ELEM_EARTH;\\n    } else if (roll <= uint256(625)) {\\n      return TRKeys.ELEM_WIND;\\n    } else if (roll <= uint256(750)) {\\n      return TRKeys.ELEM_ARCANE;\\n    } else if (roll <= uint256(875)) {\\n      return TRKeys.ELEM_SHADOW;\\n    } else {\\n      return TRKeys.ELEM_FIRE;\\n    }\\n  }\\n\\n  function getPalette(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getPalette();\\n    }\\n\\n    if (core.colors.length > 0) {\\n      return TRKeys.ANY_PAL_CUSTOM;\\n    }\\n\\n    string memory element = getElement(core);\\n    uint256 roll = roll1000(core, TRKeys.ROLL_PALETTE);\\n    if (TRUtils.compare(element, TRKeys.ELEM_NATURE)) {\\n      return getNaturePalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_LIGHT)) {\\n      return getLightPalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_WATER)) {\\n      return getWaterPalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_EARTH)) {\\n      return getEarthPalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_WIND)) {\\n      return getWindPalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_ARCANE)) {\\n      return getArcanePalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_SHADOW)) {\\n      return getShadowPalette(roll);\\n    } else {\\n      return getFirePalette(roll);\\n    }\\n  }\\n\\n  function getNaturePalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.NAT_PAL_JUNGLE;\\n    } else if (roll <= 900) {\\n      return TRKeys.NAT_PAL_CAMOUFLAGE;\\n    } else {\\n      return TRKeys.NAT_PAL_BIOLUMINESCENCE;\\n    }\\n  }\\n\\n  function getLightPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.LIG_PAL_PASTEL;\\n    } else if (roll <= 900) {\\n      return TRKeys.LIG_PAL_INFRARED;\\n    } else {\\n      return TRKeys.LIG_PAL_ULTRAVIOLET;\\n    }\\n  }\\n\\n  function getWaterPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.WAT_PAL_FROZEN;\\n    } else if (roll <= 900) {\\n      return TRKeys.WAT_PAL_DAWN;\\n    } else {\\n      return TRKeys.WAT_PAL_OPALESCENT;\\n    }\\n  }\\n\\n  function getEarthPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.EAR_PAL_COAL;\\n    } else if (roll <= 900) {\\n      return TRKeys.EAR_PAL_SILVER;\\n    } else {\\n      return TRKeys.EAR_PAL_GOLD;\\n    }\\n  }\\n\\n  function getWindPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.WIN_PAL_BERRY;\\n    } else if (roll <= 900) {\\n      return TRKeys.WIN_PAL_THUNDER;\\n    } else {\\n      return TRKeys.WIN_PAL_AERO;\\n    }\\n  }\\n\\n  function getArcanePalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.ARC_PAL_FROSTFIRE;\\n    } else if (roll <= 900) {\\n      return TRKeys.ARC_PAL_COSMIC;\\n    } else {\\n      return TRKeys.ARC_PAL_COLORLESS;\\n    }\\n  }\\n\\n  function getShadowPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.SHA_PAL_DARKNESS;\\n    } else if (roll <= 900) {\\n      return TRKeys.SHA_PAL_VOID;\\n    } else {\\n      return TRKeys.SHA_PAL_UNDEAD;\\n    }\\n  }\\n\\n  function getFirePalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.FIR_PAL_HEAT;\\n    } else if (roll <= 900) {\\n      return TRKeys.FIR_PAL_EMBER;\\n    } else {\\n      return TRKeys.FIR_PAL_CORRUPTED;\\n    }\\n  }\\n\\n  function getEssence(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getEssence();\\n    }\\n\\n    string memory element = getElement(core);\\n    string memory relicType = getRelicType(core);\\n    if (TRUtils.compare(element, TRKeys.ELEM_NATURE)) {\\n      return getNatureEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_LIGHT)) {\\n      return getLightEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_WATER)) {\\n      return getWaterEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_EARTH)) {\\n      return getEarthEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_WIND)) {\\n      return getWindEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_ARCANE)) {\\n      return getArcaneEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_SHADOW)) {\\n      return getShadowEssence(relicType);\\n    } else {\\n      return getFireEssence(relicType);\\n    }\\n  }\\n\\n  function getNatureEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.NAT_ESS_FOREST;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.NAT_ESS_SWAMP;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.NAT_ESS_WILDBLOOD;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.NAT_ESS_LIFE;\\n    } else {\\n      return TRKeys.NAT_ESS_SOUL;\\n    }\\n  }\\n\\n  function getLightEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.LIG_ESS_HEAVENLY;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.LIG_ESS_FAE;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.LIG_ESS_PRISMATIC;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.LIG_ESS_RADIANT;\\n    } else {\\n      return TRKeys.LIG_ESS_PHOTONIC;\\n    }\\n  }\\n\\n  function getWaterEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.WAT_ESS_TIDAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.WAT_ESS_ARCTIC;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.WAT_ESS_STORM;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.WAT_ESS_ILLUVIAL;\\n    } else {\\n      return TRKeys.WAT_ESS_UNDINE;\\n    }\\n  }\\n\\n  function getEarthEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.EAR_ESS_MINERAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.EAR_ESS_CRAGGY;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.EAR_ESS_DWARVEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.EAR_ESS_GNOMIC;\\n    } else {\\n      return TRKeys.EAR_ESS_CRYSTAL;\\n    }\\n  }\\n\\n  function getWindEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.WIN_ESS_SYLPHIC;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.WIN_ESS_VISCERAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.WIN_ESS_FROSTED;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.WIN_ESS_ELECTRIC;\\n    } else {\\n      return TRKeys.WIN_ESS_MAGNETIC;\\n    }\\n  }\\n\\n  function getArcaneEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.ARC_ESS_MAGIC;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.ARC_ESS_ASTRAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.ARC_ESS_FORBIDDEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.ARC_ESS_RUNIC;\\n    } else {\\n      return TRKeys.ARC_ESS_UNKNOWN;\\n    }\\n  }\\n\\n  function getShadowEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.SHA_ESS_NIGHT;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.SHA_ESS_FORGOTTEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.SHA_ESS_ABYSSAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.SHA_ESS_EVIL;\\n    } else {\\n      return TRKeys.SHA_ESS_LOST;\\n    }\\n  }\\n\\n  function getFireEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.FIR_ESS_INFERNAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.FIR_ESS_MOLTEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.FIR_ESS_ASHEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.FIR_ESS_DRACONIC;\\n    } else {\\n      return TRKeys.FIR_ESS_CELESTIAL;\\n    }\\n  }\\n\\n  function getStyle(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getStyle();\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_STYLE);\\n    if (roll <= 760) {\\n      return TRKeys.STYLE_SMOOTH;\\n    } else if (roll <= 940) {\\n      return TRKeys.STYLE_SILK;\\n    } else if (roll <= 980) {\\n      return TRKeys.STYLE_PAJAMAS;\\n    } else {\\n      return TRKeys.STYLE_SKETCH;\\n    }\\n  }\\n\\n  function getSpeed(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getSpeed();\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_SPEED);\\n    if (roll <= 70) {\\n      return TRKeys.SPEED_ZEN;\\n    } else if (roll <= 260) {\\n      return TRKeys.SPEED_TRANQUIL;\\n    } else if (roll <= 760) {\\n      return TRKeys.SPEED_NORMAL;\\n    } else if (roll <= 890) {\\n      return TRKeys.SPEED_FAST;\\n    } else if (roll <= 960) {\\n      return TRKeys.SPEED_SWIFT;\\n    } else {\\n      return TRKeys.SPEED_HYPER;\\n    }\\n  }\\n\\n  function getGravity(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getGravity();\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_GRAVITY);\\n    if (roll <= 50) {\\n      return TRKeys.GRAV_LUNAR;\\n    } else if (roll <= 150) {\\n      return TRKeys.GRAV_ATMOSPHERIC;\\n    } else if (roll <= 340) {\\n      return TRKeys.GRAV_LOW;\\n    } else if (roll <= 730) {\\n      return TRKeys.GRAV_NORMAL;\\n    } else if (roll <= 920) {\\n      return TRKeys.GRAV_HIGH;\\n    } else if (roll <= 970) {\\n      return TRKeys.GRAV_MASSIVE;\\n    } else if (roll <= 995) {\\n      return TRKeys.GRAV_STELLAR;\\n    } else {\\n      return TRKeys.GRAV_GALACTIC;\\n    }\\n  }\\n\\n  function getDisplay(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getDisplay();\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_DISPLAY);\\n    if (roll <= 250) {\\n      return TRKeys.DISPLAY_NORMAL;\\n    } else if (roll <= 500) {\\n      return TRKeys.DISPLAY_MIRRORED;\\n    } else if (roll <= 750) {\\n      return TRKeys.DISPLAY_UPSIDEDOWN;\\n    } else {\\n      return TRKeys.DISPLAY_MIRROREDUPSIDEDOWN;\\n    }\\n  }\\n\\n  function getColorCount(TRKeys.RuneCore memory core) override public view returns (uint256) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getColorCount();\\n    }\\n\\n    string memory style = getStyle(core);\\n    if (TRUtils.compare(style, TRKeys.STYLE_SILK)) {\\n      return 5;\\n    } else if (TRUtils.compare(style, TRKeys.STYLE_PAJAMAS)) {\\n      return 5;\\n    } else if (TRUtils.compare(style, TRKeys.STYLE_SKETCH)) {\\n      return 4;\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_COLORCOUNT);\\n    if (roll <= 400) {\\n      return 2;\\n    } else if (roll <= 750) {\\n      return 3;\\n    } else {\\n      return 4;\\n    }\\n  }\\n\\n  function getColorByIndex(TRKeys.RuneCore memory core, uint256 index)\\n    override\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    // if the requested index exceeds the color count, return empty string\\n    if (index >= getColorCount(core)) {\\n      return '';\\n    }\\n\\n    // if we've imagined new colors, use them instead\\n    if (core.colors.length > index) {\\n      return TRUtils.getColorCode(core.colors[index]);\\n    }\\n\\n    // fetch the color palette\\n    uint256[] memory colorInts;\\n    uint256 colorIntCount;\\n    (colorInts, colorIntCount) = TRColors.get(getPalette(core));\\n\\n    // shuffle the color palette\\n    uint256 i;\\n    uint256 temp;\\n    uint256 count = colorIntCount;\\n    while (count > 0) {\\n      string memory rollKey = string(abi.encodePacked(\\n        TRKeys.ROLL_SHUFFLE,\\n        TRUtils.toString(count)\\n      ));\\n\\n      i = roll1000(core, rollKey) % count;\\n\\n      temp = colorInts[--count];\\n      colorInts[count] = colorInts[i];\\n      colorInts[i] = temp;\\n    }\\n\\n    // slightly adjust the RGB channels of the color to make it unique\\n    temp = getWobbledColor(core, index, colorInts[index % colorIntCount]);\\n\\n    // return a hex code (without the #)\\n    return TRUtils.getColorCode(temp);\\n  }\\n\\n  function getWobbledColor(TRKeys.RuneCore memory core, uint256 index, uint256 color)\\n    public\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 r = (color >> uint256(16)) & uint256(255);\\n    uint256 g = (color >> uint256(8)) & uint256(255);\\n    uint256 b = color & uint256(255);\\n\\n    string memory k = TRUtils.toString(index);\\n    uint256 dr = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_RED, k))) % 8;\\n    uint256 dg = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_GREEN, k))) % 8;\\n    uint256 db = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_BLUE, k))) % 8;\\n    uint256 rSign = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_REDSIGN, k))) % 2;\\n    uint256 gSign = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_GREENSIGN, k))) % 2;\\n    uint256 bSign = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_BLUESIGN, k))) % 2;\\n\\n    if (rSign == 0) {\\n      if (r > dr) {\\n        r -= dr;\\n      } else {\\n        r = 0;\\n      }\\n    } else {\\n      if (r + dr <= 255) {\\n        r += dr;\\n      } else {\\n        r = 255;\\n      }\\n    }\\n\\n    if (gSign == 0) {\\n      if (g > dg) {\\n        g -= dg;\\n      } else {\\n        g = 0;\\n      }\\n    } else {\\n      if (g + dg <= 255) {\\n        g += dg;\\n      } else {\\n        g = 255;\\n      }\\n    }\\n\\n    if (bSign == 0) {\\n      if (b > db) {\\n        b -= db;\\n      } else {\\n        b = 0;\\n      }\\n    } else {\\n      if (b + db <= 255) {\\n        b += db;\\n      } else {\\n        b = 255;\\n      }\\n    }\\n\\n    return uint256((r << uint256(16)) | (g << uint256(8)) | b);\\n  }\\n\\n  function getRelicType(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getRelicType();\\n    }\\n\\n    if (core.isDivinityQuestLoot) {\\n      return TRKeys.RELIC_TYPE_CURIO;\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_RELICTYPE);\\n    if (roll <= 360) {\\n      return TRKeys.RELIC_TYPE_TRINKET;\\n    } else if (roll <= 620) {\\n      return TRKeys.RELIC_TYPE_TALISMAN;\\n    } else if (roll <= 820) {\\n      return TRKeys.RELIC_TYPE_AMULET;\\n    } else if (roll <= 960) {\\n      return TRKeys.RELIC_TYPE_FOCUS;\\n    } else {\\n      return TRKeys.RELIC_TYPE_CURIO;\\n    }\\n  }\\n\\n  function getGlyphType(TRKeys.RuneCore memory core) override public pure returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return TRKeys.GLYPH_TYPE_GRAIL;\\n    }\\n\\n    if (core.glyph.length > 0) {\\n      return TRKeys.GLYPH_TYPE_CUSTOM;\\n    }\\n\\n    return TRKeys.GLYPH_TYPE_NONE;\\n  }\\n\\n  function getRuneflux(TRKeys.RuneCore memory core) override public view returns (uint256) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getRuneflux();\\n    }\\n\\n    if (core.isDivinityQuestLoot) {\\n      return 700 + rollMax(core, TRKeys.ROLL_RUNEFLUX) % 300;\\n    }\\n\\n    return roll1000(core, TRKeys.ROLL_RUNEFLUX) - 1;\\n  }\\n\\n  function getCorruption(TRKeys.RuneCore memory core) override public view returns (uint256) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getCorruption();\\n    }\\n\\n    if (core.isDivinityQuestLoot) {\\n      return 700 + rollMax(core, TRKeys.ROLL_CORRUPTION) % 300;\\n    }\\n\\n    return roll1000(core, TRKeys.ROLL_CORRUPTION) - 1;\\n  }\\n\\n  function getDescription(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getDescription();\\n    }\\n\\n    return '';\\n  }\\n\\n  function getGrailId(TRKeys.RuneCore memory core) override public pure returns (uint256) {\\n    uint256 grailId = TRKeys.GRAIL_ID_NONE;\\n\\n    if (bytes(core.hiddenLeyLines).length > 0) {\\n      uint256 rollDist = TRUtils.random(core.hiddenLeyLines) ^ TRUtils.random(TRKeys.ROLL_GRAILS);\\n      uint256 digits = 1 + rollDist % TRKeys.GRAIL_DISTRIBUTION;\\n      for (uint256 i; i < TRKeys.GRAIL_COUNT; i++) {\\n        if (core.tokenId == digits + TRKeys.GRAIL_DISTRIBUTION * i) {\\n          uint256 rollShuf = TRUtils.random(core.hiddenLeyLines) ^ TRUtils.random(TRKeys.ROLL_ELEMENT);\\n          uint256 offset = rollShuf % TRKeys.GRAIL_COUNT;\\n          grailId = 1 + (i + offset) % TRKeys.GRAIL_COUNT;\\n          break;\\n        }\\n      }\\n    }\\n\\n    return grailId;\\n  }\\n\\n  function rollMax(TRKeys.RuneCore memory core, string memory key) internal pure returns (uint256) {\\n    string memory tokenKey = string(abi.encodePacked(key, TRUtils.toString(7 * core.tokenId)));\\n    return TRUtils.random(core.runeHash) ^ TRUtils.random(tokenKey);\\n  }\\n\\n  function roll1000(TRKeys.RuneCore memory core, string memory key) internal pure returns (uint256) {\\n    return 1 + rollMax(core, key) % 1000;\\n  }\\n\\n  function rollColor(TRKeys.RuneCore memory core, uint256 index) internal pure returns (uint256) {\\n    string memory k = TRUtils.toString(index);\\n    return rollMax(core, string(abi.encodePacked(TRKeys.ROLL_RANDOMCOLOR, k))) % 16777216;\\n  }\\n\\n  function setGrailContract(uint256 grailId, address grailContract) public onlyOwner {\\n    if (grailContracts[grailId] != address(0)) revert GrailsAreImmutable();\\n\\n    grailContracts[grailId] = grailContract;\\n  }\\n\\n}\\n\\n\\n\\nabstract contract Grail {\\n  function getElement() external pure virtual returns (string memory);\\n  function getPalette() external pure virtual returns (string memory);\\n  function getEssence() external pure virtual returns (string memory);\\n  function getStyle() external pure virtual returns (string memory);\\n  function getSpeed() external pure virtual returns (string memory);\\n  function getGravity() external pure virtual returns (string memory);\\n  function getDisplay() external pure virtual returns (string memory);\\n  function getColorCount() external pure virtual returns (uint256);\\n  function getRelicType() external pure virtual returns (string memory);\\n  function getRuneflux() external pure virtual returns (uint256);\\n  function getCorruption() external pure virtual returns (uint256);\\n  function getGlyph() external pure virtual returns (uint256[] memory);\\n  function getDescription() external pure virtual returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TRColors.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport './TRKeys.sol';\\n\\n/// @notice The Reliquary Color Palettes\\nlibrary TRColors {\\n\\n  function get(string memory palette)\\n    public\\n    pure\\n    returns (uint256[] memory, uint256)\\n  {\\n    uint256[] memory colorInts = new uint256[](12);\\n    uint256 colorIntCount = 0;\\n\\n    if (TRUtils.compare(palette, TRKeys.NAT_PAL_JUNGLE)) {\\n      colorInts[0] = uint256(3299866);\\n      colorInts[1] = uint256(1256965);\\n      colorInts[2] = uint256(2375731);\\n      colorInts[3] = uint256(67585);\\n      colorInts[4] = uint256(16749568);\\n      colorInts[5] = uint256(16776295);\\n      colorInts[6] = uint256(16748230);\\n      colorInts[7] = uint256(16749568);\\n      colorInts[8] = uint256(67585);\\n      colorInts[9] = uint256(2375731);\\n      colorIntCount = uint256(10);\\n    } else if (TRUtils.compare(palette, TRKeys.NAT_PAL_CAMOUFLAGE)) {\\n      colorInts[0] = uint256(10328673);\\n      colorInts[1] = uint256(6245168);\\n      colorInts[2] = uint256(2171169);\\n      colorInts[3] = uint256(4610624);\\n      colorInts[4] = uint256(5269320);\\n      colorInts[5] = uint256(4994846);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.NAT_PAL_BIOLUMINESCENCE)) {\\n      colorInts[0] = uint256(2434341);\\n      colorInts[1] = uint256(4194315);\\n      colorInts[2] = uint256(6488209);\\n      colorInts[3] = uint256(7270568);\\n      colorInts[4] = uint256(9117400);\\n      colorInts[5] = uint256(1599944);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.LIG_PAL_PASTEL)) {\\n      colorInts[0] = uint256(16761760);\\n      colorInts[1] = uint256(16756669);\\n      colorInts[2] = uint256(16636817);\\n      colorInts[3] = uint256(13762047);\\n      colorInts[4] = uint256(8714928);\\n      colorInts[5] = uint256(9425908);\\n      colorInts[6] = uint256(16499435);\\n      colorInts[7] = uint256(10587345);\\n      colorIntCount = uint256(8);\\n    } else if (TRUtils.compare(palette, TRKeys.LIG_PAL_INFRARED)) {\\n      colorInts[0] = uint256(16642938);\\n      colorInts[1] = uint256(16755712);\\n      colorInts[2] = uint256(15883521);\\n      colorInts[3] = uint256(13503623);\\n      colorInts[4] = uint256(8257951);\\n      colorInts[5] = uint256(327783);\\n      colorInts[6] = uint256(13503623);\\n      colorInts[7] = uint256(15883521);\\n      colorIntCount = uint256(8);\\n    } else if (TRUtils.compare(palette, TRKeys.LIG_PAL_ULTRAVIOLET)) {\\n      colorInts[0] = uint256(14200063);\\n      colorInts[1] = uint256(5046460);\\n      colorInts[2] = uint256(16775167);\\n      colorInts[3] = uint256(16024318);\\n      colorInts[4] = uint256(11665662);\\n      colorInts[5] = uint256(1507410);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.WAT_PAL_FROZEN)) {\\n      colorInts[0] = uint256(13034750);\\n      colorInts[1] = uint256(4102128);\\n      colorInts[2] = uint256(826589);\\n      colorInts[3] = uint256(346764);\\n      colorInts[4] = uint256(6707);\\n      colorInts[5] = uint256(1277652);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.WAT_PAL_DAWN)) {\\n      colorInts[0] = uint256(334699);\\n      colorInts[1] = uint256(610965);\\n      colorInts[2] = uint256(5408708);\\n      colorInts[3] = uint256(16755539);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.WAT_PAL_OPALESCENT)) {\\n      colorInts[0] = uint256(15985337);\\n      colorInts[1] = uint256(15981758);\\n      colorInts[2] = uint256(15713994);\\n      colorInts[3] = uint256(13941977);\\n      colorInts[4] = uint256(8242919);\\n      colorInts[5] = uint256(15985337);\\n      colorInts[6] = uint256(15981758);\\n      colorInts[7] = uint256(15713994);\\n      colorInts[8] = uint256(13941977);\\n      colorInts[9] = uint256(8242919);\\n      colorIntCount = uint256(10);\\n    } else if (TRUtils.compare(palette, TRKeys.EAR_PAL_COAL)) {\\n      colorInts[0] = uint256(3613475);\\n      colorInts[1] = uint256(1577233);\\n      colorInts[2] = uint256(4407359);\\n      colorInts[3] = uint256(2894892);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.EAR_PAL_SILVER)) {\\n      colorInts[0] = uint256(16053492);\\n      colorInts[1] = uint256(15329769);\\n      colorInts[2] = uint256(10132122);\\n      colorInts[3] = uint256(6776679);\\n      colorInts[4] = uint256(3881787);\\n      colorInts[5] = uint256(1579032);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.EAR_PAL_GOLD)) {\\n      colorInts[0] = uint256(16373583);\\n      colorInts[1] = uint256(12152866);\\n      colorInts[2] = uint256(12806164);\\n      colorInts[3] = uint256(4725765);\\n      colorInts[4] = uint256(2557441);\\n      colorIntCount = uint256(5);\\n    } else if (TRUtils.compare(palette, TRKeys.WIN_PAL_BERRY)) {\\n      colorInts[0] = uint256(5428970);\\n      colorInts[1] = uint256(13323211);\\n      colorInts[2] = uint256(15385745);\\n      colorInts[3] = uint256(13355851);\\n      colorInts[4] = uint256(15356630);\\n      colorInts[5] = uint256(14903600);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.WIN_PAL_THUNDER)) {\\n      colorInts[0] = uint256(924722);\\n      colorInts[1] = uint256(9464002);\\n      colorInts[2] = uint256(470093);\\n      colorInts[3] = uint256(6378394);\\n      colorInts[4] = uint256(16246484);\\n      colorInts[5] = uint256(12114921);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.WIN_PAL_AERO)) {\\n      colorInts[0] = uint256(4609);\\n      colorInts[1] = uint256(803087);\\n      colorInts[2] = uint256(2062109);\\n      colorInts[3] = uint256(11009906);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.ARC_PAL_FROSTFIRE)) {\\n      colorInts[0] = uint256(16772570);\\n      colorInts[1] = uint256(4043519);\\n      colorInts[2] = uint256(16758832);\\n      colorInts[3] = uint256(16720962);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.ARC_PAL_COSMIC)) {\\n      colorInts[0] = uint256(1182264);\\n      colorInts[1] = uint256(10834562);\\n      colorInts[2] = uint256(4269159);\\n      colorInts[3] = uint256(16769495);\\n      colorInts[4] = uint256(3351916);\\n      colorInts[5] = uint256(12612224);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.ARC_PAL_COLORLESS)) {\\n      colorInts[0] = uint256(1644825);\\n      colorInts[1] = uint256(15132390);\\n      colorIntCount = uint256(2);\\n    } else if (TRUtils.compare(palette, TRKeys.SHA_PAL_DARKNESS)) {\\n      colorInts[0] = uint256(2885188);\\n      colorInts[1] = uint256(1572943);\\n      colorInts[2] = uint256(1179979);\\n      colorInts[3] = uint256(657930);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.SHA_PAL_VOID)) {\\n      colorInts[0] = uint256(1572943);\\n      colorInts[1] = uint256(4194415);\\n      colorInts[2] = uint256(6488209);\\n      colorInts[3] = uint256(13051525);\\n      colorInts[4] = uint256(657930);\\n      colorIntCount = uint256(5);\\n    } else if (TRUtils.compare(palette, TRKeys.SHA_PAL_UNDEAD)) {\\n      colorInts[0] = uint256(3546937);\\n      colorInts[1] = uint256(50595);\\n      colorInts[2] = uint256(7511983);\\n      colorInts[3] = uint256(7563923);\\n      colorInts[4] = uint256(10535352);\\n      colorIntCount = uint256(5);\\n    } else if (TRUtils.compare(palette, TRKeys.FIR_PAL_HEAT)) {\\n      colorInts[0] = uint256(590337);\\n      colorInts[1] = uint256(12141574);\\n      colorInts[2] = uint256(15908162);\\n      colorInts[3] = uint256(6886400);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.FIR_PAL_EMBER)) {\\n      colorInts[0] = uint256(1180162);\\n      colorInts[1] = uint256(7929858);\\n      colorInts[2] = uint256(7012357);\\n      colorInts[3] = uint256(16744737);\\n      colorIntCount = uint256(4);\\n    } else {\\n      colorInts[0] = uint256(197391);\\n      colorInts[1] = uint256(3604610);\\n      colorInts[2] = uint256(6553778);\\n      colorInts[3] = uint256(14305728);\\n      colorIntCount = uint256(4);\\n    }\\n\\n    return (colorInts, colorIntCount);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/TRKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport './TRUtils.sol';\\n\\n/// @notice The Reliquary Constants\\nlibrary TRKeys {\\n\\n  struct RuneCore {\\n    uint256 tokenId;\\n    uint8 level;\\n    uint32 mana;\\n    bool isDivinityQuestLoot;\\n    bool isSecretDiscovered;\\n    uint8 secretsDiscovered;\\n    uint256 runeCode;\\n    string runeHash;\\n    string transmutation;\\n    address credit;\\n    uint256[] glyph;\\n    uint24[] colors;\\n    address metadataAddress;\\n    string hiddenLeyLines;\\n  }\\n\\n  uint256 public constant FIRST_OPEN_VIBES_ID = 7778;\\n  address public constant VIBES_GENESIS = 0x6c7C97CaFf156473F6C9836522AE6e1d6448Abe7;\\n  address public constant VIBES_OPEN = 0xF3FCd0F025c21F087dbEB754516D2AD8279140Fc;\\n\\n  uint8 public constant CURIO_SUPPLY = 64;\\n  uint256 public constant CURIO_TITHE = 80000000000000000; // 0.08 ETH\\n\\n  uint32 public constant MANA_PER_YEAR = 100;\\n  uint32 public constant MANA_PER_YEAR_LV2 = 150;\\n  uint32 public constant SECONDS_PER_YEAR = 31536000;\\n  uint32 public constant MANA_FROM_REVELATION = 50;\\n  uint32 public constant MANA_FROM_DIVINATION = 50;\\n  uint32 public constant MANA_FROM_VIBRATION = 100;\\n  uint32 public constant MANA_COST_TO_UPGRADE = 150;\\n\\n  uint256 public constant RELIC_SIZE = 64;\\n  uint256 public constant RELIC_SUPPLY = 1047;\\n  uint256 public constant TOTAL_SUPPLY = CURIO_SUPPLY + RELIC_SUPPLY;\\n  uint256 public constant RELIC_TITHE = 150000000000000000; // 0.15 ETH\\n  uint256 public constant INVENTORY_CAPACITY = 10;\\n  uint256 public constant BYTES_PER_RELICHASH = 3;\\n  uint256 public constant BYTES_PER_BLOCKHASH = 32;\\n  uint256 public constant HALF_POSSIBILITY_SPACE = (16**6) / 2;\\n  bytes32 public constant RELICHASH_MASK = 0x0000000000000000000000000000000000000000000000000000000000ffffff;\\n  uint256 public constant RELIC_DISCOUNT_GENESIS = 120000000000000000; // 0.12 ETH\\n  uint256 public constant RELIC_DISCOUNT_OPEN = 50000000000000000; // 0.05 ETH\\n\\n  uint256 public constant RELIQUARY_CHAMBER_OUTSIDE = 0;\\n  uint256 public constant RELIQUARY_CHAMBER_GUARDIANS_HALL = 1;\\n  uint256 public constant RELIQUARY_CHAMBER_INNER_SANCTUM = 2;\\n  uint256 public constant RELIQUARY_CHAMBER_DIVINITYS_END = 3;\\n  uint256 public constant RELIQUARY_CHAMBER_CHAMPIONS_VAULT = 4;\\n  uint256 public constant ELEMENTAL_GUARDIAN_DNA = 88888888;\\n  uint256 public constant GRAIL_ID_NONE = 0;\\n  uint256 public constant GRAIL_ID_NATURE = 1;\\n  uint256 public constant GRAIL_ID_LIGHT = 2;\\n  uint256 public constant GRAIL_ID_WATER = 3;\\n  uint256 public constant GRAIL_ID_EARTH = 4;\\n  uint256 public constant GRAIL_ID_WIND = 5;\\n  uint256 public constant GRAIL_ID_ARCANE = 6;\\n  uint256 public constant GRAIL_ID_SHADOW = 7;\\n  uint256 public constant GRAIL_ID_FIRE = 8;\\n  uint256 public constant GRAIL_COUNT = 8;\\n  uint256 public constant GRAIL_DISTRIBUTION = 100;\\n  uint8 public constant SECRETS_OF_THE_GRAIL = 128;\\n  uint8 public constant MODE_TRANSMUTE_ELEMENT = 1;\\n  uint8 public constant MODE_CREATE_GLYPH = 2;\\n  uint8 public constant MODE_IMAGINE_COLORS = 3;\\n\\n  uint256 public constant MAX_COLOR_INTS = 10;\\n\\n  string public constant ROLL_ELEMENT = 'ELEMENT';\\n  string public constant ROLL_PALETTE = 'PALETTE';\\n  string public constant ROLL_SHUFFLE = 'SHUFFLE';\\n  string public constant ROLL_RED = 'RED';\\n  string public constant ROLL_GREEN = 'GREEN';\\n  string public constant ROLL_BLUE = 'BLUE';\\n  string public constant ROLL_REDSIGN = 'REDSIGN';\\n  string public constant ROLL_GREENSIGN = 'GREENSIGN';\\n  string public constant ROLL_BLUESIGN = 'BLUESIGN';\\n  string public constant ROLL_RANDOMCOLOR = 'RANDOMCOLOR';\\n  string public constant ROLL_RELICTYPE = 'RELICTYPE';\\n  string public constant ROLL_STYLE = 'STYLE';\\n  string public constant ROLL_COLORCOUNT = 'COLORCOUNT';\\n  string public constant ROLL_SPEED = 'SPEED';\\n  string public constant ROLL_GRAVITY = 'GRAVITY';\\n  string public constant ROLL_DISPLAY = 'DISPLAY';\\n  string public constant ROLL_GRAILS = 'GRAILS';\\n  string public constant ROLL_RUNEFLUX = 'RUNEFLUX';\\n  string public constant ROLL_CORRUPTION = 'CORRUPTION';\\n\\n  string public constant RELIC_TYPE_GRAIL = 'Grail';\\n  string public constant RELIC_TYPE_CURIO = 'Curio';\\n  string public constant RELIC_TYPE_FOCUS = 'Focus';\\n  string public constant RELIC_TYPE_AMULET = 'Amulet';\\n  string public constant RELIC_TYPE_TALISMAN = 'Talisman';\\n  string public constant RELIC_TYPE_TRINKET = 'Trinket';\\n\\n  string public constant GLYPH_TYPE_GRAIL = 'Origin';\\n  string public constant GLYPH_TYPE_CUSTOM = 'Divine';\\n  string public constant GLYPH_TYPE_NONE = 'None';\\n\\n  string public constant ELEM_NATURE = 'Nature';\\n  string public constant ELEM_LIGHT = 'Light';\\n  string public constant ELEM_WATER = 'Water';\\n  string public constant ELEM_EARTH = 'Earth';\\n  string public constant ELEM_WIND = 'Wind';\\n  string public constant ELEM_ARCANE = 'Arcane';\\n  string public constant ELEM_SHADOW = 'Shadow';\\n  string public constant ELEM_FIRE = 'Fire';\\n\\n  string public constant ANY_PAL_CUSTOM = 'Divine';\\n\\n  string public constant NAT_PAL_JUNGLE = 'Jungle';\\n  string public constant NAT_PAL_CAMOUFLAGE = 'Camouflage';\\n  string public constant NAT_PAL_BIOLUMINESCENCE = 'Bioluminescence';\\n\\n  string public constant NAT_ESS_FOREST = 'Forest';\\n  string public constant NAT_ESS_LIFE = 'Life';\\n  string public constant NAT_ESS_SWAMP = 'Swamp';\\n  string public constant NAT_ESS_WILDBLOOD = 'Wildblood';\\n  string public constant NAT_ESS_SOUL = 'Soul';\\n\\n  string public constant LIG_PAL_PASTEL = 'Pastel';\\n  string public constant LIG_PAL_INFRARED = 'Infrared';\\n  string public constant LIG_PAL_ULTRAVIOLET = 'Ultraviolet';\\n\\n  string public constant LIG_ESS_HEAVENLY = 'Heavenly';\\n  string public constant LIG_ESS_FAE = 'Fae';\\n  string public constant LIG_ESS_PRISMATIC = 'Prismatic';\\n  string public constant LIG_ESS_RADIANT = 'Radiant';\\n  string public constant LIG_ESS_PHOTONIC = 'Photonic';\\n\\n  string public constant WAT_PAL_FROZEN = 'Frozen';\\n  string public constant WAT_PAL_DAWN = 'Dawn';\\n  string public constant WAT_PAL_OPALESCENT = 'Opalescent';\\n\\n  string public constant WAT_ESS_TIDAL = 'Tidal';\\n  string public constant WAT_ESS_ARCTIC = 'Arctic';\\n  string public constant WAT_ESS_STORM = 'Storm';\\n  string public constant WAT_ESS_ILLUVIAL = 'Illuvial';\\n  string public constant WAT_ESS_UNDINE = 'Undine';\\n\\n  string public constant EAR_PAL_COAL = 'Coal';\\n  string public constant EAR_PAL_SILVER = 'Silver';\\n  string public constant EAR_PAL_GOLD = 'Gold';\\n\\n  string public constant EAR_ESS_MINERAL = 'Mineral';\\n  string public constant EAR_ESS_CRAGGY = 'Craggy';\\n  string public constant EAR_ESS_DWARVEN = 'Dwarven';\\n  string public constant EAR_ESS_GNOMIC = 'Gnomic';\\n  string public constant EAR_ESS_CRYSTAL = 'Crystal';\\n\\n  string public constant WIN_PAL_BERRY = 'Berry';\\n  string public constant WIN_PAL_THUNDER = 'Thunder';\\n  string public constant WIN_PAL_AERO = 'Aero';\\n\\n  string public constant WIN_ESS_SYLPHIC = 'Sylphic';\\n  string public constant WIN_ESS_VISCERAL = 'Visceral';\\n  string public constant WIN_ESS_FROSTED = 'Frosted';\\n  string public constant WIN_ESS_ELECTRIC = 'Electric';\\n  string public constant WIN_ESS_MAGNETIC = 'Magnetic';\\n\\n  string public constant ARC_PAL_FROSTFIRE = 'Frostfire';\\n  string public constant ARC_PAL_COSMIC = 'Cosmic';\\n  string public constant ARC_PAL_COLORLESS = 'Colorless';\\n\\n  string public constant ARC_ESS_MAGIC = 'Magic';\\n  string public constant ARC_ESS_ASTRAL = 'Astral';\\n  string public constant ARC_ESS_FORBIDDEN = 'Forbidden';\\n  string public constant ARC_ESS_RUNIC = 'Runic';\\n  string public constant ARC_ESS_UNKNOWN = 'Unknown';\\n\\n  string public constant SHA_PAL_DARKNESS = 'Darkness';\\n  string public constant SHA_PAL_VOID = 'Void';\\n  string public constant SHA_PAL_UNDEAD = 'Undead';\\n\\n  string public constant SHA_ESS_NIGHT = 'Night';\\n  string public constant SHA_ESS_FORGOTTEN = 'Forgotten';\\n  string public constant SHA_ESS_ABYSSAL = 'Abyssal';\\n  string public constant SHA_ESS_EVIL = 'Evil';\\n  string public constant SHA_ESS_LOST = 'Lost';\\n\\n  string public constant FIR_PAL_HEAT = 'Heat';\\n  string public constant FIR_PAL_EMBER = 'Ember';\\n  string public constant FIR_PAL_CORRUPTED = 'Corrupted';\\n\\n  string public constant FIR_ESS_INFERNAL = 'Infernal';\\n  string public constant FIR_ESS_MOLTEN = 'Molten';\\n  string public constant FIR_ESS_ASHEN = 'Ashen';\\n  string public constant FIR_ESS_DRACONIC = 'Draconic';\\n  string public constant FIR_ESS_CELESTIAL = 'Celestial';\\n\\n  string public constant STYLE_SMOOTH = 'Smooth';\\n  string public constant STYLE_PAJAMAS = 'Pajamas';\\n  string public constant STYLE_SILK = 'Silk';\\n  string public constant STYLE_SKETCH = 'Sketch';\\n\\n  string public constant SPEED_ZEN = 'Zen';\\n  string public constant SPEED_TRANQUIL = 'Tranquil';\\n  string public constant SPEED_NORMAL = 'Normal';\\n  string public constant SPEED_FAST = 'Fast';\\n  string public constant SPEED_SWIFT = 'Swift';\\n  string public constant SPEED_HYPER = 'Hyper';\\n\\n  string public constant GRAV_LUNAR = 'Lunar';\\n  string public constant GRAV_ATMOSPHERIC = 'Atmospheric';\\n  string public constant GRAV_LOW = 'Low';\\n  string public constant GRAV_NORMAL = 'Normal';\\n  string public constant GRAV_HIGH = 'High';\\n  string public constant GRAV_MASSIVE = 'Massive';\\n  string public constant GRAV_STELLAR = 'Stellar';\\n  string public constant GRAV_GALACTIC = 'Galactic';\\n\\n  string public constant DISPLAY_NORMAL = 'Normal';\\n  string public constant DISPLAY_MIRRORED = 'Mirrored';\\n  string public constant DISPLAY_UPSIDEDOWN = 'UpsideDown';\\n  string public constant DISPLAY_MIRROREDUPSIDEDOWN = 'MirroredUpsideDown';\\n\\n}\\n\"\r\n    },\r\n    \"contracts/TRUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice The Reliquary Utility Methods\\nlibrary TRUtils {\\n\\n  function random(string memory input) public pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function getColorCode(uint256 color) public pure returns (string memory) {\\n    bytes16 hexChars = '0123456789abcdef';\\n    uint256 r1 = (color >> uint256(20)) & uint256(15);\\n    uint256 r2 = (color >> uint256(16)) & uint256(15);\\n    uint256 g1 = (color >> uint256(12)) & uint256(15);\\n    uint256 g2 = (color >> uint256(8)) & uint256(15);\\n    uint256 b1 = (color >> uint256(4)) & uint256(15);\\n    uint256 b2 = color & uint256(15);\\n    bytes memory code = new bytes(6);\\n    code[0] = hexChars[r1];\\n    code[1] = hexChars[r2];\\n    code[2] = hexChars[g1];\\n    code[3] = hexChars[g2];\\n    code[4] = hexChars[b1];\\n    code[5] = hexChars[b2];\\n    return string(code);\\n  }\\n\\n  function compare(string memory a, string memory b) public pure returns (bool) {\\n    if (bytes(a).length != bytes(b).length) {\\n      return false;\\n    } else {\\n      return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n  }\\n\\n  function toString(uint256 value) public pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return '0';\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  // https://ethereum.stackexchange.com/a/8447\\n  function toAsciiString(address x) public pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2*i] = char(hi);\\n      s[2*i+1] = char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  // https://stackoverflow.com/a/69302348/424107\\n  function toCapsHexString(uint256 i) internal pure returns (string memory) {\\n    if (i == 0) return '0';\\n    uint j = i;\\n    uint length;\\n    while (j != 0) {\\n      length++;\\n      j = j >> 4;\\n    }\\n    uint mask = 15;\\n    bytes memory bstr = new bytes(length);\\n    uint k = length;\\n    while (i != 0) {\\n      uint curr = (i & mask);\\n      bstr[--k] = curr > 9 ?\\n        bytes1(uint8(55 + curr)) :\\n        bytes1(uint8(48 + curr)); // 55 = 65 - 10\\n      i = i >> 4;\\n    }\\n    return string(bstr);\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/TRScript.sol\": {\r\n        \"TRScript\": \"0x04d79f02e8d529ccede8393413973a9aced36213\"\r\n      },\r\n      \"contracts/TRUtils.sol\": {\r\n        \"TRUtils\": \"0xfc29bbb9d6e92605291cca1d5fc24870a50b0780\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RollsAreImmutable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"animationSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"animationURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"descriptionsByElement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"descriptionsByEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getColorByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getColorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getCorruption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getDisplay\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getElement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getGrailId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getGravity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxRelicLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getPalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getRelicType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getRuneflux\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScript\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getSpeed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getStyle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"}],\"name\":\"setAnimationSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setAnimationURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"element\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"setDescriptionForElement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"essence\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"setDescriptionForEssence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"}],\"name\":\"setImageSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setImageURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rolls\",\"type\":\"address\"}],\"name\":\"setRollsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"tokenAnimation\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"element\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"palette\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"essence\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"style\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"speed\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gravity\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"display\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"glyphType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runeflux\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"corruption\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grailId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"grailGlyph\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ITRRolls.RelicInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"tokenDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"tokenImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"tokenScript\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TRMeta", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}