{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FeesCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FeesCollector is Ownable {\\n    address public marketplace;\\n\\n    enum COLLECTORTYPES {\\n        BUYBURN,\\n        BUYDISTRIBUTE,\\n        HEXMARKET,\\n        HEDRONFLOW,\\n        BONUS\\n    }\\n\\n    struct FeesCollectors {\\n        address payable feeAddress;\\n        uint256 share;\\n        uint256 amount;\\n        uint256 enumId;\\n    }\\n    mapping(uint256 => FeesCollectors) public feeMap;\\n\\n    /*\\n     *@notice Set Marketplace address.\\n     *@param _marketplace address\\n     */\\n    function setMarketAddress(address _marketplace) public onlyOwner {\\n        require(_marketplace != address(0), \\\"Zero address is not allowed.\\\");\\n        require(\\n            _marketplace != marketplace,\\n            \\\"Cannot add the same address as marketplace\\\"\\n        );\\n\\n        marketplace = _marketplace;\\n    }\\n\\n    /*\\n     *@notice Set Fee collector wallet details\\n     *@param feeType COLLECTORTYPES(enum)\\n     *@param wallet address payable\\n     *@param share uint256\\n     */\\n    function setFees(\\n        COLLECTORTYPES feeType,\\n        address payable wallet,\\n        uint256 share\\n    ) external onlyOwner {\\n        require(wallet != address(0), \\\"Zero address not allowed\\\");\\n        require(share != 0, \\\"Share must be greater than 0.\\\");\\n\\n        feeMap[uint256(feeType)] = FeesCollectors({\\n            feeAddress: wallet,\\n            share: share,\\n            amount: 0,\\n            enumId: uint256(feeType)\\n        });\\n    }\\n\\n    /*\\n     *@notice Update Fee collector wallet address and share\\n     *@param feeType COLLECTORTYPES(enum)\\n     *@param wallet address payable\\n     *@param share uint256\\n     */\\n    function updateFees(\\n        COLLECTORTYPES feeType,\\n        address payable wallet,\\n        uint256 share\\n    ) external onlyOwner {\\n        require(wallet != address(0), \\\"Zero address not allowed\\\");\\n        require(share != 0, \\\"Share must be greater than 0.\\\");\\n\\n        feeMap[uint256(feeType)] = FeesCollectors({\\n            feeAddress: wallet,\\n            share: share,\\n            amount: feeMap[uint256(feeType)].amount,\\n            enumId: uint256(feeType)\\n        });\\n    }\\n\\n    /*\\n     *@notice Assigns fees amount to fee collector structs\\n     *@param uint256 value, buying amount for NFT, recieved from marketplace\\n     *@param uint256 addShare, total fees share amount for NFT, recieved from marketplace\\n     */\\n    function manageFees(uint256 value, uint256 addShare) external {\\n        require(msg.sender == marketplace, \\\"Only marketplace are allowed\\\");\\n\\n        for (uint256 i = 0; i < 5; i++) {\\n            uint256 shareAmount = updateAmount(i, value, addShare);\\n            addShare = addShare - shareAmount;\\n        }\\n    }\\n\\n    /*\\n     *@notice Update amount to fee collector structs used by manageFees function\\n     *@param  uint256 id, Index of COLLECTORTYPES\\n     *@param uint256 value, buying amount for NFT, recieved from marketplace\\n     *@param uint256 addShare, total fees share amount for NFT, recieved from marketplace\\n     */\\n    function updateAmount(\\n        uint256 id,\\n        uint256 value,\\n        uint256 addShare\\n    ) internal returns (uint256) {\\n        uint256 shareAmount = (value * feeMap[id].share) / 1000000;\\n        if (shareAmount <= addShare) {\\n            feeMap[id].amount = feeMap[id].amount + shareAmount;\\n        } else {\\n            feeMap[id].amount = feeMap[id].amount + addShare;\\n        }\\n\\n        return shareAmount;\\n    }\\n\\n    /*\\n     @notice Claim Balance for the type of COLLECTORTYPES\\n     *@param  uint256 id, Index of COLLECTORTYPES\\n    */\\n    function claimBalances(uint256 id) internal {\\n        uint256 totalAmount = (feeMap[id].amount);\\n        require(\\n            totalAmount <= getBalance() && totalAmount > 0,\\n            \\\"Not enough balance to claim\\\"\\n        );\\n\\n        feeMap[id].feeAddress.transfer(feeMap[id].amount);\\n        feeMap[id].amount = 0;\\n    }\\n\\n    /*\\n     *@notice Claim Hexmarket amount\\n     */\\n    function claimHexmarket() external {\\n        uint256 id = uint256(COLLECTORTYPES.HEXMARKET);\\n        claimBalances(id);\\n        claimHedronFlow();\\n    }\\n\\n    /*\\n     *@notice Claim Bonus amount\\n     */\\n    function claimBonus() external {\\n        uint256 id = uint256(COLLECTORTYPES.BONUS);\\n        claimBalances(id);\\n    }\\n\\n    /*\\n     *@notice Claim HedronFlow amount\\n     */\\n    function claimHedronFlow() public {\\n        uint256 id = uint256(COLLECTORTYPES.HEDRONFLOW);\\n        claimBalances(id);\\n    }\\n\\n    /*\\n     *@notice Claim Buy and Burn amount\\n     */\\n    function claimBuyBurn() external {\\n        uint256 id = uint256(COLLECTORTYPES.BUYBURN);\\n        claimBalances(id);\\n    }\\n\\n    /*\\n     *@notice Claim Buy and distribute  amount.\\n     */\\n    function claimBuyDistribute() external {\\n        uint256 id = uint256(COLLECTORTYPES.BUYDISTRIBUTE);\\n        claimBalances(id);\\n    }\\n\\n    /*\\n     *@notice  Get balance of this contract.\\n     *@return uint\\n     */\\n    function getBalance() internal view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /*\\n     *  @notice Withdraw the extra eth available after distribution.\\n     */\\n    function withdrawDust() external onlyOwner {\\n        uint256 nonwithdrawableAmount;\\n        for (uint256 i = 0; i < 5; i++) {\\n            nonwithdrawableAmount += feeMap[i].amount;\\n        }\\n\\n        uint256 withdrawableAmount = address(this).balance -\\n            nonwithdrawableAmount;\\n        require(withdrawableAmount > 0, \\\"No extra ETH is available\\\");\\n        payable(msg.sender).transfer(withdrawableAmount);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 369\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBuyBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBuyDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimHedronFlow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimHexmarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeMap\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enumId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addShare\",\"type\":\"uint256\"}],\"name\":\"manageFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FeesCollector.COLLECTORTYPES\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FeesCollector.COLLECTORTYPES\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FeesCollector", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "369", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}