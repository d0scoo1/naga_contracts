{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.0;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - \\u003cbrecht@loopring.org\\u003e\\r\\n/// @notice Provides functions for encoding/decoding base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE_ENCODE = \\u0027ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\u0027;\\r\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\r\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\r\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\u0027\\u0027;\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE_ENCODE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n                // read 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with \\u0027=\\u0027\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\r\\n        bytes memory data = bytes(_data);\\r\\n\\r\\n        if (data.length == 0) return new bytes(0);\\r\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\r\\n\\r\\n        // load the table into memory\\r\\n        bytes memory table = TABLE_DECODE;\\r\\n\\r\\n        // every 4 characters represent 3 bytes\\r\\n        uint256 decodedLen = (data.length / 4) * 3;\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        bytes memory result = new bytes(decodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // padding with \\u0027=\\u0027\\r\\n            let lastBytes := mload(add(data, mload(data)))\\r\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\r\\n                decodedLen := sub(decodedLen, 1)\\r\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\r\\n                    decodedLen := sub(decodedLen, 1)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // set the actual output length\\r\\n            mstore(result, decodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 4 characters at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n               // read 4 characters\\r\\n               dataPtr := add(dataPtr, 4)\\r\\n               let input := mload(dataPtr)\\r\\n\\r\\n               // write 3 bytes\\r\\n               let output := add(\\r\\n                   add(\\r\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\r\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\r\\n                   add(\\r\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\r\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\r\\n                    )\\r\\n                )\\r\\n                mstore(resultPtr, shl(232, output))\\r\\n                resultPtr := add(resultPtr, 3)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.0.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\u0027./IERC721A.sol\\u0027;\\r\\n\\r\\n/**\\r\\n * @dev ERC721 token receiver interface.\\r\\n */\\r\\ninterface ERC721A__IERC721Receiver {\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n *\\r\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is IERC721A {\\r\\n    // Mask of an entry in packed address data.\\r\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 \\u003c\\u003c 64) - 1;\\r\\n\\r\\n    // The bit position of `numberMinted` in packed address data.\\r\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\r\\n\\r\\n    // The bit position of `numberBurned` in packed address data.\\r\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\r\\n\\r\\n    // The bit position of `aux` in packed address data.\\r\\n    uint256 private constant BITPOS_AUX = 192;\\r\\n\\r\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\r\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 \\u003c\\u003c 192) - 1;\\r\\n\\r\\n    // The bit position of `startTimestamp` in packed ownership.\\r\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\r\\n\\r\\n    // The bit mask of the `burned` bit in packed ownership.\\r\\n    uint256 private constant BITMASK_BURNED = 1 \\u003c\\u003c 224;\\r\\n    \\r\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\r\\n\\r\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\r\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 \\u003c\\u003c 225;\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint256 private _currentIndex;\\r\\n\\r\\n    // The number of tokens burned.\\r\\n    uint256 private _burnCounter;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned.\\r\\n    // See `_packedOwnershipOf` implementation for details.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..159]   `addr`\\r\\n    // - [160..223] `startTimestamp`\\r\\n    // - [224]      `burned`\\r\\n    // - [225]      `nextInitialized`\\r\\n    mapping(uint256 =\\u003e uint256) private _packedOwnerships;\\r\\n\\r\\n    // Mapping owner address to address data.\\r\\n    //\\r\\n    // Bits Layout:\\r\\n    // - [0..63]    `balance`\\r\\n    // - [64..127]  `numberMinted`\\r\\n    // - [128..191] `numberBurned`\\r\\n    // - [192..255] `aux`\\r\\n    mapping(address =\\u003e uint256) private _packedAddressData;\\r\\n\\r\\n    // Mapping from token ID to approved address.\\r\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _currentIndex = _startTokenId();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the starting token ID. \\r\\n     * To change the starting token ID, please override this function.\\r\\n     */\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the next token ID to be minted.\\r\\n     */\\r\\n    function _nextTokenId() internal view returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens in existence.\\r\\n     * Burned tokens will reduce the count. \\r\\n     * To get the total number of tokens minted, please see `_totalMinted`.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n        // more than `_currentIndex - _startTokenId()` times.\\r\\n        unchecked {\\r\\n            return _currentIndex - _burnCounter - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens minted in the contract.\\r\\n     */\\r\\n    function _totalMinted() internal view returns (uint256) {\\r\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\r\\n        // and it is initialized to `_startTokenId()`\\r\\n        unchecked {\\r\\n            return _currentIndex - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of tokens burned.\\r\\n     */\\r\\n    function _totalBurned() internal view returns (uint256) {\\r\\n        return _burnCounter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\r\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\r\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\r\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\r\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view override returns (uint256) {\\r\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n        return _packedAddressData[owner] \\u0026 BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted by `owner`.\\r\\n     */\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        return (_packedAddressData[owner] \\u003e\\u003e BITPOS_NUMBER_MINTED) \\u0026 BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n     */\\r\\n    function _numberBurned(address owner) internal view returns (uint256) {\\r\\n        return (_packedAddressData[owner] \\u003e\\u003e BITPOS_NUMBER_BURNED) \\u0026 BITMASK_ADDRESS_DATA_ENTRY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     */\\r\\n    function _getAux(address owner) internal view returns (uint64) {\\r\\n        return uint64(_packedAddressData[owner] \\u003e\\u003e BITPOS_AUX);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     * If there are multiple variables, please pack them into a uint64.\\r\\n     */\\r\\n    function _setAux(address owner, uint64 aux) internal {\\r\\n        uint256 packed = _packedAddressData[owner];\\r\\n        uint256 auxCasted;\\r\\n        assembly { // Cast aux without masking.\\r\\n            auxCasted := aux\\r\\n        }\\r\\n        packed = (packed \\u0026 BITMASK_AUX_COMPLEMENT) | (auxCasted \\u003c\\u003c BITPOS_AUX);\\r\\n        _packedAddressData[owner] = packed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the packed ownership data of `tokenId`.\\r\\n     */\\r\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\r\\n        uint256 curr = tokenId;\\r\\n\\r\\n        unchecked {\\r\\n            if (_startTokenId() \\u003c= curr)\\r\\n                if (curr \\u003c _currentIndex) {\\r\\n                    uint256 packed = _packedOwnerships[curr];\\r\\n                    // If not burned.\\r\\n                    if (packed \\u0026 BITMASK_BURNED == 0) {\\r\\n                        // Invariant:\\r\\n                        // There will always be an ownership that has an address and is not burned\\r\\n                        // before an ownership that does not have an address and is not burned.\\r\\n                        // Hence, curr will not underflow.\\r\\n                        //\\r\\n                        // We can directly compare the packed value.\\r\\n                        // If the address is zero, packed is zero.\\r\\n                        while (packed == 0) {\\r\\n                            packed = _packedOwnerships[--curr];\\r\\n                        }\\r\\n                        return packed;\\r\\n                    }\\r\\n                }\\r\\n        }\\r\\n        revert OwnerQueryForNonexistentToken();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\r\\n     */\\r\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\r\\n        ownership.addr = address(uint160(packed));\\r\\n        ownership.startTimestamp = uint64(packed \\u003e\\u003e BITPOS_START_TIMESTAMP);\\r\\n        ownership.burned = packed \\u0026 BITMASK_BURNED != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\r\\n     */\\r\\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\\r\\n        return _unpackedOwnership(_packedOwnerships[index]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\r\\n     */\\r\\n    function _initializeOwnershipAt(uint256 index) internal {\\r\\n        if (_packedOwnerships[index] == 0) {\\r\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n     */\\r\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\r\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : \\u0027\\u0027;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\u0027\\u0027;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Casts the address to uint256 without masking.\\r\\n     */\\r\\n    function _addressToUint256(address value) private pure returns (uint256 result) {\\r\\n        assembly {\\r\\n            result := value\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Casts the boolean to uint256 without branching.\\r\\n     */\\r\\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\\r\\n        assembly {\\r\\n            result := value\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public override {\\r\\n        address owner = address(uint160(_packedOwnershipOf(tokenId)));\\r\\n        if (to == owner) revert ApprovalToCurrentOwner();\\r\\n\\r\\n        if (_msgSenderERC721A() != owner)\\r\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\r\\n                revert ApprovalCallerNotOwnerNorApproved();\\r\\n            }\\r\\n\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\r\\n\\r\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\u0027\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        _transfer(from, to, tokenId);\\r\\n        if (to.code.length != 0)\\r\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return\\r\\n            _startTokenId() \\u003c= tokenId \\u0026\\u0026\\r\\n            tokenId \\u003c _currentIndex \\u0026\\u0026 // If within bounds,\\r\\n            _packedOwnerships[tokenId] \\u0026 BITMASK_BURNED == 0; // and not burned.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_safeMint(to, quantity, \\u0027\\u0027)`.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 quantity) internal {\\r\\n        _safeMint(to, quantity, \\u0027\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or numberMinted overflow if current value of either + quantity \\u003e 1.8e19 (2**64) - 1\\r\\n        // updatedIndex overflows if _currentIndex + quantity \\u003e 1.2e77 (2**256) - 1\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the balance and number minted.\\r\\n            _packedAddressData[to] += quantity * ((1 \\u003c\\u003c BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] =\\r\\n                _addressToUint256(to) |\\r\\n                (block.timestamp \\u003c\\u003c BITPOS_START_TIMESTAMP) |\\r\\n                (_boolToUint256(quantity == 1) \\u003c\\u003c BITPOS_NEXT_INITIALIZED);\\r\\n\\r\\n            uint256 updatedIndex = startTokenId;\\r\\n            uint256 end = updatedIndex + quantity;\\r\\n\\r\\n            if (to.code.length != 0) {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, updatedIndex);\\r\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\r\\n                        revert TransferToNonERC721ReceiverImplementer();\\r\\n                    }\\r\\n                } while (updatedIndex \\u003c end);\\r\\n                // Reentrancy protection\\r\\n                if (_currentIndex != startTokenId) revert();\\r\\n            } else {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, updatedIndex++);\\r\\n                } while (updatedIndex \\u003c end);\\r\\n            }\\r\\n            _currentIndex = updatedIndex;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 quantity) internal {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or numberMinted overflow if current value of either + quantity \\u003e 1.8e19 (2**64) - 1\\r\\n        // updatedIndex overflows if _currentIndex + quantity \\u003e 1.2e77 (2**256) - 1\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance += quantity`.\\r\\n            // - `numberMinted += quantity`.\\r\\n            //\\r\\n            // We can directly add to the balance and number minted.\\r\\n            _packedAddressData[to] += quantity * ((1 \\u003c\\u003c BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the owner.\\r\\n            // - `startTimestamp` to the timestamp of minting.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `quantity == 1`.\\r\\n            _packedOwnerships[startTokenId] =\\r\\n                _addressToUint256(to) |\\r\\n                (block.timestamp \\u003c\\u003c BITPOS_START_TIMESTAMP) |\\r\\n                (_boolToUint256(quantity == 1) \\u003c\\u003c BITPOS_NEXT_INITIALIZED);\\r\\n\\r\\n            uint256 updatedIndex = startTokenId;\\r\\n            uint256 end = updatedIndex + quantity;\\r\\n\\r\\n            do {\\r\\n                emit Transfer(address(0), to, updatedIndex++);\\r\\n            } while (updatedIndex \\u003c end);\\r\\n\\r\\n            _currentIndex = updatedIndex;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) private {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\r\\n\\r\\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\r\\n            isApprovedForAll(from, _msgSenderERC721A()) ||\\r\\n            getApproved(tokenId) == _msgSenderERC721A());\\r\\n\\r\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\r\\n        if (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        // Underflow of the sender\\u0027s balance is impossible because we check for\\r\\n        // ownership above and the recipient\\u0027s balance can\\u0027t realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            // We can directly increment and decrement the balances.\\r\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\r\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the next owner.\\r\\n            // - `startTimestamp` to the timestamp of transfering.\\r\\n            // - `burned` to `false`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] =\\r\\n                _addressToUint256(to) |\\r\\n                (block.timestamp \\u003c\\u003c BITPOS_START_TIMESTAMP) |\\r\\n                BITMASK_NEXT_INITIALIZED;\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked \\u0026 BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot\\u0027s address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        _burn(tokenId, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n        address from = address(uint160(prevOwnershipPacked));\\r\\n\\r\\n        if (approvalCheck) {\\r\\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\\r\\n                isApprovedForAll(from, _msgSenderERC721A()) ||\\r\\n                getApproved(tokenId) == _msgSenderERC721A());\\r\\n\\r\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner.\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        // Underflow of the sender\\u0027s balance is impossible because we check for\\r\\n        // ownership above and the recipient\\u0027s balance can\\u0027t realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            // Updates:\\r\\n            // - `balance -= 1`.\\r\\n            // - `numberBurned += 1`.\\r\\n            //\\r\\n            // We can directly decrement the balance, and increment the number burned.\\r\\n            // This is equivalent to `packed -= 1; packed += 1 \\u003c\\u003c BITPOS_NUMBER_BURNED;`.\\r\\n            _packedAddressData[from] += (1 \\u003c\\u003c BITPOS_NUMBER_BURNED) - 1;\\r\\n\\r\\n            // Updates:\\r\\n            // - `address` to the last owner.\\r\\n            // - `startTimestamp` to the timestamp of burning.\\r\\n            // - `burned` to `true`.\\r\\n            // - `nextInitialized` to `true`.\\r\\n            _packedOwnerships[tokenId] =\\r\\n                _addressToUint256(from) |\\r\\n                (block.timestamp \\u003c\\u003c BITPOS_START_TIMESTAMP) |\\r\\n                BITMASK_BURNED | \\r\\n                BITMASK_NEXT_INITIALIZED;\\r\\n\\r\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n            if (prevOwnershipPacked \\u0026 BITMASK_NEXT_INITIALIZED == 0) {\\r\\n                uint256 nextTokenId = tokenId + 1;\\r\\n                // If the next slot\\u0027s address is zero and not burned (i.e. packed value is zero).\\r\\n                if (_packedOwnerships[nextTokenId] == 0) {\\r\\n                    // If the next slot is within bounds.\\r\\n                    if (nextTokenId != _currentIndex) {\\r\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), tokenId);\\r\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n        unchecked {\\r\\n            _burnCounter++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkContractOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\r\\n            bytes4 retval\\r\\n        ) {\\r\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            } else {\\r\\n                assembly {\\r\\n                    revert(add(32, reason), mload(reason))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n     * And also called before burning one token.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`\\u0027s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n     * minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`\\u0027s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\r\\n     *\\r\\n     * If you are writing GSN compatible contracts, you need to override this function.\\r\\n     */\\r\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\\r\\n        assembly {\\r\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), \\r\\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\r\\n            // We will need 1 32-byte word to store the length, \\r\\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\r\\n            ptr := add(mload(0x40), 128)\\r\\n            // Update the free memory pointer to allocate.\\r\\n            mstore(0x40, ptr)\\r\\n\\r\\n            // Cache the end of the memory to calculate the length later.\\r\\n            let end := ptr\\r\\n\\r\\n            // We write the string from the rightmost digit to the leftmost digit.\\r\\n            // The following is essentially a do-while loop that also handles the zero case.\\r\\n            // Costs a bit more than early returning for the zero case,\\r\\n            // but cheaper in terms of deployment and overall runtime costs.\\r\\n            for { \\r\\n                // Initialize and perform the first pass without check.\\r\\n                let temp := value\\r\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\r\\n                ptr := sub(ptr, 1)\\r\\n                // Write the character to the pointer. 48 is the ASCII index of \\u00270\\u0027.\\r\\n                mstore8(ptr, add(48, mod(temp, 10)))\\r\\n                temp := div(temp, 10)\\r\\n            } temp { \\r\\n                // Keep dividing `temp` until zero.\\r\\n                temp := div(temp, 10)\\r\\n            } { // Body of the for loop.\\r\\n                ptr := sub(ptr, 1)\\r\\n                mstore8(ptr, add(48, mod(temp, 10)))\\r\\n            }\\r\\n            \\r\\n            let length := sub(end, ptr)\\r\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\r\\n            ptr := sub(ptr, 32)\\r\\n            // Store the length.\\r\\n            mstore(ptr, length)\\r\\n        }\\r\\n    }\\r\\n}\"},\"IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.0.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of an ERC721A compliant contract.\\r\\n */\\r\\ninterface IERC721A {\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error ApprovalCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error ApprovalQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The caller cannot approve to their own address.\\r\\n     */\\r\\n    error ApproveToCaller();\\r\\n\\r\\n    /**\\r\\n     * The caller cannot approve to the current owner.\\r\\n     */\\r\\n    error ApprovalToCurrentOwner();\\r\\n\\r\\n    /**\\r\\n     * Cannot query the balance for the zero address.\\r\\n     */\\r\\n    error BalanceQueryForZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * Cannot mint to the zero address.\\r\\n     */\\r\\n    error MintToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The quantity of tokens minted must be more than zero.\\r\\n     */\\r\\n    error MintZeroQuantity();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error OwnerQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token must be owned by `from`.\\r\\n     */\\r\\n    error TransferFromIncorrectOwner();\\r\\n\\r\\n    /**\\r\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\r\\n     */\\r\\n    error TransferToNonERC721ReceiverImplementer();\\r\\n\\r\\n    /**\\r\\n     * Cannot transfer to the zero address.\\r\\n     */\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error URIQueryForNonexistentToken();\\r\\n\\r\\n    struct TokenOwnership {\\r\\n        // The address of the owner.\\r\\n        address addr;\\r\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\r\\n        uint64 startTimestamp;\\r\\n        // Whether the token has been burned.\\r\\n        bool burned;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     *\\r\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    // ==============================\\r\\n    //            IERC165\\r\\n    // ==============================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    // ==============================\\r\\n    //            IERC721\\r\\n    // ==============================\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    // ==============================\\r\\n    //        IERC721Metadata\\r\\n    // ==============================\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"},\"TwoBitGoblins.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./base64.sol\\\";\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract TWObitGOBLINS is ERC721A, Ownable {\\r\\n  using Strings for uint256;\\r\\n\\r\\n  uint256 public constant MAX_PER_TX = 5;\\r\\n  uint256 public MAX_SUPPLY = 1111;\\r\\n  uint256 public MINT_PRICE = 0.0069 ether;\\r\\n  uint256 public MAX_FREE_SUPPLY = 2;\\r\\n  struct Color {\\r\\n    uint8 red;\\r\\n    uint8 green;\\r\\n    uint8 blue;\\r\\n  }\\r\\n\\r\\n  struct Detail {\\r\\n    uint256 timestamp;\\r\\n    uint8 speciesIndex;\\r\\n    Color topColor;\\r\\n    Color bottomColor;\\r\\n  }\\r\\n\\r\\n  mapping(address =\\u003e uint256) private _freeMintedCount;\\r\\n  mapping(uint256 =\\u003e Detail) private _tokenIdToGoblinDetails;\\r\\n\\r\\n  bool private _reveal = false;\\r\\n  uint256 private _seed;\\r\\n\\r\\n  string[3] private _species = [\\\"Koalinth\\\", \\\"Nilbog\\\", \\\"Hobgoblin\\\"];\\r\\n\\r\\n  constructor() ERC721A(\\\"2Bit Goblins\\\", \\\"2bitGOB\\\") {\\r\\n    _seed = uint256(\\r\\n      keccak256(\\r\\n        abi.encodePacked(\\r\\n          msg.sender,\\r\\n          blockhash(block.number - 1),\\r\\n          block.timestamp\\r\\n        )\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function createGoblin(uint256 quantity) public payable {\\r\\n    uint256 _totalSupply = totalSupply();\\r\\n\\r\\n    require(quantity \\u003e 0, \\\"Invalid quantity\\\");\\r\\n    require(quantity \\u003c= MAX_PER_TX, \\\"Exceeds max per tx\\\");\\r\\n    require(_totalSupply + quantity \\u003c= MAX_SUPPLY, \\\"Exceeds max supply\\\");\\r\\n\\r\\n    uint256 payForCount = quantity;\\r\\n    uint256 freeMintCount = _freeMintedCount[msg.sender];\\r\\n\\r\\n    if (freeMintCount \\u003c MAX_FREE_SUPPLY) {\\r\\n      if (quantity \\u003e MAX_FREE_SUPPLY) {\\r\\n        payForCount = quantity - 1;\\r\\n      } else {\\r\\n        payForCount = 0;\\r\\n      }\\r\\n\\r\\n      _freeMintedCount[msg.sender] = 1;\\r\\n    }\\r\\n\\r\\n    require(msg.value \\u003e= payForCount * MINT_PRICE, \\\"Ether sent is not correct\\\");\\r\\n\\r\\n    _mint(msg.sender, quantity);\\r\\n\\r\\n    for (uint256 i = _totalSupply; i \\u003c _totalSupply + quantity; i++) {\\r\\n      _seed = uint256(\\r\\n        keccak256(\\r\\n          abi.encodePacked(\\r\\n            _seed \\u003e\\u003e 1,\\r\\n            msg.sender,\\r\\n            blockhash(block.number - 1),\\r\\n            block.timestamp\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n\\r\\n      _tokenIdToGoblinDetails[i] = _createDetailFromRandom(_seed, i);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function freeMintedCount(address owner) external view returns (uint256) {\\r\\n    return _freeMintedCount[owner];\\r\\n  }\\r\\n\\r\\n  function details(uint256 tokenId)\\r\\n    external\\r\\n    view\\r\\n    returns (Detail memory detail)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n    detail = _tokenIdToGoblinDetails[tokenId];\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC721A)\\r\\n    returns (string memory)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"Nonexistent token\\\");\\r\\n\\r\\n    if (_reveal == false) {\\r\\n      return\\r\\n        string(\\r\\n          abi.encodePacked(\\r\\n            _baseURI(),\\r\\n            Base64.encode(\\r\\n              abi.encodePacked(\\r\\n                \\u0027{\\\"name\\\":\\\"Rendering Goblin #\\u0027,\\r\\n                (tokenId).toString(),\\r\\n                \\u0027...\\\",\\\"description\\\":\\\"Unrevealed\\\",\\\"image\\\":\\\"ipfs://QmZX2wpWbSnKECxqLBaQvZhTeM39WFHPPyu1BQJVAdSGLs\\\"}\\u0027\\r\\n              )\\r\\n            )\\r\\n          )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    return _tokenUriForDetail(_tokenIdToGoblinDetails[tokenId], tokenId);\\r\\n  }\\r\\n\\r\\n  function _baseURI() internal pure override returns (string memory) {\\r\\n    return \\\"data:application/json;base64,\\\";\\r\\n  }\\r\\n\\r\\n  function _tokenUriForDetail(Detail memory detail, uint256 tokenId)\\r\\n    private\\r\\n    view\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return\\r\\n      string(\\r\\n        abi.encodePacked(\\r\\n          _baseURI(),\\r\\n          Base64.encode(\\r\\n            abi.encodePacked(\\r\\n              \\u0027{\\\"name\\\":\\\"\\u0027,\\r\\n              _species[detail.speciesIndex],\\r\\n              \\\" \\\",\\r\\n              \\\"Two Bit Goblin #\\\",\\r\\n              (tokenId).toString(),\\r\\n              \\u0027\\\",\\\"description\\\":\\\"\\u0027,\\r\\n              //\\r\\n              \\u0027\\\",\\\"attributes\\\":[{\\\"\\u0027,\\r\\n              _attributesFromDetail(detail),\\r\\n              \\u0027\\\"}],\\\"image\\\":\\\"\\u0027,\\r\\n              \\\"data:image/svg+xml;base64,\\\",\\r\\n              Base64.encode(_createSvg(detail)),\\r\\n              \\u0027\\\"}\\u0027\\r\\n            )\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _attributesFromDetail(Detail memory detail)\\r\\n    private\\r\\n    view\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return\\r\\n      string(\\r\\n        abi.encodePacked(\\r\\n          \\u0027trait_type\\\":\\\"Species\\\",\\\"value\\\":\\\"\\u0027,\\r\\n          _species[detail.speciesIndex],\\r\\n          \\u0027\\\"},{\\\"trait_type\\\":\\\"Head Color\\\",\\\"value\\\":\\\"\\u0027,\\r\\n          _svgColor(detail.topColor),\\r\\n          \\u0027\\\"},{\\\"trait_type\\\":\\\"Body Color\\\",\\\"value\\\":\\\"\\u0027,\\r\\n          _svgColor(detail.bottomColor)\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _createSvg(Detail memory detail)\\r\\n    private\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return\\r\\n      abi.encodePacked(\\r\\n        _svgOpen(1080, 1080),\\r\\n        \\\"\\u003cpath id=\\u0027Head\\u0027 d=\\u0027M405 540 L675 540 675 270 405 270 Z\\u0027 fill=\\u0027\\\",\\r\\n        _svgColor(detail.topColor),\\r\\n        \\\"\\u0027/\\u003e\\u003cpath id=\\u0027Torso\\u0027 d=\\u0027M405 810 L675 810 675 540 405 540 Z\\u0027 fill=\\u0027\\\",\\r\\n        _svgColor(detail.bottomColor),\\r\\n        \\\"\\u0027/\\u003e\\u003c/svg\\u003e\\\"\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _svgColor(Color memory color) private pure returns (string memory) {\\r\\n    return\\r\\n      string(\\r\\n        abi.encodePacked(\\r\\n          \\\"rgb(\\\",\\r\\n          uint256(color.red).toString(),\\r\\n          \\\",\\\",\\r\\n          uint256(color.green).toString(),\\r\\n          \\\",\\\",\\r\\n          uint256(color.blue).toString(),\\r\\n          \\\")\\\"\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _svgOpen(uint256 width, uint256 height)\\r\\n    private\\r\\n    pure\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return\\r\\n      string(\\r\\n        abi.encodePacked(\\r\\n          \\\"\\u003csvg viewBox=\\u00270 0 \\\",\\r\\n          width.toString(),\\r\\n          \\\" \\\",\\r\\n          height.toString(),\\r\\n          \\\"\\u0027 xmlns=\\u0027http://www.w3.org/2000/svg\\u0027 version=\\u00271.1\\u0027\\u003e\\\"\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _indexesFromRandom(uint8 random) private pure returns (uint8) {\\r\\n    uint8 spread = random % 100;\\r\\n\\r\\n    if (spread \\u003e= 46) {\\r\\n      return 0; // Brownish\\r\\n    } else if (spread \\u003e= 16) {\\r\\n      return 1; // Greyish\\r\\n    }\\r\\n\\r\\n    return 2; // Yellowish\\r\\n  }\\r\\n\\r\\n  function _createDetailFromRandom(uint256 random, uint256 tokenId)\\r\\n    private\\r\\n    view\\r\\n    returns (Detail memory)\\r\\n  {\\r\\n    bytes memory randomPieces = abi.encodePacked(random);\\r\\n    uint256 increment = (tokenId % 20) + 1;\\r\\n    uint8 speciesIndex = _indexesFromRandom(uint8(randomPieces[9 + increment]));\\r\\n\\r\\n    return\\r\\n      Detail(\\r\\n        block.timestamp,\\r\\n        speciesIndex,\\r\\n        _colorTopFromRandom(\\r\\n          randomPieces,\\r\\n          6 + increment,\\r\\n          3 + increment,\\r\\n          4 + increment,\\r\\n          speciesIndex\\r\\n        ),\\r\\n        _colorBottomFromRandom(\\r\\n          randomPieces,\\r\\n          5 + increment,\\r\\n          7 + increment,\\r\\n          1 + increment\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _colorTopFromRandom(\\r\\n    bytes memory source,\\r\\n    uint256 indexRed,\\r\\n    uint256 indexGreen,\\r\\n    uint256 indexBlue,\\r\\n    uint256 speciesIndex\\r\\n  ) private pure returns (Color memory) {\\r\\n    return\\r\\n      _randomizeColors(\\r\\n        _colorTopFloorForSpecies(speciesIndex),\\r\\n        _colorTopCeilingForSpecies(speciesIndex),\\r\\n        Color(\\r\\n          uint8(source[indexRed]),\\r\\n          uint8(source[indexGreen]),\\r\\n          uint8(source[indexBlue])\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _colorTopFloorForSpecies(uint256 index)\\r\\n    private\\r\\n    pure\\r\\n    returns (Color memory)\\r\\n  {\\r\\n    if (index == 0) {\\r\\n      // Brownish\\r\\n      return Color(25, 82, 39);\\r\\n    } else if (index == 1) {\\r\\n      // Greyish\\r\\n      return Color(1, 61, 57);\\r\\n    } else {\\r\\n      // Yellowish\\r\\n      return Color(53, 61, 1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _colorTopCeilingForSpecies(uint256 index)\\r\\n    private\\r\\n    pure\\r\\n    returns (Color memory)\\r\\n  {\\r\\n    if (index == 0) {\\r\\n      // Brownish\\r\\n      return Color(124, 164, 125);\\r\\n    } else if (index == 1) {\\r\\n      // Greyish\\r\\n      return Color(63, 88, 86);\\r\\n    } else {\\r\\n      // Yellowish\\r\\n      return Color(85, 88, 63);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _colorBottomFromRandom(\\r\\n    bytes memory source,\\r\\n    uint256 indexRed,\\r\\n    uint256 indexGreen,\\r\\n    uint256 indexBlue\\r\\n  ) private pure returns (Color memory) {\\r\\n    return\\r\\n      _randomizeColors(\\r\\n        Color(81, 45, 14),\\r\\n        Color(168, 141, 118),\\r\\n        Color(\\r\\n          uint8(source[indexRed]),\\r\\n          uint8(source[indexGreen]),\\r\\n          uint8(source[indexBlue])\\r\\n        )\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _randomizeColors(\\r\\n    Color memory floor,\\r\\n    Color memory ceiling,\\r\\n    Color memory random\\r\\n  ) private pure returns (Color memory color) {\\r\\n    uint256 percent = (uint256(random.red) +\\r\\n      uint256(random.green) +\\r\\n      uint256(random.blue)) % 100;\\r\\n\\r\\n    color.red =\\r\\n      floor.red +\\r\\n      uint8(\\r\\n        (uint256(ceiling.red + (random.red % 2) - floor.red) * percent) / 100\\r\\n      );\\r\\n    color.green =\\r\\n      floor.green +\\r\\n      uint8(\\r\\n        (uint256(ceiling.green + (random.green % 2) - floor.green) * percent) /\\r\\n          100\\r\\n      );\\r\\n    color.blue =\\r\\n      floor.blue +\\r\\n      uint8(\\r\\n        (uint256(ceiling.blue + (random.blue % 2) - floor.blue) * percent) / 100\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function reveal() external onlyOwner {\\r\\n    _reveal = true;\\r\\n  }\\r\\n\\r\\n   function configMaxSupply(uint256 newsupply) public onlyOwner {\\r\\n        MAX_SUPPLY = newsupply;\\r\\n    }\\r\\n\\r\\n function configActualPrice(uint256 newnewPrice) public onlyOwner {\\r\\n        MINT_PRICE = newnewPrice;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n  function collectReserves(uint256 quantity) external onlyOwner {\\r\\n    uint256 _totalSupply = totalSupply();\\r\\n\\r\\n    require(_totalSupply + quantity \\u003c= MAX_SUPPLY, \\\"Exceeds max supply\\\");\\r\\n\\r\\n    _mint(msg.sender, quantity);\\r\\n\\r\\n    for (uint256 i = _totalSupply; i \\u003c _totalSupply + quantity; i++) {\\r\\n      _seed = uint256(\\r\\n        keccak256(\\r\\n          abi.encodePacked(\\r\\n            _seed \\u003e\\u003e 1,\\r\\n            msg.sender,\\r\\n            blockhash(block.number - 1),\\r\\n            block.timestamp\\r\\n          )\\r\\n        )\\r\\n      );\\r\\n\\r\\n      _tokenIdToGoblinDetails[i] = _createDetailFromRandom(_seed, i);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function withdraw() public onlyOwner {\\r\\n    require(\\r\\n      payable(owner()).send(address(this).balance),\\r\\n      \\\"Withdraw unsuccessful\\\"\\r\\n    );\\r\\n  }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FREE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"collectReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newnewPrice\",\"type\":\"uint256\"}],\"name\":\"configActualPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newsupply\",\"type\":\"uint256\"}],\"name\":\"configMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"createGoblin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"details\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"speciesIndex\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"red\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"green\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"blue\",\"type\":\"uint8\"}],\"internalType\":\"struct TWObitGOBLINS.Color\",\"name\":\"topColor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"red\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"green\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"blue\",\"type\":\"uint8\"}],\"internalType\":\"struct TWObitGOBLINS.Color\",\"name\":\"bottomColor\",\"type\":\"tuple\"}],\"internalType\":\"struct TWObitGOBLINS.Detail\",\"name\":\"detail\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"freeMintedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TWObitGOBLINS", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cec81de791c304b21aea4e5482f16d965eb4366dc0586a29b246084ed87614b1"}]}