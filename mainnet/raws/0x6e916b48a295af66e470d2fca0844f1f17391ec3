{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n    ERC20I (ERC20 0xInuarashi Edition)\r\n    Minified and Gas Optimized\r\n    Contributors: 0xInuarashi (Message to Martians, Anonymice), 0xBasset (Ether Orcs)\r\n*/\r\n\r\ncontract ERC20I {\r\n    // Token Params\r\n    string public name;\r\n    string public symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n    }\r\n\r\n    // Decimals\r\n    uint8 public constant decimals = 18;\r\n\r\n    // Supply\r\n    uint256 public totalSupply;\r\n    \r\n    // Mappings of Balances\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Internal Functions\r\n    function _mint(address to_, uint256 amount_) internal virtual {\r\n        totalSupply += amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(address(0x0), to_, amount_);\r\n    }\r\n    function _burn(address from_, uint256 amount_) internal virtual {\r\n        balanceOf[from_] -= amount_;\r\n        totalSupply -= amount_;\r\n        emit Transfer(from_, address(0x0), amount_);\r\n    }\r\n    function _approve(address owner_, address spender_, uint256 amount_) internal virtual {\r\n        allowance[owner_][spender_] = amount_;\r\n        emit Approval(owner_, spender_, amount_);\r\n    }\r\n\r\n    // Public Functions\r\n    function approve(address spender_, uint256 amount_) public virtual returns (bool) {\r\n        _approve(msg.sender, spender_, amount_);\r\n        return true;\r\n    }\r\n    function transfer(address to_, uint256 amount_) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(msg.sender, to_, amount_);\r\n        return true;\r\n    }\r\n    function transferFrom(address from_, address to_, uint256 amount_) public virtual returns (bool) {\r\n        if (allowance[from_][msg.sender] != type(uint256).max) {\r\n            allowance[from_][msg.sender] -= amount_; }\r\n        balanceOf[from_] -= amount_;\r\n        balanceOf[to_] += amount_;\r\n        emit Transfer(from_, to_, amount_);\r\n        return true;\r\n    }\r\n\r\n    // 0xInuarashi Custom Functions\r\n    function multiTransfer(address[] memory to_, uint256[] memory amounts_) public virtual {\r\n        require(to_.length == amounts_.length, \"ERC20I: To and Amounts length Mismatch!\");\r\n        for (uint256 i = 0; i < to_.length; i++) {\r\n            transfer(to_[i], amounts_[i]);\r\n        }\r\n    }\r\n    function multiTransferFrom(address[] memory from_, address[] memory to_, uint256[] memory amounts_) public virtual {\r\n        require(from_.length == to_.length && from_.length == amounts_.length, \"ERC20I: From, To, and Amounts length Mismatch!\");\r\n        for (uint256 i = 0; i < from_.length; i++) {\r\n            transferFrom(from_[i], to_[i], amounts_[i]);\r\n        }\r\n    }\r\n}\r\n\r\ninterface iCryptoPunks {\r\n    function balanceOf(address address_) external view returns (uint256);\r\n    function punkIndexToAddress(uint256 tokenId_) external view returns (address);\r\n}\r\n\r\n// Completely Trustless PunkCash for CryptoPunks\r\n// Created by 0xInuarashi.dev\r\n// Feel free to use however you want.\r\n\r\ncontract PunkCash is ERC20I {\r\n    \r\n    // Name and Symbol\r\n    constructor() ERC20I(\"PunkCash\", \"CASH\") {}\r\n\r\n    // CryptoPunks Interface\r\n    iCryptoPunks public CP = iCryptoPunks(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB);\r\n\r\n    // TX Timetamp: 0x0885b9e5184f497595e1ae2652d63dbdb2785de2e498af837d672f5765f28430\r\n    uint256 public constant yieldStartTime = 1498117200; // Jun-22-2017 07:40:00 PM +UTC\r\n    uint256 public constant yieldEndTime = 2129269200; // Jun-22-2037 07:40:00 PM +UTC\r\n    uint256 public constant yieldRate = 1000000 ether; // 1 Million $CASH per day\r\n\r\n    // Mapping\r\n    mapping(uint256 => uint256) public punkToTimestamp;\r\n\r\n    // Core Functions\r\n    function getPendingTokens(uint256 tokenId_) public view returns (uint256) {\r\n        uint256 _timestamp = punkToTimestamp[tokenId_] == 0 ?\r\n            yieldStartTime : punkToTimestamp[tokenId_] > yieldEndTime ? \r\n            yieldEndTime : punkToTimestamp[tokenId_];\r\n        uint256 _currentTimeOrEnd = block.timestamp > yieldEndTime ?\r\n            yieldEndTime : block.timestamp;\r\n        uint256 _timeElapsed = _currentTimeOrEnd - _timestamp;\r\n\r\n        return (_timeElapsed * yieldRate) / 1 days;\r\n    }\r\n    function getPendingTokensMany(uint256[] memory tokenIds_) public view \r\n    returns (uint256) {\r\n        uint256 _pendingTokens;\r\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\r\n            _pendingTokens += getPendingTokens(tokenIds_[i]);\r\n        }\r\n        return _pendingTokens;\r\n    }\r\n\r\n    function claim(address to_, uint256[] memory tokenIds_) external {\r\n        require(tokenIds_.length > 0, \r\n            \"You must claim at least 1 CryptoPunk!\");\r\n\r\n        uint256 _pendingTokens = tokenIds_.length > 1 ?\r\n            getPendingTokensMany(tokenIds_) :\r\n            getPendingTokens(tokenIds_[0]);\r\n        \r\n        // Run loop to update timestamp for each punk\r\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\r\n            require(to_ == CP.punkIndexToAddress(tokenIds_[i]),\r\n                \"claim(): to_ is not owner of CryptoPunk!\");\r\n\r\n            punkToTimestamp[tokenIds_[i]] = block.timestamp;\r\n        }\r\n        \r\n        _mint(to_, _pendingTokens);\r\n    }\r\n\r\n    // Public View Functions (View Only)\r\n    function getPendingTokensOfAddress(address address_) public view returns (uint256) {\r\n        uint256[] memory _tokensOfAddress = walletOfOwner(address_);\r\n        return getPendingTokensMany(_tokensOfAddress);\r\n    }\r\n    function walletOfOwner(address address_) public view returns (uint256[] memory) {\r\n        uint256 _balance = CP.balanceOf(address_);\r\n        if (_balance == 0) return new uint256[](0);\r\n\r\n        uint256[] memory _tokens = new uint256[] (_balance);\r\n        uint256 _index;\r\n\r\n        for (uint256 i = 0; i < 10000; i++) {\r\n            if (CP.punkIndexToAddress(i) == address_) {\r\n                _tokens[_index] = i; _index++;\r\n            }\r\n        }\r\n        return _tokens;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CP\",\"outputs\":[{\"internalType\":\"contract iCryptoPunks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getPendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"getPendingTokensMany\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getPendingTokensOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"multiTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"punkToTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PunkCash", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://80d3db0f23094b240cafa5e543549e4080c9abe3e06aef8d9fe41ccbfd17f276"}]}