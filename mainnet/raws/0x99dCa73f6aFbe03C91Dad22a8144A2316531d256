{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ShinySeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title The ShinyToken pseudo-random seed generator\\n\\n/*********************************\\n * \uff65\uff9f\uff65\uff9f\u2727.\u30fb\uff65\uff9fshiny.club\u30fb\u272b\u30fb\u309c\uff65\uff9f\u2727 *\\n *********************************/\\n\\npragma solidity ^0.8.9;\\n\\nimport { IShinySeeder } from './interfaces/IShinySeeder.sol';\\nimport { IShinyDescriptor } from './interfaces/IShinyDescriptor.sol';\\n\\ncontract ShinySeeder is IShinySeeder {\\n    /**\\n     * @notice Generate a pseudo-random Shiny seed using the previous blockhash and Shiny ID.\\n     */\\n    // prettier-ignore\\n    function generateSeedForMint(uint256 shinyId, IShinyDescriptor descriptor, bool isShiny) external view override returns (Seed memory) {\\n        uint256 pseudorandomness = uint256(\\n            keccak256(abi.encodePacked(blockhash(block.number - 1), shinyId))\\n        );\\n\\n        uint256 backgroundCount = descriptor.backgroundCount();\\n        uint256 bodyCount = descriptor.bodyCount();\\n        uint256 accessoryCount = descriptor.accessoryCount();\\n        uint256 headCount = descriptor.headCount();\\n        uint256 eyesCount = descriptor.eyesCount();\\n        uint256 nosesCount = descriptor.nosesCount();\\n        uint256 mouthsCount = descriptor.mouthsCount();\\n\\n        return Seed({\\n            background: uint16(\\n                uint16(pseudorandomness) % backgroundCount\\n            ),\\n            body: uint16(\\n                uint16(pseudorandomness >> 32) % bodyCount\\n            ),\\n            accessory: uint16(\\n                uint16(pseudorandomness >> 64) % accessoryCount\\n            ),\\n            head: uint16(\\n                uint16(pseudorandomness >> 96) % headCount\\n            ),\\n            eyes: uint16(\\n                uint16(pseudorandomness >> 128) % eyesCount\\n            ),\\n            nose: uint16(\\n                uint16(pseudorandomness >> 160) % nosesCount\\n            ),\\n            mouth: uint16(\\n                uint16(pseudorandomness >> 192) % mouthsCount\\n            ),\\n            shinyAccessory: isShiny ? uint16(1) : uint16(0)\\n        });\\n    }\\n\\n        /**\\n     * @notice Generate a pseudo-random Shiny seed using the previous blockhash and Shiny ID.\\n     */\\n    // prettier-ignore\\n    function generateSeedWithValues(Seed memory newSeed,\\n                                    IShinyDescriptor descriptor,\\n                                    bool _isShiny) external view returns (Seed memory) {\\n        // Check that seedString values are valid\\n        require(newSeed.background <= descriptor.backgroundCount());\\n        require(newSeed.body <= descriptor.bodyCount());\\n        require(newSeed.accessory <= descriptor.accessoryCount());\\n        require(newSeed.head <= descriptor.headCount());\\n        require(newSeed.eyes <= descriptor.eyesCount());\\n        require(newSeed.nose <= descriptor.nosesCount());\\n        require(newSeed.mouth <= descriptor.mouthsCount());\\n        require(newSeed.shinyAccessory <= descriptor.shinyAccessoriesCount());\\n        // If not shiny, don't allow setting shinyAccessory\\n        if (!_isShiny) {\\n            require(newSeed.shinyAccessory == 0, 'Non-shiny is not allowed to change shinyAccessory');\\n        }\\n\\n        return Seed({\\n            background: newSeed.background,\\n            body: newSeed.body,\\n            accessory: newSeed.accessory,\\n            head: newSeed.head,\\n            eyes: newSeed.eyes,\\n            nose: newSeed.nose,\\n            mouth: newSeed.mouth,\\n            shinyAccessory: newSeed.shinyAccessory\\n        });\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IShinySeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for ShinySeeder\\n\\n/*********************************\\n * \uff65\uff9f\uff65\uff9f\u2727.\u30fb\uff65\uff9fshiny.club\u30fb\u272b\u30fb\u309c\uff65\uff9f\u2727 *\\n *********************************/\\n\\npragma solidity ^0.8.9;\\n\\nimport { IShinyDescriptor } from './IShinyDescriptor.sol';\\n\\ninterface IShinySeeder {\\n    struct Seed {\\n        uint16 background;\\n        uint16 body;\\n        uint16 accessory;\\n        uint16 head;\\n        uint16 eyes;\\n        uint16 nose;\\n        uint16 mouth;\\n        uint16 shinyAccessory;\\n    }\\n\\n    function generateSeedForMint(uint256 tokenId, IShinyDescriptor descriptor, bool isShiny) external view returns (Seed memory);\\n\\n    function generateSeedWithValues(Seed memory newSeed,\\n                                    IShinyDescriptor descriptor,\\n                                    bool isShiny) external view returns (Seed memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IShinyDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for ShinyDescriptor\\n\\n/*********************************\\n * \uff65\uff9f\uff65\uff9f\u2727.\u30fb\uff65\uff9fshiny.club\u30fb\u272b\u30fb\u309c\uff65\uff9f\u2727 *\\n *********************************/\\n\\npragma solidity ^0.8.9;\\n\\nimport { IShinySeeder } from './IShinySeeder.sol';\\n\\ninterface IShinyDescriptor {\\n    event PartsLocked();\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n\\n    function backgrounds(uint256 index) external view returns (string memory);\\n\\n    function bodies(uint256 index) external view returns (bytes memory);\\n\\n    function accessories(uint256 index) external view returns (bytes memory);\\n\\n    function heads(uint256 index) external view returns (bytes memory);\\n\\n    function eyes(uint256 index) external view returns (bytes memory);\\n\\n    function noses(uint256 index) external view returns (bytes memory);\\n\\n    function mouths(uint256 index) external view returns (bytes memory);\\n\\n    function shinyAccessories(uint256 index) external view returns (bytes memory);\\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function bodyCount() external view returns (uint256);\\n\\n    function accessoryCount() external view returns (uint256);\\n\\n    function headCount() external view returns (uint256);\\n\\n    function eyesCount() external view returns (uint256);\\n\\n    function nosesCount() external view returns (uint256);\\n\\n    function mouthsCount() external view returns (uint256);\\n\\n    function shinyAccessoriesCount() external view returns (uint256);\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addManyBodies(bytes[] calldata bodies) external;\\n\\n    function addManyAccessories(bytes[] calldata accessories) external;\\n\\n    function addManyHeads(bytes[] calldata heads) external;\\n\\n    function addManyEyes(bytes[] calldata eyes) external;\\n\\n    function addManyNoses(bytes[] calldata noses) external;\\n\\n    function addManyMouths(bytes[] calldata mouths) external;\\n\\n    function addManyShinyAccessories(bytes[] calldata shinyAccessories) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n    function addBackground(string calldata background) external;\\n\\n    function addBody(bytes calldata body) external;\\n\\n    function addAccessory(bytes calldata accessory) external;\\n\\n    function addHead(bytes calldata head) external;\\n\\n    function addEyes(bytes calldata eyes) external;\\n\\n    function addNoses(bytes calldata noses) external;\\n\\n    function addMouths(bytes calldata mouths) external;\\n\\n    function lockParts() external;\\n\\n    function tokenURI(uint256 tokenId, IShinySeeder.Seed memory seed, bool isShiny) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, IShinySeeder.Seed memory seed, bool isShiny) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        IShinySeeder.Seed memory seed,\\n        bool isShiny\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(IShinySeeder.Seed memory seed) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shinyId\",\"type\":\"uint256\"},{\"internalType\":\"contract IShinyDescriptor\",\"name\":\"descriptor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isShiny\",\"type\":\"bool\"}],\"name\":\"generateSeedForMint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"background\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"body\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accessory\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"head\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"eyes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nose\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mouth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"shinyAccessory\",\"type\":\"uint16\"}],\"internalType\":\"struct IShinySeeder.Seed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"background\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"body\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accessory\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"head\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"eyes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nose\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mouth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"shinyAccessory\",\"type\":\"uint16\"}],\"internalType\":\"struct IShinySeeder.Seed\",\"name\":\"newSeed\",\"type\":\"tuple\"},{\"internalType\":\"contract IShinyDescriptor\",\"name\":\"descriptor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isShiny\",\"type\":\"bool\"}],\"name\":\"generateSeedWithValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"background\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"body\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accessory\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"head\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"eyes\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"nose\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mouth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"shinyAccessory\",\"type\":\"uint16\"}],\"internalType\":\"struct IShinySeeder.Seed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ShinySeeder", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}