{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.6;\r\n\r\ninterface IERC20 {\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IFeeRecipient {\r\n    function setFeeConverter(IFeeConverter _value) external;\r\n    function convert(ILendingPair _pair, bytes memory _path, uint _minWildOutput) external;\r\n}\r\n\r\ninterface IFeeConverter {\r\n\r\n  function convert(\r\n    address          _incentiveRecipient,\r\n    ILendingPair     _pair,\r\n    bytes memory     _path,\r\n    uint             _supplyTokenAmount,\r\n    uint             _minWildOutput\r\n  ) external returns(uint);\r\n}\r\n\r\n\r\ninterface ILendingPair {\r\n  function lpToken(address _token) external view returns(IERC20);\r\n}\r\n\r\ncontract TimelockProposal {\r\n\r\n    ILendingPair public mockPair;\r\n    IFeeConverter public mockConverter;\r\n    IFeeRecipient public feeRecipient;\r\n\r\n    constructor (address _mockPair, address _mockConverter, address _feeRecipient) {\r\n        mockPair = ILendingPair(_mockPair);\r\n        mockConverter = IFeeConverter(_mockConverter);\r\n        feeRecipient = IFeeRecipient(_feeRecipient);\r\n    }\r\n\r\n    function execute() external {\r\n\r\n        address weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        address snx = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\r\n        address mkr = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\r\n        address dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n        address crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n        address inch = 0x111111111117dC0aa78b770fA6A738034120C302;\r\n        address aave = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\r\n\r\n        feeRecipient.setFeeConverter(mockConverter);\r\n\r\n        feeRecipient.convert(mockPair, abi.encodePacked(weth), 0);\r\n        feeRecipient.convert(mockPair, abi.encodePacked(snx), 0);\r\n        feeRecipient.convert(mockPair, abi.encodePacked(mkr), 0);\r\n        feeRecipient.convert(mockPair, abi.encodePacked(dai), 0);\r\n        feeRecipient.convert(mockPair, abi.encodePacked(crv), 0);\r\n        feeRecipient.convert(mockPair, abi.encodePacked(inch), 0);\r\n        feeRecipient.convert(mockPair, abi.encodePacked(aave), 0);\r\n\r\n        // ** Transfer fees from old FeeRecipient to the MultiSig **\r\n\r\n        \r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mockPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mockConverter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"contract IFeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mockConverter\",\"outputs\":[{\"internalType\":\"contract IFeeConverter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mockPair\",\"outputs\":[{\"internalType\":\"contract ILendingPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TimelockProposal", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f26220fec80657ef72eb5f9d5680dcadc816e2a60000000000000000000000004faa3f160531d7878573b89dddb26747d14be27b000000000000000000000000487502f921ba3dadacf63dbf7a57a978c241b72c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b38069b248f8daaaeeb9f78de0e361181b1083a0724177093c1519a64e87cb9"}]}