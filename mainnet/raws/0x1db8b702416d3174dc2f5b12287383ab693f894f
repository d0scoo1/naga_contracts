{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.6.12 >=0.6.12 <0.7.0;\r\n\r\n////// lib/dss-exec-lib/src/CollateralOpts.sol\r\n/* pragma solidity ^0.6.12; */\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address flip;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 bidIncrease;\r\n    uint256 bidDuration;\r\n    uint256 auctionDuration;\r\n    uint256 liquidationRatio;\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n    function suck(address, address, uint) external;\r\n}\r\n\r\ninterface AuctionLike {\r\n    function vat() external returns (address);\r\n    function cat() external returns (address); // Only flip\r\n    function beg() external returns (uint256);\r\n    function pad() external returns (uint256); // Only flop\r\n    function ttl() external returns (uint256);\r\n    function tau() external returns (uint256);\r\n    function ilk() external returns (bytes32); // Only flip\r\n    function gem() external returns (bytes32); // Only flap/flop\r\n}\r\n\r\ninterface JoinLike {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n    function join(address, uint) external;\r\n    function exit(address, uint) external;\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike_2 {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, address, address, address, address\r\n    );\r\n    function ilkData(bytes32) external view returns (\r\n        uint256       pos,\r\n        address       gem,\r\n        address       pip,\r\n        address       join,\r\n        address       flip,\r\n        uint256       dec,\r\n        string memory name,\r\n        string memory symbol\r\n    );\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\nlibrary DssExecLib {\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n    function vat()        public view returns (address) {}\r\n    function cat()        public view returns (address) {}\r\n    function pot()        public view returns (address) {}\r\n    function vow()        public view returns (address) {}\r\n    function end()        public view returns (address) {}\r\n    function reg()        public view returns (address) {}\r\n    function spotter()    public view returns (address) {}\r\n    function flipperMom() public view returns (address) {}\r\n    function flip(bytes32) public view returns (address) {}\r\n    function getChangelogAddress(bytes32) public view returns (address) {}\r\n    function setChangelogAddress(bytes32, address) public {}\r\n    function setChangelogVersion(string memory) public {}\r\n    function authorize(address, address) public {}\r\n    function deauthorize(address, address) public {}\r\n    function canCast(uint40, bool) public pure returns (bool) {}\r\n    function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}\r\n    function setContract(address, bytes32, address) public {}\r\n    function setContract(address, bytes32, bytes32, address) public {}\r\n    function setIlkStabilityFee(bytes32, uint256, bool) public {}\r\n    function setIlkLiquidationRatio(bytes32, uint256) public {}\r\n    function increaseGlobalDebtCeiling(uint256) public {}\r\n    function increaseIlkDebtCeiling(bytes32, uint256, bool) public {}\r\n    function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}\r\n    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\r\n    function addWritersToMedianWhitelist(address, address[] memory) public {}\r\n    function removeWritersFromMedianWhitelist(address, address[] memory) public {}\r\n    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\r\n    function addReaderToMedianWhitelist(address, address) public {}\r\n    function addReaderToOSMWhitelist(address, address) public {}\r\n    function removeReaderFromOSMWhitelist(address, address) public {}\r\n    function sendPaymentFromSurplusBuffer(address, uint256) public {}\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\r\n/* import { CollateralOpts } from \"./CollateralOpts.sol\"; */\r\n\r\ninterface OracleLike_1 {\r\n    function src() external view returns (address);\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Modifier used to limit execution time when office hours is enabled\r\n    modifier limited {\r\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Returns the next available cast time\r\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\r\n        require(eta <= uint40(-1));\r\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n    function nextCastTime(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    string                  public description;\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        return SpellAction(action).nextCastTime(eta);\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        description = _description;\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n\r\n/* import {Fileable} from \"dss-exec-lib/DssExecLib.sol\"; */\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/d2eaa6d2b4ac8e286b998e8e1c2177fcd7733e8d/governance/votes/Executive%20vote%20-%20June%2011%2C%202021.md -q -O - 2> /dev/null)\"\r\n    string public constant description =\r\n        \"2021-06-11 MakerDAO Executive Spell | Hash: 0x46e7883cb0adb7713ff078bea1ec97d1fbd0ee6cfab17e0f48083c171ad27a4f\";\r\n\r\n    uint256 constant RAY = 10**27;\r\n    uint256 constant RAD = 10**45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant POINT_FIVE_PCT       = 1000000000158153903837946257;\r\n    uint256 constant ONE_PCT              = 1000000000315522921573372069;\r\n    uint256 constant TWO_PCT              = 1000000000627937192491029810;\r\n    uint256 constant TWO_POINT_FIVE_PCT   = 1000000000782997609082909351;\r\n    uint256 constant THREE_PCT            = 1000000000937303470807876289;\r\n    uint256 constant THREE_POINT_FIVE_PCT = 1000000001090862085746321732;\r\n    uint256 constant FOUR_PCT             = 1000000001243680656318820312;\r\n    uint256 constant NINE_PCT             = 1000000002732676825177582095;\r\n\r\n    function actions() public override {\r\n        address MCD_DOG               = DssExecLib.getChangelogAddress(\"MCD_DOG\");\r\n        address YEARN_UNI_OSM_READER  = 0x6987e6471D4e7312914Edce4a6f92737C5fd0A8A;\r\n        address YEARN_LINK_OSM_READER = 0xCd73F1Ed2b1078EA35DAB29a8B35d335e0137c83;\r\n        address YEARN_AAVE_OSM_READER = 0x17b20900320D7C23866203cA6808F857B2b3fdA3;\r\n        address YEARN_COMP_OSM_READER = 0x4e9452CD5ba694de87ea1d791aBfdc4a250800f4;\r\n\r\n        // ----------------------------- Ilk AutoLine Updates ---------------------------\r\n        //                                  ilk               DC              gap          ttl\r\n        DssExecLib.setIlkAutoLineParameters(\"ETH-A\",          15_000_000_000, 100_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"ETH-B\",             300_000_000,  10_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"ETH-C\",           2_000_000_000, 100_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"BAT-A\",               7_000_000,   1_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"WBTC-A\",            750_000_000,  30_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"ZRX-A\",               3_000_000,     500_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"MANA-A\",              5_000_000,   1_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"COMP-A\",             20_000_000,   2_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"LRC-A\",               3_000_000,     500_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"LINK-A\",            140_000_000,   7_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"BAL-A\",              30_000_000,   3_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"YFI-A\",             130_000_000,   7_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNI-A\",              50_000_000,   5_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"RENBTC-A\",           10_000_000,   1_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"AAVE-A\",             50_000_000,   5_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2DAIETH-A\",      50_000_000,   5_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2WBTCETH-A\",     20_000_000,   3_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2USDCETH-A\",     50_000_000,   5_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2DAIUSDC-A\",     50_000_000,  10_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2ETHUSDT-A\",     10_000_000,   2_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2LINKETH-A\",     20_000_000,   2_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2UNIETH-A\",      20_000_000,   3_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2WBTCDAI-A\",     20_000_000,   3_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2AAVEETH-A\",     20_000_000,   2_000_000, 8 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2DAIUSDT-A\",     10_000_000,   2_000_000, 8 hours);\r\n\r\n        // ----------------------------- Stability Fee updates --------------------------\r\n        DssExecLib.setIlkStabilityFee(\"ETH-A\", THREE_POINT_FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"ETH-B\", NINE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"ETH-C\", ONE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"WBTC-A\", THREE_POINT_FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"LINK-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"YFI-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNI-A\", TWO_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"AAVE-A\", TWO_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"BAT-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"RENBTC-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2DAIETH-A\", TWO_POINT_FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2USDCETH-A\", THREE_POINT_FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2WBTCETH-A\", THREE_POINT_FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2UNIETH-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2ETHUSDT-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2LINKETH-A\", THREE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2AAVEETH-A\", THREE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2DAIUSDT-A\", TWO_PCT, true);\r\n\r\n        // ----------------------------- UNIV2DAIUSDC-A SF and CR -----------------------\r\n        DssExecLib.setIlkLiquidationRatio(\"UNIV2DAIUSDC-A\", 10200);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2DAIUSDC-A\", POINT_FIVE_PCT, true);\r\n\r\n        // ----------------------------- ETH Auction Params -----------------------------\r\n        Fileable(MCD_DOG).file(\"ETH-A\", \"hole\", 30_000_000 * RAD);\r\n        Fileable(MCD_DOG).file(\"ETH-B\", \"hole\", 15_000_000 * RAD);\r\n        Fileable(MCD_DOG).file(\"ETH-C\", \"hole\", 20_000_000 * RAD);\r\n        Fileable(DssExecLib.getChangelogAddress(\"MCD_CLIP_CALC_ETH_B\")).file(\r\n            \"step\", 60 seconds\r\n        );\r\n        Fileable(DssExecLib.getChangelogAddress(\"MCD_CLIP_ETH_B\")).file(\r\n            \"buf\", 120 * RAY / 100\r\n        );\r\n\r\n        // ----------------------------- Yearn OSM Whitelist ----------------------------\r\n        DssExecLib.addReaderToOSMWhitelist(\r\n            DssExecLib.getChangelogAddress(\"PIP_UNI\"), YEARN_UNI_OSM_READER\r\n        );\r\n        DssExecLib.addReaderToOSMWhitelist(\r\n            DssExecLib.getChangelogAddress(\"PIP_LINK\"), YEARN_LINK_OSM_READER\r\n        );\r\n        DssExecLib.addReaderToOSMWhitelist(\r\n            DssExecLib.getChangelogAddress(\"PIP_AAVE\"), YEARN_AAVE_OSM_READER\r\n        );\r\n        DssExecLib.addReaderToOSMWhitelist(\r\n            DssExecLib.getChangelogAddress(\"PIP_COMP\"), YEARN_COMP_OSM_READER\r\n        );\r\n\r\n        // -------------------------------- PSM-USDC-A line --------------------------------\r\n        // https://ipfs.io/ipfs/QmYhDkCvxBz3TRLGztY2gDPu4SkjQ6FEFtXp4fmKgFSxrb\r\n        DssExecLib.increaseIlkDebtCeiling(\"PSM-USDC-A\", 1_000_000_000, true); // From to 3B to 4B\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    DssSpellAction internal action_ = new DssSpellAction();\r\n    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:c061edfc9c38912e0ad4f3922aa84ee11fb03347", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0829db89e6c092df0026ef17284fd14dcf8bf313a2bc7040c6a61d5c90442eac"}]}