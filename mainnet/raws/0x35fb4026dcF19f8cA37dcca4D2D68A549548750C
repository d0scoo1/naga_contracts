{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.2 https://hardhat.org\r\n\r\n// File contracts/solidity/testing/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/util/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/IAdminUpgradeabilityProxy.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAdminUpgradeabilityProxy {\r\n    // Read functions.\r\n    function admin() external view returns (address);\r\n    function implementation() external view returns (address);\r\n\r\n    // Write functions.\r\n    function changeAdmin(address newAdmin) external;\r\n    function upgradeTo(address newImplementation) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/MultiProxyController.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract MultiProxyController is Ownable {\r\n    struct Proxy {\r\n        string name;\r\n        IAdminUpgradeabilityProxy proxy;\r\n        address impl;\r\n    }\r\n\r\n    Proxy[] private proxies;\r\n\r\n    event ProxyAdded(string name, address proxy);\r\n    event ProxyRemoved(uint256 index);\r\n    event ProxyAdminChanged(uint256 index, address newAdmin);\r\n\r\n    constructor(string[] memory _names, address[] memory _proxies) Ownable() {\r\n        uint256 length = _proxies.length;\r\n        require(_names.length == length, \"Not equal length\");\r\n        for (uint256 i; i < length; i++) {\r\n            addProxy(_names[i], _proxies[i]);\r\n        } \r\n    }\r\n\r\n    function upgradeProxyTo(uint256 index, address newImpl) public onlyOwner {\r\n        require(index < proxies.length, \"Out of bounds\");\r\n        proxies[index].proxy.upgradeTo(newImpl);\r\n    }\r\n\r\n    function changeProxyAdmin(uint256 index, address newAdmin) public onlyOwner {\r\n        require(index < proxies.length, \"Out of bounds\");\r\n        proxies[index].proxy.changeAdmin(newAdmin);\r\n        emit ProxyAdminChanged(index, newAdmin);\r\n    }\r\n\r\n    function addProxy(string memory name, address proxy) public onlyOwner {\r\n        IAdminUpgradeabilityProxy _proxy = IAdminUpgradeabilityProxy(proxy);\r\n        proxies.push(Proxy(name, _proxy, address(0)));\r\n        emit ProxyAdded(name, proxy);\r\n    }\r\n\r\n    function removeProxy(uint256 index) public onlyOwner {\r\n        // Preferably want to maintain order to reduce chance of mistake.\r\n        uint256 length = proxies.length;\r\n        if (index >= length) return;\r\n\r\n        for (uint i = index; i < length-1; ++i) {\r\n            proxies[i] = proxies[i+1];\r\n        }\r\n        proxies.pop();\r\n        emit ProxyRemoved(index);\r\n    }\r\n\r\n    function changeAllAdmins(address newAdmin) public onlyOwner {\r\n        uint256 length = proxies.length;\r\n        for (uint256 i; i < length; ++i) {\r\n            changeProxyAdmin(i, newAdmin);\r\n        }\r\n    }\r\n\r\n    function changeAllAdmins(uint256 start, uint256 count, address newAdmin) public onlyOwner {\r\n        require(start + count <= proxies.length, \"Out of bounds\");\r\n        for (uint256 i = start; i < start + count; ++i) {\r\n            changeProxyAdmin(i, newAdmin);\r\n        }\r\n    }\r\n\r\n    function getName(uint256 index) public view returns (string memory) {\r\n        return proxies[index].name;\r\n    }\r\n\r\n    function getAdmin(uint256 index) public view returns (address) {\r\n        return proxies[index].proxy.admin();\r\n    }\r\n\r\n    function getImpl(uint256 index) public view returns(address) {\r\n        return proxies[index].proxy.implementation();\r\n    }\r\n\r\n    function getAllProxiesInfo() public view returns (string[] memory) {\r\n        uint256 length = proxies.length;\r\n        string[] memory proxyInfos = new string[](length);\r\n        for (uint256 i; i < length; ++i) {\r\n            Proxy memory _proxy = proxies[i];\r\n            proxyInfos[i] = string(abi.encodePacked(uint2str(i), \": \", _proxy.name));\r\n        }\r\n        return proxyInfos;\r\n    }\r\n\r\n    function getAllProxies() public view returns (address[] memory) {\r\n        uint256 length = proxies.length;\r\n        address[] memory proxyInfos = new address[](length);\r\n        for (uint256 i; i < length; ++i) {\r\n            proxyInfos[i] = address(proxies[i].proxy);\r\n        }\r\n        return proxyInfos;\r\n    }\r\n    \r\n    function getAllImpls() public view returns (address[] memory) {\r\n        uint256 length = proxies.length;\r\n        address[] memory proxyInfos = new address[](length);\r\n        for (uint256 i; i < length; ++i) {\r\n            proxyInfos[i] = address(proxies[i].proxy.implementation());\r\n        }\r\n        return proxyInfos;\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_proxies\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ProxyAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ProxyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"addProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAllAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAllAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllImpls\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProxies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProxiesInfo\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"upgradeProxyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiProxyController", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000c4e46545820466163746f72790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f466565204469737472696275746f720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4c50205374616b696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000145374616b696e67546f6b656e50726f76696465720000000000000000000000000000000000000000000000000000000000000000000000000000000000000013456c69676962696c697479204d616e61676572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011496e76656e746f7279205374616b696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000be86f647b167567525ccaafcd6f881f1ee558216000000000000000000000000fd8a76dc204e461db5da4f38687adc9cc5ae4a86000000000000000000000000688c3e4658b5367da06fd629e41879beab538e370000000000000000000000005fad0e4cc9925365b9b0bbec9e0c3536c0b1a5c70000000000000000000000004086e98cce041d286112d021612fd894cfed94d50000000000000000000000003e135c3e981fae3383a5ae0d323860a34cfab893", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b97256e1510bf4c748fa57f649de440e79230406b7f1de498dcfb003d6886310"}]}