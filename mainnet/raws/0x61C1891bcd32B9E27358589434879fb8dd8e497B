{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HSIMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IHEXStakeInstanceManager {\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n}\\n\\ninterface IFeeCollection {\\n    function manageFees(uint256 value, uint256 addShare) external;\\n}\\n\\ncontract HSIMarketplace is Ownable {\\n    IHEXStakeInstanceManager public IHSIMtoken;\\n    IFeeCollection public IfeeCollection;\\n    address payable fee;\\n    uint256 public totalFeeShare = 2222; // 2.222 Percentage\\n\\n    struct ItemForSale {\\n        uint256 id;\\n        uint256 tokenId;\\n        address payable seller;\\n        uint256 price;\\n        bool isSold;\\n    }\\n\\n    ItemForSale[] public itemsForSale;\\n    mapping(uint256 => bool) public activeItems;\\n\\n    //Events\\n    event itemAddedForSale(\\n        uint256 id,\\n        address seller,\\n        uint256 tokenId,\\n        uint256 price\\n    );\\n    event itemSold(uint256 id, address buyer, uint256 tokenId, uint256 price);\\n    event itemDelisted(uint256 id, uint256 tokenId, bool isActive);\\n\\n    //Constructor\\n    constructor(address _hsimtoken, address payable _feeCollection) {\\n        require(\\n            (_hsimtoken != address(0) && _feeCollection != address(0)),\\n            \\\"Zero address is not allowed.\\\"\\n        );\\n\\n        IHSIMtoken = IHEXStakeInstanceManager(_hsimtoken);\\n        IfeeCollection = IFeeCollection(_feeCollection); // Interface for Fee Collector contract\\n        fee = _feeCollection; // Fee collector contract address to transfer ETH to this address\\n    }\\n\\n    //Modifier, Check NFT ownership\\n    modifier OnlyItemOwner(uint256 tokenId) {\\n        require(\\n            IHSIMtoken.ownerOf(tokenId) == msg.sender,\\n            \\\"Sender is not the owner of this NFT\\\"\\n        );\\n        _;\\n    }\\n\\n    //Modifier, Check if NFT is approved for this contract\\n    modifier HasTransferApproval(uint256 tokenId) {\\n        require(\\n            IHSIMtoken.getApproved(tokenId) == address(this),\\n            \\\"NFT not approved for this Marketplace\\\"\\n        );\\n        _;\\n    }\\n\\n    //Modifier, Check if NFT listed for sale\\n    modifier ItemExists(uint256 id) {\\n        require(\\n            id < itemsForSale.length && itemsForSale[id].id == id,\\n            \\\"NFT not listed for sale\\\"\\n        );\\n        _;\\n    }\\n\\n    //Modifier, Check if listed NFT is sold or not\\n    modifier IsForSale(uint256 id) {\\n        require(!itemsForSale[id].isSold, \\\"Item is already sold\\\");\\n        require(\\n            activeItems[itemsForSale[id].tokenId],\\n            \\\"Item is delisted for sale\\\"\\n        );\\n        _;\\n    }\\n\\n    /* ======== USER FUNCTIONS ======== */\\n\\n    /*\\n     *@notice List NFT for sale\\n     *@param tokenId uint256, NFT ID\\n     *@param price(in wei) uint256, NFT selling price\\n     *@return uint(newItemId)\\n     */\\n    function putItemForSale(uint256 tokenId, uint256 price)\\n        external\\n        OnlyItemOwner(tokenId)\\n        HasTransferApproval(tokenId)\\n        returns (uint256)\\n    {\\n        require(!activeItems[tokenId], \\\"Item is already up for sale\\\");\\n        require(price > 0, \\\"Price should be greater than 0\\\");\\n\\n        uint256 newItemId = itemsForSale.length;\\n        itemsForSale.push(\\n            ItemForSale({\\n                id: newItemId,\\n                tokenId: tokenId,\\n                seller: payable(msg.sender),\\n                price: price,\\n                isSold: false\\n            })\\n        );\\n        activeItems[tokenId] = true;\\n\\n        assert(itemsForSale[newItemId].id == newItemId);\\n        emit itemAddedForSale(newItemId, msg.sender, tokenId, price);\\n        return newItemId;\\n    }\\n\\n    /*\\n     *  @notice Buy a NFT\\n     *  @param uint256 id, index of NFT\\n     */\\n    function buyItem(uint256 id)\\n        external\\n        payable\\n        ItemExists(id)\\n        IsForSale(id)\\n        HasTransferApproval(itemsForSale[id].tokenId)\\n    {\\n        require(msg.value >= itemsForSale[id].price, \\\"Not enough funds sent\\\");\\n        require(msg.sender != itemsForSale[id].seller);\\n\\n        itemsForSale[id].isSold = true;\\n        activeItems[itemsForSale[id].tokenId] = false;\\n        IHEXStakeInstanceManager(IHSIMtoken).safeTransferFrom(\\n            itemsForSale[id].seller,\\n            msg.sender,\\n            itemsForSale[id].tokenId\\n        );\\n\\n        uint256 addShare = (msg.value * totalFeeShare) / 100000;\\n        uint256 sellerShare = msg.value - addShare;\\n\\n        itemsForSale[id].seller.transfer(sellerShare);\\n        fee.transfer(addShare);\\n        IfeeCollection.manageFees(msg.value, addShare);\\n\\n        emit itemSold(\\n            id,\\n            msg.sender,\\n            itemsForSale[id].tokenId,\\n            itemsForSale[id].price\\n        );\\n    }\\n\\n    /*\\n     *  @notice Get total number of NFTs for sale\\n     *  @return uint\\n     */\\n    function totalItemsForSale() external view returns (uint256) {\\n        return itemsForSale.length;\\n    }\\n\\n    /*\\n     *  @notice Get all NFTs for sale\\n     *  @return tuple\\n     */\\n    function getListedItems() external view returns (ItemForSale[] memory) {\\n        return itemsForSale;\\n    }\\n\\n    /*\\n     *  @notice Remove an NFT from sale\\n     *  @param uint256 id, Index of NFT in itemsForSale\\n     *  @param uint256 tokenId, NFT ID\\n     *  @return uint256\\n     */\\n    function delistItem(uint256 id, uint256 tokenId)\\n        external\\n        OnlyItemOwner(tokenId)\\n        IsForSale(id)\\n        returns (uint256)\\n    {\\n        activeItems[itemsForSale[id].tokenId] = false;\\n\\n        emit itemDelisted(id, tokenId, activeItems[itemsForSale[id].tokenId]);\\n        return tokenId;\\n    }\\n\\n    /*\\n     *  @notice Update Fee Collector contract  address\\n     *  @param address payable _fee, new fee collector address\\n     */\\n    function updateFeeCollector(address payable _fee) external onlyOwner {\\n        require(_fee != address(0), \\\"Zero address is not allowed\\\");\\n        require(_fee != fee, \\\"Cannot add the same address as feeCollector\\\");\\n\\n        IfeeCollection = IFeeCollection(_fee);\\n        fee = _fee;\\n    }\\n\\n    /*\\n     *  @notice Update total fee share percentage\\n     *  @param uint256 _newFeeShare, new fee share percentage, Eg. for 2.222% enter 2222\\n     */\\n    function updateTotalFeeShare(uint256 _newFeeShare) external onlyOwner {\\n        require(_newFeeShare != 0, \\\"Enter fee share greater than 0\\\");\\n        require(\\n            _newFeeShare != totalFeeShare,\\n            \\\"New fee share is same as existing\\\"\\n        );\\n\\n        totalFeeShare = _newFeeShare;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 369\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hsimtoken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeCollection\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"itemAddedForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"itemDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"itemSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IHSIMtoken\",\"outputs\":[{\"internalType\":\"contract IHEXStakeInstanceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IfeeCollection\",\"outputs\":[{\"internalType\":\"contract IFeeCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeItems\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"delistItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListedItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"}],\"internalType\":\"struct HSIMarketplace.ItemForSale[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemsForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSold\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"putItemForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalItemsForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeeShare\",\"type\":\"uint256\"}],\"name\":\"updateTotalFeeShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HSIMarketplace", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "369", "ConstructorArguments": "0000000000000000000000008bd3d1472a656e312e94fb1bbdd599b8c51d18e300000000000000000000000080b2b5b92a484a869b9c3beb29365f3522f8f47f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}