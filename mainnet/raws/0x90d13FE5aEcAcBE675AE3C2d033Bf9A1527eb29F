{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ibg-ido.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../Ownable.sol\\\";\\n\\ncontract ibgPresale is Ownable {\\n\\n    IERC20 public ibgToken = IERC20(0xF16CD087e1C2C747b2bDF6f9A5498AA400D99C24);\\n    bool public openStaked = false;        \\n    bool public openRedeemed = false;      \\n    uint256 public redeemedFee = 90;      \\n\\n    struct StakedInfo {\\n        address _address;   \\n        uint8 _type;        \\n        uint8 _combo;       \\n        uint256 _number;    \\n        uint256 _time;      \\n        uint256 _serialNumber;      \\n        uint256 _myorderNumber;     \\n    }\\n\\n    struct UserInfo {\\n        address _parentAddress;\\n        uint256 _ordersNumber;  \\n        uint256 _stakedNumber;  \\n        uint256 _level;         \\n        bool _vip;              \\n    }\\n\\n    mapping (address =\\u003e mapping (uint256 =\\u003e StakedInfo)) public myorders;     \\n    mapping (address =\\u003e uint256) public recommends;      \\n    mapping (address =\\u003e UserInfo) public userInfos;     \\n    mapping (uint8 =\\u003e uint256) public comboMap;         \\n    uint256 public stakedNum = 0;   \\n    mapping (uint256 =\\u003e StakedInfo) public orders;\\n    uint256 public discount;\\n\\n    function setDiscount (uint256 _discount) public onlyOwner {\\n        discount = _discount;\\n    }\\n\\n    \\n    function setVip (address _vipAddress, bool _true) public onlyOwner {\\n        UserInfo memory userinfo = userInfos[_vipAddress];\\n        userinfo._vip = _true;\\n        userInfos[_vipAddress] = userinfo;\\n    }\\n\\n    \\n    event SetViplist(address indexed user, address[] _account, bool _bool);\\n    function setViplist(address[] memory _vipAddress, bool _bool) public onlyOwner {\\n        for (uint256 i = 0; i \\u003c _vipAddress.length; i++) {\\n            address _address = _vipAddress[i];\\n            UserInfo memory userinfo = userInfos[_address];\\n            userinfo._vip = _bool;\\n            userInfos[_address] = userinfo;\\n        }\\n\\n        emit SetViplist(msg.sender, _vipAddress, _bool);\\n    }\\n\\n    \\n    function staked(uint8  _combo, address _parent) public {\\n        uint256 amount = (comboMap[_combo] * discount)/100;\\n        UserInfo memory userinfo = userInfos[msg.sender];\\n        require((amount != 0 \\u0026\\u0026 openStaked) || userinfo._vip, \\\"staked: error1\\\");\\n        require(userinfo._stakedNumber == 0 || _combo \\u003e userinfo._level, \\\"staked: error2\\\");\\n        \\n        require(address(msg.sender) != _parent, \\\"Participate: The recommender cannot be yourself\\\");\\n        if (recommends[msg.sender] == 0 \\u0026\\u0026 _parent != address(0x0000000000000000000000000000000000000000) \\u0026\\u0026 userinfo._parentAddress == address(0x0000000000000000000000000000000000000000)) {\\n            userinfo._parentAddress = _parent;  \\n            recommends[_parent] += 1;\\n        }\\n\\n        uint256 _transfer = amount - userinfo._stakedNumber;    \\n\\n        userinfo._level = _combo;       \\n        userinfo._ordersNumber = 1;     \\n        userinfo._stakedNumber = amount; \\n        ibgToken.transferFrom(msg.sender, address(this), _transfer);\\n\\n        StakedInfo memory info = myorders[msg.sender][userinfo._ordersNumber];\\n        if (info._serialNumber == 0) {\\n            info._address = msg.sender;\\n            info._combo = _combo;\\n            info._number = amount;\\n            info._type = 1;\\n            info._serialNumber = stakedNum;\\n            info._time = block.timestamp;\\n            info._myorderNumber = userinfo._ordersNumber;\\n\\n            myorders[msg.sender][userinfo._ordersNumber] = info;    \\n            orders[stakedNum] = info;                               \\n            stakedNum += 1;\\n        } else {\\n\\n            info._combo = _combo;\\n            info._number = amount;\\n            info._type = 1;\\n            info._time = block.timestamp;\\n\\n            myorders[msg.sender][userinfo._ordersNumber] = info;    \\n            orders[info._serialNumber] = info;                      \\n        }\\n        \\n        userInfos[msg.sender] = userinfo;\\n        \\n    }\\n\\n    \\n    function redeemed(uint256 _serialNumber) public {\\n        StakedInfo memory info = orders[_serialNumber];     \\n        UserInfo memory userinfo = userInfos[msg.sender];\\n        uint256 amount = info._number;\\n        require(openRedeemed \\u0026\\u0026 info._type == 1 \\u0026\\u0026 info._address == msg.sender, \\\"redeemed: error\\\");\\n        ibgToken.transfer(msg.sender, (amount * redeemedFee)/100);\\n        \\n        info._type = 2;\\n        info._time = block.timestamp;\\n        orders[_serialNumber] = info;                        \\n        myorders[msg.sender][info._myorderNumber] = info;    \\n        userinfo._stakedNumber = 0;                          \\n        userinfo._level = 0;\\n        userInfos[msg.sender] = userinfo;\\n    }\\n\\n    function setCombo(uint8 _combo, uint256 _amount, uint8 _decimals) public onlyOwner {\\n        comboMap[_combo] = _amount * 10**_decimals;\\n    }\\n\\n    event SetCombolist(address indexed user, uint8[] _combo, uint256[] _amount);\\n    function setCombolist(uint8[] memory _combo, uint256[] memory _amount) public onlyOwner {\\n        for (uint256 i = 0; i \\u003c _combo.length; i++) {\\n            uint8 key = _combo[i];\\n            comboMap[key] = _amount[i] * 10**18;\\n        }\\n\\n        emit SetCombolist(msg.sender, _combo, _amount);\\n    }\\n\\n    function setOpenStaked(bool _open) public onlyOwner {\\n        openStaked = _open;\\n    }\\n    function setOpenRedeemed(bool _open) public onlyOwner {\\n        openRedeemed = _open;\\n    }\\n    function destoryContract () public onlyOwner {\\n        ibgToken.transfer(msg.sender, ibgToken.balanceOf(address(this)));\\n    }\\n    function setRedeemedFee (uint256 _redeemedFee) public onlyOwner {\\n        redeemedFee = _redeemedFee;\\n    }\\n    function setIBGToken (IERC20 _ibgToken) public onlyOwner {\\n        ibgToken = _ibgToken;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_combo\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"SetCombolist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"SetViplist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"comboMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destoryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ibgToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myorders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_combo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_myorderNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_combo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_myorderNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recommends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serialNumber\",\"type\":\"uint256\"}],\"name\":\"redeemed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_combo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setCombo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_combo\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"setCombolist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"}],\"name\":\"setDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_ibgToken\",\"type\":\"address\"}],\"name\":\"setIBGToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpenRedeemed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpenStaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemedFee\",\"type\":\"uint256\"}],\"name\":\"setRedeemedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vipAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_true\",\"type\":\"bool\"}],\"name\":\"setVip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vipAddress\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setViplist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_combo\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_parentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ordersNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vip\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ibgPresale", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e6e9f18dd75794815dbba35ab4117724f9afd6472c1093ab2e42c4ea0605c0a"}]}