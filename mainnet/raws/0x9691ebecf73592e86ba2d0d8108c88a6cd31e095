{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n//    _____                   __            ___   ____  ______              //\r\n//   / ___/__ ____  ___ ____ / /____ ____  / _ | / / / / __/ /____ _____    //\r\n//  / (_ / _ `/ _ \\/ _ `(_-</ __/ -_) __/ / __ |/ / / _\\ \\/ __/ _ `/ __/    //\r\n//  \\___/\\_,_/_//_/\\_, /___/\\__/\\__/_/   /_/ |_/_/_/ /___/\\__/\\_,_/_/       //\r\n//                /___/                                                     //\r\n//     ____             _      __                                           //\r\n//    / __/__  ___ ____(_)__ _/ /                                           //\r\n//   _\\ \\/ _ \\/ -_) __/ / _ `/ /                                            //\r\n//  /___/ .__/\\__/\\__/_/\\_,_/_/                                             //\r\n//     /_/                                                                  //\r\n//                                                                          //\r\n//   Migration by: 0xInuarashi                                              //\r\n//                                                                          //\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\ninterface ERC1155TokenReceiver {\r\n    function onERC1155Received(address operator_, address from_, uint256 id_,\r\n        uint256 amount_, bytes calldata data_) external returns (bytes4);\r\n    function onERC1155BatchReceived(address operator_, address from_,\r\n        uint256[] calldata ids_, uint256[] calldata amounts_, bytes calldata data_)\r\n        external returns (bytes4);\r\n}\r\n\r\ncontract ERC1155I {\r\n    \r\n    string public name; string public symbol; string public uri;\r\n    string internal baseTokenURI; string internal baseTokenURI_EXT;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_; symbol = symbol_; \r\n    }\r\n\r\n    // Mappings\r\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    // Events\r\n    event TransferSingle(address indexed operator_, address indexed from_, \r\n    address indexed to_, uint256 id_, uint256 amount_);\r\n    event TransferBatch(address indexed operator_, address indexed from_, \r\n    address indexed to_, uint256[] ids_, uint256[] amounts_);\r\n    event ApprovalForAll(address indexed owner_, address indexed operator_, \r\n    bool approved_);\r\n    event URI(string value_, uint256 indexed id_);\r\n\r\n    // Internal Logics\r\n    function _isSameLength(uint256 a, uint256 b) internal pure {\r\n        require(a == b, \"Array Lengths mismatch!\");\r\n    }\r\n    function _isApprovedOrOwner(address from_) internal view {\r\n        require(msg.sender == from_ || isApprovedForAll[from_][msg.sender], \r\n            \"_isApprovedOrOwner(): false!\");\r\n    }\r\n    function _pingOnERC1155Received(address from_, address to_, uint256 id_,\r\n    uint256 amount_, bytes memory data_) internal returns (bytes4) {\r\n        try ERC1155TokenReceiver(to_).onERC1155Received(msg.sender, from_, id_,\r\n        amount_, data_) returns (bytes4 _magic) {\r\n            return _magic;\r\n        } catch {\r\n            revert(\"Unable to call onERC1155Received on target!\");\r\n        }\r\n    }\r\n    function _pingOnERC1155BatchReceived(address from_, address to_, \r\n    uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) \r\n    internal returns (bytes4) {\r\n            try ERC1155TokenReceiver(to_).onERC1155BatchReceived(msg.sender, from_,\r\n            ids_, amounts_, data_) returns (bytes4 _magic) {\r\n                return _magic;\r\n            } catch {\r\n                revert(\"Unable to call onERC1155BatchReceived on target!\");\r\n            }\r\n        }\r\n    function _ERC1155Supported(address from_, address to_, uint256 id_,\r\n    uint256 amount_, bytes memory data_) internal {\r\n        require(to_.code.length == 0 ? to_ != address(0) :\r\n            ERC1155TokenReceiver.onERC1155Received.selector \r\n                == _pingOnERC1155Received(from_, to_, id_, amount_, data_),\r\n                \"_ERC1155Supported(): Unsupported Recipient!\"\r\n        );\r\n    }\r\n    function _ERC1155BatchSupported(address from_, address to_, uint256[] memory ids_,\r\n    uint256[] memory amounts_, bytes memory data_) internal {\r\n        require(to_.code.length == 0 ? to_ != address(0) :\r\n            ERC1155TokenReceiver.onERC1155BatchReceived.selector\r\n                == _pingOnERC1155BatchReceived(from_, to_, ids_, amounts_, data_),\r\n                \"_ERC1155BatchSupported(): Unsupported Recipient!\"\r\n        );\r\n    }\r\n\r\n    // ERC1155 Logics\r\n    function setApprovalForAll(address operator_, bool approved_) public virtual {\r\n        isApprovedForAll[msg.sender][operator_] = approved_;\r\n        emit ApprovalForAll(msg.sender, operator_, approved_);\r\n    }\r\n\r\n    function safeTransferFrom(address from_, address to_, uint256 id_, \r\n    uint256 amount_, bytes memory data_) public virtual {\r\n        _isApprovedOrOwner(from_);\r\n        \r\n        balanceOf[from_][id_] -= amount_;\r\n        balanceOf[to_][id_] += amount_;\r\n        emit TransferSingle(msg.sender, from_, to_, id_, amount_);\r\n\r\n        _ERC1155Supported(from_, to_, id_, amount_, data_);\r\n    }\r\n    function safeBatchTransferFrom(address from_, address to_, uint256[] memory ids_,\r\n    uint256[] memory amounts_, bytes memory data_) public virtual {\r\n        _isSameLength(ids_.length, amounts_.length);\r\n        _isApprovedOrOwner(from_);\r\n\r\n        for (uint256 i = 0; i < ids_.length; i++) {\r\n            balanceOf[from_][ids_[i]] -= amounts_[i];\r\n            balanceOf[to_][ids_[i]] += amounts_[i];\r\n        }\r\n        emit TransferBatch(msg.sender, from_, to_, ids_, amounts_);\r\n\r\n        _ERC1155BatchSupported(from_, to_, ids_, amounts_, data_);\r\n    }\r\n\r\n    // Internal Mint / Burn Logic\r\n    function _mint(address to_, uint256 id_, uint256 amount_, bytes memory data_)\r\n    internal {\r\n        balanceOf[to_][id_] += amount_;\r\n        emit TransferSingle(msg.sender, address(0), to_, id_, amount_);\r\n\r\n        _ERC1155Supported(address(0), to_, id_, amount_, data_);\r\n    }\r\n    function _batchMint(address to_, uint256[] memory ids_, uint256[] memory amounts_,\r\n    bytes memory data_) internal {\r\n        _isSameLength(ids_.length, amounts_.length);\r\n\r\n        for (uint256 i = 0; i < ids_.length; i++) {\r\n            balanceOf[to_][ids_[i]] += amounts_[i];\r\n        }\r\n        emit TransferBatch(msg.sender, address(0), to_, ids_, amounts_);\r\n\r\n        _ERC1155BatchSupported(address(0), to_, ids_, amounts_, data_);\r\n    }\r\n    function _batchBurn(address from_, uint256[] memory ids_, \r\n    uint256[] memory amounts_) internal {\r\n        _isSameLength(ids_.length, amounts_.length);\r\n        \r\n        for (uint256 i = 0; i < ids_.length; i++) {\r\n            balanceOf[from_][ids_[i]] -= amounts_[i];\r\n        }\r\n        emit TransferBatch(msg.sender, from_, address(0), ids_, amounts_);\r\n    }\r\n    function _burn(address from_, uint256 id_, uint256 amount_) internal {\r\n        balanceOf[from_][id_] -= amount_;\r\n        emit TransferSingle(msg.sender, from_, address(0), id_, amount_);\r\n    }\r\n\r\n    // ERC165 Logic\r\n    function supportsInterface(bytes4 interfaceId_) public pure virtual returns (bool) {\r\n        return \r\n        interfaceId_ == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n        interfaceId_ == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\r\n        interfaceId_ == 0x0e89341c;   // ERC165 Interface ID for ERC1155MetadataURI\r\n    }\r\n\r\n    // View Functions\r\n    function balanceOfBatch(address[] memory owners_, uint256[] memory ids_) public\r\n    view virtual returns (uint256[] memory) {\r\n        _isSameLength(owners_.length, ids_.length);\r\n\r\n        uint256[] memory _balances = new uint256[](owners_.length);\r\n\r\n        for (uint256 i = 0; i < owners_.length; i++) {\r\n            _balances[i] = balanceOf[owners_[i]][ids_[i]];\r\n        }\r\n        return _balances;\r\n    }\r\n    \r\n    // Token URI Stuff\r\n    function _setURI(string memory uri_) internal virtual {\r\n        uri = uri_;\r\n    }\r\n    function _setBaseTokenURI(string memory uri_) internal virtual {\r\n        baseTokenURI = uri_;\r\n    }\r\n    function _setBaseTokenURI_EXT(string memory ext_) internal virtual {\r\n        baseTokenURI_EXT = ext_;\r\n    }\r\n    function _toString(uint256 value_) internal pure returns (string memory) {\r\n        if (value_ == 0) { return \"0\"; }\r\n        uint256 _iterate = value_; uint256 _digits;\r\n        while (_iterate != 0) { _digits++; _iterate /= 10; } // get digits in value_\r\n        bytes memory _buffer = new bytes(_digits);\r\n        while (value_ != 0) { _digits--; _buffer[_digits] = bytes1(uint8(\r\n            48 + uint256(value_ % 10 ))); value_ /= 10; } // create bytes of value_\r\n        return string(_buffer); // return string converted bytes of value_\r\n    }\r\n    function tokenURI(uint256 tokenId_) public view virtual returns (string memory) {\r\n        return string(abi.encodePacked(\r\n            baseTokenURI, _toString(tokenId_), baseTokenURI_EXT));\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public owner; \r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner { require(owner == msg.sender, \"Not Owner!\"); _; }\r\n    function transferOwnership(address new_) external onlyOwner { owner = new_; }\r\n}\r\n\r\ninterface IERC1155 {\r\n    function safeTransferFrom(address from_, address to_, uint256 id_,\r\n    uint256 amount_, bytes calldata data_) external;\r\n}\r\n\r\ncontract GangsterAllStarSpecial is ERC1155I, Ownable {\r\n    constructor() ERC1155I(\"Gangster All Star Specials\", \"GAS Specials\") {}\r\n\r\n    // Migration Variables\r\n    address public constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public constant OSAddress = 0x495f947276749Ce646f68AC8c248420045cb7b5e;\r\n    IERC1155 public OSStore = IERC1155(OSAddress);\r\n\r\n    bool public migrationEnabled = true; \r\n\r\n    // Events\r\n    event Migrated(address migrator_, uint256 newTokenId_, uint256 oldTokenId_);\r\n\r\n    // Modifiers\r\n    modifier onlySender { require(msg.sender == tx.origin, \"No Smart Contract!\"); _; }\r\n    modifier onlyMigration { require(migrationEnabled, \"Migration Disabled!\"); _; }\r\n\r\n    // Administration\r\n    function setMigration(bool bool_) external onlyOwner {\r\n        migrationEnabled = bool_;\r\n    }\r\n\r\n    function setBaseTokenURI(string calldata uri_) external onlyOwner {\r\n        _setBaseTokenURI(uri_);\r\n    }\r\n    function setBaseTokenURI_EXT(string calldata ext_) external onlyOwner {\r\n        _setBaseTokenURI_EXT(ext_);\r\n    }\r\n\r\n    // Minting New Assets\r\n    function mintSingleToMany(address[] calldata tos_, uint256 id_, \r\n    uint256 amount_, bytes calldata data_) external onlyOwner {\r\n        for (uint256 i; i < tos_.length; i++) {\r\n            _mint(tos_[i], id_, amount_, data_);\r\n        }\r\n    }\r\n\r\n    // Token ID Finder\r\n    function getRawIdFromOS(uint256 tokenId_) public pure returns (uint256) {\r\n        return (tokenId_ \r\n        & 0x0000000000000000000000000000000000000000ffffffffffffff0000000000) >> 40;\r\n    }\r\n    function isCreatedByGAS(uint256 tokenId_) public pure returns (bool) {\r\n        return tokenId_ >> 96 \r\n            == 0x000000000000000000000000077afa85c86ac799b04d0f7aab6c81bfe4186773;\r\n    }\r\n\r\n    // Specials IDs\r\n    function getTokenOffsets(uint256 tokenId_) public pure returns (uint256) {\r\n        if ((tokenId_ >= 125 && tokenId_ <= 133))\r\n            return 124;\r\n        \r\n        if (tokenId_ == 198) return 188;\r\n        \r\n        if (tokenId_ == 204 \r\n            || tokenId_ == 205)\r\n            return 193;\r\n        \r\n        if (tokenId_ == 255\r\n            || tokenId_ == 256)\r\n            return 242;\r\n\r\n        else revert (\"GAS Specials: Unable to determine offset!\");\r\n    }\r\n    function getValidSpecialTokenId(uint256 tokenId_) public pure returns (uint256) {\r\n        require(isCreatedByGAS(tokenId_), \r\n            \"This token was not created by GAS!\");\r\n\r\n        uint256 _rawId = getRawIdFromOS(tokenId_);\r\n        return _rawId - getTokenOffsets(_rawId);\r\n    }\r\n\r\n    // Migration Logic\r\n    function migrateGangster(uint256 tokenId_) external onlySender onlyMigration {\r\n        uint256 _newTokenId = getValidSpecialTokenId(tokenId_);\r\n\r\n        // Burn the OpenStore Token\r\n        OSStore.safeTransferFrom(msg.sender, burnAddress, tokenId_, 1, \"\");\r\n\r\n        // Mint the new Token ID to msg.sender\r\n        _mint(msg.sender, _newTokenId, 1, \"\");\r\n\r\n        // Emit the Migration Event\r\n        emit Migrated(msg.sender, _newTokenId, tokenId_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokenId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTokenId_\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value_\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OSAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OSStore\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getRawIdFromOS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getTokenOffsets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getValidSpecialTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"isCreatedByGAS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"migrateGangster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos_\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"mintSingleToMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ext_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI_EXT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GangsterAllStarSpecial", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://454453b80d9e791367fbff6fddd6c0f4edfa092b25e420236b0e13e09626b11d"}]}