{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract Context {\r\n\r\n\r\n\r\n\r\nfunction _msgSender() internal view virtual returns (address payable) {\r\n\r\n\r\n\r\n\r\nreturn msg.sender;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction _msgData() internal view virtual returns (bytes memory) {\r\n\r\n\r\n\r\n\r\nthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\r\n\r\n\r\n\r\nreturn msg.data;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n\r\n\r\n\r\nuint256 c = a + b;\r\n\r\n\r\n\r\n\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\r\n\r\n\r\n\r\nreturn c;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n\r\n\r\n\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n\r\n\r\n\r\nrequire(b <= a, errorMessage);\r\n\r\n\r\n\r\n\r\nuint256 c = a - b;\r\n\r\n\r\n\r\n\r\n\r\nreturn c;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n\r\n\r\n\r\n\r\n\r\nif (a == 0) {\r\n\r\n\r\n\r\n\r\nreturn 0;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nuint256 c = a * b;\r\n\r\n\r\n\r\n\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn c;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n\r\n\r\n\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n\r\n\r\n\r\nrequire(b > 0, errorMessage);\r\n\r\n\r\n\r\n\r\nuint256 c = a / b;\r\n\r\n\r\n\r\n\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\r\n\r\n\r\n\r\nreturn c;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n\r\n\r\n\r\nreturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n\r\n\r\n\r\nrequire(b != 0, errorMessage);\r\n\r\n\r\n\r\n\r\nreturn a % b;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n\r\n\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n\r\n\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n\r\n\r\n\r\naddress private _owner;\r\n\r\n\r\n\r\n\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconstructor () internal {\r\n\r\n\r\n\r\n\r\naddress msgSender = _msgSender();\r\n\r\n\r\n\r\n\r\n_owner = msgSender;\r\n\r\n\r\n\r\n\r\nemit OwnershipTransferred(address(0), msgSender);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction owner() public view returns (address) {\r\n\r\n\r\n\r\n\r\nreturn _owner;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodifier onlyOwner() {\r\n\r\n\r\n\r\n\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n\r\n\r\n\r\n_;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n\r\n\r\n\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n\r\n\r\n\r\nemit OwnershipTransferred(_owner, newOwner);\r\n\r\n\r\n\r\n\r\n_owner = newOwner;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\ncontract ERC20 is Context, IERC20,Ownable {\r\n\r\n\r\n\r\n\r\nusing SafeMath for uint256;\r\n\r\n\r\n\r\n\r\nmapping (address => uint256) public Lockup;\r\n\r\n\r\n\r\n\r\nmapping (address => uint256) private _balances;\r\n\r\n\r\n\r\n\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n\r\n\r\nevent Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n\r\nevent Lockuped(address indexed target);\r\n\r\n\r\n\r\n\r\nevent DeleteFromLockup(address indexed target);\r\n\r\n\r\n\r\n\r\nevent RejectedPaymentToLockupedAddr(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n\r\nevent RejectedPaymentFromLockupedAddr(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n\r\n\r\nuint256 private _totalSupply;\r\n\r\n\r\n\r\n\r\nstring private _name;\r\n\r\n\r\n\r\n\r\nstring private _symbol;\r\n\r\n\r\n\r\n\r\nuint8 private _decimals;\r\n\r\n\r\n\r\n\r\n\r\nconstructor (string memory name, string memory symbol) public {\r\n\r\n\r\n\r\n\r\n_name = name;\r\n\r\n\r\n\r\n\r\n_symbol = symbol;\r\n\r\n\r\n\r\n\r\n_decimals = 18;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Lockuping(address _addr) onlyOwner() public{\r\n\r\n\r\n\r\n\r\nLockup[_addr] = 1;\r\n\r\n\r\n\r\n\r\nLockuped(_addr);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction deleteFromLockup(address _addr) onlyOwner() public{\r\n\r\n\r\n\r\n\r\nLockup[_addr] = 0;\r\n\r\n\r\n\r\n\r\nDeleteFromLockup(_addr);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction name() public view returns (string memory) {\r\n\r\n\r\n\r\n\r\nreturn _name;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction symbol() public view returns (string memory) {\r\n\r\n\r\n\r\n\r\nreturn _symbol;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction decimals() public view returns (uint8) {\r\n\r\n\r\n\r\n\r\nreturn _decimals;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction totalSupply() public view override returns (uint256) {\r\n\r\n\r\n\r\n\r\nreturn _totalSupply;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\n\r\n\r\n\r\n\r\nreturn _balances[account];\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\r\n\r\n\r\n\r\n_transfer(_msgSender(), recipient, amount);\r\n\r\n\r\n\r\n\r\nreturn true;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\r\n\r\n\r\n\r\nreturn _allowances[owner][spender];\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\r\n\r\n\r\n\r\n_approve(_msgSender(), spender, amount);\r\n\r\n\r\n\r\n\r\nreturn true;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n\r\n\r\n\r\n\r\n_transfer(sender, recipient, amount);\r\n\r\n\r\n\r\n\r\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\n\r\n\r\n\r\nreturn true;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\r\n\r\n\r\n\r\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n\r\n\r\n\r\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\r\n\r\n\r\nif(Lockup[sender] == 1){\r\n\r\n\r\n\r\n\r\nRejectedPaymentFromLockupedAddr(msg.sender, recipient, amount);\r\n\r\n\r\n\r\n\r\nrequire(false,\"You are Lockup\");\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nelse if(Lockup[recipient] == 1){\r\n\r\n\r\n\r\n\r\nRejectedPaymentToLockupedAddr(msg.sender, recipient, amount);\r\n\r\n\r\n\r\n\r\nrequire(false,\"recipient are Lockup\");\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nelse{\r\n\r\n\r\n\r\n\r\n_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\r\n\r\n\r\n\r\n_balances[sender] = _balances[sender].sub(amount, \"transfer amount exceeds balance\");\r\n\r\n\r\n\r\n\r\n_balances[recipient] = _balances[recipient].add(amount);\r\n\r\n\r\n\r\n\r\nemit Transfer(sender, recipient, amount);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction _mint(address account, uint256 amount) internal virtual {\r\n\r\n\r\n\r\n\r\nrequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\r\n\r\n\r\n\r\n_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\r\n\r\n\r\n_totalSupply = _totalSupply.add(amount);\r\n\r\n\r\n\r\n\r\n_balances[account] = _balances[account].add(amount);\r\n\r\n\r\n\r\n\r\nemit Transfer(address(0), account, amount);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction _burn(address account, uint256 amount) internal virtual {\r\n\r\n\r\n\r\n\r\nrequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\r\n\r\n\r\n_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\r\n\r\n\r\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n\r\n\r\n\r\n_totalSupply = _totalSupply.sub(amount);\r\n\r\n\r\n\r\n\r\nemit Transfer(account, address(0), amount);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\r\n\r\n\r\n\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n\r\n\r\n\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n_allowances[owner][spender] = amount;\r\n\r\n\r\n\r\n\r\nemit Approval(owner, spender, amount);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction _setupDecimals(uint8 decimals_) internal {\r\n\r\n\r\n\r\n\r\n_decimals = decimals_;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n\r\n\r\n\r\n\r\n\r\nfunction burn(uint256 amount) public virtual {\r\n\r\n\r\n\r\n\r\n_burn(_msgSender(), amount);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction burnFrom(address account, uint256 amount) public virtual {\r\n\r\n\r\n\r\n\r\nuint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n\r\n\r\n\r\n\r\n_approve(account, _msgSender(), decreasedAllowance);\r\n\r\n\r\n\r\n\r\n_burn(account, amount);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract WJOToken is ERC20,ERC20Burnable {\r\n\r\n\r\nconstructor(uint256 initialSupply) public ERC20(\"WOOJOO\", \"WJO\") payable {\r\n\r\n\r\npayable(0x728ea56043eE11388e71db3d455235225dDD3354).transfer(msg.value);\r\n\r\n\r\n_mint(msg.sender, initialSupply);\r\n\r\n\r\n}\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"DeleteFromLockup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Lockuped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentFromLockupedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentToLockupedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Lockup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Lockuping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"deleteFromLockup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WJOToken", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000204fce5e3e25026110000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://00ee967cb51813fef4775cc10d3c80aecdc52bf2dc2d85e6a4ad8e7d3d105716"}]}