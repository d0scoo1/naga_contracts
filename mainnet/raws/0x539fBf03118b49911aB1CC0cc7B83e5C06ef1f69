{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an FTM balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract LasmVesting is ReentrancyGuard, Ownable {\r\n    // Allocation distribution of the total supply.\r\n    uint256 private constant E18                         = 10 ** 18;\r\n\r\n    uint256 private constant LOCKED_ALLOCATION           = 160_000_000 * E18;\r\n    uint256 private constant PUBLIC_SALE_ALLOCATION      =  80_000_000 * E18;\r\n    uint256 private constant TEAM_ALLOCATION_1           = 110_000_000 * E18;\r\n    uint256 private constant TEAM_ALLOCATION_2           =  10_000_000 * E18;\r\n    uint256 private constant PARTNERS_ALLOCATION         =  40_000_000 * E18;\r\n    uint256 private constant MARKETING_ALLOCATION        =  40_000_000 * E18;\r\n    uint256 private constant DEVELOPMENT_ALLOCATION      =  80_000_000 * E18;\r\n    uint256 private constant STAKING_ALLOCATION          = 240_000_000 * E18;\r\n    uint256 private constant AIRDROP_ALLOCATION          =  40_000_000 * E18;\r\n\r\n    // vesting wallets\r\n    address private constant lockedWallet            = address(0x35eb4C5e5b240C6Ec155516385Db59327B3415B1);\r\n    address private constant managerWallet           = address(0xA22Bf614Fa7Fe2486d2bdf9B1Ace730716caFa70);\r\n    address private constant teamWallet              = address(0xb37F5a0Da2630a9474791f606048538AEc5F1ca9);\r\n    address private constant partnersWallet          = address(0x6C53d1F3323Ca6F8a0d10Ed12B1248254DCd0453);\r\n    address private constant marketingWallet         = address(0x51f68ddA6470C0aE5B7383F2af3614C582D80A0F);\r\n    address private constant developmentWallet       = address(0xEf3fE1A4B8393ac016Ef57020c28E0487e0EdbDa);\r\n    address private constant stakingRewardsWallet    = address(0x4168CAc6FB9c95d19d8cAA39BfC0418ab41564C9);\r\n    address private constant airdropWallet           = address(0xe7bB7d8be65A11b4BA7141EE6E1CD85D13ad650C);\r\n\r\n    uint256 private constant VESTING_END_AT = 4 * 365 days;  // 48 months\r\n\r\n    address public vestingToken;   // ERC20 token that get vested.\r\n\r\n    event TokenSet(address vestingToken);\r\n    event Claimed(address indexed beneficiary, uint256 amount);\r\n\r\n    struct Schedule {\r\n        // Name of the template\r\n        string templateName;\r\n\r\n        // Tokens that were already claimed\r\n        uint256 claimedTokens;\r\n\r\n        // Start time of the schedule\r\n        uint256 startTime;\r\n\r\n        // Total amount of tokens\r\n        uint256 allocation;\r\n\r\n        // Schedule duration (How long the schedule will last)\r\n        uint256 duration;\r\n\r\n        // Cliff of the schedule.\r\n        uint256 cliff;\r\n\r\n        // Linear period of the schedule.\r\n        uint256 linear;\r\n\r\n        // Last time of Claimed\r\n        uint256 lastClaimTime;\r\n    }\r\n\r\n    struct ClaimedEvent {\r\n        // Index of the schedule list\r\n        uint8 scheduleIndex;\r\n\r\n        // Tokens that were only unlocked in this event\r\n        uint256 claimedTokens;\r\n\r\n        // Tokens that were already unlocked\r\n        uint256 unlockedTokens;\r\n\r\n        // Tokens that are locked yet\r\n        uint256 lockedTokens;\r\n\r\n        // Time of the current event\r\n        uint256 eventTime;\r\n    }\r\n\r\n    Schedule[] public schedules;\r\n    ClaimedEvent[] public scheduleEvents;\r\n\r\n    mapping (address => uint8[]) public schedulesByOwner;\r\n    mapping (string => uint8) public schedulesByName;\r\n    mapping (string => address) public beneficiary;\r\n\r\n    mapping (address => uint8[]) public eventsByScheduleBeneficiary;\r\n    mapping (string => uint8[]) public eventsByScheduleName;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * @dev Allow owner to set the token address that get vested.\r\n     * @param tokenAddress Address of the BEP-20 token.\r\n     */\r\n    function setToken(address tokenAddress) external onlyOwner {\r\n        require(tokenAddress != address(0), \"Vesting: ZERO_ADDRESS_NOT_ALLOWED\");\r\n        require(vestingToken == address(0), \"Vesting: ALREADY_SET\");\r\n\r\n        vestingToken = tokenAddress;\r\n\r\n        emit TokenSet(tokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow owner to initiate the vesting schedule\r\n     */\r\n    function initVestingSchedule() public onlyOwner {\r\n        // For Locked allocation\r\n        _createSchedule(lockedWallet, Schedule({\r\n            templateName         :  \"Locked\",\r\n            claimedTokens        :  uint256(0),\r\n            startTime            :  block.timestamp,\r\n            allocation           :  LOCKED_ALLOCATION,\r\n            duration             :  93312000,     // 36 Months (36 * 30 * 24 * 60 * 60)\r\n            cliff                :  62208000,     // 24 Months (24 * 30 * 24 * 60 * 60)\r\n            linear               :  31104000,     // 12 Months (12 * 30 * 24 * 60 * 60)\r\n            lastClaimTime        :  0\r\n        }));\r\n\r\n        // For Public sale allocation\r\n        _createSchedule(managerWallet, Schedule({\r\n            templateName         :  \"PublicSale\",\r\n            claimedTokens        :  uint256(0),\r\n            startTime            :  block.timestamp,\r\n            allocation           :  PUBLIC_SALE_ALLOCATION,\r\n            duration             :  18144000,     // 7 Months (7 * 30 * 24 * 60 * 60)\r\n            cliff                :   7776000,     // 3 Months (4 * 30 * 24 * 60 * 60)\r\n            linear               :  10368000,     // 4 Months (4 * 30 * 24 * 60 * 60)\r\n            lastClaimTime        :  0\r\n        }));\r\n\r\n        // For Team allocation_1\r\n        _createSchedule(teamWallet, Schedule({\r\n            templateName         :  \"Team_1\",\r\n            claimedTokens        :  uint256(0),\r\n            startTime            :  block.timestamp,\r\n            allocation           :  TEAM_ALLOCATION_1,\r\n            duration             :  93312000,    // 36 Months (36 * 30 * 24 * 60 * 60)\r\n            cliff                :   7776000,    //  3 Months ( 3 * 30 * 24 * 60 * 60)\r\n            linear               :  85536000,    // 33 Months (33 * 30 * 24 * 60 * 60)\r\n            lastClaimTime        :  0\r\n        }));\r\n\r\n        // For Team allocation_2\r\n        _createSchedule(teamWallet, Schedule({\r\n            templateName         :  \"Team_2\",\r\n            claimedTokens        :  uint256(0),\r\n            startTime            :  block.timestamp + 93312000,     // After 36 Months of closing the Team Allocation_1\r\n            allocation           :  TEAM_ALLOCATION_2,\r\n            duration             :  31104000,    // 12 Months (12 * 30 * 24 * 60 * 60)\r\n            cliff                :  0,\r\n            linear               :  31104000,    // 12 Months (12 * 30 * 24 * 60 * 60)\r\n            lastClaimTime        :  0\r\n        }));\r\n\r\n        // For Partners & Advisors allocation\r\n        _createSchedule(partnersWallet, Schedule({\r\n            templateName         :  \"Partners\",\r\n            claimedTokens        :  uint256(0),\r\n            startTime            :  block.timestamp,\r\n            allocation           :  PARTNERS_ALLOCATION,\r\n            duration             :  62208000,     // 24 Months (24 * 30 * 24 * 60 * 60)\r\n            cliff                :  31104000,     // 12 Months (12 * 30 * 24 * 60 * 60)\r\n            linear               :  31104000,     // 12 Months (12 * 30 * 24 * 60 * 60)\r\n            lastClaimTime        :  0\r\n        }));\r\n\r\n        // For Marketing allocation\r\n        _createSchedule(marketingWallet, Schedule({\r\n            templateName         :  \"Marketing\",\r\n            claimedTokens        :  uint256(0),\r\n            startTime            :  block.timestamp,\r\n            allocation           :  MARKETING_ALLOCATION,\r\n            duration             :  0,            // 0 Months\r\n            cliff                :  0,            // 0 Months\r\n            linear               :  0,            // 0 Months\r\n            lastClaimTime        :  0\r\n        }));\r\n\r\n        // For Development allocation\r\n        _createSchedule(developmentWallet, Schedule({\r\n            templateName         :  \"Development\",\r\n            claimedTokens        :  uint256(0),\r\n            startTime            :  block.timestamp,\r\n            allocation           :  DEVELOPMENT_ALLOCATION,\r\n            duration             :  0,            // 0 Month\r\n            cliff                :  0,            // 0 Month\r\n            linear               :  0,            // 0 Month\r\n            lastClaimTime        :  0\r\n        }));\r\n\r\n        // For P2E & Staking rewards allocation\r\n        _createSchedule(stakingRewardsWallet, Schedule({\r\n            templateName         :  \"Staking\",\r\n            claimedTokens        :  uint256(0),\r\n            startTime            :  block.timestamp,\r\n            allocation           :  STAKING_ALLOCATION,\r\n            duration             :  85536000,     // 33 Months (33 * 30 * 24 * 60 * 60)\r\n            cliff                :   7776000,     //  3 Months ( 3 * 30 * 24 * 60 * 60)\r\n            linear               :  77760000,     // 30 Months (30 * 30 * 24 * 60 * 60)\r\n            lastClaimTime        :  0\r\n        }));\r\n\r\n        // For Airdrop allocation\r\n        _createSchedule(airdropWallet, Schedule({\r\n            templateName         :  \"Airdrop\",\r\n            claimedTokens        :  uint256(0),\r\n            startTime            :  block.timestamp,\r\n            allocation           :  AIRDROP_ALLOCATION,\r\n            duration             :  0,            // 0 Month\r\n            cliff                :  0,            // 0 Month\r\n            linear               :  0,            // 0 Month\r\n            lastClaimTime        :  0\r\n        }));\r\n    }\r\n\r\n    function _createSchedule(address _beneficiary, Schedule memory _schedule) internal {\r\n        schedules.push(_schedule);\r\n\r\n        uint8 index = uint8(schedules.length) - 1;\r\n\r\n        schedulesByOwner[_beneficiary].push(index);\r\n        schedulesByName[_schedule.templateName] = index;\r\n        beneficiary[_schedule.templateName] = _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Check the amount of claimable token of the beneficiary.\r\n     */\r\n    function pendingTokensByScheduleBeneficiary(address _account) public view returns (uint256) {\r\n        uint8[] memory _indexs = schedulesByOwner[_account];\r\n        require(_indexs.length != uint256(0), \"Vesting: NOT_AUTORIZE\");\r\n\r\n        uint256 amount = 0;\r\n        for (uint8 i = 0; i < _indexs.length; i++) {\r\n            string memory _templateName = schedules[_indexs[i]].templateName;\r\n            amount += pendingTokensByScheduleName(_templateName);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Check the amount of claimable token of the schedule.\r\n     */\r\n    function pendingTokensByScheduleName(string memory _templateName) public view returns (uint256) {\r\n        uint8 index = schedulesByName[_templateName];\r\n        require(index >= 0 && index < schedules.length, \"Vesting: NOT_SCHEDULE\");\r\n\r\n        Schedule memory schedule = schedules[index];\r\n        uint256 vestedAmount = 0;\r\n        if (\r\n            schedule.startTime + schedule.cliff >= block.timestamp \r\n            || schedule.claimedTokens == schedule.allocation) {\r\n            return 0;\r\n        }\r\n\r\n        if (schedule.duration == 0 && schedule.startTime <= block.timestamp) {\r\n            vestedAmount = schedule.allocation;\r\n        }\r\n        else if (schedule.startTime + schedule.duration <= block.timestamp) {\r\n            vestedAmount = schedule.allocation;\r\n        } \r\n        else {\r\n            if (block.timestamp > schedule.startTime + schedule.cliff && schedule.linear > 0) {\r\n                uint256 timePeriod            = block.timestamp - schedule.startTime - schedule.cliff;\r\n                uint256 unitPeriodAllocation  = schedule.allocation / schedule.linear;\r\n\r\n                vestedAmount = timePeriod * unitPeriodAllocation;\r\n            }\r\n            else \r\n                return 0;\r\n        }\r\n\r\n        return vestedAmount - schedule.claimedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow the respective addresses claim the vested tokens.\r\n     */\r\n    function claimByScheduleBeneficiary() external nonReentrant {\r\n        require(vestingToken != address(0), \"Vesting: VESTINGTOKEN_NO__SET\");\r\n\r\n        uint8[] memory _indexs = schedulesByOwner[msg.sender];\r\n        require(_indexs.length != uint256(0), \"Vesting: NOT_AUTORIZE\");\r\n\r\n        uint256 amount = 0;\r\n        uint8 index;\r\n        for (uint8 i = 0; i < _indexs.length; i++) {\r\n            index = _indexs[i];\r\n\r\n            string memory _templateName = schedules[index].templateName;\r\n            uint256 claimAmount = pendingTokensByScheduleName(_templateName);\r\n\r\n            if (claimAmount == 0)\r\n                continue;\r\n\r\n            schedules[index].claimedTokens += claimAmount;\r\n            schedules[index].lastClaimTime = block.timestamp;\r\n            amount += claimAmount;\r\n\r\n            registerEvent(msg.sender, index, claimAmount);\r\n        }\r\n\r\n        require(amount > uint256(0), \"Vesting: NO_VESTED_TOKENS\");\r\n\r\n        SafeERC20.safeTransfer(IERC20(vestingToken), msg.sender, amount);\r\n\r\n        emit Claimed(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow the respective addresses claim the vested tokens of the schedule.\r\n     */\r\n    function claimByScheduleName(string memory _templateName) external nonReentrant {\r\n        require(vestingToken != address(0), \"Vesting: VESTINGTOKEN_NO__SET\");\r\n\r\n        uint8 index = schedulesByName[_templateName];\r\n        require(index >= 0 && index < schedules.length, \"Vesting: NOT_SCHEDULE\");\r\n        require(beneficiary[_templateName] == msg.sender, \"Vesting: NOT_AUTORIZE\");\r\n\r\n        uint256 claimAmount = pendingTokensByScheduleName(_templateName);\r\n\r\n        require(claimAmount > uint256(0), \"Vesting: NO_VESTED_TOKENS\");\r\n\r\n        schedules[index].claimedTokens += claimAmount;\r\n        schedules[index].lastClaimTime = block.timestamp;\r\n\r\n        SafeERC20.safeTransfer(IERC20(vestingToken), msg.sender, claimAmount);\r\n\r\n        registerEvent(msg.sender, index, claimAmount);\r\n\r\n        emit Claimed(beneficiary[_templateName], claimAmount);\r\n    }\r\n\r\n    function registerEvent(address _account, uint8 _scheduleIndex, uint256 _claimedTokens) internal {\r\n        Schedule memory schedule = schedules[_scheduleIndex];\r\n\r\n        scheduleEvents.push(ClaimedEvent({\r\n            scheduleIndex: _scheduleIndex,\r\n            claimedTokens: _claimedTokens,\r\n            unlockedTokens: schedule.claimedTokens,\r\n            lockedTokens: schedule.allocation - schedule.claimedTokens,\r\n            eventTime: schedule.lastClaimTime\r\n        }));\r\n\r\n        eventsByScheduleBeneficiary[_account].push(uint8(scheduleEvents.length) - 1);\r\n        eventsByScheduleName[schedule.templateName].push(uint8(scheduleEvents.length) - 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow owner to withdraw the token from the contract.\r\n     * @param tokenAddress Address of the BEP-20 token.\r\n     * @param amount       Amount of token that get skimmed out of the contract.\r\n     * @param destination  Whom token amount get transferred to.\r\n     */\r\n    function withdraw(address tokenAddress, uint256 amount, address destination) external onlyOwner {\r\n        require(vestingToken != address(0), \"Vesting: VESTINGTOKEN_NO__SET\");\r\n        require(block.timestamp > VESTING_END_AT, \"Vesting: NOT_ALLOWED\");\r\n        require(destination != address(0),        \"Vesting: ZERO_ADDRESS_NOT_ALLOWED\");\r\n        require(amount <= IERC20(tokenAddress).balanceOf(address(this)), \"Insufficient balance\");\r\n\r\n        SafeERC20.safeTransfer(IERC20(tokenAddress), destination, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vestingToken\",\"type\":\"address\"}],\"name\":\"TokenSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimByScheduleBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_templateName\",\"type\":\"string\"}],\"name\":\"claimByScheduleName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventsByScheduleBeneficiary\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventsByScheduleName\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingTokensByScheduleBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_templateName\",\"type\":\"string\"}],\"name\":\"pendingTokensByScheduleName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scheduleEvents\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"scheduleIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schedules\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"templateName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"linear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"schedulesByName\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schedulesByOwner\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LasmVesting", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f7bd3f144bd713f3ec584119a23bc66a90f514edd437d04d4d36f176222a5823"}]}