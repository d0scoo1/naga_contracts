{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract PersonaTokenBase is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances_;\r\n    mapping(address => mapping(address => uint256)) public allowed_;\r\n\r\n    uint256 public totalSupply_;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances_[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed_[_owner][_spender];\r\n    }\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool) {\r\n        require(_value <= balances_[_from]);\r\n        require(_to != address(0));\r\n\r\n        balances_[_from] = balances_[_from].sub(_value);\r\n        balances_[_to] = balances_[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed_[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool) {\r\n        require(_value <= balances_[_from]);\r\n        require(_value <= allowed_[_from][msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances_[_from] = balances_[_from].sub(_value);\r\n        balances_[_to] = balances_[_to].add(_value);\r\n        allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool) {\r\n        return _transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        allowed_[msg.sender][_spender] = allowed_[msg.sender][_spender].add(\r\n            _addedValue\r\n        );\r\n        emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed_[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed_[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address _account, uint256 _amount) internal {\r\n        require(_account != 0);\r\n        require(_amount <= balances_[_account]);\r\n\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n        balances_[_account] = balances_[_account].sub(_amount);\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) public {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n}\r\n\r\ncontract PersonaToken is PersonaTokenBase, Ownable {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals = 18;\r\n    struct lockInfo {\r\n        uint256 lockQuantity;\r\n        uint256 lockPeriod;\r\n    }\r\n    mapping(address => lockInfo[]) public tokenLockInfo;\r\n    mapping(address => uint256) public unlockQuantity;\r\n    mapping(address => bool) public lockStatus;\r\n    mapping(address => bool) private FreezedWallet;\r\n\r\n    function PersonaToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint256 decimalsToken,\r\n        string tokenSymbol\r\n    ) public {\r\n        decimals = decimalsToken;\r\n        totalSupply_ = initialSupply * 10**uint256(decimals);\r\n        emit Transfer(0, msg.sender, totalSupply_);\r\n        balances_[msg.sender] = totalSupply_;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        unlockQuantity[msg.sender] = balances_[msg.sender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        bool transferResult;\r\n        uint256 lockQuantity;\r\n        uint256 lockTotalQuantity;\r\n        uint256 lockPeriod;\r\n\r\n        require(FreezedWallet[msg.sender] == false);\r\n        require(FreezedWallet[_to] == false);\r\n\r\n        if (lockStatus[msg.sender] == false) {\r\n            transferResult = _transfer(msg.sender, _to, _value);\r\n            if (transferResult == true) {\r\n                unlockQuantity[msg.sender] = unlockQuantity[msg.sender].sub(\r\n                    _value\r\n                );\r\n                unlockQuantity[_to] = unlockQuantity[_to].add(_value);\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < tokenLockInfo[msg.sender].length; i++) {\r\n                lockQuantity = tokenLockInfo[msg.sender][i].lockQuantity;\r\n                lockPeriod = tokenLockInfo[msg.sender][i].lockPeriod;\r\n\r\n                if (lockPeriod <= now && lockQuantity != 0) {\r\n                    unlockQuantity[msg.sender] = unlockQuantity[msg.sender].add(\r\n                        lockQuantity\r\n                    );\r\n                    tokenLockInfo[msg.sender][i].lockQuantity = 0;\r\n                    lockQuantity = tokenLockInfo[msg.sender][i].lockQuantity;\r\n                }\r\n                lockTotalQuantity = lockTotalQuantity.add(lockQuantity);\r\n            }\r\n            if (lockTotalQuantity == 0) lockStatus[msg.sender] = false;\r\n\r\n            require(_value <= unlockQuantity[msg.sender]);\r\n\r\n            transferResult = _transfer(msg.sender, _to, _value);\r\n            if (transferResult == true) {\r\n                unlockQuantity[msg.sender] = unlockQuantity[msg.sender].sub(\r\n                    _value\r\n                );\r\n                unlockQuantity[_to] = unlockQuantity[_to].add(_value);\r\n            }\r\n        }\r\n\r\n        return transferResult;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool) {\r\n        bool transferResult;\r\n        uint256 lockQuantity;\r\n        uint256 lockTotalQuantity;\r\n        uint256 lockPeriod;\r\n\r\n        require(FreezedWallet[_from] == false);\r\n        require(FreezedWallet[_to] == false);\r\n\r\n        if (lockStatus[_from] == false) {\r\n            transferResult = _transferFrom(_from, _to, _value);\r\n            if (transferResult == true) {\r\n                unlockQuantity[_from] = unlockQuantity[_from].sub(_value);\r\n                unlockQuantity[_to] = unlockQuantity[_to].add(_value);\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < tokenLockInfo[_from].length; i++) {\r\n                lockQuantity = tokenLockInfo[_from][i].lockQuantity;\r\n                lockPeriod = tokenLockInfo[_from][i].lockPeriod;\r\n\r\n                if (lockPeriod <= now && lockQuantity != 0) {\r\n                    unlockQuantity[_from] = unlockQuantity[_from].add(\r\n                        lockQuantity\r\n                    );\r\n                    tokenLockInfo[_from][i].lockQuantity = 0;\r\n                    lockQuantity = tokenLockInfo[_from][i].lockQuantity;\r\n                }\r\n                lockTotalQuantity = lockTotalQuantity.add(lockQuantity);\r\n            }\r\n            if (lockTotalQuantity == 0) lockStatus[_from] = false;\r\n\r\n            require(_value <= unlockQuantity[_from]);\r\n\r\n            transferResult = _transferFrom(_from, _to, _value);\r\n            if (transferResult == true) {\r\n                unlockQuantity[_from] = unlockQuantity[_from].sub(_value);\r\n                unlockQuantity[_to] = unlockQuantity[_to].add(_value);\r\n            }\r\n        }\r\n\r\n        return transferResult;\r\n    }\r\n\r\n    function transferAndLock(\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _lockPeriod\r\n    ) public onlyOwner {\r\n        bool transferResult;\r\n\r\n        require(FreezedWallet[_to] == false);\r\n\r\n        transferResult = _transfer(msg.sender, _to, _value);\r\n        if (transferResult == true) {\r\n            lockStatus[_to] = true;\r\n            tokenLockInfo[_to].push(\r\n                lockInfo(_value, now + _lockPeriod * 1 days)\r\n            );\r\n            unlockQuantity[msg.sender] = unlockQuantity[msg.sender].sub(_value);\r\n        }\r\n    }\r\n\r\n    function changeLockPeriod(\r\n        address _owner,\r\n        uint256 _index,\r\n        uint256 _newLockPeriod\r\n    ) public onlyOwner {\r\n        require(_index < tokenLockInfo[_owner].length);\r\n\r\n        tokenLockInfo[_owner][_index].lockPeriod =\r\n            now +\r\n            _newLockPeriod *\r\n            1 days;\r\n    }\r\n\r\n    function freezingWallet(address _owner) public onlyOwner {\r\n        FreezedWallet[_owner] = true;\r\n    }\r\n\r\n    function unfreezingWallet(address _owner) public onlyOwner {\r\n        FreezedWallet[_owner] = false;\r\n    }\r\n\r\n    function burn(uint256 _amount) public onlyOwner {\r\n        _burn(msg.sender, _amount);\r\n        unlockQuantity[msg.sender] = unlockQuantity[msg.sender].sub(_amount);\r\n    }\r\n\r\n    function getNowTime() public view returns (uint256 res) {\r\n        return now;\r\n    }\r\n\r\n    function getLockInfo(address _owner, uint256 _index)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (\r\n            tokenLockInfo[_owner][_index].lockQuantity,\r\n            tokenLockInfo[_owner][_index].lockPeriod\r\n        );\r\n    }\r\n\r\n    function getUnlockQuantity(address _owner)\r\n        public\r\n        view\r\n        returns (uint256 res)\r\n    {\r\n        return unlockQuantity[_owner];\r\n    }\r\n\r\n    function getLockStatus(address _owner) public view returns (bool res) {\r\n        return lockStatus[_owner];\r\n    }\r\n\r\n    function getLockCount(address _owner) public view returns (uint256 res) {\r\n        return tokenLockInfo[_owner].length;\r\n    }\r\n\r\n    function getFreezingInfo(address _owner) public view returns (bool res) {\r\n        return FreezedWallet[_owner];\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLockStatus\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLockCount\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unfreezingWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getFreezingInfo\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNowTime\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getUnlockQuantity\",\"outputs\":[{\"name\":\"res\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_newLockPeriod\",\"type\":\"uint256\"}],\"name\":\"changeLockPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezingWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockQuantity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockInfo\",\"outputs\":[{\"name\":\"lockQuantity\",\"type\":\"uint256\"},{\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalsToken\",\"type\":\"uint256\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "PersonaToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000007504552534f4e4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000350534e0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f7f3c55a9f1727734928f51043b892a9aa1e95fba4050b24ca96557089c9224c"}]}