{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract FeeTokenLpStaking is Ownable { \r\n    IERC20 public immutable FeeToken;\r\n    IERC20 public immutable FeeTokenLpPair;\r\n    uint256 public totalStakedAmount;\r\n    uint256 public rewardsPool;\r\n    uint256 public rewardsPerBlock;\r\n\r\n    mapping(address /* Account */ => Stake /* Stake details */) public stakes;\r\n\r\n    event STAKE(address indexed account, uint256 indexed amount);\r\n    event UNSTAKE(address indexed account, uint256 indexed amount);\r\n    event REWARDS_CLAIMED(address indexed account, uint256 indexed rewards);\r\n    event REWARDS_POOL(address indexed account, uint256 amount);\r\n    event REWARDS_PER_BLOCK(uint256 oldRewardsPerBlock, uint256 newRewardsPerBlock);\r\n\r\n\r\n    struct Stake {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 rewardsBlockNumber;\r\n        uint256 totalClaimedRewards;\r\n    }\r\n\r\n    constructor(IERC20 _feeToken, IERC20 _feeTokenLpAddress) {\r\n        FeeToken = _feeToken;\r\n        FeeTokenLpPair = _feeTokenLpAddress;\r\n        rewardsPerBlock = 10 ether;\r\n    }\r\n\r\n    function deposit(uint256 _amount) external {\r\n        FeeToken.transferFrom(_msgSender(), address(this), _amount);\r\n        rewardsPool += _amount;\r\n        emit REWARDS_POOL(_msgSender(), _amount);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external onlyOwner {\r\n        require(_amount <= rewardsPool, \"FeeTokenStaking: amount exceed rewardsPool\");\r\n        rewardsPool -= _amount;\r\n        FeeToken.transfer(_msgSender(), _amount);\r\n    }\r\n\r\n    function updateRewardsPerBlock(uint256 _rewardsPerBlock) external onlyOwner {\r\n        emit REWARDS_PER_BLOCK(rewardsPerBlock, _rewardsPerBlock);\r\n        rewardsPerBlock = _rewardsPerBlock;\r\n    }\r\n\r\n    function stake(uint256 _amount) external {\r\n        require(_amount > 0, \"FeeTokenStaking: Amount must be greater than zero\");\r\n\r\n        FeeTokenLpPair.transferFrom(_msgSender(), address(this), _amount);\r\n        totalStakedAmount += _amount;\r\n\r\n        stakes[_msgSender()] = Stake(\r\n            _msgSender(),\r\n            stakes[_msgSender()].amount + _amount,\r\n            block.number,\r\n            stakes[_msgSender()].totalClaimedRewards\r\n        );\r\n\r\n        emit STAKE(_msgSender(), _amount);\r\n    }\r\n\r\n    function unstake() external {\r\n        uint256 _amount = stakes[_msgSender()].amount;\r\n        require(_amount > 0, \"FeeTokenStaking: No active stakes found\");\r\n        _claimRewards(); // claim stake rewards\r\n        _unstake(_amount);\r\n    }\r\n\r\n    function emergencyUnStake() external {\r\n        uint256 _amount = stakes[_msgSender()].amount;\r\n        require(_amount > 0, \"FeeTokenStaking: No active stakes found\");\r\n        _unstake(_amount);\r\n    }\r\n\r\n    function _unstake(uint256 _amount) private {\r\n        Stake storage _stake = stakes[_msgSender()];\r\n\r\n        totalStakedAmount -= _amount;\r\n        _stake.amount -= _amount;\r\n        FeeTokenLpPair.transfer(_msgSender(), _amount);\r\n        emit UNSTAKE(_msgSender(), _amount);\r\n    }\r\n\r\n    function claimRewards() external {\r\n        require(stakes[_msgSender()].amount > 0, \"FeeTokenStaking: No active stakes found\");\r\n        _claimRewards();\r\n    }\r\n\r\n\r\n    function pendingRewards(address _account) public view returns(uint256 _rewardsAmount) {\r\n        uint256 _stakedBalance = stakes[_account].amount;\r\n        if(_stakedBalance <= 0) return 0;\r\n\r\n        uint256 _startRewardsBlock = stakes[_account].rewardsBlockNumber;\r\n        uint256 _currentBlock = block.number;\r\n        uint256 _totalStakedBlock = _currentBlock - _startRewardsBlock;\r\n        uint256 _stakePercentage = (_stakedBalance * 100) / totalStakedAmount;\r\n        uint256 _rewardsPerBlock = (rewardsPerBlock * _stakePercentage) / 100;\r\n        _rewardsAmount = _totalStakedBlock * _rewardsPerBlock;\r\n    }\r\n\r\n    function _claimRewards() private {\r\n        uint256 _rewardsAmount = pendingRewards(_msgSender());\r\n\r\n        stakes[_msgSender()].rewardsBlockNumber = block.number; // update rewardsBlockNumber\r\n        stakes[_msgSender()].totalClaimedRewards += _rewardsAmount;\r\n\r\n        rewardsPool -= _rewardsAmount;\r\n        FeeToken.transfer(_msgSender(), _rewardsAmount);\r\n        emit REWARDS_CLAIMED(_msgSender(), _rewardsAmount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_feeTokenLpAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"REWARDS_CLAIMED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRewardsPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardsPerBlock\",\"type\":\"uint256\"}],\"name\":\"REWARDS_PER_BLOCK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"REWARDS_POOL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UNSTAKE\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FeeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeTokenLpPair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FeeTokenLpStaking", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000985572429deb3acc47e019af6b3da4620175e5530000000000000000000000000af6323853734511c4c3e98ae152bd0167175604", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://77e27902ab4179022f2c066581058fd21c6f1a7256c3457e307e3d4af9048509"}]}