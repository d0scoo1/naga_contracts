{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: Jebus_file.sol\r\n\r\n\r\n\r\n/*\r\n\r\nJEBUS\r\n\r\n    \r\n\r\n1% tax is collected for dev fees\r\n\r\n\r\n\r\n                                                 \r\n\r\n\r\n\r\n*/\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n// Import SafeMath library\r\n\r\n\r\n\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n\r\n        return payable(msg.sender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    \r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    address private _previousOwner;\r\n\r\n    uint256 private _lockTime;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    constructor () {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }   \r\n\r\n    \r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n\r\n        return _lockTime;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function getTime() public view returns (uint256) {\r\n\r\n        return block.timestamp;\r\n\r\n    }\r\n\r\n\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n\r\n        _previousOwner = _owner;\r\n\r\n        _owner = address(0);\r\n\r\n        _lockTime = block.timestamp + time;\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n    }\r\n\r\n    \r\n\r\n    function unlock() public virtual {\r\n\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n\r\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n\r\n        _owner = _previousOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    \r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\r\n    event Swap(\r\n\r\n        address indexed sender,\r\n\r\n        uint amount0In,\r\n\r\n        uint amount1In,\r\n\r\n        uint amount0Out,\r\n\r\n        uint amount1Out,\r\n\r\n        address indexed to\r\n\r\n    );\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n\r\n\r\n    function addLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint amountADesired,\r\n\r\n        uint amountBDesired,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n\r\n        uint amountOut,\r\n\r\n        uint amountInMax,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n\r\ncontract JEBUS is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //using Address for address;\r\n\r\n    \r\n\r\n    address payable public marketingAddress = payable(0xb7A7BB1AedB54Dd327a7a838a4E7B66c41105b87); // dev Address\r\n\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n\r\n    address[] private _excluded;\r\n\r\n   \r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _tTotal = 1000 * 10**6 * 10**9;\r\n\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 private _tFeeTotal;\r\n\r\n\r\n\r\n    string private _name = \"JEBUS\";\r\n\r\n    string private _symbol = \"JEBUS\";\r\n\r\n    uint8 private _decimals = 9;\r\n\r\n\r\n\r\n\r\n\r\n    uint256 public _taxFee = 0;\r\n\r\n    uint256 private _previousTaxFee = _taxFee;\r\n\r\n    \r\n\r\n    uint256 public _liquidityFee = 1;\r\n\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n    \r\n\r\n    uint256 public marketingDivisor = 1;\r\n\r\n    \r\n\r\n    uint256 public _maxTxAmount = 30 * 10**6 * 10**9;\r\n\r\n    uint256 private minimumTokensBeforeSwap = 20000 * 10**6 * 10**9; \r\n\r\n    uint256 private buyBackUpperLimit = 1 * 10**17;\r\n\r\n\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n\r\n    address public immutable uniswapV2Pair;\r\n\r\n    \r\n\r\n    bool inSwapAndLiquify;\r\n\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    bool public buyBackEnabled = true;\r\n\r\n\r\n\r\n    \r\n\r\n    event RewardLiquidityProviders(uint256 tokenAmount);\r\n\r\n    event BuyBackEnabledUpdated(bool enabled);\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\r\n    event SwapAndLiquify(\r\n\r\n        uint256 tokensSwapped,\r\n\r\n        uint256 ethReceived,\r\n\r\n        uint256 tokensIntoLiqudity\r\n\r\n    );\r\n\r\n    \r\n\r\n    event SwapETHForTokens(\r\n\r\n        uint256 amountIn,\r\n\r\n        address[] path\r\n\r\n    );\r\n\r\n    \r\n\r\n    event SwapTokensForETH(\r\n\r\n        uint256 amountIn,\r\n\r\n        address[] path\r\n\r\n    );\r\n\r\n    \r\n\r\n    modifier lockTheSwap {\r\n\r\n        inSwapAndLiquify = true;\r\n\r\n        _;\r\n\r\n        inSwapAndLiquify = false;\r\n\r\n    }\r\n\r\n    \r\n\r\n    constructor () {\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        \r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n\r\n\r\n        \r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        \r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n\r\n    }\r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n\r\n        return _tTotal;\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n\r\n        return tokenFromReflection(_rOwned[account]);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n\r\n        return _isExcluded[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalFees() public view returns (uint256) {\r\n\r\n        return _tFeeTotal;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\r\n\r\n        return minimumTokensBeforeSwap;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function buyBackUpperLimitAmount() public view returns (uint256) {\r\n\r\n        return buyBackUpperLimit;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function deliver(uint256 tAmount) public {\r\n\r\n        address sender = _msgSender();\r\n\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n\r\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _rTotal = _rTotal.sub(rAmount);\r\n\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n\r\n    }\r\n\r\n  \r\n\r\n\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n\r\n        if (!deductTransferFee) {\r\n\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n\r\n            return rAmount;\r\n\r\n        } else {\r\n\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n\r\n            return rTransferAmount;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n\r\n        uint256 currentRate =  _getRate();\r\n\r\n        return rAmount.div(currentRate);\r\n\r\n    }\r\n\r\n\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n\r\n\r\n\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n\r\n        if(_rOwned[account] > 0) {\r\n\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n\r\n        }\r\n\r\n        _isExcluded[account] = true;\r\n\r\n        _excluded.push(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n\r\n            if (_excluded[i] == account) {\r\n\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n\r\n                _tOwned[account] = 0;\r\n\r\n                _isExcluded[account] = false;\r\n\r\n                _excluded.pop();\r\n\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n\t\t\t\t\r\n\r\n        if(from != owner() && to != owner()) {\r\n\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n\r\n        \r\n\r\n        if (!inSwapAndLiquify && swapAndLiquifyEnabled && to == uniswapV2Pair) {\r\n\r\n            if (overMinimumTokenBalance) {\r\n\r\n                contractTokenBalance = minimumTokensBeforeSwap;\r\n\r\n                swapTokens(contractTokenBalance);    \r\n\r\n            }\r\n\r\n\t        uint256 balance = address(this).balance;\r\n\r\n            if (buyBackEnabled && balance > uint256(1 * 10**17)) {\r\n\r\n                \r\n\r\n                if (balance > buyBackUpperLimit)\r\n\r\n                    balance = buyBackUpperLimit;\r\n\r\n                \r\n\r\n\t\t\t\t//buyBackTokens(balance.div(100));\r\n\r\n\t\t\t\t\r\n\r\n\t\t\t\t//Send to Marketing address\r\n\r\n\t\t\t\ttransferToAddressETH(marketingAddress, balance.div(100));       \r\n\r\n            }\r\n\r\n        }\r\n\r\n        \r\n\r\n        bool takeFee = true;\r\n\r\n        \r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n\r\n            takeFee = false;\r\n\r\n        }\r\n\r\n        \r\n\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\r\n\r\n       \r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(contractTokenBalance);\r\n\r\n        uint256 transferredBalance = address(this).balance.sub(initialBalance);\r\n\r\n\r\n\r\n        //Send to Marketing address\r\n\r\n        transferToAddressETH(marketingAddress, transferredBalance.div(_liquidityFee).mul(marketingDivisor));\r\n\r\n        \r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    function buyBackTokens(uint256 amount) private lockTheSwap {\r\n\r\n    \tif (amount > 0) {\r\n\r\n    \t    swapETHForTokens(amount);\r\n\r\n\t    }\r\n\r\n    }\r\n\r\n    \r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n\r\n        // make the swap\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            tokenAmount,\r\n\r\n            0, // accept any amount of ETH\r\n\r\n            path,\r\n\r\n            address(this), // The contract\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n        \r\n\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function swapETHForTokens(uint256 amount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = uniswapV2Router.WETH();\r\n\r\n        path[1] = address(this);\r\n\r\n\r\n\r\n      // make the swap\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n\r\n            0, // accept any amount of Tokens\r\n\r\n            path,\r\n\r\n            deadAddress, // Burn address\r\n\r\n            block.timestamp.add(300)\r\n\r\n        );\r\n\r\n        \r\n\r\n        emit SwapETHForTokens(amount, path);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n\r\n        // add the liquidity\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\r\n            address(this),\r\n\r\n            tokenAmount,\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            owner(),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n\r\n        if(!takeFee)\r\n\r\n            removeAllFee();\r\n\r\n        \r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\r\n            _transferFromExcluded(sender, recipient, amount);\r\n\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n\r\n            _transferToExcluded(sender, recipient, amount);\r\n\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n\r\n            _transferBothExcluded(sender, recipient, amount);\r\n\r\n        } else {\r\n\r\n            _transferStandard(sender, recipient, amount);\r\n\r\n        }\r\n\r\n        \r\n\r\n        if(!takeFee)\r\n\r\n            restoreAllFee();\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n        _takeLiquidity(tLiquidity);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\r\n\t    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n\r\n        _takeLiquidity(tLiquidity);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\r\n    \t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n\r\n        _takeLiquidity(tLiquidity);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\r\n    \t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n\r\n        _takeLiquidity(tLiquidity);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\r\n        _rTotal = _rTotal.sub(rFee);\r\n\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n        uint256 rFee = tFee.mul(currentRate);\r\n\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n\r\n        return (rAmount, rTransferAmount, rFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getRate() private view returns(uint256) {\r\n\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\r\n        return rSupply.div(tSupply);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n\r\n        uint256 rSupply = _rTotal;\r\n\r\n        uint256 tSupply = _tTotal;      \r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n\r\n        }\r\n\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n\r\n        uint256 currentRate =  _getRate();\r\n\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n\r\n        if(_isExcluded[address(this)])\r\n\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n\r\n        return _amount.mul(_taxFee).div(\r\n\r\n            10**2\r\n\r\n        );\r\n\r\n    }\r\n\r\n    \r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n\r\n        return _amount.mul(_liquidityFee).div(\r\n\r\n            10**2\r\n\r\n        );\r\n\r\n    }\r\n\r\n    \r\n\r\n    function removeAllFee() private {\r\n\r\n        if(_taxFee == 0 && _liquidityFee == 0) return;\r\n\r\n        \r\n\r\n        _previousTaxFee = _taxFee;\r\n\r\n        _previousLiquidityFee = _liquidityFee;\r\n\r\n        \r\n\r\n        _taxFee = 0;\r\n\r\n        _liquidityFee = 0;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function restoreAllFee() private {\r\n\r\n        _taxFee = _previousTaxFee;\r\n\r\n        _liquidityFee = _previousLiquidityFee;\r\n\r\n    }\r\n\r\n\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n\r\n        return _isExcludedFromFee[account];\r\n\r\n    }\r\n\r\n    \r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n\r\n        _isExcludedFromFee[account] = true;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n\r\n        _isExcludedFromFee[account] = false;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n\r\n        _taxFee = taxFee;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n\r\n        _liquidityFee = liquidityFee;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n\r\n        _maxTxAmount = maxTxAmount;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setMarketingDivisor(uint256 divisor) external onlyOwner() {\r\n\r\n        marketingDivisor = divisor;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 _minimumTokensBeforeSwap) external onlyOwner() {\r\n\r\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\r\n\r\n    }\r\n\r\n    \r\n\r\n     function setBuybackUpperLimit(uint256 buyBackLimit) external onlyOwner() {\r\n\r\n        buyBackUpperLimit = buyBackLimit * 10**17;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setMarketingAddress(address _marketingAddress) external onlyOwner() {\r\n\r\n        marketingAddress = payable(_marketingAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n\r\n        swapAndLiquifyEnabled = _enabled;\r\n\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setBuyBackEnabled(bool _enabled) public onlyOwner {\r\n\r\n        buyBackEnabled = _enabled;\r\n\r\n        emit BuyBackEnabledUpdated(_enabled);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function prepareForPreSale() external onlyOwner {\r\n\r\n        setSwapAndLiquifyEnabled(false);\r\n\r\n        _taxFee = 0;\r\n\r\n        _liquidityFee = 0;\r\n\r\n        _maxTxAmount = 1000000000 * 10**6 * 10**9;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function afterPreSale() external onlyOwner {\r\n\r\n        setSwapAndLiquifyEnabled(true);\r\n\r\n        _taxFee = 0;\r\n\r\n        _liquidityFee = 1;\r\n\r\n        _maxTxAmount = 30 * 10**6 * 10**9;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n\r\n        recipient.transfer(amount);\r\n\r\n    }\r\n\r\n    \r\n\r\n     //to recieve ETH from uniswapV2Router when swaping\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BuyBackEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"RewardLiquidityProviders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackUpperLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareForPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBuyBackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackLimit\",\"type\":\"uint256\"}],\"name\":\"setBuybackUpperLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMarketingDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JEBUS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fe380180148e096c40913f16c618c5a8f9e263788fe04a6e6010445e66881686"}]}