{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n// ----------------------------------------------------------------------------\r\n// ArtWorks Sale contract for theArtClub.io\r\n// (c) by Mario Brandinu, Santa Cruz - Espa\u00f1a.\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n//0xe0d189176c68f2fc55be8fef32e9883b287f739a\r\n//nft sale 0xeaf6cd9141e9d5a91ffe7bb8b118738c69eb48b5\r\ncontract Ownable\r\n{\r\n\r\n  /**\r\n   * @dev Error constants.\r\n   */\r\n  string public constant NOT_CURRENT_OWNER = \"018001\";\r\n  string public constant CANNOT_TRANSFER_TO_ZERO_ADDRESS = \"018002\";\r\n\r\n  /**\r\n   * @dev Current owner address.\r\n   */\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev An event which is triggered when the owner is changed.\r\n   * @param previousOwner The address of the previous owner.\r\n   * @param newOwner The address of the new owner.\r\n   */\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor()\r\n  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner()\r\n  {\r\n    require(msg.sender == owner, NOT_CURRENT_OWNER);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(\r\n    address _newOwner\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_newOwner != address(0), CANNOT_TRANSFER_TO_ZERO_ADDRESS);\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n}\r\n\r\nabstract contract NFTInterface {\r\n    function mint(address _to,uint256 _tokenId,string calldata _uri)  virtual external ;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) virtual external;\r\n    \r\n    function balanceOf(address tokenOwner) virtual public view returns (uint balance);\r\n    \r\n    function ownerOf(uint __artId) virtual public view returns ( address artOwner);\r\n    \r\n    function safeTransferFrom( address _from, address _to, uint256 _tokenId) virtual public;\r\n    \r\n    function tokenURI(uint256 _tokenId) virtual external returns (string memory);\r\n     \r\n    function approveResaleNFT( uint256 _tokenId ) virtual public;\r\n    function approveAuctionNFT( uint256 _tokenId ) virtual public;\r\n    \r\n    function addNftPurchaser(uint __artId,uint __tokenId, address  __buyer) public virtual ;//, uint prezzo, string memory __email\r\n    function deleteNftPurchaser(uint __artId, address  seller  )virtual public ;\r\n    function deleteArtworkPurchased(uint __tokenId, address  exOwner  ) virtual public ;\r\n    \r\n    function getArtIdOwners(uint __artId) virtual public view returns (address [] memory);\r\n    \r\n    function getArtworksOwnedBy(address __buyer) virtual public view returns (uint [] memory);\r\n    \r\n    function getNftTokenIds(uint __artId) virtual public view returns (uint [] memory);\r\n }\r\n \r\ncontract NFTsaleRio is  Ownable{ \r\n    \r\n    address nftAddress = 0xe0d189176C68F2fc55BE8FeF32E9883b287f739a ;// da NFTTokenMetadata \r\n    NFTInterface public tokenNFT = NFTInterface(nftAddress);\r\n    \r\n    bool isActive;\r\n    \r\n    mapping(uint => address payable) public artistAddress;\r\n    mapping(uint => uint) public feeArtclub;\r\n    mapping(uint => uint) priceNFT;\r\n    mapping(uint => bool) public isNftForSale;\r\n\r\n    event ArtPurchasingDetail(\r\n           string indexed __uri\r\n        );\r\n    constructor()\r\n  {\r\n     owner = msg.sender;\r\n     isActive = true;\r\n  }\r\n    \r\n    function setArtNFTContract( address  _contract)  public  returns (bool success) {\r\n        require(msg.sender == owner,\"Only theArtClub can add NFTs\");\r\n        nftAddress = _contract ; \r\n        tokenNFT = NFTInterface(nftAddress);\r\n        return true;\r\n    }\r\n    function setArtNFT(uint256[] memory __artId , address[] memory  __artist, uint[] memory __price, uint[] memory __fee) public {\r\n        require(msg.sender == owner,\"Only theArtClub can add NFTs\");\r\n        for(uint8 i = 0; i < __artId.length; i++) {\r\n            priceNFT[__artId[i]] = __price[i];\r\n            artistAddress[__artId[i]] = payable(__artist[i]);\r\n            feeArtclub[__artId[i]] = __fee[i];\r\n\r\n        }\r\n    }\r\n    function buyArtIdNFT (uint __artId, uint __tokenId, string calldata __uri)  external payable returns (bool success) {//override\r\n        require(isActive,\"Contract has to be active\");//, string memory __email\r\n        require(artistAddress[__artId]!=address(0),\"ADDRESS artist unknown\");\r\n        //the artClub prende il 20% di default ma lo settiamo nella creazione artId\r\n        uint vendita = priceNFT[__artId];\r\n        if(msg.value>priceNFT[__artId]){ vendita = msg.value; }//considero ipotesi che alzo il prezzo}\r\n        uint commissione = vendita * feeArtclub[__artId] / 100;\r\n        uint quotaArtista = vendita - commissione ;\r\n        \r\n        payable(address(uint160(owner))).transfer(commissione);\r\n       \r\n            artistAddress[__artId].transfer(quotaArtista);\r\n\r\n            tokenNFT.mint(msg.sender,__tokenId,__uri);\r\n       \r\n            tokenNFT.addNftPurchaser(__artId,__tokenId,msg.sender);//, vendita\r\n            priceNFT[__tokenId] = vendita;\r\n        \r\n            emit ArtPurchasingDetail( __uri );//__artId,\r\n        \r\n        return true;\r\n    }\r\n    \r\n     function resaleNFT (uint256 _tokenId,uint __price) external returns (bool success){\r\n        require(msg.sender == tokenNFT.ownerOf(_tokenId),\"Only NFT owner can act here\");\r\n        priceNFT[_tokenId]=__price;\r\n        tokenNFT.approveResaleNFT( _tokenId);\r\n        isNftForSale[_tokenId]=true;\r\n     return true;\r\n    }\r\n     \r\n    function buyResaleNFT (uint __artId, uint __tokenId)  external payable returns (bool success) {//override\r\n        require(isActive,\"Contract has to be active\");//, string memory __email\r\n        address proprietario = tokenNFT.ownerOf(__tokenId);\r\n        //the artClub prende il 10% ma lo settiamo -artista 10% - il resto il proprietario\r\n        uint vendita = priceNFT[__tokenId]; //il prezzo va  messo nella transazione\r\n        uint commissione = vendita * 10 /100;\r\n        uint quotaArtista = vendita * 10 /100;\r\n        uint quotaProprietario = vendita - commissione - quotaArtista;\r\n        \r\n        payable(address(uint160(proprietario))).transfer(quotaProprietario);\r\n        \r\n        payable(address(uint160(owner))).transfer(commissione);\r\n       \r\n        artistAddress[__artId].transfer(quotaArtista);\r\n\r\n        tokenNFT.safeTransferFrom(proprietario, msg.sender, __tokenId);\r\n       \r\n            isNftForSale[__tokenId] = false;\r\n            \r\n            tokenNFT.addNftPurchaser(__artId,__tokenId,msg.sender);//, vendita\r\n\r\n            tokenNFT.deleteNftPurchaser(__artId,proprietario);\r\n            \r\n            tokenNFT.deleteArtworkPurchased(__tokenId,proprietario);\r\n            \r\n        return true;\r\n    }\r\n    /* BUY WITH ARTCOIN \r\n    function buyNftWithArtcoin(uint __artId, uint __tokenId, string calldata __uri) external  returns (bool success) {//override\r\n        address payable buyer = payable(msg.sender) ;//,string memory __email\r\n        uint256 buyerBalance = tokenArtclub.balanceOf(buyer);\r\n        //controlla che abbia artcoin nel wallet\r\n        uint256 artCoin = priceNFT[__artId] * (10 ** uint256(10)) / tokenArtclub.getTokenPrice(); //va espresso in token e si aggiungono i decimali\r\n        require(artCoin <= buyerBalance, \"Not enough ArtCoin Available in the Buyer balance\");\r\n        require(isActive,\"Contract has to be active\");\r\n        require(artistAddress[__artId]!=address(0),\"ADDRESS artist unknown\");\r\n        \r\n        tokenArtclub.transferFrom(buyer, owner, artCoin * feeArtclub[__artId] / 100);//commissione TAC\r\n        tokenArtclub.transferFrom(buyer, artistAddress[__artId], artCoin * (100-feeArtclub[__artId]) / 100);//\r\n        \r\n        tokenNFT.mint(msg.sender,__tokenId,__uri);\r\n            \r\n            tokenNFT.addNftPurchaser(__artId,__tokenId,msg.sender);//, priceNFT[__artId]\r\n            priceNFT[__tokenId] = priceNFT[__artId];\r\n\r\n            emit ArtPurchasingDetail( __uri );//__artId,\r\n            \r\n        return true;\r\n    }\r\n    function buyResaledNFTwithArtcoin (uint __artId, uint __tokenId)  external returns (bool success) {//override\r\n        address payable buyer = payable(msg.sender) ;//, string memory __email\r\n        uint256 buyerBalance = tokenArtclub.balanceOf(buyer);\r\n        //controlla che abbia artcoin nel wallet\r\n        uint256 artCoin = priceNFT[__tokenId] * (10 ** uint256(10)) / tokenArtclub.getTokenPrice(); //va espresso in token e si aggiungono i decimali\r\n        require(artCoin <= buyerBalance, \"Not enough ArtCoin Available in the Buyer balance\");\r\n        require(isActive,\"Contract has to be active\");\r\n        require(artistAddress[__artId]!=address(0),\"ADDRESS artist unknown\");\r\n        \r\n        address proprietario = tokenNFT.ownerOf(__tokenId);\r\n        //the artClub prende il 10% ma lo settiamo -artista 10% - il resto il proprietario\r\n        uint commissione = artCoin * 10 /100;\r\n        uint quotaArtista = artCoin * 10 /100;\r\n        uint quotaProprietario = artCoin - commissione - quotaArtista;\r\n        \r\n        \r\n        tokenArtclub.transferFrom(buyer, owner, commissione);//commissione TAC\r\n        tokenArtclub.transferFrom(buyer, artistAddress[__artId], quotaArtista);//\r\n        tokenArtclub.transferFrom(buyer, proprietario, quotaProprietario);//\r\n\r\n        tokenNFT.safeTransferFrom(proprietario, msg.sender, __tokenId);\r\n       \r\n            isNftForSale[__tokenId] = false;\r\n            \r\n            tokenNFT.addNftPurchaser(__artId,__tokenId,msg.sender);\r\n            \r\n            \r\n            tokenNFT.deleteNftPurchaser(__artId,proprietario);\r\n            \r\n            tokenNFT.deleteArtworkPurchased(__tokenId,proprietario);\r\n            \r\n        return true;\r\n    }\r\n    */\r\n    \r\n    function changeStato(bool stato) public {\r\n        require(msg.sender == owner,\"Solo TheArtClub puo disattivare il contratto\");\r\n        isActive = stato;\r\n    }\r\n    \r\n\r\n   function getArtIdOwners(uint __artId) public view returns (address [] memory) {\r\n  \t\treturn tokenNFT.getArtIdOwners(__artId);\r\n\t}\r\n    \r\n    function getArtworksOwnedBy(address __buyer) public view returns (uint [] memory) {\r\n  \t\treturn tokenNFT.getArtworksOwnedBy(__buyer);\r\n\t}\r\n    function getNftTokenIds(uint __artId) public view returns (uint [] memory) {\r\n  \t\treturn tokenNFT.getNftTokenIds(__artId);\r\n\t}\r\n    function getOwnerOf(uint __artId) public view returns (address) {\r\n  \t\treturn tokenNFT.ownerOf(__artId);\r\n\t}\r\n    function getPriceNFT(uint __artId) public view  returns (uint){\r\n  \t\treturn priceNFT[__artId];\r\n\t}\r\n\t/*function getAmountPurchased(uint __tokenId) external view returns (uint){\r\n  \t\treturn priceNFT[__tokenId];\r\n\t}*/\r\n\r\n    receive () payable  external {\r\n        revert();//evita di ricevere pagamenti fuori dal processo\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"__uri\",\"type\":\"string\"}],\"name\":\"ArtPurchasingDetail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANNOT_TRANSFER_TO_ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOT_CURRENT_OWNER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artistAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__artId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"__uri\",\"type\":\"string\"}],\"name\":\"buyArtIdNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__artId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__tokenId\",\"type\":\"uint256\"}],\"name\":\"buyResaleNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stato\",\"type\":\"bool\"}],\"name\":\"changeStato\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeArtclub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__artId\",\"type\":\"uint256\"}],\"name\":\"getArtIdOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__buyer\",\"type\":\"address\"}],\"name\":\"getArtworksOwnedBy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__artId\",\"type\":\"uint256\"}],\"name\":\"getNftTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__artId\",\"type\":\"uint256\"}],\"name\":\"getOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__artId\",\"type\":\"uint256\"}],\"name\":\"getPriceNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isNftForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__price\",\"type\":\"uint256\"}],\"name\":\"resaleNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"__artId\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"__artist\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__price\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__fee\",\"type\":\"uint256[]\"}],\"name\":\"setArtNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setArtNFTContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenNFT\",\"outputs\":[{\"internalType\":\"contract NFTInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTsaleRio", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c9030c72cd6b15c66fb639315db437235d732ccc9e39803db92a46f80819e79a"}]}