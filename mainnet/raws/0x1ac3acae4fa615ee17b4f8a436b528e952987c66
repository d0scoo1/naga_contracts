{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/*\r\n *  TimeLockMultiSigWallet: Allows multiple parties to agree on transactions before execution with time lock.\r\n *  Reference 1: https://etherscan.io/address/0xf73b31c07e3f8ea8f7c59ac58ed1f878708c8a76#code\r\n *  Reference 2: https://github.com/compound-finance/compound-protocol/blob/master/contracts/Timelock.sol\r\n */\r\ncontract TimeLockMultiSigWallet {\r\n    using Strings for uint256;\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\r\n    event Revocation(address indexed sender, uint256 indexed transactionId);\r\n    event Submission(uint256 indexed transactionId);\r\n    event Execution(uint256 indexed transactionId);\r\n    event ExecutionFailure(uint256 indexed transactionId);\r\n    event Deposit(address indexed sender, uint256 value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint256 required);\r\n    event NewDelay(uint256 delay);\r\n\r\n    uint256 public constant VERSION = 20210812;\r\n    uint256 public constant MINIMUM_DELAY = 1;\r\n    uint256 public constant MAXIMUM_DELAY = 15 days;\r\n    uint256 public delay; // delay time\r\n\r\n    uint256 public constant MAX_OWNER_COUNT = 50;\r\n\r\n    mapping(uint256 => Transaction) public transactions;\r\n    mapping(uint256 => mapping(address => bool)) public confirmations;\r\n    mapping(address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint256 public required;\r\n    uint256 public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint256 value;\r\n        bytes data;\r\n        bool executed;\r\n        uint256 submitTime;\r\n    }\r\n\r\n    /*\r\n     *  Modifiers\r\n     */\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this), \"msg.sender != address(this)\");\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner], \"is already owner\");\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        require(isOwner[owner], \"is not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint256 transactionId) {\r\n        require(\r\n            transactions[transactionId].destination != address(0),\r\n            \"transactionId is not exists\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint256 transactionId, address owner) {\r\n        require(confirmations[transactionId][owner], \"is not confirmed\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint256 transactionId, address owner) {\r\n        require(!confirmations[transactionId][owner], \"already confirmed\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint256 transactionId) {\r\n        require(!transactions[transactionId].executed, \"already executed\");\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != address(0), \"_address == address(0)\");\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\r\n        require(\r\n            ownerCount <= MAX_OWNER_COUNT &&\r\n                _required <= ownerCount &&\r\n                _required != 0 &&\r\n                ownerCount != 0,\r\n            \"error: validRequirement()\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Fallback function allows to deposit ether.\r\n    fallback() external {}\r\n\r\n    receive() external payable {\r\n        if (msg.value > 0) emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    /*\r\n     * Public functions\r\n     */\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    constructor(\r\n        address[] memory _owners,\r\n        uint256 _required,\r\n        uint256 _delay\r\n    ) validRequirement(_owners.length, _required) {\r\n        require(_delay >= MINIMUM_DELAY, \"Delay must exceed minimum delay.\");\r\n        require(\r\n            _delay <= MAXIMUM_DELAY,\r\n            \"Delay must not exceed maximum delay.\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n        delay = _delay;\r\n    }\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner) public onlyWallet ownerExists(owner) {\r\n        isOwner[owner] = false;\r\n        for (uint256 i = 0; i < owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        if (required > (owners.length - 1))\r\n            changeRequirement(owners.length - 1);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param newOwner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint256 i = 0; i < owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint256 _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /*@dev Allows an owner to submit and confirm a transaction.\r\n    @param destination Transaction target address.\r\n    @param value Transaction ether value.\r\n    @param data Transaction data payload.\r\n    @return Returns transaction ID.*/\r\n    function submitTransaction(\r\n        address destination,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) public returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to batch confirm  transactions.\r\n    /// @param transactionIdArray Transaction ID array.\r\n    function batchConfirmTransaction(uint256[] memory transactionIdArray)\r\n        public\r\n    {\r\n        for (uint256 i = 0; i < transactionIdArray.length; i++) {\r\n            confirmTransaction(transactionIdArray[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to batch execute  transactions.\r\n    /// @param transactionIdArray Transaction ID array.\r\n    function batchExecuteTransaction(uint256[] memory transactionIdArray)\r\n        public\r\n    {\r\n        for (uint256 i = 0; i < transactionIdArray.length; i++) {\r\n            executeTransaction(transactionIdArray[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint256 transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        require(\r\n            getBlockTimestamp() >=\r\n                transactions[transactionId].submitTime + delay,\r\n            \"The time is not up, the command cannot be executed temporarily!\"\r\n        );\r\n        require(\r\n            getBlockTimestamp() <=\r\n                transactions[transactionId].submitTime + MAXIMUM_DELAY,\r\n            \"The maximum execution time has been exceeded, unable to execute!\"\r\n        );\r\n\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId];\r\n            txn.executed = true;\r\n            // address(txn.destination).call(abi.encodeWithSignature(txn.data))\r\n            (bool success, ) = txn.destination.call{value: txn.value}(txn.data);\r\n            if (success) emit Execution(transactionId);\r\n            else {\r\n                revert(\r\n                    string(\r\n                        abi.encodePacked(\r\n                            \"The transactionId \",\r\n                            transactionId.toString(),\r\n                            \" failed.\"\r\n                        )\r\n                    )\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint256 transactionId) public view returns (bool) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) count += 1;\r\n            if (count == required) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * Internal functions\r\n     */\r\n    /*@dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    @param destination Transaction target address.\r\n    @param value Transaction ether value.\r\n    @param data Transaction data payload.\r\n    @return Returns transaction ID.*/\r\n    function addTransaction(\r\n        address destination,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal notNull(destination) returns (uint256 transactionId) {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false,\r\n            submitTime: block.timestamp\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /*@dev Returns number of confirmations of a transaction.\r\n    @param transactionId Transaction ID.\r\n    @return Number of confirmations.*/\r\n    function getConfirmationCount(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        count = 0;\r\n        for (uint256 i = 0; i < owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) count += 1;\r\n    }\r\n\r\n    /*@dev Returns total number of transactions after filers are applied.\r\n    @param pending Include pending transactions.\r\n    @param executed Include executed transactions.\r\n    @return Total number of transactions after filters are applied.*/\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        count = 0;\r\n        for (uint256 i = 0; i < transactionCount; i++)\r\n            if (\r\n                (pending && !transactions[i].executed) ||\r\n                (executed && transactions[i].executed)\r\n            ) count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    /*@dev Returns array with owner addresses, which confirmed transaction.\r\n    @param transactionId Transaction ID.\r\n    @return Returns array of owner addresses.*/\r\n    function getConfirmations(uint256 transactionId)\r\n        public\r\n        view\r\n        returns (address[] memory _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i = 0; i < owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++) _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /*@dev Returns list of transaction IDs in defined range.\r\n    @param from Index start position of transaction array.\r\n    @param to Index end position of transaction array.\r\n    @param pending Include pending transactions.\r\n    @param executed Include executed transactions.\r\n    @return Returns array of transaction IDs.*/\r\n    function getTransactionIds(\r\n        uint256 from,\r\n        uint256 to,\r\n        bool pending,\r\n        bool executed\r\n    ) public view returns (uint256[] memory _transactionIds) {\r\n        uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i = 0; i < transactionCount; i++)\r\n            if (\r\n                (pending && !transactions[i].executed) ||\r\n                (executed && transactions[i].executed)\r\n            ) {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint256[](to - from);\r\n        for (i = from; i < to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /*@dev setDelay\r\n    @param delay time\r\n    */\r\n    function setDelay(uint256 _delay) public onlyWallet {\r\n        require(_delay >= MINIMUM_DELAY, \"Delay must exceed minimum delay.\");\r\n        require(\r\n            _delay <= MAXIMUM_DELAY,\r\n            \"Delay must not exceed maximum delay.\"\r\n        );\r\n\r\n        delay = _delay;\r\n\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4) {\r\n        bytes4 received = 0x150b7a02;\r\n        return received;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"NewDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAXIMUM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"transactionIdArray\",\"type\":\"uint256[]\"}],\"name\":\"batchConfirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"transactionIdArray\",\"type\":\"uint256[]\"}],\"name\":\"batchExecuteTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"submitTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TimeLockMultiSigWallet", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000002a30000000000000000000000000000000000000000000000000000000000000000030000000000000000000000003b5fae61ad6987ddad472b3fef826fcc83873bf8000000000000000000000000a705307dfc6cd8f0ccc3968c27440a8f756e8dfc00000000000000000000000052c5ac6f05629b36f2dc2c80e5905d6110f4d389", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eed1ee7b9bb8c3abdead09cf00ba411c6b71abfb5270c89b5645900a42c902ac"}]}