{"status": "1", "message": "OK", "result": [{"SourceCode": "/*                                                                                                                                           \r\n\u2591\u2580\u2588\u2580\u2591\u2588\u2591\u2588\u2591\u2588\u2580\u2580\u2591\u2588\u2591\u2591\u2591\u2588\u2580\u2588\u2591\u2588\u2580\u2580\u2591\u2580\u2588\u2580\u2591\u2588\u2580\u2588\u2591\u2588\u2580\u2580\u2591\u2580\u2588\u2580\u2591\u2588\u2591\u2588\u2591\u2588\u2580\u2580\u2591\u2588\u2584\u2588\r\n\u2591\u2591\u2588\u2591\u2591\u2588\u2580\u2588\u2591\u2588\u2580\u2580\u2591\u2588\u2591\u2591\u2591\u2588\u2580\u2588\u2591\u2580\u2580\u2588\u2591\u2591\u2588\u2591\u2591\u2588\u2591\u2588\u2591\u2588\u2580\u2580\u2591\u2591\u2588\u2591\u2591\u2588\u2580\u2588\u2591\u2588\u2580\u2580\u2591\u2588\u2591\u2588\r\n\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2580\u2591\u2580\u2580\u2580\u2591\u2580\u2580\u2580\u2591\u2580\u2591\u2580\u2591\u2580\u2580\u2580\u2591\u2591\u2580\u2591\u2591\u2580\u2580\u2580\u2591\u2580\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2580\u2591\u2580\u2591\u2580\u2580\u2580\u2591\u2580\u2591\ur\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*********************************************\r\n *********************************************\r\n *  H e l p e r   c o n t r a c t s\r\n */\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Sale is Ownable {\r\n    // not-active(0), presale(1), sale(2)\r\n    uint8 private _saleState;\r\n    uint256 private _priceSale;\r\n    uint256 private _pricePresale;\r\n    uint256 private _presaleListCount;\r\n    uint256 private _presaleListCap;\r\n    mapping(address => uint8) private _presaleList;\r\n    event SaleStateChanged(uint8 indexed lastState, uint8 indexed newState);\r\n\r\n    constructor() Ownable() {\r\n        _saleState = 0;\r\n        _presaleListCount = 0;\r\n    }\r\n\r\n    function setSaleState(uint8 _state) public onlyOwner {\r\n        require(_state >= 0 && _state <= 2, \"Invalid state\");\r\n        uint8 _lastState = _saleState;\r\n        _saleState = _state;\r\n        emit SaleStateChanged(_lastState, _state);\r\n    }\r\n\r\n    function saleState() public view virtual returns (uint8) {\r\n        return _saleState;\r\n    }\r\n\r\n    function setPricePresale(uint256 _val) public onlyOwner {\r\n        _pricePresale = _val;\r\n    }\r\n\r\n    function pricePresale() public view virtual returns (uint256) {\r\n        return _pricePresale;\r\n    }\r\n\r\n    function setPriceSale(uint256 _val) public onlyOwner {\r\n        _priceSale = _val;\r\n    }\r\n\r\n    function priceSale() public view virtual returns (uint256) {\r\n        return _priceSale;\r\n    }\r\n\r\n    function setPresaleListCap(uint256 _cap) public onlyOwner {\r\n        require(_cap >= 0, \"Invalid capacity\");\r\n        _presaleListCap = _cap;\r\n    }\r\n\r\n    function presaleListCap() public view virtual returns (uint256) {\r\n        return _presaleListCap;\r\n    }\r\n\r\n    function presaleListCount() public view virtual returns (uint256) {\r\n        return _presaleListCount;\r\n    }\r\n\r\n    function presaleListCheck(address _addr)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return _presaleList[_addr] > 0;\r\n    }\r\n\r\n    function presaleListAdd(address[] memory _addresses) public onlyOwner {\r\n        uint256 len = _addresses.length;\r\n\r\n        require(\r\n            _presaleListCount + len <= _presaleListCap,\r\n            \"Presale list will overflow\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            _presaleList[_addresses[i]] = 1;\r\n            _presaleListCount++;\r\n        }\r\n    }\r\n\r\n    function presaleListRemove(address[] memory _addresses) public onlyOwner {\r\n        uint256 len = _addresses.length;\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            _presaleList[_addresses[i]] = 0;\r\n            _presaleListCount--;\r\n        }\r\n    }\r\n}\r\n\r\n/*********************************************\r\n *********************************************\r\n *  I n t e r f a c e s\r\n */\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC2981 {\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\ninterface IERC721Metadata {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n}\r\n\r\ncontract TheLastOfThem is\r\n    IERC165,\r\n    IERC721,\r\n    IERC721Metadata,\r\n    IERC2981,\r\n    Sale,\r\n    ReentrancyGuard\r\n{\r\n    using Strings for uint256;\r\n    using Address for address;\r\n\r\n    /*********************************************\r\n     *********************************************\r\n     *  P r i v a t e\r\n     *      m e m b e r s\r\n     *\r\n     */\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    string private _baseURI;\r\n    bool private _baseURILocked;\r\n    uint8 private _mintCap;\r\n    uint8 private _mintCapPresale;\r\n    uint256 private _maxSupply;\r\n    uint256 private _maxSupplyPresale;\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint8) private _mintedPresale;\r\n    mapping(address => uint8) private _minted;\r\n    mapping(address => uint8) private _mintedOwner;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    address private _royaltyAddr;\r\n    uint256 private _royaltyBasis;\r\n    uint256 private _lastTokenId;\r\n\r\n    constructor() Sale() ReentrancyGuard() {\r\n        _symbol = \"TLOT\";\r\n        _name = \"TheLastOfThem\";\r\n        _lastTokenId = 0;\r\n        setPricePresale(0.04 ether);\r\n        setPriceSale(0.05 ether);\r\n        setMintCapPresale(100);\r\n        setMintCap(120);\r\n        setMaxSupplyPresale(500);\r\n        setMaxSupply(4460);\r\n        setPresaleListCap(30);\r\n        setBaseURI(\"https://api.thelastofthem.org/nft/\");\r\n        setRoyalty(0x4d26e56C11eB83f6EB80aA1D0F7507a184ea7C4d, 1000);\r\n    }\r\n\r\n    /*********************************************\r\n     *********************************************\r\n     *  P u b l i c\r\n     *      m e t h o d s\r\n     *\r\n     */\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _lastTokenId;\r\n    }\r\n\r\n    function setRoyalty(address _addr, uint256 _val) public onlyOwner {\r\n        require(_addr != address(0), \"Invalid address\");\r\n        _royaltyAddr = _addr;\r\n        _royaltyBasis = _val;\r\n    }\r\n\r\n    function royaltyInfo(uint256 _tokenId, uint256 _price)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        if (_exists(_tokenId)) {\r\n            return (_royaltyAddr, (_price * _royaltyBasis) / 10000);\r\n        }\r\n\r\n        return (_royaltyAddr, 0);\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(_tokenId), \"URI query for nonexistent token\");\r\n        require(bytes(_baseURI).length > 0, \"Base URI not set\");\r\n        return string(abi.encodePacked(_baseURI, _tokenId.toString(), \".json\"));\r\n    }\r\n\r\n    function setBaseURI(string memory _val) public onlyOwner {\r\n        require(!_baseURILocked, \"baseURI is locked\");\r\n        _baseURI = _val;\r\n    }\r\n\r\n    function lockBaseURI() public onlyOwner {\r\n        _baseURILocked = true;\r\n    }\r\n\r\n    function baseURI() public view virtual returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    function setMaxSupplyPresale(uint256 _val) public onlyOwner {\r\n        _maxSupplyPresale = _val;\r\n    }\r\n\r\n    function maxSupplyPresale() public view virtual returns (uint256) {\r\n        return _maxSupplyPresale;\r\n    }\r\n\r\n    function setMaxSupply(uint256 _val) public onlyOwner {\r\n        _maxSupply = _val;\r\n    }\r\n\r\n    function maxSupply() public view virtual returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function setMintCapPresale(uint8 _cap) public onlyOwner {\r\n        require(_cap >= 0, \"Invalid capacity\");\r\n        _mintCapPresale = _cap;\r\n    }\r\n\r\n    function mintCapPresale() public view virtual returns (uint8) {\r\n        return _mintCapPresale;\r\n    }\r\n\r\n    function setMintCap(uint8 _cap) public onlyOwner {\r\n        require(_cap >= 0, \"Invalid capacity\");\r\n        _mintCap = _cap;\r\n    }\r\n\r\n    function mintCap() public view virtual returns (uint8) {\r\n        return _mintCap;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        pure\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC165).interfaceId ||\r\n            interfaceId == type(IERC2981).interfaceId ||\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId;\r\n    }\r\n\r\n    function minted(address _addr)\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 total = _minted[_addr] +\r\n            _mintedOwner[_addr] +\r\n            _mintedPresale[_addr];\r\n\r\n        return (\r\n            total,\r\n            _mintedOwner[_addr],\r\n            _mintedPresale[_addr],\r\n            _minted[_addr]\r\n        );\r\n    }\r\n\r\n    function mint(uint8 _mintAmount) public payable {\r\n        mintTo(_mintAmount, msg.sender);\r\n    }\r\n\r\n    function mintTo(uint8 _mintAmount, address _receiver)\r\n        public\r\n        payable\r\n        nonReentrant\r\n    {\r\n        require(_receiver != address(0), \"Invalid address\");\r\n        require(_lastTokenId < _maxSupply, \"Sale completed\");\r\n\r\n        uint8 _state = saleState();\r\n\r\n        require(_state == 1 || _state == 2, \"Sale is not active\");\r\n\r\n        if (_state == 1) {\r\n            _presaleMint(_mintAmount, _receiver);\r\n        } else {\r\n            _saleMint(_mintAmount, _receiver);\r\n        }\r\n    }\r\n\r\n    function mintOwner(uint8 _mintAmount) public onlyOwner {\r\n        mintOwnerTo(_mintAmount, msg.sender);\r\n    }\r\n\r\n    function mintOwnerTo(uint8 _mintAmount, address _receiver)\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        require(_mintAmount > 0, \"Invalid mint amount\");\r\n        require(_lastTokenId < _maxSupply, \"Sale completed\");\r\n        require(\r\n            _mintAmount + totalSupply() <= _maxSupply,\r\n            \"Max supply will overflow\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _mintAmount; i++) {\r\n            _lastTokenId++;\r\n            _mintedOwner[_receiver] += 1;\r\n            _mint(_receiver, _lastTokenId);\r\n        }\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(msg.sender, tokenId),\r\n            \"Transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(msg.sender, tokenId),\r\n            \"Transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function balanceOf(address checkedOwner)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[checkedOwner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        return _owners[tokenId];\r\n    }\r\n\r\n    function walletOfOwner(address _addr)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 _tokenCount = balanceOf(_addr);\r\n        uint256[] memory _output = new uint256[](_tokenCount);\r\n        uint256 _supply = totalSupply();\r\n        uint256 _idx = 0;\r\n\r\n        for (uint256 _tokenId = 1; _tokenId <= _supply; _tokenId++) {\r\n            if (_owners[_tokenId] == _addr) {\r\n                _output[_idx] = _tokenId;\r\n                _idx++;\r\n            }\r\n        }\r\n\r\n        return _output;\r\n    }\r\n\r\n    function withdraw(address _addr, uint256 _amnt) public onlyOwner {\r\n        require(_addr != address(0), \"Invalid address\");\r\n\r\n        uint256 currentBalance = address(this).balance;\r\n        uint256 withdrawn;\r\n\r\n        if (_amnt == 0) {\r\n            withdrawn = address(this).balance;\r\n        } else {\r\n            require(\r\n                currentBalance >= _amnt,\r\n                \"Contract balance is less than withdrawn amount\"\r\n            );\r\n\r\n            withdrawn = _amnt;\r\n        }\r\n\r\n        _withdraw(_addr, withdrawn);\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address tokenOwner = ownerOf(tokenId);\r\n\r\n        require(to != tokenOwner, \"Approval to current owner\");\r\n        require(\r\n            msg.sender == tokenOwner ||\r\n                isApprovedForAll(tokenOwner, msg.sender),\r\n            \"Approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function isApprovedForAll(address checkedOwner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[checkedOwner][operator];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(operator != msg.sender, \"Approve to caller\");\r\n        \r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /*********************************************\r\n     *********************************************\r\n     *  P r i v a t e\r\n     *      m e t h o d s\r\n     *\r\n     */\r\n\r\n    function _exists(uint256 tokenId) private view returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(_exists(tokenId), \"Operator query for nonexistent token\");\r\n\r\n        address tokenOwner = ownerOf(tokenId);\r\n\r\n        return (tokenOwner == spender ||\r\n            getApproved(tokenId) == spender ||\r\n            isApprovedForAll(tokenOwner, spender));\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private {\r\n        _transfer(from, to, tokenId);\r\n\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"Transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(ownerOf(tokenId) == from, \"Transfer of token that is not own\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) private {\r\n        _tokenApprovals[tokenId] = to;\r\n\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _withdraw(address _addr, uint256 _amt) private nonReentrant {\r\n        (bool success, ) = _addr.call{value: _amt}(\"\");\r\n\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function _presaleMint(uint8 _mintAmount, address _receiver) private {\r\n        require(presaleListCheck(_receiver), \"Address not on the whitelist\");\r\n\r\n        require(\r\n            _mintAmount > 0 && _mintAmount <= _mintCapPresale,\r\n            \"Invalid mint amount\"\r\n        );\r\n\r\n        require(\r\n            _mintAmount + _mintedPresale[_receiver] <= _mintCapPresale,\r\n            \"User mint amount will overflow\"\r\n        );\r\n\r\n        require(\r\n            _mintAmount + totalSupply() <= _maxSupplyPresale,\r\n            \"Presale supply will overflow\"\r\n        );\r\n\r\n        require(\r\n            msg.value >= pricePresale() * _mintAmount,\r\n            \"More funds required\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _mintAmount; i++) {\r\n            _lastTokenId++;\r\n            _mintedPresale[_receiver] += 1;\r\n            _mint(_receiver, _lastTokenId);\r\n        }\r\n    }\r\n\r\n    function _saleMint(uint8 _mintAmount, address _receiver) private {\r\n        require(\r\n            _mintAmount > 0 && _mintAmount <= _mintCap,\r\n            \"Invalid mint amount\"\r\n        );\r\n\r\n        require(\r\n            _mintAmount + _minted[_receiver] <= _mintCap,\r\n            \"User mint amount will overflow\"\r\n        );\r\n\r\n        require(\r\n            _mintAmount + totalSupply() <= _maxSupply,\r\n            \"Max supply will overflow\"\r\n        );\r\n\r\n        require(msg.value >= priceSale() * _mintAmount, \"More funds required\");\r\n\r\n        for (uint256 i = 0; i < _mintAmount; i++) {\r\n            _lastTokenId++;\r\n            _minted[_receiver] += 1;\r\n            _mint(_receiver, _lastTokenId);\r\n        }\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) private {\r\n        require(!_exists(tokenId), \"Token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n        \r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    msg.sender,\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"Transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"lastState\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"SaleStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkedOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkedOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_mintAmount\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCapPresale\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_mintAmount\",\"type\":\"uint8\"}],\"name\":\"mintOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_mintAmount\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintOwnerTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_mintAmount\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"presaleListAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleListCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"presaleListCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"presaleListRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_val\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_cap\",\"type\":\"uint8\"}],\"name\":\"setMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_cap\",\"type\":\"uint8\"}],\"name\":\"setMintCapPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setPresaleListCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setPricePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setPriceSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amnt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheLastOfThem", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4847f7d2c2b3e3c2e73cb738682f3eda0d8dd8f4e80824dc2a2c21e4c39b6ffc"}]}