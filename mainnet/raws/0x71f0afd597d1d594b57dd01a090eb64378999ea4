{"status": "1", "message": "OK", "result": [{"SourceCode": "/*\r\nhttps://www.stiltonmusk.com\r\nhttps://t.me/stiltonmusk\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n// File: contracts/HasRandom.sol\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract HasRandom {\r\n    uint256 _randomNonce = 1;\r\n\r\n    function _random() internal returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        msg.sender,\r\n                        _randomNonce++,\r\n                        block.timestamp\r\n                    )\r\n                )\r\n            );\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\nabstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/IRouter.sol\r\n\r\n\r\n\r\ninterface IRouter {\r\n    function roundNumber() external view returns (uint256);\r\n\r\n    function token() external view returns (IERC20);\r\n\r\n    function isWithdrawInterval() external view returns (bool);\r\n\r\n    function interwalLapsedTime() external view returns (uint256);\r\n\r\n    function poolAddress() external view returns (address);\r\n}\r\n\r\n// File: contracts/Lottery.sol\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\n\r\n\r\nstruct Ticket {\r\n    uint256 amount;\r\n    bool isClosed;\r\n}\r\n\r\ncontract Lottery is Ownable, HasRandom {\r\n    IERC20 public token;\r\n    uint256 public bidSize = 100000000;\r\n    uint256 public nextBidSize = 100000000;\r\n    uint256 public roundNumber = 1;\r\n    uint256 public bidsCount;\r\n    mapping(uint256 => Ticket[]) public tickets;\r\n    uint256 public ticketsRewards; // current round tickets summary reward\r\n    mapping(uint256 => mapping(address => uint256[])) ticketsByAccounts;\r\n    mapping(address => uint256) roundNumberByAccount;\r\n    mapping(address => bool) hasTicket;\r\n    uint256 public playersCount;\r\n    bool _isWithdrawInterval;\r\n    uint256 _nextIntervalTime;\r\n    uint256 public intervalTimerMin = 360;\r\n    address public cAASBankAddress;\r\n    uint256 cAASBankAddressPercent = 50;\r\n    uint256 public jackpot;\r\n    uint256 public lotteryFeePercent = 5;\r\n    uint256 jackpotN = 1000;\r\n    uint256 nextJackpotN;\r\n    bool public isOpened;    \r\n\r\n    event OnJackpot(uint256 count, uint256 indexed roundNumber);\r\n\r\n    constructor(address tokenAddress) {\r\n        token = IERC20(tokenAddress);\r\n        cAASBankAddress = address(this);\r\n        nextJackpotN = jackpotN;\r\n    }\r\n\r\n    function setLotteryFeePercent(uint256 lotteryFeePercent_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(lotteryFeePercent_ <= 90);\r\n        lotteryFeePercent = lotteryFeePercent_;\r\n    }\r\n\r\n    function setOpenLottery(bool opened) external onlyOwner {\r\n        isOpened = opened;\r\n        _nextIntervalTime = block.timestamp + intervalTimerMin * 1 minutes;\r\n    }\r\n\r\n    function setToken(address tokenAddress) external onlyOwner {\r\n        token = IERC20(tokenAddress);\r\n    }\r\n\r\n    function setNextJackpotN(uint256 n) external onlyOwner {\r\n        nextJackpotN = n;\r\n    }\r\n\r\n    function withdrawOwner() external onlyOwner {\r\n        token.transfer(_owner, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function setNextBidSize(uint256 nextBidSize_) external onlyOwner {\r\n        nextBidSize = nextBidSize_;\r\n        if (bidsCount == 0) bidSize = nextBidSize_;\r\n    }\r\n\r\n    function setIntervalTimer(uint256 intervalTimerMin_) external onlyOwner {\r\n        intervalTimerMin = intervalTimerMin_;\r\n    }\r\n\r\n    function setCAASBankAddress(address cAASBankAddress_) external onlyOwner {\r\n        cAASBankAddress = cAASBankAddress_;\r\n    }\r\n\r\n    function setCAASBankAddressPercent(uint256 cAASBankAddressPercent_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(cAASBankAddressPercent_ <= 100);\r\n        cAASBankAddressPercent = cAASBankAddressPercent_;\r\n    }\r\n\r\n    function buyTicket() external {\r\n        _buyTickets(msg.sender, 1);\r\n    }\r\n\r\n    function buyTickets(address account, uint256 count) external {\r\n        _buyTickets(account, count);\r\n    }\r\n\r\n    function _buyTickets(address account, uint256 count) private {\r\n        require(count > 0, \"count is zero\");\r\n        require(isOpened, \"lottery is not open\");\r\n        tryNextInterval();\r\n        require(!_isWithdrawInterval, \"only in game interval\");\r\n        if (roundNumberByAccount[account] != roundNumber) clearData(account);\r\n\r\n        token.transferFrom(account, address(this), bidSize * count);\r\n\r\n        roundNumberByAccount[account] = roundNumber;\r\n        if (!hasTicket[account]) ++playersCount;\r\n        hasTicket[account] = true;\r\n        uint256 lastbTicketsCount = bidsCount;\r\n        bidsCount += count;\r\n        for (uint256 i = 0; i < count; ++i) {\r\n            tickets[roundNumber].push(Ticket(bidSize, false));\r\n            ticketsByAccounts[roundNumber][account].push(lastbTicketsCount + i);\r\n            arrangeRewards(lastbTicketsCount + i);\r\n        }\r\n    }\r\n\r\n    function arrangeRewards(uint256 ticketA) private {\r\n        ticketsRewards += tickets[roundNumber][ticketA].amount;\r\n        tickets[roundNumber][ticketA].amount -=\r\n            (tickets[roundNumber][ticketA].amount * (lotteryFeePercent + 10)) /\r\n            100; // lottery fee + 10% token tax\r\n        uint256 random = _random();\r\n        uint256 currentTicketsCount = ticketA + 1;\r\n        uint256 ticketB = random % currentTicketsCount;\r\n        if (ticketB == ticketA) ticketB = (ticketB + 1) % currentTicketsCount;\r\n\r\n        // jackpot\r\n        if (random % jackpotN == 0) {\r\n            emit OnJackpot(jackpot, roundNumber);\r\n            tickets[roundNumber][ticketB].amount += jackpot;\r\n            ticketsRewards += jackpot;\r\n            jackpot = 0;\r\n        }\r\n\r\n        if (ticketB == ticketA) return;\r\n        uint256 percent = 1 + (random % 1000);\r\n        if (random % 2 == 0) {\r\n            uint256 delta = (tickets[roundNumber][ticketB].amount * percent) /\r\n                1000;\r\n            tickets[roundNumber][ticketA].amount += delta;\r\n            tickets[roundNumber][ticketB].amount -= delta;\r\n        } else {\r\n            uint256 delta = (tickets[roundNumber][ticketA].amount * percent) /\r\n                1000;\r\n            tickets[roundNumber][ticketA].amount -= delta;\r\n            tickets[roundNumber][ticketB].amount += delta;\r\n        }\r\n    }\r\n\r\n    function clearData(address account) private {\r\n        hasTicket[account] = false;\r\n    }\r\n\r\n    function getTicketsCount(address account) public view returns (uint256) {\r\n        if (\r\n            roundNumberByAccount[account] != roundNumber ||\r\n            (_isWithdrawInterval &&\r\n                intervalLapsedTime() == 0 &&\r\n                playersCount > 1) ||\r\n            (\r\n                (!_isWithdrawInterval &&\r\n                    block.timestamp >=\r\n                    _nextIntervalTime + intervalTimerMin * 1 minutes &&\r\n                    playersCount > 1)\r\n            )\r\n        ) return 0;\r\n\r\n        return ticketsByAccounts[roundNumber][account].length;\r\n    }\r\n\r\n    function getTicket(address account, uint256 index)\r\n        public\r\n        view\r\n        returns (Ticket memory)\r\n    {\r\n        require(index < getTicketsCount(account), \"bad ticketIndex\");\r\n        return\r\n            tickets[roundNumber][\r\n                ticketsByAccounts[roundNumber][account][index]\r\n            ];\r\n    }\r\n\r\n    function getTickets(\r\n        address account,\r\n        uint256 startIndex,\r\n        uint256 count\r\n    ) external view returns (Ticket[] memory) {\r\n        Ticket[] memory ticketsList = new Ticket[](count);\r\n        require(\r\n            startIndex + count <= getTicketsCount(account),\r\n            \"bad ticketIndex\"\r\n        );\r\n        for (uint256 i = 0; i < count; ++i) {\r\n            ticketsList[i] = tickets[roundNumber][\r\n                ticketsByAccounts[roundNumber][account][startIndex + i]\r\n            ];\r\n        }\r\n\r\n        return ticketsList;\r\n    }\r\n\r\n    function getAllTicketsListPage(uint256 startIndex, uint256 count)\r\n        external\r\n        view\r\n        returns (Ticket[] memory)\r\n    {\r\n        Ticket[] memory ticketsList = new Ticket[](count);\r\n        for (uint256 i = 0; i < count; ++i) {\r\n            ticketsList[i] = tickets[roundNumber][startIndex + i];\r\n        }\r\n\r\n        return ticketsList;\r\n    }\r\n\r\n    function closeTicket(address account, uint256 index) external {\r\n        _closeTickets(account, index, 1);\r\n    }\r\n\r\n    function closeTickets(\r\n        address account,\r\n        uint256 startIndex,\r\n        uint256 count\r\n    ) external {\r\n        _closeTickets(account, startIndex, count);\r\n    }\r\n\r\n    function _closeTickets(\r\n        address account,\r\n        uint256 startIndex,\r\n        uint256 count\r\n    ) private {\r\n        require(count > 0, \"count is zero\");\r\n        require(isOpened, \"lottery is not open\");\r\n        tryNextInterval();\r\n        require(_isWithdrawInterval, \"only in withdraw interval\");\r\n        uint256 toTransfer;\r\n        uint256 lastIndex = startIndex + count;\r\n        for (uint256 i = startIndex; i < lastIndex; ++i) {\r\n            Ticket storage ticket = tickets[roundNumber][\r\n                ticketsByAccounts[roundNumber][account][i]\r\n            ];\r\n            if (ticket.isClosed) continue;\r\n            ticket.isClosed = true;\r\n            toTransfer += ticket.amount;\r\n        }\r\n        require(toTransfer > 0, \"has no rewards\");\r\n        token.transfer(account, toTransfer);\r\n    }\r\n\r\n    function _newRound() private {\r\n        if (!isOpened) return;\r\n        _isWithdrawInterval = false;\r\n\r\n        if (\r\n            playersCount > 1 ||\r\n            (playersCount == 1 && tickets[roundNumber][0].isClosed)\r\n        ) {\r\n            ++roundNumber;\r\n            bidSize = nextBidSize;\r\n            bidsCount = 0;\r\n            playersCount = 0;\r\n            ticketsRewards = 0;\r\n            uint256 balance = token.balanceOf(address(this));\r\n            if (balance > 0 && cAASBankAddress != address(this)) {\r\n                uint256 toTransfer = ((token.balanceOf(address(this)) -\r\n                    jackpot) * cAASBankAddressPercent) / 100;\r\n                token.transfer(cAASBankAddress, toTransfer);\r\n            }\r\n\r\n            jackpot = token.balanceOf(address(this));\r\n            jackpotN = nextJackpotN;\r\n        }\r\n    }\r\n\r\n    function tryNextInterval() public {\r\n        if (!isOpened) return;\r\n        // next interval\r\n        if (block.timestamp < _nextIntervalTime) return;\r\n\r\n        // if skip reward interval\r\n        if (!_isWithdrawInterval) {\r\n            if (\r\n                !_isWithdrawInterval &&\r\n                block.timestamp >=\r\n                _nextIntervalTime + intervalTimerMin * 1 minutes\r\n            ) {\r\n                _nextIntervalTime =\r\n                    block.timestamp +\r\n                    intervalTimerMin *\r\n                    1 minutes;\r\n                _newRound();\r\n                return;\r\n            }\r\n            _nextIntervalTime = block.timestamp + intervalLapsedTime();\r\n        } else {\r\n            _nextIntervalTime = block.timestamp + intervalTimerMin * 1 minutes;\r\n        }\r\n\r\n        // next interval\r\n        _isWithdrawInterval = !_isWithdrawInterval;\r\n        // next round\r\n        if (!_isWithdrawInterval) _newRound();\r\n    }\r\n\r\n    /// @dev current intervallapsed time in seconds\r\n    function intervalLapsedTime() public view returns (uint256) {\r\n        // if timer\r\n        if (block.timestamp < _nextIntervalTime)\r\n            return _nextIntervalTime - block.timestamp;\r\n        // now withdraw interval (skipping withdraq interval)\r\n        if (\r\n            !_isWithdrawInterval &&\r\n            block.timestamp < _nextIntervalTime + intervalTimerMin * 1 minutes\r\n        )\r\n            return\r\n                _nextIntervalTime +\r\n                intervalTimerMin *\r\n                1 minutes -\r\n                block.timestamp;\r\n        // new interval\r\n        return 0;\r\n    }\r\n\r\n    function isWithdrawInterval() external view returns (bool) {\r\n        // if timer\r\n        if (block.timestamp < _nextIntervalTime) return _isWithdrawInterval;\r\n        // now withdraw interval (skipping withdraq interval)\r\n        if (\r\n            !_isWithdrawInterval &&\r\n            block.timestamp >= _nextIntervalTime + intervalTimerMin * 1 minutes\r\n        ) return false;\r\n        // new interval\r\n        return !_isWithdrawInterval;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundNumber\",\"type\":\"uint256\"}],\"name\":\"OnJackpot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bidSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cAASBankAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"closeTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"closeTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getAllTicketsListPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"}],\"internalType\":\"struct Ticket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"}],\"internalType\":\"struct Ticket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getTickets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"}],\"internalType\":\"struct Ticket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTicketsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalLapsedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalTimerMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawInterval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBidSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cAASBankAddress_\",\"type\":\"address\"}],\"name\":\"setCAASBankAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cAASBankAddressPercent_\",\"type\":\"uint256\"}],\"name\":\"setCAASBankAddressPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"intervalTimerMin_\",\"type\":\"uint256\"}],\"name\":\"setIntervalTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryFeePercent_\",\"type\":\"uint256\"}],\"name\":\"setLotteryFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextBidSize_\",\"type\":\"uint256\"}],\"name\":\"setNextBidSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"setNextJackpotN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"opened\",\"type\":\"bool\"}],\"name\":\"setOpenLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryNextInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000006fcbf38e823efc1e609b9491aab546334c6ee69", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7a7fcd20535c076ea55d98eb3460e6e7c96e2fd0c1de55b454bb093a21b48b37"}]}