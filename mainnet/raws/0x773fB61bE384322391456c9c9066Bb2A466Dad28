{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IndexRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport \\\"./libraries/BP.sol\\\";\\nimport \\\"./libraries/IndexLibrary.sol\\\";\\nimport \\\"./libraries/UniswapV2Library.sol\\\";\\n\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IvToken.sol\\\";\\nimport \\\"./interfaces/IFeePool.sol\\\";\\nimport \\\"./interfaces/IIndexRouter.sol\\\";\\nimport \\\"./interfaces/IvTokenFactory.sol\\\";\\nimport \\\"./interfaces/IIndexRegistry.sol\\\";\\nimport \\\"./interfaces/external/IWETH.sol\\\";\\nimport \\\"./interfaces/IPhuturePriceOracle.sol\\\";\\n\\n/// @title Index router\\n/// @notice Contains methods allowing to mint and redeem index tokens in exchange for various assets\\ncontract IndexRouter is IIndexRouter {\\n    using FullMath for uint;\\n    using SafeERC20 for IERC20;\\n    using IndexLibrary for uint;\\n    using ERC165Checker for address;\\n    using UniswapV2Library for address;\\n\\n    struct MintDetails {\\n        uint minAmountInBase;\\n        uint[] amountsInBase;\\n        uint[] inputAmountInToken;\\n        IvTokenFactory vTokenFactory;\\n    }\\n\\n    /// @notice Min amount in BASE to swap during burning\\n    uint internal constant MIN_SWAP_AMOUNT = 1_000_000;\\n\\n    /// @notice Index role\\n    bytes32 internal immutable INDEX_ROLE;\\n    /// @notice Asset role\\n    bytes32 internal immutable ASSET_ROLE;\\n    /// @notice Skipped asset role\\n    bytes32 internal immutable SKIPPED_ASSET_ROLE;\\n    /// @notice Exchange factory role\\n    bytes32 internal immutable EXCHANGE_FACTORY_ROLE;\\n\\n    /// @inheritdoc IIndexRouter\\n    address public immutable override WETH;\\n    /// @inheritdoc IIndexRouter\\n    address public immutable override registry;\\n\\n    /// @notice Checks if `_index` has INDEX_ROLE\\n    /// @param _index Index address\\n    modifier isValidIndex(address _index) {\\n        require(IAccessControl(registry).hasRole(INDEX_ROLE, _index), \\\"IndexRouter: INVALID\\\");\\n        _;\\n    }\\n\\n    constructor(address _WETH, address _registry) {\\n        require(_WETH != address(0), \\\"IndexRouter: ZERO\\\");\\n\\n        bytes4[] memory interfaceIds = new bytes4[](2);\\n        interfaceIds[0] = type(IAccessControl).interfaceId;\\n        interfaceIds[1] = type(IIndexRegistry).interfaceId;\\n        require(_registry.supportsAllInterfaces(interfaceIds), \\\"IndexRouter: INTERFACE\\\");\\n\\n        INDEX_ROLE = keccak256(\\\"INDEX_ROLE\\\");\\n        ASSET_ROLE = keccak256(\\\"ASSET_ROLE\\\");\\n        SKIPPED_ASSET_ROLE = keccak256(\\\"SKIPPED_ASSET_ROLE\\\");\\n        EXCHANGE_FACTORY_ROLE = keccak256(\\\"EXCHANGE_FACTORY_ROLE\\\");\\n\\n        WETH = _WETH;\\n        registry = _registry;\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    /// @dev only accept ETH via fallback from the WETH contract\\n    receive() external payable override {\\n        require(msg.sender == WETH);\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function mintSwapIndexAmount(MintSwapParams calldata _params) external view override returns (uint val) {\\n        (address[] memory _assets, uint8[] memory _weights) = IIndex(_params.index).anatomy();\\n\\n        uint assetBalanceInBase;\\n        uint minAmountInBase = type(uint).max;\\n\\n        for (uint i; i < _weights.length; ) {\\n            if (_weights[i] != 0) {\\n                uint _amount = (_params.amountInInputToken * _weights[i]) / IndexLibrary.MAX_WEIGHT;\\n                if (_assets[i] != _params.inputToken) {\\n                    uint[] memory a = UniswapV2Library.getAmountsOut(\\n                        _params.swapFactories[i],\\n                        _amount,\\n                        _params.paths[i]\\n                    );\\n                    _amount = a[a.length - 1];\\n                }\\n\\n                uint assetPerBaseInUQ = IPhuturePriceOracle(IIndexRegistry(registry).priceOracle())\\n                    .lastAssetPerBaseInUQ(_assets[i]);\\n                {\\n                    uint _minAmountInBase = _amount.mulDiv(\\n                        FixedPoint112.Q112 * IndexLibrary.MAX_WEIGHT,\\n                        assetPerBaseInUQ * _weights[i]\\n                    );\\n                    if (_minAmountInBase < minAmountInBase) {\\n                        minAmountInBase = _minAmountInBase;\\n                    }\\n                }\\n\\n                IvToken vToken = IvToken(IvTokenFactory(IIndex(_params.index).vTokenFactory()).vTokenOf(_assets[i]));\\n                if (address(vToken) != address(0)) {\\n                    assetBalanceInBase += vToken.lastAssetBalanceOf(_params.index).mulDiv(\\n                        FixedPoint112.Q112,\\n                        assetPerBaseInUQ\\n                    );\\n                }\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        IPhuturePriceOracle priceOracle = IPhuturePriceOracle(IIndexRegistry(registry).priceOracle());\\n        {\\n            address[] memory inactiveAssets = IIndex(_params.index).inactiveAnatomy();\\n\\n            uint inactiveAssetsCount = inactiveAssets.length;\\n            for (uint i; i < inactiveAssetsCount; ) {\\n                address inactiveAsset = inactiveAssets[i];\\n                if (!IAccessControl(registry).hasRole(SKIPPED_ASSET_ROLE, inactiveAsset)) {\\n                    uint balanceInAsset = IvToken(\\n                        IvTokenFactory((IIndex(_params.index).vTokenFactory())).vTokenOf(inactiveAsset)\\n                    ).lastAssetBalanceOf(_params.index);\\n\\n                    assetBalanceInBase += balanceInAsset.mulDiv(\\n                        FixedPoint112.Q112,\\n                        priceOracle.lastAssetPerBaseInUQ(inactiveAsset)\\n                    );\\n                }\\n                unchecked {\\n                    i = i + 1;\\n                }\\n            }\\n        }\\n\\n        assert(minAmountInBase != type(uint).max);\\n\\n        uint8 _indexDecimals = IERC20Metadata(_params.index).decimals();\\n        if (IERC20(_params.index).totalSupply() != 0) {\\n            val =\\n                (priceOracle.convertToIndex(minAmountInBase, _indexDecimals) * IERC20(_params.index).totalSupply()) /\\n                priceOracle.convertToIndex(assetBalanceInBase, _indexDecimals);\\n        } else {\\n            val = priceOracle.convertToIndex(minAmountInBase, _indexDecimals) - IndexLibrary.INITIAL_QUANTITY;\\n        }\\n\\n        uint256 fee = (val * IFeePool(IIndexRegistry(registry).feePool()).mintingFeeInBPOf(_params.index)) /\\n            BP.DECIMAL_FACTOR;\\n        val -= fee;\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function burnTokensAmount(address _index, uint _amount) public view override returns (uint[] memory amounts) {\\n        (address[] memory _assets, uint8[] memory _weights) = IIndex(_index).anatomy();\\n        address[] memory inactiveAssets = IIndex(_index).inactiveAnatomy();\\n        amounts = new uint[](_weights.length + inactiveAssets.length);\\n\\n        uint assetsCount = _assets.length;\\n\\n        bool containsBlacklistedAssets;\\n        for (uint i; i < assetsCount; ) {\\n            if (!IAccessControl(registry).hasRole(ASSET_ROLE, _assets[i])) {\\n                containsBlacklistedAssets = true;\\n                break;\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        if (!containsBlacklistedAssets) {\\n            _amount -=\\n                (_amount * IFeePool(IIndexRegistry(registry).feePool()).burningFeeInBPOf(_index)) /\\n                BP.DECIMAL_FACTOR;\\n        }\\n\\n        uint totalAssetsCount = assetsCount + inactiveAssets.length;\\n        for (uint i; i < totalAssetsCount; ) {\\n            address asset = i < assetsCount ? _assets[i] : inactiveAssets[i - assetsCount];\\n            if (!(containsBlacklistedAssets && IAccessControl(registry).hasRole(SKIPPED_ASSET_ROLE, asset))) {\\n                uint indexAssetBalance = IvToken(IvTokenFactory(IIndex(_index).vTokenFactory()).vTokenOf(asset))\\n                    .balanceOf(_index);\\n\\n                amounts[i] = (_amount * indexAssetBalance) / IERC20(_index).totalSupply();\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function burnTokenValue(BurnSwapParams calldata _params) external view override returns (uint value) {\\n        uint[] memory amounts = burnTokensAmount(_params.index, _params.amount);\\n\\n        uint amountsCount = amounts.length;\\n        IPriceOracle priceOracle = IPriceOracle(IIndexRegistry(registry).priceOracle());\\n        for (uint i; i < amountsCount; ) {\\n            uint amount = amounts[i];\\n            if (_params.paths[i][0] == _params.paths[i][_params.paths[i].length - 1]) {\\n                value += amount;\\n            } else if (\\n                amount.mulDiv(FixedPoint112.Q112, priceOracle.lastAssetPerBaseInUQ(_params.paths[i][0])) >=\\n                MIN_SWAP_AMOUNT\\n            ) {\\n                uint[] memory a = _params.swapFactories[i].getAmountsOut(amount, _params.paths[i]);\\n                value += a[a.length - 1];\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function mint(MintParams calldata _params) external override isValidIndex(_params.index) {\\n        IIndex index = IIndex(_params.index);\\n        (address[] memory _assets, uint8[] memory _weights) = index.anatomy();\\n\\n        IvTokenFactory vTokenFactory = IvTokenFactory(index.vTokenFactory());\\n        IPriceOracle oracle = IPriceOracle(IIndexRegistry(registry).priceOracle());\\n\\n        uint assetsCount = _assets.length;\\n        for (uint i; i < assetsCount; ) {\\n            if (_weights[i] > 0) {\\n                address asset = _assets[i];\\n                IERC20(asset).safeTransferFrom(\\n                    msg.sender,\\n                    vTokenFactory.createdVTokenOf(_assets[i]),\\n                    oracle.refreshedAssetPerBaseInUQ(asset).amountInAsset(_weights[i], _params.amountInBase)\\n                );\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        index.mint(_params.recipient);\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function mintSwapWithPermit(\\n        MintSwapParams calldata _params,\\n        uint _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        IERC20Permit(_params.inputToken).permit(\\n            msg.sender,\\n            address(this),\\n            _params.amountInInputToken,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n        mintSwap(_params);\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function mintSwapValue(MintSwapValueParams calldata _params) external payable override isValidIndex(_params.index) {\\n        IWETH(WETH).deposit{ value: msg.value }();\\n\\n        _mint(_params, WETH, msg.value, address(this));\\n\\n        uint change = IERC20(WETH).balanceOf(address(this));\\n        if (change != 0) {\\n            IWETH(WETH).withdraw(change);\\n            TransferHelper.safeTransferETH(_params.recipient, change);\\n        }\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function burnWithPermit(\\n        BurnParams calldata _params,\\n        uint _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        IERC20Permit(_params.index).permit(msg.sender, address(this), _params.amount, _deadline, _v, _r, _s);\\n        burn(_params);\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function burnSwapWithPermit(\\n        BurnSwapParams calldata _params,\\n        uint _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        IERC20Permit(_params.index).permit(msg.sender, address(this), _params.amount, _deadline, _v, _r, _s);\\n        burnSwap(_params);\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function burnSwapValueWithPermit(\\n        BurnSwapParams calldata _params,\\n        uint _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        IERC20Permit(_params.index).permit(msg.sender, address(this), _params.amount, _deadline, _v, _r, _s);\\n        burnSwapValue(_params);\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function mintSwap(MintSwapParams calldata _params) public override isValidIndex(_params.index) {\\n        _mint(\\n            MintSwapValueParams({\\n                index: _params.index,\\n                recipient: _params.recipient,\\n                buyAssetMinAmounts: _params.buyAssetMinAmounts,\\n                paths: _params.paths,\\n                swapFactories: _params.swapFactories\\n            }),\\n            _params.inputToken,\\n            _params.amountInInputToken,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function burn(BurnParams calldata _params) public override isValidIndex(_params.index) {\\n        IERC20(_params.index).safeTransferFrom(msg.sender, _params.index, _params.amount);\\n        IIndex(_params.index).burn(_params.recipient);\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function burnSwap(BurnSwapParams calldata _params) public override isValidIndex(_params.index) {\\n        IERC20(_params.index).safeTransferFrom(msg.sender, _params.index, _params.amount);\\n        IIndex(_params.index).burn(address(this));\\n\\n        (address[] memory assets, ) = IIndex(_params.index).anatomy();\\n        address[] memory inactiveAssets = IIndex(_params.index).inactiveAnatomy();\\n\\n        uint assetsCount = assets.length;\\n        uint totalAssetsCount = assetsCount + inactiveAssets.length;\\n        IPriceOracle priceOracle = IPhuturePriceOracle(IIndexRegistry(registry).priceOracle());\\n        for (uint i; i < totalAssetsCount; ) {\\n            IERC20 asset = IERC20(i < assetsCount ? assets[i] : inactiveAssets[i - assetsCount]);\\n            uint balance = asset.balanceOf(address(this));\\n            if (balance > 0) {\\n                if (\\n                    _params.paths[i][0] == _params.paths[i][_params.paths[i].length - 1] ||\\n                    balance.mulDiv(FixedPoint112.Q112, priceOracle.refreshedAssetPerBaseInUQ(address(asset))) <\\n                    MIN_SWAP_AMOUNT\\n                ) {\\n                    asset.safeTransfer(_params.recipient, balance);\\n                } else {\\n                    require(\\n                        IAccessControl(registry).hasRole(EXCHANGE_FACTORY_ROLE, _params.swapFactories[i]),\\n                        \\\"IndexRouter: INVALID_FACTORY\\\"\\n                    );\\n\\n                    _swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                        address(this),\\n                        balance,\\n                        _params.buyAssetMinAmounts[i],\\n                        _params.paths[i],\\n                        _params.swapFactories[i],\\n                        _params.recipient\\n                    );\\n                }\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IIndexRouter\\n    function burnSwapValue(BurnSwapParams calldata _params) public override isValidIndex(_params.index) {\\n        IERC20(_params.index).safeTransferFrom(msg.sender, _params.index, _params.amount);\\n\\n        IIndex(_params.index).burn(address(this));\\n\\n        (address[] memory assets, ) = IIndex(_params.index).anatomy();\\n        address[] memory inactiveAssets = IIndex(_params.index).inactiveAnatomy();\\n\\n        uint assetsCount = assets.length;\\n        uint totalAssetsCount = assetsCount + inactiveAssets.length;\\n        IPriceOracle priceOracle = IPhuturePriceOracle(IIndexRegistry(registry).priceOracle());\\n        for (uint i; i < totalAssetsCount; ) {\\n            IERC20 asset = IERC20(i < assetsCount ? assets[i] : inactiveAssets[i - assetsCount]);\\n            uint balance = asset.balanceOf(address(this));\\n            if (balance > 0) {\\n                address outputAsset = _params.paths[i][_params.paths[i].length - 1];\\n                require(outputAsset == WETH, \\\"IndexRouter: OUTPUT\\\");\\n\\n                if (_params.paths[i][0] == outputAsset) {\\n                    IWETH(WETH).withdraw(balance);\\n                    TransferHelper.safeTransferETH(_params.recipient, balance);\\n                } else {\\n                    if (\\n                        balance.mulDiv(FixedPoint112.Q112, priceOracle.refreshedAssetPerBaseInUQ(address(asset))) <\\n                        MIN_SWAP_AMOUNT\\n                    ) {\\n                        asset.safeTransfer(_params.recipient, balance);\\n                    } else {\\n                        require(\\n                            IAccessControl(registry).hasRole(EXCHANGE_FACTORY_ROLE, _params.swapFactories[i]),\\n                            \\\"IndexRouter: INVALID_FACTORY\\\"\\n                        );\\n\\n                        _swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                            balance,\\n                            _params.buyAssetMinAmounts[i],\\n                            _params.paths[i],\\n                            _params.swapFactories[i],\\n                            _params.recipient\\n                        );\\n                    }\\n                }\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Swaps and sends assets in certain proportions to vTokens to mint index\\n    /// @param _params Mint parameters\\n    /// @param _inputToken Input token address\\n    /// @param _amountInInputToken Amount in input token\\n    /// @param _sender Input token sender account\\n    function _mint(\\n        MintSwapValueParams memory _params,\\n        address _inputToken,\\n        uint _amountInInputToken,\\n        address _sender\\n    ) internal {\\n        (address[] memory _assets, uint8[] memory _weights) = IIndex(_params.index).anatomy();\\n\\n        uint assetsCount = _assets.length;\\n\\n        MintDetails memory _details = MintDetails(\\n            type(uint).max,\\n            new uint[](assetsCount),\\n            new uint[](assetsCount),\\n            IvTokenFactory(IIndex(_params.index).vTokenFactory())\\n        );\\n        {\\n            IPriceOracle priceOracle = IPhuturePriceOracle(IIndexRegistry(registry).priceOracle());\\n            for (uint i; i < assetsCount; ) {\\n                if (_weights[i] != 0) {\\n                    require(_inputToken == _params.paths[i][0], \\\"IndexRouter: INVALID_PATH\\\");\\n\\n                    address asset = _params.paths[i][_params.paths[i].length - 1];\\n                    require(asset == _assets[i], \\\"IndexRouter: INVALID_PATH\\\");\\n\\n                    _details.inputAmountInToken[i] = (_amountInInputToken * _weights[i]) / IndexLibrary.MAX_WEIGHT;\\n\\n                    uint amountOut;\\n                    if (asset == _inputToken) {\\n                        amountOut = _details.inputAmountInToken[i];\\n                    } else {\\n                        uint[] memory amountsOut = UniswapV2Library.getAmountsOut(\\n                            _params.swapFactories[i],\\n                            _details.inputAmountInToken[i],\\n                            _params.paths[i]\\n                        );\\n                        amountOut = amountsOut[amountsOut.length - 1];\\n                    }\\n\\n                    uint amountOutInBase = amountOut.mulDiv(\\n                        FixedPoint112.Q112 * IndexLibrary.MAX_WEIGHT,\\n                        priceOracle.refreshedAssetPerBaseInUQ(asset) * _weights[i]\\n                    );\\n                    _details.amountsInBase[i] = amountOutInBase;\\n                    if (amountOutInBase < _details.minAmountInBase) {\\n                        _details.minAmountInBase = amountOutInBase;\\n                    }\\n                }\\n\\n                unchecked {\\n                    i = i + 1;\\n                }\\n            }\\n        }\\n\\n        for (uint i; i < assetsCount; ) {\\n            if (_weights[i] != 0) {\\n                address asset = _params.paths[i][_params.paths[i].length - 1];\\n                uint _amount = (_details.inputAmountInToken[i] * _details.minAmountInBase) / _details.amountsInBase[i];\\n                if (asset == _inputToken) {\\n                    IERC20(asset).safeTransferFrom(_sender, _details.vTokenFactory.createdVTokenOf(asset), _amount);\\n                } else {\\n                    require(\\n                        IAccessControl(registry).hasRole(EXCHANGE_FACTORY_ROLE, _params.swapFactories[i]),\\n                        \\\"IndexRouter: INVALID_FACTORY\\\"\\n                    );\\n\\n                    _swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                        _sender,\\n                        _amount,\\n                        (_params.buyAssetMinAmounts[i] * _details.minAmountInBase) / _details.amountsInBase[i],\\n                        _params.paths[i],\\n                        _params.swapFactories[i],\\n                        _details.vTokenFactory.createdVTokenOf(asset)\\n                    );\\n                }\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        IIndex(_params.index).mint(_params.recipient);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible,\\n     * along the route determined by the path. The first element of path is the input token,\\n     * the last is the output token, and any intermediate elements represent intermediate\\n     * pairs to trade through (if, for example, a direct pair does not exist).\\n     */\\n    /// @param sender Input tokens sender account\\n    /// @param amountIn The amount of input tokens to send\\n    /// @param amountOutMin The minimum amount of output tokens that must be received\\n    /// @param path An array of token addresses (path.length must be >= 2)\\n    /// @param swapFactory Uniswap factory address\\n    /// @param to Token receiver account\\n    function _swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address sender,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] memory path,\\n        address swapFactory,\\n        address to\\n    ) internal {\\n        if (sender == address(this)) {\\n            IERC20(path[0]).safeTransfer(UniswapV2Library.pairFor(swapFactory, path[0], path[1]), amountIn);\\n        } else {\\n            IERC20(path[0]).safeTransferFrom(sender, UniswapV2Library.pairFor(swapFactory, path[0], path[1]), amountIn);\\n        }\\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(path, swapFactory, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to) - balanceBefore >= amountOutMin,\\n            \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of tokens for as much ETH as possible, along\\n     * the route determined by the path. The first element of path is the input token,\\n     * the last must be WETH, and any intermediate elements represent intermediate pairs\\n     * to trade through (if, for example, a direct pair does not exist).\\n     */\\n    /// @param amountIn The amount of input tokens to send\\n    /// @param amountOutMin The minimum amount of output tokens that must be received\\n    /// @param path An array of token addresses (path.length must be >= 2)\\n    /// @param swapFactory Uniswap factory address\\n    /// @param to ETH receiver account\\n    function _swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] memory path,\\n        address swapFactory,\\n        address to\\n    ) internal {\\n        require(path[path.length - 1] == WETH, \\\"UniswapV2Router: INVALID_PATH\\\");\\n        IERC20(path[0]).safeTransfer(UniswapV2Library.pairFor(swapFactory, path[0], path[1]), amountIn);\\n        _swapSupportingFeeOnTransferTokens(path, swapFactory, address(this));\\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        IWETH(WETH).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(to, amountOut);\\n    }\\n\\n    function _swapSupportingFeeOnTransferTokens(\\n        address[] memory path,\\n        address swapFactory,\\n        address _to\\n    ) internal {\\n        for (uint i; i < path.length - 1; ) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(swapFactory, input, output));\\n            uint amountInput;\\n            uint amountOutput;\\n            {\\n                // scope to avoid stack too deep errors\\n                (uint reserve0, uint reserve1, ) = pair.getReserves();\\n                (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n                amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n                amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(swapFactory, output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\n/// @title Base point library\\n/// @notice Contains constant used to prevent underflow of math operations\\nlibrary BP {\\n    /// @notice Base point number\\n    /// @dev Used to prevent underflow of math operations\\n    uint16 constant DECIMAL_FACTOR = 10_000;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/IndexLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint112.sol\\\";\\n\\n/// @title Index library\\n/// @notice Provides various utilities for indexes\\nlibrary IndexLibrary {\\n    using FullMath for uint;\\n\\n    /// @notice Initial index quantity to mint\\n    uint constant INITIAL_QUANTITY = 10000;\\n\\n    /// @notice Total assets weight within an index\\n    uint8 constant MAX_WEIGHT = type(uint8).max;\\n\\n    /// @notice Returns amount of asset equivalent to the given parameters\\n    /// @param _assetPerBaseInUQ Asset per base price in UQ\\n    /// @param _weight Weight of the given asset\\n    /// @param _amountInBase Total assets amount in base\\n    /// @return Amount of asset\\n    function amountInAsset(\\n        uint _assetPerBaseInUQ,\\n        uint8 _weight,\\n        uint _amountInBase\\n    ) internal pure returns (uint) {\\n        require(_assetPerBaseInUQ != 0, \\\"IndexLibrary: ORACLE\\\");\\n\\n        return ((_amountInBase * _weight) / MAX_WEIGHT).mulDiv(_assetPerBaseInUQ, FixedPoint112.Q112);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapV2Library.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\n/// @title Uniswap V2 library\\n/// @notice Provides list of helper functions to calculate pair amounts and reserves\\nlibrary UniswapV2Library {\\n    /// @notice Returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    /// @param tokenA First pair token\\n    /// @param tokenB Second pair token\\n    /// @return token0 One of pair tokens that goes first after sorting\\n    /// @return token1 One of pair token that goes second after sorting\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    /// @notice Returns address of pair for given tokens\\n    /// @param factory Uniswap V2 factory\\n    /// @param tokenA First pair token\\n    /// @param tokenB Second pair token\\n    /// @return pair Returns pair address of the provided tokens\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (address pair) {\\n        pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    /// @notice Fetches and sorts the reserves for a pair\\n    /// @param factory Uniswap V2 factory\\n    /// @param tokenA First pair token\\n    /// @param tokenB Second pair token\\n    /// @return reserveA Reserves of the token that goes first after sorting\\n    /// @return reserveB Reserves of the token that goes second after sorting\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    /// @notice Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    /// @param amountA Amount of token A\\n    /// @param reserveA Token A reserves\\n    /// @param reserveB Token B reserves\\n    /// @return amountB Equivalent amount of token B\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) internal pure returns (uint amountB) {\\n        require(amountA != 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA != 0 && reserveB != 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    /// @notice Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    /// @param amountIn Input token amount\\n    /// @param reserveIn Input token reserves\\n    /// @param reserveOut Output token reserves\\n    /// @return amountOut Output token amount\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) internal pure returns (uint amountOut) {\\n        require(amountIn != 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn != 0 && reserveOut != 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint amountInWithFee = amountIn * 997;\\n        uint numerator = amountInWithFee * reserveOut;\\n        uint denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /// @notice Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    /// @param amountOut Output token amount\\n    /// @param reserveIn Input token reserves\\n    /// @param reserveOut Output token reserves\\n    /// @return amountIn Input token amount\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) internal pure returns (uint amountIn) {\\n        require(amountOut != 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn != 0 && reserveOut != 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint numerator = reserveIn * amountOut * 1000;\\n        uint denominator = (reserveOut - amountOut) * 997;\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    /// @notice Performs chained getAmountOut calculations on any number of pairs\\n    /// @param factory Uniswap V2 factory\\n    /// @param amountIn Input amount for the first token\\n    /// @param path List of tokens, that will be used to compose pairs for chained getAmountOut calculations\\n    /// @return amounts Array of output amounts\\n    function getAmountsOut(\\n        address factory,\\n        uint amountIn,\\n        address[] memory path\\n    ) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; ) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Performs chained getAmountIn calculations on any number of pairs\\n    /// @param factory Uniswap V2 factory\\n    /// @param amountOut Output amount for the first token\\n    /// @param path List of tokens, that will be used to compose pairs for chained getAmountIn calculations\\n    /// @return amounts Array of input amounts\\n    function getAmountsIn(\\n        address factory,\\n        uint amountOut,\\n        address[] memory path\\n    ) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IIndexLayout.sol\\\";\\nimport \\\"./IAnatomyUpdater.sol\\\";\\n\\n/// @title Index interface\\n/// @notice Interface containing basic logic for indexes: mint, burn, anatomy info\\ninterface IIndex is IIndexLayout, IAnatomyUpdater {\\n    /// @notice Index minting\\n    /// @param _recipient Recipient address\\n    function mint(address _recipient) external;\\n\\n    /// @notice Index burning\\n    /// @param _recipient Recipient address\\n    function burn(address _recipient) external;\\n\\n    /// @notice Returns index assets weights information\\n    /// @return _assets Assets list\\n    /// @return _weights List of assets corresponding weights\\n    function anatomy() external view returns (address[] memory _assets, uint8[] memory _weights);\\n\\n    /// @notice Returns inactive assets\\n    /// @return Assets list\\n    function inactiveAnatomy() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Vault token interface\\n/// @notice Contains logic for index's asset management\\ninterface IvToken {\\n    struct AssetData {\\n        uint maxShares;\\n        uint amountInAsset;\\n    }\\n\\n    event UpdateDeposit(address indexed account, uint depositedAmount);\\n    event SetVaultController(address vaultController);\\n    event VTokenTransfer(address indexed from, address indexed to, uint amount);\\n\\n    /// @notice Initializes vToken with the given parameters\\n    /// @param _asset Asset that will be stored\\n    /// @param _registry Index registry address\\n    function initialize(address _asset, address _registry) external;\\n\\n    /// @notice Sets vault controller for the vault\\n    /// @param _vaultController Vault controller to set\\n    function setController(address _vaultController) external;\\n\\n    /// @notice Updates reserve to expected deposit target\\n    function deposit() external;\\n\\n    /// @notice Withdraws all deposited amount\\n    function withdraw() external;\\n\\n    /// @notice Transfers shares between given accounts\\n    /// @param _from Account to transfer shares from\\n    /// @param _to Account to transfer shares to\\n    /// @param _shares Amount of shares to transfer\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint _shares\\n    ) external;\\n\\n    /// @notice Transfers asset to the given recipient\\n    /// @dev Method is restricted to orderer\\n    /// @param _recipient Recipient address\\n    /// @param _amount Amount to transfer\\n    function transferAsset(address _recipient, uint _amount) external;\\n\\n    /// @notice Mints shares for the current sender\\n    /// @return shares Amount of minted shares\\n    function mint() external returns (uint shares);\\n\\n    /// @notice Burns shares for the given recipient and returns assets to the given recipient\\n    /// @param _recipient Recipient to send assets to\\n    /// @return amount Amount of sent assets\\n    function burn(address _recipient) external returns (uint amount);\\n\\n    /// @notice Transfers shares from the sender to the given recipient\\n    /// @param _recipient Account to transfer shares to\\n    /// @param _amount Amount of shares to transfer\\n    function transfer(address _recipient, uint _amount) external;\\n\\n    /// @notice Manually synchronizes shares balances\\n    function sync() external;\\n\\n    /// @notice Mints shares for the given recipient\\n    /// @param _recipient Recipient to mint shares for\\n    /// @return Returns minted shares amount\\n    function mintFor(address _recipient) external returns (uint);\\n\\n    /// @notice Burns shares and sends assets to the given recipient\\n    /// @param _recipient Recipient to send assets to\\n    /// @return Returns amount of sent assets\\n    function burnFor(address _recipient) external returns (uint);\\n\\n    /// @notice Virtual supply amount: current balance + expected to be withdrawn using vault controller\\n    /// @return Returns virtual supply amount\\n    function virtualTotalAssetSupply() external view returns (uint);\\n\\n    /// @notice Total supply amount: current balance + deposited using vault controller\\n    /// @return Returns total supply amount\\n    function totalAssetSupply() external view returns (uint);\\n\\n    /// @notice Amount deposited using vault controller\\n    /// @return Returns amount deposited using vault controller\\n    function deposited() external view returns (uint);\\n\\n    /// @notice Returns mintable amount of shares for given asset's amount\\n    /// @param _amount Amount of assets to mint shares for\\n    /// @return Returns amount of shares available for minting\\n    function mintableShares(uint _amount) external view returns (uint);\\n\\n    /// @notice Returns amount of assets for the given account with the given shares amount\\n    /// @return Amount of assets for the given account with the given shares amount\\n    function assetDataOf(address _account, uint _shares) external view returns (AssetData memory);\\n\\n    /// @notice Returns amount of assets for the given shares amount\\n    /// @param _shares Amount of shares\\n    /// @return Amount of assets\\n    function assetBalanceForShares(uint _shares) external view returns (uint);\\n\\n    /// @notice Asset balance of the given address\\n    /// @param _account Address to check balance of\\n    /// @return Returns asset balance of the given address\\n    function assetBalanceOf(address _account) external view returns (uint);\\n\\n    /// @notice Last asset balance for the given address\\n    /// @param _account Address to check balance of\\n    /// @return Returns last asset balance for the given address\\n    function lastAssetBalanceOf(address _account) external view returns (uint);\\n\\n    /// @notice Last asset balance\\n    /// @return Returns last asset balance\\n    function lastAssetBalance() external view returns (uint);\\n\\n    /// @notice Total shares supply\\n    /// @return Returns total shares supply\\n    function totalSupply() external view returns (uint);\\n\\n    /// @notice Shares balance of the given address\\n    /// @param _account Address to check balance of\\n    /// @return Returns shares balance of the given address\\n    function balanceOf(address _account) external view returns (uint);\\n\\n    /// @notice Returns the change in shares for a given amount of an asset\\n    /// @param _account Account to calculate shares for\\n    /// @param _amountInAsset Amount of asset to calculate shares\\n    /// @return newShares New shares value\\n    /// @return oldShares Old shares value\\n    function shareChange(address _account, uint _amountInAsset) external view returns (uint newShares, uint oldShares);\\n\\n    /// @notice Vault controller address\\n    /// @return Returns vault controller address\\n    function vaultController() external view returns (address);\\n\\n    /// @notice Stored asset address\\n    /// @return Returns stored asset address\\n    function asset() external view returns (address);\\n\\n    /// @notice Index registry address\\n    /// @return Returns index registry address\\n    function registry() external view returns (address);\\n\\n    /// @notice Percentage deposited using vault controller\\n    /// @return Returns percentage deposited using vault controller\\n    function currentDepositedPercentageInBP() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Fee pool interface\\n/// @notice Provides methods for fee management\\ninterface IFeePool {\\n    struct MintBurnInfo {\\n        address recipient;\\n        uint share;\\n    }\\n\\n    event Mint(address indexed index, address indexed recipient, uint share);\\n    event Burn(address indexed index, address indexed recipient, uint share);\\n    event SetMintingFeeInBP(address indexed account, address indexed index, uint16 mintingFeeInBP);\\n    event SetBurningFeeInBP(address indexed account, address indexed index, uint16 burningFeeInPB);\\n    event SetAUMScaledPerSecondsRate(address indexed account, address indexed index, uint AUMScaledPerSecondsRate);\\n\\n    event Withdraw(address indexed index, address indexed recipient, uint amount);\\n\\n    /// @notice Initializes FeePool with the given params\\n    /// @param _registry Index registry address\\n    function initialize(address _registry) external;\\n\\n    /// @notice Initializes index with provided fees and makes initial mint\\n    /// @param _index Index to initialize\\n    /// @param _mintingFeeInBP Minting fee to initialize with\\n    /// @param _burningFeeInBP Burning fee to initialize with\\n    /// @param _AUMScaledPerSecondsRate Aum scaled per second rate to initialize with\\n    /// @param _mintInfo Mint info object array containing mint recipient and amount for initial mint\\n    function initializeIndex(\\n        address _index,\\n        uint16 _mintingFeeInBP,\\n        uint16 _burningFeeInBP,\\n        uint _AUMScaledPerSecondsRate,\\n        MintBurnInfo[] calldata _mintInfo\\n    ) external;\\n\\n    /// @notice Mints fee pool shares to the given recipient in specified amount\\n    /// @param _index Index to mint fee pool's shares for\\n    /// @param _mintInfo Mint info object containing mint recipient and amount\\n    function mint(address _index, MintBurnInfo calldata _mintInfo) external;\\n\\n    /// @notice Burns fee pool shares to the given recipient in specified amount\\n    /// @param _index Index to burn fee pool's shares for\\n    /// @param _burnInfo Burn info object containing burn recipient and amount\\n    function burn(address _index, MintBurnInfo calldata _burnInfo) external;\\n\\n    /// @notice Mints fee pool shares to the given recipients in specified amounts\\n    /// @param _index Index to mint fee pool's shares for\\n    /// @param _mintInfo Mint info object array containing mint recipients and amounts\\n    function mintMultiple(address _index, MintBurnInfo[] calldata _mintInfo) external;\\n\\n    /// @notice Burns fee pool shares to the given recipients in specified amounts\\n    /// @param _index Index to burn fee pool's shares for\\n    /// @param _burnInfo Burn info object array containing burn recipients and amounts\\n    function burnMultiple(address _index, MintBurnInfo[] calldata _burnInfo) external;\\n\\n    /// @notice Sets index minting fee in base point format\\n    /// @param _index Index to set minting fee for\\n    /// @param _mintingFeeInBP New minting fee value\\n    function setMintingFeeInBP(address _index, uint16 _mintingFeeInBP) external;\\n\\n    /// @notice Sets index burning fee in base point format\\n    /// @param _index Index to set burning fee for\\n    /// @param _burningFeeInBP New burning fee value\\n    function setBurningFeeInBP(address _index, uint16 _burningFeeInBP) external;\\n\\n    /// @notice Sets AUM scaled per seconds rate that will be used for fee calculation\\n    /// @param _index Index to set AUM scaled per seconds rate for\\n    /// @param _AUMScaledPerSecondsRate New AUM scaled per seconds rate\\n    function setAUMScaledPerSecondsRate(address _index, uint _AUMScaledPerSecondsRate) external;\\n\\n    /// @notice Withdraws sender fees from the given index\\n    /// @param _index Index to withdraw fees from\\n    function withdraw(address _index) external;\\n\\n    /// @notice Withdraws platform fees from the given index to specified address\\n    /// @param _index Index to withdraw fees from\\n    /// @param _recipient Recipient to send fees to\\n    function withdrawPlatformFeeOf(address _index, address _recipient) external;\\n\\n    /// @notice Total shares in the given index\\n    /// @return Returns total shares in the given index\\n    function totalSharesOf(address _index) external view returns (uint);\\n\\n    /// @notice Shares of specified recipient in the given index\\n    /// @return Returns shares of specified recipient in the given index\\n    function shareOf(address _index, address _account) external view returns (uint);\\n\\n    /// @notice Minting fee in base point format\\n    /// @return Returns minting fee in base point (BP) format\\n    function mintingFeeInBPOf(address _index) external view returns (uint16);\\n\\n    /// @notice Burning fee in base point format\\n    /// @return Returns burning fee in base point (BP) format\\n    function burningFeeInBPOf(address _index) external view returns (uint16);\\n\\n    /// @notice AUM scaled per seconds rate\\n    /// @return Returns AUM scaled per seconds rate\\n    function AUMScaledPerSecondsRateOf(address _index) external view returns (uint);\\n\\n    /// @notice Returns withdrawable amount for specified account from given index\\n    /// @param _index Index to check withdrawable amount\\n    /// @param _account Recipient to check withdrawable amount for\\n    function withdrawableAmountOf(address _index, address _account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index router interface\\n/// @notice Describes methods allowing to mint and redeem index tokens\\ninterface IIndexRouter {\\n    struct MintParams {\\n        address index;\\n        uint amountInBase;\\n        address recipient;\\n    }\\n\\n    struct MintSwapParams {\\n        address index;\\n        address inputToken;\\n        uint amountInInputToken;\\n        address recipient;\\n        uint[] buyAssetMinAmounts;\\n        address[][] paths;\\n        address[] swapFactories;\\n    }\\n\\n    struct MintSwapValueParams {\\n        address index;\\n        address recipient;\\n        uint[] buyAssetMinAmounts;\\n        address[][] paths;\\n        address[] swapFactories;\\n    }\\n\\n    struct BurnParams {\\n        address index;\\n        uint amount;\\n        address recipient;\\n    }\\n\\n    struct BurnSwapParams {\\n        address index;\\n        uint amount;\\n        address recipient;\\n        address[][] paths;\\n        address[] swapFactories;\\n        uint[] buyAssetMinAmounts;\\n    }\\n\\n    /// @notice WETH receive payable method\\n    receive() external payable;\\n\\n    /// @notice Mints index in exchange for appropriate index tokens withdrawn from the sender\\n    /// @param _params Mint params structure containing mint amounts, token references and other details\\n    function mint(MintParams calldata _params) external;\\n\\n    /// @notice Mints index in exchange for specified asset withdrawn from the sender\\n    /// @param _params Mint params structure containing mint recipient, amounts and other details\\n    function mintSwap(MintSwapParams calldata _params) external;\\n\\n    /// @notice Mints index in exchange for specified asset withdrawn from the sender\\n    /// @param _params Mint params structure containing mint recipient, amounts and other details\\n    /// @param _deadline Maximum unix timestamp at which the signature is still valid\\n    /// @param _v Last byte of the signed data\\n    /// @param _r The first 64 bytes of the signed data\\n    /// @param _s Bytes 64\u2026128 of the signed data\\n    function mintSwapWithPermit(\\n        MintSwapParams calldata _params,\\n        uint _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /// @notice Mints index in exchange for ETH withdrawn from the sender\\n    /// @param _params Mint params structure containing mint recipient, amounts and other details\\n    function mintSwapValue(MintSwapValueParams calldata _params) external payable;\\n\\n    /// @notice Burns index and returns corresponding amount of index tokens to the sender\\n    /// @param _params Burn params structure containing burn recipient, amounts and other details\\n    function burn(BurnParams calldata _params) external;\\n\\n    /// @notice Burns index and returns corresponding amount of index tokens to the sender\\n    /// @param _params Burn params structure containing burn recipient, amounts and other details\\n    /// @param _deadline Maximum unix timestamp at which the signature is still valid\\n    /// @param _v Last byte of the signed data\\n    /// @param _r The first 64 bytes of the signed data\\n    /// @param _s Bytes 64\u2026128 of the signed data\\n    function burnWithPermit(\\n        BurnParams calldata _params,\\n        uint _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /// @notice Burns index and returns corresponding amount of specified asset to the sender\\n    /// @param _params Burn params structure containing burn recipient, amounts and other details\\n    function burnSwap(BurnSwapParams calldata _params) external;\\n\\n    /// @notice Burns index and returns corresponding amount of specified asset to the sender\\n    /// @param _params Burn params structure containing burn recipient, amounts and other details\\n    /// @param _deadline Maximum unix timestamp at which the signature is still valid\\n    /// @param _v Last byte of the signed data\\n    /// @param _r The first 64 bytes of the signed data\\n    /// @param _s Bytes 64\u2026128 of the signed data\\n    function burnSwapWithPermit(\\n        BurnSwapParams calldata _params,\\n        uint _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /// @notice Burns index and returns corresponding amount of ETH to the sender\\n    /// @param _params Burn params structure containing burn recipient, amounts and other details\\n    function burnSwapValue(BurnSwapParams calldata _params) external;\\n\\n    /// @notice Burns index and returns corresponding amount of ETH to the sender\\n    /// @param _params Burn params structure containing burn recipient, amounts and other details\\n    /// @param _deadline Maximum unix timestamp at which the signature is still valid\\n    /// @param _v Last byte of the signed data\\n    /// @param _r The first 64 bytes of the signed data\\n    /// @param _s Bytes 64\u2026128 of the signed data\\n    function burnSwapValueWithPermit(\\n        BurnSwapParams calldata _params,\\n        uint _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /// @notice Index registry address\\n    /// @return Returns index registry address\\n    function registry() external view returns (address);\\n\\n    /// @notice WETH contract address\\n    /// @return Returns WETH contract address\\n    function WETH() external view returns (address);\\n\\n    /// @notice mintSwapIndexAmount\\n    /// @param _params Mint params structure containing mint recipient, amounts and other details\\n    function mintSwapIndexAmount(MintSwapParams calldata _params) external view returns (uint);\\n\\n    /// @notice burnTokensAmount\\n    /// @param _index Index contract address\\n    /// @param _amount Amount of index to burn\\n    function burnTokensAmount(address _index, uint _amount) external view returns (uint[] memory amounts);\\n\\n    /// @notice burnTokenValue\\n    /// @param _params Burn params structure containing burn recipient, amounts and other details\\n    function burnTokenValue(BurnSwapParams calldata _params) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IvTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title vToken factory interface\\n/// @notice Contains vToken creation logic\\ninterface IvTokenFactory {\\n    event VTokenCreated(address vToken, address asset);\\n\\n    /// @notice Initialize vToken factory with the given params\\n    /// @param _registry Index registry address\\n    /// @param _vTokenImpl Address of vToken implementation\\n    function initialize(address _registry, address _vTokenImpl) external;\\n\\n    /// @notice Upgrades beacon implementation\\n    /// @param _vTokenImpl Address of vToken implementation\\n    function upgradeBeaconTo(address _vTokenImpl) external;\\n\\n    /// @notice Creates vToken for the given asset\\n    /// @param _asset Asset to create vToken for\\n    function createVToken(address _asset) external;\\n\\n    /// @notice Creates and returns or returns address of previously created vToken for the given asset\\n    /// @param _asset Asset to create or return vToken for\\n    function createdVTokenOf(address _asset) external returns (address);\\n\\n    /// @notice Returns beacon address\\n    /// @return Beacon address\\n    function beacon() external view returns (address);\\n\\n    /// @notice Returns vToken for the given asset\\n    /// @param _asset Asset to retrieve vToken for\\n    /// @return vToken for the given asset\\n    function vTokenOf(address _asset) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IIndexFactory.sol\\\";\\n\\n/// @title Index registry interface\\n/// @notice Contains core components, addresses and asset market capitalizations\\ninterface IIndexRegistry {\\n    event SetIndexLogic(address indexed account, address indexLogic);\\n    event SetMaxComponents(address indexed account, uint maxComponents);\\n    event UpdateAsset(address indexed asset, uint marketCap);\\n    event SetOrderer(address indexed account, address orderer);\\n    event SetFeePool(address indexed account, address feePool);\\n    event SetPriceOracle(address indexed account, address priceOracle);\\n\\n    /// @notice Initializes IndexRegistry with the given params\\n    /// @param _indexLogic Index logic address\\n    /// @param _maxComponents Maximum assets for an index\\n    function initialize(address _indexLogic, uint _maxComponents) external;\\n\\n    /// @notice Sets maximum assets for an index\\n    /// @param _maxComponents Maximum assets for an index\\n    function setMaxComponents(uint _maxComponents) external;\\n\\n    /// @notice Index logic address\\n    /// @return Returns index logic address\\n    function indexLogic() external returns (address);\\n\\n    /// @notice Sets index logic address\\n    /// @param _indexLogic Index logic address\\n    function setIndexLogic(address _indexLogic) external;\\n\\n    /// @notice Sets adminRole as role's admin role.\\n    /// @param _role Role\\n    /// @param _adminRole AdminRole of given role\\n    function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external;\\n\\n    /// @notice Registers new index\\n    /// @param _index Index address\\n    /// @param _nameDetails Name details (name and symbol) for provided index\\n    function registerIndex(address _index, IIndexFactory.NameDetails calldata _nameDetails) external;\\n\\n    /// @notice Registers asset in the system, updates it's market capitalization and assigns required roles\\n    /// @param _asset Asset to register\\n    /// @param _marketCap It's current market capitalization\\n    function addAsset(address _asset, uint _marketCap) external;\\n\\n    /// @notice Removes assets from the system\\n    /// @param _asset Asset to remove\\n    function removeAsset(address _asset) external;\\n\\n    /// @notice Updates market capitalization for the given asset\\n    /// @param _asset Asset address to update market capitalization for\\n    /// @param _marketCap Market capitalization value\\n    function updateAssetMarketCap(address _asset, uint _marketCap) external;\\n\\n    /// @notice Sets price oracle address\\n    /// @param _priceOracle Price oracle address\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    /// @notice Sets orderer address\\n    /// @param _orderer Orderer address\\n    function setOrderer(address _orderer) external;\\n\\n    /// @notice Sets fee pool address\\n    /// @param _feePool Fee pool address\\n    function setFeePool(address _feePool) external;\\n\\n    /// @notice Maximum assets for an index\\n    /// @return Returns maximum assets for an index\\n    function maxComponents() external view returns (uint);\\n\\n    /// @notice Market capitalization of provided asset\\n    /// @return _asset Returns market capitalization of provided asset\\n    function marketCapOf(address _asset) external view returns (uint);\\n\\n    /// @notice Returns total market capitalization of the given assets\\n    /// @param _assets Assets array to calculate market capitalization of\\n    /// @return _marketCaps Corresponding capitalizations of the given asset\\n    /// @return _totalMarketCap Total market capitalization of the given assets\\n    function marketCapsOf(address[] calldata _assets)\\n        external\\n        view\\n        returns (uint[] memory _marketCaps, uint _totalMarketCap);\\n\\n    /// @notice Total market capitalization of all registered assets\\n    /// @return Returns total market capitalization of all registered assets\\n    function totalMarketCap() external view returns (uint);\\n\\n    /// @notice Price oracle address\\n    /// @return Returns price oracle address\\n    function priceOracle() external view returns (address);\\n\\n    /// @notice Orderer address\\n    /// @return Returns orderer address\\n    function orderer() external view returns (address);\\n\\n    /// @notice Fee pool address\\n    /// @return Returns fee pool address\\n    function feePool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPhuturePriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\n\\n/// @title Phuture price oracle interface\\n/// @notice Aggregates all price oracles and works with them through IPriceOracle interface\\ninterface IPhuturePriceOracle is IPriceOracle {\\n    /// @notice Initializes price oracle\\n    /// @param _registry Index registry address\\n    /// @param _base Base asset\\n    function initialize(address _registry, address _base) external;\\n\\n    /// @notice Assigns given oracle to specified asset. Then oracle will be used to manage asset price\\n    /// @param _asset Asset to register\\n    /// @param _oracle Oracle to assign\\n    function setOracleOf(address _asset, address _oracle) external;\\n\\n    /// @notice Removes oracle of specified asset\\n    /// @param _asset Asset to remove oracle from\\n    function removeOracleOf(address _asset) external;\\n\\n    /// @notice Converts to index amount\\n    /// @param _baseAmount Amount in base\\n    /// @param _indexDecimals Index's decimals\\n    /// @return Asset per base in UQ with index decimals\\n    function convertToIndex(uint _baseAmount, uint8 _indexDecimals) external view returns (uint);\\n\\n    /// @notice Checks if the given asset has oracle assigned\\n    /// @param _asset Asset to check\\n    /// @return Returns boolean flag defining if the given asset has oracle assigned\\n    function containsOracleOf(address _asset) external view returns (bool);\\n\\n    /// @notice Price oracle assigned to the given `_asset`\\n    /// @param _asset Asset to obtain price oracle for\\n    /// @return Returns price oracle assigned to the `_asset`\\n    function priceOracleOf(address _asset) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (~denominator + 1) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPoint112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.8.13;\\n\\n/// @title FixedPoint112\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint112 {\\n    uint8 internal constant RESOLUTION = 112;\\n    /// @dev 2**112\\n    uint256 internal constant Q112 = 0x10000000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexLayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index layout interface\\n/// @notice Contains storage layout of index\\ninterface IIndexLayout {\\n    /// @notice Index factory address\\n    /// @return Returns index factory address\\n    function factory() external view returns (address);\\n\\n    /// @notice vTokenFactory address\\n    /// @return Returns vTokenFactory address\\n    function vTokenFactory() external view returns (address);\\n\\n    /// @notice Registry address\\n    /// @return Returns registry address\\n    function registry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAnatomyUpdater.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Anatomy Updater interface\\n/// @notice Contains event for aatomy update\\ninterface IAnatomyUpdater {\\n    event UpdateAnatomy(address asset, uint8 weight);\\n    event AssetRemoved(address asset);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIndexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Index factory interface\\n/// @notice Contains logic for initial fee management for indexes which will be created by this factory\\ninterface IIndexFactory {\\n    struct NameDetails {\\n        string name;\\n        string symbol;\\n    }\\n\\n    event SetVTokenFactory(address vTokenFactory);\\n    event SetDefaultMintingFeeInBP(address indexed account, uint16 mintingFeeInBP);\\n    event SetDefaultBurningFeeInBP(address indexed account, uint16 burningFeeInBP);\\n    event SetDefaultAUMScaledPerSecondsRate(address indexed account, uint AUMScaledPerSecondsRate);\\n\\n    /// @notice Sets default index minting fee in base point (BP) format\\n    /// @dev Will be set in FeePool on index creation\\n    /// @param _mintingFeeInBP New minting fee value\\n    function setDefaultMintingFeeInBP(uint16 _mintingFeeInBP) external;\\n\\n    /// @notice Sets default index burning fee in base point (BP) format\\n    /// @dev Will be set in FeePool on index creation\\n    /// @param _burningFeeInBP New burning fee value\\n    function setDefaultBurningFeeInBP(uint16 _burningFeeInBP) external;\\n\\n    /// @notice Sets reweighting logic address\\n    /// @param _reweightingLogic Reweighting logic address\\n    function setReweightingLogic(address _reweightingLogic) external;\\n\\n    /// @notice Sets default AUM scaled per seconds rate that will be used for fee calculation\\n    /**\\n        @dev Will be set in FeePool on index creation.\\n        Effective management fee rate (annual, in percent, after dilution) is calculated by the given formula:\\n        fee = (rpow(scaledPerSecondRate, numberOfSeconds, 10*27) - 10**27) * totalSupply / 10**27, where:\\n\\n        totalSupply - total index supply;\\n        numberOfSeconds - delta time for calculation period;\\n        scaledPerSecondRate - scaled rate, calculated off chain by the given formula:\\n\\n        scaledPerSecondRate = ((1 + k) ** (1 / 365 days)) * AUMCalculationLibrary.RATE_SCALE_BASE, where:\\n        k = (aumFeeInBP / BP) / (1 - aumFeeInBP / BP);\\n\\n        Note: rpow and RATE_SCALE_BASE are provided by AUMCalculationLibrary\\n        More info: https://docs.enzyme.finance/fee-formulas/management-fee\\n\\n        After value calculated off chain, scaledPerSecondRate is set to setDefaultAUMScaledPerSecondsRate\\n    */\\n    /// @param _AUMScaledPerSecondsRate New AUM scaled per seconds rate\\n    function setDefaultAUMScaledPerSecondsRate(uint _AUMScaledPerSecondsRate) external;\\n\\n    /// @notice Withdraw fee balance to fee pool for a given index\\n    /// @param _index Index to withdraw fee balance from\\n    function withdrawToFeePool(address _index) external;\\n\\n    /// @notice Index registry address\\n    /// @return Returns index registry address\\n    function registry() external view returns (address);\\n\\n    /// @notice vTokenFactory address\\n    /// @return Returns vTokenFactory address\\n    function vTokenFactory() external view returns (address);\\n\\n    /// @notice Minting fee in base point (BP) format\\n    /// @return Returns minting fee in base point (BP) format\\n    function defaultMintingFeeInBP() external view returns (uint16);\\n\\n    /// @notice Burning fee in base point (BP) format\\n    /// @return Returns burning fee in base point (BP) format\\n    function defaultBurningFeeInBP() external view returns (uint16);\\n\\n    /// @notice AUM scaled per seconds rate\\n    ///         See setDefaultAUMScaledPerSecondsRate method description for more details.\\n    /// @return Returns AUM scaled per seconds rate\\n    function defaultAUMScaledPerSecondsRate() external view returns (uint);\\n\\n    /// @notice Reweighting logic address\\n    /// @return Returns reweighting logic address\\n    function reweightingLogic() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n/// @title Price oracle interface\\n/// @notice Returns price of single asset in relation to base\\ninterface IPriceOracle {\\n    /// @notice Updates and returns asset per base\\n    /// @return Asset per base in UQ\\n    function refreshedAssetPerBaseInUQ(address _asset) external returns (uint);\\n\\n    /// @notice Returns last asset per base\\n    /// @return Asset per base in UQ\\n    function lastAssetPerBaseInUQ(address _asset) external view returns (uint);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IIndexRouter.BurnParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"swapFactories\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAssetMinAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IIndexRouter.BurnSwapParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"burnSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"swapFactories\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAssetMinAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IIndexRouter.BurnSwapParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"burnSwapValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"swapFactories\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAssetMinAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IIndexRouter.BurnSwapParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"burnSwapValueWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"swapFactories\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAssetMinAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IIndexRouter.BurnSwapParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"burnSwapWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"swapFactories\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAssetMinAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IIndexRouter.BurnSwapParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"burnTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTokensAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IIndexRouter.BurnParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"burnWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IIndexRouter.MintParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInInputToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAssetMinAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"swapFactories\",\"type\":\"address[]\"}],\"internalType\":\"struct IIndexRouter.MintSwapParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"mintSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInInputToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAssetMinAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"swapFactories\",\"type\":\"address[]\"}],\"internalType\":\"struct IIndexRouter.MintSwapParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"mintSwapIndexAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAssetMinAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"swapFactories\",\"type\":\"address[]\"}],\"internalType\":\"struct IIndexRouter.MintSwapValueParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"mintSwapValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInInputToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAssetMinAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"swapFactories\",\"type\":\"address[]\"}],\"internalType\":\"struct IIndexRouter.MintSwapParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"mintSwapWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "IndexRouter", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000008f971223b4bd9649702f10d306e469e6dbe3e3e9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}