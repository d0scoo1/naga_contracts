{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"BidProxy.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./IKittyCore.sol\\\";\\r\\nimport \\\"./ISaleClockAuction.sol\\\";\\r\\n\\r\\ncontract BidProxy is Pausable {\\r\\n\\r\\n    IKittyCore private immutable kitties;\\r\\n    ISaleClockAuction private immutable saleAuction;\\r\\n\\r\\n    address private constant WALLET1 = 0x37932f3ECA864632156CcbA7E2814b51A374caEc;\\r\\n    address private constant WALLET2 = 0x989A2ad9aCaa8C4e50B2fC6B650d6e1809b9195b;\\r\\n\\r\\n    constructor(address _kitties, address _saleAuction) {\\r\\n        kitties = IKittyCore(_kitties);\\r\\n        saleAuction = ISaleClockAuction(_saleAuction);\\r\\n    }\\r\\n\\r\\n    function _warmUpDapperWallet(address wallet) private view {\\r\\n        // query dapper wallet first, so it is added into a list of warm addresses\\r\\n        // various techniques can be used to warm up the address\\r\\n        // query balance, extcodehash, extcodesize\\r\\n        // it seems solidity compiler compiles them out since the result is not used\\r\\n        // however it keeps extcodecopy, therefore use extcodecopy to warmup the address\\r\\n        assembly { // solhint-disable-line no-inline-assembly\\r\\n            extcodecopy(wallet, 0, 0, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable whenNotPaused {\\r\\n        if (msg.value \\u003e 0) {\\r\\n            // accept the change from the sale auction contract\\r\\n            require(msg.sender == address(saleAuction));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _bid(uint256 _kittyId) private {\\r\\n        uint256 balanceBefore = address(this).balance - msg.value;\\r\\n\\r\\n        // buy the kitty on behalf of the caller\\r\\n        saleAuction.bid{value: msg.value}(_kittyId);\\r\\n\\r\\n        // transfer the kitty back to the caller\\r\\n        kitties.transfer(msg.sender, _kittyId);\\r\\n\\r\\n        // make sure that the caller received their kitty\\r\\n        require(kitties.ownerOf(_kittyId) == msg.sender);\\r\\n\\r\\n        uint256 balanceAfter = address(this).balance;\\r\\n        uint256 change = balanceAfter - balanceBefore;\\r\\n        // send any change back to the caller\\r\\n        if (change \\u003e 0) {\\r\\n            payable(msg.sender).transfer(change);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bid(uint256 _kittyId) external payable whenNotPaused {\\r\\n        _warmUpDapperWallet(WALLET1);\\r\\n        _warmUpDapperWallet(WALLET2);\\r\\n        _bid(_kittyId);\\r\\n    }\\r\\n\\r\\n    function bidWithSpecificWarmups(uint256 _kittyId, address[] calldata _accountsToWarmUp) external payable whenNotPaused {\\r\\n        uint256 len = _accountsToWarmUp.length;\\r\\n        for (uint256 i = 0; i \\u003c len; i += 1) {\\r\\n            _warmUpDapperWallet(_accountsToWarmUp[i]);\\r\\n        }\\r\\n        _bid(_kittyId);\\r\\n    }\\r\\n\\r\\n    /// @dev Transfers a kitty owned by this contract to the specified address.\\r\\n    ///  Used to rescue lost kitties. (There is no \\\"proper\\\" flow where this contract\\r\\n    ///  should be the owner of any Kitty. This function exists for us to reassign\\r\\n    ///  the ownership of Kitties that users may have accidentally sent to our address.)\\r\\n    /// @param _kittyId - ID of kitty\\r\\n    /// @param _recipient - Address to send the cat to\\r\\n    function rescueLostKitty(uint256 _kittyId, address _recipient) external onlyOwner whenNotPaused {\\r\\n        kitties.transfer(_recipient, _kittyId);\\r\\n    }\\r\\n\\r\\n    /// @dev can be used to make arbitrary calls in context of this contract\\r\\n    ///  This contract is not supposed to hold user assets\\r\\n    ///  This function acts like an escape hatch that allows owner to perform all sorts of rescue operations\\r\\n    ///  Rescue kitty (there is a separate function for this common use case)\\r\\n    ///  Rescue ETH, WETH sent to this contract, etc\\r\\n    function call(address payable _to, uint256 _value, bytes calldata _data) external onlyOwner whenNotPaused payable returns (bytes memory) {\\r\\n        require(_to != address(0));\\r\\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data); // solhint-disable-line avoid-low-level-calls\\r\\n        require(_success);\\r\\n        return _result;\\r\\n    }\\r\\n}\\r\\n\"},\"IKittyCore.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IKittyCore {\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\\r\\n    function transfer(address _to, uint256 _tokenId) external;\\r\\n}\\r\\n\"},\"ISaleClockAuction.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ISaleClockAuction {\\r\\n    function bid(uint256 _tokenId) external payable;\\r\\n    function getAuction(uint256 _tokenId) external view returns (address seller, uint256 startingPrice, uint256 endingPrice, uint256 duration, uint256 startedAt);\\r\\n    function getCurrentPrice(uint256 _tokenId) external view returns (uint256);\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) external onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"Pausable.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Pausable\\r\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\r\\n */\\r\\ncontract Pausable is Ownable {\\r\\n    event Pause();\\r\\n    event Unpause();\\r\\n\\r\\n    bool public paused = false;\\r\\n\\r\\n    /**\\r\\n     * @dev modifier to allow actions only when the contract IS paused\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev modifier to allow actions only when the contract IS NOT paused\\r\\n     */\\r\\n    modifier whenPaused {\\r\\n        require(paused);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to pause, triggers stopped state\\r\\n     */\\r\\n    function pause() external onlyOwner whenNotPaused returns (bool) {\\r\\n        paused = true;\\r\\n        emit Pause();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev called by the owner to unpause, returns to normal state\\r\\n     */\\r\\n    function unpause() external onlyOwner whenPaused returns (bool) {\\r\\n        paused = false;\\r\\n        emit Unpause();\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kitties\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_saleAuction\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kittyId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_accountsToWarmUp\",\"type\":\"address[]\"}],\"name\":\"bidWithSpecificWarmups\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kittyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLostKitty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BidProxy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d000000000000000000000000b1690c08e213a35ed9bab7b318de14420fb57d8c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1135c6702cb75914a2328f62a132823ae6a643fc1ffebd5cf6ba7569f3477aba"}]}