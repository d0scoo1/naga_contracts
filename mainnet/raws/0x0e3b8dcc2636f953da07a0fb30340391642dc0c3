{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n\r\n    function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n}\r\n\r\n/**\r\n * THIS EXAMPLE USES UN-AUDITED CODE.\r\n * Network: Kovan\r\n * Base: BTC/USD\r\n * Base Address: 0x6135b13325bfC4B00278B4abC5e20bbce2D6580e\r\n * Quote: EUR/USD\r\n * Quote Address: 0x0c15Ab9A0DB086e062194c273CC79f41597Bbf13\r\n * Decimals: 8\r\n */\r\n\r\ncontract PriceConverter {\r\n    function getDerivedPrice(address _base, address _quote, uint8 _decimals)\r\n    public\r\n    view\r\n    returns (int256)\r\n    {\r\n        require(_decimals > uint8(0) && _decimals <= uint8(18), \"Invalid _decimals\");\r\n        int256 decimals = int256(10 ** uint256(_decimals));\r\n        ( , int256 basePrice, , , ) = AggregatorV3Interface(_base).latestRoundData();\r\n        uint8 baseDecimals = AggregatorV3Interface(_base).decimals();\r\n        basePrice = scalePrice(basePrice, baseDecimals, _decimals);\r\n\r\n        ( , int256 quotePrice, , , ) = AggregatorV3Interface(_quote).latestRoundData();\r\n        uint8 quoteDecimals = AggregatorV3Interface(_quote).decimals();\r\n        quotePrice = scalePrice(quotePrice, quoteDecimals, _decimals);\r\n\r\n        return basePrice * decimals / quotePrice;\r\n    }\r\n\r\n    function scalePrice(int256 _price, uint8 _priceDecimals, uint8 _decimals)\r\n    internal\r\n    pure\r\n    returns (int256)\r\n    {\r\n        if (_priceDecimals < _decimals) {\r\n            return _price * int256(10 ** uint256(_decimals - _priceDecimals));\r\n        } else if (_priceDecimals > _decimals) {\r\n            return _price / int256(10 ** uint256(_priceDecimals - _decimals));\r\n        }\r\n        return _price;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"getDerivedPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PriceConverter", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://094dfe4fd5eab55e1f77bc46b0711a23fde7761419f9c3db9aaa4064159735d2"}]}