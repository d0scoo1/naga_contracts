{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TRRolls.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './TRColors.sol';\\n\\ninterface ITRRolls {\\n\\n  struct RelicInfo {\\n    string element;\\n    string palette;\\n    string essence;\\n    uint256 colorCount;\\n    string style;\\n    string speed;\\n    string gravity;\\n    string display;\\n    string relicType;\\n    string glyphType;\\n    uint256 runeflux;\\n    uint256 corruption;\\n    uint256 grailId;\\n    uint256[] grailGlyph;\\n  }\\n\\n  function getRelicInfo(TRKeys.RuneCore memory core) external view returns (RelicInfo memory);\\n  function getElement(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getPalette(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getEssence(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getStyle(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getSpeed(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getGravity(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getDisplay(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getColorCount(TRKeys.RuneCore memory core) external view returns (uint256);\\n  function getColorByIndex(TRKeys.RuneCore memory core, uint256 index) external view returns (string memory);\\n  function getRelicType(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getGlyphType(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getRuneflux(TRKeys.RuneCore memory core) external view returns (uint256);\\n  function getCorruption(TRKeys.RuneCore memory core) external view returns (uint256);\\n  function getDescription(TRKeys.RuneCore memory core) external view returns (string memory);\\n  function getGrailId(TRKeys.RuneCore memory core) external pure returns (uint256);\\n\\n}\\n\\n/// @notice The Reliquary Rarity Distribution\\ncontract TRRolls is Ownable, ITRRolls {\\n\\n  mapping(uint256 => address) public grailContracts;\\n\\n  error GrailsAreImmutable();\\n\\n  constructor() Ownable() {}\\n\\n  function getRelicInfo(TRKeys.RuneCore memory core)\\n    override\\n    public\\n    view\\n    returns (RelicInfo memory)\\n  {\\n    RelicInfo memory info;\\n    info.element = getElement(core);\\n    info.palette = getPalette(core);\\n    info.essence = getEssence(core);\\n    info.colorCount = getColorCount(core);\\n    info.style = getStyle(core);\\n    info.speed = getSpeed(core);\\n    info.gravity = getGravity(core);\\n    info.display = getDisplay(core);\\n    info.relicType = getRelicType(core);\\n    info.glyphType = getGlyphType(core);\\n    info.runeflux = getRuneflux(core);\\n    info.corruption = getCorruption(core);\\n    info.grailId = getGrailId(core);\\n\\n    if (info.grailId != TRKeys.GRAIL_ID_NONE) {\\n      info.grailGlyph = Grail(grailContracts[info.grailId]).getGlyph();\\n    }\\n\\n    return info;\\n  }\\n\\n  function getElement(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getElement();\\n    }\\n\\n    if (bytes(core.transmutation).length > 0) {\\n      return core.transmutation;\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_ELEMENT);\\n    if (roll <= uint256(125)) {\\n      return TRKeys.ELEM_NATURE;\\n    } else if (roll <= uint256(250)) {\\n      return TRKeys.ELEM_LIGHT;\\n    } else if (roll <= uint256(375)) {\\n      return TRKeys.ELEM_WATER;\\n    } else if (roll <= uint256(500)) {\\n      return TRKeys.ELEM_EARTH;\\n    } else if (roll <= uint256(625)) {\\n      return TRKeys.ELEM_WIND;\\n    } else if (roll <= uint256(750)) {\\n      return TRKeys.ELEM_ARCANE;\\n    } else if (roll <= uint256(875)) {\\n      return TRKeys.ELEM_SHADOW;\\n    } else {\\n      return TRKeys.ELEM_FIRE;\\n    }\\n  }\\n\\n  function getPalette(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getPalette();\\n    }\\n\\n    if (core.colors.length > 0) {\\n      return TRKeys.ANY_PAL_CUSTOM;\\n    }\\n\\n    string memory element = getElement(core);\\n    uint256 roll = roll1000(core, TRKeys.ROLL_PALETTE);\\n    if (TRUtils.compare(element, TRKeys.ELEM_NATURE)) {\\n      return getNaturePalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_LIGHT)) {\\n      return getLightPalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_WATER)) {\\n      return getWaterPalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_EARTH)) {\\n      return getEarthPalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_WIND)) {\\n      return getWindPalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_ARCANE)) {\\n      return getArcanePalette(roll);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_SHADOW)) {\\n      return getShadowPalette(roll);\\n    } else {\\n      return getFirePalette(roll);\\n    }\\n  }\\n\\n  function getNaturePalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.NAT_PAL_JUNGLE;\\n    } else if (roll <= 900) {\\n      return TRKeys.NAT_PAL_CAMOUFLAGE;\\n    } else {\\n      return TRKeys.NAT_PAL_BIOLUMINESCENCE;\\n    }\\n  }\\n\\n  function getLightPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.LIG_PAL_PASTEL;\\n    } else if (roll <= 900) {\\n      return TRKeys.LIG_PAL_INFRARED;\\n    } else {\\n      return TRKeys.LIG_PAL_ULTRAVIOLET;\\n    }\\n  }\\n\\n  function getWaterPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.WAT_PAL_FROZEN;\\n    } else if (roll <= 900) {\\n      return TRKeys.WAT_PAL_DAWN;\\n    } else {\\n      return TRKeys.WAT_PAL_OPALESCENT;\\n    }\\n  }\\n\\n  function getEarthPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.EAR_PAL_COAL;\\n    } else if (roll <= 900) {\\n      return TRKeys.EAR_PAL_SILVER;\\n    } else {\\n      return TRKeys.EAR_PAL_GOLD;\\n    }\\n  }\\n\\n  function getWindPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.WIN_PAL_BERRY;\\n    } else if (roll <= 900) {\\n      return TRKeys.WIN_PAL_THUNDER;\\n    } else {\\n      return TRKeys.WIN_PAL_AERO;\\n    }\\n  }\\n\\n  function getArcanePalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.ARC_PAL_FROSTFIRE;\\n    } else if (roll <= 900) {\\n      return TRKeys.ARC_PAL_COSMIC;\\n    } else {\\n      return TRKeys.ARC_PAL_COLORLESS;\\n    }\\n  }\\n\\n  function getShadowPalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.SHA_PAL_DARKNESS;\\n    } else if (roll <= 900) {\\n      return TRKeys.SHA_PAL_VOID;\\n    } else {\\n      return TRKeys.SHA_PAL_UNDEAD;\\n    }\\n  }\\n\\n  function getFirePalette(uint256 roll) public pure returns (string memory) {\\n    if (roll <= 600) {\\n      return TRKeys.FIR_PAL_HEAT;\\n    } else if (roll <= 900) {\\n      return TRKeys.FIR_PAL_EMBER;\\n    } else {\\n      return TRKeys.FIR_PAL_CORRUPTED;\\n    }\\n  }\\n\\n  function getEssence(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getEssence();\\n    }\\n\\n    string memory element = getElement(core);\\n    string memory relicType = getRelicType(core);\\n    if (TRUtils.compare(element, TRKeys.ELEM_NATURE)) {\\n      return getNatureEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_LIGHT)) {\\n      return getLightEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_WATER)) {\\n      return getWaterEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_EARTH)) {\\n      return getEarthEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_WIND)) {\\n      return getWindEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_ARCANE)) {\\n      return getArcaneEssence(relicType);\\n    } else if (TRUtils.compare(element, TRKeys.ELEM_SHADOW)) {\\n      return getShadowEssence(relicType);\\n    } else {\\n      return getFireEssence(relicType);\\n    }\\n  }\\n\\n  function getNatureEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.NAT_ESS_FOREST;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.NAT_ESS_SWAMP;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.NAT_ESS_WILDBLOOD;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.NAT_ESS_LIFE;\\n    } else {\\n      return TRKeys.NAT_ESS_SOUL;\\n    }\\n  }\\n\\n  function getLightEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.LIG_ESS_HEAVENLY;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.LIG_ESS_FAE;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.LIG_ESS_PRISMATIC;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.LIG_ESS_RADIANT;\\n    } else {\\n      return TRKeys.LIG_ESS_PHOTONIC;\\n    }\\n  }\\n\\n  function getWaterEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.WAT_ESS_TIDAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.WAT_ESS_ARCTIC;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.WAT_ESS_STORM;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.WAT_ESS_ILLUVIAL;\\n    } else {\\n      return TRKeys.WAT_ESS_UNDINE;\\n    }\\n  }\\n\\n  function getEarthEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.EAR_ESS_MINERAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.EAR_ESS_CRAGGY;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.EAR_ESS_DWARVEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.EAR_ESS_GNOMIC;\\n    } else {\\n      return TRKeys.EAR_ESS_CRYSTAL;\\n    }\\n  }\\n\\n  function getWindEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.WIN_ESS_SYLPHIC;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.WIN_ESS_VISCERAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.WIN_ESS_FROSTED;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.WIN_ESS_ELECTRIC;\\n    } else {\\n      return TRKeys.WIN_ESS_MAGNETIC;\\n    }\\n  }\\n\\n  function getArcaneEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.ARC_ESS_MAGIC;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.ARC_ESS_ASTRAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.ARC_ESS_FORBIDDEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.ARC_ESS_RUNIC;\\n    } else {\\n      return TRKeys.ARC_ESS_UNKNOWN;\\n    }\\n  }\\n\\n  function getShadowEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.SHA_ESS_NIGHT;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.SHA_ESS_FORGOTTEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.SHA_ESS_ABYSSAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.SHA_ESS_EVIL;\\n    } else {\\n      return TRKeys.SHA_ESS_LOST;\\n    }\\n  }\\n\\n  function getFireEssence(string memory relicType) public pure returns (string memory) {\\n    if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TRINKET)) {\\n      return TRKeys.FIR_ESS_INFERNAL;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_TALISMAN)) {\\n      return TRKeys.FIR_ESS_MOLTEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_AMULET)) {\\n      return TRKeys.FIR_ESS_ASHEN;\\n    } else if (TRUtils.compare(relicType, TRKeys.RELIC_TYPE_FOCUS)) {\\n      return TRKeys.FIR_ESS_DRACONIC;\\n    } else {\\n      return TRKeys.FIR_ESS_CELESTIAL;\\n    }\\n  }\\n\\n  function getStyle(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getStyle();\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_STYLE);\\n    if (roll <= 760) {\\n      return TRKeys.STYLE_SMOOTH;\\n    } else if (roll <= 940) {\\n      return TRKeys.STYLE_SILK;\\n    } else if (roll <= 980) {\\n      return TRKeys.STYLE_PAJAMAS;\\n    } else {\\n      return TRKeys.STYLE_SKETCH;\\n    }\\n  }\\n\\n  function getSpeed(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getSpeed();\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_SPEED);\\n    if (roll <= 70) {\\n      return TRKeys.SPEED_ZEN;\\n    } else if (roll <= 260) {\\n      return TRKeys.SPEED_TRANQUIL;\\n    } else if (roll <= 760) {\\n      return TRKeys.SPEED_NORMAL;\\n    } else if (roll <= 890) {\\n      return TRKeys.SPEED_FAST;\\n    } else if (roll <= 960) {\\n      return TRKeys.SPEED_SWIFT;\\n    } else {\\n      return TRKeys.SPEED_HYPER;\\n    }\\n  }\\n\\n  function getGravity(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getGravity();\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_GRAVITY);\\n    if (roll <= 50) {\\n      return TRKeys.GRAV_LUNAR;\\n    } else if (roll <= 150) {\\n      return TRKeys.GRAV_ATMOSPHERIC;\\n    } else if (roll <= 340) {\\n      return TRKeys.GRAV_LOW;\\n    } else if (roll <= 730) {\\n      return TRKeys.GRAV_NORMAL;\\n    } else if (roll <= 920) {\\n      return TRKeys.GRAV_HIGH;\\n    } else if (roll <= 970) {\\n      return TRKeys.GRAV_MASSIVE;\\n    } else if (roll <= 995) {\\n      return TRKeys.GRAV_STELLAR;\\n    } else {\\n      return TRKeys.GRAV_GALACTIC;\\n    }\\n  }\\n\\n  function getDisplay(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getDisplay();\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_DISPLAY);\\n    if (roll <= 250) {\\n      return TRKeys.DISPLAY_NORMAL;\\n    } else if (roll <= 500) {\\n      return TRKeys.DISPLAY_MIRRORED;\\n    } else if (roll <= 750) {\\n      return TRKeys.DISPLAY_UPSIDEDOWN;\\n    } else {\\n      return TRKeys.DISPLAY_MIRROREDUPSIDEDOWN;\\n    }\\n  }\\n\\n  function getColorCount(TRKeys.RuneCore memory core) override public view returns (uint256) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getColorCount();\\n    }\\n\\n    string memory style = getStyle(core);\\n    if (TRUtils.compare(style, TRKeys.STYLE_SILK)) {\\n      return 5;\\n    } else if (TRUtils.compare(style, TRKeys.STYLE_PAJAMAS)) {\\n      return 5;\\n    } else if (TRUtils.compare(style, TRKeys.STYLE_SKETCH)) {\\n      return 4;\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_COLORCOUNT);\\n    if (roll <= 400) {\\n      return 2;\\n    } else if (roll <= 750) {\\n      return 3;\\n    } else {\\n      return 4;\\n    }\\n  }\\n\\n  function getColorByIndex(TRKeys.RuneCore memory core, uint256 index)\\n    override\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    // if the requested index exceeds the color count, return empty string\\n    if (index >= getColorCount(core)) {\\n      return '';\\n    }\\n\\n    // if we've imagined new colors, use them instead\\n    if (core.colors.length > index) {\\n      return TRUtils.getColorCode(core.colors[index]);\\n    }\\n\\n    // fetch the color palette\\n    uint256[] memory colorInts;\\n    uint256 colorIntCount;\\n    (colorInts, colorIntCount) = TRColors.get(getPalette(core));\\n\\n    // shuffle the color palette\\n    uint256 i;\\n    uint256 temp;\\n    uint256 count = colorIntCount;\\n    while (count > 0) {\\n      string memory rollKey = string(abi.encodePacked(\\n        TRKeys.ROLL_SHUFFLE,\\n        TRUtils.toString(count)\\n      ));\\n\\n      i = roll1000(core, rollKey) % count;\\n\\n      temp = colorInts[--count];\\n      colorInts[count] = colorInts[i];\\n      colorInts[i] = temp;\\n    }\\n\\n    // slightly adjust the RGB channels of the color to make it unique\\n    temp = getWobbledColor(core, index, colorInts[index % colorIntCount]);\\n\\n    // return a hex code (without the #)\\n    return TRUtils.getColorCode(temp);\\n  }\\n\\n  function getWobbledColor(TRKeys.RuneCore memory core, uint256 index, uint256 color)\\n    public\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 r = (color >> uint256(16)) & uint256(255);\\n    uint256 g = (color >> uint256(8)) & uint256(255);\\n    uint256 b = color & uint256(255);\\n\\n    string memory k = TRUtils.toString(index);\\n    uint256 dr = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_RED, k))) % 8;\\n    uint256 dg = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_GREEN, k))) % 8;\\n    uint256 db = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_BLUE, k))) % 8;\\n    uint256 rSign = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_REDSIGN, k))) % 2;\\n    uint256 gSign = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_GREENSIGN, k))) % 2;\\n    uint256 bSign = rollMax(core, string(abi.encodePacked(TRKeys.ROLL_BLUESIGN, k))) % 2;\\n\\n    if (rSign == 0) {\\n      if (r > dr) {\\n        r -= dr;\\n      } else {\\n        r = 0;\\n      }\\n    } else {\\n      if (r + dr <= 255) {\\n        r += dr;\\n      } else {\\n        r = 255;\\n      }\\n    }\\n\\n    if (gSign == 0) {\\n      if (g > dg) {\\n        g -= dg;\\n      } else {\\n        g = 0;\\n      }\\n    } else {\\n      if (g + dg <= 255) {\\n        g += dg;\\n      } else {\\n        g = 255;\\n      }\\n    }\\n\\n    if (bSign == 0) {\\n      if (b > db) {\\n        b -= db;\\n      } else {\\n        b = 0;\\n      }\\n    } else {\\n      if (b + db <= 255) {\\n        b += db;\\n      } else {\\n        b = 255;\\n      }\\n    }\\n\\n    return uint256((r << uint256(16)) | (g << uint256(8)) | b);\\n  }\\n\\n  function getRelicType(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getRelicType();\\n    }\\n\\n    if (core.isDivinityQuestLoot) {\\n      return TRKeys.RELIC_TYPE_CURIO;\\n    }\\n\\n    uint256 roll = roll1000(core, TRKeys.ROLL_RELICTYPE);\\n    if (roll <= 360) {\\n      return TRKeys.RELIC_TYPE_TRINKET;\\n    } else if (roll <= 620) {\\n      return TRKeys.RELIC_TYPE_TALISMAN;\\n    } else if (roll <= 820) {\\n      return TRKeys.RELIC_TYPE_AMULET;\\n    } else if (roll <= 960) {\\n      return TRKeys.RELIC_TYPE_FOCUS;\\n    } else {\\n      return TRKeys.RELIC_TYPE_CURIO;\\n    }\\n  }\\n\\n  function getGlyphType(TRKeys.RuneCore memory core) override public pure returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return TRKeys.GLYPH_TYPE_GRAIL;\\n    }\\n\\n    if (core.glyph.length > 0) {\\n      return TRKeys.GLYPH_TYPE_CUSTOM;\\n    }\\n\\n    return TRKeys.GLYPH_TYPE_NONE;\\n  }\\n\\n  function getRuneflux(TRKeys.RuneCore memory core) override public view returns (uint256) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getRuneflux();\\n    }\\n\\n    if (core.isDivinityQuestLoot) {\\n      return 700 + rollMax(core, TRKeys.ROLL_RUNEFLUX) % 300;\\n    }\\n\\n    return roll1000(core, TRKeys.ROLL_RUNEFLUX) - 1;\\n  }\\n\\n  function getCorruption(TRKeys.RuneCore memory core) override public view returns (uint256) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getCorruption();\\n    }\\n\\n    if (core.isDivinityQuestLoot) {\\n      return 700 + rollMax(core, TRKeys.ROLL_CORRUPTION) % 300;\\n    }\\n\\n    return roll1000(core, TRKeys.ROLL_CORRUPTION) - 1;\\n  }\\n\\n  function getDescription(TRKeys.RuneCore memory core) override public view returns (string memory) {\\n    uint256 grailId = getGrailId(core);\\n    if (grailId != TRKeys.GRAIL_ID_NONE) {\\n      return Grail(grailContracts[grailId]).getDescription();\\n    }\\n\\n    return '';\\n  }\\n\\n  function getGrailId(TRKeys.RuneCore memory core) override public pure returns (uint256) {\\n    uint256 grailId = TRKeys.GRAIL_ID_NONE;\\n\\n    if (bytes(core.hiddenLeyLines).length > 0) {\\n      uint256 rollDist = TRUtils.random(core.hiddenLeyLines) ^ TRUtils.random(TRKeys.ROLL_GRAILS);\\n      uint256 digits = 1 + rollDist % TRKeys.GRAIL_DISTRIBUTION;\\n      for (uint256 i; i < TRKeys.GRAIL_COUNT; i++) {\\n        if (core.tokenId == digits + TRKeys.GRAIL_DISTRIBUTION * i) {\\n          uint256 rollShuf = TRUtils.random(core.hiddenLeyLines) ^ TRUtils.random(TRKeys.ROLL_ELEMENT);\\n          uint256 offset = rollShuf % TRKeys.GRAIL_COUNT;\\n          grailId = 1 + (i + offset) % TRKeys.GRAIL_COUNT;\\n          break;\\n        }\\n      }\\n    }\\n\\n    return grailId;\\n  }\\n\\n  function rollMax(TRKeys.RuneCore memory core, string memory key) internal pure returns (uint256) {\\n    string memory tokenKey = string(abi.encodePacked(key, TRUtils.toString(7 * core.tokenId)));\\n    return TRUtils.random(core.runeHash) ^ TRUtils.random(tokenKey);\\n  }\\n\\n  function roll1000(TRKeys.RuneCore memory core, string memory key) internal pure returns (uint256) {\\n    return 1 + rollMax(core, key) % 1000;\\n  }\\n\\n  function rollColor(TRKeys.RuneCore memory core, uint256 index) internal pure returns (uint256) {\\n    string memory k = TRUtils.toString(index);\\n    return rollMax(core, string(abi.encodePacked(TRKeys.ROLL_RANDOMCOLOR, k))) % 16777216;\\n  }\\n\\n  function setGrailContract(uint256 grailId, address grailContract) public onlyOwner {\\n    if (grailContracts[grailId] != address(0)) revert GrailsAreImmutable();\\n\\n    grailContracts[grailId] = grailContract;\\n  }\\n\\n}\\n\\n\\n\\nabstract contract Grail {\\n  function getElement() external pure virtual returns (string memory);\\n  function getPalette() external pure virtual returns (string memory);\\n  function getEssence() external pure virtual returns (string memory);\\n  function getStyle() external pure virtual returns (string memory);\\n  function getSpeed() external pure virtual returns (string memory);\\n  function getGravity() external pure virtual returns (string memory);\\n  function getDisplay() external pure virtual returns (string memory);\\n  function getColorCount() external pure virtual returns (uint256);\\n  function getRelicType() external pure virtual returns (string memory);\\n  function getRuneflux() external pure virtual returns (uint256);\\n  function getCorruption() external pure virtual returns (uint256);\\n  function getGlyph() external pure virtual returns (uint256[] memory);\\n  function getDescription() external pure virtual returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TRColors.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport './TRKeys.sol';\\n\\n/// @notice The Reliquary Color Palettes\\nlibrary TRColors {\\n\\n  function get(string memory palette)\\n    public\\n    pure\\n    returns (uint256[] memory, uint256)\\n  {\\n    uint256[] memory colorInts = new uint256[](12);\\n    uint256 colorIntCount = 0;\\n\\n    if (TRUtils.compare(palette, TRKeys.NAT_PAL_JUNGLE)) {\\n      colorInts[0] = uint256(3299866);\\n      colorInts[1] = uint256(1256965);\\n      colorInts[2] = uint256(2375731);\\n      colorInts[3] = uint256(67585);\\n      colorInts[4] = uint256(16749568);\\n      colorInts[5] = uint256(16776295);\\n      colorInts[6] = uint256(16748230);\\n      colorInts[7] = uint256(16749568);\\n      colorInts[8] = uint256(67585);\\n      colorInts[9] = uint256(2375731);\\n      colorIntCount = uint256(10);\\n    } else if (TRUtils.compare(palette, TRKeys.NAT_PAL_CAMOUFLAGE)) {\\n      colorInts[0] = uint256(10328673);\\n      colorInts[1] = uint256(6245168);\\n      colorInts[2] = uint256(2171169);\\n      colorInts[3] = uint256(4610624);\\n      colorInts[4] = uint256(5269320);\\n      colorInts[5] = uint256(4994846);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.NAT_PAL_BIOLUMINESCENCE)) {\\n      colorInts[0] = uint256(2434341);\\n      colorInts[1] = uint256(4194315);\\n      colorInts[2] = uint256(6488209);\\n      colorInts[3] = uint256(7270568);\\n      colorInts[4] = uint256(9117400);\\n      colorInts[5] = uint256(1599944);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.LIG_PAL_PASTEL)) {\\n      colorInts[0] = uint256(16761760);\\n      colorInts[1] = uint256(16756669);\\n      colorInts[2] = uint256(16636817);\\n      colorInts[3] = uint256(13762047);\\n      colorInts[4] = uint256(8714928);\\n      colorInts[5] = uint256(9425908);\\n      colorInts[6] = uint256(16499435);\\n      colorInts[7] = uint256(10587345);\\n      colorIntCount = uint256(8);\\n    } else if (TRUtils.compare(palette, TRKeys.LIG_PAL_INFRARED)) {\\n      colorInts[0] = uint256(16642938);\\n      colorInts[1] = uint256(16755712);\\n      colorInts[2] = uint256(15883521);\\n      colorInts[3] = uint256(13503623);\\n      colorInts[4] = uint256(8257951);\\n      colorInts[5] = uint256(327783);\\n      colorInts[6] = uint256(13503623);\\n      colorInts[7] = uint256(15883521);\\n      colorIntCount = uint256(8);\\n    } else if (TRUtils.compare(palette, TRKeys.LIG_PAL_ULTRAVIOLET)) {\\n      colorInts[0] = uint256(14200063);\\n      colorInts[1] = uint256(5046460);\\n      colorInts[2] = uint256(16775167);\\n      colorInts[3] = uint256(16024318);\\n      colorInts[4] = uint256(11665662);\\n      colorInts[5] = uint256(1507410);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.WAT_PAL_FROZEN)) {\\n      colorInts[0] = uint256(13034750);\\n      colorInts[1] = uint256(4102128);\\n      colorInts[2] = uint256(826589);\\n      colorInts[3] = uint256(346764);\\n      colorInts[4] = uint256(6707);\\n      colorInts[5] = uint256(1277652);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.WAT_PAL_DAWN)) {\\n      colorInts[0] = uint256(334699);\\n      colorInts[1] = uint256(610965);\\n      colorInts[2] = uint256(5408708);\\n      colorInts[3] = uint256(16755539);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.WAT_PAL_OPALESCENT)) {\\n      colorInts[0] = uint256(15985337);\\n      colorInts[1] = uint256(15981758);\\n      colorInts[2] = uint256(15713994);\\n      colorInts[3] = uint256(13941977);\\n      colorInts[4] = uint256(8242919);\\n      colorInts[5] = uint256(15985337);\\n      colorInts[6] = uint256(15981758);\\n      colorInts[7] = uint256(15713994);\\n      colorInts[8] = uint256(13941977);\\n      colorInts[9] = uint256(8242919);\\n      colorIntCount = uint256(10);\\n    } else if (TRUtils.compare(palette, TRKeys.EAR_PAL_COAL)) {\\n      colorInts[0] = uint256(3613475);\\n      colorInts[1] = uint256(1577233);\\n      colorInts[2] = uint256(4407359);\\n      colorInts[3] = uint256(2894892);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.EAR_PAL_SILVER)) {\\n      colorInts[0] = uint256(16053492);\\n      colorInts[1] = uint256(15329769);\\n      colorInts[2] = uint256(10132122);\\n      colorInts[3] = uint256(6776679);\\n      colorInts[4] = uint256(3881787);\\n      colorInts[5] = uint256(1579032);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.EAR_PAL_GOLD)) {\\n      colorInts[0] = uint256(16373583);\\n      colorInts[1] = uint256(12152866);\\n      colorInts[2] = uint256(12806164);\\n      colorInts[3] = uint256(4725765);\\n      colorInts[4] = uint256(2557441);\\n      colorIntCount = uint256(5);\\n    } else if (TRUtils.compare(palette, TRKeys.WIN_PAL_BERRY)) {\\n      colorInts[0] = uint256(5428970);\\n      colorInts[1] = uint256(13323211);\\n      colorInts[2] = uint256(15385745);\\n      colorInts[3] = uint256(13355851);\\n      colorInts[4] = uint256(15356630);\\n      colorInts[5] = uint256(14903600);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.WIN_PAL_THUNDER)) {\\n      colorInts[0] = uint256(924722);\\n      colorInts[1] = uint256(9464002);\\n      colorInts[2] = uint256(470093);\\n      colorInts[3] = uint256(6378394);\\n      colorInts[4] = uint256(16246484);\\n      colorInts[5] = uint256(12114921);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.WIN_PAL_AERO)) {\\n      colorInts[0] = uint256(4609);\\n      colorInts[1] = uint256(803087);\\n      colorInts[2] = uint256(2062109);\\n      colorInts[3] = uint256(11009906);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.ARC_PAL_FROSTFIRE)) {\\n      colorInts[0] = uint256(16772570);\\n      colorInts[1] = uint256(4043519);\\n      colorInts[2] = uint256(16758832);\\n      colorInts[3] = uint256(16720962);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.ARC_PAL_COSMIC)) {\\n      colorInts[0] = uint256(1182264);\\n      colorInts[1] = uint256(10834562);\\n      colorInts[2] = uint256(4269159);\\n      colorInts[3] = uint256(16769495);\\n      colorInts[4] = uint256(3351916);\\n      colorInts[5] = uint256(12612224);\\n      colorIntCount = uint256(6);\\n    } else if (TRUtils.compare(palette, TRKeys.ARC_PAL_COLORLESS)) {\\n      colorInts[0] = uint256(1644825);\\n      colorInts[1] = uint256(15132390);\\n      colorIntCount = uint256(2);\\n    } else if (TRUtils.compare(palette, TRKeys.SHA_PAL_DARKNESS)) {\\n      colorInts[0] = uint256(2885188);\\n      colorInts[1] = uint256(1572943);\\n      colorInts[2] = uint256(1179979);\\n      colorInts[3] = uint256(657930);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.SHA_PAL_VOID)) {\\n      colorInts[0] = uint256(1572943);\\n      colorInts[1] = uint256(4194415);\\n      colorInts[2] = uint256(6488209);\\n      colorInts[3] = uint256(13051525);\\n      colorInts[4] = uint256(657930);\\n      colorIntCount = uint256(5);\\n    } else if (TRUtils.compare(palette, TRKeys.SHA_PAL_UNDEAD)) {\\n      colorInts[0] = uint256(3546937);\\n      colorInts[1] = uint256(50595);\\n      colorInts[2] = uint256(7511983);\\n      colorInts[3] = uint256(7563923);\\n      colorInts[4] = uint256(10535352);\\n      colorIntCount = uint256(5);\\n    } else if (TRUtils.compare(palette, TRKeys.FIR_PAL_HEAT)) {\\n      colorInts[0] = uint256(590337);\\n      colorInts[1] = uint256(12141574);\\n      colorInts[2] = uint256(15908162);\\n      colorInts[3] = uint256(6886400);\\n      colorIntCount = uint256(4);\\n    } else if (TRUtils.compare(palette, TRKeys.FIR_PAL_EMBER)) {\\n      colorInts[0] = uint256(1180162);\\n      colorInts[1] = uint256(7929858);\\n      colorInts[2] = uint256(7012357);\\n      colorInts[3] = uint256(16744737);\\n      colorIntCount = uint256(4);\\n    } else {\\n      colorInts[0] = uint256(197391);\\n      colorInts[1] = uint256(3604610);\\n      colorInts[2] = uint256(6553778);\\n      colorInts[3] = uint256(14305728);\\n      colorIntCount = uint256(4);\\n    }\\n\\n    return (colorInts, colorIntCount);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TRKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport './TRUtils.sol';\\n\\n/// @notice The Reliquary Constants\\nlibrary TRKeys {\\n\\n  struct RuneCore {\\n    uint256 tokenId;\\n    uint8 level;\\n    uint32 mana;\\n    bool isDivinityQuestLoot;\\n    bool isSecretDiscovered;\\n    uint8 secretsDiscovered;\\n    uint256 runeCode;\\n    string runeHash;\\n    string transmutation;\\n    address credit;\\n    uint256[] glyph;\\n    uint24[] colors;\\n    address metadataAddress;\\n    string hiddenLeyLines;\\n  }\\n\\n  uint256 public constant FIRST_OPEN_VIBES_ID = 7778;\\n  address public constant VIBES_GENESIS = 0x6c7C97CaFf156473F6C9836522AE6e1d6448Abe7;\\n  address public constant VIBES_OPEN = 0xF3FCd0F025c21F087dbEB754516D2AD8279140Fc;\\n\\n  uint8 public constant CURIO_SUPPLY = 64;\\n  uint256 public constant CURIO_TITHE = 80000000000000000; // 0.08 ETH\\n\\n  uint32 public constant MANA_PER_YEAR = 100;\\n  uint32 public constant MANA_PER_YEAR_LV2 = 150;\\n  uint32 public constant SECONDS_PER_YEAR = 31536000;\\n  uint32 public constant MANA_FROM_REVELATION = 50;\\n  uint32 public constant MANA_FROM_DIVINATION = 50;\\n  uint32 public constant MANA_FROM_VIBRATION = 100;\\n  uint32 public constant MANA_COST_TO_UPGRADE = 150;\\n\\n  uint256 public constant RELIC_SIZE = 64;\\n  uint256 public constant RELIC_SUPPLY = 1047;\\n  uint256 public constant TOTAL_SUPPLY = CURIO_SUPPLY + RELIC_SUPPLY;\\n  uint256 public constant RELIC_TITHE = 150000000000000000; // 0.15 ETH\\n  uint256 public constant INVENTORY_CAPACITY = 10;\\n  uint256 public constant BYTES_PER_RELICHASH = 3;\\n  uint256 public constant BYTES_PER_BLOCKHASH = 32;\\n  uint256 public constant HALF_POSSIBILITY_SPACE = (16**6) / 2;\\n  bytes32 public constant RELICHASH_MASK = 0x0000000000000000000000000000000000000000000000000000000000ffffff;\\n  uint256 public constant RELIC_DISCOUNT_GENESIS = 120000000000000000; // 0.12 ETH\\n  uint256 public constant RELIC_DISCOUNT_OPEN = 50000000000000000; // 0.05 ETH\\n\\n  uint256 public constant RELIQUARY_CHAMBER_OUTSIDE = 0;\\n  uint256 public constant RELIQUARY_CHAMBER_GUARDIANS_HALL = 1;\\n  uint256 public constant RELIQUARY_CHAMBER_INNER_SANCTUM = 2;\\n  uint256 public constant RELIQUARY_CHAMBER_DIVINITYS_END = 3;\\n  uint256 public constant RELIQUARY_CHAMBER_CHAMPIONS_VAULT = 4;\\n  uint256 public constant ELEMENTAL_GUARDIAN_DNA = 88888888;\\n  uint256 public constant GRAIL_ID_NONE = 0;\\n  uint256 public constant GRAIL_ID_NATURE = 1;\\n  uint256 public constant GRAIL_ID_LIGHT = 2;\\n  uint256 public constant GRAIL_ID_WATER = 3;\\n  uint256 public constant GRAIL_ID_EARTH = 4;\\n  uint256 public constant GRAIL_ID_WIND = 5;\\n  uint256 public constant GRAIL_ID_ARCANE = 6;\\n  uint256 public constant GRAIL_ID_SHADOW = 7;\\n  uint256 public constant GRAIL_ID_FIRE = 8;\\n  uint256 public constant GRAIL_COUNT = 8;\\n  uint256 public constant GRAIL_DISTRIBUTION = 100;\\n  uint8 public constant SECRETS_OF_THE_GRAIL = 128;\\n  uint8 public constant MODE_TRANSMUTE_ELEMENT = 1;\\n  uint8 public constant MODE_CREATE_GLYPH = 2;\\n  uint8 public constant MODE_IMAGINE_COLORS = 3;\\n\\n  uint256 public constant MAX_COLOR_INTS = 10;\\n\\n  string public constant ROLL_ELEMENT = 'ELEMENT';\\n  string public constant ROLL_PALETTE = 'PALETTE';\\n  string public constant ROLL_SHUFFLE = 'SHUFFLE';\\n  string public constant ROLL_RED = 'RED';\\n  string public constant ROLL_GREEN = 'GREEN';\\n  string public constant ROLL_BLUE = 'BLUE';\\n  string public constant ROLL_REDSIGN = 'REDSIGN';\\n  string public constant ROLL_GREENSIGN = 'GREENSIGN';\\n  string public constant ROLL_BLUESIGN = 'BLUESIGN';\\n  string public constant ROLL_RANDOMCOLOR = 'RANDOMCOLOR';\\n  string public constant ROLL_RELICTYPE = 'RELICTYPE';\\n  string public constant ROLL_STYLE = 'STYLE';\\n  string public constant ROLL_COLORCOUNT = 'COLORCOUNT';\\n  string public constant ROLL_SPEED = 'SPEED';\\n  string public constant ROLL_GRAVITY = 'GRAVITY';\\n  string public constant ROLL_DISPLAY = 'DISPLAY';\\n  string public constant ROLL_GRAILS = 'GRAILS';\\n  string public constant ROLL_RUNEFLUX = 'RUNEFLUX';\\n  string public constant ROLL_CORRUPTION = 'CORRUPTION';\\n\\n  string public constant RELIC_TYPE_GRAIL = 'Grail';\\n  string public constant RELIC_TYPE_CURIO = 'Curio';\\n  string public constant RELIC_TYPE_FOCUS = 'Focus';\\n  string public constant RELIC_TYPE_AMULET = 'Amulet';\\n  string public constant RELIC_TYPE_TALISMAN = 'Talisman';\\n  string public constant RELIC_TYPE_TRINKET = 'Trinket';\\n\\n  string public constant GLYPH_TYPE_GRAIL = 'Origin';\\n  string public constant GLYPH_TYPE_CUSTOM = 'Divine';\\n  string public constant GLYPH_TYPE_NONE = 'None';\\n\\n  string public constant ELEM_NATURE = 'Nature';\\n  string public constant ELEM_LIGHT = 'Light';\\n  string public constant ELEM_WATER = 'Water';\\n  string public constant ELEM_EARTH = 'Earth';\\n  string public constant ELEM_WIND = 'Wind';\\n  string public constant ELEM_ARCANE = 'Arcane';\\n  string public constant ELEM_SHADOW = 'Shadow';\\n  string public constant ELEM_FIRE = 'Fire';\\n\\n  string public constant ANY_PAL_CUSTOM = 'Divine';\\n\\n  string public constant NAT_PAL_JUNGLE = 'Jungle';\\n  string public constant NAT_PAL_CAMOUFLAGE = 'Camouflage';\\n  string public constant NAT_PAL_BIOLUMINESCENCE = 'Bioluminescence';\\n\\n  string public constant NAT_ESS_FOREST = 'Forest';\\n  string public constant NAT_ESS_LIFE = 'Life';\\n  string public constant NAT_ESS_SWAMP = 'Swamp';\\n  string public constant NAT_ESS_WILDBLOOD = 'Wildblood';\\n  string public constant NAT_ESS_SOUL = 'Soul';\\n\\n  string public constant LIG_PAL_PASTEL = 'Pastel';\\n  string public constant LIG_PAL_INFRARED = 'Infrared';\\n  string public constant LIG_PAL_ULTRAVIOLET = 'Ultraviolet';\\n\\n  string public constant LIG_ESS_HEAVENLY = 'Heavenly';\\n  string public constant LIG_ESS_FAE = 'Fae';\\n  string public constant LIG_ESS_PRISMATIC = 'Prismatic';\\n  string public constant LIG_ESS_RADIANT = 'Radiant';\\n  string public constant LIG_ESS_PHOTONIC = 'Photonic';\\n\\n  string public constant WAT_PAL_FROZEN = 'Frozen';\\n  string public constant WAT_PAL_DAWN = 'Dawn';\\n  string public constant WAT_PAL_OPALESCENT = 'Opalescent';\\n\\n  string public constant WAT_ESS_TIDAL = 'Tidal';\\n  string public constant WAT_ESS_ARCTIC = 'Arctic';\\n  string public constant WAT_ESS_STORM = 'Storm';\\n  string public constant WAT_ESS_ILLUVIAL = 'Illuvial';\\n  string public constant WAT_ESS_UNDINE = 'Undine';\\n\\n  string public constant EAR_PAL_COAL = 'Coal';\\n  string public constant EAR_PAL_SILVER = 'Silver';\\n  string public constant EAR_PAL_GOLD = 'Gold';\\n\\n  string public constant EAR_ESS_MINERAL = 'Mineral';\\n  string public constant EAR_ESS_CRAGGY = 'Craggy';\\n  string public constant EAR_ESS_DWARVEN = 'Dwarven';\\n  string public constant EAR_ESS_GNOMIC = 'Gnomic';\\n  string public constant EAR_ESS_CRYSTAL = 'Crystal';\\n\\n  string public constant WIN_PAL_BERRY = 'Berry';\\n  string public constant WIN_PAL_THUNDER = 'Thunder';\\n  string public constant WIN_PAL_AERO = 'Aero';\\n\\n  string public constant WIN_ESS_SYLPHIC = 'Sylphic';\\n  string public constant WIN_ESS_VISCERAL = 'Visceral';\\n  string public constant WIN_ESS_FROSTED = 'Frosted';\\n  string public constant WIN_ESS_ELECTRIC = 'Electric';\\n  string public constant WIN_ESS_MAGNETIC = 'Magnetic';\\n\\n  string public constant ARC_PAL_FROSTFIRE = 'Frostfire';\\n  string public constant ARC_PAL_COSMIC = 'Cosmic';\\n  string public constant ARC_PAL_COLORLESS = 'Colorless';\\n\\n  string public constant ARC_ESS_MAGIC = 'Magic';\\n  string public constant ARC_ESS_ASTRAL = 'Astral';\\n  string public constant ARC_ESS_FORBIDDEN = 'Forbidden';\\n  string public constant ARC_ESS_RUNIC = 'Runic';\\n  string public constant ARC_ESS_UNKNOWN = 'Unknown';\\n\\n  string public constant SHA_PAL_DARKNESS = 'Darkness';\\n  string public constant SHA_PAL_VOID = 'Void';\\n  string public constant SHA_PAL_UNDEAD = 'Undead';\\n\\n  string public constant SHA_ESS_NIGHT = 'Night';\\n  string public constant SHA_ESS_FORGOTTEN = 'Forgotten';\\n  string public constant SHA_ESS_ABYSSAL = 'Abyssal';\\n  string public constant SHA_ESS_EVIL = 'Evil';\\n  string public constant SHA_ESS_LOST = 'Lost';\\n\\n  string public constant FIR_PAL_HEAT = 'Heat';\\n  string public constant FIR_PAL_EMBER = 'Ember';\\n  string public constant FIR_PAL_CORRUPTED = 'Corrupted';\\n\\n  string public constant FIR_ESS_INFERNAL = 'Infernal';\\n  string public constant FIR_ESS_MOLTEN = 'Molten';\\n  string public constant FIR_ESS_ASHEN = 'Ashen';\\n  string public constant FIR_ESS_DRACONIC = 'Draconic';\\n  string public constant FIR_ESS_CELESTIAL = 'Celestial';\\n\\n  string public constant STYLE_SMOOTH = 'Smooth';\\n  string public constant STYLE_PAJAMAS = 'Pajamas';\\n  string public constant STYLE_SILK = 'Silk';\\n  string public constant STYLE_SKETCH = 'Sketch';\\n\\n  string public constant SPEED_ZEN = 'Zen';\\n  string public constant SPEED_TRANQUIL = 'Tranquil';\\n  string public constant SPEED_NORMAL = 'Normal';\\n  string public constant SPEED_FAST = 'Fast';\\n  string public constant SPEED_SWIFT = 'Swift';\\n  string public constant SPEED_HYPER = 'Hyper';\\n\\n  string public constant GRAV_LUNAR = 'Lunar';\\n  string public constant GRAV_ATMOSPHERIC = 'Atmospheric';\\n  string public constant GRAV_LOW = 'Low';\\n  string public constant GRAV_NORMAL = 'Normal';\\n  string public constant GRAV_HIGH = 'High';\\n  string public constant GRAV_MASSIVE = 'Massive';\\n  string public constant GRAV_STELLAR = 'Stellar';\\n  string public constant GRAV_GALACTIC = 'Galactic';\\n\\n  string public constant DISPLAY_NORMAL = 'Normal';\\n  string public constant DISPLAY_MIRRORED = 'Mirrored';\\n  string public constant DISPLAY_UPSIDEDOWN = 'UpsideDown';\\n  string public constant DISPLAY_MIRROREDUPSIDEDOWN = 'MirroredUpsideDown';\\n\\n}\\n\"\r\n    },\r\n    \"contracts/TRUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice The Reliquary Utility Methods\\nlibrary TRUtils {\\n\\n  function random(string memory input) public pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function getColorCode(uint256 color) public pure returns (string memory) {\\n    bytes16 hexChars = '0123456789abcdef';\\n    uint256 r1 = (color >> uint256(20)) & uint256(15);\\n    uint256 r2 = (color >> uint256(16)) & uint256(15);\\n    uint256 g1 = (color >> uint256(12)) & uint256(15);\\n    uint256 g2 = (color >> uint256(8)) & uint256(15);\\n    uint256 b1 = (color >> uint256(4)) & uint256(15);\\n    uint256 b2 = color & uint256(15);\\n    bytes memory code = new bytes(6);\\n    code[0] = hexChars[r1];\\n    code[1] = hexChars[r2];\\n    code[2] = hexChars[g1];\\n    code[3] = hexChars[g2];\\n    code[4] = hexChars[b1];\\n    code[5] = hexChars[b2];\\n    return string(code);\\n  }\\n\\n  function compare(string memory a, string memory b) public pure returns (bool) {\\n    if (bytes(a).length != bytes(b).length) {\\n      return false;\\n    } else {\\n      return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n  }\\n\\n  function toString(uint256 value) public pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return '0';\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  // https://ethereum.stackexchange.com/a/8447\\n  function toAsciiString(address x) public pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2*i] = char(hi);\\n      s[2*i+1] = char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  // https://stackoverflow.com/a/69302348/424107\\n  function toCapsHexString(uint256 i) internal pure returns (string memory) {\\n    if (i == 0) return '0';\\n    uint j = i;\\n    uint length;\\n    while (j != 0) {\\n      length++;\\n      j = j >> 4;\\n    }\\n    uint mask = 15;\\n    bytes memory bstr = new bytes(length);\\n    uint k = length;\\n    while (i != 0) {\\n      uint curr = (i & mask);\\n      bstr[--k] = curr > 9 ?\\n        bytes1(uint8(55 + curr)) :\\n        bytes1(uint8(48 + curr)); // 55 = 65 - 10\\n      i = i >> 4;\\n    }\\n    return string(bstr);\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/TRColors.sol\": {\r\n        \"TRColors\": \"0xa4d8ad4c4f9c53464fac061523bb8fc47890f09d\"\r\n      },\r\n      \"contracts/TRUtils.sol\": {\r\n        \"TRUtils\": \"0xfc29bbb9d6e92605291cca1d5fc24870a50b0780\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GrailsAreImmutable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"}],\"name\":\"getArcaneEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"getArcanePalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getColorByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getColorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getCorruption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getDisplay\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"}],\"name\":\"getEarthEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"getEarthPalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getElement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"}],\"name\":\"getFireEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"getFirePalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getGlyphType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getGrailId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getGravity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"}],\"name\":\"getLightEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"getLightPalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"}],\"name\":\"getNatureEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"getNaturePalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getPalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getRelicInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"element\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"palette\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"essence\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"colorCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"style\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"speed\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gravity\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"display\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"glyphType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runeflux\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"corruption\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grailId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"grailGlyph\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ITRRolls.RelicInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getRelicType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getRuneflux\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"}],\"name\":\"getShadowEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"getShadowPalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getSpeed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"}],\"name\":\"getStyle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"}],\"name\":\"getWaterEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"getWaterPalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"relicType\",\"type\":\"string\"}],\"name\":\"getWindEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"getWindPalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"mana\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isDivinityQuestLoot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSecretDiscovered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"secretsDiscovered\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"runeCode\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"runeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"transmutation\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"glyph\",\"type\":\"uint256[]\"},{\"internalType\":\"uint24[]\",\"name\":\"colors\",\"type\":\"uint24[]\"},{\"internalType\":\"address\",\"name\":\"metadataAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiddenLeyLines\",\"type\":\"string\"}],\"internalType\":\"struct TRKeys.RuneCore\",\"name\":\"core\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"color\",\"type\":\"uint256\"}],\"name\":\"getWobbledColor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grailContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"grailId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"grailContract\",\"type\":\"address\"}],\"name\":\"setGrailContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TRRolls", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}