{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ItemToken {\r\n  using SafeMath for uint256; // Loading the SafeMath library\r\n\r\n  // Events of the contract\r\n  event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n\r\n  address private owner; // owner of the contract\r\n  address private charityAddress; // address of the charity\r\n  mapping (address => bool) private admins; // admins of the contract\r\n  IItemRegistry private itemRegistry; // Item registry\r\n  bool private erc721Enabled = false;\r\n\r\n  // limits for devcut\r\n  uint256 private increaseLimit1 = 0.02 ether;\r\n  uint256 private increaseLimit2 = 0.5 ether;\r\n  uint256 private increaseLimit3 = 2.0 ether;\r\n  uint256 private increaseLimit4 = 5.0 ether;\r\n\r\n  uint256[] private listedItems; // array of items\r\n  mapping (uint256 => address) private ownerOfItem; // owner of the item\r\n  mapping (uint256 => uint256) private startingPriceOfItem; // starting price of the item\r\n  mapping (uint256 => uint256) private previousPriceOfItem; // previous price of the item\r\n  mapping (uint256 => uint256) private priceOfItem; // actual price of the item\r\n  mapping (uint256 => uint256) private charityCutOfItem; // charity cut of the item\r\n  mapping (uint256 => address) private approvedOfItem; // item is approved for this address\r\n\r\n  // constructor\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    admins[owner] = true;\r\n  }\r\n\r\n  // modifiers\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmins() {\r\n    require(admins[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier onlyERC721() {\r\n    require(erc721Enabled);\r\n    _;\r\n  }\r\n\r\n  // contract owner\r\n  function setOwner (address _owner) onlyOwner() public {\r\n    owner = _owner;\r\n  }\r\n\r\n  // Set charity address\r\n  function setCharity (address _charityAddress) onlyOwner() public {\r\n    charityAddress = _charityAddress;\r\n  }\r\n\r\n  // Set item registry\r\n  function setItemRegistry (address _itemRegistry) onlyOwner() public {\r\n    itemRegistry = IItemRegistry(_itemRegistry);\r\n  }\r\n\r\n  // Add admin\r\n  function addAdmin (address _admin) onlyOwner() public {\r\n    admins[_admin] = true;\r\n  }\r\n\r\n  // Remove admin\r\n  function removeAdmin (address _admin) onlyOwner() public {\r\n    delete admins[_admin];\r\n  }\r\n\r\n  // Unlocks ERC721 behaviour, allowing for trading on third party platforms.\r\n  function enableERC721 () onlyOwner() public {\r\n    erc721Enabled = true;\r\n  }\r\n\r\n  // Withdraw\r\n  function withdrawAll () onlyOwner() public {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyOwner() public {\r\n    owner.transfer(_amount);\r\n  }\r\n\r\n  // Listing\r\n  function populateFromItemRegistry (uint256[] _itemIds) onlyOwner() public {\r\n    for (uint256 i = 0; i < _itemIds.length; i++) {\r\n      if (charityCutOfItem[_itemIds[i]] > 0 || priceOfItem[_itemIds[i]] > 0 || itemRegistry.priceOf(_itemIds[i]) == 0) {\r\n        continue;\r\n      }\r\n\r\n      listItemFromRegistry(_itemIds[i]);\r\n    }\r\n  }\r\n\r\n  function listItemFromRegistry (uint256 _itemId) onlyOwner() public {\r\n    require(itemRegistry != address(0));\r\n    require(itemRegistry.ownerOf(_itemId) != address(0));\r\n    require(itemRegistry.priceOf(_itemId) > 0);\r\n    require(itemRegistry.charityCutOf(_itemId) > 0);\r\n\r\n    uint256 price = itemRegistry.priceOf(_itemId);\r\n    uint256 charityCut = itemRegistry.charityCutOf(_itemId);\r\n    address itemOwner = itemRegistry.ownerOf(_itemId);\r\n    listItem(_itemId, price, itemOwner, charityCut);\r\n  }\r\n\r\n  function listMultipleItems (uint256[] _itemIds, uint256 _price, address _owner, uint256 _charityCut) onlyAdmins() external {\r\n    for (uint256 i = 0; i < _itemIds.length; i++) {\r\n      listItem(_itemIds[i], _price, _owner, _charityCut);\r\n    }\r\n  }\r\n\r\n  function listItem (uint256 _itemId, uint256 _price, address _owner, uint256 _charityCut) onlyAdmins() public {\r\n    require(_price > 0);\r\n    require(_charityCut >= 10);\r\n    require(_charityCut <= 100);\r\n    require(priceOfItem[_itemId] == 0);\r\n    require(ownerOfItem[_itemId] == address(0));\r\n    require(charityCutOfItem[_itemId] == 0);\r\n\r\n    ownerOfItem[_itemId] = _owner;\r\n    priceOfItem[_itemId] = _price;\r\n    startingPriceOfItem[_itemId] = _price;\r\n    charityCutOfItem[_itemId] = _charityCut;\r\n    previousPriceOfItem[_itemId] = 0;\r\n    listedItems.push(_itemId);\r\n  }\r\n\r\n  // Buy\r\n  function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\r\n    if (_price < increaseLimit1) {\r\n      return _price.mul(200).div(95);\r\n    } else if (_price < increaseLimit2) {\r\n      return _price.mul(135).div(96);\r\n    } else if (_price < increaseLimit3) {\r\n      return _price.mul(125).div(97);\r\n    } else if (_price < increaseLimit4) {\r\n      return _price.mul(117).div(97);\r\n    } else {\r\n      return _price.mul(115).div(98);\r\n    }\r\n  }\r\n\r\n  // Dev cut\r\n  function calculateDevCut (uint256 _price) public view returns (uint256 _devCut) {\r\n    if (_price < increaseLimit1) {\r\n      return _price.mul(5).div(100); // 5%\r\n    } else if (_price < increaseLimit2) {\r\n      return _price.mul(4).div(100); // 4%\r\n    } else if (_price < increaseLimit3) {\r\n      return _price.mul(3).div(100); // 3%\r\n    } else if (_price < increaseLimit4) {\r\n      return _price.mul(3).div(100); // 3%\r\n    } else {\r\n      return _price.mul(2).div(100); // 2%\r\n    }\r\n  }\r\n\r\n  // Buy function\r\n  function buy (uint256 _itemId, uint256 _charityCutNew) payable public {\r\n    require(priceOf(_itemId) > 0); // price of the token has to be greater than zero\r\n    require(_charityCutNew >= 10); // minimum charity cut is 10%\r\n    require(_charityCutNew <= 100); // maximum charity cut is 100%\r\n    require(charityCutOf(_itemId) >= 10); // minimum charity cut is 10%\r\n    require(charityCutOf(_itemId) <= 100); // maximum charity cut is 100%\r\n    require(ownerOf(_itemId) != address(0)); // owner is not 0x0\r\n    require(msg.value >= priceOf(_itemId)); // msg.value has to be greater than the price of the token\r\n    require(ownerOf(_itemId) != msg.sender); // the owner cannot buy her own token\r\n    require(!isContract(msg.sender)); // message sender is not a contract\r\n    require(msg.sender != address(0)); // message sender is not 0x0\r\n\r\n    address oldOwner = ownerOf(_itemId); // old owner of the token\r\n    address newOwner = msg.sender; // new owner of the token\r\n    uint256 price = priceOf(_itemId); // price of the token\r\n    uint256 previousPrice = previousPriceOf(_itemId); // previous price of the token (oldOwner bought it for this price)\r\n    uint256 charityCut = charityCutOf(_itemId); // actual charity cut of the token (oldOwner set this value)\r\n    uint256 excess = msg.value.sub(price); // excess\r\n    \r\n    charityCutOfItem[_itemId] = _charityCutNew; // update the charity cut array\r\n    previousPriceOfItem[_itemId] = priceOf(_itemId); // update the previous price array\r\n    priceOfItem[_itemId] = nextPriceOf(_itemId); // update price of item\r\n\r\n    _transfer(oldOwner, newOwner, _itemId); // transfer token from oldOwner to newOwner\r\n\r\n    emit Bought(_itemId, newOwner, price); // bought event\r\n    emit Sold(_itemId, oldOwner, price); // sold event\r\n\r\n    // Devevloper's cut which is left in contract and accesed by\r\n    // `withdrawAll` and `withdrawAmountTo` methods.\r\n    uint256 devCut = calculateDevCut(price); // calculate dev cut\r\n    // Charity contribution\r\n    uint256 charityAmount = ((price.sub(devCut)).sub(previousPrice)).mul(charityCut).div(100); // calculate the charity cut\r\n    \r\n    charityAddress.transfer(charityAmount); // transfer payment to the address of the charity\r\n    oldOwner.transfer((price.sub(devCut)).sub(charityAmount)); // transfer payment to old owner minus the dev cut and the charity cut\r\n\r\n    \r\n    if (excess > 0) {\r\n      newOwner.transfer(excess); // transfer the excess\r\n    }\r\n  }\r\n\r\n  function implementsERC721() public view returns (bool _implements) {\r\n    return erc721Enabled;\r\n  }\r\n\r\n  function name() public pure returns (string _name) {\r\n    return \"Tokenimals\";\r\n  }\r\n\r\n  function symbol() public pure returns (string _symbol) {\r\n    return \"TKS\";\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n    return listedItems.length;\r\n  }\r\n\r\n  // balance of an address\r\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\r\n    uint256 counter = 0;\r\n\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  // owner of token\r\n  function ownerOf (uint256 _itemId) public view returns (address _owner) {\r\n    return ownerOfItem[_itemId];\r\n  }\r\n\r\n  // tokens of an address\r\n  function tokensOf (address _owner) public view returns (uint256[] _tokenIds) {\r\n    uint256[] memory items = new uint256[](balanceOf(_owner));\r\n\r\n    uint256 itemCounter = 0;\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        items[itemCounter] = listedItems[i];\r\n        itemCounter += 1;\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  // token exists\r\n  function tokenExists (uint256 _itemId) public view returns (bool _exists) {\r\n    return priceOf(_itemId) > 0;\r\n  }\r\n\r\n  // approved for\r\n  function approvedFor(uint256 _itemId) public view returns (address _approved) {\r\n    return approvedOfItem[_itemId];\r\n  }\r\n\r\n  // approve\r\n  function approve(address _to, uint256 _itemId) onlyERC721() public {\r\n    require(msg.sender != _to);\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == msg.sender);\r\n\r\n    if (_to == 0) {\r\n      if (approvedOfItem[_itemId] != 0) {\r\n        delete approvedOfItem[_itemId];\r\n        emit Approval(msg.sender, 0, _itemId);\r\n      }\r\n    } else {\r\n      approvedOfItem[_itemId] = _to;\r\n      emit Approval(msg.sender, _to, _itemId);\r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint256 _itemId) onlyERC721() public {\r\n    require(msg.sender == ownerOf(_itemId));\r\n    _transfer(msg.sender, _to, _itemId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _itemId) onlyERC721() public {\r\n    require(approvedFor(_itemId) == msg.sender);\r\n    _transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _itemId) internal {\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == _from);\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    ownerOfItem[_itemId] = _to;\r\n    approvedOfItem[_itemId] = 0;\r\n\r\n    emit Transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  // read\r\n  function isAdmin (address _admin) public view returns (bool _isAdmin) {\r\n    return admins[_admin];\r\n  }\r\n\r\n  function startingPriceOf (uint256 _itemId) public view returns (uint256 _startingPrice) {\r\n    return startingPriceOfItem[_itemId];\r\n  }\r\n\r\n  function priceOf (uint256 _itemId) public view returns (uint256 _price) {\r\n    return priceOfItem[_itemId];\r\n  }\r\n\r\n  function previousPriceOf (uint256 _itemId) public view returns (uint256 _previousPrice) {\r\n    return previousPriceOfItem[_itemId];\r\n  }\r\n\r\n  function charityCutOf (uint256 _itemId) public view returns (uint256 _charityCut) {\r\n    return charityCutOfItem[_itemId];\r\n  }\r\n\r\n  function nextPriceOf (uint256 _itemId) public view returns (uint256 _nextPrice) {\r\n    return calculateNextPrice(priceOf(_itemId));\r\n  }\r\n\r\n  function readCharityAddress () public view returns (address _charityAddress) {\r\n    return charityAddress;\r\n  }\r\n\r\n  function allOf (uint256 _itemId) external view returns (address _owner, uint256 _startingPrice, uint256 _price, uint256 _nextPrice, uint256 _charityCut) {\r\n    return (ownerOf(_itemId), startingPriceOf(_itemId), priceOf(_itemId), nextPriceOf(_itemId), charityCutOf(_itemId));\r\n  }\r\n\r\n  // selfdestruct\r\n  function ownerkill() public onlyOwner {\r\n        selfdestruct(owner);\r\n  }\r\n\r\n  function itemsForSaleLimit (uint256 _from, uint256 _take) public view returns (uint256[] _items) {\r\n    uint256[] memory items = new uint256[](_take);\r\n\r\n    for (uint256 i = 0; i < _take; i++) {\r\n      items[i] = listedItems[_from + i];\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  // util\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint size;\r\n    assembly { size := extcodesize(addr) } // solium-disable-line\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\ninterface IItemRegistry {\r\n  function itemsForSaleLimit (uint256 _from, uint256 _take) external view returns (uint256[] _items);\r\n  function ownerOf (uint256 _itemId) external view returns (address _owner);\r\n  function priceOf (uint256 _itemId) external view returns (uint256 _price);\r\n  function charityCutOf (uint256 _itemId) external view returns (uint256 _charityCut);\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"_implements\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemRegistry\",\"type\":\"address\"}],\"name\":\"setItemRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approvedFor\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"allOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"},{\"name\":\"_charityCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"listItemFromRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_take\",\"type\":\"uint256\"}],\"name\":\"itemsForSaleLimit\",\"outputs\":[{\"name\":\"_items\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC721\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_charityCut\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"}],\"name\":\"populateFromItemRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemIds\",\"type\":\"uint256[]\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_charityCut\",\"type\":\"uint256\"}],\"name\":\"listMultipleItems\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"startingPriceOf\",\"outputs\":[{\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"readCharityAddress\",\"outputs\":[{\"name\":\"_charityAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"charityCutOf\",\"outputs\":[{\"name\":\"_charityCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_charityCutNew\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"previousPriceOf\",\"outputs\":[{\"name\":\"_previousPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"setCharity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "ItemToken", "CompilerVersion": "v0.4.25-nightly.2018.6.8+commit.81c5a6e4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f2380f08bd7a1a98365a31fe9681329926f1e3c91ddc577d7485f5c5def099e7"}]}