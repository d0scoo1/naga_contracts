{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"LGBT.sol\": {\r\n      \"content\": \"/*\\n                    -====-:.                                                             \\n                   :++++++*+*+=:                                                          \\n                 .=+++++++******+-                                                        \\n                :========++*******+-      .:----------:..                                 \\n              .-============++******+:   :-------=======++=--:.                           \\n             :=================+******+::--------=======++++++++=-:.                      \\n            :::::::----=========+*******------------====+++++++++++++=:.                  \\n          .:-:::::::---:--========+****------------------===+++++++++++++=:               \\n         .------:--:::------=====+**##+--::--------------=======++++++++++**+=:.          \\n        :=========--:--------==*%@@@@%#%@%##*+**#%####***#*+========++++++******+-:       \\n       :==============-------=#%%@@@@%%#%%%%%%%%@@@%%@@@@##@%#*+=======+++**********+-. : \\n      :=================---=%%###%%%%%%%%%####%##%@@@@@@@@@%#%@@%*=========++*********+-- \\n     .:::------=========+#@@####%%@@@@@@@%%###%#%###%@@@@@@@%%@@%@@*========+++++*****-.  \\n    .::::---------====+*#%@@%@@@@%****#%@@@@%%#%%@@@@@@@@@@%##%@@@@@#+-=====++++++++*=.   \\n   .:-:::-----------=#@@%###@@@@@@@%%%%%%%%##########%%%%%%#**#@@@@@@%*---===++++++++:    \\n  .=======----------+@@@##%@@@@@@@@@*+=----+*#%@@@@@%#*+++=::-%#@@@@@@%#=----==++++*-.    \\n  ======++++==------=#@#*@@@@@@%%@%+-::...  ....::....  ...::-#@%%@@@%%@@=-------=*-.     \\n ======++++++++==---=@@=@@#%%@##%%=:.....:::..     ...::......:+%#*#%@#*@#=------*=:      \\n:-----==+++++++++=---#%*%#*#####@+:...:::--==+-::::=+=---:::.:.-*@###%%*#%*+=---++:       \\n         :-=+++++++=-=*%%**#%%#%%-:::::---===-=========----::.::=%%#@%###%##+==+*-.       \\n            .-=+++++++%@##%%##%@+-....:::....:------:....:::...:-*%#*#%%*#@@@++*-.        \\n               :+++++*%**##***##-..:--:--===++=---====+===-:--:.:=%***###**@@%#=:         \\n                 -+++##*###**#%+:.:................  .........:.:-*%#**#%#***##=          \\n                 :*@@##@%#**%%%#*====+*++++=-........==++++*+===+*#%%#**#@%*#@@@=         \\n          :=*##*=+@#*#@@%###%%%%%%%%%%%%%%%%@%+---=*@@%%%%%%%%%%%%%%%%###%@@#*#@=+###*=.  \\n         ##-.  .-@@#%@@@%###*++++*############%%@@%%#####*++++*##########%@@@#%@#-...:=%+ \\n        *#......-#@#%@@#*+++==----+++++++++++*#%%%%#+++++==----++++++++++*#@@%*@#......:@=\\n        @+:+*#=:=+##%@%#--=-:--::::----------=%%+*@#-----:--::::---------=#@@%##--:+#*+.#@\\n        @*-=++%*-**%%#@#=----:--:::::--------*%%%%%%+-----:--::::--------+%%%%#++-%#+==:%%\\n        *%:-=+%@**%#%@@@#+++++=+=----=++*#%#%@@#++%@@%%%#++=+=---==+++++*%@%@%##*%@#==--@+\\n        :@*:-+*@@@###@@@@#*******+====*#*=====*%@@%+-====##***+====****#%@@@@*#*@@%+=::%@.\\n         +@=.:=*%###%%@@@@%######+====*@.:-:...:--:...:-.=%###+====+###%@@@@%%###%+-:.*@- \\n          *@=.:@@%#*#@@@@@@@%%%#######%%.@@@+..    .:*@@#:@%#######%%@@@@@@@@*#*%@#..+@-  \\n           -@*:%*%@*%@@#%@@@@@%**##%%#%*.=+**#*=::+##**=-:##%%%#**#%@@@@@##@@##@#+%.#@:   \\n            -@#=:%%*%@**#@@@%*-:==::..-=-.....-++++-....:-=:.::-=-:=#@@@@**#@#%#%.+%#.    \\n             .%%:++@*##*%@@@+..-:..............:-=:..............::.:*@@@#*#%#%==-@*      \\n              .%#:=##*%*%%@*. .....:..... .............  .....:....  .%@%%*%*%+=:@*       \\n               .%-+###@**%@%..+%#+::-==--:.............::--==-:-+#%=.-@@##+@*%*=+*        \\n                .**#@@%=%*#@%-:%#@@%#++++====--:..:-=====+++*#@@@**:=@@##%+@@@*++         \\n                 .==.*@+@#+%@*=-%%%@%*#*#####*********######*@@%*#:=#@#*%@+@::=-          \\n                      +%@%#*#@#:+#%%#@:*+#*#*#*+******#*%-+=%%%#*--%%%*%%@%-              \\n                       .*:@#@*%%:*+#%@#++.-=:#:-++:-%.*.--%#@%**=-%%#@## -                \\n                        . @%#%*#%.#=#%@@@##+-+ .+:  *-#*%@@@#*+*:%##@#@*                  \\n                         :=  +%%%*.*=#%@@#**###%@@###***%@@%*=%.%#%%+ .+                  \\n                              .*@@===*%%@*#*++++**+++*##*@%%+*-#@@+.                      \\n                                .#@:*=%@#*#%%#######*%#%*%@%=*=@*                         \\n                                  #*:%***+*%@@%%%%%%@@#++***#.%=                          \\n                                  .@::%##*:#:-#=#+-%:=+-*#%#.=%                           \\n                                   *#.:+#####+#+#**#+%####=.:%=                           \\n                                    #*..:---+*#****#*+---..:%*                            \\n                                     +%=:--...........:--:+%=                             \\n                                      .*@#+=::::..:.::-=#%=                               \\n                                         :=*%%%#####%#*=.      \\n\\n                                 \u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n                                 \u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\\n                                 \u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\\n                                 \u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\\n                                 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2566\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\\n                                 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\\n*/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n}\\n\\ncontract LGBT is Context, IERC20, IERC20Metadata, Ownable {\\n    // Openzeppelin variables\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // My variables\\n\\n    bool private inSwap;\\n    uint256 internal _marketingFeeCollected;\\n    uint256 internal _donationFeeCollected;\\n    uint256 internal _liquidityFeeCollected;\\n\\n    uint256 public minTokensBeforeSwap;\\n    \\n    address public marketing_wallet;\\n    address public donation_wallet;\\n    address public liquidity_wallet;\\n\\n    IUniswapV2Router02 public router;\\n    address public pair;\\n\\n    uint public _feeDecimal = 2;\\n    // index 0 = buy fee, index 1 = sell fee, index 2 = p2p fee\\n    uint[] public _marketingFee;\\n    uint[] public _donationFee;\\n    uint[] public _liquidityFee;\\n\\n    bool public swapEnabled = true;\\n    bool public isFeeActive = false;\\n\\n    mapping(address => bool) public isTaxless;\\n    mapping(address => bool) public isMaxTxExempt;\\n\\n    mapping(address => bool) public blacklist;\\n    uint blocks_autoblacklist_active;\\n\\n    mapping(address => bool) public whitelist;\\n\\n    uint public maxTxAmount;\\n    uint public maxWalletAmount;\\n\\n    bool public restrictionsEnabled = false;\\n    uint extra_fee_percent;\\n    mapping(address => uint) public lastTx;\\n    uint cooldown_period;\\n\\n    event Swap(uint swaped, uint sentToMarketing, uint sentToDonation);\\n    event AutoLiquify(uint256 amountETH, uint256 amountTokens);\\n\\n    // Openzeppelin functions\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor() {\\n        // Editable\\n        string memory e_name = \\\"LetsGetBasedTogether\\\";\\n        string memory e_symbol = \\\"LGBT\\\";\\n        marketing_wallet = 0xE25BC7A91607984a93480057603b93DA6B90eeD6;\\n        donation_wallet = 0xa979259F5A90F6b159Ef2ACe1a36B4e1f530E4f1;\\n        liquidity_wallet = 0xE25BC7A91607984a93480057603b93DA6B90eeD6;\\n        uint e_totalSupply = 69_000_000_000 ether;\\n        minTokensBeforeSwap = e_totalSupply;    // Off by default\\n        cooldown_period = 1 minutes;\\n        extra_fee_percent = 9000;\\n        // End editable\\n        \\n        _name = e_name;\\n        _symbol = e_symbol;\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n        router = _uniswapV2Router;\\n\\n        _marketingFee.push(300);\\n        _marketingFee.push(300);\\n        _marketingFee.push(0);\\n\\n        _donationFee.push(300);\\n        _donationFee.push(300);\\n        _donationFee.push(0);\\n\\n        _liquidityFee.push(200);\\n        _liquidityFee.push(200);\\n        _liquidityFee.push(0);\\n\\n        isTaxless[msg.sender] = true;\\n        isTaxless[address(this)] = true;\\n        isTaxless[marketing_wallet] = true;\\n        isTaxless[donation_wallet] = true;\\n        isTaxless[liquidity_wallet] = true;\\n        isTaxless[address(0)] = true;\\n\\n        isMaxTxExempt[msg.sender] = true;\\n        isMaxTxExempt[address(this)] = true;\\n        isMaxTxExempt[marketing_wallet] = true;\\n        isMaxTxExempt[donation_wallet] = true;\\n        isMaxTxExempt[liquidity_wallet] = true;\\n        isMaxTxExempt[pair] = true;\\n        isMaxTxExempt[address(router)] = true;\\n\\n        _mint(msg.sender, e_totalSupply);\\n\\n        setMaxWalletPercentage(100);    // 1%\\n        setMaxTxPercentage(50);         // 0.5%\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        // My implementation\\n        require(!blacklist[from] && !blacklist[to], \\\"sender or recipient is blacklisted!\\\");\\n        require(isMaxTxExempt[from] || amount <= maxTxAmount, \\\"Transfer exceeds limit!\\\");\\n        require(from != pair || isMaxTxExempt[to] || balanceOf(to) + amount <= maxWalletAmount, \\\"Max Wallet Limit Exceeds!\\\");\\n\\n        bool extra_free = false;\\n        if(restrictionsEnabled)\\n        {\\n            bool is_buy = from == pair;\\n            bool is_sell = to == pair;\\n            require(\\n                (is_buy && (isMaxTxExempt[to] || lastTx[to] + cooldown_period <= block.timestamp))\\n                || (is_sell && (isMaxTxExempt[from] || lastTx[from] + cooldown_period <= block.timestamp))\\n                || (!is_buy && !is_sell && lastTx[from] + cooldown_period <= block.timestamp)\\n                , \\\"Must wait cooldown period\\\");\\n            if(is_buy)\\n            {\\n                lastTx[to] = block.timestamp;\\n            }else\\n            {\\n                lastTx[from] = block.timestamp;\\n            }\\n            if(is_buy && !whitelist[to]\\n                || !is_buy && !whitelist[from])\\n            {\\n                extra_free = true;\\n            }\\n        }\\n\\n        if(from == owner() && to == pair)\\n        {\\n            restrictionsEnabled = true;\\n            minTokensBeforeSwap = 1_000_000 ether;\\n        }\\n\\n        if (swapEnabled && !inSwap && from != pair) {\\n            swap();\\n        }\\n\\n        uint256 feesCollected;\\n        if ((extra_free || isFeeActive) && !isTaxless[from] && !isTaxless[to] && !inSwap) {\\n            bool sell = to == pair;\\n            bool p2p = from != pair && to != pair;\\n            feesCollected = calculateFee(p2p ? 2 : sell ? 1 : 0, amount, extra_free);\\n        }\\n\\n        amount -= feesCollected;\\n        _balances[from] -= feesCollected;\\n        _balances[address(this)] += feesCollected;\\n        // End my implementation\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    // My functions\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    function sendViaCall(address payable _to, uint amount) private {\\n        (bool sent, bytes memory data) = _to.call{value: amount}(\\\"\\\");\\n        data;\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function swap() private lockTheSwap {\\n        // How much are we swaping?\\n        uint totalCollected = _marketingFeeCollected + _donationFeeCollected + _liquidityFeeCollected;\\n        uint amountToSwap = _marketingFeeCollected + _donationFeeCollected + (_liquidityFeeCollected / 2);\\n        uint amountTokensToLiquidity = totalCollected - amountToSwap;\\n\\n        if(minTokensBeforeSwap > totalCollected) return;\\n\\n        // Let's swap for eth now\\n        address[] memory sellPath = new address[](2);\\n        sellPath[0] = address(this);\\n        sellPath[1] = router.WETH();       \\n\\n        uint balanceBefore = address(this).balance;\\n\\n        _approve(address(this), address(router), amountToSwap);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            sellPath,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint amountFee = address(this).balance - balanceBefore;\\n        \\n        // Send to marketing\\n        uint amountMarketing = (amountFee * _marketingFeeCollected) / totalCollected;\\n        if(amountMarketing > 0) sendViaCall(payable(marketing_wallet), amountMarketing);\\n\\n        // Send to donations\\n        uint amountDonation = (amountFee * _donationFeeCollected) / totalCollected;\\n        if(amountDonation > 0) sendViaCall(payable(donation_wallet), amountDonation);\\n\\n        // Send to LP\\n        uint256 amountETHLiquidity = address(this).balance;\\n        if(amountTokensToLiquidity > 0){\\n            _approve(address(this), address(router), amountTokensToLiquidity);\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\n                address(this),\\n                amountTokensToLiquidity,\\n                0,\\n                0,\\n                liquidity_wallet,\\n                block.timestamp\\n            );\\n            emit AutoLiquify(amountETHLiquidity, amountTokensToLiquidity);\\n        }\\n        \\n        _marketingFeeCollected = 0;\\n        _donationFeeCollected = 0;\\n        _liquidityFeeCollected = 0;\\n\\n        emit Swap(totalCollected, amountMarketing, amountDonation);\\n    }\\n\\n    function calculateFee(uint256 feeIndex, uint256 amount, bool extra_fee) internal returns(uint256) {\\n        if(extra_fee)\\n        {\\n            uint256 extraFee = (amount * extra_fee_percent) / (10**(_feeDecimal + 2));\\n            _marketingFeeCollected += extraFee;\\n            return extraFee;\\n        }\\n        uint256 marketingFee = (amount * _marketingFee[feeIndex]) / (10**(_feeDecimal + 2));\\n        uint256 donationFee = (amount * _donationFee[feeIndex]) / (10**(_feeDecimal + 2));\\n        uint256 liquidityFee = (amount * _liquidityFee[feeIndex]) / (10**(_feeDecimal + 2));\\n        \\n        _marketingFeeCollected += marketingFee;\\n        _donationFeeCollected += donationFee;\\n        _liquidityFeeCollected += liquidityFee;\\n        return marketingFee + donationFee + liquidityFee;\\n    }\\n\\n    function setMaxTxPercentage(uint256 percentage) public onlyOwner {\\n        maxTxAmount = (_totalSupply * percentage) / 10000;\\n    }\\n\\n    function setMaxWalletPercentage(uint256 percentage) public onlyOwner {\\n        maxWalletAmount = (_totalSupply * percentage) / 10000;\\n    }\\n\\n    function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {\\n        minTokensBeforeSwap = amount;\\n    }\\n\\n    function setMarketingWallet(address wallet)  external onlyOwner {\\n        marketing_wallet = wallet;\\n    }\\n\\n    function setDonationWallet(address wallet)  external onlyOwner {\\n        donation_wallet = wallet;\\n    }\\n\\n    function setLiquidityWallet(address wallet)  external onlyOwner {\\n        liquidity_wallet = wallet;\\n    }\\n\\n    function setMarketingFees(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\\n        _marketingFee[0] = buy;\\n        _marketingFee[1] = sell;\\n        _marketingFee[2] = p2p;\\n    }\\n\\n    function setDonationFees(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\\n        _donationFee[0] = buy;\\n        _donationFee[1] = sell;\\n        _donationFee[2] = p2p;\\n    }\\n\\n    function setLiquidityFees(uint256 buy, uint256 sell, uint256 p2p) external onlyOwner {\\n        _liquidityFee[0] = buy;\\n        _liquidityFee[1] = sell;\\n        _liquidityFee[2] = p2p;\\n    }\\n\\n    function setSwapEnabled(bool enabled) external onlyOwner {\\n        swapEnabled = enabled;\\n    }\\n\\n    function setFeeActive(bool value) external onlyOwner {\\n        isFeeActive = value;\\n    }\\n\\n    function setTaxless(address account, bool value) external onlyOwner {\\n        isTaxless[account] = value;\\n    }\\n\\n    function setMaxTxExempt(address account, bool value) external onlyOwner {\\n        isMaxTxExempt[account] = value;\\n    }\\n\\n    function setBlacklist(address account, bool isBlacklisted) external onlyOwner {\\n        blacklist[account] = isBlacklisted;\\n    }\\n\\n    function multiBlacklist(address[] memory addresses, bool areBlacklisted) external onlyOwner {\\n        for (uint256 i = 0;i < addresses.length; i++){\\n            blacklist[addresses[i]] = areBlacklisted;\\n        }\\n    }\\n\\n    function setWhitelist(address account, bool isWhitelisted) external onlyOwner {\\n        whitelist[account] = isWhitelisted;\\n    }\\n\\n    function multiWhitelist(address[] memory addresses, bool areWhitelisted) external onlyOwner {\\n        for (uint256 i = 0;i < addresses.length; i++){\\n            whitelist[addresses[i]] = areWhitelisted;\\n        }\\n    }\\n\\n    function setRestrictionsEnabled(bool value) external onlyOwner {\\n        restrictionsEnabled = value;\\n    }\\n\\n    fallback() external payable {}\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swaped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentToMarketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentToDonation\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_donationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donation_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaxTxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTaxless\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"areBlacklisted\",\"type\":\"bool\"}],\"name\":\"multiBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"areWhitelisted\",\"type\":\"bool\"}],\"name\":\"multiWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictionsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setDonationFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setDonationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2p\",\"type\":\"uint256\"}],\"name\":\"setMarketingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMaxTxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRestrictionsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTaxless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LGBT", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}