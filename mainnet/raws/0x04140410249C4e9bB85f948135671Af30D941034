{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.5.15 >=0.6.12;\r\n\r\n// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\r\n\r\ncontract Auth {\r\n    mapping (address => uint256) public wards;\r\n    \r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n\r\n    function rely(address usr) external auth {\r\n        wards[usr] = 1;\r\n        emit Rely(usr);\r\n    }\r\n    function deny(address usr) external auth {\r\n        wards[usr] = 0;\r\n        emit Deny(usr);\r\n    }\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"not-authorized\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net> and Centrifuge, referencing MakerDAO dss => https://github.com/makerdao/dss/blob/master/src/pot.sol\r\n\r\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\r\npragma solidity >=0.5.15;\r\n\r\ncontract Math {\r\n    uint256 constant ONE = 10 ** 27;\r\n\r\n    function safeAdd(uint x, uint y) public pure returns (uint z) {\r\n        require((z = x + y) >= x, \"safe-add-failed\");\r\n    }\r\n\r\n    function safeSub(uint x, uint y) public pure returns (uint z) {\r\n        require((z = x - y) <= x, \"safe-sub-failed\");\r\n    }\r\n\r\n    function safeMul(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"safe-mul-failed\");\r\n    }\r\n\r\n    function safeDiv(uint x, uint y) public pure returns (uint z) {\r\n        z = x / y;\r\n    }\r\n\r\n    function rmul(uint x, uint y) public pure returns (uint z) {\r\n        z = safeMul(x, y) / ONE;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) public pure returns (uint z) {\r\n        require(y > 0, \"division by zero\");\r\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\r\n    }\r\n\r\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\r\n        require(y > 0, \"division by zero\");\r\n        // always rounds up\r\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract Interest is Math {\r\n    // @notice This function provides compounding in seconds\r\n    // @param chi Accumulated interest rate over time\r\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\u02c627)\r\n    // @param lastUpdated When the interest rate was last updated\r\n    // @param pie Total sum of all amounts accumulating under one interest rate, divided by that rate\r\n    // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.\r\n    function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {\r\n        require(block.timestamp >= lastUpdated, \"tinlake-math/invalid-timestamp\");\r\n        require(chi != 0);\r\n        // instead of a interestBearingAmount we use a accumulated interest rate index (chi)\r\n        uint updatedChi = _chargeInterest(chi ,ratePerSecond, lastUpdated, block.timestamp);\r\n        return (updatedChi, safeSub(rmul(updatedChi, pie), rmul(chi, pie)));\r\n    }\r\n\r\n    // @notice This function charge interest on a interestBearingAmount\r\n    // @param interestBearingAmount is the interest bearing amount\r\n    // @param ratePerSecond Interest rate accumulation per second in RAD(10\u02c627)\r\n    // @param lastUpdated last time the interest has been charged\r\n    // @return interestBearingAmount + interest\r\n    function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {\r\n        if (block.timestamp >= lastUpdated) {\r\n            interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);\r\n        }\r\n        return interestBearingAmount;\r\n    }\r\n\r\n    function _chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated, uint current) internal pure returns (uint) {\r\n        return rmul(rpow(ratePerSecond, current - lastUpdated, ONE), interestBearingAmount);\r\n    }\r\n\r\n\r\n    // convert pie to debt/savings amount\r\n    function toAmount(uint chi, uint pie) public pure returns (uint) {\r\n        return rmul(pie, chi);\r\n    }\r\n\r\n    // convert debt/savings amount to pie\r\n    function toPie(uint chi, uint amount) public pure returns (uint) {\r\n        return rdivup(amount, chi);\r\n    }\r\n\r\n    function rpow(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                let xx := mul(x, x)\r\n                if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                let xxRound := add(xx, half)\r\n                if lt(xxRound, xx) { revert(0,0) }\r\n                x := div(xxRound, base)\r\n                if mod(n,2) {\r\n                    let zx := mul(z, x)\r\n                    if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                    let zxRound := add(zx, half)\r\n                    if lt(zxRound, zx) { revert(0,0) }\r\n                    z := div(zxRound, base)\r\n                }\r\n            }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface ManagerLike {\r\n    // put collateral into cdp\r\n    function join(uint amountDROP) external;\r\n    // draw DAi from cdp\r\n    function draw(uint amountDAI) external;\r\n    // repay cdp debt\r\n    function wipe(uint amountDAI) external;\r\n    // remove collateral from cdp\r\n    function exit(uint amountDROP) external;\r\n    // collateral ID\r\n    function ilk() external view returns(bytes32);\r\n    // indicates if soft-liquidation was activated\r\n    function safe() external view returns(bool);\r\n    // indicates if hard-liquidation was activated\r\n    function glad() external view returns(bool);\r\n    // indicates if global settlement was triggered\r\n    function live() external view returns(bool);\r\n    // auth functions\r\n    function file(bytes32 what, address data) external;\r\n\r\n    function urn() external view returns(address);\r\n}\r\n\r\n// MKR contract\r\ninterface VatLike {\r\n    function urns(bytes32, address) external view returns (uint,uint);\r\n    function ilks(bytes32) external view returns(uint, uint, uint, uint, uint);\r\n}\r\n// MKR contract\r\ninterface SpotterLike {\r\n    function ilks(bytes32) external view returns(address, uint256);\r\n}\r\n// MKR contract\r\ninterface JugLike {\r\n    function ilks(bytes32) external view returns(uint, uint);\r\n    function drip(bytes32 ilk) external returns (uint rate);\r\n    function base() external view returns(uint);\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function ilk() external view returns(bytes32);\r\n}\r\n\r\ninterface UrnLike {\r\n    function gemJoin() external view returns(address);\r\n}\r\n\r\ninterface AssessorLike {\r\n    function calcSeniorTokenPrice() external view returns(uint);\r\n    function calcSeniorAssetValue(uint seniorDebt_, uint seniorBalance_) external view returns(uint);\r\n    function changeSeniorAsset(uint seniorSupply, uint seniorRedeem) external;\r\n    function seniorDebt() external view returns(uint);\r\n    function seniorBalance() external view returns(uint);\r\n    function getNAV() external view returns(uint);\r\n    function totalBalance() external view returns(uint);\r\n    function calcExpectedSeniorAsset(uint seniorRedeem, uint seniorSupply, uint seniorBalance_, uint seniorDebt_) external view returns(uint);\r\n    function changeBorrowAmountEpoch(uint currencyAmount) external;\r\n    function borrowAmountEpoch() external view returns(uint);\r\n}\r\n\r\ninterface CoordinatorLike {\r\n    function validateRatioConstraints(uint assets, uint seniorAsset) external view returns(int);\r\n    function calcSeniorAssetValue(uint seniorRedeem, uint seniorSupply, uint currSeniorAsset, uint reserve_, uint nav_) external returns(uint);\r\n    function calcSeniorRatio(uint seniorAsset, uint NAV, uint reserve_) external returns(uint);\r\n    function submissionPeriod() external view returns(bool);\r\n}\r\n\r\ninterface ReserveLike {\r\n    function totalBalance() external returns(uint);\r\n    function hardDeposit(uint daiAmount) external;\r\n    function hardPayout(uint currencyAmount) external;\r\n}\r\n\r\ninterface TrancheLike {\r\n    function mint(address usr, uint amount) external;\r\n    function token() external returns(address);\r\n}\r\n\r\ninterface ERC20Like {\r\n    function burn(address, uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function approve(address usr, uint amount) external;\r\n}\r\n\r\ncontract Clerk is Auth, Interest {\r\n\r\n    // max amount of DAI that can be brawn from MKR\r\n    uint public creditline;\r\n\r\n    // tinlake contracts\r\n    CoordinatorLike public coordinator;\r\n    AssessorLike public assessor;\r\n    ReserveLike public reserve;\r\n    TrancheLike public tranche;\r\n\r\n    // MKR contracts\r\n    ManagerLike public mgr;\r\n    VatLike public vat;\r\n    SpotterLike public spotter;\r\n    JugLike public jug;\r\n\r\n    ERC20Like public immutable dai;\r\n    ERC20Like public collateral;\r\n\r\n    uint public constant WAD = 10*18;\r\n\r\n    // buffer to add on top of mat to avoid cdp liquidation => default 1%\r\n    uint public matBuffer = 0.01 * 10**27;\r\n\r\n    // collateral tolerance accepted because of potential rounding problems\r\n    uint public collateralTolerance = 10;\r\n\r\n    // the debt is only repaid if amount is higher than the threshold\r\n    // repaying a lower amount would cause more cost in gas fees than the debt reduction\r\n    uint public wipeThreshold = 1 * WAD;\r\n\r\n    // adapter functions can only be active if the tinlake pool is currently not in epoch closing/submissions/execution state\r\n    modifier active() { require(activated(), \"epoch-closing\"); _; }\r\n\r\n    function activated() public view returns(bool) {\r\n        return coordinator.submissionPeriod() == false && mkrActive();\r\n    }\r\n\r\n    function mkrActive() public view returns (bool) {\r\n        return mgr.safe() && mgr.glad() && mgr.live();\r\n    }\r\n\r\n    event Depend(bytes32 indexed contractName, address addr);\r\n    event File(bytes32 indexed what, uint value);\r\n\r\n    constructor(address dai_, address collateral_) {\r\n        dai = ERC20Like(dai_);\r\n        collateral =  ERC20Like(collateral_);\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n    }\r\n\r\n    function depend(bytes32 contractName, address addr) public auth {\r\n        if (contractName == \"mgr\") {\r\n            mgr =  ManagerLike(addr);\r\n        } else if (contractName == \"coordinator\") {\r\n            coordinator = CoordinatorLike(addr);\r\n        } else if (contractName == \"assessor\") {\r\n            assessor = AssessorLike(addr);\r\n        } else if (contractName == \"reserve\") {\r\n            reserve = ReserveLike(addr);\r\n        } else if (contractName == \"tranche\") {\r\n            tranche = TrancheLike(addr);\r\n        } else if (contractName == \"collateral\") {\r\n            collateral = ERC20Like(addr);\r\n        } else if (contractName == \"spotter\") {\r\n            spotter = SpotterLike(addr);\r\n        } else if (contractName == \"vat\") {\r\n            vat = VatLike(addr);\r\n        } else if (contractName == \"jug\") {\r\n            jug = JugLike(addr);\r\n        } else revert();\r\n        emit Depend(contractName, addr);\r\n    }\r\n\r\n    function file(bytes32 what, uint value) public auth {\r\n        if (what == \"buffer\") {\r\n            matBuffer = value;\r\n        } else if (what == \"tolerance\") {\r\n            collateralTolerance = value;\r\n        } else if (what == \"wipeThreshold\") {\r\n            wipeThreshold = value;\r\n        } else { revert(); }\r\n        emit File(what, value);\r\n    }\r\n\r\n    function remainingCredit() public view returns (uint) {\r\n        uint debt_ = debt();\r\n        if (creditline <= debt_ || mkrActive() == false) {\r\n            return 0;\r\n        }\r\n        return safeSub(creditline, debt_);\r\n    }\r\n\r\n    function collatDeficit() public view returns (uint) {\r\n        uint lockedCollateralDAI = rmul(cdpink(), assessor.calcSeniorTokenPrice());\r\n        uint requiredCollateralDAI = calcOvercollAmount(debt());\r\n\r\n        if(requiredCollateralDAI > collateralTolerance){\r\n            requiredCollateralDAI = safeSub(requiredCollateralDAI, collateralTolerance);\r\n        }\r\n\r\n        if (requiredCollateralDAI > lockedCollateralDAI) {\r\n            return safeSub(requiredCollateralDAI, lockedCollateralDAI);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function remainingOvercollCredit() public view returns (uint) {\r\n        return calcOvercollAmount(remainingCredit());\r\n    }\r\n\r\n    // junior stake in the cdpink -> value of drop used for debt protection\r\n    function juniorStake() public view returns (uint) {\r\n        // junior looses stake in case vault is in soft/hard liquidation mode\r\n        uint collateralValue = rmul(cdpink(), assessor.calcSeniorTokenPrice());\r\n        uint mkrDebt = debt();\r\n        if (mkrActive() == false || collateralValue < mkrDebt) {\r\n            return 0;\r\n        }\r\n        return safeSub(collateralValue, mkrDebt);\r\n    }\r\n\r\n    // increase MKR credit line\r\n    function raise(uint amountDAI) public auth active {\r\n        // creditline amount including required overcollateralization => amount by that the seniorAssetValue should be increased\r\n        uint overcollAmountDAI =  calcOvercollAmount(amountDAI);\r\n        // protection value for the creditline increase coming from the junior tranche => amount by that the juniorAssetValue should be decreased\r\n        uint protectionDAI = safeSub(overcollAmountDAI, amountDAI);\r\n        // check if the new creditline would break the pool constraints\r\n        require((validate(0, protectionDAI, overcollAmountDAI, 0) == 0), \"violates-constraints\");\r\n        // increase MKR crediline by amount\r\n        creditline = safeAdd(creditline, amountDAI);\r\n        // make increase in creditline available to new loans\r\n        assessor.changeBorrowAmountEpoch(safeAdd(assessor.borrowAmountEpoch(), amountDAI));\r\n    }\r\n\r\n    // mint DROP, join DROP into cdp, draw DAI and send to reserve\r\n    function draw(uint amountDAI) public auth active {\r\n        //make sure there is no collateral deficit before drawing out new DAI\r\n        require(collatDeficit() == 0, \"please-heal-cdp-first\");\r\n        require(amountDAI <= remainingCredit(), \"not-enough-credit-left\");\r\n        // collateral value that needs to be locked in vault to draw amountDAI\r\n        uint collateralDAI = calcOvercollAmount(amountDAI);\r\n        uint collateralDROP = rdiv(collateralDAI, assessor.calcSeniorTokenPrice());\r\n        // mint required DROP\r\n        tranche.mint(address(this), collateralDROP);\r\n        // join collateral into the cdp\r\n        collateral.approve(address(mgr), collateralDROP);\r\n        mgr.join(collateralDROP);\r\n        // draw dai from cdp\r\n        mgr.draw(amountDAI);\r\n        // move dai to reserve\r\n        dai.approve(address(reserve), amountDAI);\r\n        reserve.hardDeposit(amountDAI);\r\n        // increase seniorAsset by amountDAI\r\n        updateSeniorAsset(0, collateralDAI);\r\n    }\r\n\r\n    // transfer DAI from reserve, wipe cdp debt, exit DROP from cdp, burn DROP, harvest junior profit\r\n    function wipe(uint amountDAI) public auth active {\r\n        // if amountDAI is too low, required transaction fees of wipe would be higher\r\n        // only continue with wipe if amountDAI is higher than wipeThreshold;\r\n        if(amountDAI < wipeThreshold) {\r\n            return;\r\n        }\r\n\r\n        uint debt_ = debt();\r\n        require((debt_ > 0), \"cdp-debt-already-repaid\");\r\n\r\n        // repayment amount should not exceed cdp debt\r\n        if (amountDAI > debt_) {\r\n            amountDAI = debt_;\r\n        }\r\n\r\n        uint dropPrice = assessor.calcSeniorTokenPrice();\r\n        // get DAI from reserve\r\n        reserve.hardPayout(amountDAI);\r\n        // repay cdp debt\r\n        dai.approve(address(mgr), amountDAI);\r\n        mgr.wipe(amountDAI);\r\n        // harvest junior interest & burn surplus drop\r\n        _harvest(dropPrice);\r\n    }\r\n\r\n    // harvest junior profit\r\n    function harvest() public active {\r\n        _harvest(assessor.calcSeniorTokenPrice());\r\n    }\r\n\r\n    function _harvest(uint dropPrice) internal {\r\n        require((cdpink() > 0), \"no-profit-to-harvest\");\r\n\r\n        uint lockedCollateralDAI = rmul(cdpink(), dropPrice);\r\n        // profit => diff between the DAI value of the locked collateral in the cdp & the actual cdp debt including protection buffer\r\n        uint requiredLocked = calcOvercollAmount(debt());\r\n\r\n        if(lockedCollateralDAI < requiredLocked) {\r\n            // nothing to harvest, currently under-collateralized;\r\n            return;\r\n        }\r\n        uint profitDAI = safeSub(lockedCollateralDAI, requiredLocked);\r\n        uint profitDROP = safeDiv(safeMul(profitDAI, ONE), dropPrice);\r\n        // remove profitDROP from the vault & brun them\r\n        mgr.exit(profitDROP);\r\n        collateral.burn(address(this), profitDROP);\r\n        // decrease the seniorAssetValue by profitDAI -> DROP price stays constant\r\n        updateSeniorAsset(profitDAI, 0);\r\n    }\r\n\r\n    // decrease MKR creditline\r\n    function sink(uint amountDAI) public auth active {\r\n        require(remainingCredit() >= amountDAI, \"decrease-amount-too-high\");\r\n\r\n        // creditline amount including required overcollateralization => amount by that the seniorAssetValue should be decreased\r\n        uint overcollAmountDAI = calcOvercollAmount(amountDAI);\r\n        // protection value for the creditline decrease going to the junior tranche => amount by that the juniorAssetValue should be increased\r\n        uint protectionDAI = safeSub(overcollAmountDAI, amountDAI);\r\n        // check if the new creditline would break the pool constraints\r\n        require((validate(protectionDAI, 0, 0, overcollAmountDAI) == 0), \"pool-constraints-violated\");\r\n\r\n        // increase MKR crediline by amount\r\n        creditline = safeSub(creditline, amountDAI);\r\n        // decrease in creditline impacts amount available for new loans\r\n\r\n        uint borrowAmountEpoch = assessor.borrowAmountEpoch();\r\n\r\n        if(borrowAmountEpoch <= amountDAI) {\r\n            assessor.changeBorrowAmountEpoch(0);\r\n            return;\r\n        }\r\n\r\n        assessor.changeBorrowAmountEpoch(safeSub(borrowAmountEpoch, amountDAI));\r\n    }\r\n\r\n    function heal(uint amountDAI) public auth active {\r\n        uint collatDeficitDAI = collatDeficit();\r\n        require(collatDeficitDAI > 0, \"no-healing-required\");\r\n\r\n        // heal max up to the required missing collateral amount\r\n        if (collatDeficitDAI < amountDAI) {\r\n            amountDAI = collatDeficitDAI;\r\n        }\r\n\r\n        require((validate(0, amountDAI, 0, 0) == 0), \"violates-constraints\");\r\n        //    mint drop and move into vault\r\n        uint priceDROP = assessor.calcSeniorTokenPrice();\r\n        uint collateralDROP = rdiv(amountDAI, priceDROP);\r\n        tranche.mint(address(this), collateralDROP);\r\n        collateral.approve(address(mgr), collateralDROP);\r\n        mgr.join(collateralDROP);\r\n        // increase seniorAsset by amountDAI\r\n        updateSeniorAsset(0, amountDAI);\r\n    }\r\n\r\n    // heal the cdp and put in more drop in case the collateral value has fallen below the bufferedmat ratio\r\n    function heal() public auth active{\r\n        uint collatDeficitDAI = collatDeficit();\r\n        if (collatDeficitDAI > 0) {\r\n            heal(collatDeficitDAI);\r\n        }\r\n    }\r\n\r\n    // checks if the Maker credit line increase could violate the pool constraints // -> make function pure and call with current pool values approxNav\r\n    function validate(uint juniorSupplyDAI, uint juniorRedeemDAI, uint seniorSupplyDAI, uint seniorRedeemDAI) public view returns(int) {\r\n        uint newAssets = safeSub(safeSub(safeAdd(safeAdd(safeAdd(assessor.totalBalance(), assessor.getNAV()), seniorSupplyDAI),\r\n            juniorSupplyDAI), juniorRedeemDAI), seniorRedeemDAI);\r\n        uint expectedSeniorAsset = assessor.calcExpectedSeniorAsset(seniorRedeemDAI, seniorSupplyDAI,\r\n            assessor.seniorBalance(), assessor.seniorDebt());\r\n        return coordinator.validateRatioConstraints(newAssets, expectedSeniorAsset);\r\n    }\r\n\r\n    function updateSeniorAsset(uint decreaseDAI, uint increaseDAI) internal  {\r\n        assessor.changeSeniorAsset(increaseDAI, decreaseDAI);\r\n    }\r\n\r\n    // returns the collateral amount in the cdp\r\n    function cdpink() public view returns (uint) {\r\n        uint ink = collateral.balanceOf(address(mgr));\r\n        return ink;\r\n    }\r\n\r\n    // returns the required security margin for the DROP tokens\r\n    function mat() public view returns (uint) {\r\n        (, uint256 mat_) = spotter.ilks(ilk());\r\n        return safeAdd(mat_, matBuffer); //  e.g 150% denominated in RAY\r\n    }\r\n\r\n    // helper function that returns the overcollateralized DAI amount considering the current mat value\r\n    function calcOvercollAmount(uint amountDAI) public view returns (uint) {\r\n        return rmul(amountDAI, mat());\r\n    }\r\n\r\n    // In case contract received DAI as a leftover from the cdp liquidation return back to reserve\r\n    function returnDAI() public auth {\r\n        uint amountDAI = dai.balanceOf(address(this));\r\n        dai.approve(address(reserve), amountDAI);\r\n        reserve.hardDeposit(amountDAI);\r\n    }\r\n\r\n    function changeOwnerMgr(address usr) public auth {\r\n        mgr.file(\"owner\", usr);\r\n    }\r\n\r\n    // returns the current debt from the Maker vault\r\n    function debt() public view returns(uint) {\r\n        bytes32 ilk_ = ilk();\r\n        // get debt index\r\n        (, uint art) = vat.urns(ilk_, mgr.urn());\r\n\r\n        // get accumulated interest rate index\r\n        (, uint rateIdx,,,) = vat.ilks(ilk_);\r\n\r\n        // get interest rate per second and last interest rate update timestamp\r\n        (uint duty, uint rho) = jug.ilks(ilk_);\r\n\r\n        // interest accumulation up to date\r\n        if (block.timestamp == rho) {\r\n            return rmul(art, rateIdx);\r\n        }\r\n\r\n        // calculate current debt (see jug.drip function in MakerDAO)\r\n        return rmul(art, rmul(rpow(safeAdd(jug.base(), duty), safeSub(block.timestamp, rho), ONE), rateIdx));\r\n    }\r\n\r\n    function stabilityFeeIndex() public view returns(uint) {\r\n        (, uint rate, , ,) = vat.ilks(ilk());\r\n        return rate;\r\n    }\r\n\r\n    function stabilityFee() public view returns(uint) {\r\n        // mkr.duty is the stability fee in the mkr system\r\n        (uint duty, ) =  jug.ilks(ilk());\r\n        return safeAdd(jug.base(), duty);\r\n    }\r\n\r\n    function ilk() public view returns (bytes32) {\r\n        return GemJoinLike(UrnLike(mgr.urn()).gemJoin()).ilk();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dai_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Depend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assessor\",\"outputs\":[{\"internalType\":\"contract AssessorLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDAI\",\"type\":\"uint256\"}],\"name\":\"calcOvercollAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"changeOwnerMgr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestBearingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"name\":\"chargeInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collatDeficit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract ERC20Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pie\",\"type\":\"uint256\"}],\"name\":\"compounding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinator\",\"outputs\":[{\"internalType\":\"contract CoordinatorLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract ERC20Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"depend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDAI\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDAI\",\"type\":\"uint256\"}],\"name\":\"heal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jug\",\"outputs\":[{\"internalType\":\"contract JugLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juniorStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mgr\",\"outputs\":[{\"internalType\":\"contract ManagerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkrActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDAI\",\"type\":\"uint256\"}],\"name\":\"raise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingOvercollCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract ReserveLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDAI\",\"type\":\"uint256\"}],\"name\":\"sink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract SpotterLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityFeeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pie\",\"type\":\"uint256\"}],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toPie\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tranche\",\"outputs\":[{\"internalType\":\"contract TrancheLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"juniorSupplyDAI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorRedeemDAI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorSupplyDAI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorRedeemDAI\",\"type\":\"uint256\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDAI\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wipeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Clerk", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000044718d306a8fa89545704ae38b2b97c06bf11fc1", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4887a1bd6463824ae383d6dae03395398ddc8cdbc6b96fc43965cc68f93c200b"}]}