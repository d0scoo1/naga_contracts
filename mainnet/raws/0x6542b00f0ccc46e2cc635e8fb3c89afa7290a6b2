{"status": "1", "message": "OK", "result": [{"SourceCode": "// New and improved, audited ZEUS10000 contract.\r\n\r\n// WEB: https://zeus10000.com/\r\n// NFTs: chadgodnft.com\r\n// TG: t.me/zeus10000eth\r\n// TWITTER: https://twitter.com/zeustokeneth\r\n\r\n\r\n\r\n\r\n\r\n// File: contracts/IERC20.sol\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: contracts/Withdrawable.sol\r\n\r\nabstract contract Withdrawable {\r\n    address internal _withdrawAddress;\r\n\r\n    modifier onlyWithdrawer() {\r\n        require(msg.sender == _withdrawAddress);\r\n        _;\r\n    }\r\n\r\n    function withdraw() external onlyWithdrawer {\r\n        _withdraw();\r\n    }\r\n\r\n    function _withdraw() internal {\r\n        payable(_withdrawAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function setWithdrawAddress(address newWithdrawAddress)\r\n        external\r\n        onlyWithdrawer\r\n    {\r\n        _withdrawAddress = newWithdrawAddress;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\nabstract contract Ownable {\r\n    address _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Claimer.sol\r\n\r\n\r\n\r\n\r\n\r\ncontract Claimer is Ownable, Withdrawable {\r\n    IERC20 public oldContract;\r\n    IERC20 public newContract;\r\n\r\n    constructor() {\r\n        _withdrawAddress = address(0x64485E260439613940b16821ad080c6862B73152);\r\n    }\r\n\r\n    function setOldContract(address oldContract_) external onlyOwner {\r\n        oldContract = IERC20(oldContract_);\r\n    }\r\n\r\n    function setNewContract(address newContract_) external onlyOwner {\r\n        newContract = IERC20(newContract_);\r\n        _withdrawAddress = newContract_;\r\n    }\r\n\r\n    function setWithdrawAddressOwner(address withdrawAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _withdrawAddress = withdrawAddress;\r\n    }\r\n\r\n    function Claim() external {\r\n        uint256 balance = oldContract.balanceOf(msg.sender);\r\n        oldContract.transferFrom(msg.sender, _owner, balance);\r\n        newContract.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function withdrawOwner() external onlyOwner {\r\n        _withdraw();\r\n    }\r\n\r\n    function withdrawOldTokens() external onlyOwner {\r\n        oldContract.transfer(_withdrawAddress, oldContract.balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawNewTokens() external onlyOwner {\r\n        newContract.transfer(_withdrawAddress, newContract.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract_\",\"type\":\"address\"}],\"name\":\"setNewContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldContract_\",\"type\":\"address\"}],\"name\":\"setOldContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWithdrawAddress\",\"type\":\"address\"}],\"name\":\"setWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"setWithdrawAddressOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNewTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Claimer", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://31c621fbb0f8616bf3f670379ad1437dd2c9265cdf864d3cf777fd92206258c6"}]}