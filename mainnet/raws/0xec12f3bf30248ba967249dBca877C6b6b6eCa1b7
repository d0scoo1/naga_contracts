{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SchainsInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SchainsInternal.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISchainsInternal.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/INodes.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./ConstantsHolder.sol\\\";\\nimport \\\"./utils/Random.sol\\\";\\n\\n\\n/**\\n * @title SchainsInternal\\n * @dev Contract contains all functionality logic to internally manage Schains.\\n */\\ncontract SchainsInternal is Permissions, ISchainsInternal {\\n\\n    using Random for IRandom.RandomGenerator;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    // mapping which contain all schains\\n    mapping (bytes32 => Schain) public schains;\\n\\n    mapping (bytes32 => bool) public override isSchainActive;\\n\\n    mapping (bytes32 => uint[]) public schainsGroups;\\n\\n    mapping (bytes32 => mapping (uint => bool)) private _exceptionsForGroups;\\n    // mapping shows schains by owner's address\\n    mapping (address => bytes32[]) public schainIndexes;\\n    // mapping shows schains which Node composed in\\n    mapping (uint => bytes32[]) public schainsForNodes;\\n\\n    mapping (uint => uint[]) public holesForNodes;\\n\\n    mapping (bytes32 => uint[]) public holesForSchains;\\n\\n    // array which contain all schains\\n    bytes32[] public override schainsAtSystem;\\n\\n    uint64 public override numberOfSchains;\\n    // total resources that schains occupied\\n    uint public sumOfSchainsResources;\\n\\n    mapping (bytes32 => bool) public usedSchainNames;\\n\\n    mapping (uint => SchainType) public schainTypes;\\n    uint public numberOfSchainTypes;\\n\\n    //   schain hash =>   node index  => index of place\\n    // index of place is a number from 1 to max number of slots on node(128)\\n    mapping (bytes32 => mapping (uint => uint)) public placeOfSchainOnNode;\\n\\n    mapping (uint => bytes32[]) private _nodeToLockedSchains;\\n\\n    mapping (bytes32 => uint[]) private _schainToExceptionNodes;\\n\\n    EnumerableSetUpgradeable.UintSet private _keysOfSchainTypes;\\n\\n    uint public currentGeneration;\\n\\n    bytes32 public constant SCHAIN_TYPE_MANAGER_ROLE = keccak256(\\\"SCHAIN_TYPE_MANAGER_ROLE\\\");\\n    bytes32 public constant DEBUGGER_ROLE = keccak256(\\\"DEBUGGER_ROLE\\\");\\n    bytes32 public constant GENERATION_MANAGER_ROLE = keccak256(\\\"GENERATION_MANAGER_ROLE\\\");\\n\\n    modifier onlySchainTypeManager() {\\n        require(hasRole(SCHAIN_TYPE_MANAGER_ROLE, msg.sender), \\\"SCHAIN_TYPE_MANAGER_ROLE is required\\\");\\n        _;\\n    }\\n\\n    modifier onlyDebugger() {\\n        require(hasRole(DEBUGGER_ROLE, msg.sender), \\\"DEBUGGER_ROLE is required\\\");\\n        _;\\n    }\\n\\n    modifier onlyGenerationManager() {\\n        require(hasRole(GENERATION_MANAGER_ROLE, msg.sender), \\\"GENERATION_MANAGER_ROLE is required\\\");\\n        _;\\n    }\\n\\n    modifier schainExists(bytes32 schainHash) {\\n        require(isSchainExist(schainHash), \\\"The schain does not exist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows Schain contract to initialize an schain.\\n     */\\n    function initializeSchain(\\n        string calldata name,\\n        address from,\\n        address originator,\\n        uint lifetime,\\n        uint deposit\\n    )\\n        external\\n        override\\n        allow(\\\"Schains\\\")\\n    {\\n        bytes32 schainHash = keccak256(abi.encodePacked(name));\\n\\n        schains[schainHash] = Schain({\\n            name: name,\\n            owner: from,\\n            indexInOwnerList: schainIndexes[from].length,\\n            partOfNode: 0,\\n            startDate: block.timestamp,            \\n            startBlock: block.number,\\n            lifetime: lifetime,\\n            deposit: deposit,\\n            index: numberOfSchains,\\n            generation: currentGeneration,\\n            originator: originator\\n        });\\n        isSchainActive[schainHash] = true;\\n        numberOfSchains++;\\n        schainIndexes[from].push(schainHash);\\n        schainsAtSystem.push(schainHash);\\n        usedSchainNames[schainHash] = true;\\n    }\\n\\n    /**\\n     * @dev Allows Schain contract to create a node group for an schain.\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains smart contract\\n     * - Schain must exist\\n     */\\n    function createGroupForSchain(\\n        bytes32 schainHash,\\n        uint numberOfNodes,\\n        uint8 partOfNode\\n    )\\n        external\\n        override\\n        allow(\\\"Schains\\\")\\n        schainExists(schainHash)\\n        returns (uint[] memory)\\n    {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n        schains[schainHash].partOfNode = partOfNode;\\n        if (partOfNode > 0) {\\n            sumOfSchainsResources = sumOfSchainsResources +\\n                numberOfNodes * constantsHolder.TOTAL_SPACE_ON_NODE() / partOfNode;\\n        }\\n        return _generateGroup(schainHash, numberOfNodes);\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to change the Schain lifetime through\\n     * an additional SKL token deposit.\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains smart contract\\n     * - Schain must exist\\n     */\\n    function changeLifetime(\\n        bytes32 schainHash,\\n        uint lifetime,\\n        uint deposit\\n    )\\n        external\\n        override\\n        allow(\\\"Schains\\\")\\n        schainExists(schainHash)\\n    {\\n        schains[schainHash].deposit = schains[schainHash].deposit + deposit;\\n        schains[schainHash].lifetime = schains[schainHash].lifetime + lifetime;\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to remove an schain from the network.\\n     * Generally schains are not removed from the system; instead they are\\n     * simply allowed to expire.\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains smart contract\\n     * - Schain must exist\\n     */\\n    function removeSchain(bytes32 schainHash, address from)\\n        external\\n        override\\n        allow(\\\"Schains\\\")\\n        schainExists(schainHash)\\n    {\\n        isSchainActive[schainHash] = false;\\n        uint length = schainIndexes[from].length;\\n        uint index = schains[schainHash].indexInOwnerList;\\n        if (index != length - 1) {\\n            bytes32 lastSchainHash = schainIndexes[from][length - 1];\\n            schains[lastSchainHash].indexInOwnerList = index;\\n            schainIndexes[from][index] = lastSchainHash;\\n        }\\n        schainIndexes[from].pop();\\n\\n        // TODO:\\n        // optimize\\n        for (uint i = 0; i + 1 < schainsAtSystem.length; i++) {\\n            if (schainsAtSystem[i] == schainHash) {\\n                schainsAtSystem[i] = schainsAtSystem[schainsAtSystem.length - 1];\\n                break;\\n            }\\n        }\\n        schainsAtSystem.pop();\\n\\n        delete schains[schainHash];\\n        numberOfSchains--;\\n    }\\n\\n    /**\\n     * @dev Allows Schains and SkaleDKG contracts to remove a node from an\\n     * schain for node rotation or DKG failure.\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains, SkaleDKG or NodeRotation smart contract\\n     * - Schain must exist\\n     */\\n    function removeNodeFromSchain(\\n        uint nodeIndex,\\n        bytes32 schainHash\\n    )\\n        external\\n        override\\n        allowThree(\\\"NodeRotation\\\", \\\"SkaleDKG\\\", \\\"Schains\\\")\\n        schainExists(schainHash)\\n    {\\n        uint indexOfNode = _findNode(schainHash, nodeIndex);\\n        uint indexOfLastNode = schainsGroups[schainHash].length - 1;\\n\\n        if (indexOfNode == indexOfLastNode) {\\n            schainsGroups[schainHash].pop();\\n        } else {\\n            delete schainsGroups[schainHash][indexOfNode];\\n            if (holesForSchains[schainHash].length > 0 && holesForSchains[schainHash][0] > indexOfNode) {\\n                uint hole = holesForSchains[schainHash][0];\\n                holesForSchains[schainHash][0] = indexOfNode;\\n                holesForSchains[schainHash].push(hole);\\n            } else {\\n                holesForSchains[schainHash].push(indexOfNode);\\n            }\\n        }\\n\\n        removeSchainForNode(nodeIndex, placeOfSchainOnNode[schainHash][nodeIndex] - 1);\\n        delete placeOfSchainOnNode[schainHash][nodeIndex];\\n        INodes nodes = INodes(contractManager.getContract(\\\"Nodes\\\"));\\n        nodes.addSpaceToNode(nodeIndex, schains[schainHash].partOfNode);\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to delete a group of schains\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains smart contract\\n     * - Schain must exist\\n     */\\n    function deleteGroup(bytes32 schainHash) external override allow(\\\"Schains\\\") schainExists(schainHash) {\\n        // delete channel\\n        ISkaleDKG skaleDKG = ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\"));\\n        delete schainsGroups[schainHash];\\n        skaleDKG.deleteChannel(schainHash);\\n    }\\n\\n    /**\\n     * @dev Allows Schain and NodeRotation contracts to set a Node like\\n     * exception for a given schain and nodeIndex.\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains or NodeRotation smart contract\\n     * - Schain must exist\\n     */\\n    function setException(\\n        bytes32 schainHash,\\n        uint nodeIndex\\n    )\\n        external\\n        override\\n        allowTwo(\\\"Schains\\\", \\\"NodeRotation\\\")\\n        schainExists(schainHash)\\n    {\\n        _setException(schainHash, nodeIndex);\\n    }\\n\\n    /**\\n     * @dev Allows Schains and NodeRotation contracts to add node to an schain\\n     * group.\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains or NodeRotation smart contract\\n     * - Schain must exist\\n     */\\n    function setNodeInGroup(\\n        bytes32 schainHash,\\n        uint nodeIndex\\n    )\\n        external\\n        override\\n        allowTwo(\\\"Schains\\\", \\\"NodeRotation\\\")\\n        schainExists(schainHash)\\n    {\\n        if (holesForSchains[schainHash].length == 0) {\\n            schainsGroups[schainHash].push(nodeIndex);\\n        } else {\\n            schainsGroups[schainHash][holesForSchains[schainHash][0]] = nodeIndex;\\n            uint min = type(uint).max;\\n            uint index = 0;\\n            for (uint i = 1; i < holesForSchains[schainHash].length; i++) {\\n                if (min > holesForSchains[schainHash][i]) {\\n                    min = holesForSchains[schainHash][i];\\n                    index = i;\\n                }\\n            }\\n            if (min == type(uint).max) {\\n                delete holesForSchains[schainHash];\\n            } else {\\n                holesForSchains[schainHash][0] = min;\\n                holesForSchains[schainHash][index] =\\n                    holesForSchains[schainHash][holesForSchains[schainHash].length - 1];\\n                holesForSchains[schainHash].pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to remove holes for schains\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains smart contract\\n     * - Schain must exist\\n     */\\n    function removeHolesForSchain(bytes32 schainHash) external override allow(\\\"Schains\\\") schainExists(schainHash) {\\n        delete holesForSchains[schainHash];\\n    }\\n\\n    /**\\n     * @dev Allows Admin to add schain type\\n     */\\n    function addSchainType(uint8 partOfNode, uint numberOfNodes) external override onlySchainTypeManager {\\n        require(_keysOfSchainTypes.add(numberOfSchainTypes + 1), \\\"Schain type is already added\\\");\\n        schainTypes[numberOfSchainTypes + 1].partOfNode = partOfNode;\\n        schainTypes[numberOfSchainTypes + 1].numberOfNodes = numberOfNodes;\\n        numberOfSchainTypes++;\\n        emit SchainTypeAdded(numberOfSchainTypes, partOfNode, numberOfNodes);\\n    }\\n\\n    /**\\n     * @dev Allows Admin to remove schain type\\n     */\\n    function removeSchainType(uint typeOfSchain) external override onlySchainTypeManager {\\n        require(_keysOfSchainTypes.remove(typeOfSchain), \\\"Schain type is already removed\\\");\\n        delete schainTypes[typeOfSchain].partOfNode;\\n        delete schainTypes[typeOfSchain].numberOfNodes;\\n        emit SchainTypeRemoved(typeOfSchain);\\n    }\\n\\n    /**\\n     * @dev Allows Admin to set number of schain types\\n     */\\n    function setNumberOfSchainTypes(uint newNumberOfSchainTypes) external override onlySchainTypeManager {\\n        numberOfSchainTypes = newNumberOfSchainTypes;\\n    }\\n\\n    function removeNodeFromAllExceptionSchains(uint nodeIndex) external override allow(\\\"SkaleManager\\\") {\\n        uint len = _nodeToLockedSchains[nodeIndex].length;\\n        for (uint i = len; i > 0; i--) {\\n            removeNodeFromExceptions(_nodeToLockedSchains[nodeIndex][i - 1], nodeIndex);\\n        }\\n    }\\n\\n    /**\\n     * @dev Clear list of nodes that can't be chosen to schain with id {schainHash}\\n     */\\n    function removeAllNodesFromSchainExceptions(bytes32 schainHash) external override allow(\\\"Schains\\\") {\\n        for (uint i = 0; i < _schainToExceptionNodes[schainHash].length; ++i) {\\n            removeNodeFromExceptions(schainHash, _schainToExceptionNodes[schainHash][i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mark all nodes in the schain as invisible\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is NodeRotation or SkaleDKG smart contract\\n     * - Schain must exist\\n     */\\n\\n    function makeSchainNodesInvisible(\\n        bytes32 schainHash\\n    )\\n        external\\n        override\\n        allowTwo(\\\"NodeRotation\\\", \\\"SkaleDKG\\\")\\n        schainExists(schainHash)\\n    {\\n        INodes nodes = INodes(contractManager.getContract(\\\"Nodes\\\"));\\n        for (uint i = 0; i < _schainToExceptionNodes[schainHash].length; i++) {\\n            nodes.makeNodeInvisible(_schainToExceptionNodes[schainHash][i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mark all nodes in the schain as visible\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is NodeRotation or SkaleDKG smart contract\\n     * - Schain must exist\\n     */\\n    function makeSchainNodesVisible(\\n        bytes32 schainHash\\n    )\\n        external\\n        override\\n        allowTwo(\\\"NodeRotation\\\", \\\"SkaleDKG\\\")\\n        schainExists(schainHash)\\n    {\\n        _makeSchainNodesVisible(schainHash);\\n    }\\n\\n    /**\\n     * @dev Increments generation for all new schains\\n     *\\n     * Requirements:\\n     * \\n     * - Sender must be granted with GENERATION_MANAGER_ROLE\\n     */\\n    function newGeneration() external override onlyGenerationManager {\\n        currentGeneration += 1;\\n    }\\n\\n    /**\\n     * @dev Returns all Schains in the network.\\n     */\\n    function getSchains() external view override returns (bytes32[] memory) {\\n        return schainsAtSystem;\\n    }\\n\\n    /**\\n     * @dev Returns all occupied resources on one node for an Schain.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function getSchainsPartOfNode(bytes32 schainHash) external view override schainExists(schainHash) returns (uint8) {\\n        return schains[schainHash].partOfNode;\\n    }\\n\\n    /**\\n     * @dev Returns number of schains by schain owner.\\n     */\\n    function getSchainListSize(address from) external view override returns (uint) {\\n        return schainIndexes[from].length;\\n    }\\n\\n    /**\\n     * @dev Returns hashes of schain names by schain owner.\\n     */\\n    function getSchainHashesByAddress(address from) external view override returns (bytes32[] memory) {\\n        return schainIndexes[from];\\n    }\\n\\n    /**\\n     * @dev Returns hashes of schain names by schain owner.\\n     */\\n    function getSchainIdsByAddress(address from) external view override returns (bytes32[] memory) {\\n        return schainIndexes[from];\\n    }\\n\\n    /**\\n     * @dev Returns hashes of schain names running on a node.\\n     */\\n    function getSchainHashesForNode(uint nodeIndex) external view override returns (bytes32[] memory) {\\n        return schainsForNodes[nodeIndex];\\n    }\\n\\n    /**\\n     * @dev Returns hashes of schain names running on a node.\\n     */\\n    function getSchainIdsForNode(uint nodeIndex) external view override returns (bytes32[] memory) {\\n        return schainsForNodes[nodeIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the owner of an schain.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function getSchainOwner(bytes32 schainHash) external view override schainExists(schainHash) returns (address) {\\n        return schains[schainHash].owner;\\n    }\\n\\n    /**\\n     * @dev Returns an originator of the schain.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function getSchainOriginator(bytes32 schainHash)\\n        external\\n        view\\n        override\\n        schainExists(schainHash)\\n        returns (address)\\n    {\\n        require(schains[schainHash].originator != address(0), \\\"Originator address is not set\\\");\\n        return schains[schainHash].originator;\\n    }\\n\\n    /**\\n     * @dev Checks whether schain name is available.\\n     * TODO Need to delete - copy of web3.utils.soliditySha3\\n     */\\n    function isSchainNameAvailable(string calldata name) external view override returns (bool) {\\n        bytes32 schainHash = keccak256(abi.encodePacked(name));\\n        return schains[schainHash].owner == address(0) &&\\n            !usedSchainNames[schainHash] &&\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"Mainnet\\\")) &&\\n            bytes(name).length > 0;\\n    }\\n\\n    /**\\n     * @dev Checks whether schain lifetime has expired.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function isTimeExpired(bytes32 schainHash) external view override schainExists(schainHash) returns (bool) {\\n        return uint(schains[schainHash].startDate) + schains[schainHash].lifetime < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Checks whether address is owner of schain.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function isOwnerAddress(\\n        address from,\\n        bytes32 schainHash\\n    )\\n        external\\n        view\\n        override\\n        schainExists(schainHash)\\n        returns (bool)\\n    {\\n        return schains[schainHash].owner == from;\\n    }\\n\\n    /**\\n     * @dev Returns schain name.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function getSchainName(bytes32 schainHash)\\n        external\\n        view\\n        override schainExists(schainHash)\\n        returns (string memory)\\n    {\\n        return schains[schainHash].name;\\n    }\\n\\n    /**\\n     * @dev Returns last active schain of a node.\\n     */\\n    function getActiveSchain(uint nodeIndex) external view override returns (bytes32) {\\n        for (uint i = schainsForNodes[nodeIndex].length; i > 0; i--) {\\n            if (schainsForNodes[nodeIndex][i - 1] != bytes32(0)) {\\n                return schainsForNodes[nodeIndex][i - 1];\\n            }\\n        }\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @dev Returns active schains of a node.\\n     */\\n    function getActiveSchains(uint nodeIndex) external view override returns (bytes32[] memory activeSchains) {\\n        uint activeAmount = 0;\\n        for (uint i = 0; i < schainsForNodes[nodeIndex].length; i++) {\\n            if (schainsForNodes[nodeIndex][i] != bytes32(0)) {\\n                activeAmount++;\\n            }\\n        }\\n\\n        uint cursor = 0;\\n        activeSchains = new bytes32[](activeAmount);\\n        for (uint i = schainsForNodes[nodeIndex].length; i > 0; i--) {\\n            if (schainsForNodes[nodeIndex][i - 1] != bytes32(0)) {\\n                activeSchains[cursor++] = schainsForNodes[nodeIndex][i - 1];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns number of nodes in an schain group.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function getNumberOfNodesInGroup(bytes32 schainHash)\\n        external\\n        view\\n        override\\n        schainExists(schainHash)\\n        returns (uint)\\n    {\\n        return schainsGroups[schainHash].length;\\n    }\\n\\n    /**\\n     * @dev Returns nodes in an schain group.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function getNodesInGroup(bytes32 schainHash)\\n        external\\n        view\\n        override\\n        schainExists(schainHash)\\n        returns (uint[] memory)\\n    {\\n        return schainsGroups[schainHash];\\n    }\\n\\n    /**\\n     * @dev Checks whether sender is a node address from a given schain group.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function isNodeAddressesInGroup(\\n        bytes32 schainHash,\\n        address sender\\n    )\\n        external\\n        view\\n        override\\n        schainExists(schainHash)\\n        returns (bool)\\n    {\\n        INodes nodes = INodes(contractManager.getContract(\\\"Nodes\\\"));\\n        for (uint i = 0; i < schainsGroups[schainHash].length; i++) {\\n            if (nodes.getNodeAddress(schainsGroups[schainHash][i]) == sender) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns node index in schain group.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function getNodeIndexInGroup(\\n        bytes32 schainHash,\\n        uint nodeId\\n    )\\n        external\\n        view\\n        override\\n        schainExists(schainHash)\\n        returns (uint)\\n    {\\n        for (uint index = 0; index < schainsGroups[schainHash].length; index++) {\\n            if (schainsGroups[schainHash][index] == nodeId) {\\n                return index;\\n            }\\n        }\\n        return schainsGroups[schainHash].length;\\n    }\\n\\n    /**\\n     * @dev Checks whether there are any nodes with free resources for given\\n     * schain.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function isAnyFreeNode(bytes32 schainHash) external view override schainExists(schainHash) returns (bool) {\\n        INodes nodes = INodes(contractManager.getContract(\\\"Nodes\\\"));\\n        uint8 space = schains[schainHash].partOfNode;\\n        return nodes.countNodesWithFreeSpace(space) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether any exceptions exist for node in a schain group.\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function checkException(bytes32 schainHash, uint nodeIndex)\\n        external\\n        view\\n        override\\n        schainExists(schainHash)\\n        returns (bool)\\n    {\\n        return _exceptionsForGroups[schainHash][nodeIndex];\\n    }\\n\\n    /**\\n     * @dev Checks if the node is in holes for the schain\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function checkHoleForSchain(\\n        bytes32 schainHash,\\n        uint indexOfNode\\n    )\\n        external\\n        view\\n        override\\n        schainExists(schainHash)\\n        returns (bool)\\n    {\\n        for (uint i = 0; i < holesForSchains[schainHash].length; i++) {\\n            if (holesForSchains[schainHash][i] == indexOfNode) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Checks if the node is assigned for the schain\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function checkSchainOnNode(\\n        uint nodeIndex,\\n        bytes32 schainHash\\n    )\\n        external\\n        view\\n        override\\n        schainExists(schainHash)\\n        returns (bool)\\n    {\\n        return placeOfSchainOnNode[schainHash][nodeIndex] != 0;\\n    }\\n\\n    function getSchainType(uint typeOfSchain) external view override returns(uint8, uint) {\\n        require(_keysOfSchainTypes.contains(typeOfSchain), \\\"Invalid type of schain\\\");\\n        return (schainTypes[typeOfSchain].partOfNode, schainTypes[typeOfSchain].numberOfNodes);\\n    }\\n\\n    /**\\n     * @dev Returns generation of a particular schain\\n     *\\n     * Requirements:\\n     * \\n     * - Schain must exist\\n     */\\n    function getGeneration(bytes32 schainHash) external view override schainExists(schainHash) returns (uint) {\\n        return schains[schainHash].generation;\\n    }\\n\\n    function initialize(address newContractsAddress) public override initializer {\\n        Permissions.initialize(newContractsAddress);\\n\\n        numberOfSchains = 0;\\n        sumOfSchainsResources = 0;\\n        numberOfSchainTypes = 0;\\n    }\\n\\n    /**\\n     * @dev Allows Schains and NodeRotation contracts to add schain to node.\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains or NodeRotation smart contract\\n     * - Schain must exist\\n     */\\n    function addSchainForNode(\\n        uint nodeIndex,\\n        bytes32 schainHash\\n    )\\n        public\\n        override\\n        allowTwo(\\\"Schains\\\", \\\"NodeRotation\\\")\\n        schainExists(schainHash)\\n    {\\n        if (holesForNodes[nodeIndex].length == 0) {\\n            schainsForNodes[nodeIndex].push(schainHash);\\n            placeOfSchainOnNode[schainHash][nodeIndex] = schainsForNodes[nodeIndex].length;\\n        } else {\\n            uint lastHoleOfNode = holesForNodes[nodeIndex][holesForNodes[nodeIndex].length - 1];\\n            schainsForNodes[nodeIndex][lastHoleOfNode] = schainHash;\\n            placeOfSchainOnNode[schainHash][nodeIndex] = lastHoleOfNode + 1;\\n            holesForNodes[nodeIndex].pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Schains, NodeRotation, and SkaleDKG contracts to remove an \\n     * schain from a node.\\n     */\\n    function removeSchainForNode(uint nodeIndex, uint schainIndex)\\n        public\\n        override\\n        allowThree(\\\"NodeRotation\\\", \\\"SkaleDKG\\\", \\\"Schains\\\")\\n    {\\n        uint length = schainsForNodes[nodeIndex].length;\\n        if (schainIndex == length - 1) {\\n            schainsForNodes[nodeIndex].pop();\\n        } else {\\n            delete schainsForNodes[nodeIndex][schainIndex];\\n            if (holesForNodes[nodeIndex].length > 0 && holesForNodes[nodeIndex][0] > schainIndex) {\\n                uint hole = holesForNodes[nodeIndex][0];\\n                holesForNodes[nodeIndex][0] = schainIndex;\\n                holesForNodes[nodeIndex].push(hole);\\n            } else {\\n                holesForNodes[nodeIndex].push(schainIndex);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to remove node from exceptions\\n     *\\n     * Requirements:\\n     * \\n     * - Message sender is Schains, NodeRotation or SkaleManager smart contract\\n     * - Schain must exist\\n     */\\n    function removeNodeFromExceptions(bytes32 schainHash, uint nodeIndex)\\n        public\\n        override\\n        allowThree(\\\"Schains\\\", \\\"NodeRotation\\\", \\\"SkaleManager\\\")\\n        schainExists(schainHash)\\n    {\\n        _exceptionsForGroups[schainHash][nodeIndex] = false;\\n        uint len = _nodeToLockedSchains[nodeIndex].length;\\n        for (uint i = len; i > 0; i--) {\\n            if (_nodeToLockedSchains[nodeIndex][i - 1] == schainHash) {\\n                if (i != len) {\\n                    _nodeToLockedSchains[nodeIndex][i - 1] = _nodeToLockedSchains[nodeIndex][len - 1];\\n                }\\n                _nodeToLockedSchains[nodeIndex].pop();\\n                break;\\n            }\\n        }\\n        len = _schainToExceptionNodes[schainHash].length;\\n        for (uint i = len; i > 0; i--) {\\n            if (_schainToExceptionNodes[schainHash][i - 1] == nodeIndex) {\\n                if (i != len) {\\n                    _schainToExceptionNodes[schainHash][i - 1] = _schainToExceptionNodes[schainHash][len - 1];\\n                }\\n                _schainToExceptionNodes[schainHash].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks whether schain exists.\\n     */\\n    function isSchainExist(bytes32 schainHash) public view override returns (bool) {\\n        return bytes(schains[schainHash].name).length != 0;\\n    }\\n\\n    function _getNodeToLockedSchains() internal view returns (mapping(uint => bytes32[]) storage) {\\n        return _nodeToLockedSchains;\\n    }\\n\\n    function _getSchainToExceptionNodes() internal view returns (mapping(bytes32 => uint[]) storage) {\\n        return _schainToExceptionNodes;\\n    }\\n\\n    /**\\n     * @dev Generates schain group using a pseudo-random generator.\\n     */\\n    function _generateGroup(bytes32 schainHash, uint numberOfNodes) private returns (uint[] memory nodesInGroup) {\\n        INodes nodes = INodes(contractManager.getContract(\\\"Nodes\\\"));\\n        uint8 space = schains[schainHash].partOfNode;\\n        nodesInGroup = new uint[](numberOfNodes);\\n\\n        require(nodes.countNodesWithFreeSpace(space) >= nodesInGroup.length, \\\"Not enough nodes to create Schain\\\");\\n        IRandom.RandomGenerator memory randomGenerator = Random.createFromEntropy(\\n            abi.encodePacked(uint(blockhash(block.number - 1)), schainHash)\\n        );\\n        for (uint i = 0; i < numberOfNodes; i++) {\\n            uint node = nodes.getRandomNodeWithFreeSpace(space, randomGenerator);\\n            nodesInGroup[i] = node;\\n            _setException(schainHash, node);\\n            addSchainForNode(node, schainHash);\\n            nodes.makeNodeInvisible(node);\\n            require(nodes.removeSpaceFromNode(node, space), \\\"Could not remove space from Node\\\");\\n        }\\n        // set generated group\\n        schainsGroups[schainHash] = nodesInGroup;\\n        _makeSchainNodesVisible(schainHash);\\n    }\\n\\n    function _setException(bytes32 schainHash, uint nodeIndex) private {\\n        _exceptionsForGroups[schainHash][nodeIndex] = true;\\n        _nodeToLockedSchains[nodeIndex].push(schainHash);\\n        _schainToExceptionNodes[schainHash].push(nodeIndex);\\n    }\\n\\n    function _makeSchainNodesVisible(bytes32 schainHash) private {\\n        INodes nodes = INodes(contractManager.getContract(\\\"Nodes\\\"));\\n        for (uint i = 0; i < _schainToExceptionNodes[schainHash].length; i++) {\\n            nodes.makeNodeVisible(_schainToExceptionNodes[schainHash][i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns local index of node in schain group.\\n     */\\n    function _findNode(bytes32 schainHash, uint nodeIndex) private view returns (uint) {\\n        uint[] memory nodesInGroup = schainsGroups[schainHash];\\n        uint index;\\n        for (index = 0; index < nodesInGroup.length; index++) {\\n            if (nodesInGroup[index] == nodeIndex) {\\n                return index;\\n            }\\n        }\\n        return index;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISchainsInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISchainsInternal - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface ISchainsInternal {\\n    struct Schain {\\n        string name;\\n        address owner;\\n        uint indexInOwnerList;\\n        uint8 partOfNode;\\n        uint lifetime;\\n        uint startDate;\\n        uint startBlock;\\n        uint deposit;\\n        uint64 index;\\n        uint generation;\\n        address originator;\\n    }\\n\\n    struct SchainType {\\n        uint8 partOfNode;\\n        uint numberOfNodes;\\n    }\\n\\n    /**\\n     * @dev Emitted when schain type added.\\n     */\\n    event SchainTypeAdded(uint indexed schainType, uint partOfNode, uint numberOfNodes);\\n\\n    /**\\n     * @dev Emitted when schain type removed.\\n     */\\n    event SchainTypeRemoved(uint indexed schainType);\\n\\n    function initializeSchain(\\n        string calldata name,\\n        address from,\\n        address originator,\\n        uint lifetime,\\n        uint deposit) external;\\n    function createGroupForSchain(\\n        bytes32 schainHash,\\n        uint numberOfNodes,\\n        uint8 partOfNode\\n    )\\n        external\\n        returns (uint[] memory);\\n    function changeLifetime(bytes32 schainHash, uint lifetime, uint deposit) external;\\n    function removeSchain(bytes32 schainHash, address from) external;\\n    function removeNodeFromSchain(uint nodeIndex, bytes32 schainHash) external;\\n    function deleteGroup(bytes32 schainHash) external;\\n    function setException(bytes32 schainHash, uint nodeIndex) external;\\n    function setNodeInGroup(bytes32 schainHash, uint nodeIndex) external;\\n    function removeHolesForSchain(bytes32 schainHash) external;\\n    function addSchainType(uint8 partOfNode, uint numberOfNodes) external;\\n    function removeSchainType(uint typeOfSchain) external;\\n    function setNumberOfSchainTypes(uint newNumberOfSchainTypes) external;\\n    function removeNodeFromAllExceptionSchains(uint nodeIndex) external;\\n    function removeAllNodesFromSchainExceptions(bytes32 schainHash) external;\\n    function makeSchainNodesInvisible(bytes32 schainHash) external;\\n    function makeSchainNodesVisible(bytes32 schainHash) external;\\n    function newGeneration() external;\\n    function addSchainForNode(uint nodeIndex, bytes32 schainHash) external;\\n    function removeSchainForNode(uint nodeIndex, uint schainIndex) external;\\n    function removeNodeFromExceptions(bytes32 schainHash, uint nodeIndex) external;\\n    function isSchainActive(bytes32 schainHash) external view returns (bool);\\n    function schainsAtSystem(uint index) external view returns (bytes32);\\n    function numberOfSchains() external view returns (uint64);\\n    function getSchains() external view returns (bytes32[] memory);\\n    function getSchainsPartOfNode(bytes32 schainHash) external view returns (uint8);\\n    function getSchainListSize(address from) external view returns (uint);\\n    function getSchainHashesByAddress(address from) external view returns (bytes32[] memory);\\n    function getSchainIdsByAddress(address from) external view returns (bytes32[] memory);\\n    function getSchainHashesForNode(uint nodeIndex) external view returns (bytes32[] memory);\\n    function getSchainIdsForNode(uint nodeIndex) external view returns (bytes32[] memory);\\n    function getSchainOwner(bytes32 schainHash) external view returns (address);\\n    function getSchainOriginator(bytes32 schainHash) external view returns (address);\\n    function isSchainNameAvailable(string calldata name) external view returns (bool);\\n    function isTimeExpired(bytes32 schainHash) external view returns (bool);\\n    function isOwnerAddress(address from, bytes32 schainId) external view returns (bool);\\n    function getSchainName(bytes32 schainHash) external view returns (string memory);\\n    function getActiveSchain(uint nodeIndex) external view returns (bytes32);\\n    function getActiveSchains(uint nodeIndex) external view returns (bytes32[] memory activeSchains);\\n    function getNumberOfNodesInGroup(bytes32 schainHash) external view returns (uint);\\n    function getNodesInGroup(bytes32 schainHash) external view returns (uint[] memory);\\n    function isNodeAddressesInGroup(bytes32 schainId, address sender) external view returns (bool);\\n    function getNodeIndexInGroup(bytes32 schainHash, uint nodeId) external view returns (uint);\\n    function isAnyFreeNode(bytes32 schainHash) external view returns (bool);\\n    function checkException(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function checkHoleForSchain(bytes32 schainHash, uint indexOfNode) external view returns (bool);\\n    function checkSchainOnNode(uint nodeIndex, bytes32 schainHash) external view returns (bool);\\n    function getSchainType(uint typeOfSchain) external view returns(uint8, uint);\\n    function getGeneration(bytes32 schainHash) external view returns (uint);\\n    function isSchainExist(bytes32 schainHash) external view returns (bool);\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/ISkaleDKG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISkaleDKG.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface ISkaleDKG {\\n\\n    struct Fp2Point {\\n        uint a;\\n        uint b;\\n    }\\n\\n    struct G2Point {\\n        Fp2Point x;\\n        Fp2Point y;\\n    }\\n\\n    struct Channel {\\n        bool active;\\n        uint n;\\n        uint startedBlockTimestamp;\\n        uint startedBlock;\\n    }\\n\\n    struct ProcessDKG {\\n        uint numberOfBroadcasted;\\n        uint numberOfCompleted;\\n        bool[] broadcasted;\\n        bool[] completed;\\n    }\\n\\n    struct ComplaintData {\\n        uint nodeToComplaint;\\n        uint fromNodeToComplaint;\\n        uint startComplaintBlockTimestamp;\\n        bool isResponse;\\n        bytes32 keyShare;\\n        G2Point sumOfVerVec;\\n    }\\n\\n    struct KeyShare {\\n        bytes32[2] publicKey;\\n        bytes32 share;\\n    }\\n    \\n    /**\\n     * @dev Emitted when a channel is opened.\\n     */\\n    event ChannelOpened(bytes32 schainHash);\\n\\n    /**\\n     * @dev Emitted when a channel is closed.\\n     */\\n    event ChannelClosed(bytes32 schainHash);\\n\\n    /**\\n     * @dev Emitted when a node broadcasts key share.\\n     */\\n    event BroadcastAndKeyShare(\\n        bytes32 indexed schainHash,\\n        uint indexed fromNode,\\n        G2Point[] verificationVector,\\n        KeyShare[] secretKeyContribution\\n    );\\n\\n    /**\\n     * @dev Emitted when all group data is received by node.\\n     */\\n    event AllDataReceived(bytes32 indexed schainHash, uint nodeIndex);\\n\\n    /**\\n     * @dev Emitted when DKG is successful.\\n     */\\n    event SuccessfulDKG(bytes32 indexed schainHash);\\n\\n    /**\\n     * @dev Emitted when a complaint against a node is verified.\\n     */\\n    event BadGuy(uint nodeIndex);\\n\\n    /**\\n     * @dev Emitted when DKG failed.\\n     */\\n    event FailedDKG(bytes32 indexed schainHash);\\n\\n    /**\\n     * @dev Emitted when a new node is rotated in.\\n     */\\n    event NewGuy(uint nodeIndex);\\n\\n    /**\\n     * @dev Emitted when an incorrect complaint is sent.\\n     */\\n    event ComplaintError(string error);\\n\\n    /**\\n     * @dev Emitted when a complaint is sent.\\n     */\\n    event ComplaintSent(bytes32 indexed schainHash, uint indexed fromNodeIndex, uint indexed toNodeIndex);\\n    \\n    function alright(bytes32 schainHash, uint fromNodeIndex) external;\\n    function broadcast(\\n        bytes32 schainHash,\\n        uint nodeIndex,\\n        G2Point[] memory verificationVector,\\n        KeyShare[] memory secretKeyContribution\\n    )\\n        external;\\n    function complaintBadData(bytes32 schainHash, uint fromNodeIndex, uint toNodeIndex) external;\\n    function preResponse(\\n        bytes32 schainId,\\n        uint fromNodeIndex,\\n        G2Point[] memory verificationVector,\\n        G2Point[] memory verificationVectorMultiplication,\\n        KeyShare[] memory secretKeyContribution\\n    )\\n        external;\\n    function complaint(bytes32 schainHash, uint fromNodeIndex, uint toNodeIndex) external;\\n    function response(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint secretNumber,\\n        G2Point memory multipliedShare\\n    )\\n        external;\\n    function openChannel(bytes32 schainHash) external;\\n    function deleteChannel(bytes32 schainHash) external;\\n    function setStartAlrightTimestamp(bytes32 schainHash) external;\\n    function setBadNode(bytes32 schainHash, uint nodeIndex) external;\\n    function finalizeSlashing(bytes32 schainHash, uint badNode) external;\\n    function getChannelStartedTime(bytes32 schainHash) external view returns (uint);\\n    function getChannelStartedBlock(bytes32 schainHash) external view returns (uint);\\n    function getNumberOfBroadcasted(bytes32 schainHash) external view returns (uint);\\n    function getNumberOfCompleted(bytes32 schainHash) external view returns (uint);\\n    function getTimeOfLastSuccessfulDKG(bytes32 schainHash) external view returns (uint);\\n    function getComplaintData(bytes32 schainHash) external view returns (uint, uint);\\n    function getComplaintStartedTime(bytes32 schainHash) external view returns (uint);\\n    function getAlrightStartedTime(bytes32 schainHash) external view returns (uint);\\n    function isChannelOpened(bytes32 schainHash) external view returns (bool);\\n    function isLastDKGSuccessful(bytes32 groupIndex) external view returns (bool);\\n    function isBroadcastPossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isComplaintPossible(\\n        bytes32 schainHash,\\n        uint fromNodeIndex,\\n        uint toNodeIndex\\n    )\\n        external\\n        view\\n        returns (bool);\\n    function isAlrightPossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isPreResponsePossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isResponsePossible(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isNodeBroadcasted(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function isAllDataReceived(bytes32 schainHash, uint nodeIndex) external view returns (bool);\\n    function checkAndReturnIndexInGroup(\\n        bytes32 schainHash,\\n        uint nodeIndex,\\n        bool revertCheck\\n    )\\n        external\\n        view\\n        returns (uint, bool);\\n    function isEveryoneBroadcasted(bytes32 schainHash) external view returns (bool);\\n    function hashData(\\n        KeyShare[] memory secretKeyContribution,\\n        G2Point[] memory verificationVector\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/INodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    INodes.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\nimport \\\"./utils/IRandom.sol\\\";\\n\\ninterface INodes {\\n    // All Nodes states\\n    enum NodeStatus {Active, Leaving, Left, In_Maintenance}\\n\\n    struct Node {\\n        string name;\\n        bytes4 ip;\\n        bytes4 publicIP;\\n        uint16 port;\\n        bytes32[2] publicKey;\\n        uint startBlock;\\n        uint lastRewardDate;\\n        uint finishTime;\\n        NodeStatus status;\\n        uint validatorId;\\n    }\\n\\n    // struct to note which Nodes and which number of Nodes owned by user\\n    struct CreatedNodes {\\n        mapping (uint => bool) isNodeExist;\\n        uint numberOfNodes;\\n    }\\n\\n    struct SpaceManaging {\\n        uint8 freeSpace;\\n        uint indexInSpaceMap;\\n    }\\n\\n    struct NodeCreationParams {\\n        string name;\\n        bytes4 ip;\\n        bytes4 publicIp;\\n        uint16 port;\\n        bytes32[2] publicKey;\\n        uint16 nonce;\\n        string domainName;\\n    }\\n    \\n    /**\\n     * @dev Emitted when a node is created.\\n     */\\n    event NodeCreated(\\n        uint nodeIndex,\\n        address owner,\\n        string name,\\n        bytes4 ip,\\n        bytes4 publicIP,\\n        uint16 port,\\n        uint16 nonce,\\n        string domainName\\n    );\\n\\n    /**\\n     * @dev Emitted when a node completes a network exit.\\n     */\\n    event ExitCompleted(\\n        uint nodeIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when a node begins to exit from the network.\\n     */\\n    event ExitInitialized(\\n        uint nodeIndex,\\n        uint startLeavingPeriod\\n    );\\n\\n    /**\\n     * @dev Emitted when a node set to in compliant or compliant.\\n     */\\n    event IncompliantNode(\\n        uint indexed nodeIndex,\\n        bool status\\n    );\\n\\n    /**\\n     * @dev Emitted when a node set to in maintenance or from in maintenance.\\n     */\\n    event MaintenanceNode(\\n        uint indexed nodeIndex,\\n        bool status\\n    );\\n\\n    /**\\n     * @dev Emitted when a node status changed.\\n     */\\n    event IPChanged(\\n        uint indexed nodeIndex,\\n        bytes4 previousIP,\\n        bytes4 newIP\\n    );\\n    \\n    function removeSpaceFromNode(uint nodeIndex, uint8 space) external returns (bool);\\n    function addSpaceToNode(uint nodeIndex, uint8 space) external;\\n    function changeNodeLastRewardDate(uint nodeIndex) external;\\n    function changeNodeFinishTime(uint nodeIndex, uint time) external;\\n    function createNode(address from, NodeCreationParams calldata params) external;\\n    function initExit(uint nodeIndex) external;\\n    function completeExit(uint nodeIndex) external returns (bool);\\n    function deleteNodeForValidator(uint validatorId, uint nodeIndex) external;\\n    function checkPossibilityCreatingNode(address nodeAddress) external;\\n    function checkPossibilityToMaintainNode(uint validatorId, uint nodeIndex) external returns (bool);\\n    function setNodeInMaintenance(uint nodeIndex) external;\\n    function removeNodeFromInMaintenance(uint nodeIndex) external;\\n    function setNodeIncompliant(uint nodeIndex) external;\\n    function setNodeCompliant(uint nodeIndex) external;\\n    function setDomainName(uint nodeIndex, string memory domainName) external;\\n    function makeNodeVisible(uint nodeIndex) external;\\n    function makeNodeInvisible(uint nodeIndex) external;\\n    function changeIP(uint nodeIndex, bytes4 newIP, bytes4 newPublicIP) external;\\n    function numberOfActiveNodes() external view returns (uint);\\n    function incompliant(uint nodeIndex) external view returns (bool);\\n    function getRandomNodeWithFreeSpace(\\n        uint8 freeSpace,\\n        IRandom.RandomGenerator memory randomGenerator\\n    )\\n        external\\n        view\\n        returns (uint);\\n    function isTimeForReward(uint nodeIndex) external view returns (bool);\\n    function getNodeIP(uint nodeIndex) external view returns (bytes4);\\n    function getNodeDomainName(uint nodeIndex) external view returns (string memory);\\n    function getNodePort(uint nodeIndex) external view returns (uint16);\\n    function getNodePublicKey(uint nodeIndex) external view returns (bytes32[2] memory);\\n    function getNodeAddress(uint nodeIndex) external view returns (address);\\n    function getNodeFinishTime(uint nodeIndex) external view returns (uint);\\n    function isNodeLeft(uint nodeIndex) external view returns (bool);\\n    function isNodeInMaintenance(uint nodeIndex) external view returns (bool);\\n    function getNodeLastRewardDate(uint nodeIndex) external view returns (uint);\\n    function getNodeNextRewardDate(uint nodeIndex) external view returns (uint);\\n    function getNumberOfNodes() external view returns (uint);\\n    function getNumberOnlineNodes() external view returns (uint);\\n    function getActiveNodeIds() external view returns (uint[] memory activeNodeIds);\\n    function getNodeStatus(uint nodeIndex) external view returns (NodeStatus);\\n    function getValidatorNodeIndexes(uint validatorId) external view returns (uint[] memory);\\n    function countNodesWithFreeSpace(uint8 freeSpace) external view returns (uint count);\\n    function getValidatorId(uint nodeIndex) external view returns (uint);\\n    function isNodeExist(address from, uint nodeIndex) external view returns (bool);\\n    function isNodeActive(uint nodeIndex) external view returns (bool);\\n    function isNodeLeaving(uint nodeIndex) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Permissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/IContractManager.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/IPermissions.sol\\\";\\n\\nimport \\\"./thirdparty/openzeppelin/AccessControlUpgradeableLegacy.sol\\\";\\n\\n\\n/**\\n * @title Permissions\\n * @dev Contract is connected module for Upgradeable approach, knows ContractManager\\n */\\ncontract Permissions is AccessControlUpgradeableLegacy, IPermissions {\\n    using AddressUpgradeable for address;\\n    \\n    IContractManager public contractManager;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_isOwner(), \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is an Admin.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be an admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(_isAdmin(msg.sender), \\\"Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner or `contractName`.\\n     */\\n    modifier allow(string memory contractName) {\\n        require(\\n            contractManager.getContract(contractName) == msg.sender || _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1` or `contractName2` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, or `contractName2`.\\n     */\\n    modifier allowTwo(string memory contractName1, string memory contractName2) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1`, `contractName2`, or `contractName3` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, `contractName2`, or \\n     * `contractName3`.\\n     */\\n    modifier allowThree(string memory contractName1, string memory contractName2, string memory contractName3) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            contractManager.getContract(contractName3) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    function initialize(address contractManagerAddress) public virtual override initializer {\\n        AccessControlUpgradeableLegacy.__AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setContractManager(contractManagerAddress);\\n    }\\n\\n    function _isOwner() internal view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _isAdmin(address account) internal view returns (bool) {\\n        address skaleManagerAddress = contractManager.contracts(keccak256(abi.encodePacked(\\\"SkaleManager\\\")));\\n        if (skaleManagerAddress != address(0)) {\\n            AccessControlUpgradeableLegacy skaleManager = AccessControlUpgradeableLegacy(skaleManagerAddress);\\n            return skaleManager.hasRole(keccak256(\\\"ADMIN_ROLE\\\"), account) || _isOwner();\\n        } else {\\n            return _isOwner();\\n        }\\n    }\\n\\n    function _setContractManager(address contractManagerAddress) private {\\n        require(contractManagerAddress != address(0), \\\"ContractManager address is not set\\\");\\n        require(contractManagerAddress.isContract(), \\\"Address is not contract\\\");\\n        contractManager = IContractManager(contractManagerAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ConstantsHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ConstantsHolder.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/IConstantsHolder.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\n\\n\\n/**\\n * @title ConstantsHolder\\n * @dev Contract contains constants and common variables for the SKALE Network.\\n */\\ncontract ConstantsHolder is Permissions, IConstantsHolder {\\n\\n    // initial price for creating Node (100 SKL)\\n    uint public constant NODE_DEPOSIT = 100 * 1e18;\\n\\n    uint8 public constant TOTAL_SPACE_ON_NODE = 128;\\n\\n    // part of Node for Small Skale-chain (1/128 of Node)\\n    uint8 public constant SMALL_DIVISOR = 128;\\n\\n    // part of Node for Medium Skale-chain (1/32 of Node)\\n    uint8 public constant MEDIUM_DIVISOR = 32;\\n\\n    // part of Node for Large Skale-chain (full Node)\\n    uint8 public constant LARGE_DIVISOR = 1;\\n\\n    // part of Node for Medium Test Skale-chain (1/4 of Node)\\n    uint8 public constant MEDIUM_TEST_DIVISOR = 4;\\n\\n    // typically number of Nodes for Skale-chain (16 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_SCHAIN = 16;\\n\\n    // number of Nodes for Test Skale-chain (2 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_TEST_SCHAIN = 2;\\n\\n    // number of Nodes for Test Skale-chain (4 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_MEDIUM_TEST_SCHAIN = 4;    \\n\\n    // number of seconds in one year\\n    uint32 public constant SECONDS_TO_YEAR = 31622400;\\n\\n    // initial number of monitors\\n    uint public constant NUMBER_OF_MONITORS = 24;\\n\\n    uint public constant OPTIMAL_LOAD_PERCENTAGE = 80;\\n\\n    uint public constant ADJUSTMENT_SPEED = 1000;\\n\\n    uint public constant COOLDOWN_TIME = 60;\\n\\n    uint public constant MIN_PRICE = 10**6;\\n\\n    uint public constant MSR_REDUCING_COEFFICIENT = 2;\\n\\n    uint public constant DOWNTIME_THRESHOLD_PART = 30;\\n\\n    uint public constant BOUNTY_LOCKUP_MONTHS = 2;\\n\\n    uint public constant ALRIGHT_DELTA = 134161;\\n    uint public constant BROADCAST_DELTA = 177490;\\n    uint public constant COMPLAINT_BAD_DATA_DELTA = 80995;\\n    uint public constant PRE_RESPONSE_DELTA = 100061;\\n    uint public constant COMPLAINT_DELTA = 104611;\\n    uint public constant RESPONSE_DELTA = 49132;\\n\\n    // MSR - Minimum staking requirement\\n    uint public msr;\\n\\n    // Reward period - 30 days (each 30 days Node would be granted for bounty)\\n    uint32 public rewardPeriod;\\n\\n    // Allowable latency - 150000 ms by default\\n    uint32 public allowableLatency;\\n\\n    /**\\n     * Delta period - 1 hour (1 hour before Reward period became Monitors need\\n     * to send Verdicts and 1 hour after Reward period became Node need to come\\n     * and get Bounty)\\n     */\\n    uint32 public deltaPeriod;\\n\\n    /**\\n     * Check time - 2 minutes (every 2 minutes monitors should check metrics\\n     * from checked nodes)\\n     */\\n    uint public checkTime;\\n\\n    //Need to add minimal allowed parameters for verdicts\\n\\n    uint public launchTimestamp;\\n\\n    uint public rotationDelay;\\n\\n    uint public proofOfUseLockUpPeriodDays;\\n\\n    uint public proofOfUseDelegationPercentage;\\n\\n    uint public limitValidatorsPerDelegator;\\n\\n    uint256 public firstDelegationsMonth; // deprecated\\n\\n    // date when schains will be allowed for creation\\n    uint public schainCreationTimeStamp;\\n\\n    uint public minimalSchainLifetime;\\n\\n    uint public complaintTimeLimit;\\n\\n    bytes32 public constant CONSTANTS_HOLDER_MANAGER_ROLE = keccak256(\\\"CONSTANTS_HOLDER_MANAGER_ROLE\\\");\\n\\n    modifier onlyConstantsHolderManager() {\\n        require(hasRole(CONSTANTS_HOLDER_MANAGER_ROLE, msg.sender), \\\"CONSTANTS_HOLDER_MANAGER_ROLE is required\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set new reward and delta periods\\n     * This function is only for tests.\\n     */\\n    function setPeriods(uint32 newRewardPeriod, uint32 newDeltaPeriod) external override onlyConstantsHolderManager {\\n        require(\\n            newRewardPeriod >= newDeltaPeriod && newRewardPeriod - newDeltaPeriod >= checkTime,\\n            \\\"Incorrect Periods\\\"\\n        );\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"RewardPeriod\\\")),\\n            uint(rewardPeriod),\\n            uint(newRewardPeriod)\\n        );\\n        rewardPeriod = newRewardPeriod;\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"DeltaPeriod\\\")),\\n            uint(deltaPeriod),\\n            uint(newDeltaPeriod)\\n        );\\n        deltaPeriod = newDeltaPeriod;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the new check time.\\n     * This function is only for tests.\\n     */\\n    function setCheckTime(uint newCheckTime) external override onlyConstantsHolderManager {\\n        require(rewardPeriod - deltaPeriod >= checkTime, \\\"Incorrect check time\\\");\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"CheckTime\\\")),\\n            uint(checkTime),\\n            uint(newCheckTime)\\n        );\\n        checkTime = newCheckTime;\\n    }    \\n\\n    /**\\n     * @dev Allows the Owner to set the allowable latency in milliseconds.\\n     * This function is only for testing purposes.\\n     */\\n    function setLatency(uint32 newAllowableLatency) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"AllowableLatency\\\")),\\n            uint(allowableLatency),\\n            uint(newAllowableLatency)\\n        );\\n        allowableLatency = newAllowableLatency;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the minimum stake requirement.\\n     */\\n    function setMSR(uint newMSR) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"MSR\\\")),\\n            uint(msr),\\n            uint(newMSR)\\n        );\\n        msr = newMSR;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the launch timestamp.\\n     */\\n    function setLaunchTimestamp(uint timestamp) external override onlyConstantsHolderManager {\\n        require(\\n            block.timestamp < launchTimestamp,\\n            \\\"Cannot set network launch timestamp because network is already launched\\\"\\n        );\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"LaunchTimestamp\\\")),\\n            uint(launchTimestamp),\\n            uint(timestamp)\\n        );\\n        launchTimestamp = timestamp;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the node rotation delay.\\n     */\\n    function setRotationDelay(uint newDelay) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"RotationDelay\\\")),\\n            uint(rotationDelay),\\n            uint(newDelay)\\n        );\\n        rotationDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the proof-of-use lockup period.\\n     */\\n    function setProofOfUseLockUpPeriod(uint periodDays) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"ProofOfUseLockUpPeriodDays\\\")),\\n            uint(proofOfUseLockUpPeriodDays),\\n            uint(periodDays)\\n        );\\n        proofOfUseLockUpPeriodDays = periodDays;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the proof-of-use delegation percentage\\n     * requirement.\\n     */\\n    function setProofOfUseDelegationPercentage(uint percentage) external override onlyConstantsHolderManager {\\n        require(percentage <= 100, \\\"Percentage value is incorrect\\\");\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"ProofOfUseDelegationPercentage\\\")),\\n            uint(proofOfUseDelegationPercentage),\\n            uint(percentage)\\n        );\\n        proofOfUseDelegationPercentage = percentage;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the maximum number of validators that a\\n     * single delegator can delegate to.\\n     */\\n    function setLimitValidatorsPerDelegator(uint newLimit) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"LimitValidatorsPerDelegator\\\")),\\n            uint(limitValidatorsPerDelegator),\\n            uint(newLimit)\\n        );\\n        limitValidatorsPerDelegator = newLimit;\\n    }\\n\\n    function setSchainCreationTimeStamp(uint timestamp) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"SchainCreationTimeStamp\\\")),\\n            uint(schainCreationTimeStamp),\\n            uint(timestamp)\\n        );\\n        schainCreationTimeStamp = timestamp;\\n    }\\n\\n    function setMinimalSchainLifetime(uint lifetime) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"MinimalSchainLifetime\\\")),\\n            uint(minimalSchainLifetime),\\n            uint(lifetime)\\n        );\\n        minimalSchainLifetime = lifetime;\\n    }\\n\\n    function setComplaintTimeLimit(uint timeLimit) external override onlyConstantsHolderManager {\\n        emit ConstantUpdated(\\n            keccak256(abi.encodePacked(\\\"ComplaintTimeLimit\\\")),\\n            uint(complaintTimeLimit),\\n            uint(timeLimit)\\n        );\\n        complaintTimeLimit = timeLimit;\\n    }\\n\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n\\n        msr = 0;\\n        rewardPeriod = 2592000;\\n        allowableLatency = 150000;\\n        deltaPeriod = 3600;\\n        checkTime = 300;\\n        launchTimestamp = type(uint).max;\\n        rotationDelay = 12 hours;\\n        proofOfUseLockUpPeriodDays = 90;\\n        proofOfUseDelegationPercentage = 50;\\n        limitValidatorsPerDelegator = 20;\\n        firstDelegationsMonth = 0;\\n        complaintTimeLimit = 1800;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Random.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SegmentTree.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@skalenetwork/skale-manager-interfaces/utils/IRandom.sol\\\";\\n\\n/**\\n * @title Random\\n * @dev The library for generating of pseudo random numbers\\n */\\nlibrary Random {\\n\\n    /**\\n     * @dev Create an instance of RandomGenerator\\n     */\\n    function create(uint seed) internal pure returns (IRandom.RandomGenerator memory) {\\n        return IRandom.RandomGenerator({seed: seed});\\n    }\\n\\n    function createFromEntropy(bytes memory entropy) internal pure returns (IRandom.RandomGenerator memory) {\\n        return create(uint(keccak256(entropy)));\\n    }\\n\\n    /**\\n     * @dev Generates random value\\n     */\\n    function random(IRandom.RandomGenerator memory self) internal pure returns (uint) {\\n        self.seed = uint(sha256(abi.encodePacked(self.seed)));\\n        return self.seed;\\n    }\\n\\n    /**\\n     * @dev Generates random value in range [0, max)\\n     */\\n    function random(IRandom.RandomGenerator memory self, uint max) internal pure returns (uint) {\\n        assert(max > 0);\\n        uint maxRand = type(uint).max - type(uint).max % max;\\n        if (type(uint).max - maxRand == max - 1) {\\n            return random(self) % max;\\n        } else {\\n            uint rand = random(self);\\n            while (rand >= maxRand) {\\n                rand = random(self);\\n            }\\n            return rand % max;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/utils/IRandom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IRandom.sol - SKALE Manager Interfaces\\n    Copyright (C) 2022-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\n\\ninterface IRandom {\\n    struct RandomGenerator {\\n        uint seed;\\n    }\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IContractManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IContractManager.sol - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Dmytro Stebaeiv\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IContractManager {\\n    /**\\n     * @dev Emitted when contract is upgraded.\\n     */\\n    event ContractUpgraded(string contractsName, address contractsAddress);\\n\\n    function initialize() external;\\n    function setContractsAddress(string calldata contractsName, address newContractsAddress) external;\\n    function contracts(bytes32 nameHash) external view returns (address);\\n    function getDelegationPeriodManager() external view returns (address);\\n    function getBounty() external view returns (address);\\n    function getValidatorService() external view returns (address);\\n    function getTimeHelpers() external view returns (address);\\n    function getConstantsHolder() external view returns (address);\\n    function getSkaleToken() external view returns (address);\\n    function getTokenState() external view returns (address);\\n    function getPunisher() external view returns (address);\\n    function getContract(string calldata name) external view returns (address);\\n}\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IPermissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IPermissions {\\n    function initialize(address contractManagerAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/openzeppelin/AccessControlUpgradeableLegacy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@skalenetwork/skale-manager-interfaces/thirdparty/openzeppelin/IAccessControlUpgradeableLegacy.sol\\\";\\nimport \\\"./InitializableWithGap.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeableLegacy is InitializableWithGap, ContextUpgradeable, IAccessControlUpgradeableLegacy {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/thirdparty/openzeppelin/IAccessControlUpgradeableLegacy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IAccessControlUpgradeableLegacy.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IAccessControlUpgradeableLegacy {\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    \\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/openzeppelin/InitializableWithGap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n\\ncontract InitializableWithGap is Initializable {\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@skalenetwork/skale-manager-interfaces/IConstantsHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IConstantsHolder.sol - SKALE Manager Interfaces\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager Interfaces is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager Interfaces is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager Interfaces.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.10 <0.9.0;\\n\\ninterface IConstantsHolder {\\n\\n    /**\\n     * @dev Emitted when constants updated.\\n     */\\n    event ConstantUpdated(\\n        bytes32 indexed constantHash,\\n        uint previousValue,\\n        uint newValue\\n    );\\n\\n    function setPeriods(uint32 newRewardPeriod, uint32 newDeltaPeriod) external;\\n    function setCheckTime(uint newCheckTime) external;\\n    function setLatency(uint32 newAllowableLatency) external;\\n    function setMSR(uint newMSR) external;\\n    function setLaunchTimestamp(uint timestamp) external;\\n    function setRotationDelay(uint newDelay) external;\\n    function setProofOfUseLockUpPeriod(uint periodDays) external;\\n    function setProofOfUseDelegationPercentage(uint percentage) external;\\n    function setLimitValidatorsPerDelegator(uint newLimit) external;\\n    function setSchainCreationTimeStamp(uint timestamp) external;\\n    function setMinimalSchainLifetime(uint lifetime) external;\\n    function setComplaintTimeLimit(uint timeLimit) external;\\n    function msr() external view returns (uint);\\n    function launchTimestamp() external view returns (uint);\\n    function rotationDelay() external view returns (uint);\\n    function limitValidatorsPerDelegator() external view returns (uint);\\n    function schainCreationTimeStamp() external view returns (uint);\\n    function minimalSchainLifetime() external view returns (uint);\\n    function complaintTimeLimit() external view returns (uint);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"schainType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partOfNode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfNodes\",\"type\":\"uint256\"}],\"name\":\"SchainTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"schainType\",\"type\":\"uint256\"}],\"name\":\"SchainTypeRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBUGGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENERATION_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCHAIN_TYPE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"addSchainForNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"partOfNode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"numberOfNodes\",\"type\":\"uint256\"}],\"name\":\"addSchainType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"changeLifetime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"checkException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexOfNode\",\"type\":\"uint256\"}],\"name\":\"checkHoleForSchain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"checkSchainOnNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"contract IContractManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numberOfNodes\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"partOfNode\",\"type\":\"uint8\"}],\"name\":\"createGroupForSchain\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"getActiveSchain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"getActiveSchains\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"activeSchains\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"getNodeIndexInGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getNodesInGroup\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getNumberOfNodesInGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getSchainHashesByAddress\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"getSchainHashesForNode\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getSchainIdsByAddress\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"getSchainIdsForNode\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getSchainListSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getSchainName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getSchainOriginator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getSchainOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeOfSchain\",\"type\":\"uint256\"}],\"name\":\"getSchainType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchains\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"getSchainsPartOfNode\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holesForNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holesForSchains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContractsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"initializeSchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"isAnyFreeNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isNodeAddressesInGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"isOwnerAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isSchainActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"isSchainExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isSchainNameAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"isTimeExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"makeSchainNodesInvisible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"makeSchainNodesVisible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newGeneration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfSchainTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfSchains\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"placeOfSchainOnNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"removeAllNodesFromSchainExceptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"removeHolesForSchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"removeNodeFromAllExceptionSchains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"removeNodeFromExceptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"}],\"name\":\"removeNodeFromSchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"removeSchain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"schainIndex\",\"type\":\"uint256\"}],\"name\":\"removeSchainForNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"typeOfSchain\",\"type\":\"uint256\"}],\"name\":\"removeSchainType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schainIndexes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schainTypes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"partOfNode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"numberOfNodes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"schains\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"indexInOwnerList\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"partOfNode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schainsAtSystem\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schainsForNodes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schainsGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"setException\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nodeIndex\",\"type\":\"uint256\"}],\"name\":\"setNodeInGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumberOfSchainTypes\",\"type\":\"uint256\"}],\"name\":\"setNumberOfSchainTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumOfSchainsResources\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedSchainNames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SchainsInternal", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}