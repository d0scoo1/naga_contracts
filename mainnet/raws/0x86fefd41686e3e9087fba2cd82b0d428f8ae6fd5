{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/PoolHealthChecker.sol\r\npragma solidity =0.8.7 >=0.8.7 <0.9.0;\r\n\r\n////// contracts/interfaces/Interfaces.sol\r\n/* pragma solidity 0.8.7; */\r\n\r\ninterface IPoolLike {\r\n\r\n    function claim(address loan_, address dlFactory_) external returns (uint256[7] memory claimInfo_);\r\n\r\n    function debtLockers(address loan_, address dlFactory_) external returns (address debtLockers_);\r\n\r\n    function deposit(uint256 amount_) external;\r\n\r\n    function fundLoan(address loan_, address debtLockerFactory_, uint256 amount_) external;\r\n\r\n    function interestSum() external view returns (uint256 interestSum_);\r\n\r\n    function liquidityAsset() external view returns (address liquidityAsset_);\r\n\r\n    function liquidityCap() external view returns (uint256 liquidityCap_);\r\n\r\n    function liquidityLocker() external view returns (address liquidityLocker_);\r\n\r\n    function poolLosses() external view returns (uint256 poolLossess_);\r\n\r\n    function principalOut() external view returns (uint256 principalOut_);\r\n\r\n    function setLiquidityCap(uint256 liquidityCap_) external;\r\n\r\n    function totalSupply() external view returns (uint256 totalSupply_);\r\n\r\n    function triggerDefault(address loan_, address dlFactory_) external;\r\n\r\n}\r\n\r\n////// modules/erc20/src/interfaces/IERC20.sol\r\n/* pragma solidity ^0.8.7; */\r\n\r\n/// @title Interface of the ERC20 standard as defined in the EIP.\r\ninterface IERC20 {\r\n\r\n    /**\r\n     * @dev   Emits an event indicating that tokens have moved from one account to another.\r\n     * @param owner_     Account that tokens have moved from.\r\n     * @param recipient_ Account that tokens have moved to.\r\n     * @param amount_    Amount of tokens that have been transferred.\r\n     */\r\n    event Transfer(address indexed owner_, address indexed recipient_, uint256 amount_);\r\n\r\n    /**\r\n     * @dev   Emits an event indicating that one account has set the allowance of another account over their tokens.\r\n     * @param owner_   Account that tokens are approved from.\r\n     * @param spender_ Account that tokens are approved for.\r\n     * @param amount_  Amount of tokens that have been approved.\r\n     */\r\n    event Approval(address indexed owner_, address indexed spender_, uint256 amount_);\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory name_);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory symbol_);\r\n\r\n    /**\r\n     * @dev Returns the decimal precision used by the token.\r\n     */\r\n    function decimals() external view returns (uint8 decimals_);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256 totalSupply_);\r\n\r\n    /**\r\n     * @dev   Returns the amount of tokens owned by a given account.\r\n     * @param account_ Account that owns the tokens.\r\n     */\r\n    function balanceOf(address account_) external view returns (uint256 balance_);\r\n\r\n    /**\r\n     * @dev   Function that returns the allowance that one account has given another over their tokens.\r\n     * @param owner_   Account that tokens are approved from.\r\n     * @param spender_ Account that tokens are approved for.\r\n     */\r\n    function allowance(address owner_, address spender_) external view returns (uint256 allowance_);\r\n\r\n    /**\r\n     * @dev    Function that allows one account to set the allowance of another account over their tokens.\r\n     *         Emits an {Approval} event.\r\n     * @param  spender_ Account that tokens are approved for.\r\n     * @param  amount_  Amount of tokens that have been approved.\r\n     * @return success_ Boolean indicating whether the operation succeeded.\r\n     */\r\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\r\n\r\n    /**\r\n     * @dev    Moves an amount of tokens from `msg.sender` to a specified account.\r\n     *         Emits a {Transfer} event.\r\n     * @param  recipient_ Account that receives tokens.\r\n     * @param  amount_    Amount of tokens that are transferred.\r\n     * @return success_   Boolean indicating whether the operation succeeded.\r\n     */\r\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\r\n\r\n    /**\r\n     * @dev    Moves a pre-approved amount of tokens from a sender to a specified account.\r\n     *         Emits a {Transfer} event.\r\n     *         Emits an {Approval} event.\r\n     * @param  owner_     Account that tokens are moving from.\r\n     * @param  recipient_ Account that receives tokens.\r\n     * @param  amount_    Amount of tokens that are transferred.\r\n     * @return success_   Boolean indicating whether the operation succeeded.\r\n     */\r\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\r\n\r\n}\r\n\r\n////// contracts/PoolHealthChecker.sol\r\n/* pragma solidity 0.8.7; */\r\n\r\n/* import { IERC20 } from \"../modules/erc20/src/interfaces/IERC20.sol\"; */\r\n\r\n/* import { IPoolLike } from \"./interfaces/Interfaces.sol\"; */\r\n\r\ncontract PoolHealthChecker {\r\n\r\n    uint256 constant WAD = 10 ** 18;\r\n\r\n    /**\r\n     * @dev   Pool accounting invariant, to be checked by smart contract monitoring tools.\r\n     * @param pool_ The address of the pool.\r\n     * @return      isMaintained_ Invariant result.\r\n    */\r\n    function poolAccountingInvariant(address pool_) external view returns (\r\n        bool isMaintained_,\r\n        uint256 fdtTotalSupply_,\r\n        uint256 interestSum_,\r\n        uint256 poolLosses_,\r\n        uint256 liquidityLockerBal_,\r\n        uint256 principalOut_\r\n    ) {\r\n        // Pool Accounting Law: fdtTotalSupply + interestSum - poolLosses <= liquidityLockerBal + principalOut.\r\n        IPoolLike pool = IPoolLike(pool_);\r\n\r\n        IERC20 liquidityAsset = IERC20(pool.liquidityAsset());\r\n        uint256 liquidityAssetDecimals = liquidityAsset.decimals();\r\n\r\n        fdtTotalSupply_ = pool.totalSupply() * (10 ** liquidityAssetDecimals) / WAD;\r\n        interestSum_    = pool.interestSum();\r\n        poolLosses_     = pool.poolLosses();\r\n\r\n        liquidityLockerBal_ = liquidityAsset.balanceOf(pool.liquidityLocker());\r\n        principalOut_       = pool.principalOut();\r\n\r\n        isMaintained_ = fdtTotalSupply_ + interestSum_ - poolLosses_ <= liquidityLockerBal_ + principalOut_;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"poolAccountingInvariant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMaintained_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fdtTotalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestSum_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLosses_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityLockerBal_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolHealthChecker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e77cfa33b5400f805661c634a656d01636e0af9607df1ca13cee6282ef84dafe"}]}