{"status": "1", "message": "OK", "result": [{"SourceCode": "// CosmicKiss Staking\r\n// https://cosmickiss.io\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ncontract CosmicStake {\r\n\r\n    mapping(address => uint256) public stakingBalance;\r\n    mapping(address => uint256) public yeildStartTime;\r\n    mapping(address => uint256) public parkedYeild;\r\n    mapping(address => uint256) public stakeStartTime;\r\n    mapping(address => bool) public isStaking;\r\n    IERC20 public cosmicToken;\r\n    bool public canStake;\r\n    bool public canUnstake;\r\n    bool public canYeild;\r\n    bool public canReinvest; \r\n\r\n    enum State {stake, unstake, yeildwithdraw,reinvest}\r\n\r\n    event StakeEvent(address indexed form,uint256 amount,uint256 timestamp,State indexed state);\r\n\r\n    \r\n    uint256 public ownBalance;\r\n    uint256 public rate;\r\n    uint256 public lockTime;\r\n    address public owner;\r\n \r\n    constructor(IERC20 _cosmicToken,uint256 _rate,uint256 _lockTime) {\r\n            cosmicToken = _cosmicToken;\r\n            owner = msg.sender;\r\n            rate = _rate;\r\n            lockTime = _lockTime;\r\n            canStake = true;\r\n            canUnstake = true;\r\n            canYeild = true;\r\n            canReinvest = true;\r\n        }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function updateRate(uint256 newRate) onlyOwner public returns(bool){\r\n        rate = newRate;\r\n        return true;\r\n    }\r\n    \r\n    function updateLockTime(uint256 newLockTime) onlyOwner public returns(bool){\r\n        lockTime = newLockTime;\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public returns(bool){\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n    function updateTradingState(bool _canStake,bool _canUnstake,bool _canYeild,bool _canReinvest) onlyOwner public returns(bool){\r\n        canStake = _canStake;\r\n        canUnstake = _canUnstake;\r\n        canYeild = _canYeild;\r\n        canReinvest = _canReinvest;\r\n        return true;\r\n    }\r\n\r\n    function emergency(uint256 amt) onlyOwner public {\r\n        cosmicToken.transfer(owner,amt);\r\n    }\r\n\r\n    function stake(uint256 amount) public {\r\n        require(canStake,\"function is disabled\");\r\n        require(amount > 0,\"You cannot stake zero tokens\");\r\n            \r\n        if(isStaking[msg.sender] == true){\r\n            parkedYeild[msg.sender] += calculateYieldTotal(msg.sender);\r\n        }\r\n\r\n        cosmicToken.transferFrom(msg.sender, address(this), amount);\r\n        stakingBalance[msg.sender] += amount;\r\n        ownBalance += amount;\r\n        stakeStartTime[msg.sender] = block.timestamp;\r\n        yeildStartTime[msg.sender] = block.timestamp;\r\n        isStaking[msg.sender] = true;\r\n        emit StakeEvent(msg.sender, amount,block.timestamp,State.stake);\r\n    }\r\n\r\n    function unstake(uint256 amount) public {\r\n        require(canUnstake,\"function is disabled\");\r\n        require((stakeStartTime[msg.sender]+lockTime) < block.timestamp,\"cannot unstake untill your time completes\");\r\n        require(\r\n            isStaking[msg.sender] = true &&\r\n            stakingBalance[msg.sender] >= amount, \r\n            \"Nothing to unstake\"\r\n        );\r\n        stakeStartTime[msg.sender] = block.timestamp;\r\n        yeildStartTime[msg.sender] = block.timestamp;\r\n        stakingBalance[msg.sender] -= amount;\r\n        cosmicToken.transfer(msg.sender, amount);\r\n        parkedYeild[msg.sender] += calculateYieldTotal(msg.sender);\r\n        ownBalance -= amount;\r\n        if(stakingBalance[msg.sender] == 0){\r\n            isStaking[msg.sender] = false;\r\n        }\r\n        emit StakeEvent(msg.sender, amount,block.timestamp,State.unstake);\r\n    }\r\n\r\n    function calculateYieldTime(address user) public view returns(uint256){\r\n        uint256 end = block.timestamp;\r\n        uint256 totalTime = end - yeildStartTime[user];\r\n        return totalTime;\r\n    }\r\n\r\n    function calculateYieldTotal(address user) public view returns(uint256) {\r\n        uint256 time = calculateYieldTime(user) * 10**18;\r\n        uint256 timeRate = time / rate;\r\n        uint256 rawYield = (stakingBalance[user] * timeRate) / 10**18;\r\n        return rawYield;\r\n    }\r\n\r\n\r\n    function reInvestRewards() public {\r\n        require(canReinvest,\"function is disabled\");\r\n        uint256 toReinvest = calculateYieldTotal(msg.sender);\r\n                    \r\n        if(parkedYeild[msg.sender] != 0){\r\n            toReinvest += parkedYeild[msg.sender];\r\n            parkedYeild[msg.sender] = 0;\r\n        }\r\n        require(toReinvest>0,\"Nothing to reinvest\");\r\n\r\n        stakingBalance[msg.sender] += toReinvest;\r\n        ownBalance += toReinvest;\r\n        stakeStartTime[msg.sender] = block.timestamp;\r\n        yeildStartTime[msg.sender] = block.timestamp;\r\n        isStaking[msg.sender] = true;\r\n        emit StakeEvent(msg.sender, toReinvest,block.timestamp,State.reinvest);\r\n    }\r\n\r\n    function withdrawYield() public {\r\n        require(canYeild,\"function is disabled\");\r\n        uint256 toTransfer = calculateYieldTotal(msg.sender);\r\n                    \r\n        if(parkedYeild[msg.sender] != 0){\r\n            toTransfer += parkedYeild[msg.sender];\r\n            parkedYeild[msg.sender] = 0;\r\n        }\r\n        require(toTransfer>0,\"Nothing to yeild\");\r\n        require((cosmicToken.balanceOf(address(this))-ownBalance)>=toTransfer,\"Insufficient pool\");\r\n        yeildStartTime[msg.sender] = block.timestamp;\r\n        cosmicToken.transfer(msg.sender, toTransfer);\r\n        emit StakeEvent(msg.sender, toTransfer,block.timestamp,State.yeildwithdraw);\r\n    } \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_cosmicToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"form\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum CosmicStake.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"StakeEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateYieldTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateYieldTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canYeild\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cosmicToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"emergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parkedYeild\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reInvestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockTime\",\"type\":\"uint256\"}],\"name\":\"updateLockTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canStake\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canUnstake\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canYeild\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_canReinvest\",\"type\":\"bool\"}],\"name\":\"updateTradingState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yeildStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CosmicStake", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000043eaf5f561b5705de56eacc3fb842a70f218806300000000000000000000000000000000000000000000000000000000000762000000000000000000000000000000000000000000000000000000000000127500", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://25ad2fa4325e712be17ea5f0a2aa958270274ec92110897fc23233bb19c8f798"}]}