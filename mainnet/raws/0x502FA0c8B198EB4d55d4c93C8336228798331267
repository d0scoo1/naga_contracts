{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/text/SvgText.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\n/// @title  Text Logo Elements\\n/// @notice On-chain SVG\\npragma solidity ^0.8.0;\\n\\nimport '../common/SvgFill.sol';\\nimport '../common/SvgElement.sol';\\nimport '../common/LogoHelper.sol';\\n\\nlibrary SvgText {\\n\\n  struct Font {\\n    string link;\\n    string name;\\n  }\\n  \\n  struct Text {\\n    string id;\\n    string class;\\n    string val;\\n    string textType;\\n    Font font;\\n    uint256 size;\\n    string paletteName;\\n    SvgFill.Fill[] fills;\\n    bool animate;\\n  }\\n\\n  function getSvgDefs(string memory seed, Text memory text) public pure returns (string memory) {\\n    string memory defs = '';\\n\\n    for (uint i = 0; i < text.fills.length; i++) {\\n      defs = string(abi.encodePacked(defs, SvgFill.getFillDefs(seed, text.fills[i])));\\n    }\\n\\n    if (LogoHelper.equal(text.textType, 'Rug Pull')) {\\n      uint256[] memory ys = getRugPullY(text);\\n      for (uint8 i = 0; i < 4; i++) {\\n        string memory path = SvgElement.getRect(SvgElement.Rect('', '', LogoHelper.toString(ys[i] + 3), '100%', '100%', '', '', ''));\\n        string memory id = string(abi.encodePacked('clip-', LogoHelper.toString(i)));\\n        defs = string(abi.encodePacked(defs, SvgElement.getClipPath(SvgElement.ClipPath(id, path))));\\n      }\\n    }\\n    return defs;\\n  }\\n  \\n  // TEXT //\\n  function getSvgStyles(Text memory text) public pure returns (string memory) {\\n    string memory styles = !LogoHelper.equal(text.font.link, '') ? string(abi.encodePacked('@import url(', text.font.link, '); ')) : '';\\n    styles = string(abi.encodePacked(styles, '.', text.class, ' { font-family:', text.font.name, '; font-size: ', LogoHelper.toString(text.size), 'px; font-weight: 800; } '));\\n\\n    for (uint i=0; i < text.fills.length; i++) {\\n      styles = string(abi.encodePacked(styles, SvgFill.getFillStyles(text.fills[i])));\\n    }\\n    return styles;\\n  }\\n\\n  function getSvgContent(Text memory text) public pure returns (string memory) {\\n    string memory content = '';\\n    if (LogoHelper.equal(text.textType, 'Plain')) {\\n      content = SvgElement.getText(SvgElement.Text(text.class, '50%', '50%', '', '', '', 'central', 'middle', '', '', '', text.val));\\n    } else if (LogoHelper.equal(text.textType, 'Rug Pull')) {\\n      content = getRugPullContent(text);\\n    } else if (LogoHelper.equal(text.textType, 'Mailbox') || LogoHelper.equal(text.textType, 'Warped Mailbox')) {\\n      uint8 iterations = LogoHelper.equal(text.textType, 'Mailbox') ? 2 : 30;\\n      for (uint8 i = 0; i < iterations; i++) {\\n        content = string(abi.encodePacked(content, SvgElement.getText(SvgElement.Text(string(abi.encodePacked(text.class, ' ', text.fills[i % text.fills.length].class)), '50%', '50%', LogoHelper.toString(iterations - i), LogoHelper.toString(iterations - i), '', 'central', 'middle', '', '', '', text.val))));\\n      }\\n      content = string(abi.encodePacked(content, SvgElement.getText(SvgElement.Text(string(abi.encodePacked(text.class, ' ', text.fills[text.fills.length - 1].class)), '50%', '50%', '', '', '', 'central', 'middle', '', '', '', text.val))));\\n    } else if (LogoHelper.equal(text.textType, 'NGMI')) {\\n      string memory rotate = LogoHelper.getRotate(text.val);\\n      content = SvgElement.getText(SvgElement.Text(text.class, '50%', '50%', '', '', '', 'central', 'middle', rotate, '', '', text.val));\\n    }\\n    return content;\\n  }\\n\\n  function getRugPullContent(Text memory text) public pure returns (string memory) {\\n    // get first animation y via y_prev = (y of txt 1) - font size / 2)\\n    // next animation goes to y_prev + (font size / 3)\\n    // clip path is txt elemnt y + 3\\n\\n    string memory content = '';\\n    uint256[] memory ys = getRugPullY(text);\\n\\n    string memory element = SvgElement.getAnimate(SvgElement.Animate('y', LogoHelper.toString(ys[4]), '', '2600', '0', '1', 'freeze'));\\n    element = string(abi.encodePacked(text.val, element));\\n    element = SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', 'clip-3', element));      \\n\\n    content = element;\\n    element = SvgElement.getAnimate(SvgElement.Animate('y', LogoHelper.toString(ys[3]), '', '2400', '0', '1', 'freeze'));\\n    element = string(abi.encodePacked(text.val, element));\\n    element = SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', 'clip-2', element));    \\n    content = string(abi.encodePacked(content, element));\\n\\n    element = SvgElement.getAnimate(SvgElement.Animate('y', LogoHelper.toString(ys[2]), '', '2200', '0', '1', 'freeze'));\\n    element = string(abi.encodePacked(text.val, element));\\n    element = SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', 'clip-1', element));      \\n    content = string(abi.encodePacked(content, element));\\n\\n    element = SvgElement.getAnimate(SvgElement.Animate('y', LogoHelper.toString(ys[1]), '', '2000', '0', '1', 'freeze'));\\n    element = string(abi.encodePacked(text.val, element));\\n    element = SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', 'clip-0', element));\\n    content = string(abi.encodePacked(content, element));\\n\\n    return string(abi.encodePacked(content, SvgElement.getText(SvgElement.Text(text.class, '50%', LogoHelper.toString(ys[0]), '', '', '', 'alphabetic', 'middle', '', '', '', text.val))));\\n  }\\n\\n  function getRugPullY(Text memory text) public pure returns (uint256[] memory) {\\n    uint256[] memory ys = new uint256[](5);\\n    uint256 y =  (text.size - (text.size / 4)) + (text.size / 2) + (text.size / 3) + (text.size / 4) + (text.size / 5);\\n    y = ((300 - y) / 2) + (text.size - (text.size / 4));\\n    ys[0] = y;\\n    y = y + text.size / 2;\\n    ys[1] = y;\\n    y = y + text.size / 3;\\n    ys[2] = y;\\n    y = y + text.size / 4;\\n    ys[3] = y;\\n    y = y + text.size / 5;\\n    ys[4] = y;\\n    return ys;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SvgFill.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './SvgElement.sol';\\nimport './LogoHelper.sol';\\n\\nlibrary SvgFill {\\n  struct Fill {\\n    string id;\\n    string class;\\n    string fillType;\\n    string[] colors;\\n    bool animate;\\n  }\\n\\n  // FILL //\\n  function getFillDefs(string memory seed, Fill memory fill) public pure returns (string memory) {\\n    string memory defs = '';\\n    if (LogoHelper.equal(fill.fillType, 'Linear Gradient') || LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient')) {\\n      if (!fill.animate) {\\n        defs = SvgElement.getLinearGradient(SvgElement.LinearGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient'), ''));\\n      } else {\\n       string memory val = LogoHelper.toString(LogoHelper.randomInRange(seed, 100 , 0));\\n       string memory values = string(abi.encodePacked(val,\\n                                                      '%;',\\n                                                      LogoHelper.toString(LogoHelper.randomInRange(string(abi.encodePacked(seed, 'a')), 100 , 0)),\\n                                                      '%;',\\n                                                      val,\\n                                                      '%;'));\\n        val = LogoHelper.toString(LogoHelper.randomInRange(seed, 50000 , 5000));\\n        defs = SvgElement.getLinearGradient(SvgElement.LinearGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient'), SvgElement.getAnimate(SvgElement.Animate(getLinearAnimationType(seed), '', values, val, '0', getAnimationRepeat(seed), 'freeze'))));\\n      }\\n    } else if (LogoHelper.equal(fill.fillType, 'Radial Gradient') || LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient')) {\\n      if (!fill.animate) {\\n        defs = SvgElement.getRadialGradient(SvgElement.RadialGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient'), ''));\\n      } else {\\n        string memory val = LogoHelper.toString(LogoHelper.randomInRange(seed, 100, 0));\\n        string memory values = string(abi.encodePacked(val,\\n                                                      '%;',\\n                                                      LogoHelper.toString(LogoHelper.randomInRange(string(abi.encodePacked(seed, 'a')), 100 , 0)),\\n                                                      '%;',\\n                                                      val,\\n                                                      '%;'));\\n        val = LogoHelper.toString(LogoHelper.randomInRange(seed, 10000 , 5000));\\n        defs = SvgElement.getRadialGradient(SvgElement.RadialGradient(fill.id, fill.colors, LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient'), SvgElement.getAnimate(SvgElement.Animate(getRadialAnimationType(seed), '', values, val, '0', getAnimationRepeat(seed), 'freeze'))));\\n        \\n      }\\n    }\\n    return defs;\\n  }\\n\\n  function getFillStyles(Fill memory fill) public pure returns (string memory) {\\n    if (LogoHelper.equal(fill.fillType, 'Solid')) {\\n      return string(abi.encodePacked('.', fill.class, ' { fill: ', fill.colors[0], ' } '));\\n    } else if (LogoHelper.equal(fill.fillType, 'Linear Gradient')\\n                || LogoHelper.equal(fill.fillType, 'Radial Gradient')\\n                  || LogoHelper.equal(fill.fillType, 'Blocked Linear Gradient')\\n                    || LogoHelper.equal(fill.fillType, 'Blocked Radial Gradient')) {\\n      return string(abi.encodePacked('.', fill.class, ' { fill: url(#', fill.id, ') } '));\\n    }\\n    string memory styles = '';\\n    return styles;\\n  }\\n\\n  function getLinearAnimationType(string memory seed) private pure returns (string memory) {\\n    string[4] memory types = ['x1', 'x2', 'y1', 'y2'];\\n    return types[LogoHelper.random(seed) % types.length];\\n  }\\n\\n  function getRadialAnimationType(string memory seed) private pure returns (string memory) {\\n    string[3] memory types = ['fx', 'fy', 'r'];\\n    return types[LogoHelper.random(seed) % types.length];\\n  }\\n\\n  function getAnimationRepeat(string memory seed) private pure returns (string memory) {\\n    string[3] memory types = ['indefinite', '1', '2'];\\n    return types[LogoHelper.random(seed) % types.length];\\n  }\\n\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/common/SvgElement.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\n/// @notice Helper to build svg elements\\npragma solidity ^0.8.0;\\n\\nlibrary SvgElement {\\n  struct Rect {\\n    string class;\\n    string x;\\n    string y;\\n    string width;\\n    string height;\\n    string opacity;\\n    string fill;\\n    string filter;\\n  }\\n\\n  function getRect(Rect memory rect) public pure returns (string memory) {\\n    string memory element = '<rect ';\\n    element = !equal(rect.class, '') ? string(abi.encodePacked(element, 'class=\\\"', rect.class, '\\\" ')) : element;\\n    element = !equal(rect.x, '') ? string(abi.encodePacked(element, 'x=\\\"', rect.x, '\\\" ')) : element;\\n    element = !equal(rect.y, '') ? string(abi.encodePacked(element, 'y=\\\"', rect.y, '\\\" ')) : element;\\n    element = !equal(rect.width, '') ? string(abi.encodePacked(element, 'width=\\\"', rect.width, '\\\" ')) : element;\\n    element = !equal(rect.height, '') ? string(abi.encodePacked(element, 'height=\\\"', rect.height, '\\\" ')) : element;\\n    element = !equal(rect.opacity, '') ? string(abi.encodePacked(element, 'opacity=\\\"', rect.opacity, '\\\" ')) : element;\\n    element = !equal(rect.fill, '') ? string(abi.encodePacked(element, 'fill=\\\"url(#', rect.fill, ')\\\" ')) : element;\\n    element = !equal(rect.filter, '') ? string(abi.encodePacked(element, 'filter=\\\"url(#', rect.filter, ')\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '/>'));\\n    return element;\\n  }\\n\\n  struct Circle {\\n    string class;\\n    string cx;\\n    string cy;\\n    string r;\\n    string opacity;\\n  }\\n\\n  function getCircle(Circle memory circle) public pure returns (string memory) {\\n    string memory element = '<circle ';\\n    element = !equal(circle.class, '') ? string(abi.encodePacked(element, 'class=\\\"', circle.class, '\\\" ')) : element;\\n    element = !equal(circle.cx, '') ? string(abi.encodePacked(element, 'cx=\\\"', circle.cx, '\\\" ')) : element;\\n    element = !equal(circle.cy, '') ? string(abi.encodePacked(element, 'cy=\\\"', circle.cy, '\\\" ')) : element;\\n    element = !equal(circle.r, '') ? string(abi.encodePacked(element, 'r=\\\"', circle.r, '\\\" ')) : element;\\n    element = !equal(circle.opacity, '') ? string(abi.encodePacked(element, 'opacity=\\\"', circle.opacity, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '/>'));\\n    return element;\\n  }\\n\\n  struct Text {\\n    string class;\\n    string x;\\n    string y;\\n    string dx;\\n    string dy;\\n    string display;\\n    string baseline;\\n    string anchor;\\n    string rotate;\\n    string transform;\\n    string clipPath;\\n    string val;\\n  }\\n\\n  function getText(Text memory txt) public pure returns (string memory) {\\n    string memory element = '<text ';\\n    element = !equal(txt.class, '') ? string(abi.encodePacked(element, 'class=\\\"', txt.class, '\\\" ')) : element;\\n    element = !equal(txt.x, '') ? string(abi.encodePacked(element, 'x=\\\"', txt.x, '\\\" ')) : element;\\n    element = !equal(txt.y, '') ? string(abi.encodePacked(element, 'y=\\\"', txt.y, '\\\" ')) : element;\\n    element = !equal(txt.dx, '') ? string(abi.encodePacked(element, 'dx=\\\"', txt.dx, '\\\" ')) : element;\\n    element = !equal(txt.dy, '') ? string(abi.encodePacked(element, 'dy=\\\"', txt.dy, '\\\" ')) : element;\\n    element = !equal(txt.display, '') ? string(abi.encodePacked(element, 'display=\\\"', txt.display, '\\\" ')) : element;\\n    element = !equal(txt.baseline, '') ? string(abi.encodePacked(element, 'dominant-baseline=\\\"', txt.baseline, '\\\" ')) : element;\\n    element = !equal(txt.anchor, '') ? string(abi.encodePacked(element, 'text-anchor=\\\"', txt.anchor, '\\\" ')) : element;\\n    element = !equal(txt.rotate, '') ? string(abi.encodePacked(element, 'rotate=\\\"', txt.rotate, '\\\" ')) : element;\\n    element = !equal(txt.transform, '') ? string(abi.encodePacked(element, 'transform=\\\"', txt.transform, '\\\" ')) : element;\\n    element = !equal(txt.clipPath, '') ? string(abi.encodePacked(element, 'clip-path=\\\"url(#', txt.clipPath, ')\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', txt.val, '</text>'));\\n    return element;\\n  }\\n\\n  struct TextPath {\\n    string class;\\n    string href;\\n    string val;\\n  }\\n\\n  function getTextPath(TextPath memory txtPath) public pure returns (string memory) {\\n    string memory element = '<textPath ';\\n    element = !equal(txtPath.class, '') ? string(abi.encodePacked(element, 'class=\\\"', txtPath.class, '\\\" ')) : element;\\n    element = !equal(txtPath.class, '') ? string(abi.encodePacked(element, 'href=\\\"#', txtPath.href, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', txtPath.val, '</textPath>'));\\n    return element;\\n  }\\n\\n  struct Tspan {\\n    string class;\\n    string display;\\n    string dx;\\n    string dy;\\n    string val;\\n  }\\n\\n  function getTspan(Tspan memory tspan) public pure returns (string memory) {\\n    string memory element = '<tspan ';\\n    element = !equal(tspan.class, '') ? string(abi.encodePacked(element, 'class=\\\"', tspan.class, '\\\" ')) : element;\\n    element = !equal(tspan.display, '') ? string(abi.encodePacked(element, 'display=\\\"', tspan.display, '\\\" ')) : element;\\n    element = !equal(tspan.dx, '') ? string(abi.encodePacked(element, 'dx=\\\"', tspan.dx, '\\\" ')) : element;\\n    element = !equal(tspan.dy, '') ? string(abi.encodePacked(element, 'dy=\\\"', tspan.dy, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', tspan.val, '</tspan>'));\\n    return element;\\n  }\\n\\n  struct Animate {\\n    string attributeName;\\n    string to;\\n    string values;\\n    string duration;\\n    string begin;\\n    string repeatCount;\\n    string fill;\\n  }\\n\\n  function getAnimate(Animate memory animate) public pure returns (string memory) {\\n    string memory element = '<animate ';\\n    element = !equal(animate.attributeName, '') ? string(abi.encodePacked(element, 'attributeName=\\\"', animate.attributeName, '\\\" ')) : element;\\n    element = !equal(animate.to, '') ? string(abi.encodePacked(element, 'to=\\\"', animate.to, '\\\" ')) : element;\\n    element = !equal(animate.values, '') ? string(abi.encodePacked(element, 'values=\\\"', animate.values, '\\\" ')) : element;\\n    element = !equal(animate.duration, '') ? string(abi.encodePacked(element, 'dur=\\\"', animate.duration, 'ms\\\" ')) : element;\\n    element = !equal(animate.begin, '') ? string(abi.encodePacked(element, 'begin=\\\"', animate.begin, 'ms\\\" ')) : element;\\n    element = !equal(animate.repeatCount, '') ? string(abi.encodePacked(element, 'repeatCount=\\\"', animate.repeatCount, '\\\" ')) : element;\\n    element = !equal(animate.fill, '') ? string(abi.encodePacked(element, 'fill=\\\"', animate.fill, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '/>'));\\n    return element;\\n  }\\n\\n  struct Path {\\n    string id;\\n    string pathAttr;\\n    string val;\\n  }\\n\\n  function getPath(Path memory path) public pure returns (string memory) {\\n    string memory element = '<path ';\\n    element = !equal(path.id, '') ? string(abi.encodePacked(element, 'id=\\\"', path.id, '\\\" ')) : element;\\n    element = !equal(path.pathAttr, '') ? string(abi.encodePacked(element, 'd=\\\"', path.pathAttr, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', path.val, '</path>'));\\n    return element;\\n  }\\n\\n  struct Group {\\n    string transform;\\n    string val;\\n  }\\n\\n  function getGroup(Group memory group) public pure returns (string memory) {\\n    string memory element = '<g ';\\n    element = !equal(group.transform, '') ? string(abi.encodePacked(element, 'transform=\\\"', group.transform, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', group.val, '</g>'));\\n    return element;\\n  }\\n\\n  struct Pattern {\\n    string id;\\n    string x;\\n    string y;\\n    string width;\\n    string height;\\n    string patternUnits;\\n    string val;\\n  }\\n\\n  function getPattern(Pattern memory pattern) public pure returns (string memory) {\\n    string memory element = '<pattern ';\\n    element = !equal(pattern.id, '') ? string(abi.encodePacked(element, 'id=\\\"', pattern.id, '\\\" ')) : element;\\n    element = !equal(pattern.x, '') ? string(abi.encodePacked(element, 'x=\\\"', pattern.x, '\\\" ')) : element;\\n    element = !equal(pattern.y, '') ? string(abi.encodePacked(element, 'y=\\\"', pattern.y, '\\\" ')) : element;\\n    element = !equal(pattern.width, '') ? string(abi.encodePacked(element, 'width=\\\"', pattern.width, '\\\" ')) : element;\\n    element = !equal(pattern.height, '') ? string(abi.encodePacked(element, 'height=\\\"', pattern.height, '\\\" ')) : element;\\n    element = !equal(pattern.patternUnits, '') ? string(abi.encodePacked(element, 'patternUnits=\\\"', pattern.patternUnits, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', pattern.val, '</pattern>'));\\n    return element;\\n  }\\n\\n  struct Filter {\\n    string id;\\n    string val;\\n  }\\n\\n  function getFilter(Filter memory filter) public pure returns (string memory) {\\n    string memory element = '<filter ';\\n    element = !equal(filter.id, '') ? string(abi.encodePacked(element, 'id=\\\"', filter.id, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', filter.val, '</filter>'));\\n    return element;\\n  }\\n\\n  struct Turbulance {\\n    string fType;\\n    string baseFrequency;\\n    string octaves;\\n    string result;\\n    string val;\\n  }\\n\\n  function getTurbulance(Turbulance memory turbulance) public pure returns (string memory) {\\n    string memory element = '<feTurbulence ';\\n    element = !equal(turbulance.fType, '') ? string(abi.encodePacked(element, 'type=\\\"', turbulance.fType, '\\\" ')) : element;\\n    element = !equal(turbulance.baseFrequency, '') ? string(abi.encodePacked(element, 'baseFrequency=\\\"', turbulance.baseFrequency, '\\\" ')) : element;\\n    element = !equal(turbulance.octaves, '') ? string(abi.encodePacked(element, 'numOctaves=\\\"', turbulance.octaves, '\\\" ')) : element;\\n    element = !equal(turbulance.result, '') ? string(abi.encodePacked(element, 'result=\\\"', turbulance.result, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', turbulance.val, '</feTurbulence>'));\\n    return element;\\n  }\\n\\n  struct DisplacementMap {\\n    string mIn;\\n    string in2;\\n    string result;\\n    string scale;\\n    string xChannelSelector;\\n    string yChannelSelector;\\n    string val;\\n  }\\n\\n  function getDisplacementMap(DisplacementMap memory displacementMap) public pure returns (string memory) {\\n    string memory element = '<feDisplacementMap ';\\n    element = !equal(displacementMap.mIn, '') ? string(abi.encodePacked(element, 'in=\\\"', displacementMap.mIn, '\\\" ')) : element;\\n    element = !equal(displacementMap.in2, '') ? string(abi.encodePacked(element, 'in2=\\\"', displacementMap.in2, '\\\" ')) : element;\\n    element = !equal(displacementMap.result, '') ? string(abi.encodePacked(element, 'result=\\\"', displacementMap.result, '\\\" ')) : element;\\n    element = !equal(displacementMap.scale, '') ? string(abi.encodePacked(element, 'scale=\\\"', displacementMap.scale, '\\\" ')) : element;\\n    element = !equal(displacementMap.xChannelSelector, '') ? string(abi.encodePacked(element, 'xChannelSelector=\\\"', displacementMap.xChannelSelector, '\\\" ')) : element;\\n    element = !equal(displacementMap.yChannelSelector, '') ? string(abi.encodePacked(element, 'yChannelSelector=\\\"', displacementMap.yChannelSelector, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, '>', displacementMap.val, '</feDisplacementMap>'));\\n    return element;\\n  }\\n\\n  struct ClipPath {\\n    string id;\\n    string val;\\n  }\\n\\n  function getClipPath(ClipPath memory clipPath) public pure returns (string memory) {\\n    string memory element = '<clipPath ';\\n    element = !equal(clipPath.id, '') ? string(abi.encodePacked(element, 'id=\\\"', clipPath.id, '\\\" ')) : element;\\n    element = string(abi.encodePacked(element, ' >', clipPath.val, '</clipPath>'));\\n    return element;\\n  }\\n\\n  struct LinearGradient {\\n    string id;\\n    string[] colors;\\n    bool blockScheme;\\n    string animate;\\n  }\\n\\n  function getLinearGradient(LinearGradient memory linearGradient) public pure returns (string memory) {\\n    string memory element = '<linearGradient ';\\n    element = !equal(linearGradient.id, '') ? string(abi.encodePacked(element, 'id=\\\"', linearGradient.id, '\\\">')) : element;\\n    uint baseOffset = 100 / (linearGradient.colors.length - 1);\\n    for (uint i=0; i<linearGradient.colors.length; i++) {\\n      uint offset;\\n      if (i != linearGradient.colors.length - 1) {\\n        offset = baseOffset * i;\\n      } else {\\n        offset = 100;\\n      }\\n      if (linearGradient.blockScheme && i != 0) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', linearGradient.colors[i-1], '\\\" />'));\\n      }\\n\\n      if (!linearGradient.blockScheme || (linearGradient.blockScheme && i != linearGradient.colors.length - 1)) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', linearGradient.colors[i], '\\\" />'));\\n      }\\n    }\\n    element = !equal(linearGradient.animate, '') ? string(abi.encodePacked(element, linearGradient.animate)) : element;\\n    element =  string(abi.encodePacked(element, '</linearGradient>'));\\n    return element;\\n  }\\n\\n  struct RadialGradient {\\n    string id;\\n    string[] colors;\\n    bool blockScheme;\\n    string animate;\\n  }\\n\\n  function getRadialGradient(RadialGradient memory radialGradient) public pure returns (string memory) {\\n    string memory element = '<radialGradient ';\\n    element = !equal(radialGradient.id, '') ? string(abi.encodePacked(element, 'id=\\\"', radialGradient.id, '\\\">')) : element;\\n    uint baseOffset = 100 / (radialGradient.colors.length - 1);\\n    for (uint i=0; i<radialGradient.colors.length; i++) {\\n      uint offset;\\n      if (i != radialGradient.colors.length - 1) {\\n        offset = baseOffset * i;\\n      } else {\\n        offset = 100;\\n      }\\n      if (radialGradient.blockScheme && i != 0) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', radialGradient.colors[i-1], '\\\" />'));\\n      }\\n\\n      if (!radialGradient.blockScheme || (radialGradient.blockScheme && i != radialGradient.colors.length - 1)) {\\n        element = string(abi.encodePacked(element, '<stop offset=\\\"', toString(offset), '%\\\"  stop-color=\\\"', radialGradient.colors[i], '\\\" />'));\\n      }\\n    }\\n    element = !equal(radialGradient.animate, '') ? string(abi.encodePacked(element, radialGradient.animate)) : element;\\n    element =  string(abi.encodePacked(element, '</radialGradient>'));\\n    return element;\\n  }\\n\\n  function equal(string memory a, string memory b) private pure returns (bool) {\\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n  }\\n\\n  function toString(uint256 value) private pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n    if (value == 0) {\\n        return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n        digits++;\\n        temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n        value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n}\"\r\n    },\r\n    \"contracts/common/LogoHelper.sol\": {\r\n      \"content\": \"//\\tSPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary LogoHelper {\\n  function getRotate(string memory text) public pure returns (string memory) {\\n    bytes memory byteString = bytes(text);\\n    string memory rotate = string(abi.encodePacked('-', toString(random(text) % 10 + 1)));\\n    for (uint i=1; i < byteString.length; i++) {\\n      uint nextRotate = random(rotate) % 10 + 1;\\n      if (i % 2 == 0) {\\n        rotate = string(abi.encodePacked(rotate, ',-', toString(nextRotate)));\\n      } else {\\n        rotate = string(abi.encodePacked(rotate, ',', toString(nextRotate)));\\n      }\\n    }\\n    return rotate;\\n  }\\n\\n  function getTurbulance(string memory seed, uint max, uint magnitudeOffset) public pure returns (string memory) {\\n    string memory turbulance = decimalInRange(seed, max, magnitudeOffset);\\n    uint rand = randomInRange(turbulance, max, 0);\\n    return string(abi.encodePacked(turbulance, ', ', getDecimal(rand, magnitudeOffset)));\\n  }\\n\\n  function decimalInRange(string memory seed, uint max, uint magnitudeOffset) public pure returns (string memory) {\\n    uint rand = randomInRange(seed, max, 0);\\n    return getDecimal(rand, magnitudeOffset);\\n  }\\n\\n  // CORE HELPERS //\\n  function random(string memory input) public pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function randomFromInt(uint256 seed) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(seed)));\\n  }\\n\\n  function randomInRange(string memory input, uint max, uint offset) public pure returns (uint256) {\\n    max = max - offset;\\n    return (random(input) % max) + offset;\\n  }\\n\\n  function equal(string memory a, string memory b) public pure returns (bool) {\\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n  }\\n\\n  function toString(uint256 value) public pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n    if (value == 0) {\\n        return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n        digits++;\\n        temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n        digits -= 1;\\n        buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n        value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toString(address x) internal pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2*i] = char(hi);\\n      s[2*i+1] = char(lo);            \\n    }\\n    return string(s);\\n  }\\n\\nfunction char(bytes1 b) internal pure returns (bytes1 c) {\\n  if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n  else return bytes1(uint8(b) + 0x57);\\n}\\n  \\n  function getDecimal(uint val, uint magnitudeOffset) public pure returns (string memory) {\\n    string memory decimal;\\n    if (val != 0) {\\n      for (uint i = 10; i < magnitudeOffset / val; i=10*i) {\\n        decimal = string(abi.encodePacked(decimal, '0'));\\n      }\\n    }\\n    decimal = string(abi.encodePacked('0.', decimal, toString(val)));\\n    return decimal;\\n  }\\n\\n  bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n    return string(result);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/common/LogoHelper.sol\": {\r\n        \"LogoHelper\": \"0xe4e64b52d86ba86c5553b0e9972cd30b509a40d9\"\r\n      },\r\n      \"contracts/common/SvgElement.sol\": {\r\n        \"SvgElement\": \"0x4a478f1b5e9d5a942441fcb490e24dfd3908415e\"\r\n      },\r\n      \"contracts/common/SvgFill.sol\": {\r\n        \"SvgFill\": \"0x438ae3a2233003130e77374af6a0814f2bb22ad4\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"textType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct SvgText.Font\",\"name\":\"font\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgText.Text\",\"name\":\"text\",\"type\":\"tuple\"}],\"name\":\"getRugPullContent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"textType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct SvgText.Font\",\"name\":\"font\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgText.Text\",\"name\":\"text\",\"type\":\"tuple\"}],\"name\":\"getRugPullY\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"textType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct SvgText.Font\",\"name\":\"font\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgText.Text\",\"name\":\"text\",\"type\":\"tuple\"}],\"name\":\"getSvgContent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"seed\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"textType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct SvgText.Font\",\"name\":\"font\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgText.Text\",\"name\":\"text\",\"type\":\"tuple\"}],\"name\":\"getSvgDefs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"textType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct SvgText.Font\",\"name\":\"font\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"paletteName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fillType\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"colors\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgFill.Fill[]\",\"name\":\"fills\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"animate\",\"type\":\"bool\"}],\"internalType\":\"struct SvgText.Text\",\"name\":\"text\",\"type\":\"tuple\"}],\"name\":\"getSvgStyles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SvgText", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}