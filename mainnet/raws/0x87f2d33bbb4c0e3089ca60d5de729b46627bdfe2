{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity =0.8.7;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    function balanceOf(address owner) external view returns (uint balance);\r\n    function ownerOf(uint tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint tokenId) external payable;\r\n    function transferFrom(address from, address to, uint tokenId) external payable;\r\n    function approve(address to, uint tokenId) external;\r\n    function getApproved(uint tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint tokenId, bytes calldata data) external payable;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint);\r\n    function tokenOfOwnerByIndex(address owner, uint index) external view returns (uint tokenId);\r\n    function tokenByIndex(uint index) external view returns (uint);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IERC2981 is IERC165 {\r\n    function royaltyInfo(uint _tokenId, uint _salePrice) external view returns (address receiver, uint royaltyAmount);\r\n}\r\n\r\ninterface IAuctionInfo {\r\n    function getLastSalePrice(uint tokenId) external view returns (uint);\r\n    function purchaseToken() external returns (address);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () {\r\n        _registerInterface(type(IERC165).interfaceId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address transferOwner) public onlyOwner {\r\n        require(transferOwner != newOwner);\r\n        newOwner = transferOwner;\r\n    }\r\n\r\n    function acceptOwnership() virtual public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            uint toDeleteIndex = valueIndex - 1;\r\n            uint lastIndex = set._values.length - 1;\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n            set._values.pop();\r\n            delete set._indexes[value];\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint index) internal view returns (address) {\r\n        return address(uint160(uint(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint index) internal view returns (uint) {\r\n        return uint(_at(set._inner, index));\r\n    }\r\n}\r\n\r\nlibrary EnumerableMap {\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        MapEntry[] _entries;\r\n        mapping (bytes32 => uint) _indexes;\r\n    }\r\n\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        uint keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            uint toDeleteIndex = keyIndex - 1;\r\n            uint lastIndex = map._entries.length - 1;\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n            map._entries.pop();\r\n            delete map._indexes[key];\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    function _length(Map storage map) private view returns (uint) {\r\n        return map._entries.length;\r\n    }\r\n\r\n    function _at(Map storage map, uint index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\r\n        uint keyIndex = map._indexes[key];\r\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\r\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\r\n    }\r\n\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        uint keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    function set(UintToAddressMap storage map, uint key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    function remove(UintToAddressMap storage map, uint key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    function contains(UintToAddressMap storage map, uint key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    function length(UintToAddressMap storage map) internal view returns (uint) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    function at(UintToAddressMap storage map, uint index) internal view returns (uint, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint(key), address(uint160(uint(value))));\r\n    }\r\n\r\n    function tryGet(UintToAddressMap storage map, uint key) internal view returns (bool, address) {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\r\n        return (success, address(uint160(uint(value))));\r\n    }\r\n\r\n    function get(UintToAddressMap storage map, uint key) internal view returns (address) {\r\n        return address(uint160(uint(_get(map._inner, bytes32(key)))));\r\n    }\r\n\r\n    function get(UintToAddressMap storage map, uint key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint160(uint(_get(map._inner, bytes32(key), errorMessage))));\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    function toString(uint value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint temp = value;\r\n        uint digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint index = digits;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[--index] = bytes1(uint8(48 + uint(temp % 10)));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint value) internal {\r\n        uint newAllowance = token.allowance(address(this), spender) + value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint value) internal {\r\n        uint newAllowance = token.allowance(address(this), spender) - value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract UNICORN is ERC165, IERC721, IERC721Metadata, IERC721Enumerable, IERC2981, Ownable, Pausable { \r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n    using Strings for uint;\r\n\r\n    struct Collection {\r\n        uint collectionId;\r\n        string name;\r\n        uint maxCollectionSize;\r\n        bool isDigitalObject;\r\n        uint[] tokens;\r\n    }\r\n\r\n    struct TokenMetaData {\r\n        address approval;\r\n        string URI;\r\n        address author;\r\n        uint collection;\r\n        bool isRoyaltyFree;\r\n        address custodian;\r\n    }\r\n\r\n    uint public rayaltyFee;\r\n    IAuctionInfo public auctionInfo;\r\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\r\n    EnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n    string private constant _name = \"Unicorn.win\";\r\n    string private constant _symbol = \"UNICORN\";\r\n    string private _baseURI;\r\n    mapping (uint => TokenMetaData) private _tokenMetaDatas;\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n    mapping (string => uint) private _tokenIdByHash;\r\n    \r\n    mapping (address => bool) private _globallyWhitelisted;\r\n    mapping (address => mapping (uint => bool)) private _tokenWhitelist;\r\n    mapping (address => mapping (address => mapping (uint => bool))) private _allowedSingleRoyaltyFreeTransfer;\r\n    bool private _isGlobalRoyaltyFree;\r\n    \r\n    uint private _totalCollections;\r\n    mapping (uint => Collection) private _collections;\r\n\r\n    event SetSystemRoyaltyFee(uint indexed oldRoyalty, uint indexed newFee);\r\n    event SetTokenURI(uint indexed tokenId, string indexed tokenUri);\r\n    event SetTokenCustodian(uint indexed tokenId, address indexed custodian);\r\n    event SetBaseURI(string indexed baseURI);\r\n    event UpdateTokenAuthor(uint indexed tokenId, address indexed previousAuthor, address indexed author);\r\n    event CreateCollection(uint indexed maxCollectionSize, bool indexed isDigitalObject, string collectionName);\r\n    event UpdateCollectionName(uint indexed collectionId, string collectionName);\r\n    event AddTokenToCollection(uint indexed tokenId, uint indexed collectionId);\r\n    event UpdateTokenRoyaltyPolicy(uint indexed tokenId, bool indexed isRoyaltyFree);\r\n    event UpdateGlobalRoyaltyFreePolicy(bool indexed isGlobalRoyaltyFree);\r\n    event UpdateAuctionInfo(address indexed previousAuctionInfo, address indexed newAuctionInfo);\r\n    event UpdateGloballyWhitelistedUser(address indexed user, bool indexed isWhitelisted);\r\n    event UpdateWhitelistedUserByToken(address indexed user, uint indexed tokenId, bool indexed isWhitelisted);\r\n    event UpdateAllowedSingleRoyaltyFreeTransfer(address indexed from, address indexed to, uint indexed tokenId, bool isAllowed);\r\n\r\n    constructor () {\r\n        rayaltyFee = 5e18; //5%\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(type(IERC721).interfaceId);\r\n        _registerInterface(type(IERC721Metadata).interfaceId);\r\n        _registerInterface(type(IERC721Enumerable).interfaceId);\r\n        _registerInterface(type(IERC2981).interfaceId);\r\n    }\r\n\r\n    modifier onlyTokenAuthor(uint tokenId) {\r\n        require(_tokenMetaDatas[tokenId].author == msg.sender, \"UNICORN: Not the author\");\r\n        _;\r\n    }\r\n\r\n    function balanceOf(address owner) external view virtual override returns (uint) {\r\n        require(owner != address(0), \"UNICORN: balance query for the zero address\");\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    function userTokens(address owner) external view virtual returns (uint[] memory) {\r\n        require(owner != address(0), \"UNICORN: balance query for the zero address\");\r\n        uint[] memory result = new uint[](_holderTokens[owner].length());\r\n        for (uint i; i < _holderTokens[owner].length(); i++) {\r\n            result[i] = _holderTokens[owner].at(i);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function ownerOf(uint tokenId) public view virtual override returns (address) {\r\n        return _tokenOwners.get(tokenId, \"UNICORN: owner query for nonexistent token\");\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenMetaData(uint tokenId) external view virtual returns (TokenMetaData memory) {\r\n        require(_exists(tokenId), \"UNICORN: nonexistent token\");\r\n        return _tokenMetaDatas[tokenId];\r\n    }\r\n    \r\n    function collectionSize(uint collectionId) external view virtual returns (uint) {\r\n        require(collectionId < _totalCollections, \"UNICORN: nonexistent collection\");\r\n        return _collections[collectionId].tokens.length;\r\n    }\r\n\r\n    function collectionTokens(uint collectionId) external view virtual returns (uint[] memory) {\r\n        require(collectionId < _totalCollections, \"UNICORN: nonexistent collection\");\r\n        return _collections[collectionId].tokens;\r\n    }\r\n\r\n    function collection(uint collectionId) external view virtual returns (Collection memory) {\r\n        require(collectionId < _totalCollections, \"UNICORN: nonexistent collection\");\r\n        return _collections[collectionId];\r\n    }\r\n\r\n    function tokenToCollection(uint tokenId) external view virtual returns (uint) {\r\n        require(_exists(tokenId), \"UNICORN: nonexistent token\");\r\n        return _tokenMetaDatas[tokenId].collection;\r\n    }\r\n\r\n    function tokenURI(uint tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"UNICORN: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenMetaDatas[tokenId].URI;\r\n        string memory base = baseURI();\r\n\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return string(abi.encodePacked(base, tokenId.toString()));\r\n    }\r\n\r\n    function tokenAuthor(uint tokenId) public view virtual returns (address) { \r\n        require(_exists(tokenId), \"UNICORN: Author query for nonexistent token\");\r\n        return _tokenMetaDatas[tokenId].author;\r\n    }\r\n\r\n    function tokenCustodian(uint tokenId) public view virtual returns (address) { \r\n        require(_exists(tokenId), \"UNICORN: Custodian query for nonexistent token\");\r\n        return _tokenMetaDatas[tokenId].custodian;\r\n    }\r\n\r\n    function tokenIdByHash(string memory tokenHash) external view virtual returns (uint) {\r\n        return _tokenIdByHash[tokenHash];\r\n    }\r\n\r\n    function royaltyInfo(uint _tokenId, uint _salePrice) public override view returns (address receiver, uint royaltyAmount) {\r\n        receiver = tokenAuthor(_tokenId);\r\n        royaltyAmount = _salePrice * rayaltyFee / 1e20;\r\n    }\r\n\r\n    function isWhitelistedGlobally(address user) public view virtual returns (bool) {\r\n        return _globallyWhitelisted[user];\r\n    }\r\n\r\n    function isWhitelistedForToken(address user, uint tokenId) public view virtual returns (bool) {\r\n        return _tokenWhitelist[user][tokenId];\r\n    }\r\n\r\n    function isAllowedSingleRoyaltyFreeTransfer(address from, address to, uint tokenId) public view virtual returns (bool) {\r\n        return _allowedSingleRoyaltyFreeTransfer[from][to][tokenId];\r\n    }\r\n\r\n    function isGlobalRoyaltyFree() public view virtual returns (bool) {\r\n        return _isGlobalRoyaltyFree;\r\n    }\r\n\r\n\r\n    function getTokenRoyaltyAmountForAddress(address from, address to, uint tokenId) public view returns (address receiver, uint royaltyAmount) {\r\n        if (_isGlobalRoyaltyFree || \r\n            isWhitelistedGlobally(from) || \r\n            isWhitelistedGlobally(to) || \r\n            isAllowedSingleRoyaltyFreeTransfer(from, to, tokenId) ||\r\n            isWhitelistedForToken(from, tokenId) || \r\n            isWhitelistedForToken(to, tokenId)) \r\n            return (address(0), 0);\r\n        return getTokenGeneralRoyaltyAmount(tokenId);\r\n    }\r\n\r\n    function getTokenGeneralRoyaltyAmount(uint tokenId) public view returns (address receiver, uint royaltyAmount) {\r\n        if (_tokenMetaDatas[tokenId].isRoyaltyFree) return (address(0), 0);\r\n        if (address(auctionInfo) == address(0)) return (address(0), 0);\r\n        uint lastSalePrice = auctionInfo.getLastSalePrice(tokenId);\r\n        return royaltyInfo(tokenId, lastSalePrice);\r\n    }\r\n    \r\n\r\n    \r\n\r\n    function baseURI() public view virtual returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint index) external view virtual override returns (uint) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint) {\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    function totalCollections() public view virtual returns (uint) {\r\n        return _totalCollections;\r\n    }\r\n\r\n    function tokenByIndex(uint index) external view virtual override returns (uint) {\r\n        (uint tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    function approve(address to, uint tokenId) external virtual override whenNotPaused {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"UNICORN: approval to current owner\");\r\n\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"UNICORN: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"UNICORN: approved query for nonexistent token\");\r\n        return _tokenMetaDatas[tokenId].approval;\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) external virtual override whenNotPaused {\r\n        require(operator != msg.sender, \"UNICORN: approve to caller\");\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokenId) external payable virtual override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"UNICORN: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function multiTransferFrom(address[] memory from, address[] memory to, uint[] memory tokenId) external payable virtual{\r\n        require(from.length == to.length, \"UNICORN: arrays have different lengths\");\r\n        require(from.length == tokenId.length, \"UNICORN: arrays have different lengths\");\r\n        for (uint i; i < to.length; i++) { \r\n            require(_isApprovedOrOwner(msg.sender, tokenId[i]), \"UNICORN: transfer caller is not owner nor approved\");\r\n            _transfer(from[i], to[i], tokenId[i]);\r\n        }\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint tokenId) external payable virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint tokenId, bytes memory _data) public payable virtual override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"UNICORN: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function multiSafeTransferFrom(address[] memory from, address[] memory to, uint[] memory tokenId, bytes[] memory _data) external virtual {\r\n        require(from.length == to.length, \"UNICORN: arrays have different lengths\");\r\n        require(from.length == tokenId.length, \"UNICORN: arrays have different lengths\");\r\n        require(from.length == _data.length, \"UNICORN: arrays have different lengths\");\r\n        \r\n        for (uint i; i < to.length; i++) { \r\n            require(_isApprovedOrOwner(msg.sender, tokenId[i]), \"UNICORN: transfer caller is not owner nor approved\");\r\n            _safeTransfer(from[i], to[i], tokenId[i], _data[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function _safeTransfer(address from, address to, uint tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"UNICORN: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _exists(uint tokenId) internal view virtual returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"UNICORN: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _transfer(address from, address to, uint tokenId) internal virtual whenNotPaused {\r\n        require(ownerOf(tokenId) == from, \"UNICORN: transfer of token that is not own\"); // internal owner\r\n        require(to != address(0), \"UNICORN: transfer to the zero address\");\r\n\r\n        (address author, uint royaltyAmount) = getTokenRoyaltyAmountForAddress(from, to, tokenId);\r\n        if (royaltyAmount > 0 && author != address(0) && auctionInfo.purchaseToken() != address(0)) {\r\n            IERC20 purchaseToken = IERC20(auctionInfo.purchaseToken());\r\n            require(purchaseToken.allowance(msg.sender, address(this)) >= royaltyAmount, \"UNICORN: royalty amount exceeds purchase tokens allowance\");\r\n            require(purchaseToken.balanceOf(msg.sender) >= royaltyAmount, \"UNICORN: not enough purchase tokens to pay royalty amount\");\r\n\r\n            purchaseToken.safeTransferFrom(msg.sender, author, royaltyAmount);\r\n\r\n            if (_allowedSingleRoyaltyFreeTransfer[from][to][tokenId]) {\r\n                _allowedSingleRoyaltyFreeTransfer[from][to][tokenId] = false;\r\n                emit UpdateAllowedSingleRoyaltyFreeTransfer(from, to, tokenId, false);\r\n            } \r\n        }\r\n\r\n        _approve(address(0), tokenId);\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(address from, address to, uint tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"UNICORN: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _approve(address to, uint tokenId) private {\r\n        _tokenMetaDatas[tokenId].approval = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId); // internal owner\r\n    }\r\n\r\n\r\n\r\n\r\n    //Owner functions\r\n    function createCollection(uint maxCollectionSize, bool isDigitalObject, string memory collectionName) external virtual onlyOwner returns (uint collectionId) {\r\n        //maxCollectionSize and collectionName can have a zero value, no need for non-zero check\r\n        collectionId = _totalCollections++;\r\n        _collections[collectionId].name = collectionName;\r\n        _collections[collectionId].maxCollectionSize = maxCollectionSize;\r\n        _collections[collectionId].isDigitalObject = isDigitalObject;\r\n        emit CreateCollection(maxCollectionSize, isDigitalObject, collectionName);\r\n    }\r\n\r\n    function updateGloballyWhitelistedUser(address user, bool isWhitelisted) external virtual onlyOwner {\r\n        require(user != address(0), \"UNICORN: Zero address\");\r\n        _globallyWhitelisted[user] = isWhitelisted;\r\n        emit UpdateGloballyWhitelistedUser(user, isWhitelisted);\r\n    }\r\n\r\n    function updateWhitelistedUserByToken(address user, uint tokenId, bool isWhitelisted) external virtual onlyOwner {\r\n        require(user != address(0), \"UNICORN: Zero address\");\r\n        _tokenWhitelist[user][tokenId] = isWhitelisted;\r\n        emit UpdateWhitelistedUserByToken(user, tokenId, isWhitelisted);\r\n    }\r\n\r\n    function updateAllowedSingleRoyaltyFreeTransfer(address from, address to, uint tokenId, bool isAllowed) external virtual onlyOwner { \r\n        require(from != address(0) && to != address(0), \"UNICORN: Zero address\");\r\n        _allowedSingleRoyaltyFreeTransfer[from][to][tokenId] = isAllowed;\r\n        emit UpdateAllowedSingleRoyaltyFreeTransfer(from, to, tokenId, isAllowed);\r\n    }\r\n\r\n    function updateAuctionInfo(address newAuctionInfo) external virtual onlyOwner {\r\n        //auctionInfo can be a zero address, check for zero address is not needed\r\n        emit UpdateAuctionInfo(address(auctionInfo), newAuctionInfo);\r\n        auctionInfo = IAuctionInfo(newAuctionInfo);\r\n    }\r\n\r\n    function updateGlobalRoyaltyFreePolicy(bool isGlobalRoyaltyFree) external virtual onlyOwner { \r\n        _isGlobalRoyaltyFree = isGlobalRoyaltyFree;\r\n        emit UpdateGlobalRoyaltyFreePolicy(isGlobalRoyaltyFree);\r\n    }\r\n\r\n    function updateCollectionName(uint collectionId, string memory collectionName) external virtual onlyOwner {\r\n        require(bytes(collectionName).length > 0, \"UNICORN: can't rename to an empty string\");\r\n        _collections[collectionId].name = collectionName;\r\n        emit UpdateCollectionName(collectionId, collectionName);\r\n    }\r\n    \r\n    function mint(uint collectionId, address to) external virtual onlyOwner returns (uint tokenId) {\r\n        tokenId = _mint(collectionId, to);\r\n    }\r\n\r\n    function mintWithTokenURI(uint collectionId, address to, string memory tokenUri, address custodian) external virtual onlyOwner returns (uint tokenId) {\r\n        tokenId = _mint(collectionId, to);\r\n        _setTokenURI(tokenId, tokenUri, true);\r\n        _setTokenCustodian(tokenId, custodian, true);\r\n    }\r\n\r\n    function mintWithTokenURIAndAuthor(uint collectionId, address to, string memory tokenUri, address author, address custodian) external virtual onlyOwner returns (uint tokenId) {\r\n        tokenId = _mint(collectionId, to);\r\n        _setTokenURI(tokenId, tokenUri, true);\r\n        _setTokenCustodian(tokenId, custodian, true);\r\n        _updateTokenAuthor(tokenId, address(0), author);\r\n    }\r\n\r\n    function safeMintWithTokenURI(uint collectionId, address to, string memory tokenUri, address custodian,  bytes memory _data) external virtual returns (uint tokenId) {\r\n        tokenId = safeMint(collectionId, to, _data);\r\n        _setTokenURI(tokenId, tokenUri, true);\r\n        _setTokenCustodian(tokenId, custodian, true);\r\n    }\r\n\r\n    function safeMintWithTokenURIAndAuthor(uint collectionId, address to, string memory tokenUri, address author, address custodian, bytes memory _data) external virtual returns (uint tokenId) {\r\n        tokenId = safeMint(collectionId, to, _data);\r\n        _setTokenURI(tokenId, tokenUri, true);\r\n        _setTokenCustodian(tokenId, custodian, true);\r\n        _updateTokenAuthor(tokenId, address(0), author);\r\n    }\r\n    \r\n    function safeMint(uint collectionId, address to, bytes memory _data) public virtual onlyOwner returns (uint tokenId) {\r\n        tokenId = _mint(collectionId, to);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"UNICORN: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function multiSafeMintWithTokenURI(uint[] memory collectionIds, address[] memory to, string[] memory tokenURIs, address[] memory custodians, bytes[] memory _data) external virtual returns (uint lastTokenId) {\r\n        require(to.length == tokenURIs.length && to.length == _data.length && to.length == collectionIds.length, \"UNICORN: arrays have different lengths\");\r\n        uint tokenId;\r\n        for (uint i; i < to.length; i++) {\r\n            tokenId = safeMint(collectionIds[i], to[i], _data[i]);\r\n            _setTokenURI(tokenId, tokenURIs[i], true);\r\n            _setTokenCustodian(tokenId, custodians[i], true);\r\n        }\r\n        return tokenId;\r\n    }\r\n\r\n    function multiSafeMintWithTokenURIAndAuthors(uint[] memory collectionIds, address[] memory to, string[] memory tokenURIs, address[] memory tokenAuthors, address[] memory custodians, bytes[] memory _data) external virtual returns (uint lastTokenId) {\r\n        require(to.length == tokenURIs.length && to.length == _data.length && to.length == tokenAuthors.length && to.length == collectionIds.length, \"UNICORN: arrays have different lengths\");\r\n        uint tokenId;\r\n        for (uint i; i < to.length; i++) {\r\n            tokenId = safeMint(collectionIds[i], to[i], _data[i]);\r\n            _setTokenURI(tokenId, tokenURIs[i], true);\r\n            _setTokenCustodian(tokenId, custodians[i], true);\r\n            if (tokenAuthors[i] != address(0)) _updateTokenAuthor(tokenId, address(0), tokenAuthors[i]);\r\n        }\r\n        return tokenId;\r\n    }\r\n\r\n    function multiMintWithTokenURIs(uint[] memory collectionIds, address[] memory to, string[] memory tokenURIs, address[] memory custodians) external virtual onlyOwner returns (uint lastTokenId) {\r\n        require(to.length == tokenURIs.length && to.length == collectionIds.length, \"UNICORN: arrays have different lengths\");\r\n        uint tokenId;\r\n        for (uint i; i < to.length; i++) {\r\n            tokenId = _mint(collectionIds[i], to[i]);\r\n            _setTokenURI(tokenId, tokenURIs[i], true);\r\n            _setTokenCustodian(tokenId, custodians[i], true);\r\n        }\r\n        return tokenId;\r\n    }\r\n\r\n    function multiMintWithTokenURIsAndAuthors(uint[] memory collectionIds, address[] memory to, string[] memory tokenURIs, address[] memory tokenAuthors, address[] memory custodians) external virtual onlyOwner returns (uint lastTokenId) {\r\n        require(to.length == tokenURIs.length && to.length == collectionIds.length, \"UNICORN: arrays have different lengths\");\r\n        uint tokenId;\r\n        for (uint i; i < to.length; i++) {\r\n            tokenId = _mint(collectionIds[i], to[i]);\r\n            _setTokenURI(tokenId, tokenURIs[i], true);\r\n            _setTokenCustodian(tokenId, custodians[i], true);\r\n            if (tokenAuthors[i] != address(0)) _updateTokenAuthor(tokenId, address(0), tokenAuthors[i]);\r\n        }\r\n        return tokenId;\r\n    }\r\n\r\n    function setTokenURI(uint tokenId, string memory tokenUri) external virtual onlyOwner {\r\n        _setTokenURI(tokenId, tokenUri, false);\r\n    }\r\n\r\n    function setSystemRoyaltyFee(uint newFee) external virtual onlyOwner {\r\n        //can hold zero value, so non zero check is not required\r\n        emit SetSystemRoyaltyFee(rayaltyFee, newFee);\r\n        rayaltyFee = newFee;\r\n    }\r\n\r\n\r\n    function setTokenAuthor(uint tokenId, address author) external virtual onlyOwner {\r\n        require(_exists(tokenId), \"UNICORN: author set of nonexistent token\");\r\n        require(_tokenMetaDatas[tokenId].author == address(0), \"UNICORN: Author already set\");\r\n        _updateTokenAuthor(tokenId, address(0), author);\r\n    }\r\n\r\n    function updateTokenAuthor(uint tokenId, address newAuthor) external virtual onlyTokenAuthor(tokenId) {\r\n        require(_exists(tokenId), \"UNICORN: author set of nonexistent token\");\r\n        _updateTokenAuthor(tokenId, msg.sender, newAuthor);\r\n    }\r\n\r\n    function updateTokenRoyaltyPolicy(uint tokenId, bool isRoyaltyFree) external virtual onlyTokenAuthor(tokenId) {\r\n        require(_exists(tokenId), \"UNICORN: author set of nonexistent token\");\r\n        _tokenMetaDatas[tokenId].isRoyaltyFree = isRoyaltyFree;\r\n        emit UpdateTokenRoyaltyPolicy(tokenId, isRoyaltyFree);\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI_) external virtual onlyOwner {\r\n        _baseURI = baseURI_;\r\n        emit SetBaseURI(baseURI_);\r\n    }\r\n\r\n    function _mint(uint collectionId, address to) internal virtual returns (uint tokenId) {\r\n        require(to != address(0), \"UNICORN: mint to the zero address\");\r\n        require(collectionId < _totalCollections, \"UNICORN: mint to nonexistent collection\");\r\n        uint maxCollectionSize = _collections[collectionId].maxCollectionSize;\r\n        if (maxCollectionSize > 0) {\r\n            require(_collections[collectionId].tokens.length <= maxCollectionSize, \"UNICORN: collection is full\");\r\n        }\r\n\r\n        tokenId = totalSupply() + 1;\r\n        _holderTokens[to].add(tokenId);\r\n        _tokenOwners.set(tokenId, to);\r\n        _collections[collectionId].tokens.push(tokenId);\r\n        _tokenMetaDatas[tokenId].collection = collectionId;\r\n        emit AddTokenToCollection(tokenId, collectionId);\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _setTokenURI(uint tokenId, string memory tokenUri, bool newToken) internal virtual {\r\n        if (!newToken) {\r\n            require(_exists(tokenId), \"UNICORN: URI set of nonexistent token\");\r\n            string memory previousUri = _tokenMetaDatas[tokenId].URI;\r\n            if (bytes(previousUri).length > 0) _tokenIdByHash[previousUri] = 0;\r\n        }\r\n        if (bytes(tokenUri).length > 0) { \r\n            _tokenMetaDatas[tokenId].URI = tokenUri;\r\n            _tokenIdByHash[tokenUri] = tokenId;\r\n            emit SetTokenURI(tokenId, tokenUri);\r\n        }\r\n    }\r\n\r\n    function _setTokenCustodian(uint tokenId, address custodian, bool newToken) internal virtual {\r\n        require(custodian != address(0), \"UNICORN: custodian is zero address\");\r\n        if (!newToken) require(_exists(tokenId), \"UNICORN: Custodian set of nonexistent token\");\r\n        _tokenMetaDatas[tokenId].custodian = custodian;\r\n        emit SetTokenCustodian(tokenId, custodian);\r\n    }\r\n\r\n    function _updateTokenAuthor(uint tokenId, address previousAuthir, address newAuthor) internal virtual {\r\n        _tokenMetaDatas[tokenId].author = newAuthor;\r\n        emit UpdateTokenAuthor(tokenId, previousAuthir, newAuthor);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"AddTokenToCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxCollectionSize\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isDigitalObject\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"}],\"name\":\"CreateCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldRoyalty\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"SetSystemRoyaltyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"}],\"name\":\"SetTokenCustodian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"SetTokenURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"UpdateAllowedSingleRoyaltyFreeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAuctionInfo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAuctionInfo\",\"type\":\"address\"}],\"name\":\"UpdateAuctionInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"}],\"name\":\"UpdateCollectionName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isGlobalRoyaltyFree\",\"type\":\"bool\"}],\"name\":\"UpdateGlobalRoyaltyFreePolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"UpdateGloballyWhitelistedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAuthor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"UpdateTokenAuthor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isRoyaltyFree\",\"type\":\"bool\"}],\"name\":\"UpdateTokenRoyaltyPolicy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"UpdateWhitelistedUserByToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionInfo\",\"outputs\":[{\"internalType\":\"contract IAuctionInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"collection\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxCollectionSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDigitalObject\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"internalType\":\"struct UNICORN.Collection\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"collectionTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxCollectionSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDigitalObject\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"}],\"name\":\"createCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenGeneralRoyaltyAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenRoyaltyAmountForAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isAllowedSingleRoyaltyFreeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGlobalRoyaltyFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isWhitelistedForToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelistedGlobally\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"}],\"name\":\"mintWithTokenURIAndAuthor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"custodians\",\"type\":\"address[]\"}],\"name\":\"multiMintWithTokenURIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAuthors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"custodians\",\"type\":\"address[]\"}],\"name\":\"multiMintWithTokenURIsAndAuthors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"custodians\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"multiSafeMintWithTokenURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAuthors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"custodians\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"multiSafeMintWithTokenURIAndAuthors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"multiSafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"multiTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rayaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMintWithTokenURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMintWithTokenURIAndAuthor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setSystemRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"setTokenAuthor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenAuthor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenCustodian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenHash\",\"type\":\"string\"}],\"name\":\"tokenIdByHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetaData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"approval\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collection\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRoyaltyFree\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"}],\"internalType\":\"struct UNICORN.TokenMetaData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenToCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedSingleRoyaltyFreeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuctionInfo\",\"type\":\"address\"}],\"name\":\"updateAuctionInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"}],\"name\":\"updateCollectionName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isGlobalRoyaltyFree\",\"type\":\"bool\"}],\"name\":\"updateGlobalRoyaltyFreePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"updateGloballyWhitelistedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAuthor\",\"type\":\"address\"}],\"name\":\"updateTokenAuthor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRoyaltyFree\",\"type\":\"bool\"}],\"name\":\"updateTokenRoyaltyPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"updateWhitelistedUserByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"userTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UNICORN", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6255eb4b0e13ab9b04661a9a45eabd45d53179f244fa37c3b2e1d69752cc3a24"}]}