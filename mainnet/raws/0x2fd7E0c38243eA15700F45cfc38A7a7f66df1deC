{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.8.1;\r\n\r\ninterface IMoonCatAcclimator {\r\n    function getApproved(uint256 tokenId) external view returns (address);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\ninterface IMoonCatRescue {\r\n    function rescueOrder(uint256 tokenId) external view returns (bytes5);\r\n    function catOwners(bytes5 catId) external view returns (address);\r\n}\r\n\r\ninterface IReverseResolver {\r\n    function claim(address owner) external returns (bytes32);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC721 {\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface IMoonCatReference {\r\n    function doc (address contractAddress) external view returns (string memory name, string memory description, string memory details);\r\n    function setDoc (address contractAddress, string calldata name, string calldata description) external;\r\n}\r\n\r\n/** Color Names by Full Palette Index **\r\n\r\n  0 - Transparent Background\r\n  1 - White\r\n  2 - Pale Grey\r\n  3 - Light Grey\r\n  4 - Grey\r\n  5 - Dark Grey\r\n  6 - Deep Grey\r\n  7 - Black\r\n  8 - Light Red\r\n  9 - Red\r\n 10 - Dark Red\r\n 11 - Light Orange\r\n 12 - Orange\r\n 13 - Dark Orange\r\n 14 - Light Gold\r\n 15 - Gold\r\n 16 - Dark Gold\r\n 17 - Light Yellow\r\n 18 - Yellow\r\n 19 - Dark Yellow\r\n 20 - Light Chartreuse\r\n 21 - Chartreuse\r\n 22 - Dark Chartreuse\r\n 23 - Light Green\r\n 24 - Green\r\n 25 - Dark Green\r\n 26 - Light Teal\r\n 27 - Teal\r\n 28 - Dark Teal\r\n 29 - Light Cyan\r\n 30 - Cyan\r\n 31 - Dark Cyan\r\n 32 - Light Sky Blue\r\n 33 - Sky Blue\r\n 34 - Dark Sky Blue\r\n 35 - Light Blue\r\n 36 - Blue\r\n 37 - Dark Blue\r\n 38 - Light Indigo\r\n 39 - Indigo\r\n 40 - Dark Indigo\r\n 41 - Light Purple\r\n 42 - Purple\r\n 43 - Dark Purple\r\n 44 - Light Violet\r\n 45 - Violet\r\n 46 - Dark Violet\r\n 47 - Light Pink\r\n 48 - Pink\r\n 49 - Dark Pink\r\n 50 - Deep Red\r\n 51 - Deep Yellow\r\n 52 - Deep Green\r\n 53 - Deep Teal\r\n 54 - Deep Blue\r\n 55 - Deep Purple\r\n 56 - Deep Pink\r\n 57 - Pale Red\r\n 58 - Pale Yellow\r\n 59 - Pale Green\r\n 60 - Pale Teal\r\n 61 - Pale Blue\r\n 62 - Pale Purple\r\n 63 - Pale Pink\r\n 64 - Umber\r\n 65 - Mocha\r\n 66 - Cinnamon\r\n 67 - Brown\r\n 68 - Peanut\r\n 69 - Tortilla\r\n 70 - Beige\r\n 71 - White Glass\r\n 72 - Pale Grey Glass\r\n 73 - Light Grey Glass\r\n 74 - Grey Glass\r\n 75 - Dark Grey Glass\r\n 76 - Deep Grey Glass\r\n 77 - Black Glass\r\n 78 - Vibrant Red Smoked Glass\r\n 79 - Dull Red Smoked Glass\r\n 80 - Vibrant Yellow Smoked Glass\r\n 81 - Dull Yellow Smoked Glass\r\n 82 - Vibrant Green Smoked Glass\r\n 83 - Dull Green Smoked Glass\r\n 84 - Vibrant Teal Smoked Glass\r\n 85 - Dull Teal Smoked Glass\r\n 86 - Vibrant Blue Smoked Glass\r\n 87 - Dull Blue Smoked Glass\r\n 88 - Vibrant Purple Smoked Glass\r\n 89 - Dull Purple Smoked Glass\r\n 90 - Vibrant Pink Smoked Glass\r\n 91 - Dull Pink Smoked Glass\r\n 92 - Vibrant Red Stained Glass\r\n 93 - Dull Red Stained Glass\r\n 94 - Vibrant Yellow Stained Glass\r\n 95 - Dull Yellow Stained Glass\r\n 96 - Vibrant Green Stained Glass\r\n 97 - Dull Green Stained Glass\r\n 98 - Vibrant Teal Stained Glass\r\n 99 - Dull Teal Stained Glass\r\n100 - Vibrant Blue Stained Glass\r\n101 - Dull Blue Stained Glass\r\n102 - Vibrant Purple Stained Glass\r\n103 - Dull Purple Stained Glass\r\n104 - Vibrant Pink Stained Glass\r\n105 - Dull Pink Stained Glass\r\n106 - Red Tinted Glass\r\n107 - Yellow Tinted Glass\r\n108 - Green Tinted Glass\r\n109 - Teal Tinted Glass\r\n110 - Blue Tinted Glass\r\n111 - Purple Tinted Glass\r\n112 - Pink Tinted Glass\r\n113 - MoonCat Glow Color <- accessoryColorsOf indexes start here\r\n114 - MoonCat Border (glows)\r\n115 - MoonCat Pattern\r\n116 - MoonCat Coat\r\n117 - MoonCat Belly/Whiskers\r\n118 - MoonCat Nose/Ears/Feet\r\n119 - MoonCat Eyes\r\n120 - MoonCat Complement 1\r\n121 - MoonCat C1 Smoked Glass\r\n122 - MoonCat C1 Stained Glass\r\n123 - MoonCat C1 Tinted Glass\r\n124 - MoonCat Complement 2\r\n125 - MoonCat C2 Smoked Glass\r\n126 - MoonCat C2 Stained Glass\r\n127 - MoonCat C2 Tinted Glass\r\n\r\n**/\r\n\r\n/**\r\n * @title MoonCatColors\r\n * @notice On Chain MoonCat Palette Generation\r\n * @dev Provides On Chain Reference for the MoonCat and Accessory Colors\r\n */\r\ncontract MoonCatColors {\r\n\r\n    /* External Contracts */\r\n\r\n    IMoonCatRescue MCR = IMoonCatRescue(0x60cd862c9C687A9dE49aecdC3A99b74A4fc54aB6);\r\n    IMoonCatReference MoonCatReference;\r\n\r\n    /* Hue Computation */\r\n\r\n    uint256 constant private ONE = 1e15;\r\n    uint256 constant private SIX = 6e15;\r\n    uint256 constant private HUNDREDTH = 1e13;\r\n\r\n    /**\r\n     * @dev Convert a color from the RGB colorspace to HSL and return the Hue component.\r\n     * Core function that was originally parsed in Javascript, translated to Solidity.\r\n     */\r\n    function RGBToHue (uint256 r, uint256 g, uint256 b) public pure returns (uint256) {\r\n        r = r * ONE / 255;\r\n        g = g * ONE / 255;\r\n        b = b * ONE / 255;\r\n\r\n        uint256 cMax = r;\r\n        uint256 cMin = r;\r\n\r\n        if (g > r || b > r) {\r\n            if (g > b) {\r\n                cMax = g;\r\n            } else {\r\n                cMax = b;\r\n            }\r\n        }\r\n\r\n        if (g < r || b < r) {\r\n            if (g < b) {\r\n                cMin = g;\r\n            } else {\r\n                cMin = b;\r\n            }\r\n        }\r\n\r\n        uint256 delta = cMax - cMin;\r\n\r\n        uint256 numerator;\r\n        uint256 offset = 0;\r\n        bool neg = false;\r\n\r\n        if (delta == 0) {\r\n            return 0;\r\n        } else if (cMax == r) {\r\n            if (g >= b) {\r\n                numerator = g - b;\r\n            } else {\r\n                numerator = b - g;\r\n                neg = true;\r\n            }\r\n        } else if (cMax == g) {\r\n            if (b >= r) {\r\n                numerator = b - r;\r\n            } else {\r\n                numerator = r - b;\r\n                neg = true;\r\n            }\r\n            offset = 2 * ONE;\r\n        } else {\r\n            if (r >= g) {\r\n                numerator = r - g;\r\n            } else {\r\n                numerator = g - r;\r\n                neg = true;\r\n            }\r\n            offset = 4 * ONE;\r\n        }\r\n\r\n        uint256 hue = ((numerator * ONE) + (delta / 2)) / delta;\r\n        if (neg) {\r\n            hue = offset + SIX - hue;\r\n        } else {\r\n            hue = hue + offset;\r\n        }\r\n\r\n        while (hue > SIX) {\r\n            hue -= SIX;\r\n        }\r\n\r\n        return hue * 60;\r\n    }\r\n\r\n    /**\r\n     * @dev Approximate Javascript's floating-point division in Solidity, rounding to a specific point in the integer.\r\n     */\r\n    function roundComponent (uint256 c, uint256 m) internal pure returns (uint8) {\r\n        uint256 t = (c + m) * 255;\r\n        uint256 r = (t / ONE);\r\n        uint256 rem = t - r * ONE;\r\n        if (rem >= 499999999999000) {\r\n            return uint8(r + 1);\r\n        } else {\r\n            return uint8(r);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a color from the HSL colorspace to RGB and return the Red, Green, and Blue components.\r\n     * Core function that was originally parsed in Javascript, translated to Solidity.\r\n     */\r\n    function hueToRGB (uint256 hue, uint8 _lightness) public pure returns (uint8, uint8, uint8) {\r\n\r\n        uint256 c;\r\n        uint256 lightness = _lightness * HUNDREDTH;\r\n        if (lightness < (ONE / 2)) {\r\n            c = 2 * lightness;\r\n        } else {\r\n            c = 2 * (ONE - lightness);\r\n        }\r\n        uint256 x;\r\n        uint256 temp = (hue / 60) % (2 * ONE);\r\n\r\n        if (temp > ONE) {\r\n            x = c * (ONE - (temp - ONE)) / ONE;\r\n        } else {\r\n            x = c * (ONE - (ONE - temp)) / ONE;\r\n        }\r\n\r\n        uint256 m = lightness - c / 2;\r\n\r\n        uint256 r;\r\n        uint256 g;\r\n        uint256 b;\r\n\r\n        if (hue < (60 * ONE)) {\r\n            r = c;\r\n            g = x;\r\n            b = 0;\r\n        } else if (hue < (120 * ONE)) {\r\n            r = x;\r\n            g = c;\r\n            b = 0;\r\n        } else if (hue < (180 * ONE)) {\r\n            r = 0;\r\n            g = c;\r\n            b = x;\r\n        } else if (hue < (240 * ONE)) {\r\n            r = 0;\r\n            g = x;\r\n            b = c;\r\n        } else if (hue < (300 * ONE)) {\r\n            r = x;\r\n            g = 0;\r\n            b = c;\r\n        } else {\r\n            r = c;\r\n            g = 0;\r\n            b = x;\r\n        }\r\n        return (roundComponent(r, m), roundComponent(g, m), roundComponent(b, m));\r\n    }\r\n\r\n    /**\r\n     * @dev For a given RGB color, derive a palette of six colors to be used to create the visual appearance of a MoonCat of that color.\r\n     * Core function that was originally parsed in Javascript, translated to Solidity.\r\n     */\r\n    function deriveColors (uint8 red, uint8 green, uint8 blue, bool invert) public pure returns (uint8[24] memory) {\r\n\r\n        uint8[24] memory palette;\r\n\r\n        uint256 hx = RGBToHue(red, green, blue);\r\n        uint256 hy = hx + (320 * ONE);\r\n        if (hy >= (360 * ONE)) {\r\n            hy -= (360 * ONE);\r\n        }\r\n        uint256 hz = 180 * ONE;\r\n        if (invert) {\r\n            hz += hy;\r\n        } else {\r\n            hz += hx;\r\n        }\r\n        if (hz >= (360 * ONE)) {\r\n            hz -= (360 * ONE);\r\n        }\r\n\r\n        palette[0] = red;\r\n        palette[1] = green;\r\n        palette[2] = blue;\r\n\r\n        uint8 r;\r\n        uint8 g;\r\n        uint8 b;\r\n\r\n        (r,g,b) = hueToRGB(hx, 10);\r\n        palette[3] = r;\r\n        palette[4] = g;\r\n        palette[5] = b;\r\n\r\n        if (invert) {\r\n\r\n            (r,g,b) = hueToRGB(hx, 70);\r\n            palette[6] = r;\r\n            palette[7] = g;\r\n            palette[8] = b;\r\n\r\n            (r,g,b) = hueToRGB(hy, 80);\r\n            palette[9]  = r;\r\n            palette[10] = g;\r\n            palette[11] = b;\r\n\r\n            (r,g,b) = hueToRGB(hx, 20);\r\n            palette[12] = r;\r\n            palette[13] = g;\r\n            palette[14] = b;\r\n\r\n            (r,g,b) = hueToRGB(hx, 45);\r\n            palette[15] = r;\r\n            palette[16] = g;\r\n            palette[17] = b;\r\n\r\n        } else {\r\n\r\n            (r,g,b) = hueToRGB(hx, 20);\r\n            palette[6] = r;\r\n            palette[7] = g;\r\n            palette[8] = b;\r\n\r\n            (r,g,b) = hueToRGB(hx, 45);\r\n            palette[9]  = r;\r\n            palette[10] = g;\r\n            palette[11] = b;\r\n\r\n            (r,g,b) = hueToRGB(hx, 70);\r\n            palette[12] = r;\r\n            palette[13] = g;\r\n            palette[14] = b;\r\n\r\n            (r,g,b) = hueToRGB(hy, 80);\r\n            palette[15] = r;\r\n            palette[16] = g;\r\n            palette[17] = b;\r\n\r\n        }\r\n\r\n        (r,g,b) = hueToRGB(hz, 45);\r\n        palette[18] = r;\r\n        palette[19] = g;\r\n        palette[20] = b;\r\n\r\n        (r,g,b) = hueToRGB(hz, 80);\r\n        palette[21] = r;\r\n        palette[22] = g;\r\n        palette[23] = b;\r\n\r\n        return palette;\r\n\r\n    }\r\n\r\n    mapping (bytes5 => uint128) internal MappedColors;\r\n\r\n    /**\r\n     * @dev Add hard-coded color palettes for specific MoonCat hex IDs.\r\n     *\r\n     * Due to the differences between Javascript math and Solidity math, some MoonCat color conversions end up rounded differently\r\n     * in the two languages. For the ones that cannot be calculated dynamically (edge-cases), they get hard-coded into the contract here.\r\n     */\r\n    function mapColors (bytes5[] calldata keys, uint128[] calldata vals) public onlyOwner {\r\n        require(!finalized, \"palettes have been finalized\");\r\n        require(keys.length == vals.length, \"mismatched lengths\");\r\n        for (uint i = 0; i < keys.length; i++) {\r\n            MappedColors[keys[i]] = vals[i];\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev For a given MoonCat hex ID, return the RGB glow color for it.\r\n     */\r\n    function glowOf (bytes5 catId) public pure returns (uint8[3] memory) {\r\n        uint40 c = uint40(catId);\r\n        uint8[3] memory glow;\r\n        glow[0] = uint8(c >> 16);\r\n        glow[1] = uint8(c >> 8);\r\n        glow[2] = uint8(c);\r\n        return glow;\r\n    }\r\n\r\n    /**\r\n     * @dev For a given MoonCat rescue order, return the RGB glow color for it.\r\n     */\r\n    function glowOf (uint256 rescueOrder) public view returns (uint8[3] memory) {\r\n        require(rescueOrder < 25440, \"Invalid Rescue Order\");\r\n        return glowOf(MCR.rescueOrder(rescueOrder));\r\n    }\r\n\r\n\r\n    uint8[24] GenesisBlack = [100,100,100,85,85,85,34,34,34,17,17,17,187,187,187,255,153,153,211,211,211,255,255,255];\r\n    uint8[24] GenesisWhite = [100,100,100,85,85,85,211,211,211,255,255,255,170,170,170,255,153,153,17,17,17,34,34,34];\r\n\r\n    /**\r\n     * @dev For a given MoonCat hex ID, return the 8 colors used to draw its main appearance and color-dependent Accessories.\r\n     */\r\n    function colorsOf (bytes5 catId) public view returns (uint8[24] memory) {\r\n        uint40 c = uint40(catId);\r\n        bool invert = ((c >> 31) & 1) == 1;\r\n        if (c >= 1095216663719) {\r\n            bool even_k = uint8(c >> 24) % 2 == 0;\r\n            if ((even_k && invert) || (!even_k && !invert)) {\r\n                return GenesisWhite;\r\n            } else {\r\n                return GenesisBlack;\r\n            }\r\n        }\r\n\r\n        uint8 r = uint8(c >> 16);\r\n        uint8 g = uint8(c >> 8);\r\n        uint8 b = uint8(c);\r\n\r\n        uint8[24] memory colors = deriveColors(r, g, b, invert);\r\n\r\n        uint128 mapped = MappedColors[catId];\r\n        if (mapped != 0) {\r\n            for (uint i = 1; i < 16; i++) {\r\n                colors[18 - i] = uint8(mapped >> (i * 8));\r\n            }\r\n        }\r\n        return colors;\r\n    }\r\n\r\n    /**\r\n     * @dev For a given MoonCat rescue order, return the 8 colors used to draw its main appearance and derive color-dependent Accessories.\r\n     */\r\n    function colorsOf (uint256 rescueOrder) public view returns (uint8[24] memory) {\r\n        require(rescueOrder < 25440, \"Invalid Rescue Order\");\r\n        return colorsOf(MCR.rescueOrder(rescueOrder));\r\n    }\r\n\r\n    /**\r\n     * @dev For a given MoonCat hex ID, return the 15 colors used to draw its color-dependent Accessories.\r\n     */\r\n    function accessoryColorsOf(bytes5 catId) public view returns (uint8[45] memory) {\r\n        uint8[45] memory accessoryColors;\r\n        uint8[24] memory mcColors = colorsOf(catId);\r\n\r\n        for (uint i = 0; i < 18; i++) {\r\n            accessoryColors[i] = mcColors[i];\r\n        }\r\n        accessoryColors[18] = mcColors[3];\r\n        accessoryColors[19] = mcColors[4];\r\n        accessoryColors[20] = mcColors[5];\r\n\r\n        for (uint i = 0; i < 12; i+=3) {\r\n            accessoryColors[21 + i] = mcColors[18];\r\n            accessoryColors[22 + i] = mcColors[19];\r\n            accessoryColors[23 + i] = mcColors[20];\r\n\r\n            accessoryColors[33 + i] = mcColors[21];\r\n            accessoryColors[34 + i] = mcColors[22];\r\n            accessoryColors[35 + i] = mcColors[23];\r\n        }\r\n\r\n        return accessoryColors;\r\n    }\r\n\r\n    /**\r\n     * @dev For a given MoonCat rescue order, return the 15 colors used to draw its color-dependent Accessories.\r\n     */\r\n    function accessoryColorsOf(uint256 rescueOrder) public view returns (uint8[45] memory) {\r\n        require(rescueOrder < 25440, \"Invalid Rescue Order\");\r\n        return accessoryColorsOf(MCR.rescueOrder(rescueOrder));\r\n    }\r\n\r\n    /**\r\n     * @dev For a given index in the Accessory palette, return its alpha (translucency) value.\r\n     */\r\n    function colorAlpha (uint8 id) public pure returns (uint8) {\r\n        if (id == 0) {\r\n            return 0;\r\n        } else if (id <= 70) {\r\n            return 255;\r\n        } else if (id <= 91) {\r\n            return 200;\r\n        } else if (id <= 105) {\r\n            return 128;\r\n        } else if (id <= 112) {\r\n            return 200;\r\n        } else if (id == 121 || id == 125) {\r\n            return 127;\r\n        } else if (id == 122 || id == 126) {\r\n            return 102;\r\n        } else if (id == 123 || id == 127) {\r\n            return 76;\r\n        }\r\n        return 255;\r\n    }\r\n\r\n    /**\r\n     * @dev RGB color values for the 113 colors in the Accessories palette.\r\n     */\r\n    uint8[339] public BasePalette = [255,255,255,255,255,255,212,212,212,170,170,170,128,128,128,85,85,85,42,42,42,0,0,0,\r\n                                     249,134,134,242,13,13,161,8,8,249,178,134,242,101,13,161,67,8,249,220,134,242,185,13,\r\n                                     161,123,8,249,249,134,242,242,13,161,161,8,210,249,134,166,242,13,110,161,8,134,249,\r\n                                     134,13,242,13,8,161,8,134,249,205,13,242,154,8,161,103,134,249,249,13,242,242,8,161,\r\n                                     161,134,205,249,13,154,242,8,103,161,134,134,249,13,13,242,8,8,161,182,134,249,108,\r\n                                     13,242,72,8,161,210,134,249,166,13,242,110,8,161,235,134,249,215,13,242,144,8,161,\r\n                                     249,134,210,242,13,166,161,8,110,65,22,22,65,54,22,43,65,22,22,65,48,22,33,65,43,22,\r\n                                     65,65,22,54,236,198,198,236,221,198,202,236,198,198,236,236,198,217,236,217,198,236,\r\n                                     236,198,226,56,43,31,72,47,25,101,62,29,130,79,35,153,96,46,184,132,86,218,192,169,\r\n                                     255,255,255,212,212,212,170,170,170,128,128,128,85,85,85,42,42,42,0,0,0,242,13,13,\r\n                                     108,19,19,242,185,13,108,86,19,128,242,13,64,108,19,13,242,154,19,108,74,13,70,242,\r\n                                     19,41,108,127,13,242,64,19,108,242,13,185,108,19,86,242,13,13,108,19,19,242,185,13,\r\n                                     108,86,19,128,242,13,64,108,19,13,242,154,19,108,74,13,70,242,19,41,108,127,13,242,\r\n                                     64,19,108,242,13,185,108,19,86,247,171,171,247,228,171,180,247,171,171,247,247,171,\r\n                                     209,247,209,171,247,247,171,228];\r\n\r\n    /**\r\n     * @dev For a given MoonCat hex ID, return the 113 Accessory color palette, and the 15 colors specific to the MoonCat wearing the accessory, concatenated together.\r\n     */\r\n    function paletteOf(bytes5 catId) public view returns (uint8[384] memory) {\r\n        uint8[384] memory palette;\r\n        for (uint i = 0; i < 339; i++) {\r\n            palette[i] = BasePalette[i];\r\n        }\r\n        uint8[45] memory accessoryColors = accessoryColorsOf(catId);\r\n        for (uint i = 339; i < 384; i++) {\r\n            palette[i] = accessoryColors[i - 339];\r\n        }\r\n        return palette;\r\n    }\r\n\r\n    /**\r\n     * @dev For a given MoonCat rescue order, return the 113 Accessory color palette, and the 15 colors specific to the MoonCat wearing the accessory, concatenated together.\r\n     */\r\n    function paletteOf(uint256 rescueOrder) public view returns (uint8[384] memory) {\r\n        require(rescueOrder < 25440, \"Invalid Rescue Order\");\r\n        return paletteOf(MCR.rescueOrder(rescueOrder));\r\n    }\r\n\r\n    /**\r\n     * @dev For a given Hue degree value, return a human-friendly color name for that hue.\r\n     */\r\n    function hueName (uint16 hue) public pure returns (string memory) {\r\n        if (hue == 2000) {\r\n            return \"white\";\r\n        } else if (hue == 1000) {\r\n            return \"black\";\r\n        }\r\n\r\n        require(hue < 360, \"Invalid Hue\");\r\n\r\n        if (hue <= 15 || hue > 345) {\r\n            return \"red\";\r\n        } else if (hue <= 45) {\r\n            return \"orange\";\r\n        } else if (hue <= 75) {\r\n            return \"yellow\";\r\n        } else if (hue <= 105) {\r\n            return \"chartreuse\";\r\n        } else if (hue <= 135) {\r\n            return \"green\";\r\n        } else if (hue <= 165) {\r\n            return \"teal\";\r\n        } else if (hue <= 195) {\r\n            return \"cyan\";\r\n        } else if (hue <= 225) {\r\n            return \"skyblue\";\r\n        } else if (hue <= 255) {\r\n            return \"blue\";\r\n        } else if (hue <= 285) {\r\n            return \"purple\";\r\n        } else if (hue <= 315) {\r\n            return \"magenta\";\r\n        } else if (hue <= 345) {\r\n            return \"fuchsia\";\r\n        }\r\n        return \"How'd you get here?!?\";\r\n    }\r\n\r\n    /**\r\n     * @dev For a given MoonCat hex ID, return the Hue degree value for that MoonCat.\r\n     */\r\n    function hueIntOf (bytes5 catId) public view returns (uint16) {\r\n        uint40 c = uint40(catId);\r\n        bool invert = ((c >> 31) & 1) == 1;\r\n        if (c >= 1095216663719) {\r\n            bool even_k = uint8(c >> 24) % 2 == 0;\r\n            if ((even_k && invert) || (!even_k && !invert)) {\r\n                return 2000;\r\n            } else {\r\n                return 1000;\r\n            }\r\n        }\r\n\r\n        uint16 offset = 0;\r\n        uint128 mapped = MappedColors[catId];\r\n        if (mapped != 0 && (mapped & 1 == 1)) {\r\n            offset = 1;\r\n        }\r\n        uint8 r = uint8(c >> 16);\r\n        uint8 g = uint8(c >> 8);\r\n        uint8 b = uint8(c);\r\n\r\n        uint256 hue = RGBToHue(r, g, b) + 2000; // 2000 is a correction factor\r\n\r\n        return uint16(hue / ONE) - offset;\r\n    }\r\n\r\n    /**\r\n     * @dev For a given MoonCat rescue order, return the Hue degree value for that MoonCat.\r\n     */\r\n    function hueIntOf (uint256 rescueOrder) public view returns (uint16) {\r\n        require(rescueOrder < 25440, \"Invalid Rescue Order\");\r\n        return hueIntOf(MCR.rescueOrder(rescueOrder));\r\n    }\r\n\r\n    /* General */\r\n\r\n    /**\r\n     * @dev Get documentation about this contract.\r\n     */\r\n    function doc() public view returns (string memory name, string memory description, string memory details) {\r\n        return MoonCatReference.doc(address(this));\r\n    }\r\n\r\n    constructor (address MoonCatReferenceAddress) {\r\n        owner = payable(msg.sender);\r\n        // https://docs.ens.domains/contract-api-reference/reverseregistrar#claim-address\r\n        IReverseResolver(0x084b1c3C81545d370f3634392De611CaaBFf8148).claim(msg.sender);\r\n        MoonCatReference = IMoonCatReference(MoonCatReferenceAddress);\r\n        //MoonCatReference.setDoc(address(this), \"MoonCatColors\", \"Definitive colors for MoonCats, including palettes for MoonCatAccessories.\\n`colorsOf` fetches the 7 colors that form the MoonCats palette: 5 original, 2 complements.\\n\");\r\n\r\n    }\r\n\r\n    address payable public owner;\r\n\r\n    modifier onlyOwner () {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        _;\r\n    }\r\n\r\n    bool public finalized = false;\r\n\r\n    function finalize () public onlyOwner {\r\n        finalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow current `owner` to transfer ownership to another address.\r\n     */\r\n    function transferOwnership (address payable newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the location of the Reference Contract.\r\n     */\r\n    function setReferenceContract (address referenceContract) public onlyOwner {\r\n        MoonCatReference = IMoonCatReference(referenceContract);\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue ERC20 assets sent directly to this contract.\r\n     */\r\n    function withdrawForeignERC20 (address tokenContract) public onlyOwner {\r\n        IERC20 token = IERC20(tokenContract);\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue ERC721 assets sent directly to this contract.\r\n     */\r\n    function withdrawForeignERC721 (address tokenContract, uint256 tokenId) public onlyOwner {\r\n        IERC721(tokenContract).safeTransferFrom(address(this), owner, tokenId);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MoonCatReferenceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BasePalette\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"g\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"RGBToHue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rescueOrder\",\"type\":\"uint256\"}],\"name\":\"accessoryColorsOf\",\"outputs\":[{\"internalType\":\"uint8[45]\",\"name\":\"\",\"type\":\"uint8[45]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes5\",\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"accessoryColorsOf\",\"outputs\":[{\"internalType\":\"uint8[45]\",\"name\":\"\",\"type\":\"uint8[45]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"colorAlpha\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rescueOrder\",\"type\":\"uint256\"}],\"name\":\"colorsOf\",\"outputs\":[{\"internalType\":\"uint8[24]\",\"name\":\"\",\"type\":\"uint8[24]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes5\",\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"colorsOf\",\"outputs\":[{\"internalType\":\"uint8[24]\",\"name\":\"\",\"type\":\"uint8[24]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"red\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"green\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"blue\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"invert\",\"type\":\"bool\"}],\"name\":\"deriveColors\",\"outputs\":[{\"internalType\":\"uint8[24]\",\"name\":\"\",\"type\":\"uint8[24]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doc\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes5\",\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"glowOf\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"\",\"type\":\"uint8[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rescueOrder\",\"type\":\"uint256\"}],\"name\":\"glowOf\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"\",\"type\":\"uint8[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rescueOrder\",\"type\":\"uint256\"}],\"name\":\"hueIntOf\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes5\",\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"hueIntOf\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"hue\",\"type\":\"uint16\"}],\"name\":\"hueName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_lightness\",\"type\":\"uint8\"}],\"name\":\"hueToRGB\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes5[]\",\"name\":\"keys\",\"type\":\"bytes5[]\"},{\"internalType\":\"uint128[]\",\"name\":\"vals\",\"type\":\"uint128[]\"}],\"name\":\"mapColors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rescueOrder\",\"type\":\"uint256\"}],\"name\":\"paletteOf\",\"outputs\":[{\"internalType\":\"uint8[384]\",\"name\":\"\",\"type\":\"uint8[384]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes5\",\"name\":\"catId\",\"type\":\"bytes5\"}],\"name\":\"paletteOf\",\"outputs\":[{\"internalType\":\"uint8[384]\",\"name\":\"\",\"type\":\"uint8[384]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referenceContract\",\"type\":\"address\"}],\"name\":\"setReferenceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawForeignERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MoonCatColors", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000b78c64bce6d6d4447e58b09e53f3621f44a2a48", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8884a710807f46c573d17064e3c11de2b18891577916191817d0a6f2aa4c8a0e"}]}