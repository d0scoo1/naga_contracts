{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.4.25;\r\n\r\n /*\r\n *check ethgasstation.info\r\n *to set good gas price and gas limit\r\n *we recommend to set your gas limit to 150000\r\n *and your gas price to 15 gwei\r\n *visit Ethkassa.io for more details\r\n */ \r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract EthKassa{\r\n\r\n   using SafeMath for uint;\r\n    mapping (address => uint) public balances;\r\n    mapping (address => uint) public time;\r\n    \r\n    uint steep1 = 5000;\r\n    uint steep2 = 10000;\r\n    uint steep3 = 15000;\r\n    uint steep4 = 20000;\r\n    uint steep5 = 25000;\r\n    \r\n    uint dividendsTime = 1 days;\r\n    \r\n    event NewInvestor(address indexed investor, uint deposit);\r\n    event PayOffDividends(address indexed investor, uint value);\r\n    event NewDeposit(address indexed investor, uint value);\r\n    \r\n    uint public allDeposits;\r\n    uint public allPercents;\r\n    uint public allBeneficiaries;\r\n    uint public lastPayment;\r\n    \r\n    modifier isIssetRecepient(){\r\n        require(balances[msg.sender] > 0,  \"Please send something\");\r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier timeCheck(){\r\n        \r\n         require(now >= time[msg.sender].add(dividendsTime), \"Too fast, bro, please wait a little\");\r\n         _;\r\n        \r\n    }\r\n    function getDepositMultiplier()public view  returns(uint){\r\n        uint percent = getPercent();\r\n        uint rate = balances[msg.sender].mul(percent).div(10000);\r\n        uint depositMultiplier = now.sub(time[msg.sender]).div(dividendsTime);\r\n        return(rate.mul(depositMultiplier));\r\n        \r\n    }\r\n    \r\n    function receivePayment()isIssetRecepient timeCheck private {\r\n        \r\n        uint depositMultiplier = getDepositMultiplier();\r\n        time[msg.sender] = now;\r\n        msg.sender.transfer(depositMultiplier);\r\n        \r\n        allPercents+=depositMultiplier;\r\n        lastPayment =now;\r\n        emit PayOffDividends(msg.sender, depositMultiplier);\r\n        \r\n        \r\n    }\r\n    \r\n    function authorizationPayment()public view returns(bool){\r\n        \r\n        if (balances[msg.sender] > 0 && now >= (time[msg.sender].add(dividendsTime))){\r\n            return (true);\r\n        }else{\r\n            return(false);\r\n        }\r\n        \r\n    }\r\n   \r\n     \r\n    function getPercent() public view returns(uint){\r\n        \r\n        uint contractBalance = address(this).balance;\r\n        \r\n        uint balanceSteep1 = steep1.mul(1 ether);\r\n        uint balanceSteep2 = steep2.mul(1 ether);\r\n        uint balanceSteep3 = steep3.mul(1 ether);\r\n        uint balanceSteep4 = steep4.mul(1 ether);\r\n        uint balanceSteep5 = steep5.mul(1 ether);\r\n        \r\n        \r\n        if(contractBalance < balanceSteep1){\r\n            return(300);\r\n        }\r\n        if(contractBalance >= balanceSteep1 && contractBalance < balanceSteep2){\r\n            return(350);\r\n        }\r\n        if(contractBalance >= balanceSteep2 && contractBalance < balanceSteep3){\r\n            return(400);\r\n        }\r\n        if(contractBalance >= balanceSteep3 && contractBalance < balanceSteep4){\r\n            return(450);\r\n        }\r\n        if(contractBalance >= balanceSteep4 && contractBalance < balanceSteep5){\r\n            return(500);\r\n        }\r\n        if(contractBalance >= balanceSteep5){\r\n            return(550);\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    function createDeposit() private{\r\n        \r\n        if(msg.value > 0){\r\n            \r\n            if (balances[msg.sender] == 0){\r\n                emit NewInvestor(msg.sender, msg.value);\r\n                allBeneficiaries+=1;\r\n            }\r\n            \r\n            \r\n            if(getDepositMultiplier() > 0 && now >= time[msg.sender].add(dividendsTime) ){\r\n                receivePayment();\r\n            }\r\n            \r\n            balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n            time[msg.sender] = now;\r\n            \r\n            allDeposits+=msg.value;\r\n            emit NewDeposit(msg.sender, msg.value);\r\n            \r\n        }else{\r\n            receivePayment();\r\n        }\r\n        \r\n    }\r\n    //BOF protection\r\n    function() external payable{\r\n        require((balances[msg.sender] + msg.value) >= balances[msg.sender]);\r\n        createDeposit();\r\n       \r\n    }\r\n    \r\n    \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"allPercents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizationPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allBeneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"NewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayOffDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"}]", "ContractName": "EthKassa", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d132d8ef123c4ee536688b84fe5a48ee7880274b1b04fc8e25dcefd193d45a9d"}]}