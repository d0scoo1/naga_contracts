{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n// File: contracts\\Auction.sol\r\n\r\n/**\r\n * @title \u7ade\u62cd\u63a5\u53e3\r\n */\r\ncontract Auction {\r\n    function bid() public payable returns (bool);\r\n    function end() public returns (bool);\r\n\r\n    event AuctionBid(address indexed from, uint256 value);\r\n}\r\n\r\n// File: contracts\\Base.sol\r\n\r\nlibrary Base {\r\n    struct NTVUConfig {\r\n        uint bidStartValue;\r\n        int bidStartTime;\r\n        int bidEndTime;\r\n\r\n        uint tvUseStartTime;\r\n        uint tvUseEndTime;\r\n\r\n        bool isPrivate;\r\n        bool special;\r\n    }\r\n}\r\n\r\n// File: contracts\\ownership\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts\\util\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts\\token\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts\\token\\BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\util\\StringUtils.sol\r\n\r\nlibrary StringUtils {\r\n    function uintToString(uint v) internal pure returns (string str) {\r\n        uint maxlength = 100;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n\r\n        bytes memory s = new bytes(i);\r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - 1 - j];\r\n        }\r\n\r\n        str = string(s);\r\n    }\r\n\r\n    function concat(string _base, string _value) internal pure returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        string memory _tmpValue = new string(_baseBytes.length + _valueBytes.length);\r\n        bytes memory _newValue = bytes(_tmpValue);\r\n\r\n        uint i;\r\n        uint j;\r\n\r\n        for(i=0; i<_baseBytes.length; i++) {\r\n            _newValue[j++] = _baseBytes[i];\r\n        }\r\n\r\n        for(i=0; i<_valueBytes.length; i++) {\r\n            _newValue[j++] = _valueBytes[i];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n\r\n    function bytesToBytes32(bytes memory source) internal pure returns (bytes32 result) {\r\n        require(source.length <= 32);\r\n\r\n        if (source.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    function toBytes96(string memory text) internal pure returns (bytes32, bytes32, bytes32, uint8) {\r\n        bytes memory temp = bytes(text);\r\n        len = uint8(temp.length);\r\n        require(len <= 96);\r\n\r\n        uint8 i=0;\r\n        uint8 j=0;\r\n        uint8 k=0;\r\n\r\n        string memory _b1 = new string(32);\r\n        bytes memory b1 = bytes(_b1);\r\n\r\n        string memory _b2 = new string(32);\r\n        bytes memory b2 = bytes(_b2);\r\n\r\n        string memory _b3 = new string(32);\r\n        bytes memory b3 = bytes(_b3);\r\n\r\n        uint8 len;\r\n\r\n        for(i=0; i<len; i++) {\r\n            k = i / 32;\r\n            j = i % 32;\r\n\r\n            if (k == 0) {\r\n                b1[j] = temp[i];\r\n            } else if(k == 1) {\r\n                b2[j] = temp[i];\r\n            } else if(k == 2) {\r\n                b3[j] = temp[i];\r\n            } \r\n        }\r\n\r\n        return (bytesToBytes32(b1), bytesToBytes32(b2), bytesToBytes32(b3), len);\r\n    }\r\n\r\n    function fromBytes96(bytes32 b1, bytes32 b2, bytes32 b3, uint8 len) internal pure returns (string) {\r\n        require(len <= 96);\r\n        string memory _tmpValue = new string(len);\r\n        bytes memory temp = bytes(_tmpValue);\r\n\r\n        uint8 i;\r\n        uint8 j = 0;\r\n\r\n        for(i=0; i<32; i++) {\r\n            if (j >= len) break;\r\n            temp[j++] = b1[i];\r\n        }\r\n\r\n        for(i=0; i<32; i++) {\r\n            if (j >= len) break;\r\n            temp[j++] = b2[i];\r\n        }\r\n\r\n        for(i=0; i<32; i++) {\r\n            if (j >= len) break;\r\n            temp[j++] = b3[i];\r\n        }\r\n\r\n        return string(temp);\r\n    }\r\n}\r\n\r\n// File: contracts\\NTVUToken.sol\r\n\r\n/**\r\n * \u94fe\u4e0a\u771f\u5fc3\u8bdd\u65f6\u6bb5\u5e01\r\n */\r\ncontract NTVUToken is BasicToken, Ownable, Auction {\r\n    string public name;\r\n    string public symbol = \"FOT\";\r\n\r\n    uint8 public number = 0;\r\n    uint8 public decimals = 0;\r\n    uint public INITIAL_SUPPLY = 1;\r\n\r\n    uint public bidStartValue;\r\n    uint public bidStartTime;\r\n    uint public bidEndTime;\r\n\r\n    uint public tvUseStartTime;\r\n    uint public tvUseEndTime;\r\n\r\n    bool public isPrivate = false;\r\n\r\n    uint public maxBidValue;\r\n    address public maxBidAccount;\r\n\r\n    bool internal auctionEnded = false;\r\n\r\n    string public text; // \u7528\u6237\u914d\u7f6e\u6587\u672c\r\n    string public auditedText; // \u5ba1\u6838\u901a\u8fc7\u7684\u6587\u672c\r\n    string public defaultText; // \u9ed8\u8ba4\u6587\u672c\r\n    uint8 public auditStatus = 0; // 0:\u672a\u5ba1\u6838\uff1b1:\u5ba1\u6838\u901a\u8fc7\uff1b2:\u5ba1\u6838\u4e0d\u901a\u8fc7\r\n\r\n    uint32 public bidCount;\r\n    uint32 public auctorCount;\r\n\r\n    mapping(address => bool) acutors;\r\n\r\n    address public ethSaver; // \u7ade\u62cd\u6240\u5f97ETH\u4fdd\u7ba1\u8005\r\n\r\n    /**\r\n     * \u65f6\u6bb5\u5e01\u5408\u7ea6\u6784\u9020\u51fd\u6570\r\n     *\r\n     * \u62cd\u5356\u671f\u95f4\u5982\u6709\u66f4\u9ad8\u51fa\u4ef7\uff0c\u524d\u4e00\u624b\u51fa\u4ef7\u8005\u7684\u4ee5\u592a\u574a\u81ea\u52a8\u9000\u56de\u5176\u94b1\u5305\r\n     *\r\n     * @param _number \u65f6\u6bb5\u5e01\u7684\u5e8f\u53f7\uff0c\u4ece0\u5f00\u59cb\r\n     * @param _bidStartValue \u8d77\u62cd\u4ef7\uff0c\u5355\u4f4d wei\r\n     * @param _bidStartTime \u8d77\u62cd/\u79c1\u52df\u5f00\u59cb\u65f6\u95f4\uff0c\u5355\u4f4ds\r\n     * @param _bidEndTime \u8d77\u62cd/\u79c1\u52df\u7ed3\u675f\u65f6\u95f4\uff0c\u5355\u4f4ds\r\n     * @param _tvUseStartTime \u65f6\u6bb5\u5e01\u6587\u672c\u5f00\u59cb\u64ad\u653e\u65f6\u95f4\r\n     * @param _tvUseEndTime \u65f6\u6bb5\u5e01\u6587\u672c\u7ed3\u675f\u64ad\u653e\u65f6\u95f4\r\n     * @param _isPrivate \u662f\u5426\u4e3a\u79c1\u52df\r\n     * @param _defaultText \u9ed8\u8ba4\u6587\u672c\r\n     * @param _ethSaver \u7ade\u62cd\u6240\u5f97\u4fdd\u7ba1\u7740\r\n     */\r\n    function NTVUToken(uint8 _number, uint _bidStartValue, uint _bidStartTime, uint _bidEndTime, uint _tvUseStartTime, uint _tvUseEndTime, bool _isPrivate, string _defaultText, address _ethSaver) public {\r\n        number = _number;\r\n\r\n        if (_number + 1 < 10) {\r\n            symbol = StringUtils.concat(symbol, StringUtils.concat(\"0\", StringUtils.uintToString(_number + 1)));\r\n        } else {\r\n            symbol = StringUtils.concat(symbol, StringUtils.uintToString(_number + 1));\r\n        }\r\n\r\n        name = symbol;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n\r\n        bidStartValue = _bidStartValue;\r\n        bidStartTime = _bidStartTime;\r\n        bidEndTime = _bidEndTime;\r\n\r\n        tvUseStartTime = _tvUseStartTime;\r\n        tvUseEndTime = _tvUseEndTime;\r\n\r\n        isPrivate = _isPrivate;\r\n\r\n        defaultText = _defaultText;\r\n\r\n        ethSaver = _ethSaver;\r\n    }\r\n\r\n    /**\r\n     * \u7ade\u62cd\u51fa\u4ef7\r\n     *\r\n     * \u62cd\u5356\u671f\u95f4\u5982\u6709\u66f4\u9ad8\u51fa\u4ef7\uff0c\u524d\u4e00\u624b\u51fa\u4ef7\u8005\u7684\u4ee5\u592a\u574a\u81ea\u52a8\u9000\u56de\u5176\u94b1\u5305\r\n     */\r\n    function bid() public payable returns (bool) {\r\n        require(now >= bidStartTime); // \u7ade\u62cd\u5f00\u59cb\u65f6\u95f4\u5230\u540e\u624d\u80fd\u7ade\u62cd\r\n        require(now < bidEndTime); // \u7ade\u62cd\u622a\u6b62\u65f6\u95f4\u5230\u540e\u4e0d\u80fd\u518d\u7ade\u62cd\r\n        require(msg.value >= bidStartValue); // \u62cd\u5356\u91d1\u989d\u9700\u8981\u5927\u4e8e\u8d77\u62cd\u4ef7\r\n        require(msg.value >= maxBidValue + 0.05 ether); // \u6700\u4f4e0.05ETH\u52a0\u4ef7\r\n        require(!isPrivate || (isPrivate && maxBidAccount == address(0))); // \u7ade\u62cd\u6216\u8005\u79c1\u52df\u7b2c\u4e00\u6b21\u51fa\u4ef7\r\n\r\n        // \u5982\u679c\u4e0a\u6b21\u6709\u4eba\u51fa\u4ef7\uff0c\u5c06\u4e0a\u6b21\u51fa\u4ef7\u7684ETH\u9000\u8fd8\u7ed9\u4ed6\r\n        if (maxBidAccount != address(0)) {\r\n            maxBidAccount.transfer(maxBidValue);\r\n        } \r\n        \r\n        maxBidAccount = msg.sender;\r\n        maxBidValue = msg.value;\r\n        AuctionBid(maxBidAccount, maxBidValue); // \u53d1\u51fa\u6709\u4eba\u51fa\u4ef7\u4e8b\u4ef6\r\n\r\n        // \u7edf\u8ba1\u51fa\u4ef7\u6b21\u6570\r\n        bidCount++;\r\n\r\n        // \u7edf\u8ba1\u51fa\u4ef7\u4eba\u6570\r\n        bool bided = acutors[msg.sender];\r\n        if (!bided) {\r\n            auctorCount++;\r\n            acutors[msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u7ade\u62cd\u7ed3\u675f\r\n     *\r\n     * \u62cd\u5356\u7ed3\u675f\u540e\uff0c\u7cfb\u7edf\u786e\u8ba4\u4ea4\u6613\uff0c\u51fa\u4ef7\u6700\u9ad8\u8005\u83b7\u5f97\u8be5\u65f6\u6bb5Token\u3002\r\n     */\r\n    function end() public returns (bool) {\r\n        require(!auctionEnded); // \u5df2\u7ecf\u7ed3\u675f\u7ade\u62cd\u4e86\u4e0d\u80fd\u518d\u7ed3\u675f\r\n        require((now >= bidEndTime) || (isPrivate && maxBidAccount != address(0))); // \u666e\u901a\u7ade\u62cd\u62cd\u5356\u7ed3\u675f\u540e\u624d\u53ef\u4ee5\u7ed3\u675f\u7ade\u62cd\uff0c\u79c1\u52df\u53ea\u8981\u51fa\u8fc7\u4ef7\u5c31\u53ef\u4ee5\u7ed3\u675f\u7ade\u62cd\r\n   \r\n        // \u5982\u679c\u6709\u4eba\u51fa\u4ef7\uff0c\u5c06\u65f6\u6bb5\u4ee3\u5e01\u8f6c\u7ed9\u51fa\u4ef7\u6700\u9ad8\u7684\u4eba\r\n        if (maxBidAccount != address(0)) {\r\n            address _from = owner;\r\n            address _to = maxBidAccount;\r\n            uint _value = INITIAL_SUPPLY;\r\n\r\n            // \u5c06\u65f6\u6bb5\u5e01\u8f6c\u7ed9\u51fa\u4ef7\u6700\u9ad8\u7684\u4eba\r\n            balances[_from] = balances[_from].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(_from, _to, _value); // \u901a\u77e5\u51fa\u4ef7\u6700\u9ad8\u7684\u4eba\u6536\u5230\u65f6\u6bb5\u5e01\u4e86\r\n\r\n            //\u5c06\u65f6\u6bb5\u5e01\u4e2dETH\u8f6c\u7ed9ethSaver\r\n            ethSaver.transfer(this.balance);\r\n        }\r\n\r\n        auctionEnded = true;\r\n    }\r\n\r\n    /**\r\n     * \u914d\u7f6e\u4e0a\u94fe\u6587\u672c\r\n     *\r\n     * \u8d2d\u5f97\u65f6\u6bb5\u540e\uff08\u5305\u542b\u62cd\u5356\u548c\u79c1\u52df\uff09\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u65f6\u6bb5\u6587\u672c\r\n     * \u6bcf\u65f6\u6bb5\u6587\u5b57\u63a5\u53d7\u4e2d\u658730\u5b57\u4ee5\u5185\uff08\u542b\u6807\u70b9\u548c\u7a7a\u683c\uff09\uff0c\u591a\u51fa\u5b57\u7b26\u4e0d\u663e\u793a\u3002\r\n     * \u5ba1\u6838\u622a\u6b62\u65f6\u95f4\u662f\uff0c\u6bcf\u4e2a\u65f6\u6bb5\u64ad\u51fa\u524d30\u5206\u949f\r\n     */\r\n    function setText(string _text) public {\r\n        require(INITIAL_SUPPLY == balances[msg.sender]); // \u62e5\u6709\u65f6\u6bb5\u5e01\u7684\u4eba\u53ef\u4ee5\u8bbe\u7f6e\u6587\u672c\r\n        require(bytes(_text).length > 0 && bytes(_text).length <= 90); // \u6c49\u5b57\u4f7f\u7528UTF8\u7f16\u7801\uff0c1\u4e2a\u6c49\u5b57\u6700\u591a\u5360\u75283\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6700\u591a\u519990\u4e2a\u5b57\u8282\u7684\u5b57\r\n        require(now < tvUseStartTime - 30 minutes); // \u5f00\u64ad\u524d30\u5206\u949f\u4e0d\u80fd\u518d\u8bbe\u7f6e\u6587\u672c\r\n\r\n        text = _text;\r\n    }\r\n\r\n    function getTextBytes96() public view returns(bytes32, bytes32, bytes32, uint8) {\r\n        return StringUtils.toBytes96(text);\r\n    }\r\n\r\n    /**\r\n     * \u5ba1\u6838\u6587\u672c\r\n     */\r\n    function auditText(uint8 _status, string _text) external onlyOwner {\r\n        require((now >= tvUseStartTime - 30 minutes) && (now < tvUseEndTime)); // \u65f6\u6bb5\u64ad\u51fa\u524d30\u5206\u949f\u4e3a\u5ba1\u6838\u65f6\u95f4\uff0c\u622a\u6b62\u5230\u65f6\u6bb5\u64ad\u51fa\u7ed3\u675f\u65f6\u95f4\r\n        auditStatus = _status;\r\n\r\n        if (_status == 2) { // \u5ba1\u6838\u5931\u8d25\uff0c\u66f4\u65b0\u5ba1\u6838\u6587\u672c\r\n            auditedText = _text;\r\n        } else if (_status == 1) { // \u5ba1\u6838\u901a\u8fc7\u4f7f\u7528\u7528\u6237\u8bbe\u7f6e\u7684\u6587\u672c\r\n            auditedText = text; \r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u663e\u793a\u6587\u672c\r\n     */\r\n    function getShowText() public view returns(string) {\r\n        if (auditStatus == 1 || auditStatus == 2) { // \u5ba1\u6838\u8fc7\u4e86\r\n            return auditedText;\r\n        } else { // \u6ca1\u6709\u5ba1\u6838\uff0c\u663e\u793a\u9ed8\u8ba4\u6587\u672c\r\n            return defaultText;\r\n        }\r\n    }\r\n\r\n    function getShowTextBytes96() public view returns(bytes32, bytes32, bytes32, uint8) {\r\n        return StringUtils.toBytes96(getShowText());\r\n    }\r\n\r\n    /**\r\n     * \u8f6c\u8d26\u4ee3\u5e01\r\n     *\r\n     * \u83b7\u5f97\u65f6\u6bb5\u540e\uff0c\u65f6\u6bb5\u64ad\u51fa\u524d\uff0c\u4e0d\u53ef\u4ee5\u8f6c\u5356\u3002\u65f6\u6bb5\u64ad\u51fa\u540e\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u7eaa\u5ff5\u5e01\u8f6c\u5356\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(now >= tvUseEndTime); // \u65f6\u6bb5\u64ad\u51fa\u540e\uff0c\u53ef\u4ee5\u8f6c\u5356\u3002\r\n\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u65f6\u6bb5\u5e01\u72b6\u6001\u4fe1\u606f\r\n     *\r\n     */\r\n    function getInfo() public view returns(\r\n        string _symbol,\r\n        string _name,\r\n        uint _bidStartValue, \r\n        uint _bidStartTime, \r\n        uint _bidEndTime, \r\n        uint _tvUseStartTime,\r\n        uint _tvUseEndTime,\r\n        bool _isPrivate\r\n        ) {\r\n        _symbol = symbol;\r\n        _name = name;\r\n\r\n        _bidStartValue = bidStartValue;\r\n        _bidStartTime = bidStartTime;\r\n        _bidEndTime = bidEndTime;\r\n\r\n        _tvUseStartTime = tvUseStartTime;\r\n        _tvUseEndTime = tvUseEndTime;\r\n\r\n        _isPrivate = isPrivate;\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u65f6\u6bb5\u5e01\u53ef\u53d8\u72b6\u6001\u4fe1\u606f\r\n     *\r\n     */\r\n    function getMutalbeInfo() public view returns(\r\n        uint _maxBidValue,\r\n        address _maxBidAccount,\r\n        bool _auctionEnded,\r\n        string _text,\r\n        uint8 _auditStatus,\r\n        uint8 _number,\r\n        string _auditedText,\r\n        uint32 _bidCount,\r\n        uint32 _auctorCount\r\n        ) {\r\n        _maxBidValue = maxBidValue;\r\n        _maxBidAccount = maxBidAccount;\r\n\r\n        _auctionEnded = auctionEnded;\r\n\r\n        _text = text;\r\n        _auditStatus = auditStatus;\r\n\r\n        _number = number;\r\n        _auditedText = auditedText;\r\n\r\n        _bidCount = bidCount;\r\n        _auctorCount = auctorCount;\r\n    }\r\n\r\n    /**\r\n     * \u63d0\u53d6\u4ee5\u592a\u574a\u5230ethSaver\r\n     */\r\n    function reclaimEther() external onlyOwner {\r\n        require((now > bidEndTime) || (isPrivate && maxBidAccount != address(0))); // \u666e\u901a\u7ade\u62cd\u62cd\u5356\u7ed3\u675f\u540e\u6216\u8005\u79c1\u52df\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u63d0\u5e01\u5230ethSaver\u3002\r\n        ethSaver.transfer(this.balance);\r\n    }\r\n\r\n    /**\r\n     * \u9ed8\u8ba4\u7ed9\u5408\u7ea6\u8f6c\u4ee5\u592a\u574a\u5c31\u662f\u51fa\u4ef7\r\n     */\r\n    function() payable public {\r\n        bid(); // \u51fa\u4ef7\r\n    }\r\n}\r\n\r\n// File: contracts\\NTVToken.sol\r\n\r\n/**\r\n * \u94fe\u4e0a\u771f\u5fc3\u8bdd\u5408\u7ea6\r\n */\r\ncontract NTVToken is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool public isRunning; // \u662f\u5426\u542f\u52a8\u8fd0\u884c\r\n\r\n    uint public onlineTime; // \u4e0a\u7ebf\u65f6\u95f4\uff0c\u7b2c\u4e00\u65f6\u6bb5\u4e0a\u7535\u89c6\u7684\u65f6\u95f4\r\n    uint8 public totalTimeRange; // \u5f53\u524d\u5df2\u7ecf\u91ca\u653e\u7684\u603b\u7684\u65f6\u6bb5\u6570\r\n    mapping(uint => address) internal timeRanges; // \u6bcf\u4e2a\u65f6\u6bb5\u7684\u5408\u7ea6\u5730\u5740\uff0c\u7f16\u53f7\u4ece0\u5f00\u59cb\r\n\r\n    string public defaultText = \"\u6d6a\u82b1\u6709\u610f\u5343\u91cc\u96ea\uff0c\u6843\u82b1\u65e0\u8a00\u4e00\u961f\u6625\u3002\"; // \u5fd8\u8bb0\u5ba1\u6838\u4f7f\u7528\u7684\u9ed8\u8ba4\u6587\u672c\r\n\r\n    mapping(uint8 => Base.NTVUConfig) internal dayConfigs; // \u6bcf\u5929\u65f6\u6bb5\u914d\u7f6e\r\n    mapping(uint8 => Base.NTVUConfig) internal specialConfigs; // \u7279\u6b8a\u65f6\u6bb5\u914d\u7f6e\r\n\r\n    address public ethSaver; // \u7ade\u62cd\u6240\u5f97ETH\u4fdd\u7ba1\u8005\r\n\r\n    event OnTV(address indexed ntvu, address indexed winer, string text); // \u6587\u672c\u4e0a\u7535\u89c6\r\n\r\n    /**\r\n     * \u4f5b\u7cfb\u7535\u89c6\u5408\u7ea6\u6784\u9020\u51fd\u6570\r\n     */\r\n    function NTVToken() public {}\r\n\r\n    /**\r\n     * \u542f\u52a8\u533a\u5757\u94fe\u7535\u89c6\r\n     *\r\n     * @param _onlineTime \u533a\u5757\u94fe\u7535\u89c6\u4e0a\u7ebf\u65f6\u95f4\uff0c\u5fc5\u987b\u4e3a\u6574\u70b9\uff0c\u4f8b\u5982 2018-03-26 00:00:00\r\n     * @param _ethSaver \u7ade\u62cd\u6240\u5f97ETH\u4fdd\u7ba1\u8005\r\n     */\r\n    function startup(uint256 _onlineTime, address _ethSaver) public onlyOwner {\r\n        require(!isRunning); // \u53ea\u80fd\u4e0a\u7ebf\u4e00\u6b21\uff0c\u4e0a\u7ebf\u540e\u4e0d\u80fd\u505c\u6b62\r\n        require((_onlineTime - 57600) % 1 days == 0); // \u4e0a\u7ebf\u65f6\u95f4\u53ea\u80fd\u662f\u6574\u5929\u65f6\u95f4\uff0c57600\u4e3a\u5317\u4eac\u65f6\u95f4\u7684'1970/1/2 0:0:0'\r\n        require(_onlineTime >= now); // \u4e0a\u7ebf\u65f6\u95f4\u9700\u8981\u5927\u4e8e\u5f53\u524d\u65f6\u95f4\r\n        require(_ethSaver != address(0));\r\n\r\n        onlineTime = _onlineTime;\r\n        ethSaver = _ethSaver;\r\n\r\n        isRunning = true;\r\n\r\n        // ---------------------------\r\n        // \u6bcf\u5929\u7684\u65f6\u6bb5\u914d\u7f6e\uff0c\u51716\u4e2a\u65f6\u6bb5\r\n        //\r\n        // \u901a\u7528\u89c4\u5219\uff1a\r\n        // 1\u3001\u9996\u62cd\u540e\uff0c\u6bcf\u592918:30-22:00\u4e3a\u7ade\u62cd\u65f6\u95f4\r\n        // ---------------------------\r\n        uint8[6] memory tvUseStartTimes = [0, 10, 12, 18, 20, 22]; // \u7535\u89c6\u4f7f\u7528\u5f00\u59cb\u65f6\u6bb5\r\n        uint8[6] memory tvUseEndTimes = [2, 12, 14, 20, 22, 24]; // \u7535\u89c6\u4f7f\u7528\u7ed3\u675f\u65f6\u6bb5\r\n\r\n        for (uint8 i=0; i<6; i++) {\r\n            dayConfigs[i].bidStartValue = 0.1 ether; // \u6b63\u5e38\u8d77\u62cd\u4ef70.1ETH\r\n            dayConfigs[i].bidStartTime = 18 hours + 30 minutes - 1 days; // \u4e00\u5929\u524d\u665a\u4e0a 18:30\u8d77\u62cd\r\n            dayConfigs[i].bidEndTime = 22 hours - 1 days; // \u4e00\u5929\u524d\u665a\u4e0a 22:00 \u7ed3\u675f\u62cd\u5356\r\n\r\n            dayConfigs[i].tvUseStartTime = uint(tvUseStartTimes[i]) * 1 hours;\r\n            dayConfigs[i].tvUseEndTime = uint(tvUseEndTimes[i]) * 1 hours;\r\n\r\n            dayConfigs[i].isPrivate = false; // \u6b63\u5e38\u90fd\u662f\u7ade\u62cd\uff0c\u975e\u79c1\u52df\r\n        }\r\n\r\n        // ---------------------------\r\n        // \u7279\u6b8a\u65f6\u6bb5\u914d\u7f6e\r\n        // ---------------------------\r\n\r\n        // \u9996\u62cd\uff0c\u7b2c1\u5929\u76846\u4e2a\u65f6\u6bb5\u90fd\u662f\u9996\u62cd\uff0c\u62cd\u5356\u65f6\u95f4\u4ece\u4e24\u5929\u524d\u768418:30\u5230\u4e00\u5929\u524d\u768422:00\r\n        for(uint8 p=0; p<6; p++) {\r\n            specialConfigs[p].special = true;\r\n            \r\n            specialConfigs[p].bidStartValue = 0.1 ether; // \u8d77\u62cd\u4ef70.1ETH\r\n            specialConfigs[p].bidStartTime = 18 hours + 30 minutes - 2 days; // \u4e24\u5929\u524d\u768418:30\r\n            specialConfigs[p].bidEndTime = 22 hours - 1 days; // \u4e00\u5929\u524d\u768422:00\r\n            specialConfigs[p].isPrivate = false; // \u975e\u79c1\u52df\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u533a\u5757\u7684\u65f6\u95f4\u6233\uff0c\u5355\u4f4ds\r\n     */\r\n    function time() constant internal returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u67d0\u4e2a\u65f6\u95f4\u662f\u4e0a\u7ebf\u7b2c\u51e0\u5929\uff0c\u7b2c1\u5929\u8fd4\u56de1\uff0c\u4e0a\u7ebf\u4e4b\u524d\u8fd4\u56de0\r\n     * \r\n     * @param timestamp \u65f6\u95f4\u6233\r\n     */\r\n    function dayFor(uint timestamp) constant public returns (uint) {\r\n        return timestamp < onlineTime\r\n            ? 0\r\n            : (timestamp.sub(onlineTime) / 1 days) + 1;\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u662f\u4eca\u5929\u7684\u7b2c\u51e0\u4e2a\u65f6\u6bb5\uff0c\u7b2c\u4e00\u4e2a\u65f6\u6bb5\u8fd4\u56de1\uff0c\u6ca1\u6709\u5339\u914d\u7684\u8fd4\u56de0\r\n     *\r\n     * @param timestamp \u65f6\u95f4\u6233\r\n     */\r\n    function numberFor(uint timestamp) constant public returns (uint8) {\r\n        if (timestamp >= onlineTime) {\r\n            uint current = timestamp.sub(onlineTime) % 1 days;\r\n\r\n            for(uint8 i=0; i<6; i++) {\r\n                if (dayConfigs[i].tvUseStartTime<=current && current<dayConfigs[i].tvUseEndTime) {\r\n                    return (i + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * \u521b\u5efa\u65f6\u6bb5\u5e01\r\n     */\r\n    function createNTVU() public onlyOwner {\r\n        require(isRunning);\r\n\r\n        uint8 number = totalTimeRange++;\r\n        uint8 day = number / 6;\r\n        uint8 num = number % 6;\r\n\r\n        Base.NTVUConfig memory cfg = dayConfigs[num]; // \u8bfb\u53d6\u6bcf\u5929\u65f6\u6bb5\u7684\u9ed8\u8ba4\u914d\u7f6e\r\n\r\n        // \u5982\u679c\u6709\u7279\u6b8a\u914d\u7f6e\u5219\u8986\u76d6\r\n        Base.NTVUConfig memory expCfg = specialConfigs[number];\r\n        if (expCfg.special) {\r\n            cfg.bidStartValue = expCfg.bidStartValue;\r\n            cfg.bidStartTime = expCfg.bidStartTime;\r\n            cfg.bidEndTime = expCfg.bidEndTime;\r\n            cfg.isPrivate = expCfg.isPrivate;\r\n        }\r\n\r\n        // \u6839\u636e\u4e0a\u7ebf\u65f6\u95f4\u8ba1\u7b97\u5177\u4f53\u7684\u65f6\u6bb5\u65f6\u95f4\r\n        uint bidStartTime = uint(int(onlineTime) + day * 24 hours + cfg.bidStartTime);\r\n        uint bidEndTime = uint(int(onlineTime) + day * 24 hours + cfg.bidEndTime);\r\n        uint tvUseStartTime = onlineTime + day * 24 hours + cfg.tvUseStartTime;\r\n        uint tvUseEndTime = onlineTime + day * 24 hours + cfg.tvUseEndTime;\r\n\r\n        timeRanges[number] = new NTVUToken(number, cfg.bidStartValue, bidStartTime, bidEndTime, tvUseStartTime, tvUseEndTime, cfg.isPrivate, defaultText, ethSaver);\r\n    }\r\n\r\n    /**\r\n     * \u67e5\u8be2\u6240\u6709\u65f6\u6bb5\r\n     */\r\n    function queryNTVUs(uint startIndex, uint count) public view returns(address[]){\r\n        startIndex = (startIndex < totalTimeRange)? startIndex : totalTimeRange;\r\n        count = (startIndex + count < totalTimeRange) ? count : (totalTimeRange - startIndex);\r\n\r\n        address[] memory result = new address[](count);\r\n        for(uint i=0; i<count; i++) {\r\n            result[i] = timeRanges[startIndex + i];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * \u67e5\u8be2\u5f53\u524d\u6b63\u5728\u64ad\u653e\u7684\u65f6\u6bb5\r\n     */\r\n    function playingNTVU() public view returns(address){\r\n        uint day = dayFor(time());\r\n        uint8 num = numberFor(time());\r\n\r\n        if (day>0 && (num>0 && num<=6)) {\r\n            day = day - 1;\r\n            num = num - 1;\r\n\r\n            return timeRanges[day * 6 + uint(num)];\r\n        } else {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u5ba1\u6838\u6587\u672c\r\n     */\r\n    function auditNTVUText(uint8 index, uint8 status, string _text) public onlyOwner {\r\n        require(isRunning); // \u5408\u7ea6\u542f\u52a8\u540e\u624d\u80fd\u5ba1\u6838\r\n        require(index >= 0 && index < totalTimeRange); //\u53ea\u80fd\u5ba1\u6838\u5df2\u7ecf\u4e0a\u7ebf\u7684\u65f6\u6bb5\r\n        require(status==1 || (status==2 && bytes(_text).length>0 && bytes(_text).length <= 90)); // \u5ba1\u6838\u4e0d\u901a\uff0c\u9700\u8981\u914d\u7f6e\u6587\u672c\r\n\r\n        address ntvu = timeRanges[index];\r\n        assert(ntvu != address(0));\r\n\r\n        NTVUToken ntvuToken = NTVUToken(ntvu);\r\n        ntvuToken.auditText(status, _text);\r\n\r\n        var (b1, b2, b3, len) = ntvuToken.getShowTextBytes96();\r\n        var auditedText = StringUtils.fromBytes96(b1, b2, b3, len);\r\n        OnTV(ntvuToken, ntvuToken.maxBidAccount(), auditedText); // \u5ba1\u6838\u540e\u7684\u6587\u672c\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u7535\u89c6\u64ad\u653e\u6587\u672c\r\n     */\r\n    function getText() public view returns(string){\r\n        address playing = playingNTVU();\r\n\r\n        if (playing != address(0)) {\r\n            NTVUToken ntvuToken = NTVUToken(playing);\r\n\r\n            var (b1, b2, b3, len) = ntvuToken.getShowTextBytes96();\r\n            return StringUtils.fromBytes96(b1, b2, b3, len);\r\n        } else {\r\n            return \"\"; // \u5f53\u524d\u4e0d\u662f\u64ad\u653e\u65f6\u6bb5\uff0c\u8fd4\u56de\u7a7a\u6587\u672c\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u7ade\u62cd\u72b6\u6001\r\n     */\r\n    function status() public view returns(uint8) {\r\n        if (!isRunning) {\r\n            return 0; // \u672a\u542f\u52a8\u62cd\u5356\r\n        } else if (time() < onlineTime) {\r\n            return 1; // \u672a\u5230\u9996\u64ad\u65f6\u95f4\r\n        } else {\r\n            if (totalTimeRange == 0) {\r\n                return 2; // \u6ca1\u6709\u521b\u5efa\u64ad\u653e\u65f6\u6bb5\r\n            } else {\r\n                if (time() < NTVUToken(timeRanges[totalTimeRange - 1]).tvUseEndTime()) {\r\n                    return 3; // \u6574\u4e2a\u7ade\u62cd\u6d3b\u52a8\u8fdb\u884c\u4e2d\r\n                } else {\r\n                    return 4; // \u6574\u4e2a\u7ade\u62cd\u6d3b\u52a8\u5df2\u7ed3\u675f\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * \u83b7\u53d6\u603b\u7684\u7ade\u62cd\u4eba\u6570\r\n     */\r\n    function totalAuctorCount() public view returns(uint32) {\r\n        uint32 total = 0;\r\n\r\n        for(uint8 i=0; i<totalTimeRange; i++) {\r\n            total += NTVUToken(timeRanges[i]).auctorCount();\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u603b\u7684\u7ade\u62cd\u6b21\u6570\r\n     */\r\n    function totalBidCount() public view returns(uint32) {\r\n        uint32 total = 0;\r\n\r\n        for(uint8 i=0; i<totalTimeRange; i++) {\r\n            total += NTVUToken(timeRanges[i]).bidCount();\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u603b\u7684\u51fa\u4ef7ETH\r\n     */\r\n    function totalBidEth() public view returns(uint) {\r\n        uint total = 0;\r\n\r\n        for(uint8 i=0; i<totalTimeRange; i++) {\r\n            total += NTVUToken(timeRanges[i]).balance;\r\n        }\r\n\r\n        total += this.balance;\r\n        total += ethSaver.balance;\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * \u83b7\u53d6\u5386\u53f2\u51fa\u4ef7\u6700\u9ad8\u7684ETH\r\n     */\r\n    function maxBidEth() public view returns(uint) {\r\n        uint maxETH = 0;\r\n\r\n        for(uint8 i=0; i<totalTimeRange; i++) {\r\n            uint val = NTVUToken(timeRanges[i]).maxBidValue();\r\n            maxETH =  (val > maxETH) ? val : maxETH;\r\n        }\r\n\r\n        return maxETH;\r\n    }\r\n\r\n    /**\r\n     * \u63d0\u53d6\u5f53\u524d\u5408\u7ea6\u7684ETH\u5230ethSaver\r\n     */\r\n    function reclaimEther() public onlyOwner {\r\n        require(isRunning);\r\n\r\n        ethSaver.transfer(this.balance);\r\n    }\r\n\r\n    /**\r\n     * \u63d0\u53d6\u65f6\u6bb5\u5e01\u7684ETH\u5230ethSaver\r\n     */\r\n    function reclaimNtvuEther(uint8 index) public onlyOwner {\r\n        require(isRunning);\r\n        require(index >= 0 && index < totalTimeRange); //\u53ea\u80fd\u5ba1\u6838\u5df2\u7ecf\u4e0a\u7ebf\u7684\u65f6\u6bb5\r\n\r\n        NTVUToken(timeRanges[index]).reclaimEther();\r\n    }\r\n\r\n    /**\r\n     * \u63a5\u6536ETH\r\n     */\r\n    function() payable external {}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAuctorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createNTVU\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playingNTVU\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethSaver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBidEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"numberFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"queryNTVUs\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTimeRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBidCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlineTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"auditNTVUText\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBidEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_onlineTime\",\"type\":\"uint256\"},{\"name\":\"_ethSaver\",\"type\":\"address\"}],\"name\":\"startup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"dayFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"reclaimNtvuEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultText\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getText\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ntvu\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"winer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"OnTV\",\"type\":\"event\"}]", "ContractName": "NTVToken", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://7e85fc71e4b3f3185cabffed10a72e7988ee930802d79384dccf8db836d863a3"}]}