{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.14;\r\n\r\ninterface RocketNodeStakingInterface {\r\n  function getNodeRPLStake(address _nodeAddress) external view returns (uint256);\r\n  function getNodeEffectiveRPLStake(address _nodeAddress) external view returns (uint256);\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address _owner) external view returns (uint256 balance);\r\n}\r\n\r\ncontract RocketNodeDelegateVote {\r\n  event Registration(address delegateAddress, address nodeAddress, uint256 index);\r\n  event Confirmation(address delegateAddress, address nodeAddress);\r\n\r\n  mapping(uint256 => address) unconfirmedDelegateAddress;\r\n  mapping(uint256 => address) unconfirmedNodeAddress;\r\n  uint256 unconfirmedIndex;\r\n\r\n  mapping(address => address) delegateToNode;\r\n  mapping(address => address) nodeToDelegate;\r\n\r\n  function registerDelegateAddress(address nodeAddress) public returns (uint256) {\r\n    address delegateAddress = msg.sender;\r\n    unconfirmedIndex += 1;\r\n    unconfirmedDelegateAddress[unconfirmedIndex] = delegateAddress;\r\n    unconfirmedNodeAddress[unconfirmedIndex] = nodeAddress;\r\n    emit Registration(delegateAddress, nodeAddress, unconfirmedIndex);\r\n    return unconfirmedIndex;\r\n  }\r\n\r\n  receive() external payable {\r\n    uint256 index = msg.value;\r\n    address nodeAddress = unconfirmedNodeAddress[index];\r\n    address delegateAddress = unconfirmedDelegateAddress[index];\r\n    require(delegateAddress != address(0), \"Registration invalid\");\r\n    require(nodeAddress != address(0), \"Node address is invalid\");\r\n    require(nodeAddress == msg.sender, \"Registration is for another node address\");\r\n    require(nodeAddress != delegateAddress, \"Node address and delegate address are the same\");\r\n    require(delegateToNode[delegateAddress] == address(0), \"Delegate address already used\");\r\n    delegateToNode[delegateAddress] = nodeAddress;\r\n    nodeToDelegate[nodeAddress] = delegateAddress;\r\n    emit Confirmation(delegateAddress, nodeAddress);\r\n  }\r\n\r\n  function undelegate() public {\r\n    address nodeAddress = msg.sender;\r\n    address delegateAddress = nodeToDelegate[nodeAddress];\r\n    delegateToNode[delegateAddress] = address(0);\r\n    nodeToDelegate[nodeAddress] = address(0);\r\n  }\r\n\r\n  function getNodeAddressForDelegate(address delegateAddress) public view returns (address) {\r\n    require(nodeToDelegate[delegateAddress] == address(0), \"Cannot vote with node address once delegated\");\r\n    address nodeAddress = delegateToNode[delegateAddress];\r\n    if (nodeAddress == address(0)) {\r\n      nodeAddress = delegateAddress;\r\n    }\r\n    return nodeAddress; \r\n  }\r\n\r\n  function getNodeRPLStake(address _rocketNodeStakingAddress, address _address) public view returns (uint256) {\r\n    RocketNodeStakingInterface rocketNodeStaking = RocketNodeStakingInterface(_rocketNodeStakingAddress);\r\n    return rocketNodeStaking.getNodeRPLStake(getNodeAddressForDelegate(_address));\r\n  }\r\n\r\n  function getNodeRPLStakeQuadratic(address _rocketNodeStakingAddress, address _address) public view returns (uint256) {\r\n    return sqrt(getNodeRPLStake(_rocketNodeStakingAddress, _address));\r\n  }\r\n\r\n  function getNodeEffectiveRPLStake(address _rocketNodeStakingAddress, address _address) public view returns (uint256) {\r\n    RocketNodeStakingInterface rocketNodeStaking = RocketNodeStakingInterface(_rocketNodeStakingAddress);\r\n    return rocketNodeStaking.getNodeEffectiveRPLStake(getNodeAddressForDelegate(_address));\r\n  }\r\n\r\n  function getNodeEffectiveRPLStakeQuadratic(address _rocketNodeStakingAddress, address _address) public view returns (uint256) {\r\n    return sqrt(getNodeEffectiveRPLStake(_rocketNodeStakingAddress, _address));\r\n  }\r\n\r\n  function getNodeRPLBalance(address _rplAddress, address _address) public view returns (uint256) {\r\n    ERC20 rpl = ERC20(_rplAddress);\r\n    return rpl.balanceOf(getNodeAddressForDelegate(_address));\r\n  }\r\n\r\n  function getNodeRPLBalanceQuadratic(address _rplAddress, address _address) public view returns (uint256) {\r\n    return sqrt(getNodeRPLBalance(_rplAddress, _address));\r\n  }\r\n\r\n  // https://github.com/Uniswap/v2-core/blob/v1.0.1/contracts/libraries/Math.sol\r\n  function sqrt(uint y) internal pure returns (uint z) {\r\n    if (y > 3) {\r\n      z = y;\r\n      uint x = y / 2 + 1;\r\n      while (x < z) {\r\n        z = x;\r\n        x = (y / x + x) / 2;\r\n      }\r\n    } else if (y != 0) {\r\n      z = 1;\r\n    }\r\n  }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"}],\"name\":\"getNodeAddressForDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocketNodeStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNodeEffectiveRPLStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocketNodeStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNodeEffectiveRPLStakeQuadratic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rplAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNodeRPLBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rplAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNodeRPLBalanceQuadratic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocketNodeStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNodeRPLStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocketNodeStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNodeRPLStakeQuadratic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"registerDelegateAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RocketNodeDelegateVote", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a0f20afcb8063543a5f9e64f5c642498a6f04d5fdb7d060470440561595a92c6"}]}