{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: contracts/IterableMapping.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary IterableMapping {\r\n  // Iterable mapping from address to uint;\r\n  struct Map {\r\n    address[] keys;\r\n    mapping(address => uint256) values;\r\n    mapping(address => uint256) indexOf;\r\n    mapping(address => bool) inserted;\r\n  }\r\n\r\n  function get(Map storage map, address key) public view returns (uint256) {\r\n    return map.values[key];\r\n  }\r\n\r\n  function getIndexOfKey(Map storage map, address key)\r\n    public\r\n    view\r\n    returns (int256)\r\n  {\r\n    if (!map.inserted[key]) {\r\n      return -1;\r\n    }\r\n    return int256(map.indexOf[key]);\r\n  }\r\n\r\n  function getKeyAtIndex(Map storage map, uint256 index)\r\n    public\r\n    view\r\n    returns (address)\r\n  {\r\n    return map.keys[index];\r\n  }\r\n\r\n  function size(Map storage map) public view returns (uint256) {\r\n    return map.keys.length;\r\n  }\r\n\r\n  function set(\r\n    Map storage map,\r\n    address key,\r\n    uint256 val\r\n  ) public {\r\n    if (map.inserted[key]) {\r\n      map.values[key] = val;\r\n    } else {\r\n      map.inserted[key] = true;\r\n      map.values[key] = val;\r\n      map.indexOf[key] = map.keys.length;\r\n      map.keys.push(key);\r\n    }\r\n  }\r\n\r\n  function remove(Map storage map, address key) public {\r\n    if (!map.inserted[key]) {\r\n      return;\r\n    }\r\n\r\n    delete map.inserted[key];\r\n    delete map.values[key];\r\n\r\n    uint256 index = map.indexOf[key];\r\n    uint256 lastIndex = map.keys.length - 1;\r\n    address lastKey = map.keys[lastIndex];\r\n\r\n    map.indexOf[lastKey] = index;\r\n    delete map.indexOf[key];\r\n\r\n    map.keys[index] = lastKey;\r\n    map.keys.pop();\r\n  }\r\n}\r\n\r\n// File: contracts/IUniswapV2Factory.sol\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n// File: contracts/INodeManager.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface INodeManager {\r\n  struct NodeEntity {\r\n    string name;\r\n    uint256 creationTime;\r\n    uint256 lastClaimTime;\r\n    uint256 amount;\r\n    uint256 tier;\r\n    uint256 totalClaimed;\r\n  }\r\n\r\n  function getNodePrice(uint256 _tierIndex) external view returns (uint256);\r\n\r\n  function createNode(\r\n    address account,\r\n    string memory nodeName,\r\n    uint256 tier\r\n  ) external;\r\n\r\n  function getNodeReward(address account, uint256 _creationTime)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function getAllNodesRewards(address account) external view returns (uint256);\r\n\r\n  function cashoutNodeReward(address account, uint256 _creationTime) external;\r\n\r\n  function cashoutAllNodesRewards(address account) external;\r\n\r\n  function getAllNodes(address account)\r\n    external\r\n    view\r\n    returns (NodeEntity[] memory);\r\n\r\n  function getNodeFee(\r\n    address account,\r\n    uint256 _creationTime,\r\n    uint256 _rewardAmount\r\n  ) external returns (uint256);\r\n\r\n  function getAllNodesFee(address account, uint256 _rewardAmount)\r\n    external\r\n    returns (uint256);\r\n}\r\n\r\n// File: contracts/IUniswapV2Router01.sol\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// File: contracts/IUniswapV2Router02.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/finance/PaymentSplitter.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title PaymentSplitter\r\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\r\n * that the Ether will be split in this way, since it is handled transparently by the contract.\r\n *\r\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\r\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\r\n * an amount proportional to the percentage of total shares they were assigned.\r\n *\r\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\r\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\r\n * function.\r\n *\r\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\r\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\r\n * to run tests before sending real value to this contract.\r\n */\r\ncontract PaymentSplitter is Context {\r\n    event PayeeAdded(address account, uint256 shares);\r\n    event PaymentReleased(address to, uint256 amount);\r\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\r\n    event PaymentReceived(address from, uint256 amount);\r\n\r\n    uint256 private _totalShares;\r\n    uint256 private _totalReleased;\r\n\r\n    mapping(address => uint256) private _shares;\r\n    mapping(address => uint256) private _released;\r\n    address[] private _payees;\r\n\r\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\r\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\r\n\r\n    /**\r\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\r\n     * the matching position in the `shares` array.\r\n     *\r\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\r\n     * duplicates in `payees`.\r\n     */\r\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\r\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\r\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\r\n\r\n        for (uint256 i = 0; i < payees.length; i++) {\r\n            _addPayee(payees[i], shares_[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\r\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\r\n     * reliability of the events, and not the actual splitting of Ether.\r\n     *\r\n     * To learn more about this see the Solidity documentation for\r\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\r\n     * functions].\r\n     */\r\n    receive() external payable virtual {\r\n        emit PaymentReceived(_msgSender(), msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total shares held by payees.\r\n     */\r\n    function totalShares() public view returns (uint256) {\r\n        return _totalShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of Ether already released.\r\n     */\r\n    function totalReleased() public view returns (uint256) {\r\n        return _totalReleased;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\r\n     * contract.\r\n     */\r\n    function totalReleased(IERC20 token) public view returns (uint256) {\r\n        return _erc20TotalReleased[token];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of shares held by an account.\r\n     */\r\n    function shares(address account) public view returns (uint256) {\r\n        return _shares[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of Ether already released to a payee.\r\n     */\r\n    function released(address account) public view returns (uint256) {\r\n        return _released[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\r\n     * IERC20 contract.\r\n     */\r\n    function released(IERC20 token, address account) public view returns (uint256) {\r\n        return _erc20Released[token][account];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the address of the payee number `index`.\r\n     */\r\n    function payee(uint256 index) public view returns (address) {\r\n        return _payees[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\r\n     * total shares and their previous withdrawals.\r\n     */\r\n    function release(address payable account) public virtual {\r\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\r\n\r\n        uint256 totalReceived = address(this).balance + totalReleased();\r\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\r\n\r\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\r\n\r\n        _released[account] += payment;\r\n        _totalReleased += payment;\r\n\r\n        Address.sendValue(account, payment);\r\n        emit PaymentReleased(account, payment);\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\r\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\r\n     * contract.\r\n     */\r\n    function release(IERC20 token, address account) public virtual {\r\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\r\n\r\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\r\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\r\n\r\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\r\n\r\n        _erc20Released[token][account] += payment;\r\n        _erc20TotalReleased[token] += payment;\r\n\r\n        SafeERC20.safeTransfer(token, account, payment);\r\n        emit ERC20PaymentReleased(token, account, payment);\r\n    }\r\n\r\n    /**\r\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\r\n     * already released amounts.\r\n     */\r\n    function _pendingPayment(\r\n        address account,\r\n        uint256 totalReceived,\r\n        uint256 alreadyReleased\r\n    ) private view returns (uint256) {\r\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new payee to the contract.\r\n     * @param account The address of the payee to add.\r\n     * @param shares_ The number of shares owned by the payee.\r\n     */\r\n    function _addPayee(address account, uint256 shares_) private {\r\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\r\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\r\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\r\n\r\n        _payees.push(account);\r\n        _shares[account] = shares_;\r\n        _totalShares = _totalShares + shares_;\r\n        emit PayeeAdded(account, shares_);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Counters.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n// File: contracts/Molecules.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n// contracts/ERC721.sol\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Molecules is ERC721, Ownable {\r\n    using SafeMath for uint256;\r\n    using IterableMapping for IterableMapping.Map;\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _tokenIds;\r\n\r\n    address private _owner;\r\n    address private _royaltiesAddr; // royality receiver\r\n    uint256 public royaltyPercentage; // royalty based on sales price\r\n    mapping(address => bool) public excludedList; // list of people who dont have to pay fee\r\n\r\n    // cost to mint\r\n    uint256 public mintFeeAmount;\r\n\r\n    // // NFT Meta data\r\n    string public baseURL;\r\n\r\n    // UnbondingTime\r\n    uint256 public unbondingTime = 604800;\r\n\r\n    uint256 public constant maxSupply = 1000;\r\n\r\n    // enable flag for public\r\n    bool public openForPublic;\r\n\r\n    // define Molecule struct\r\n    struct Molecule {\r\n        uint256 tokenId;\r\n        // string tokenURI;\r\n        address mintedBy;\r\n        address currentOwner;\r\n        uint256 previousPrice;\r\n        uint256 price;\r\n        uint256 numberOfTransfers;\r\n        bool forSale;\r\n        bool bonded;\r\n        uint256 kind;\r\n        uint256 level;\r\n        uint256 lastUpgradeTime;\r\n        uint256 bondedTime;\r\n    }\r\n\r\n    \r\n\r\n    // map id to Molecules obj\r\n    mapping(uint256 => Molecule) public allMolecules;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    //================================= Events ================================= //\r\n\r\n    event SaleToggle(uint256 moleculeNumber, bool isForSale, uint256 price);\r\n    event PurchaseEvent(uint256 moleculeNumber, address from, address to, uint256 price);\r\n    event moleculeBonded(uint256 moleculeNumber, address owner, uint256 NodeCreationTime);\r\n    event moleculeUnbonded(uint256 moleculeNumber, address owner, uint256 NodeCreationTime);   \r\n    event moleculeGrown(uint256 moleculeNumber, uint256 newLevel); \r\n\r\n    constructor(\r\n        address _contractOwner,\r\n        address _royaltyReceiver,\r\n        uint256 _royaltyPercentage,\r\n        uint256 _mintFeeAmount,\r\n        string memory _baseURL,\r\n        bool _openForPublic\r\n    ) ERC721(\"Molecules\",\"M\") Ownable() {\r\n        royaltyPercentage = _royaltyPercentage;\r\n        _owner = _contractOwner;\r\n        _royaltiesAddr = _royaltyReceiver;\r\n        mintFeeAmount = _mintFeeAmount.mul(1e18);\r\n        excludedList[_contractOwner] = true; // add owner to exclude list\r\n        excludedList[_royaltyReceiver] = true; // add artist to exclude list\r\n        baseURL = _baseURL;\r\n        openForPublic = _openForPublic;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function mint(uint256 numberOfToken) public payable {\r\n        // check if this function caller is not an zero address account\r\n        require(openForPublic == true, \"not open\");\r\n        require(msg.sender != address(0));\r\n        require(\r\n            _allTokens.length + numberOfToken <= maxSupply,\r\n            \"max supply\"\r\n        );\r\n        require(numberOfToken > 0, \"Min 1\");\r\n        require(numberOfToken <= 3, \"Max 3\");\r\n        uint256 price = 0;\r\n        // pay for minting cost\r\n        if (excludedList[msg.sender] == false) {\r\n            // send token's worth of ethers to the owner\r\n            price = mintFeeAmount * numberOfToken;\r\n            require(msg.value >= price, \"Not enough fee\");\r\n            payable(_royaltiesAddr).transfer(msg.value);\r\n        } else {\r\n            // return money to sender // since its free\r\n            payable(msg.sender).transfer(msg.value);\r\n        }\r\n        uint256 newPrice = mintFeeAmount;\r\n\r\n        for (uint256 i = 1; i <= numberOfToken; i++) {\r\n            _tokenIds.increment();\r\n            uint256 newItemId = _tokenIds.current();\r\n            _safeMint(msg.sender, newItemId);\r\n            Molecule memory newMolecule = Molecule(\r\n                newItemId,\r\n                msg.sender,\r\n                msg.sender,\r\n                mintFeeAmount,\r\n                0,\r\n                0,\r\n                false,\r\n                false,\r\n                0,\r\n                1,\r\n                0,\r\n                0\r\n            );\r\n            // add the token id to the allMolecules\r\n            allMolecules[newItemId] = newMolecule;\r\n            // increase mint price if 200 (or multiple thereof) has been minted for the next person minting\r\n            // e.g. on avax mint price goes up by 0.5 avax every 200 NFTs\r\n            if (newItemId%200 == 0){\r\n                uint256 addPrice = 5;\r\n                newPrice += addPrice.mul(1e17);\r\n            }\r\n        }\r\n        mintFeeAmount = newPrice;\r\n    }\r\n\r\n    function changeUrl(string memory url) external onlyOwner {\r\n        baseURL = url;\r\n    }\r\n\r\n    function setMoleculeKind(uint256[] memory _tokens, uint256[] memory _kinds) external onlyOwner{\r\n        require(_tokens.length > 0, \"lists can't be empty\");\r\n        require(_tokens.length == _kinds.length, \"both lists should have same length\");\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            require(_exists(_tokens[i]), \"token not found\");\r\n            Molecule memory mol = allMolecules[_tokens[i]];\r\n            mol.kind = _kinds[i];\r\n            allMolecules[_tokens[i]] = mol;\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n\r\n    function setPriceForSale(\r\n        uint256 _tokenId,\r\n        uint256 _newPrice,\r\n        bool isForSale\r\n    ) external {\r\n        require(_exists(_tokenId), \"token not found\");\r\n        address tokenOwner = ownerOf(_tokenId);\r\n        require(tokenOwner == msg.sender, \"not owner\");\r\n        Molecule memory mol = allMolecules[_tokenId];\r\n        require(mol.bonded == false);\r\n        mol.price = _newPrice;\r\n        mol.forSale = isForSale;\r\n        allMolecules[_tokenId] = mol;\r\n        emit SaleToggle(_tokenId, isForSale, _newPrice);\r\n    }\r\n\r\n    function getAllSaleTokens() public view returns (uint256[] memory) {\r\n        uint256 _totalSupply = totalSupply();\r\n        uint256[] memory _tokenForSales = new uint256[](_totalSupply);\r\n        uint256 counter = 0;\r\n        for (uint256 i = 1; i <= _totalSupply; i++) {\r\n            if (allMolecules[i].forSale == true) {\r\n                _tokenForSales[counter] = allMolecules[i].tokenId;\r\n                counter++;\r\n            }\r\n        }\r\n        return _tokenForSales;\r\n    }\r\n\r\n    // by a token by passing in the token's id\r\n    function buyToken(uint256 _tokenId) public payable {\r\n        // check if the token id of the token being bought exists or not\r\n        require(_exists(_tokenId));\r\n        // get the token's owner\r\n        address tokenOwner = ownerOf(_tokenId);\r\n        // token's owner should not be an zero address account\r\n        require(tokenOwner != address(0));\r\n        // the one who wants to buy the token should not be the token's owner\r\n        require(tokenOwner != msg.sender);\r\n        // get that token from all Molecules mapping and create a memory of it defined as (struct => Molecules)\r\n        Molecule memory mol = allMolecules[_tokenId];\r\n        // price sent in to buy should be equal to or more than the token's price\r\n        require(msg.value >= mol.price);\r\n        // token should be for sale\r\n        require(mol.forSale);\r\n        uint256 amount = msg.value;\r\n        uint256 _royaltiesAmount = amount.mul(royaltyPercentage).div(100);\r\n        uint256 payOwnerAmount = amount.sub(_royaltiesAmount);\r\n        payable(_royaltiesAddr).transfer(_royaltiesAmount);\r\n        payable(mol.currentOwner).transfer(payOwnerAmount);\r\n        require(mol.bonded == false, \"Molecule is Bonded\");\r\n        mol.previousPrice = mol.price;\r\n        mol.bonded = false;\r\n        mol.numberOfTransfers += 1;\r\n        mol.price = 0;\r\n        mol.forSale = false;\r\n        allMolecules[_tokenId] = mol;\r\n        _transfer(tokenOwner, msg.sender, _tokenId);\r\n        emit PurchaseEvent(_tokenId, mol.currentOwner, msg.sender, mol.price);\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(index < balanceOf(owner), \"out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    //  URI Storage override functions\r\n    /** Overrides ERC-721's _baseURI function */\r\n    function _baseURI()\r\n        internal\r\n        view\r\n        virtual\r\n        override(ERC721)\r\n        returns (string memory)\r\n    {\r\n        return baseURL;\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override(ERC721) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n        Molecule memory mol = allMolecules[tokenId];\r\n        require(mol.bonded == false,\"Molecule is bonded!\");\r\n        mol.currentOwner = to;\r\n        mol.numberOfTransfers += 1;\r\n        mol.forSale = false;\r\n        allMolecules[tokenId] = mol;\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\r\n        private\r\n    {\r\n        uint256 lastTokenIndex = balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n\r\n    // upgrade contract to support authorized\r\n\r\n    mapping(address => bool) public authorized;\r\n\r\n    modifier onlyAuthorized() {\r\n        require(authorized[msg.sender] ||  msg.sender == _owner , \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    function addAuthorized(address _toAdd) public {\r\n        require(msg.sender == _owner, 'Not owner');\r\n        require(_toAdd != address(0));\r\n        authorized[_toAdd] = true;\r\n    }\r\n\r\n    function removeAuthorized(address _toRemove) public {\r\n        require(msg.sender == _owner, 'Not owner');\r\n        require(_toRemove != address(0));\r\n        require(_toRemove != msg.sender);\r\n        authorized[_toRemove] = false;\r\n    }\r\n\r\n    // upgrade contract to allow OXG Nodes to \r\n\r\n    function bondMolecule(address account,uint256 _tokenId, uint256 nodeCreationTime) external onlyAuthorized {\r\n        require(_exists(_tokenId), \"token not found\");\r\n        address tokenOwner = ownerOf(_tokenId);\r\n        require(tokenOwner == account, \"not owner\");\r\n        Molecule memory mol = allMolecules[_tokenId];\r\n        require(mol.bonded == false, \"Molecule already bonded\");\r\n        mol.bonded = true;\r\n        allMolecules[_tokenId] = mol;\r\n        emit moleculeBonded(_tokenId, account, nodeCreationTime);\r\n    }\r\n\r\n    function unbondMolecule(address account,uint256 _tokenId, uint256 nodeCreationTime) external onlyAuthorized {\r\n        require(_exists(_tokenId), \"token not found\");\r\n        address tokenOwner = ownerOf(_tokenId);\r\n        require(tokenOwner == account, \"not owner\");\r\n        Molecule memory mol = allMolecules[_tokenId];\r\n        require(mol.bonded == true, \"Molecule not bonded\");\r\n        require(mol.bondedTime + unbondingTime > block.timestamp, \"You have to wait 7 days from bonding to unbond\");\r\n        mol.bonded = false;\r\n        allMolecules[_tokenId] = mol;\r\n        emit moleculeUnbonded(_tokenId, account, nodeCreationTime);\r\n    }\r\n\r\n    function growMolecule(uint256 _tokenId) external onlyAuthorized {\r\n        require(_exists(_tokenId), \"token not found\");\r\n        Molecule memory mol = allMolecules[_tokenId];\r\n        mol.level += 1;\r\n        allMolecules[_tokenId] = mol;\r\n        emit moleculeGrown(_tokenId, mol.level);\r\n    }\r\n\r\n    function getMoleculeLevel(uint256 _tokenId) public view returns(uint256){\r\n        Molecule memory mol = allMolecules[_tokenId];\r\n        return mol.level;\r\n    }\r\n\r\n    function getMoleculeKind(uint256 _tokenId) public view returns(uint256) {\r\n        Molecule memory mol = allMolecules[_tokenId];\r\n        return mol.kind;\r\n    }\r\n\r\n    //function to return all the structure data.\r\n\r\n\r\n\r\n\r\n}\r\n// File: contracts/NodeManager.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NodeManager is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n  using IterableMapping for IterableMapping.Map;\r\n\r\n  struct NodeEntity {\r\n    string name;\r\n    uint256 creationTime;\r\n    uint256 lastClaimTime;\r\n    uint256 amount;\r\n    uint256 tier;\r\n    uint256 totalClaimed;\r\n    uint256 borrowedRewards;\r\n    uint256[3] bondedMolecules; // tokenId of bonded molecules\r\n    uint256 bondedMols; //number of molecules bonded\r\n  }\r\n\r\n  IterableMapping.Map private nodeOwners;\r\n  mapping(address => NodeEntity[]) private _nodesOfUser;\r\n\r\n  Molecules public molecules;\r\n\r\n  address public token;\r\n  uint256 public totalNodesCreated = 0;\r\n  uint256 public totalStaked = 0;\r\n  uint256 public totalClaimed = 0;\r\n\r\n  uint256 public levelMultiplier = 250; // bps 250 = 2.5%\r\n\r\n  uint256[] public _tiersPrice = [1, 6, 20, 50, 150];\r\n  uint256[] public _tiersRewards = [1250,8000,30000,87500,300000]; // 10000 => 1 OXG\r\n  uint256[] public _boostMultipliers = [102, 105, 110, 130, 200]; // %\r\n  uint256[] public _boostRequiredDays = [35, 56, 84, 183, 365]; // days\r\n  uint256[] public _paperHandsTaxes = [150, 100, 40, 0]; // %; 10 => 1\r\n  uint256[] public _paperHandsWeeks = [1, 2, 3, 4]; // weeks\r\n  uint256[] public _claimTaxFees = [8, 8, 8, 8, 8]; // %, match with tiers\r\n\r\n\r\n\r\n  event NodeCreated(\r\n    address indexed account,\r\n    uint256 indexed blockTime,\r\n    uint256 indexed amount\r\n  );\r\n\r\n  event NodeBondedToMolecule(\r\n    address account,\r\n    uint256 tokenID,\r\n    uint256 nodeCreationTime\r\n  );\r\n\r\n  event NodeUnbondedToMolecule(\r\n    address account,\r\n    uint256 tokenID,\r\n    uint256 nodeCreationTime\r\n  );\r\n\r\n  modifier onlyGuard() {\r\n    require(owner() == _msgSender() || token == _msgSender(), \"NOT_GUARD\");\r\n    _;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  // Private methods\r\n\r\n\r\n  function _isNameAvailable(address account, string memory nodeName)\r\n    private\r\n    view\r\n    returns (bool)\r\n  {\r\n    NodeEntity[] memory nodes = _nodesOfUser[account];\r\n    for (uint256 i = 0; i < nodes.length; i++) {\r\n      if (keccak256(bytes(nodes[i].name)) == keccak256(bytes(nodeName))) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function _getNodeWithCreatime(\r\n    NodeEntity[] storage nodes,\r\n    uint256 _creationTime\r\n  ) private view returns (NodeEntity storage) {\r\n    uint256 numberOfNodes = nodes.length;\r\n    require(\r\n      numberOfNodes > 0,\r\n      \"CASHOUT ERROR: You don't have nodes to cash-out\"\r\n    );\r\n    bool found = false;\r\n    int256 index = _binarySearch(nodes, 0, numberOfNodes, _creationTime);\r\n    uint256 validIndex;\r\n    if (index >= 0) {\r\n      found = true;\r\n      validIndex = uint256(index);\r\n    }\r\n    require(found, \"NODE SEARCH: No NODE Found with this blocktime\");\r\n    return nodes[validIndex];\r\n  }\r\n\r\n  function _binarySearch(\r\n    NodeEntity[] memory arr,\r\n    uint256 low,\r\n    uint256 high,\r\n    uint256 x\r\n  ) private view returns (int256) {\r\n    if (high >= low) {\r\n      uint256 mid = (high + low).div(2);\r\n      if (arr[mid].creationTime == x) {\r\n        return int256(mid);\r\n      } else if (arr[mid].creationTime > x) {\r\n        return _binarySearch(arr, low, mid - 1, x);\r\n      } else {\r\n        return _binarySearch(arr, mid + 1, high, x);\r\n      }\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  \r\n  function _uint2str(uint256 _i)\r\n    private\r\n    pure\r\n    returns (string memory _uintAsString)\r\n  {\r\n    if (_i == 0) {\r\n      return \"0\";\r\n    }\r\n    uint256 j = _i;\r\n    uint256 len;\r\n    while (j != 0) {\r\n      len++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint256 k = len;\r\n    while (_i != 0) {\r\n      k = k - 1;\r\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\r\n      bytes1 b1 = bytes1(temp);\r\n      bstr[k] = b1;\r\n      _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n\r\n  function _calculateNodeRewards(\r\n    uint256 _lastClaimTime,\r\n    uint256 _tier\r\n  ) private view returns (uint256 rewards) {\r\n    uint256 elapsedTime_ = (block.timestamp - _lastClaimTime);\r\n    uint256 boostMultiplier = _calculateBoost(elapsedTime_);\r\n    uint256 rewardPerMonth = _tiersRewards[_tier];\r\n    return\r\n      rewardPerMonth.mul(1e18).div(2628000).mul(elapsedTime_).mul(boostMultiplier).div(100).div(10000);\r\n  }\r\n\r\n  function _calculateBoost(uint256 elapsedTime_)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 elapsedTimeInDays_ = elapsedTime_ / 1 days;\r\n\r\n    if (elapsedTimeInDays_ >= _boostRequiredDays[4]) {\r\n      return _boostMultipliers[4];\r\n    } else if (elapsedTimeInDays_ >= _boostRequiredDays[3]) {\r\n      return _boostMultipliers[3];\r\n    } else if (elapsedTimeInDays_ >= _boostRequiredDays[2]) {\r\n      return _boostMultipliers[2];\r\n    } else if (elapsedTimeInDays_ >= _boostRequiredDays[1]) {\r\n      return _boostMultipliers[1];\r\n    } else if (elapsedTimeInDays_ >= _boostRequiredDays[0]) {\r\n      return _boostMultipliers[0];\r\n    } else {\r\n      return 100;\r\n    }\r\n  }\r\n\r\n  // External methods\r\n\r\n   function upgradeNode(address account, uint256 blocktime) \r\n    external\r\n    onlyGuard\r\n    whenNotPaused\r\n    {\r\n        require(blocktime > 0, \"NODE: CREATIME must be higher than zero\");\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        require(\r\n            nodes.length > 0,\r\n            \"CASHOUT ERROR: You don't have nodes to cash-out\"\r\n            );\r\n        NodeEntity storage node = _getNodeWithCreatime(nodes, blocktime);\r\n        node.tier += 1;\r\n    }\r\n\r\n    function borrowRewards(address account, uint256 blocktime, uint256 amount)\r\n    external\r\n    onlyGuard\r\n    whenNotPaused\r\n    {\r\n        require(blocktime > 0, \"NODE: blocktime must be higher than zero\");\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        require(\r\n            nodes.length > 0,\r\n            \"You don't have any nodes\"\r\n        );\r\n        NodeEntity storage node = _getNodeWithCreatime(nodes, blocktime);\r\n        uint256 rewardsAvailable = _calculateNodeRewards(node.lastClaimTime, node.tier).sub(node.borrowedRewards);\r\n        require(rewardsAvailable >= amount,\"You do not have enough rewards available\");\r\n        node.borrowedRewards += amount;\r\n    }\r\n\r\n  function createNode(\r\n    address account,\r\n    string memory nodeName,\r\n    uint256 _tier\r\n  ) external onlyGuard whenNotPaused {\r\n    require(_isNameAvailable(account, nodeName), \"Name not available\");\r\n    NodeEntity[] storage _nodes = _nodesOfUser[account];\r\n    require(_nodes.length <= 100, \"Max nodes exceeded\");\r\n    uint256 amount = getNodePrice(_tier);\r\n    _nodes.push(\r\n      NodeEntity({\r\n        name: nodeName,\r\n        creationTime: block.timestamp,\r\n        lastClaimTime: block.timestamp,\r\n        amount: amount,\r\n        tier: _tier,\r\n        totalClaimed: 0,\r\n        borrowedRewards: 0,\r\n        bondedMolecules: [uint256(0),0,0],\r\n        bondedMols: 0\r\n      })\r\n    );\r\n    nodeOwners.set(account, _nodesOfUser[account].length);\r\n    emit NodeCreated(account, block.timestamp, amount);\r\n    totalNodesCreated++;\r\n    totalStaked += amount;\r\n  }\r\n\r\n  function getNodeReward(address account, uint256 _creationTime)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    require(\r\n      nodes.length > 0,\r\n      \"CASHOUT ERROR: You don't have nodes to cash-out\"\r\n    );\r\n    NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n    return _calculateNodeRewards(node.lastClaimTime, node.tier).mul(getNodeAPRIncrease(account, _creationTime)).div(10000).sub(node.borrowedRewards);\r\n  }\r\n\r\n  function getAllNodesRewards(address account) external view returns (uint256[2] memory) {\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    uint256 nodesCount = nodes.length;\r\n    require(nodesCount > 0, \"NODE: CREATIME must be higher than zero\");\r\n    NodeEntity storage _node;\r\n    uint256 rewardsTotal = 0;\r\n    uint256 taxTotal = 0;\r\n    for (uint256 i = 0; i < nodesCount; i++) {\r\n      _node = nodes[i];\r\n      uint256 nodeReward =  _calculateNodeRewards(\r\n        _node.lastClaimTime,\r\n        _node.tier\r\n      ).sub(_node.borrowedRewards);\r\n      nodeReward = nodeReward;\r\n      taxTotal += getNodeFee(account, _node.creationTime, nodeReward);\r\n      rewardsTotal += nodeReward;\r\n    }\r\n    return [rewardsTotal, taxTotal];\r\n  }\r\n\r\n  function cashoutNodeReward(address account, uint256 _creationTime)\r\n    external\r\n    onlyGuard\r\n    whenNotPaused\r\n  {\r\n    require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    require(\r\n      nodes.length > 0,\r\n      \"CASHOUT ERROR: You don't have nodes to cash-out\"\r\n    );\r\n    NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n    uint256 toClaim = _calculateNodeRewards(\r\n      node.lastClaimTime,\r\n      node.tier\r\n    ).sub(node.borrowedRewards);\r\n    node.totalClaimed += toClaim;\r\n    node.lastClaimTime = block.timestamp;\r\n    node.borrowedRewards = 0;\r\n  }\r\n\r\n  function cashoutAllNodesRewards(address account)\r\n    external\r\n    onlyGuard\r\n    whenNotPaused \r\n  {\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    uint256 nodesCount = nodes.length;\r\n    require(nodesCount > 0, \"NODE: CREATIME must be higher than zero\");\r\n    NodeEntity storage _node;\r\n    for (uint256 i = 0; i < nodesCount; i++) {\r\n      _node = nodes[i];  \r\n      uint256 toClaim = _calculateNodeRewards(\r\n        _node.lastClaimTime,\r\n        _node.tier\r\n      ).sub(_node.borrowedRewards);\r\n      _node.totalClaimed += toClaim;\r\n      _node.lastClaimTime = block.timestamp;\r\n      _node.borrowedRewards = 0;\r\n    }\r\n  }\r\n\r\n  function setMoleculeAddress(address _moleculesAddress) external onlyOwner {\r\n      molecules = Molecules(_moleculesAddress);\r\n    }\r\n\r\n\r\n\r\n  function bondNFT(uint256 _creationTime, uint256 _tokenId) external {\r\n    address account = _msgSender();\r\n    require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    require(\r\n      nodes.length > 0,\r\n      \"You don't own any nodes\"\r\n    );\r\n    NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n    require(node.bondedMols < 3,\"Already bonded to enough molecules\");\r\n    molecules.bondMolecule(account, _tokenId, node.creationTime);\r\n    node.bondedMolecules[node.bondedMols] = _tokenId;\r\n    node.bondedMols += 1;\r\n    emit NodeBondedToMolecule(account, _tokenId, _creationTime);\r\n  }\r\n\r\n  // function to unbond NFT \r\n\r\n  function unbondNFT(uint256 _creationTime, uint256 _tokenId) external {\r\n    address account = _msgSender();\r\n    require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    require(\r\n      nodes.length > 0,\r\n      \"You don't own any nodes\"\r\n    );\r\n    NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n    require(node.bondedMols > 0,\"No Molecules Bonded\");\r\n    molecules.unbondMolecule(account, _tokenId, node.creationTime);\r\n    uint256[3] memory newArray = [uint256(0),0,0];\r\n    for (uint256 i = 0 ; i < node.bondedMols; i++) {\r\n        if (node.bondedMolecules[i] != _tokenId) {\r\n          newArray[i] = node.bondedMolecules[i];\r\n        }\r\n    }\r\n    node.bondedMolecules = newArray;\r\n    node.bondedMols -= 1;\r\n    emit NodeUnbondedToMolecule(account, _tokenId, _creationTime);\r\n  }\r\n\r\n  function getNodesNames(address account) public view returns (string memory) {\r\n    NodeEntity[] memory nodes = _nodesOfUser[account];\r\n    uint256 nodesCount = nodes.length;\r\n    NodeEntity memory _node;\r\n    string memory names = nodes[0].name;\r\n    string memory separator = \"#\";\r\n    for (uint256 i = 1; i < nodesCount; i++) {\r\n      _node = nodes[i];\r\n      names = string(abi.encodePacked(names, separator, _node.name));\r\n    }\r\n    return names;\r\n  }\r\n\r\n  function getNodesRewards(address account) public view returns (string memory) {\r\n    NodeEntity[] memory nodes = _nodesOfUser[account];\r\n    uint256 nodesCount = nodes.length;\r\n    NodeEntity memory _node;\r\n    string memory rewards = _uint2str(_calculateNodeRewards(nodes[0].lastClaimTime, nodes[0].tier).mul(getNodeAPRIncrease(account, nodes[0].creationTime)).div(10000).sub(nodes[0].borrowedRewards));\r\n    string memory separator = \"#\";\r\n    for (uint256 i = 1; i < nodesCount; i++) {\r\n      _node = nodes[i];\r\n      string memory _rewardStr = _uint2str(_calculateNodeRewards(_node.lastClaimTime, _node.tier).mul(getNodeAPRIncrease(account, _node.creationTime)).div(10000).sub(_node.borrowedRewards));\r\n      rewards = string(abi.encodePacked(rewards, separator, _rewardStr));\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  function getNodesCreationTime(address account)\r\n    public\r\n    view\r\n    returns (string memory)\r\n  {\r\n    NodeEntity[] memory nodes = _nodesOfUser[account];\r\n    uint256 nodesCount = nodes.length;\r\n    NodeEntity memory _node;\r\n    string memory _creationTimes = _uint2str(nodes[0].creationTime);\r\n    string memory separator = \"#\";\r\n\r\n    for (uint256 i = 1; i < nodesCount; i++) {\r\n      _node = nodes[i];\r\n\r\n      _creationTimes = string(\r\n        abi.encodePacked(\r\n          _creationTimes,\r\n          separator,\r\n          _uint2str(_node.creationTime)\r\n        )\r\n      );\r\n    }\r\n    return _creationTimes;\r\n  }\r\n\r\n  function getNodeAPRIncrease(address account, uint256 _creationTime) public view returns (uint256){\r\n    require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    require(\r\n      nodes.length > 0,\r\n      \"You don't own any nodes\"\r\n    );\r\n    NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n    if (node.bondedMols == 0){\r\n      uint256 totalApyBenefit = 10000;\r\n      return totalApyBenefit;\r\n    }\r\n    else {\r\n      uint256 totalApyBenefit = 0;\r\n      for (uint256 i = 0; i < node.bondedMols; i++) {\r\n        if (molecules.getMoleculeKind(node.bondedMolecules[i]) == 2 || molecules.getMoleculeKind(node.bondedMolecules[i]) == 3) {\r\n          uint256 APYBenefit = molecules.getMoleculeLevel(node.bondedMolecules[i]).mul(levelMultiplier).add(250);\r\n          totalApyBenefit += APYBenefit;\r\n        }\r\n      }\r\n      totalApyBenefit += 10000;\r\n      return totalApyBenefit;\r\n    }\r\n  }\r\n\r\n  \r\n  function getNodeTaxDecrease(address account, uint256 _creationTime) public view returns (uint256){\r\n    require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    require(\r\n      nodes.length > 0,\r\n      \"You don't own any nodes\"\r\n    );\r\n    NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n    if (node.bondedMols == 0){\r\n      uint256 totalTaxDecrease = 0;\r\n      return totalTaxDecrease;\r\n    }\r\n    else {\r\n      uint256 totalTaxDecrease = 0;\r\n      for (uint256 i = 0; i < node.bondedMols; i++) {\r\n        if (molecules.getMoleculeKind(node.bondedMolecules[i]) == 1 || molecules.getMoleculeKind(node.bondedMolecules[i]) == 3) {\r\n          uint256 APYBenefit = molecules.getMoleculeLevel(node.bondedMolecules[i]).mul(levelMultiplier).add(250);\r\n          totalTaxDecrease += APYBenefit;\r\n        }\r\n      }\r\n      if (totalTaxDecrease > 10000) {\r\n        totalTaxDecrease = 10000;\r\n      }\r\n      return totalTaxDecrease;\r\n    }\r\n  }\r\n\r\n\r\n  function getNodesLastClaimTime(address account)\r\n    public\r\n    view\r\n    returns (string memory)\r\n  {\r\n    NodeEntity[] memory nodes = _nodesOfUser[account];\r\n    uint256 nodesCount = nodes.length;\r\n    NodeEntity memory _node;\r\n    string memory _lastClaimTimes = _uint2str(nodes[0].lastClaimTime);\r\n    string memory separator = \"#\";\r\n\r\n    for (uint256 i = 1; i < nodesCount; i++) {\r\n      _node = nodes[i];\r\n\r\n      _lastClaimTimes = string(\r\n        abi.encodePacked(\r\n          _lastClaimTimes,\r\n          separator,\r\n          _uint2str(_node.lastClaimTime)\r\n        )\r\n      );\r\n    }\r\n    return _lastClaimTimes;\r\n  }\r\n\r\n  function getNodeFee(\r\n    address account,\r\n    uint256 _creationTime,\r\n    uint256 _rewardsAmount\r\n  ) public view returns (uint256) {\r\n    require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    require(\r\n      nodes.length > 0,\r\n      \"CASHOUT ERROR: You don't have nodes to cash-out\"\r\n    );\r\n    NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n\r\n    uint256 paperHandsTax = 0;\r\n    uint256 claimTx = _rewardsAmount.mul(_claimTaxFees[node.tier]).div(100);\r\n\r\n    uint256 elapsedSeconds = block.timestamp - node.lastClaimTime;\r\n\r\n    if (elapsedSeconds >= _paperHandsWeeks[3].mul(86400).mul(7)) {\r\n      paperHandsTax = _rewardsAmount.mul(_paperHandsTaxes[3]).div(1000);\r\n    } else if (elapsedSeconds >= _paperHandsWeeks[2].mul(86400).mul(7)) {\r\n      paperHandsTax = _rewardsAmount.mul(_paperHandsTaxes[2]).div(1000);\r\n    } else if (elapsedSeconds >= _paperHandsWeeks[1].mul(86400).mul(7)) {\r\n      paperHandsTax = _rewardsAmount.mul(_paperHandsTaxes[1]).div(1000);\r\n    } else if (elapsedSeconds >= _paperHandsWeeks[0].mul(86400).mul(7)) {\r\n      paperHandsTax = _rewardsAmount.mul(_paperHandsTaxes[0]).div(1000);\r\n    } else {\r\n      paperHandsTax = _rewardsAmount.mul(200).div(1000);\r\n    }\r\n    uint256 totalTax = claimTx.add(paperHandsTax);\r\n    uint256 taxRebate = totalTax.mul(getNodeTaxDecrease(account,_creationTime)).div(10000);\r\n\r\n    return totalTax.sub(taxRebate);\r\n  }\r\n\r\n  function updateToken(address newToken) external onlyOwner {\r\n    token = newToken;\r\n  }\r\n\r\n  function updateTiersRewards(uint256[] memory newVal) external onlyOwner {\r\n    require(newVal.length == 5, \"Wrong length\");\r\n    _tiersRewards = newVal;\r\n  }\r\n\r\n  function updateTiersPrice(uint256[] memory newVal) external onlyOwner {\r\n    require(newVal.length == 5, \"Wrong length\");\r\n    _tiersPrice = newVal;\r\n  }\r\n\r\n  function updateBoostMultipliers(uint8[] calldata newVal) external onlyOwner {\r\n    require(newVal.length == 5, \"Wrong length\");\r\n    _boostMultipliers = newVal;\r\n  }\r\n\r\n  function updateBoostRequiredDays(uint8[] calldata newVal) external onlyOwner {\r\n    require(newVal.length == 5, \"Wrong length\");\r\n    _boostRequiredDays = newVal;\r\n  }\r\n\r\n  function getNodeTier(address account, uint256 blocktime) public view returns (uint256) {\r\n    require(blocktime > 0, \"Creation Time has to be higher than 0\");\r\n    require(isNodeOwner(account), \"NOT NODE OWNER\");\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    uint256 numberOfNodes = nodes.length;\r\n    require(\r\n        numberOfNodes > 0,\r\n        \"You don't own any nodes.\"\r\n    );\r\n    NodeEntity storage node = _getNodeWithCreatime(nodes, blocktime);\r\n    return node.tier;\r\n  }\r\n\r\n  function getNodePrice(uint256 _tierIndex) public view returns (uint256) {\r\n    return _tiersPrice[_tierIndex];\r\n  }\r\n\r\n  function getNodeNumberOf(address account) external view returns (uint256) {\r\n    return nodeOwners.get(account);\r\n  }\r\n\r\n  function isNodeOwner(address account) public view returns (bool) {\r\n    return nodeOwners.get(account) > 0;\r\n  }\r\n\r\n  function getNodeMolecules(address account, uint256 blocktime) public view returns (uint256[3] memory) {\r\n    require(blocktime > 0, \"Creation Time has to be higher than 0\");\r\n    require(isNodeOwner(account), \"NOT NODE OWNER\");\r\n    NodeEntity[] storage nodes = _nodesOfUser[account];\r\n    uint256 numberOfNodes = nodes.length;\r\n    require(\r\n        numberOfNodes > 0,\r\n        \"You don't own any nodes.\"\r\n    );\r\n    NodeEntity storage node = _getNodeWithCreatime(nodes, blocktime);\r\n    return node.bondedMolecules;\r\n  }\r\n\r\n  function getAllNodes(address account)\r\n    external\r\n    view\r\n    returns (NodeEntity[] memory)\r\n  {\r\n    return _nodesOfUser[account];\r\n  }\r\n\r\n  function getIndexOfKey(address account)\r\n    external\r\n    view\r\n    onlyOwner\r\n    returns (int256)\r\n  {\r\n    require(account != address(0));\r\n    return nodeOwners.getIndexOfKey(account);\r\n  }\r\n\r\n  function burn(uint256 index) external onlyOwner {\r\n    require(index < nodeOwners.size());\r\n    nodeOwners.remove(nodeOwners.getKeyAtIndex(index));\r\n  }\r\n\r\n  // User Methods\r\n\r\n  function changeNodeName(uint256 _creationTime, string memory newName) \r\n    public \r\n    {\r\n        address sender = msg.sender;\r\n        require(isNodeOwner(sender), \"NOT NODE OWNER\");\r\n        NodeEntity[] storage nodes = _nodesOfUser[sender];\r\n        uint256 numberOfNodes = nodes.length;\r\n        require(\r\n            numberOfNodes > 0,\r\n            \"You don't own any nodes.\"\r\n        );\r\n        NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\r\n        node.name = newName;\r\n    }\r\n\r\n\r\n  // Firewall methods\r\n\r\n  function pause() external onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  function unpause() external onlyOwner {\r\n    _unpause();\r\n  }\r\n}\r\n// File: contracts/Oxygen_eth.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OXG is ERC20, Ownable, PaymentSplitter {\r\n    using SafeMath for uint256;\r\n\r\n    NodeManager public nodeManager;\r\n    Molecules public molecules;\r\n\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n    address public teamPool;\r\n    address public distributionPool;\r\n    address public devPool;\r\n    address public advisorPool;\r\n\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public rewardsFee;\r\n    uint256 public liquidityPoolFee;\r\n    uint256 public futurFee;\r\n    uint256 public totalFees;\r\n\r\n    uint256 public sellTax = 10;\r\n\r\n\r\n    uint256 public cashoutFee;\r\n\r\n    uint256 private rwSwap;\r\n    uint256 private devShare = 20;\r\n    uint256 private advisorShare = 40;\r\n    bool private swapping = false;\r\n    bool private swapLiquify = true;\r\n    uint256 public swapTokensAmount;\r\n    uint256 public growMultiplier = 2e18; //multiplier for growing molecules e.g. level 1 molecule needs 2 OXG to become a level 2, level 2 needs 4 OXG to become level 3\r\n\r\n    bool private tradingOpen = false;\r\n    bool public nodeEnforced = true;\r\n    uint256 private _openTradingBlock = 0;\r\n    uint256 private maxTx = 375;\r\n\r\n    mapping(address => bool) public _isBlacklisted;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event LiquidityWalletUpdated(\r\n        address indexed newLiquidityWallet,\r\n        address indexed oldLiquidityWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    constructor(\r\n        address[] memory payees,\r\n        uint256[] memory shares,\r\n        address uniV2Router\r\n    ) ERC20(\"Oxy-Fi\", \"OXY\") PaymentSplitter(payees, shares) {\r\n\r\n        teamPool = 0xaf4a303E107b47f11F2e744c547885b8A9A4E2F7;\r\n        distributionPool = 0xAD2ea18F968a23a35580CF6Aca562d9F7b380644;\r\n        devPool = 0x1feffA18be68B22A5882f76E180c1666EF667E15;\r\n        advisorPool = 0x457276267e0f0C86a6Ddf3674Cc4f36e067C42e0;\r\n\r\n        require(uniV2Router != address(0), \"ROUTER CANNOT BE ZERO\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(uniV2Router);\r\n\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        futurFee = 13;\r\n        rewardsFee = 80;\r\n        liquidityPoolFee = 7;\r\n        rwSwap = 25;\r\n\r\n        totalFees = rewardsFee.add(liquidityPoolFee).add(futurFee);\r\n\r\n\r\n        _mint(_msgSender(), 300000e18);\r\n\r\n        require(totalSupply() == 300000e18, \"CONSTR: totalSupply must equal 300,000\");\r\n        swapTokensAmount = 100 * (10**18);\r\n    }\r\n\r\n    function setNodeManagement(address nodeManagement) external onlyOwner {\r\n        nodeManager = NodeManager(nodeManagement);\r\n    }\r\n\r\n    function setMolecules(address moleculesAddress) external onlyOwner {\r\n        molecules = Molecules(moleculesAddress);\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(newAddress != address(uniswapV2Router), \"TKN: The router already has that address\");\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n        .createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n    }\r\n\r\n    function updateSwapTokensAmount(uint256 newVal) external onlyOwner {\r\n        swapTokensAmount = newVal;\r\n    }\r\n\r\n    function updateFuturWall(address payable wall) external onlyOwner {\r\n        teamPool = wall;\r\n    }\r\n\r\n    function updateDevWall(address payable wall) external onlyOwner {\r\n        devPool = wall;\r\n    }\r\n\r\n    function updateRewardsWall(address payable wall) external onlyOwner {\r\n        distributionPool = wall;\r\n    }\r\n\r\n    function updateRewardsFee(uint256 value) external onlyOwner {\r\n        rewardsFee = value;\r\n        totalFees = rewardsFee.add(liquidityPoolFee).add(futurFee);\r\n    }\r\n\r\n    function updateLiquidityFee(uint256 value) external onlyOwner {\r\n        liquidityPoolFee = value;\r\n        totalFees = rewardsFee.add(liquidityPoolFee).add(futurFee);\r\n    }\r\n\r\n    function updateFuturFee(uint256 value) external onlyOwner {\r\n        futurFee = value;\r\n        totalFees = rewardsFee.add(liquidityPoolFee).add(futurFee);\r\n    }\r\n\r\n    function updateCashoutFee(uint256 value) external onlyOwner {\r\n        cashoutFee = value;\r\n    }\r\n\r\n    function updateRwSwapFee(uint256 value) external onlyOwner {\r\n        rwSwap = value;\r\n    }\r\n\r\n    function updateSellTax(uint256 value) external onlyOwner {\r\n        sellTax = value;\r\n    }\r\n\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"TKN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function blacklistMalicious(address account, bool value)\r\n    external\r\n    onlyOwner\r\n    {\r\n        _isBlacklisted[account] = value;\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"TKN: Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(\r\n            !_isBlacklisted[from] && !_isBlacklisted[to],\r\n            \"Blacklisted address\"\r\n        );\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        if (to == address(uniswapV2Pair) && (from != address(this) && from != owner()) && nodeEnforced){\r\n            require(nodeManager.isNodeOwner(from), \"You need to own a node to be able to sell\");\r\n            uint256 sellTaxAmount = amount.mul(sellTax).div(100);\r\n            super._transfer(from,address(this), sellTaxAmount);\r\n            amount = amount.sub(sellTaxAmount);\r\n            \r\n        }\r\n        uint256 amount2 = amount;\r\n        if (from != owner() && to != uniswapV2Pair && to != address(uniswapV2Router) && to != address(this) && from != address(this) ) {\r\n            // require(tradingOpen, \"Trading not yet enabled.\");\r\n            \r\n            if (!tradingOpen) {\r\n                amount2 = amount.div(100);\r\n                super._transfer(from,address(this),amount.sub(amount2));\r\n\r\n            }\r\n\r\n            // anti whale\r\n            if (to != teamPool && to != distributionPool && to != devPool && from != teamPool && from != distributionPool && from != devPool) {\r\n                uint256 walletBalance = balanceOf(address(to));\r\n                require(\r\n                    amount2.add(walletBalance) <= maxTx.mul(1e18), \r\n                    \"STOP TRYING TO BECOME A WHALE. WE KNOW WHO YOU ARE.\")\r\n                ;\r\n            }\r\n        }\r\n        super._transfer(from, to, amount2);\r\n    }\r\n\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half);\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            distributionPool,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function createNodeWithTokens(string memory name, uint256  tier) public {\r\n        require(\r\n            bytes(name).length > 3 && bytes(name).length < 32,\r\n            \"NODE CREATION: NAME SIZE INVALID\"\r\n        );\r\n        address sender = _msgSender();\r\n        require(\r\n            sender != address(0),\r\n            \"NODE CREATION:  creation from the zero address\"\r\n        );\r\n        require(!_isBlacklisted[sender], \"NODE CREATION: Blacklisted address\");\r\n        require(\r\n            sender != distributionPool,\r\n            \"NODE CREATION: futur, dev and rewardsPool cannot create node\"\r\n        );\r\n    \r\n        uint256 nodePrice = nodeManager._tiersPrice(tier);\r\n        require(\r\n            balanceOf(sender) >= nodePrice.mul(1e18),\r\n            \"NODE CREATION: Balance too low for creation. Try lower tier.\"\r\n        );\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool swapAmountOk = contractTokenBalance >= swapTokensAmount;\r\n        if (\r\n            swapAmountOk &&\r\n            swapLiquify &&\r\n            !swapping &&\r\n            sender != owner() &&\r\n            !automatedMarketMakerPairs[sender]\r\n        ) {\r\n            swapping = true;\r\n\r\n            uint256 fdTokens = contractTokenBalance.mul(futurFee).div(100);\r\n            uint256 devTokens = fdTokens.mul(devShare).div(100);\r\n            uint256 advTokens = fdTokens.mul(advisorShare).div(100);\r\n            uint256 teamTokens = fdTokens.sub(devTokens).sub(advTokens);\r\n\r\n\r\n            uint256 rewardsPoolTokens = contractTokenBalance.mul(rewardsFee).div(100);\r\n\r\n            uint256 rewardsTokenstoSwap = rewardsPoolTokens.mul(rwSwap).div(\r\n                100\r\n            );\r\n            \r\n            super._transfer(address(this),distributionPool,rewardsPoolTokens.sub(rewardsTokenstoSwap));\r\n\r\n            uint256 swapTokens = contractTokenBalance.mul(liquidityPoolFee).div(100);\r\n            swapAndLiquify(swapTokens);\r\n            swapTokensForEth(balanceOf(address(this)));\r\n            uint256 totalTaxTokens = devTokens.add(teamTokens).add(rewardsTokenstoSwap).add(advTokens);\r\n            \r\n            uint256 ETHBalance = address(this).balance;\r\n\r\n            payable(devPool).transfer(ETHBalance.mul(devTokens).div(totalTaxTokens));\r\n            payable(teamPool).transfer(ETHBalance.mul(teamTokens).div(totalTaxTokens));\r\n            payable(advisorPool).transfer(ETHBalance.mul(advTokens).div(totalTaxTokens));\r\n            distributionPool.call{value: balanceOf(address(this))}(\"\");\r\n         \r\n            swapping = false;\r\n        }\r\n        super._transfer(sender, address(this), nodePrice.mul(1e18));\r\n        nodeManager.createNode(sender, name, tier);\r\n    }\r\n\r\n    function createNodeWithRewards(uint256 blocktime, string memory name, uint256 tier) public {\r\n        require(\r\n            bytes(name).length > 3 && bytes(name).length < 32,\r\n            \"NODE CREATION: NAME SIZE INVALID\"\r\n        );\r\n        address sender = _msgSender();\r\n        require(\r\n            sender != address(0),\r\n            \"NODE CREATION:  creation from the zero address\"\r\n        );\r\n        require(!_isBlacklisted[sender], \"NODE CREATION: Blacklisted address\");\r\n        require(\r\n            sender != distributionPool,\r\n            \"NODE CREATION: rewardsPool cannot create node\"\r\n        );\r\n        uint256 nodePrice = nodeManager._tiersPrice(tier);\r\n        uint256 rewardOf = nodeManager.getNodeReward(sender, blocktime);\r\n        require(\r\n            rewardOf >= nodePrice.mul(1e18),\r\n            \"NODE CREATION: Reward Balance too low for creation.\"\r\n        );\r\n        nodeManager.borrowRewards(sender, blocktime, nodeManager.getNodePrice(tier).mul(1e18));\r\n        nodeManager.createNode(sender, name, tier);\r\n        super._transfer(distributionPool, address(this), nodePrice.mul(1e18));\r\n    }\r\n\r\n\r\n    function upgradeNode(uint256 blocktime) public {\r\n        address sender = _msgSender();\r\n        require(sender != address(0), \"Zero address not permitted\");\r\n        require(!_isBlacklisted[sender], \"MANIA CSHT: Blacklisted address\");\r\n        require(\r\n            sender != distributionPool,\r\n            \"Cannot upgrade nodes\"\r\n        );\r\n        uint256 currentTier = nodeManager.getNodeTier(sender, blocktime);\r\n        require(currentTier < 4, \"Your Node is already at max level\");\r\n        uint256 nextTier = currentTier.add(1);\r\n        uint256 currentPrice = nodeManager.getNodePrice(currentTier);\r\n        uint256 newPrice = nodeManager.getNodePrice(nextTier);\r\n        uint256 priceDiff = (newPrice.sub(currentPrice)).mul(1e18);\r\n        uint256 rewardOf = nodeManager.getNodeReward(sender, blocktime);\r\n        if (rewardOf > priceDiff) {\r\n            upgradeNodeCashout(sender, blocktime, rewardOf.sub(priceDiff));\r\n            super._transfer(distributionPool, address(this), priceDiff);\r\n            nodeManager.cashoutNodeReward(sender, blocktime);\r\n\r\n        }\r\n        else if (rewardOf < priceDiff) {\r\n            upgradeNodeAddOn(sender, blocktime, priceDiff.sub(rewardOf));\r\n            super._transfer(distributionPool, address(this), rewardOf);\r\n            nodeManager.cashoutNodeReward(sender, blocktime);\r\n        }\r\n        \r\n    }\r\n\r\n    function upgradeNodeCashout(address account, uint256 blocktime, uint256 cashOutAmount) internal {\r\n        uint256 taxAmount = nodeManager.getNodeFee(account, blocktime,cashOutAmount);\r\n        super._transfer(distributionPool, account, cashOutAmount.sub(taxAmount)); \r\n        super._transfer(distributionPool, address(this), taxAmount);\r\n        nodeManager.upgradeNode(account, blocktime);\r\n    }\r\n\r\n    function upgradeNodeAddOn(address account, uint256 blocktime, uint256 AddAmount) internal {\r\n        super._transfer(account, address(this), AddAmount);\r\n        nodeManager.upgradeNode(account, blocktime);\r\n    }\r\n\r\n    function growMolecule(uint256 _tokenId) external {\r\n        address sender = _msgSender();\r\n        uint256 molLevel = molecules.getMoleculeLevel(_tokenId);\r\n        uint256 growPrice = molLevel.mul(growMultiplier);\r\n        require(balanceOf(sender) > growPrice, \"Not enough OXG to grow your Molecule\");\r\n        super._transfer(sender, address(this), growPrice);\r\n        molecules.growMolecule(_tokenId);\r\n    }\r\n\r\n\r\n    function cashoutReward(uint256 blocktime) public {\r\n        address sender = _msgSender();\r\n        require(sender != address(0), \"CSHT:  can't from the zero address\");\r\n        require(!_isBlacklisted[sender], \"MANIA CSHT: Blacklisted address\");\r\n        require(\r\n            sender != teamPool && sender != distributionPool,\r\n            \"CSHT: futur and rewardsPool cannot cashout rewards\"\r\n        );\r\n        uint256 rewardAmount = nodeManager.getNodeReward(\r\n            sender,\r\n            blocktime\r\n        );\r\n        require(\r\n            rewardAmount > 0,\r\n            \"CSHT: You don't have enough reward to cash out\"\r\n        );\r\n\r\n        uint256 taxAmount = nodeManager.getNodeFee(sender, blocktime,rewardAmount);\r\n        super._transfer(distributionPool, sender, rewardAmount.sub(taxAmount));\r\n        super._transfer(distributionPool, address(this), taxAmount);\r\n        nodeManager.cashoutNodeReward(sender, blocktime);\r\n    }\r\n\r\n    function cashoutAll() public {\r\n        address sender = _msgSender();\r\n        require(\r\n            sender != address(0),\r\n            \"MANIA CSHT:  creation from the zero address\"\r\n        );\r\n        require(!_isBlacklisted[sender], \"MANIA CSHT: Blacklisted address\");\r\n        require(\r\n            sender != teamPool && sender != distributionPool,\r\n            \"MANIA CSHT: futur and rewardsPool cannot cashout rewards\"\r\n        );\r\n        uint256[2] memory rewardTax = nodeManager.getAllNodesRewards(sender);\r\n        uint256 rewardAmount = rewardTax[0];\r\n        uint256 taxAmount = rewardTax[1];\r\n        require(\r\n            rewardAmount > 0,\r\n            \"MANIA CSHT: You don't have enough reward to cash out\"\r\n        );\r\n        super._transfer(distributionPool, sender, rewardAmount);\r\n        super._transfer(distributionPool, address(this), taxAmount);\r\n        nodeManager.cashoutAllNodesRewards(sender);\r\n    }\r\n\r\n    function rescueFunds(uint amount) public onlyOwner {\r\n        if (amount > address(this).balance) amount = address(this).balance;\r\n        payable(owner()).transfer(amount);\r\n    }\r\n\r\n\r\n    function changeSwapLiquify(bool newVal) public onlyOwner {\r\n        swapLiquify = newVal;\r\n    }\r\n\r\n    function getNodeNumberOf(address account) public view returns (uint256) {\r\n        return nodeManager.getNodeNumberOf(account);\r\n    }\r\n\r\n    function getRewardAmountOf(address account)\r\n    public\r\n    view\r\n    onlyOwner\r\n    returns (uint256[2] memory)\r\n    {\r\n        return nodeManager.getAllNodesRewards(account);\r\n    }\r\n\r\n    function getRewardAmount() public view returns (uint256[2] memory) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeManager.isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeManager.getAllNodesRewards(_msgSender());\r\n    }\r\n\r\n    function updateTiersRewards(uint256[] memory newVal) external onlyOwner {\r\n        require(newVal.length == 5, \"Wrong length\");\r\n        nodeManager.updateTiersRewards(newVal);\r\n  }\r\n\r\n    function getNodesNames() public view returns (string memory) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeManager.isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeManager.getNodesNames(_msgSender());\r\n    }\r\n\r\n    function getNodesCreatime() public view returns (string memory) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeManager.isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeManager.getNodesCreationTime(_msgSender());\r\n    }\r\n\r\n    function getNodesRewards() public view returns (string memory) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeManager.isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeManager.getNodesRewards(_msgSender());\r\n    }\r\n\r\n    function getNodesLastClaims() public view returns (string memory) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeManager.isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeManager.getNodesLastClaimTime(_msgSender());\r\n    }\r\n\r\n\r\n    function getTotalStakedReward() public view returns (uint256) {\r\n        return nodeManager.totalStaked();\r\n    }\r\n\r\n    function getTotalCreatedNodes() public view returns (uint256) {\r\n        return nodeManager.totalNodesCreated();\r\n    }\r\n\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        tradingOpen = true;\r\n        _openTradingBlock = block.number;\r\n    }\r\n\r\n    function nodeEnforcement(bool val) external onlyOwner() {\r\n        nodeEnforced = val;\r\n    }\r\n\r\n    function updateMaxTxAmount(uint256 newVal) public onlyOwner {\r\n        maxTx = newVal;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"uniV2Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"advisorPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistMalicious\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashoutFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"cashoutReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newVal\",\"type\":\"bool\"}],\"name\":\"changeSwapLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"createNodeWithRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"createNodeWithTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futurFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNodeNumberOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesCreatime\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesLastClaims\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodesRewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardAmountOf\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCreatedNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"growMolecule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"growMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"molecules\",\"outputs\":[{\"internalType\":\"contract Molecules\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeEnforced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"nodeEnforcement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeManager\",\"outputs\":[{\"internalType\":\"contract NodeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moleculesAddress\",\"type\":\"address\"}],\"name\":\"setMolecules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeManagement\",\"type\":\"address\"}],\"name\":\"setNodeManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateCashoutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateDevWall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateFuturFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateFuturWall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateRewardsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wall\",\"type\":\"address\"}],\"name\":\"updateRewardsWall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateRwSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newVal\",\"type\":\"uint256[]\"}],\"name\":\"updateTiersRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"upgradeNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OXG", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000001feffa18be68b22a5882f76e180c1666ef667e1500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20decf58842156897d98ab79d984540e98d9dc9d52eab19bc329196766f161a1"}]}