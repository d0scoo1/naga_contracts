{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/misc/WPUNKSGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.11;\\n\\nimport {Ownable} from '../dependencies/openzeppelin/contracts/Ownable.sol';\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IERC721} from \\\"../dependencies/openzeppelin/contracts/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"../dependencies/openzeppelin/contracts/IERC721Receiver.sol\\\";\\n\\nimport {ILendingPool} from \\\"../interfaces/ILendingPool.sol\\\";\\nimport {INToken} from \\\"../interfaces/INToken.sol\\\";\\nimport {IPunks} from \\\"./interfaces/IPunks.sol\\\";\\nimport {IWrappedPunks} from \\\"./interfaces/IWrappedPunks.sol\\\";\\nimport {IWPUNKSGateway} from \\\"./interfaces/IWPUNKSGateway.sol\\\";\\n\\ncontract WPUNKSGateway is IWPUNKSGateway, IERC721Receiver, Ownable {\\n  \\n  IPunks internal immutable PUNKS;\\n  IWrappedPunks internal immutable WPUNKS;\\n  address internal immutable proxy;\\n\\n  constructor(address punks, address wrappedPunks) public {\\n    PUNKS = IPunks(punks);\\n    WPUNKS = IWrappedPunks(wrappedPunks);\\n    WPUNKS.registerProxy();\\n    proxy = WPUNKS.proxyInfo(address(this));    \\n  }\\n\\n  function authorizeLendingPool(address lendingPool) external onlyOwner {\\n    WPUNKS.setApprovalForAll(lendingPool, true);\\n  }\\n\\n  function _mintToWPUNKS(\\n    uint256[] calldata punkIndices,\\n    uint256[] calldata amounts) internal {\\n    require(punkIndices.length == amounts.length, \\\"PunkGateway: Invalid amount\\\");\\n    for(uint256 i = 0; i < punkIndices.length; ++i){\\n      uint256 punkIndex = punkIndices[i];\\n      address owner = PUNKS.punkIndexToAddress(punkIndex);\\n      require(amounts[i] > 0, \\\"PunkGateway: Invalid amount\\\");\\n      require(owner == _msgSender(), \\\"PunkGateway: not owner of punkIndex\\\");\\n      PUNKS.buyPunk(punkIndex);\\n      PUNKS.transferPunk(proxy, punkIndex);\\n      WPUNKS.mint(punkIndex);\\n    }\\n  }\\n  \\n  function depositPUNKS(\\n    address lendingPool, \\n    uint256[] calldata punkIndices,\\n    uint256[] calldata amounts,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external override {\\n    _mintToWPUNKS(punkIndices, amounts);\\n    ILendingPool(lendingPool).depositNFT(address(WPUNKS), punkIndices, amounts, onBehalfOf, referralCode);\\n  }\\n\\n  function depositAndLockPUNKS(\\n    address lendingPool,\\n    uint256[] calldata punkIndices,\\n    uint256[] calldata amounts,\\n    address onBehalfOf,\\n    uint16 lockType,\\n    uint16 referralCode\\n  ) external override {\\n    _mintToWPUNKS(punkIndices, amounts);\\n    ILendingPool(lendingPool).depositAndLockNFT(address(WPUNKS), punkIndices, amounts, onBehalfOf, lockType, referralCode);\\n  }\\n\\n  function withdrawPUNKS(\\n    address lendingPool,\\n    uint256[] calldata punkIndices,\\n    uint256[] calldata amounts,\\n    address to\\n  ) external override {\\n    require(punkIndices.length == amounts.length, \\\"PunkGateway: Invalid amount\\\");\\n    INToken nPUNKS = INToken(ILendingPool(lendingPool).getNFTVaultData(address(WPUNKS)).nTokenAddress);\\n    for(uint256 i = 0; i < punkIndices.length; ++i){\\n      nPUNKS.safeTransferFrom(msg.sender, address(this), punkIndices[i]);\\n    }\\n    ILendingPool(lendingPool).withdrawNFT(address(WPUNKS), punkIndices, amounts, address(this));\\n    for(uint256 i = 0; i < punkIndices.length; ++i){\\n      uint256 punkIndex = punkIndices[i];\\n      WPUNKS.burn(punkIndex);\\n      PUNKS.transferPunk(to, punkIndex);\\n    }\\n  }\\n\\n  /**\\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\\n   * direct transfers to the contract address.\\n   * @param token token to transfer\\n   * @param to recipient of the transfer\\n   * @param amount amount to send\\n   */\\n  function emergencyTokenTransfer(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(to, amount);\\n  }\\n\\n  /**\\n   * @dev transfer ERC721 from the utility contract, for ERC721 recovery in case of stuck tokens due\\n   * direct transfers to the contract address.\\n   * @param nft nft to transfer\\n   * @param to recipient of the transfer\\n   */\\n  function emergencyNFTTransfer(\\n    address nft,\\n    address to,\\n    uint256 tokenId\\n  ) external onlyOwner {\\n    IERC721(nft).safeTransferFrom(address(this), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev transfer ETH to an address, revert if it fails.\\n   * @param to recipient of the transfer\\n   * @param value the amount to send\\n   */\\n  function _safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, 'ETH_TRANSFER_FAILED');\\n  }\\n\\n  /**\\n   * @dev transfer native Ether from the utility contract, for native Ether recovery in case of stuck Ether\\n   * due selfdestructs or transfer ether to pre-computated contract address before deployment.\\n   * @param to recipient of the transfer\\n   * @param amount amount to send\\n   */\\n  function emergencyEtherTransfer(address to, uint256 amount) external onlyOwner {\\n    _safeTransferETH(to, amount);\\n  }\\n\\n  function onERC721Received(\\n    address operator, \\n    address from, \\n    uint256 tokenId, \\n    bytes calldata data\\n  ) external override returns (bytes4)\\n  {\\n    return this.onERC721Received.selector;\\n  }\\n\\n  function getPUNKSAddress() external view returns (address) {\\n    return address(PUNKS);\\n  }\\n\\n  function getWPUNKSAddress() external view returns (address) {\\n    return address(WPUNKS);\\n  }\\n\\n  function getWPUNKSProxyAddress() external view returns (address) {\\n    return address(proxy);\\n  }\\n\\n  /**\\n   * @dev\\n   */\\n  receive() external payable {\\n    revert(\\\"Receive not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev Revert fallback calls\\n   */\\n  fallback() external payable {\\n    revert(\\\"Fallback not allowed\\\");\\n  }\\n\\n  \\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.11;\\npragma abicoder v2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the vTokens\\n   * @param amount The amount deposited\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of vTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  event DepositNFT(\\n    address indexed vault, \\n    address user,\\n    address indexed onBehalfOf, \\n    uint256[] tokenIds, \\n    uint256[] amounts,\\n    uint16 indexed referral\\n  );\\n\\n  event WithdrawNFT(\\n    address indexed vault, \\n    address indexed user, \\n    address indexed to, \\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n\\n  /**\\n   * @dev Emitted on nftFlashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param tokenIds The token IDs for each NFT being flash borrowed\\n   * @param amounts The amounts for each NFT being flash borrowed\\n   * @param premium The fee flash borrowed\\n   **/\\n  event NFTFlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256[] tokenIds,\\n    uint256[] amounts,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when a reserve is disabled as collateral for an user\\n   * @param reserve The address of the reserve\\n   * @param user The address of the user\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted when a reserve is enabled as collateral for an user\\n   * @param reserve The address of the reserve\\n   * @param user The address of the user\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseNFTVaultAsCollateral()\\n   * @param nftVault The address of the underlying asset of the vault\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event NFTVaultUsedAsCollateralEnabled(address indexed nftVault, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseNFTVaultAsCollateral()\\n   * @param nftVault The address of the underlying asset of the vault\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event NFTVaultUsedAsCollateralDisabled(address indexed nftVault, address indexed user);\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying vTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the vTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of vTokens\\n   *   is a different wallet\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent vTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole vToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Deposits an `amounts[i]` of underlying `tokenIds[i]` into the NFT reserve, receiving in return overlying nTokens.\\n   * @param tokenIds The tokenIds of the NFTs to be deposited\\n   * @param amounts For ERC1155 only: The amounts of NFTs to be deposited\\n   * @param onBehalfOf The address that will receive the nTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of nTokens\\n   *   is a different wallet\\n   **/\\n  function depositNFT(\\n    address nft,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Deposits an `amounts[i]` of underlying `tokenIds[i]` into the NFT reserve, receiving in return overlying nTokens.\\n   * @param tokenIds The tokenIds of the NFTs to be deposited\\n   * @param amounts For ERC1155 only: The amounts of NFTs to be deposited\\n   * @param onBehalfOf The address that will receive the nTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of nTokens\\n   *   is a different wallet\\n   **/\\n  function depositAndLockNFT(\\n    address nft,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    address onBehalfOf,\\n    uint16 lockType,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amounts[i]` of nTokens with `tokenIds[i]` from the reserve, burning the equivalent nTokens owned\\n   * @param tokenIds The tokenIds of the NFTs to be withdraw\\n   * @param amounts For ERC1155 only: The amounts of NFTs to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole ERC1155 tokenId balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn. \\n       - the `returnedValue[i]` equals the amount of `tokenIds[i]` that has been withdrawn.\\n   **/\\n  function withdrawNFT(\\n    address nft,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    address to\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral.\\n   * @param amount The amount to be borrowed\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  function nftLiquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256[] memory tokenIds,\\n    uint256[] memory amounts,\\n    bool receiveNToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the nft vault of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the INFTFlashLoanReceiver interface\\n   * @param asset The addresses of the assets being flash-borrowed\\n   * @param tokenIds The tokenIds of the NFTs being flash-borrowed\\n   * @param amounts For ERC1155 only: The amounts of NFTs being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   **/\\n  function nftFlashLoan(\\n    address receiverAddress,\\n    address asset,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address vTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function initNFTVault(\\n    address vault,\\n    address nTokenAddress,\\n    address nftEligibility\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n  function setNFTVaultConfiguration(address reserve, uint256 configuration) external;\\n  function setNFTVaultActionExpiration(address nftValue, uint40 expiration) external;\\n  function setNFTVaultEligibility(address nftValue, address eligibility) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the NFT reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getNFTVaultConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.NFTVaultConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @dev Returns the state and configuration of the NFT reserve\\n   * @param asset The address of the underlying NFT of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getNFTVaultData(address asset) external view returns (DataTypes.NFTVaultData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function finalizeNFTSingleTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function finalizeNFTBatchTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n  function getNFTVaultsList() external view returns (address[] memory);\\n\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.11;\\n\\nimport {ITimeLockableERC721} from './ITimeLockableERC721.sol';\\nimport {IInitializableNToken} from './IInitializableNToken.sol';\\n\\ninterface INToken is ITimeLockableERC721, IInitializableNToken {\\n    /**\\n    * @dev Emitted after the mint action\\n    * @param from The address performing the mint\\n    * @param tokenId The token id being\\n    * @param value The amount being\\n    **/\\n    event Mint(address indexed from, uint256 tokenId, uint256 value);\\n\\n    /**\\n    * @dev Mints `amount` NTokens with `tokenId` to `user`\\n    * @param user The address receiving the minted tokens\\n    * @param tokenId The NFT's id\\n    * @param amount The amount of tokens getting minted\\n    * @return `true` if the the previous balance of the user was 0\\n    */\\n    function mint(\\n        address user,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n   * @dev Emitted after nTokens are burned\\n   * @param from The owner of the nTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param tokenId The token id being burned\\n   * @param value The amount being burned\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 tokenId, uint256 value);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param tokenId The NFT token id being transfered\\n   * @param amount The amount being transferred\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 tokenId, uint256 amount);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param tokenIds The ids of NFT tokens being transferred\\n   * @param amounts The amounts being transferred\\n   **/\\n  event BalanceBatchTransfer(address indexed from, address indexed to, uint256[] tokenIds, uint256[] amounts);\\n\\n  /**\\n   * @dev Burns nTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the vTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param tokenId The token id being burned\\n   * @param amount The amount being burned\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external;\\n\\n  function burnBatch(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256[] memory tokenIds,\\n    uint256[] memory amounts\\n  ) external;\\n\\n  /**\\n   * @dev Transfers nTokens in the event of a borrow being liquidated, in case the liquidators reclaims the nToken\\n   * @param from The address getting liquidated, current owner of the vTokens\\n   * @param to The recipient\\n   * @param tokenIds The token id of tokens getting transffered\\n   * @param values The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256[] memory tokenIds,\\n    uint256[] memory values\\n  ) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in withdrawNFT()\\n   * @param user The recipient of the underlying\\n   * @param tokenId The token id getting transferred\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 tokenId, uint256 amount) external returns (uint256);\\n\\n  function getLiquidationAmounts(address user, uint256 maxTotal, uint256[] memory tokenIds, uint256[] memory amounts) external view returns(uint256, uint256[] memory);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this nToken\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/misc/interfaces/IPunks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.11;\\n\\n/**\\n * @dev Interface for a permittable ERC721 contract\\n * See https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC72 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC721-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IPunks {\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function punkIndexToAddress(uint256 punkIndex) external view returns (address owner);\\n\\n  function buyPunk(uint256 punkIndex) external;\\n\\n  function transferPunk(address to, uint256 punkIndex) external;\\n}\\n\"\r\n    },\r\n    \"contracts/misc/interfaces/IWrappedPunks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.11;\\n\\nimport {IERC721} from \\\"../../dependencies/openzeppelin/contracts/IERC721.sol\\\";\\n\\n/**\\n * @dev Interface for a permittable ERC721 contract\\n * See https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC72 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC721-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IWrappedPunks is IERC721 {\\n  function punkContract() external view returns (address);\\n\\n  function mint(uint256 punkIndex) external;\\n\\n  function burn(uint256 punkIndex) external;\\n\\n  function registerProxy() external;\\n\\n  function proxyInfo(address user) external returns (address proxy);\\n}\\n\"\r\n    },\r\n    \"contracts/misc/interfaces/IWPUNKSGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.11;\\n\\ninterface IWPUNKSGateway {\\n  function depositPUNKS(\\n    address lendingPool,\\n    uint256[] calldata punkIndices,\\n    uint256[] calldata amounts,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  function depositAndLockPUNKS(\\n    address lendingPool,\\n    uint256[] calldata punkIndices,\\n    uint256[] calldata amounts,\\n    address onBehalfOf,\\n    uint16 lockType,\\n    uint16 referralCode\\n  ) external;\\n\\n  function withdrawPUNKS(\\n    address lendingPool,\\n    uint256[] calldata punkIndices,\\n    uint256[] calldata amounts,\\n    address to\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.11;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.11;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address vTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct NFTVaultData {\\n    NFTVaultConfigurationMap configuration;\\n    address nTokenAddress;\\n    address nftEligibility;\\n    uint32 id;\\n    uint40 expiration;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct NFTVaultConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. thresold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: reserved\\n    //bit 56: Vault is active\\n    //bit 57: Vault is frozen\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n    uint256 nData;\\n  }\\n\\n  struct PoolReservesData {\\n    uint256 count;\\n    mapping(address => ReserveData) data;\\n    mapping(uint256 => address) list;\\n  }\\n\\n  struct PoolNFTVaultsData {\\n    uint256 count;\\n    mapping(address => NFTVaultData) data;\\n    mapping(uint256 => address) list;\\n  }\\n\\n  struct TimeLock {\\n    uint40 expiration;\\n    uint16 lockType;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITimeLockableERC721.sol\": {\r\n      \"content\": \"pragma solidity 0.8.11;\\n\\nimport {IERC721} from '../dependencies/openzeppelin/contracts/IERC721.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ITimeLockableERC721 is IERC721 {\\n  event TimeLocked(\\n    uint256 indexed tokenid,\\n    uint256 indexed lockType,\\n    uint40 indexed expirationTime\\n  );\\n\\n  function lock(uint256 tokenid, uint16 lockType) external;\\n\\n  function getUnlockTime(uint256 tokenId) external view returns(uint40 unlockTime);\\n\\n  function getLockData(uint256 tokenId) external view returns(DataTypes.TimeLock memory lock);\\n\\n  function unlockedBalanceOfBatch(address user, uint256[] memory tokenIds) external view returns(uint256[] memory amounts);\\n\\n  function tokensAndLocksByAccount(address user) external view returns(uint256[] memory tokenIds, DataTypes.TimeLock[] memory locks);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IInitializableNToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.11;\\n\\nimport {ILendingPool} from './ILendingPool.sol';\\n\\n/**\\n * @title IInitializableVToken\\n * @notice Interface for the initialize function on NToken\\n * @author Aave\\n **/\\ninterface IInitializableNToken {\\n  /**\\n   * @dev Emitted when an vToken is initialized\\n   * @param underlyingAsset The address of the underlying NFT asset\\n   * @param pool The address of the associated lending pool\\n   * @param nTokenName the name of the NToken\\n   * @param nTokenSymbol the symbol of the NToken\\n   * @param params A set of encoded parameters for additional initialization\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    string nTokenName,\\n    string nTokenSymbol,\\n    string baseURI,\\n    bytes params\\n  );\\n\\n  /**\\n   * @dev Initializes the nToken\\n   * @param pool The address of the lending pool where this nToken will be used\\n   * @param underlyingAsset The address of the underlying asset of this nToken\\n   * @param nTokenName The name of the nToken\\n   * @param nTokenSymbol The symbol of the nToken\\n   */\\n  function initialize(\\n    ILendingPool pool,\\n    address underlyingAsset,\\n    string calldata nTokenName,\\n    string calldata nTokenSymbol,\\n    string calldata baseURI,\\n    bytes calldata params\\n  ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"punks\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedPunks\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingPool\",\"type\":\"address\"}],\"name\":\"authorizeLendingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingPool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"punkIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"lockType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"depositAndLockPUNKS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingPool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"punkIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"depositPUNKS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyEtherTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyNFTTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPUNKSAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWPUNKSAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWPUNKSProxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingPool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"punkIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawPUNKS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WPUNKSGateway", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b47e3cd837ddf8e4c57f05d70ab865de6e193bbb000000000000000000000000b7f7f6c52f2e2fdb1963eab30438024864c313f6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}