{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ProposalPayload.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"./interfaces/IReserveFactorV1.sol\\\";\\nimport \\\"./interfaces/IAddressesProvider.sol\\\";\\nimport {ILendingPoolConfigurator} from \\\"./interfaces/ILendingPoolConfigurator.sol\\\";\\n\\n/// @title Payload to refactor AAVE Reserve Factor\\n/// @author Austin Green and Noah Citron\\n/// @notice Provides an execute function for Aave governance to refactor its reserve factor and enable DPI borrowing.\\ncontract ProposalPayload {\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice AAVE's V1 Reserve Factor.\\n    IReserveFactorV1 private constant reserveFactorV1 = IReserveFactorV1(0xE3d9988F676457123C5fD01297605efdD0Cba1ae);\\n\\n    /// @notice AAVE's V2 Reserve Factor.\\n    address private constant reserveFactorV2 = 0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c;\\n\\n    /// @notice Provides address mapping for AAVE.\\n    IAddressesProvider private constant addressProvider =\\n        IAddressesProvider(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\\n\\n    /// @notice Token distributor implementation contract.\\n    address private constant tokenDistributorImpl = 0x55c559730cbCA5deB0bf9B85961957FfDf502603;\\n\\n    /// @notice DPI token address.\\n    address private constant dpi = 0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b;\\n\\n    /// @notice AAVE V2 LendingPoolConfigurator\\n    ILendingPoolConfigurator private constant configurator =\\n        ILendingPoolConfigurator(0x311Bb771e4F8952E6Da169b425E7e92d6Ac45756);\\n\\n    /// @notice The AAVE governance executor calls this function to implement the proposal.\\n    function execute() external {\\n        // Upgrade to new implementation contract and direct all funds to v2\\n        address[] memory receivers = new address[](1);\\n        receivers[0] = reserveFactorV2;\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = 100_00;\\n\\n        reserveFactorV1.upgradeToAndCall(\\n            tokenDistributorImpl,\\n            abi.encodeWithSignature(\\\"initialize(address[],uint256[])\\\", receivers, amounts)\\n        );\\n\\n        // Set token distributor for AAVE v1 to V2 RF\\n        addressProvider.setTokenDistributor(reserveFactorV2);\\n\\n        // enable DPI borrow\\n        configurator.enableBorrowingOnReserve(dpi, false);\\n    }\\n\\n    function distributeTokens() external {\\n        // Distribute all tokens with meaningful balances to v2\\n        address[] memory tokenAddresses = new address[](16);\\n        tokenAddresses[0] = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599; // WBTC\\n        tokenAddresses[1] = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // DAI\\n        tokenAddresses[2] = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // USDC\\n        tokenAddresses[3] = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // USDT\\n        tokenAddresses[4] = 0xdd974D5C2e2928deA5F71b9825b8b646686BD200; // KNC\\n        tokenAddresses[5] = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2; // MKR\\n        tokenAddresses[6] = 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942; // MANA\\n        tokenAddresses[7] = 0x4Fabb145d64652a948d72533023f6E7A623C7C53; // BUSD\\n        tokenAddresses[8] = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e; // YFI\\n        tokenAddresses[9] = 0x514910771AF9Ca656af840dff83E8264EcF986CA; // LINK\\n        tokenAddresses[10] = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // UNI\\n        tokenAddresses[11] = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9; // AAVE\\n        tokenAddresses[12] = 0x80fB784B7eD66730e8b1DBd9820aFD29931aab03; // LEND\\n        tokenAddresses[13] = 0x0D8775F648430679A709E98d2b0Cb6250d2887EF; // BAT\\n        tokenAddresses[14] = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F; // SNX\\n        tokenAddresses[15] = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH\\n        reserveFactorV1.distribute(tokenAddresses);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IReserveFactorV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IReserveFactorV1 {\\n    function distribute(address[] memory) external;\\n\\n    function upgradeToAndCall(address, bytes calldata) external payable;\\n\\n    function getDistribution() external view returns (address[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface IAddressesProvider {\\n    function setTokenDistributor(address) external;\\n\\n    function getTokenDistributor() external view returns (address);\\n\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILendingPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.4.22 <0.9.0;\\n\\ninterface ILendingPoolConfigurator {\\n    function enableBorrowingOnReserve(address asset, bool stableEnabled) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"distributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProposalPayload", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}