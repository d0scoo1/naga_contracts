{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ChonkyChkns.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n\\n\\n         /\\\\\\n        _\\\\/_\\n        \\\\__/\\n       /    \\\\\\n      \u25cb      \u25cb\\n     /   v    \\\\\\n    /          \\\\\\n\\n\\n */\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IFeedToken} from \\\"./FeedToken.sol\\\";\\nimport {ITokenURIManager} from \\\"./TokenURIManager.sol\\\";\\nimport {ITraitsManager} from \\\"./CustomTraitsManager.sol\\\";\\n\\ncontract ChonkyChkns is ERC721A, ERC721AQueryable, Ownable, ReentrancyGuard {\\n    using MerkleProof for bytes32[];\\n\\n    // MINTING STATE\\n    enum MintState {\\n        PRESALE,\\n        PUBLIC,\\n        CLOSED\\n    }\\n    MintState public mintState;\\n\\n    // MintState-based variables. Index 0 = PRESALE, 1 = PUBLIC.\\n    uint256[2] mintCosts;\\n\\n    // Membership lists with restricted access\\n    enum ExclusiveList {\\n        GENESIS,\\n        CHONKLIST\\n    }\\n    // ExclusiveList-based variables. . Index 0 = GENESIS, 1 = CHONKLIST.\\n    bytes32[2] private merkleRoots;\\n\\n    uint256 public MAX_GENESIS_MINT_AMOUNT_PER_WALLET;\\n    uint256 public MAX_CHONKLIST_MINT_AMOUNT_PER_WALLET;\\n\\n    // Supply specs by token type\\n    uint256 public MAX_SUPPLY;\\n    uint256 public MAX_GENESIS_SUPPLY;\\n    // Records the number of genesis tokens that have been minted.\\n    uint256 public totalGenesisSupply;\\n\\n    // Mapping of tokenId to whether it's a genesis token.\\n    mapping(uint256 => bool) public isGenesis;\\n\\n    // Map of wallet address -> number of genesis/chonklist tokens minted.\\n    // Used to enforce max mints per wallet.\\n    mapping(address => uint256) public numGenesisMinted;\\n    mapping(address => uint256) public numChonklistMinted;\\n\\n    // Maps of wallet addresses => number of Genesis/Standard NFTs they own.\\n    // Used for feed balance calculations.\\n    mapping(address => uint256) public numGenesisOwned;\\n    mapping(address => uint256) public numStandardOwned;\\n\\n    // Related contracts, for FEED token generation, user-customized traits,\\n    // and tokenURI construction based on custom traits\\n    IFeedToken public feedToken;\\n    ITraitsManager public customTraitsManager;\\n    ITokenURIManager public tokenURIManager;\\n\\n    constructor() ERC721A(\\\"ChonkyChkns\\\", \\\"CHONKYCHKNS\\\") {\\n        MAX_SUPPLY = 4994;\\n        MAX_GENESIS_SUPPLY = 250;\\n\\n        MAX_GENESIS_MINT_AMOUNT_PER_WALLET = 1;\\n        MAX_CHONKLIST_MINT_AMOUNT_PER_WALLET = 3;\\n\\n        mintCosts = [0.03 ether, 0.03 ether];\\n\\n        mintState = MintState.CLOSED;\\n    }\\n\\n    // GETTERS / QUERY FUNCTIONS\\n\\n    function totalStandardSupply() external view returns (uint256) {\\n        // totalGenesisSupply will never exceed totalSupply minted.\\n        unchecked {\\n            return totalSupply() - totalGenesisSupply;\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n        // Role of determining tokenURI per token is delegated to tokenURIManager.\\n        // This allows the tokenURI format to flexibly change as new features\\n        // are added to the project, e.g. new traits that may affect metadata.\\n        return tokenURIManager.tokenURI(tokenId);\\n    }\\n\\n    // CHECKS\\n\\n    function mintPrechecks(uint256 _mintAmount, MintState _mintState)\\n        internal\\n        view\\n    {\\n        require(mintState == _mintState, \\\"Mint stage not open\\\");\\n        require(\\n            msg.value >= mintCosts[uint256(_mintState)] * _mintAmount,\\n            \\\"Insufficient funds\\\"\\n        );\\n    }\\n\\n    function restrictedMintPrechecks(\\n        uint256 _mintAmount,\\n        MintState _mintState,\\n        ExclusiveList _exclusiveList,\\n        bytes32[] calldata proof\\n    ) internal view {\\n        mintPrechecks(_mintAmount, _mintState);\\n\\n        require(\\n            proof.verify(\\n                merkleRoots[uint256(_exclusiveList)],\\n                keccak256(abi.encodePacked(_msgSender()))\\n            ),\\n            \\\"Not authorized\\\"\\n        );\\n    }\\n\\n    // MINT FUNCTIONS\\n\\n    function genesisPresaleMint(uint256 _mintAmount, bytes32[] calldata proof)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        restrictedMintPrechecks(\\n            _mintAmount,\\n            MintState.PRESALE,\\n            ExclusiveList.GENESIS,\\n            proof\\n        );\\n        uint256 genesisQty = _calculateAndRegisterGenesisQuantity(_mintAmount);\\n        _registerPresaleStandardQuantity(_mintAmount - genesisQty);\\n        _mintAndUpdateBalance(_mintAmount, genesisQty);\\n    }\\n\\n    function presaleMint(uint256 _mintAmount, bytes32[] calldata proof)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        restrictedMintPrechecks(\\n            _mintAmount,\\n            MintState.PRESALE,\\n            ExclusiveList.CHONKLIST,\\n            proof\\n        );\\n        _registerPresaleStandardQuantity(_mintAmount);\\n        _mintAndUpdateBalance(_mintAmount, 0);\\n    }\\n\\n    // Call this function if/when MintState = PUBLIC and there are still remaining genesis tokens.\\n    // All users (including non-OG roles) will be able to mint up to the max per wallet of\\n    // genesis tokens on a first-come first-serve basis.\\n    // This function shouldn't be called after all genesis tokens have been minted -\\n    // it will function the same as publicMint but cost additional gas.\\n    function genesisPublicMint(uint256 _mintAmount)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        mintPrechecks(_mintAmount, MintState.PUBLIC);\\n        uint256 genesisQty = _calculateAndRegisterGenesisQuantity(_mintAmount);\\n        _mintAndUpdateBalance(_mintAmount, genesisQty);\\n    }\\n\\n    function publicMint(uint256 _mintAmount) external payable nonReentrant {\\n        mintPrechecks(_mintAmount, MintState.PUBLIC);\\n        _mintAndUpdateBalance(_mintAmount, 0);\\n    }\\n\\n    // TRANFER FUNCTION\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        ERC721A.safeTransferFrom(from, to, tokenId, _data);\\n        _updateBalancesOnTransfer(from, to, tokenId);\\n    }\\n\\n    // OWNER UTILITIES\\n\\n    function mintForAddresses(\\n        address[] calldata _receivers,\\n        uint256[] calldata _amounts\\n    ) external onlyOwner {\\n        for (uint256 i; i < _receivers.length; ) {\\n            _safeMint(_receivers[i], _amounts[i]);\\n            _updateBalancesOnStandardMint(_receivers[i], _amounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        (bool success, ) = payable(owner()).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(success, \\\"Withdraw failed!\\\");\\n    }\\n\\n    // SETTERS\\n\\n    function setFeedToken(address _yield) external onlyOwner {\\n        feedToken = IFeedToken(_yield);\\n    }\\n\\n    function setCustomTraitsManager(address _traitsManager) external onlyOwner {\\n        customTraitsManager = ITraitsManager(_traitsManager);\\n    }\\n\\n    function setTokenURIManager(address _tokenURIManager) external onlyOwner {\\n        ITokenURIManager newTokenURIManager = ITokenURIManager(\\n            _tokenURIManager\\n        );\\n        // If there was a pre-existing TokenURIManager, record the previous base URI\\n        // and set it in the new manager\\n        if (address(tokenURIManager) != address(0)) {\\n            newTokenURIManager.setBaseUri(tokenURIManager.baseURI());\\n        }\\n        tokenURIManager = newTokenURIManager;\\n    }\\n\\n    function setBaseUri(string calldata _baseUri) external onlyOwner {\\n        if (address(tokenURIManager) != address(0)) {\\n            tokenURIManager.setBaseUri(_baseUri);\\n        }\\n    }\\n\\n    function setMintState(MintState _state) external onlyOwner {\\n        mintState = _state;\\n    }\\n\\n    function setMerkleRootForExclusiveList(\\n        bytes32 _root,\\n        ExclusiveList _exclusiveList\\n    ) external onlyOwner {\\n        merkleRoots[uint256(_exclusiveList)] = _root;\\n    }\\n\\n    // NOTE: UNIT IS WEI!\\n    function setMintCostForMintState(uint256 _cost, MintState _mintState)\\n        external\\n        onlyOwner\\n    {\\n        mintCosts[uint256(_mintState)] = _cost;\\n    }\\n\\n    function setMaxSupply(uint256 _supply) external onlyOwner {\\n        MAX_SUPPLY = _supply;\\n    }\\n\\n    function setMaxGenesisSupply(uint256 _supply) external onlyOwner {\\n        MAX_GENESIS_SUPPLY = _supply;\\n    }\\n\\n    function setMaxGenesisMintAmountPerWallet(uint256 _maxMintAmountPerWallet)\\n        external\\n        onlyOwner\\n    {\\n        MAX_GENESIS_MINT_AMOUNT_PER_WALLET = _maxMintAmountPerWallet;\\n    }\\n\\n    function setMaxChonklistMintAmountPerWallet(uint256 _maxMintAmountPerWallet)\\n        external\\n        onlyOwner\\n    {\\n        MAX_CHONKLIST_MINT_AMOUNT_PER_WALLET = _maxMintAmountPerWallet;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    // Mint helpers\\n\\n    function _calculateAndRegisterGenesisQuantity(uint256 _maxMintAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        // Allocate as many of _maxMintAmount as possible to be genesis tokens,\\n        // under wallet and supply constraints.\\n        unchecked {\\n            uint256 genesisQty = Math.min(\\n                Math.min(\\n                    MAX_GENESIS_MINT_AMOUNT_PER_WALLET -\\n                        numGenesisMinted[_msgSender()],\\n                    _maxMintAmount\\n                ),\\n                MAX_GENESIS_SUPPLY - totalGenesisSupply\\n            );\\n\\n            // If any genesis tokens are being minted in this transaction, perform pre-mint\\n            // registration steps for them (set isGenesis status for each tokenId,\\n            // increment numGenesisMinted for user, increment totalGenesisSupply)\\n            if (genesisQty > 0) {\\n                uint256 tokenId = _currentIndex;\\n                for (uint256 i = 0; i < genesisQty; ++i) {\\n                    isGenesis[tokenId + i] = true;\\n                }\\n                numGenesisMinted[_msgSender()] += genesisQty;\\n                totalGenesisSupply += genesisQty;\\n            }\\n            return genesisQty;\\n        }\\n    }\\n\\n    function _registerPresaleStandardQuantity(uint256 _standardTokenQuantity)\\n        internal\\n    {\\n        // If any standard tokens are being minted in this presale transaction,\\n        // verify that the total minted quantity for the user is within max per wallet constraints,\\n        // then increment numChonkListMinted for user.\\n        if (_standardTokenQuantity > 0) {\\n            require(\\n                _standardTokenQuantity + numChonklistMinted[_msgSender()] <=\\n                    MAX_CHONKLIST_MINT_AMOUNT_PER_WALLET,\\n                \\\"Exceeded max per wallet\\\"\\n            );\\n            numChonklistMinted[_msgSender()] += _standardTokenQuantity;\\n        }\\n    }\\n\\n    function _mintAndUpdateBalance(\\n        uint256 _mintAmount,\\n        uint256 _genesisMintAmount\\n    ) internal {\\n        _safeMint(_msgSender(), _mintAmount);\\n\\n        _updateBalancesOnGenesisMint(_msgSender(), _genesisMintAmount);\\n        _updateBalancesOnStandardMint(\\n            _msgSender(),\\n            _mintAmount - _genesisMintAmount\\n        );\\n    }\\n\\n    // Balance updates on transfers/mints\\n\\n    function _updateBalancesOnTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        feedToken.updateFeedCountOnTransfer(from, to);\\n        // No risk of overflow or underflow:\\n        // num{Genesis,Standard}Owned[from] will always be > 0\\n        // All num{Genesis,Standard}Owned balances are <= MAX_SUPPLY\\n        unchecked {\\n            if (isGenesis[tokenId]) {\\n                numGenesisOwned[from]--;\\n                numGenesisOwned[to]++;\\n            } else {\\n                numStandardOwned[from]--;\\n                numStandardOwned[to]++;\\n            }\\n        }\\n    }\\n\\n    function _updateBalancesOnGenesisMint(address _to, uint256 _mintAmount)\\n        private\\n    {\\n        if (_mintAmount > 0) {\\n            feedToken.updateFeedCountOnMint(_to);\\n            // No risk of overflow\\n            unchecked {\\n                numGenesisOwned[_to] += _mintAmount;\\n            }\\n        }\\n    }\\n\\n    function _updateBalancesOnStandardMint(address _to, uint256 _mintAmount)\\n        private\\n    {\\n        if (_mintAmount > 0) {\\n            feedToken.updateFeedCountOnMint(_to);\\n            // No risk of overflow\\n            unchecked {\\n                numStandardOwned[_to] += _mintAmount;\\n            }\\n        }\\n    }\\n\\n    // Before mint hook\\n    function _beforeTokenTransfers(\\n        address from,\\n        address,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal view override {\\n        // Check for sufficient supply available before mints\\n        if (from == address(0)) {\\n            require(\\n                startTokenId + quantity <= MAX_SUPPLY,\\n                \\\"Max supply exceeded\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"CustomTraitsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {ChonkyChkns} from \\\"./ChonkyChkns.sol\\\";\\nimport {IFeedToken} from \\\"./FeedToken.sol\\\";\\n\\ninterface ITraitsManager {\\n    function getNumericalTrait(uint256 _tokenId, bytes32 _traitName)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCategoricalTrait(uint256 _tokenId, bytes32 _traitName)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getFreeFormTrait(uint256 _tokenId, bytes32 _traitName)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getNumericalTraitIncreasePrice(bytes32 _traitName)\\n        external\\n        view\\n        returns (uint128);\\n\\n    function getNumericalTraitDecreasePrice(bytes32 _traitName)\\n        external\\n        view\\n        returns (uint128);\\n\\n    function getCategoricalTraitAddPrice(\\n        bytes32 _traitName,\\n        bytes32 _traitValue\\n    ) external view returns (uint128);\\n\\n    function getCategoricalTraitRemovePrice(\\n        bytes32 _traitName,\\n        bytes32 _traitValue\\n    ) external view returns (uint128);\\n\\n    function getFreeFormTraitAddPrice(bytes32 _traitName)\\n        external\\n        view\\n        returns (uint128);\\n\\n    function getFreeFormTraitRemovePrice(bytes32 _traitName)\\n        external\\n        view\\n        returns (uint128);\\n\\n    function increaseNumericalTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName,\\n        uint256 _countToAdd\\n    ) external;\\n\\n    function decreaseNumericalTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName,\\n        uint256 _countToSubtract\\n    ) external;\\n\\n    function setCategoricalTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName,\\n        bytes32 _traitValue\\n    ) external;\\n\\n    function removeCategoricalTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName\\n    ) external;\\n\\n    function setFreeFormTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName,\\n        bytes32 _traitValue\\n    ) external;\\n\\n    function removeFreeFormTraitForToken(uint256 _tokenId, bytes32 _traitName)\\n        external;\\n}\\n\\ncontract CustomTraitsManager is Ownable {\\n    // Mapping of (token id => (trait name => trait value))\\n    mapping(uint256 => mapping(bytes32 => uint256)) public numericalTraits;\\n    mapping(uint256 => mapping(bytes32 => bytes32)) public categoricalTraits;\\n    mapping(uint256 => mapping(bytes32 => bytes32)) public freeFormTraits;\\n\\n    // Mappings of (numerical/categorical trait type => (price to add a unit, price to remove a unit)).\\n    struct Prices {\\n        uint128 addPrice;\\n        uint128 removePrice;\\n    }\\n    mapping(bytes32 => Prices) public traitPrices;\\n    mapping(bytes32 => mapping(bytes32 => Prices))\\n        public categoricalTraitPrices;\\n\\n    // ===============================\\n\\n    // Map of contracts that have the ability to modify trait values on tokens,\\n    // to perform tasks such as:\\n    //  - trait boosts/giveaways\\n    //  - affiliated NFTs that get linked to ChonkyChkns through traits\\n    mapping(address => bool) public traitModifiersList;\\n\\n    ChonkyChkns public chonkyContract;\\n    IFeedToken public feedToken;\\n\\n    constructor(address _chonkyChkns) {\\n        chonkyContract = ChonkyChkns(_chonkyChkns);\\n        feedToken = chonkyContract.feedToken();\\n    }\\n\\n    function addTrustedContract(address _contract) external onlyOwner {\\n        traitModifiersList[_contract] = true;\\n    }\\n\\n    function removeTrustedContract(address _contract) external onlyOwner {\\n        traitModifiersList[_contract] = false;\\n    }\\n\\n    function addNewNumericalTrait(\\n        bytes32 _traitName,\\n        uint128 _traitPriceToIncrease,\\n        uint128 _traitPriceToDecrease\\n    ) external virtual onlyOwner {\\n        require(!_isValidTrait(_traitName), \\\"Trait already exists\\\");\\n        traitPrices[_traitName] = Prices(\\n            _traitPriceToIncrease,\\n            _traitPriceToDecrease\\n        );\\n    }\\n\\n    function addNewCategoricalTrait(\\n        bytes32 _traitName,\\n        bytes32[] calldata _traitValues,\\n        uint128[] calldata _addPrices,\\n        uint128[] calldata _removePrices\\n    ) external virtual onlyOwner {\\n        require(\\n            _traitValues.length == _addPrices.length,\\n            \\\"Trait value and Prices should be the same length.\\\"\\n        );\\n        require(\\n            _traitValues.length == _removePrices.length,\\n            \\\"Trait value and Prices should be the same length.\\\"\\n        );\\n        unchecked {\\n            for (uint256 i; i < _traitValues.length; ++i) {\\n                bytes32 traitValue = _traitValues[i];\\n                require(\\n                    !_isValidCategoricalTrait(_traitName, traitValue),\\n                    \\\"Categorical trait already exists\\\"\\n                );\\n                categoricalTraitPrices[_traitName][traitValue] = Prices(\\n                    _addPrices[i],\\n                    _removePrices[i]\\n                );\\n            }\\n        }\\n    }\\n\\n    function addNewFreeFormTrait(\\n        bytes32 _traitName,\\n        uint128 _addPrice,\\n        uint128 _removePrice\\n    ) external virtual onlyOwner {\\n        require(!_isValidTrait(_traitName), \\\"Trait already exists\\\");\\n        traitPrices[_traitName] = Prices(_addPrice, _removePrice);\\n    }\\n\\n    function updateNumericalTraitPrice(\\n        bytes32 _traitName,\\n        uint128 _traitIncreaseUnitPrice,\\n        uint128 _traitDecreaseUnitPrice\\n    ) external virtual onlyOwner {\\n        _requireValidTrait(_traitName);\\n        traitPrices[_traitName] = Prices(\\n            _traitIncreaseUnitPrice,\\n            _traitDecreaseUnitPrice\\n        );\\n    }\\n\\n    function updateCategoricalTraitPrice(\\n        bytes32 _traitName,\\n        bytes32 _traitValue,\\n        uint128 _traitAddPrice,\\n        uint128 _traitRemovePrice\\n    ) external virtual onlyOwner {\\n        _requireValidCategoricalTrait(_traitName, _traitValue);\\n        categoricalTraitPrices[_traitName][_traitValue] = Prices(\\n            _traitAddPrice,\\n            _traitRemovePrice\\n        );\\n    }\\n\\n    function updateFreeFormTraitPrice(\\n        bytes32 _traitName,\\n        uint128 _traitIncreaseUnitPrice,\\n        uint128 _traitDecreaseUnitPrice\\n    ) external virtual onlyOwner {\\n        _requireValidTrait(_traitName);\\n        traitPrices[_traitName] = Prices(\\n            _traitIncreaseUnitPrice,\\n            _traitDecreaseUnitPrice\\n        );\\n    }\\n\\n    // GETTERS\\n    function getNumericalTrait(uint256 _tokenId, bytes32 _traitName)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        _requireValidTrait(_traitName);\\n        return numericalTraits[_tokenId][_traitName];\\n    }\\n\\n    function getCategoricalTrait(uint256 _tokenId, bytes32 _traitName)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 traitValue = categoricalTraits[_tokenId][_traitName];\\n        _requireValidCategoricalTrait(_traitName, traitValue);\\n        return traitValue;\\n    }\\n\\n    function getFreeFormTrait(uint256 _tokenId, bytes32 _traitName)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        _requireValidTrait(_traitName);\\n        return freeFormTraits[_tokenId][_traitName];\\n    }\\n\\n    function getSortedTokenIdsByTrait(bytes32 _traitName, bool ascending)\\n        external\\n        view\\n        returns (uint256[2][] memory)\\n    {\\n        _requireValidTrait(_traitName);\\n        uint256 numTokens = chonkyContract.totalSupply();\\n        uint256[2][] memory ranks = new uint256[2][](numTokens);\\n\\n        unchecked {\\n            uint256 ranksLength = 0;\\n            for (uint256 i = 0; i < numTokens; ++i) {\\n                uint256 traitValue = numericalTraits[i][_traitName];\\n                if (traitValue > 0) {\\n                    ranks[ranksLength] = [i, traitValue];\\n                    ranksLength++;\\n                }\\n            }\\n            if (ranksLength > 0) {\\n                _quickSortArrayOfTuples(ranks, 0, ranksLength - 1);\\n            }\\n            uint256[2][] memory sortedTokens = new uint256[2][](ranksLength);\\n            if (ascending) {\\n                for (uint256 i = 0; i < ranksLength; ++i) {\\n                    sortedTokens[i] = ranks[i];\\n                }\\n            } else {\\n                for (uint256 i = 0; i < ranksLength; ++i) {\\n                    sortedTokens[i] = ranks[ranksLength - i - 1];\\n                }\\n            }\\n            return sortedTokens;\\n        }\\n    }\\n\\n    function getNumericalTraitIncreasePrice(bytes32 _traitName)\\n        external\\n        view\\n        returns (uint128)\\n    {\\n        _requireValidTrait(_traitName);\\n        return traitPrices[_traitName].addPrice;\\n    }\\n\\n    function getNumericalTraitDecreasePrice(bytes32 _traitName)\\n        external\\n        view\\n        returns (uint128)\\n    {\\n        _requireValidTrait(_traitName);\\n        return traitPrices[_traitName].removePrice;\\n    }\\n\\n    function getCategoricalTraitAddPrice(\\n        bytes32 _traitName,\\n        bytes32 _traitValue\\n    ) external view returns (uint128) {\\n        _requireValidCategoricalTrait(_traitName, _traitValue);\\n        return categoricalTraitPrices[_traitName][_traitValue].addPrice;\\n    }\\n\\n    function getCategoricalTraitRemovePrice(\\n        bytes32 _traitName,\\n        bytes32 _traitValue\\n    ) external view returns (uint128) {\\n        _requireValidCategoricalTrait(_traitName, _traitValue);\\n        return categoricalTraitPrices[_traitName][_traitValue].removePrice;\\n    }\\n\\n    function getFreeFormTraitAddPrice(bytes32 _traitName)\\n        external\\n        view\\n        returns (uint128)\\n    {\\n        _requireValidTrait(_traitName);\\n        return traitPrices[_traitName].addPrice;\\n    }\\n\\n    function getFreeFormTraitRemovePrice(bytes32 _traitName)\\n        external\\n        view\\n        returns (uint128)\\n    {\\n        _requireValidTrait(_traitName);\\n        return traitPrices[_traitName].removePrice;\\n    }\\n\\n    // SETTERS\\n\\n    function setFeedToken(address _feedToken) external onlyOwner {\\n        feedToken = IFeedToken(_feedToken);\\n    }\\n\\n    function increaseNumericalTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName,\\n        uint256 _countToAdd\\n    ) external {\\n        address tokenOwner = chonkyContract.ownerOf(_tokenId);\\n        require(\\n            tokenOwner == _msgSender() || _isTrustedCaller(),\\n            \\\"Caller is not a trusted contract nor the owner of the given tokenId\\\"\\n        );\\n        Prices memory traitPrice = traitPrices[_traitName];\\n        // addPrice and removePrice are set by contract owner, will never overflow\\n        unchecked {\\n            require(\\n                traitPrice.addPrice + traitPrice.removePrice > 0,\\n                \\\"Invalid trait\\\"\\n            );\\n        }\\n        feedToken.spend(tokenOwner, _countToAdd * uint256(traitPrice.addPrice));\\n        numericalTraits[_tokenId][_traitName] += _countToAdd;\\n    }\\n\\n    function decreaseNumericalTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName,\\n        uint256 _countToSubtract\\n    ) external {\\n        address tokenOwner = chonkyContract.ownerOf(_tokenId);\\n        require(\\n            tokenOwner == _msgSender() || _isTrustedCaller(),\\n            \\\"Caller is not a trusted contract nor the owner of the given tokenId\\\"\\n        );\\n        Prices memory traitPrice = traitPrices[_traitName];\\n        // addPrice and removePrice are set by contract owner, will never overflow\\n        unchecked {\\n            require(\\n                traitPrice.addPrice + traitPrice.removePrice > 0,\\n                \\\"Invalid trait\\\"\\n            );\\n        }\\n        feedToken.spend(\\n            tokenOwner,\\n            _countToSubtract * uint256(traitPrice.removePrice)\\n        );\\n        numericalTraits[_tokenId][_traitName] -= _countToSubtract;\\n    }\\n\\n    function setCategoricalTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName,\\n        bytes32 _traitValue\\n    ) external {\\n        address tokenOwner = chonkyContract.ownerOf(_tokenId);\\n        require(\\n            tokenOwner == _msgSender() || _isTrustedCaller(),\\n            \\\"Caller is not a trusted contract nor the owner of the given tokenId\\\"\\n        );\\n        Prices memory traitPrice = categoricalTraitPrices[_traitName][\\n            _traitValue\\n        ];\\n        // addPrice and removePrice are set by contract owner, will never overflow\\n        unchecked {\\n            require(\\n                traitPrice.addPrice + traitPrice.removePrice > 0,\\n                \\\"Invalid trait\\\"\\n            );\\n        }\\n        feedToken.spend(tokenOwner, uint256(traitPrice.addPrice));\\n        categoricalTraits[_tokenId][_traitName] = _traitValue;\\n    }\\n\\n    function removeCategoricalTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName\\n    ) external {\\n        address tokenOwner = chonkyContract.ownerOf(_tokenId);\\n        require(\\n            tokenOwner == _msgSender() || _isTrustedCaller(),\\n            \\\"Caller is not a trusted contract nor the owner of the given tokenId\\\"\\n        );\\n\\n        Prices memory traitPrice = categoricalTraitPrices[_traitName][\\n            categoricalTraits[_tokenId][_traitName]\\n        ];\\n        // addPrice and removePrice are set by contract owner, will never overflow\\n        unchecked {\\n            require(\\n                traitPrice.addPrice + traitPrice.removePrice > 0,\\n                \\\"Invalid trait\\\"\\n            );\\n        }\\n        feedToken.spend(tokenOwner, uint256(traitPrice.removePrice));\\n        categoricalTraits[_tokenId][_traitName] = 0;\\n    }\\n\\n    function setFreeFormTraitForToken(\\n        uint256 _tokenId,\\n        bytes32 _traitName,\\n        bytes32 _traitValue\\n    ) external {\\n        address tokenOwner = chonkyContract.ownerOf(_tokenId);\\n        require(\\n            tokenOwner == _msgSender() || _isTrustedCaller(),\\n            \\\"Caller is not a trusted contract nor the owner of the given tokenId\\\"\\n        );\\n        Prices memory traitPrice = traitPrices[_traitName];\\n        // addPrice and removePrice are set by contract owner, will never overflow\\n        unchecked {\\n            require(\\n                traitPrice.addPrice + traitPrice.removePrice > 0,\\n                \\\"Invalid trait\\\"\\n            );\\n        }\\n        feedToken.spend(tokenOwner, uint256(traitPrice.addPrice));\\n        freeFormTraits[_tokenId][_traitName] = _traitValue;\\n    }\\n\\n    function removeFreeFormTraitForToken(uint256 _tokenId, bytes32 _traitName)\\n        external\\n    {\\n        address tokenOwner = chonkyContract.ownerOf(_tokenId);\\n        require(\\n            tokenOwner == _msgSender() || _isTrustedCaller(),\\n            \\\"Caller is not a trusted contract nor the owner of the given tokenId\\\"\\n        );\\n\\n        Prices memory traitPrice = traitPrices[_traitName];\\n        // addPrice and removePrice are set by contract owner, will never overflow\\n        unchecked {\\n            require(\\n                traitPrice.addPrice + traitPrice.removePrice > 0,\\n                \\\"Invalid trait\\\"\\n            );\\n        }\\n        feedToken.spend(tokenOwner, uint256(traitPrice.removePrice));\\n        freeFormTraits[_tokenId][_traitName] = 0;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function _isTrustedCaller() internal view returns (bool) {\\n        return traitModifiersList[_msgSender()];\\n    }\\n\\n    function _quickSortArrayOfTuples(\\n        uint256[2][] memory arr,\\n        uint256 left,\\n        uint256 right\\n    ) internal pure {\\n        unchecked {\\n            uint256 i = left;\\n            uint256 j = right;\\n            if (i == j) return;\\n            uint256 pivot = arr[uint256(left + (right - left) / 2)][1];\\n            while (i <= j) {\\n                while (arr[uint256(i)][1] < pivot) i++;\\n                while (pivot < arr[uint256(j)][1]) j--;\\n                if (i <= j) {\\n                    (arr[uint256(i)], arr[uint256(j)]) = (\\n                        arr[uint256(j)],\\n                        arr[uint256(i)]\\n                    );\\n                    i++;\\n                    if (j == 0) break;\\n                    j--;\\n                }\\n            }\\n            if (left < j) _quickSortArrayOfTuples(arr, left, j);\\n            if (i < right) _quickSortArrayOfTuples(arr, i, right);\\n        }\\n    }\\n\\n    function _requireValidTrait(bytes32 _traitName) internal view {\\n        require(_isValidTrait(_traitName), \\\"This trait does not exist\\\");\\n    }\\n\\n    function _requireValidCategoricalTrait(\\n        bytes32 _traitName,\\n        bytes32 _traitValue\\n    ) internal view {\\n        require(\\n            _isValidCategoricalTrait(_traitName, _traitValue),\\n            \\\"This trait does not exist\\\"\\n        );\\n    }\\n\\n    function _isValidTrait(bytes32 _traitName) internal view returns (bool) {\\n        Prices memory existingPrices = traitPrices[_traitName];\\n        // addPrice and removePrice are set by contract owner, will never overflow\\n        unchecked {\\n            return existingPrices.addPrice + existingPrices.removePrice > 0;\\n        }\\n    }\\n\\n    function _isValidCategoricalTrait(bytes32 _traitName, bytes32 _traitValue)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        Prices memory existingPrices = categoricalTraitPrices[_traitName][\\n            _traitValue\\n        ];\\n        // addPrice and removePrice are set by contract owner, will never overflow\\n        unchecked {\\n            return existingPrices.addPrice + existingPrices.removePrice > 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"TokenURIManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ChonkyChkns} from \\\"./ChonkyChkns.sol\\\";\\n\\ninterface ITokenURIManager {\\n    function setBaseUri(string calldata _baseUri) external;\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\ncontract ChonkyChknsTokenURIManager {\\n    using Strings for uint256;\\n\\n    ChonkyChkns public chonkyContract;\\n    string private _baseURI;\\n\\n    constructor(address _chonkyChkns) {\\n        chonkyContract = ChonkyChkns(_chonkyChkns);\\n    }\\n\\n    modifier onlyContract() {\\n        require(\\n            msg.sender == address(chonkyContract),\\n            \\\"Only callable by ChonkyChkns contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function setBaseUri(string calldata _newBaseURI) external onlyContract {\\n        _baseURI = _newBaseURI;\\n    }\\n\\n    function baseURI() external view onlyContract returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        external\\n        view\\n        onlyContract\\n        returns (string memory)\\n    {\\n        // TokenURI branches off depending on token type of tokenId\\n        string memory tokenType = chonkyContract.isGenesis(tokenId)\\n            ? \\\"genesis\\\"\\n            : \\\"standard\\\";\\n\\n        return\\n            bytes(_baseURI).length != 0\\n                ? string(\\n                    abi.encodePacked(\\n                        _baseURI,\\n                        tokenType,\\n                        \\\"/\\\",\\n                        tokenId.toString()\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"FeedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {ChonkyChkns} from \\\"./ChonkyChkns.sol\\\";\\n\\ninterface IFeedToken {\\n    function updateFeedCountOnMint(address _user) external;\\n\\n    function updateFeedCountOnTransfer(address _from, address _to) external;\\n\\n    function updateFeedCount(address _user) external;\\n\\n    function getTotalClaimable(address _user) external view returns (uint256);\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function reward(address _user, uint256 _amount) external;\\n\\n    function spend(address _user, uint256 _amount) external;\\n}\\n\\ncontract FeedToken is ERC20(\\\"Feed\\\", \\\"FEED\\\"), Ownable {\\n    // CONSTANTS\\n    uint256 public constant SECONDS_IN_DAY = 86400;\\n\\n    // settable configs\\n    uint256 public GENESIS_RATE = 5 ether; // feed / day generated by genesis tokens\\n    uint256 public STANDARD_RATE = 1 ether; // feed per day generated by normal tokens\\n    uint256 public FEED_PRODUCTION_END_DATE; // date feed production ends\\n\\n    mapping(address => uint256) public feedCount;\\n    mapping(address => uint256) public lastUpdate;\\n\\n    ChonkyChkns public chonkyContract;\\n\\n    // Map of contracts that have the ability to modify feed balances on tokens,\\n    // to perform tasks such as:\\n    // - FEED giveaways\\n    // - spending FEED to buy ChonkyChkns traits (ChonkyChkns's CustomTraitManager will be on the list)\\n    mapping(address => bool) public balanceModifiersList;\\n\\n    constructor(address _chonkyChkns) {\\n        chonkyContract = ChonkyChkns(_chonkyChkns);\\n        addTrustedContract(_chonkyChkns);\\n        FEED_PRODUCTION_END_DATE = block.timestamp + 5 * 365 * 24 * 60 * 60;\\n    }\\n\\n    function addTrustedContract(address _contract) public onlyOwner {\\n        balanceModifiersList[_contract] = true;\\n    }\\n\\n    function removeTrustedContract(address _contract) external onlyOwner {\\n        balanceModifiersList[_contract] = false;\\n    }\\n\\n    // FEED COUNT UPDATE FUNCTIONS\\n\\n    // Called specifically when minting tokens.\\n    function updateFeedCountOnMint(address _user) external {\\n        require(_msgSender() == address(chonkyContract), \\\"Can't call this\\\");\\n        uint256 time = Math.min(block.timestamp, FEED_PRODUCTION_END_DATE);\\n        _updateFeedCountAtTime(_user, time);\\n    }\\n\\n    // Called specfically when a token is transferring ownership\\n    function updateFeedCountOnTransfer(address _from, address _to) external {\\n        require(_msgSender() == address(chonkyContract), \\\"Can't call this\\\");\\n        uint256 time = Math.min(block.timestamp, FEED_PRODUCTION_END_DATE);\\n        _updateFeedCountAtTime(_from, time);\\n        if (_to != address(0)) {\\n            _updateFeedCountAtTime(_to, time);\\n        }\\n    }\\n\\n    // Can be called at any time to have getTotalClaimable() amount reflected in feedCount() balance.\\n    function updateFeedCount(address _user) external {\\n        uint256 time = Math.min(block.timestamp, FEED_PRODUCTION_END_DATE);\\n        _updateFeedCountAtTime(_user, time);\\n    }\\n\\n    // WITHDRAW FUNCTION\\n\\n    // Withdraw (mint) the current feed balance of a particular address to that address.\\n    // Pending claimable portion of feed balance is withdrawn as well.\\n    function withdrawFeed(address _to) external {\\n        require(_msgSender() == _to, \\\"Can only be called by owner of withdrawing address\\\");\\n        uint256 feedToBeClaimed = getTotalClaimable(_to);\\n        if (feedToBeClaimed > 0) {\\n            feedCount[_to] = 0;\\n            lastUpdate[_to] = Math.min(\\n                block.timestamp,\\n                FEED_PRODUCTION_END_DATE\\n            );\\n            _mint(_to, feedToBeClaimed);\\n        }\\n    }\\n\\n    // FUNCTIONS CALLABLE BY TRUSTED CONTRACTS (used for FEED gamification features)\\n\\n    function reward(address _user, uint256 _amount) external {\\n        require(_isTrustedCaller(), \\\"Can only be called by trusted address\\\");\\n        feedCount[_user] = getTotalClaimable(_user) + _amount;\\n        lastUpdate[_user] = Math.min(block.timestamp, FEED_PRODUCTION_END_DATE);\\n    }\\n\\n    function spend(address _user, uint256 _amount) external {\\n        require(_isTrustedCaller(), \\\"Can only be called by trusted address\\\");\\n\\n        uint256 currentBalance = getTotalClaimable(_user);\\n        // Amount in excess of user's feedCount balance that needs to be burned from their wallet.\\n        uint256 feedCountDiff = _amount - Math.min(_amount, currentBalance);\\n        if (feedCountDiff > 0) {\\n            _burn(_user, feedCountDiff);\\n        }\\n        // Set feed count based on remaining amount that needs to be spent from balance\\n        feedCount[_user] = currentBalance + feedCountDiff - _amount;\\n        lastUpdate[_user] = Math.min(block.timestamp, FEED_PRODUCTION_END_DATE);\\n    }\\n\\n    function burn(address _from, uint256 _amount) external {\\n        require(_isTrustedCaller(), \\\"Can only be called by trusted address\\\");\\n        _burn(_from, _amount);\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    function getTotalClaimable(address _user) public view returns (uint256) {\\n        // lastUpdate[_user] is upper bounded by FEED_PRODUCTION_END_DATE - this will not underflow\\n        uint256 timeSinceLastUpdate;\\n        unchecked {\\n            timeSinceLastUpdate =\\n                Math.min(block.timestamp, FEED_PRODUCTION_END_DATE) -\\n                lastUpdate[_user];\\n        }\\n\\n        uint256 numGenesisOwned = chonkyContract.numGenesisOwned(_user);\\n        uint256 numStandardOwned = chonkyContract.numStandardOwned(_user);\\n        uint256 genesisPending = numGenesisOwned > 0\\n            ? _getPendingFeed(\\n                numGenesisOwned,\\n                GENESIS_RATE,\\n                timeSinceLastUpdate\\n            )\\n            : 0;\\n        uint256 normalPending = numStandardOwned > 0\\n            ? _getPendingFeed(\\n                numStandardOwned,\\n                STANDARD_RATE,\\n                timeSinceLastUpdate\\n            )\\n            : 0;\\n        return feedCount[_user] + genesisPending + normalPending;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function _isTrustedCaller() internal view returns (bool) {\\n        return balanceModifiersList[_msgSender()];\\n    }\\n\\n    function _updateFeedCountAtTime(address _user, uint256 time) internal {\\n        uint256 lastUpdateTime = lastUpdate[_user];\\n        if (lastUpdateTime > 0) {\\n            uint256 numGenesisOwned = chonkyContract.numGenesisOwned(_user);\\n            uint256 numStandardOwned = chonkyContract.numStandardOwned(_user);\\n            uint256 timeSinceLastUpdate = time - lastUpdateTime;\\n            uint256 totalPending;\\n            // Non-zero conditionals - Slight optimization for those only holding one token type\\n            if (numGenesisOwned > 0) {\\n                totalPending += _getPendingFeed(\\n                    numGenesisOwned,\\n                    GENESIS_RATE,\\n                    timeSinceLastUpdate\\n                );\\n            }\\n            if (numStandardOwned > 0) {\\n                totalPending += _getPendingFeed(\\n                    numStandardOwned,\\n                    STANDARD_RATE,\\n                    timeSinceLastUpdate\\n                );\\n            }\\n            feedCount[_user] += totalPending;\\n        }\\n        lastUpdate[_user] = time;\\n    }\\n\\n    // get number of feed pending given number of chkn tokens, feed rate per day, time elapsed\\n    function _getPendingFeed(\\n        uint256 _numTokens,\\n        uint256 _rate,\\n        uint256 _timeElapsed\\n    ) internal pure returns (uint256) {\\n        return _numTokens * ((_rate * _timeElapsed) / SECONDS_IN_DAY);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/ERC721AQueryable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../ERC721A.sol';\\n\\nerror InvalidQueryRange();\\n\\n/**\\n * @title ERC721A Queryable\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *   - `addr` = `address(0)`\\n     *   - `startTimestamp` = `0`\\n     *   - `burned` = `false`\\n     *\\n     * If the `tokenId` is burned:\\n     *   - `addr` = `<Address of owner before token was burned>`\\n     *   - `startTimestamp` = `<Timestamp when token was burned>`\\n     *   - `burned = `true`\\n     *\\n     * Otherwise:\\n     *   - `addr` = `<Address of owner>`\\n     *   - `startTimestamp` = `<Timestamp of start of ownership>`\\n     *   - `burned = `false`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _currentIndex) {\\n            return ownership;\\n        }\\n        ownership = _ownerships[tokenId];\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory) {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start` < `stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _currentIndex;\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, _currentIndex)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K pfp collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerQueryForNonexistentToken();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev This is equivalent to _burn(tokenId, false)\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = _addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != _currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CHONKLIST_MINT_AMOUNT_PER_WALLET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GENESIS_MINT_AMOUNT_PER_WALLET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GENESIS_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customTraitsManager\",\"outputs\":[{\"internalType\":\"contract ITraitsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct ERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedToken\",\"outputs\":[{\"internalType\":\"contract IFeedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"genesisPresaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"genesisPublicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isGenesis\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintForAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintState\",\"outputs\":[{\"internalType\":\"enum ChonkyChkns.MintState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numChonklistMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numGenesisMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numGenesisOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numStandardOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traitsManager\",\"type\":\"address\"}],\"name\":\"setCustomTraitsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yield\",\"type\":\"address\"}],\"name\":\"setFeedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintAmountPerWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxChonklistMintAmountPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintAmountPerWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxGenesisMintAmountPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setMaxGenesisSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"enum ChonkyChkns.ExclusiveList\",\"name\":\"_exclusiveList\",\"type\":\"uint8\"}],\"name\":\"setMerkleRootForExclusiveList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"},{\"internalType\":\"enum ChonkyChkns.MintState\",\"name\":\"_mintState\",\"type\":\"uint8\"}],\"name\":\"setMintCostForMintState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ChonkyChkns.MintState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setMintState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenURIManager\",\"type\":\"address\"}],\"name\":\"setTokenURIManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURIManager\",\"outputs\":[{\"internalType\":\"contract ITokenURIManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGenesisSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStandardSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChonkyChkns", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}