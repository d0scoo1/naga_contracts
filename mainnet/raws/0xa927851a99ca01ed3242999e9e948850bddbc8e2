{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OneWarDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport {IOneWarDescriptor} from \\\"./interfaces/IOneWarDescriptor.sol\\\";\\nimport {IOneWar} from \\\"./interfaces/IOneWar.sol\\\";\\nimport {NFTDescriptor} from \\\"./libs/NFTDescriptor.sol\\\";\\nimport {Strings} from \\\"./libs/Strings.sol\\\";\\n\\ncontract OneWarDescriptor is IOneWarDescriptor {\\n    IOneWar public oneWar;\\n\\n    constructor(IOneWar _oneWar) {\\n        oneWar = _oneWar;\\n    }\\n\\n    function tokenURI(uint256 _settlement) external view override returns (string memory) {\\n        bool hasWarCountdownBegun = oneWar.hasWarCountdownBegun();\\n        NFTDescriptor.TokenURIParams memory params = NFTDescriptor.TokenURIParams({\\n            name: string(abi.encodePacked(\\\"Settlement #\\\", Strings.toString(_settlement))),\\n            description: string(\\n                abi.encodePacked(\\\"Settlement #\\\", Strings.toString(_settlement), \\\" is a location in OneWar.\\\")\\n            ),\\n            attributes: oneWar.settlementTraits(_settlement),\\n            extraAttributes: NFTDescriptor.ExtraAttributes({\\n                redeemableGold: oneWar.redeemableGold(_settlement),\\n                hasWarCountdownBegun: hasWarCountdownBegun,\\n                blocksUntilSanctuaryEnds: hasWarCountdownBegun ? oneWar.blocksUntilSanctuaryEnds(_settlement) : 0\\n            })\\n        });\\n\\n        return NFTDescriptor.constructTokenURI(params);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneWarDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport {IOneWar} from \\\"./IOneWar.sol\\\";\\n\\ninterface IOneWarDescriptor {\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneWar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ninterface IOneWar {\\n    struct Settlement {\\n        uint32 soldiers;\\n        uint32 towers;\\n        uint32 catapults;\\n        uint256 goldRedeemed;\\n        uint256 genesis;\\n        uint256 seed;\\n        address founder;\\n        string motto;\\n        uint32 glory;\\n        uint256 sanctuary;\\n        uint256 treasure;\\n        uint256 miners;\\n    }\\n\\n    struct DefenderAssets {\\n        uint32 soldiers;\\n        uint32 towers;\\n    }\\n\\n    struct AttackerAssets {\\n        uint32 soldiers;\\n        uint32 catapults;\\n    }\\n\\n    struct ArmyMove {\\n        uint256 source;\\n        uint256 destination;\\n        uint32 soldiers;\\n        uint32 catapults;\\n    }\\n\\n    event Scout(address _by, uint256 indexed _blockNumber);\\n\\n    event Settle(address _by, uint256 indexed _settlement);\\n\\n    event Burn(uint256 indexed _settlement);\\n\\n    event BuildArmy(uint256 indexed _settlement, uint32 _soldiers, uint32 _towers, uint32 _catapults);\\n\\n    event MoveArmy(\\n        uint256 indexed _sourceSettlement,\\n        uint256 indexed _destinationSettlement,\\n        uint32 _soldiers,\\n        uint32 _catapults\\n    );\\n\\n    event SuccessfulAttack(uint256 indexed _attackingSettlement, uint256 indexed _defendingSettlement);\\n\\n    event FailedAttack(uint256 indexed _attackingSettlement, uint256 indexed _defendingSettlement);\\n\\n    event ChangeMotto(uint256 indexed _settlement, string _motto);\\n\\n    function hasWarCountdownBegun() external view returns (bool);\\n\\n    function scout() external payable;\\n\\n    function settle() external;\\n\\n    function burn(uint256 _settlement) external;\\n\\n    function commenceWarCountdown() external;\\n\\n    function redeemableGold(uint256 _settlement) external view returns (uint256);\\n\\n    function redeemGold(uint256[] calldata _settlements) external;\\n\\n    function armyCost(uint32 _soldiers, uint32 _towers, uint32 _catapults) external pure returns (uint256);\\n\\n    function buildArmy(uint256 _settlement, uint32 _soldiers, uint32 _towers, uint32 _catapults) external;\\n\\n    function moveArmy(uint256 _sourceSettlement, uint256 _destinationSettlement, uint32 _soldiers, uint32 _catapults) external;\\n\\n    function multiMoveArmy(ArmyMove[] calldata _moves) external;\\n\\n    function attack(uint256 _attackingSettlement, uint256 _defendingSettlement, uint32 _soldiers, uint32 _catapults) external;\\n\\n    function blocksUntilSanctuaryEnds(uint256 _settlement) external view returns (uint256);\\n\\n    function blocksUntilWarBegins() external view returns (uint256);\\n\\n    function changeMotto(uint256 _settlement, string memory _newMotto) external;\\n\\n    function redeemFundsToOneWarTreasury() external;\\n\\n    function settlementTraits(uint256 _settlement) external view returns (Settlement memory);\\n\\n    function isRulerOrCoruler(address _address, uint256 _settlement) external view returns (bool);\\n\\n    function isSettled(uint256 _settlement) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/NFTDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IOneWar} from \\\"../interfaces/IOneWar.sol\\\";\\nimport {Strings} from \\\"./Strings.sol\\\";\\n\\nlibrary NFTDescriptor {\\n    uint8 public constant GOLD_DECIMALS = 18;\\n    uint256 public constant GOLD_DENOMINATION = 10**GOLD_DECIMALS;\\n\\n    struct ExtraAttributes {\\n        uint256 redeemableGold;\\n        bool hasWarCountdownBegun;\\n        uint256 blocksUntilSanctuaryEnds;\\n    }\\n\\n    struct TokenURIParams {\\n        string name;\\n        string description;\\n        IOneWar.Settlement attributes;\\n        ExtraAttributes extraAttributes;\\n    }\\n\\n    enum AttributeType {\\n        PROPERTY,\\n        RANKING,\\n        STAT\\n    }\\n\\n    struct Attribute {\\n        AttributeType attributeType;\\n        string svgHeading;\\n        string attributeHeading;\\n        string value;\\n        bool onSVG;\\n    }\\n\\n    function constructTokenURI(TokenURIParams memory _params) internal pure returns (string memory) {\\n        Attribute[] memory formattedAttributes = formatAttributes(_params.attributes, _params.extraAttributes);\\n        string memory motto = _params.attributes.motto;\\n        string memory image = generateSVGImage(formattedAttributes, motto);\\n        string memory attributes = generateAttributes(formattedAttributes, motto);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                _params.name,\\n                                '\\\",\\\"description\\\":\\\"',\\n                                _params.description,\\n                                '\\\",\\\"image\\\": \\\"',\\n                                \\\"data:image/svg+xml;base64,\\\",\\n                                image,\\n                                '\\\",\\\"attributes\\\":',\\n                                attributes,\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function formatGold(uint256 _gold) internal pure returns (string memory) {\\n        string memory integer = string(abi.encodePacked(Strings.toString(_gold / GOLD_DENOMINATION)));\\n        string memory decimal;\\n        for (uint8 i = 0; i < GOLD_DECIMALS; i++) {\\n            uint256 digit = (_gold / 10**i) % 10;\\n            if (digit != 0 || bytes(decimal).length != 0) {\\n                decimal = string(abi.encodePacked(Strings.toString(digit), decimal));\\n            }\\n        }\\n\\n        if (bytes(decimal).length != 0) {\\n            return string(abi.encodePacked(integer, \\\".\\\", decimal));\\n        }\\n\\n        return integer;\\n    }\\n\\n    function formatAttributes(IOneWar.Settlement memory _attributes, ExtraAttributes memory _extraAttributes)\\n        internal\\n        pure\\n        returns (Attribute[] memory)\\n    {\\n        Attribute[] memory attributes = new Attribute[](_extraAttributes.hasWarCountdownBegun ? 12 : 11);\\n        attributes[0] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Soldiers\\\",\\n            \\\"Soldiers\\\",\\n            Strings.toString(_attributes.soldiers),\\n            true\\n        );\\n        attributes[1] = Attribute(AttributeType.STAT, \\\"Towers\\\", \\\"Towers\\\", Strings.toString(_attributes.towers), true);\\n        attributes[2] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Catapults\\\",\\n            \\\"Catapults\\\",\\n            Strings.toString(_attributes.catapults),\\n            true\\n        );\\n        attributes[3] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Treasure\\\",\\n            \\\"$GOLD Treasure\\\",\\n            formatGold(_attributes.treasure),\\n            true\\n        );\\n        attributes[4] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Miners\\\",\\n            \\\"$GOLD Miners\\\",\\n            Strings.toString(_attributes.miners),\\n            true\\n        );\\n        attributes[5] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Redeemed\\\",\\n            \\\"$GOLD Redeemed\\\",\\n            formatGold(_attributes.goldRedeemed),\\n            false\\n        );\\n        attributes[6] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Redeemable\\\",\\n            \\\"$GOLD Redeemable\\\",\\n            formatGold(_extraAttributes.redeemableGold),\\n            true\\n        );\\n        attributes[7] = Attribute(\\n            AttributeType.PROPERTY,\\n            \\\"Genesis\\\",\\n            \\\"Genesis Block\\\",\\n            Strings.toString(_attributes.genesis),\\n            true\\n        );\\n        attributes[8] = Attribute(\\n            AttributeType.PROPERTY,\\n            \\\"Founder\\\",\\n            \\\"Founder\\\",\\n            Strings.toString(_attributes.founder),\\n            true\\n        );\\n        attributes[9] = Attribute(AttributeType.RANKING, \\\"Glory\\\", \\\"Glory\\\", Strings.toString(_attributes.glory), true);\\n        attributes[10] = Attribute(\\n            AttributeType.STAT,\\n            \\\"Sanctuary\\\",\\n            \\\"Sanctuary Duration\\\",\\n            Strings.toString(_attributes.sanctuary),\\n            false\\n        );\\n\\n        if (_extraAttributes.hasWarCountdownBegun) {\\n            attributes[11] = Attribute(\\n                AttributeType.STAT,\\n                \\\"Sanctuary Remaining\\\",\\n                \\\"Blocks Until Sanctuary Ends\\\",\\n                Strings.toString(_extraAttributes.blocksUntilSanctuaryEnds),\\n                false\\n            );\\n        }\\n\\n        return attributes;\\n    }\\n\\n    function generateSVGImage(Attribute[] memory _attributes, string memory _motto)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string memory svg = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" '\\n        'preserveAspectRatio=\\\"xMinYMin meet\\\" '\\n        'viewBox=\\\"0 0 300 300\\\">'\\n        \\\"<style>\\\"\\n        'text { fill: #646464; font-family: \\\"Courier New\\\", monospace; font-size: 12px; } '\\n        \\\".motto { font-size: 8px; text-anchor: middle; font-style: italic; font-weight: bold; } \\\"\\n        \\\".right { text-transform: uppercase; } \\\"\\n        \\\".left > text { text-anchor: end; }\\\"\\n        \\\"</style>\\\"\\n        \\\"<rect \\\"\\n        'width=\\\"100%\\\" '\\n        'height=\\\"100%\\\" '\\n        'fill=\\\"#eee\\\"'\\n        \\\"/>\\\";\\n\\n        if (bytes(_motto).length > 0) {\\n            svg = string(abi.encodePacked(svg, '<text x=\\\"150\\\" y=\\\"22\\\" class=\\\"motto\\\">', _motto, \\\"</text>\\\"));\\n        }\\n\\n        string memory headings = '<g class=\\\"right\\\" transform=\\\"translate(170,55)\\\">';\\n        string memory values = '<g class=\\\"left\\\" transform=\\\"translate(130,55)\\\">';\\n\\n        uint16 _y = 0;\\n        for (uint8 i = 0; i < _attributes.length; i++) {\\n            Attribute memory attribute = _attributes[i];\\n            if (!attribute.onSVG) {\\n                continue;\\n            }\\n\\n            string memory textOpen = string(abi.encodePacked('<text y=\\\"', Strings.toString(_y), '\\\">'));\\n\\n            headings = string(abi.encodePacked(headings, textOpen, attribute.svgHeading, \\\"</text>\\\"));\\n\\n            string memory value = Strings.equal(attribute.svgHeading, \\\"Founder\\\")\\n                ? Strings.truncateAddressString(attribute.value)\\n                : attribute.value;\\n\\n            values = string(abi.encodePacked(values, textOpen, value, \\\"</text>\\\"));\\n\\n            _y += 25;\\n        }\\n\\n        headings = string(abi.encodePacked(headings, \\\"</g>\\\"));\\n        values = string(abi.encodePacked(values, \\\"</g>\\\"));\\n\\n        svg = string(\\n            abi.encodePacked(\\n                svg,\\n                \\\"<path \\\"\\n                'stroke=\\\"#696969\\\" '\\n                'stroke-width=\\\"1.337\\\" '\\n                'stroke-dasharray=\\\"10,15\\\" '\\n                'stroke-linecap=\\\"round\\\" '\\n                'd=\\\"M150 46 L150 256\\\"'\\n                \\\"/>\\\",\\n                headings,\\n                values,\\n                \\\"</svg>\\\"\\n            )\\n        );\\n\\n        return Base64.encode(bytes(svg));\\n    }\\n\\n    /**\\n     * @notice Parse Settlement attributes into a string.\\n     */\\n    function generateAttributes(Attribute[] memory _attributes, string memory _motto)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string memory attributes = \\\"[\\\";\\n        for (uint8 i = 0; i < _attributes.length; i++) {\\n            Attribute memory attribute = _attributes[i];\\n            attributes = string(\\n                abi.encodePacked(\\n                    attributes,\\n                    \\\"{\\\",\\n                    AttributeType.STAT == attribute.attributeType ? '\\\"display_type\\\":\\\"number\\\",' : \\\"\\\",\\n                    '\\\"trait_type\\\":\\\"',\\n                    attribute.attributeHeading,\\n                    '\\\",\\\"value\\\":',\\n                    AttributeType.STAT == attribute.attributeType || AttributeType.RANKING == attribute.attributeType\\n                        ? attribute.value\\n                        : string(abi.encodePacked('\\\"', attribute.value, '\\\"')),\\n                    \\\"},\\\"\\n                )\\n            );\\n        }\\n\\n        attributes = string(abi.encodePacked(attributes, '{\\\"trait_type\\\":\\\"Motto\\\",\\\"value\\\":\\\"', _motto, '\\\"}]'));\\n\\n        return attributes;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol) - MODIFIED\\npragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    function toString(uint256 _value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n        if (_value == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint256 temp = _value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n        while (_value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(_value % 10)));\\n            _value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    // Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string (MODIFIED)\\n    function toString(address _addr) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(40);\\n        for (uint8 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(_addr)) / (2**(8 * (19 - i)))));\\n            bytes1 high = bytes1(uint8(b) / 16);\\n            bytes1 low = bytes1(uint8(b) - 16 * uint8(high));\\n            buffer[2 * i] = char(high);\\n            buffer[2 * i + 1] = char(low);\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", string(buffer)));\\n    }\\n\\n    function char(bytes1 _byte) internal pure returns (bytes1) {\\n        if (uint8(_byte) < 10) {\\n            return bytes1(uint8(_byte) + 0x30);\\n        } else {\\n            return bytes1(uint8(_byte) + 0x57);\\n        }\\n    }\\n\\n    function truncateAddressString(string memory _str) internal pure returns (string memory) {\\n        bytes memory b = bytes(_str);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    string(abi.encodePacked(b[0], b[1], b[2], b[3], b[4], b[5])),\\n                    \\\"...\\\",\\n                    string(abi.encodePacked(b[36], b[37], b[38], b[39], b[40], b[41]))\\n                )\\n            );\\n    }\\n\\n    function equal(string memory _a, string memory _b) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IOneWar\",\"name\":\"_oneWar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"oneWar\",\"outputs\":[{\"internalType\":\"contract IOneWar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_settlement\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OneWarDescriptor", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000698a0e12b437e4059327b5c2875961fb8bdf7753", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}