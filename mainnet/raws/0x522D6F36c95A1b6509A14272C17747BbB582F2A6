{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Swap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable var-name-mixedcase */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./interfaces/ISwap.sol\\\";\\n\\n/**\\n * @title AirSwap: Atomic Token Swap\\n * @notice https://www.airswap.io/\\n */\\ncontract Swap is ISwap, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\n      abi.encodePacked(\\n        \\\"EIP712Domain(\\\",\\n        \\\"string name,\\\",\\n        \\\"string version,\\\",\\n        \\\"uint256 chainId,\\\",\\n        \\\"address verifyingContract\\\",\\n        \\\")\\\"\\n      )\\n    );\\n\\n  bytes32 public constant ORDER_TYPEHASH =\\n    keccak256(\\n      abi.encodePacked(\\n        \\\"Order(\\\",\\n        \\\"uint256 nonce,\\\",\\n        \\\"uint256 expiry,\\\",\\n        \\\"address signerWallet,\\\",\\n        \\\"address signerToken,\\\",\\n        \\\"uint256 signerAmount,\\\",\\n        \\\"uint256 protocolFee,\\\",\\n        \\\"address senderWallet,\\\",\\n        \\\"address senderToken,\\\",\\n        \\\"uint256 senderAmount\\\",\\n        \\\")\\\"\\n      )\\n    );\\n\\n  bytes32 public constant DOMAIN_NAME = keccak256(\\\"SWAP\\\");\\n  bytes32 public constant DOMAIN_VERSION = keccak256(\\\"3\\\");\\n  uint256 public immutable DOMAIN_CHAIN_ID;\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n  uint256 internal constant MAX_PERCENTAGE = 100;\\n  uint256 internal constant MAX_SCALE = 77;\\n  uint256 internal constant MAX_ERROR_COUNT = 6;\\n  uint256 public constant FEE_DIVISOR = 10000;\\n\\n  /**\\n   * @notice Double mapping of signers to nonce groups to nonce states\\n   * @dev The nonce group is computed as nonce / 256, so each group of 256 sequential nonces uses the same key\\n   * @dev The nonce states are encoded as 256 bits, for each nonce in the group 0 means available and 1 means used\\n   */\\n  mapping(address => mapping(uint256 => uint256)) internal _nonceGroups;\\n\\n  mapping(address => address) public override authorized;\\n\\n  uint256 public protocolFee;\\n  uint256 public protocolFeeLight;\\n  address public protocolFeeWallet;\\n  uint256 public rebateScale;\\n  uint256 public rebateMax;\\n  address public staking;\\n\\n  constructor(\\n    uint256 _protocolFee,\\n    uint256 _protocolFeeLight,\\n    address _protocolFeeWallet,\\n    uint256 _rebateScale,\\n    uint256 _rebateMax,\\n    address _staking\\n  ) {\\n    require(_protocolFee < FEE_DIVISOR, \\\"INVALID_FEE\\\");\\n    require(_protocolFeeLight < FEE_DIVISOR, \\\"INVALID_FEE\\\");\\n    require(_protocolFeeWallet != address(0), \\\"INVALID_FEE_WALLET\\\");\\n    require(_rebateScale <= MAX_SCALE, \\\"SCALE_TOO_HIGH\\\");\\n    require(_rebateMax <= MAX_PERCENTAGE, \\\"MAX_TOO_HIGH\\\");\\n    require(_staking != address(0), \\\"INVALID_STAKING\\\");\\n\\n    uint256 currentChainId = getChainId();\\n    DOMAIN_CHAIN_ID = currentChainId;\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        DOMAIN_TYPEHASH,\\n        DOMAIN_NAME,\\n        DOMAIN_VERSION,\\n        currentChainId,\\n        this\\n      )\\n    );\\n\\n    protocolFee = _protocolFee;\\n    protocolFeeLight = _protocolFeeLight;\\n    protocolFeeWallet = _protocolFeeWallet;\\n    rebateScale = _rebateScale;\\n    rebateMax = _rebateMax;\\n    staking = _staking;\\n  }\\n\\n  /**\\n   * @notice Atomic ERC20 Swap\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC20 token transferred from the signer\\n   * @param signerAmount uint256 Amount transferred from the signer\\n   * @param senderToken address ERC20 token transferred from the sender\\n   * @param senderAmount uint256 Amount transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function swap(\\n    address recipient,\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    // Ensure the order is valid\\n    _checkValidOrder(\\n      nonce,\\n      expiry,\\n      signerWallet,\\n      signerToken,\\n      signerAmount,\\n      senderToken,\\n      senderAmount,\\n      v,\\n      r,\\n      s\\n    );\\n\\n    // Transfer token from sender to signer\\n    IERC20(senderToken).safeTransferFrom(\\n      msg.sender,\\n      signerWallet,\\n      senderAmount\\n    );\\n\\n    // Transfer token from signer to recipient\\n    IERC20(signerToken).safeTransferFrom(signerWallet, recipient, signerAmount);\\n\\n    // Calculate and transfer protocol fee and any rebate\\n    _transferProtocolFee(signerToken, signerWallet, signerAmount);\\n\\n    // Emit a Swap event\\n    emit Swap(\\n      nonce,\\n      block.timestamp,\\n      signerWallet,\\n      signerToken,\\n      signerAmount,\\n      protocolFee,\\n      msg.sender,\\n      senderToken,\\n      senderAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Swap Atomic ERC20 Swap (Low Gas Usage)\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC20 token transferred from the signer\\n   * @param signerAmount uint256 Amount transferred from the signer\\n   * @param senderToken address ERC20 token transferred from the sender\\n   * @param senderAmount uint256 Amount transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function light(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    require(DOMAIN_CHAIN_ID == getChainId(), \\\"CHAIN_ID_CHANGED\\\");\\n\\n    // Ensure the expiry is not passed\\n    require(expiry > block.timestamp, \\\"EXPIRY_PASSED\\\");\\n\\n    // Recover the signatory from the hash and signature\\n    address signatory = ecrecover(\\n      keccak256(\\n        abi.encodePacked(\\n          \\\"\\\\x19\\\\x01\\\",\\n          DOMAIN_SEPARATOR,\\n          keccak256(\\n            abi.encode(\\n              ORDER_TYPEHASH,\\n              nonce,\\n              expiry,\\n              signerWallet,\\n              signerToken,\\n              signerAmount,\\n              protocolFeeLight,\\n              msg.sender,\\n              senderToken,\\n              senderAmount\\n            )\\n          )\\n        )\\n      ),\\n      v,\\n      r,\\n      s\\n    );\\n\\n    // Ensure the signatory is not null\\n    require(signatory != address(0), \\\"SIGNATURE_INVALID\\\");\\n\\n    // Ensure the nonce is not yet used and if not mark it used\\n    require(_markNonceAsUsed(signatory, nonce), \\\"NONCE_ALREADY_USED\\\");\\n\\n    // Ensure the signatory is authorized by the signer wallet\\n    if (signerWallet != signatory) {\\n      require(authorized[signerWallet] == signatory, \\\"UNAUTHORIZED\\\");\\n    }\\n\\n    // Transfer token from sender to signer\\n    IERC20(senderToken).safeTransferFrom(\\n      msg.sender,\\n      signerWallet,\\n      senderAmount\\n    );\\n\\n    // Transfer token from signer to recipient\\n    IERC20(signerToken).safeTransferFrom(\\n      signerWallet,\\n      msg.sender,\\n      signerAmount\\n    );\\n\\n    // Transfer fee from signer to feeWallet\\n    IERC20(signerToken).safeTransferFrom(\\n      signerWallet,\\n      protocolFeeWallet,\\n      (signerAmount * protocolFeeLight) / FEE_DIVISOR\\n    );\\n\\n    // Emit a Swap event\\n    emit Swap(\\n      nonce,\\n      block.timestamp,\\n      signerWallet,\\n      signerToken,\\n      signerAmount,\\n      protocolFeeLight,\\n      msg.sender,\\n      senderToken,\\n      senderAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Sender Buys an NFT (ERC721)\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC721 token transferred from the signer\\n   * @param signerID uint256 Token ID transferred from the signer\\n   * @param senderToken address ERC20 token transferred from the sender\\n   * @param senderAmount uint256 Amount transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function buyNFT(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerID,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public override {\\n    _checkValidOrder(\\n      nonce,\\n      expiry,\\n      signerWallet,\\n      signerToken,\\n      signerID,\\n      senderToken,\\n      senderAmount,\\n      v,\\n      r,\\n      s\\n    );\\n\\n    // Transfer token from sender to signer\\n    IERC20(senderToken).safeTransferFrom(\\n      msg.sender,\\n      signerWallet,\\n      senderAmount\\n    );\\n\\n    // Transfer token from signer to recipient\\n    IERC721(signerToken).transferFrom(signerWallet, msg.sender, signerID);\\n\\n    // Calculate and transfer protocol fee and rebate\\n    _transferProtocolFee(senderToken, msg.sender, senderAmount);\\n\\n    emit Swap(\\n      nonce,\\n      block.timestamp,\\n      signerWallet,\\n      signerToken,\\n      signerID,\\n      protocolFee,\\n      msg.sender,\\n      senderToken,\\n      senderAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Sender Sells an NFT (ERC721)\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC20 token transferred from the signer\\n   * @param signerAmount uint256 Amount transferred from the signer\\n   * @param senderToken address ERC721 token transferred from the sender\\n   * @param senderID uint256 Token ID transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function sellNFT(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderID,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public override {\\n    _checkValidOrder(\\n      nonce,\\n      expiry,\\n      signerWallet,\\n      signerToken,\\n      signerAmount,\\n      senderToken,\\n      senderID,\\n      v,\\n      r,\\n      s\\n    );\\n\\n    // Transfer token from sender to signer\\n    IERC721(senderToken).transferFrom(msg.sender, signerWallet, senderID);\\n\\n    // Transfer token from signer to recipient\\n    IERC20(signerToken).safeTransferFrom(\\n      signerWallet,\\n      msg.sender,\\n      signerAmount\\n    );\\n\\n    // Calculate and transfer protocol fee and rebate\\n    _transferProtocolFee(signerToken, signerWallet, signerAmount);\\n\\n    emit Swap(\\n      nonce,\\n      block.timestamp,\\n      signerWallet,\\n      signerToken,\\n      signerAmount,\\n      protocolFee,\\n      msg.sender,\\n      senderToken,\\n      senderID\\n    );\\n  }\\n\\n  /**\\n   * @notice Signer and sender swap NFTs (ERC721)\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC721 token transferred from the signer\\n   * @param signerID uint256 Token ID transferred from the signer\\n   * @param senderToken address ERC721 token transferred from the sender\\n   * @param senderID uint256 Token ID transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function swapNFTs(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerID,\\n    address senderToken,\\n    uint256 senderID,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public override {\\n    _checkValidOrder(\\n      nonce,\\n      expiry,\\n      signerWallet,\\n      signerToken,\\n      signerID,\\n      senderToken,\\n      senderID,\\n      v,\\n      r,\\n      s\\n    );\\n\\n    // Transfer token from sender to signer\\n    IERC721(senderToken).transferFrom(msg.sender, signerWallet, senderID);\\n\\n    // Transfer token from signer to sender\\n    IERC721(signerToken).transferFrom(signerWallet, msg.sender, signerID);\\n\\n    emit Swap(\\n      nonce,\\n      block.timestamp,\\n      signerWallet,\\n      signerToken,\\n      signerID,\\n      0,\\n      msg.sender,\\n      senderToken,\\n      senderID\\n    );\\n  }\\n\\n  /**\\n   * @notice Set the fee\\n   * @param _protocolFee uint256 Value of the fee in basis points\\n   */\\n  function setProtocolFee(uint256 _protocolFee) external onlyOwner {\\n    // Ensure the fee is less than divisor\\n    require(_protocolFee < FEE_DIVISOR, \\\"INVALID_FEE\\\");\\n    protocolFee = _protocolFee;\\n    emit SetProtocolFee(_protocolFee);\\n  }\\n\\n  /**\\n   * @notice Set the light fee\\n   * @param _protocolFeeLight uint256 Value of the fee in basis points\\n   */\\n  function setProtocolFeeLight(uint256 _protocolFeeLight) external onlyOwner {\\n    // Ensure the fee is less than divisor\\n    require(_protocolFeeLight < FEE_DIVISOR, \\\"INVALID_FEE_LIGHT\\\");\\n    protocolFeeLight = _protocolFeeLight;\\n    emit SetProtocolFeeLight(_protocolFeeLight);\\n  }\\n\\n  /**\\n   * @notice Set the fee wallet\\n   * @param _protocolFeeWallet address Wallet to transfer fee to\\n   */\\n  function setProtocolFeeWallet(address _protocolFeeWallet) external onlyOwner {\\n    // Ensure the new fee wallet is not null\\n    require(_protocolFeeWallet != address(0), \\\"INVALID_FEE_WALLET\\\");\\n    protocolFeeWallet = _protocolFeeWallet;\\n    emit SetProtocolFeeWallet(_protocolFeeWallet);\\n  }\\n\\n  /**\\n   * @notice Set scale\\n   * @dev Only owner\\n   * @param _rebateScale uint256\\n   */\\n  function setRebateScale(uint256 _rebateScale) external onlyOwner {\\n    require(_rebateScale <= MAX_SCALE, \\\"SCALE_TOO_HIGH\\\");\\n    rebateScale = _rebateScale;\\n    emit SetRebateScale(_rebateScale);\\n  }\\n\\n  /**\\n   * @notice Set max\\n   * @dev Only owner\\n   * @param _rebateMax uint256\\n   */\\n  function setRebateMax(uint256 _rebateMax) external onlyOwner {\\n    require(_rebateMax <= MAX_PERCENTAGE, \\\"MAX_TOO_HIGH\\\");\\n    rebateMax = _rebateMax;\\n    emit SetRebateMax(_rebateMax);\\n  }\\n\\n  /**\\n   * @notice Set the staking token\\n   * @param newstaking address Token to check balances on\\n   */\\n  function setStaking(address newstaking) external onlyOwner {\\n    // Ensure the new staking token is not null\\n    require(newstaking != address(0), \\\"INVALID_STAKING\\\");\\n    staking = newstaking;\\n    emit SetStaking(newstaking);\\n  }\\n\\n  /**\\n   * @notice Authorize a signer\\n   * @param signer address Wallet of the signer to authorize\\n   * @dev Emits an Authorize event\\n   */\\n  function authorize(address signer) external override {\\n    require(signer != address(0), \\\"SIGNER_INVALID\\\");\\n    authorized[msg.sender] = signer;\\n    emit Authorize(signer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Revoke the signer\\n   * @dev Emits a Revoke event\\n   */\\n  function revoke() external override {\\n    address tmp = authorized[msg.sender];\\n    delete authorized[msg.sender];\\n    emit Revoke(tmp, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Cancel one or more nonces\\n   * @dev Cancelled nonces are marked as used\\n   * @dev Emits a Cancel event\\n   * @dev Out of gas may occur in arrays of length > 400\\n   * @param nonces uint256[] List of nonces to cancel\\n   */\\n  function cancel(uint256[] calldata nonces) external override {\\n    for (uint256 i = 0; i < nonces.length; i++) {\\n      uint256 nonce = nonces[i];\\n      if (_markNonceAsUsed(msg.sender, nonce)) {\\n        emit Cancel(nonce, msg.sender);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Validates Swap Order for any potential errors\\n   * @param senderWallet address Wallet that would send the order\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC20 token transferred from the signer\\n   * @param signerAmount uint256 Amount transferred from the signer\\n   * @param senderToken address ERC20 token transferred from the sender\\n   * @param senderAmount uint256 Amount transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   * @return tuple of error count and bytes32[] memory array of error messages\\n   */\\n  function check(\\n    address senderWallet,\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public view returns (uint256, bytes32[] memory) {\\n    bytes32[] memory errors = new bytes32[](MAX_ERROR_COUNT);\\n    Order memory order;\\n    uint256 errCount;\\n    order.nonce = nonce;\\n    order.expiry = expiry;\\n    order.signerWallet = signerWallet;\\n    order.signerToken = signerToken;\\n    order.signerAmount = signerAmount;\\n    order.senderToken = senderToken;\\n    order.senderAmount = senderAmount;\\n    order.v = v;\\n    order.r = r;\\n    order.s = s;\\n    order.senderWallet = senderWallet;\\n    bytes32 hashed = _getOrderHash(\\n      order.nonce,\\n      order.expiry,\\n      order.signerWallet,\\n      order.signerToken,\\n      order.signerAmount,\\n      order.senderWallet,\\n      order.senderToken,\\n      order.senderAmount\\n    );\\n    address signatory = _getSignatory(hashed, order.v, order.r, order.s);\\n\\n    if (signatory == address(0)) {\\n      errors[errCount] = \\\"SIGNATURE_INVALID\\\";\\n      errCount++;\\n    }\\n\\n    if (order.expiry < block.timestamp) {\\n      errors[errCount] = \\\"EXPIRY_PASSED\\\";\\n      errCount++;\\n    }\\n\\n    if (\\n      order.signerWallet != signatory &&\\n      authorized[order.signerWallet] != signatory\\n    ) {\\n      errors[errCount] = \\\"UNAUTHORIZED\\\";\\n      errCount++;\\n    } else {\\n      if (nonceUsed(signatory, order.nonce)) {\\n        errors[errCount] = \\\"NONCE_ALREADY_USED\\\";\\n        errCount++;\\n      }\\n    }\\n\\n    uint256 signerBalance = IERC20(order.signerToken).balanceOf(\\n      order.signerWallet\\n    );\\n\\n    uint256 signerAllowance = IERC20(order.signerToken).allowance(\\n      order.signerWallet,\\n      address(this)\\n    );\\n\\n    uint256 feeAmount = (order.signerAmount * protocolFee) / FEE_DIVISOR;\\n\\n    if (signerAllowance < order.signerAmount + feeAmount) {\\n      errors[errCount] = \\\"SIGNER_ALLOWANCE_LOW\\\";\\n      errCount++;\\n    }\\n\\n    if (signerBalance < order.signerAmount + feeAmount) {\\n      errors[errCount] = \\\"SIGNER_BALANCE_LOW\\\";\\n      errCount++;\\n    }\\n    return (errCount, errors);\\n  }\\n\\n  /**\\n   * @notice Calculate output amount for an input score\\n   * @param stakingBalance uint256\\n   * @param feeAmount uint256\\n   */\\n  function calculateDiscount(uint256 stakingBalance, uint256 feeAmount)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 divisor = (uint256(10)**rebateScale) + stakingBalance;\\n    return (rebateMax * stakingBalance * feeAmount) / divisor / 100;\\n  }\\n\\n  /**\\n   * @notice Calculates and refers fee amount\\n   * @param wallet address\\n   * @param amount uint256\\n   */\\n  function calculateProtocolFee(address wallet, uint256 amount)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    // Transfer fee from signer to feeWallet\\n    uint256 feeAmount = (amount * protocolFee) / FEE_DIVISOR;\\n    if (feeAmount > 0) {\\n      uint256 discountAmount = calculateDiscount(\\n        IERC20(staking).balanceOf(wallet),\\n        feeAmount\\n      );\\n      return feeAmount - discountAmount;\\n    }\\n    return feeAmount;\\n  }\\n\\n  /**\\n   * @notice Returns true if the nonce has been used\\n   * @param signer address Address of the signer\\n   * @param nonce uint256 Nonce being checked\\n   */\\n  function nonceUsed(address signer, uint256 nonce)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    uint256 groupKey = nonce / 256;\\n    uint256 indexInGroup = nonce % 256;\\n    return (_nonceGroups[signer][groupKey] >> indexInGroup) & 1 == 1;\\n  }\\n\\n  /**\\n   * @notice Returns the current chainId using the chainid opcode\\n   * @return id uint256 The chain id\\n   */\\n  function getChainId() public view returns (uint256 id) {\\n    // no-inline-assembly\\n    assembly {\\n      id := chainid()\\n    }\\n  }\\n\\n  /**\\n   * @notice Marks a nonce as used for the given signer\\n   * @param signer address Address of the signer for which to mark the nonce as used\\n   * @param nonce uint256 Nonce to be marked as used\\n   * @return bool True if the nonce was not marked as used already\\n   */\\n  function _markNonceAsUsed(address signer, uint256 nonce)\\n    internal\\n    returns (bool)\\n  {\\n    uint256 groupKey = nonce / 256;\\n    uint256 indexInGroup = nonce % 256;\\n    uint256 group = _nonceGroups[signer][groupKey];\\n\\n    // If it is already used, return false\\n    if ((group >> indexInGroup) & 1 == 1) {\\n      return false;\\n    }\\n\\n    _nonceGroups[signer][groupKey] = group | (uint256(1) << indexInGroup);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Checks Order Expiry, Nonce, Signature\\n   * @param nonce uint256 Unique and should be sequential\\n   * @param expiry uint256 Expiry in seconds since 1 January 1970\\n   * @param signerWallet address Wallet of the signer\\n   * @param signerToken address ERC20 token transferred from the signer\\n   * @param signerAmount uint256 Amount transferred from the signer\\n   * @param senderToken address ERC20 token transferred from the sender\\n   * @param senderAmount uint256 Amount transferred from the sender\\n   * @param v uint8 \\\"v\\\" value of the ECDSA signature\\n   * @param r bytes32 \\\"r\\\" value of the ECDSA signature\\n   * @param s bytes32 \\\"s\\\" value of the ECDSA signature\\n   */\\n  function _checkValidOrder(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    require(DOMAIN_CHAIN_ID == getChainId(), \\\"CHAIN_ID_CHANGED\\\");\\n\\n    // Ensure the expiry is not passed\\n    require(expiry > block.timestamp, \\\"EXPIRY_PASSED\\\");\\n\\n    bytes32 hashed = _getOrderHash(\\n      nonce,\\n      expiry,\\n      signerWallet,\\n      signerToken,\\n      signerAmount,\\n      msg.sender,\\n      senderToken,\\n      senderAmount\\n    );\\n\\n    // Recover the signatory from the hash and signature\\n    address signatory = _getSignatory(hashed, v, r, s);\\n\\n    // Ensure the signatory is not null\\n    require(signatory != address(0), \\\"SIGNATURE_INVALID\\\");\\n\\n    // Ensure the nonce is not yet used and if not mark it used\\n    require(_markNonceAsUsed(signatory, nonce), \\\"NONCE_ALREADY_USED\\\");\\n\\n    // Ensure the signatory is authorized by the signer wallet\\n    if (signerWallet != signatory) {\\n      require(authorized[signerWallet] == signatory, \\\"UNAUTHORIZED\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Hash order parameters\\n   * @param nonce uint256\\n   * @param expiry uint256\\n   * @param signerWallet address\\n   * @param signerToken address\\n   * @param signerAmount uint256\\n   * @param senderToken address\\n   * @param senderAmount uint256\\n   * @return bytes32\\n   */\\n  function _getOrderHash(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderWallet,\\n    address senderToken,\\n    uint256 senderAmount\\n  ) internal view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          ORDER_TYPEHASH,\\n          nonce,\\n          expiry,\\n          signerWallet,\\n          signerToken,\\n          signerAmount,\\n          protocolFee,\\n          senderWallet,\\n          senderToken,\\n          senderAmount\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Recover the signatory from a signature\\n   * @param hash bytes32\\n   * @param v uint8\\n   * @param r bytes32\\n   * @param s bytes32\\n   */\\n  function _getSignatory(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal view returns (address) {\\n    return\\n      ecrecover(\\n        keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hash)),\\n        v,\\n        r,\\n        s\\n      );\\n  }\\n\\n  /**\\n   * @notice Calculates and transfers protocol fee and rebate\\n   * @param sourceToken address\\n   * @param sourceWallet address\\n   * @param amount uint256\\n   */\\n  function _transferProtocolFee(\\n    address sourceToken,\\n    address sourceWallet,\\n    uint256 amount\\n  ) internal {\\n    // Transfer fee from signer to feeWallet\\n    uint256 feeAmount = (amount * protocolFee) / FEE_DIVISOR;\\n    if (feeAmount > 0) {\\n      uint256 discountAmount = calculateDiscount(\\n        IERC20(staking).balanceOf(msg.sender),\\n        feeAmount\\n      );\\n      if (discountAmount > 0) {\\n        // Transfer fee from signer to sender\\n        IERC20(sourceToken).safeTransferFrom(\\n          sourceWallet,\\n          msg.sender,\\n          discountAmount\\n        );\\n        // Transfer fee from signer to feeWallet\\n        IERC20(sourceToken).safeTransferFrom(\\n          sourceWallet,\\n          protocolFeeWallet,\\n          feeAmount - discountAmount\\n        );\\n      } else {\\n        IERC20(sourceToken).safeTransferFrom(\\n          sourceWallet,\\n          protocolFeeWallet,\\n          feeAmount\\n        );\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISwap {\\n  struct Order {\\n    uint256 nonce;\\n    uint256 expiry;\\n    address signerWallet;\\n    address signerToken;\\n    uint256 signerAmount;\\n    address senderWallet;\\n    address senderToken;\\n    uint256 senderAmount;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  event Swap(\\n    uint256 indexed nonce,\\n    uint256 timestamp,\\n    address indexed signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    uint256 protocolFee,\\n    address indexed senderWallet,\\n    address senderToken,\\n    uint256 senderAmount\\n  );\\n\\n  event Cancel(uint256 indexed nonce, address indexed signerWallet);\\n\\n  event Authorize(address indexed signer, address indexed signerWallet);\\n\\n  event Revoke(address indexed signer, address indexed signerWallet);\\n\\n  event SetProtocolFee(uint256 protocolFee);\\n\\n  event SetProtocolFeeLight(uint256 protocolFeeLight);\\n\\n  event SetProtocolFeeWallet(address indexed feeWallet);\\n\\n  event SetRebateScale(uint256 rebateScale);\\n\\n  event SetRebateMax(uint256 rebateMax);\\n\\n  event SetStaking(address indexed staking);\\n\\n  function swap(\\n    address recipient,\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function light(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function buyNFT(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function sellNFT(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function swapNFTs(\\n    uint256 nonce,\\n    uint256 expiry,\\n    address signerWallet,\\n    address signerToken,\\n    uint256 signerAmount,\\n    address senderToken,\\n    uint256 senderAmount,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function authorize(address sender) external;\\n\\n  function revoke() external;\\n\\n  function cancel(uint256[] calldata nonces) external;\\n\\n  function nonceUsed(address, uint256) external view returns (bool);\\n\\n  function authorized(address) external view returns (address);\\n\\n  function calculateProtocolFee(address, uint256)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFeeLight\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rebateScale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebateMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"}],\"name\":\"Authorize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeeLight\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFeeLight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"name\":\"SetProtocolFeeWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebateMax\",\"type\":\"uint256\"}],\"name\":\"SetRebateMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebateScale\",\"type\":\"uint256\"}],\"name\":\"SetRebateScale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"SetStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signerToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_VERSION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"calculateDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"light\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"nonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeLight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebateScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"sellNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeLight\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeLight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeWallet\",\"type\":\"address\"}],\"name\":\"setProtocolFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebateMax\",\"type\":\"uint256\"}],\"name\":\"setRebateMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebateScale\",\"type\":\"uint256\"}],\"name\":\"setRebateScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newstaking\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signerToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderID\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Swap", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000007000000000000000000000000191a6da5543772779caba4730cedb2ff030b8b13000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000640000000000000000000000006d88b09805b90dad911e5c5a512eedd984d6860b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}