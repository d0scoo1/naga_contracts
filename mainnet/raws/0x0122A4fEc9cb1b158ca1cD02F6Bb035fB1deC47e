{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MNTSource.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./ErrorCodes.sol\\\";\\n\\n/**\\n * @title MNTSource Contract\\n * @notice Distributes a token to a different contract at a fixed rate.\\n * @dev This contract must be poked via the `drip()` function every so often.\\n * @author Minterest\\n */\\ncontract MNTSource {\\n    /// @notice The block number when the MNTSource started (immutable)\\n    uint256 public dripStart;\\n\\n    /// @notice Tokens per block that to drip to target (immutable)\\n    uint256 public dripRate;\\n\\n    /// @notice Reference to token to drip (immutable)\\n    IERC20 public token;\\n\\n    /// @notice Target to receive dripped tokens (immutable)\\n    address public target;\\n\\n    /// @notice Amount that has already been dripped\\n    uint256 public dripped;\\n\\n    /**\\n     * @notice Constructs a MNTSource\\n     * @param dripRate_ Number of tokens per block to drip\\n     * @param token_ The token to drip\\n     * @param target_ The recipient of dripped tokens\\n     */\\n    constructor(\\n        uint256 dripRate_,\\n        IERC20 token_,\\n        address target_\\n    ) {\\n        require(target_ != address(0), ErrorCodes.TARGET_ADDRESS_CANNOT_BE_ZERO);\\n        dripStart = block.number;\\n        dripRate = dripRate_;\\n        token = token_;\\n        target = target_;\\n        dripped = 0;\\n    }\\n\\n    /**\\n     * @notice Drips the maximum amount of tokens to match the drip rate since inception\\n     * @dev Note: this will only drip up to the amount of tokens available.\\n     * @return The amount of tokens dripped in this call\\n     */\\n    function drip() external returns (uint256) {\\n        // First, read storage into memory\\n        IERC20 token_ = token;\\n        uint256 mntSourceBalance_ = token_.balanceOf(address(this));\\n        uint256 dripRate_ = dripRate;\\n        uint256 dripStart_ = dripStart;\\n        uint256 dripped_ = dripped;\\n        address target_ = target;\\n        uint256 blockNumber_ = block.number;\\n\\n        // Next, calculate intermediate values\\n        uint256 dripTotal_ = dripRate_ * (blockNumber_ - dripStart_);\\n        uint256 deltaDrip_ = dripTotal_ - dripped_;\\n        uint256 toDrip_ = Math.min(mntSourceBalance_, deltaDrip_);\\n        uint256 drippedNext_ = dripped_ + toDrip_;\\n\\n        // Finally, write new `dripped` value and transfer tokens to target\\n        dripped = drippedNext_;\\n        require(token_.transfer(target_, toDrip_));\\n\\n        return toDrip_;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ErrorCodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.9;\\n\\nlibrary ErrorCodes {\\n    // Common\\n    string internal constant ADMIN_ONLY = \\\"E101\\\";\\n    string internal constant UNAUTHORIZED = \\\"E102\\\";\\n    string internal constant OPERATION_PAUSED = \\\"E103\\\";\\n    string internal constant WHITELISTED_ONLY = \\\"E104\\\";\\n\\n    // Invalid input\\n    string internal constant ADMIN_ADDRESS_CANNOT_BE_ZERO = \\\"E201\\\";\\n    string internal constant INVALID_REDEEM = \\\"E202\\\";\\n    string internal constant REDEEM_TOO_MUCH = \\\"E203\\\";\\n    string internal constant WITHDRAW_NOT_ALLOWED = \\\"E204\\\";\\n    string internal constant MARKET_NOT_LISTED = \\\"E205\\\";\\n    string internal constant INSUFFICIENT_LIQUIDITY = \\\"E206\\\";\\n    string internal constant INVALID_SENDER = \\\"E207\\\";\\n    string internal constant BORROW_CAP_REACHED = \\\"E208\\\";\\n    string internal constant BALANCE_OWED = \\\"E209\\\";\\n    string internal constant UNRELIABLE_LIQUIDATOR = \\\"E210\\\";\\n    string internal constant INVALID_DESTINATION = \\\"E211\\\";\\n    string internal constant CONTRACT_DOES_NOT_SUPPORT_INTERFACE = \\\"E212\\\";\\n    string internal constant INSUFFICIENT_STAKE = \\\"E213\\\";\\n    string internal constant INVALID_DURATION = \\\"E214\\\";\\n    string internal constant INVALID_PERIOD_RATE = \\\"E215\\\";\\n    string internal constant EB_TIER_LIMIT_REACHED = \\\"E216\\\";\\n    string internal constant INVALID_DEBT_REDEMPTION_RATE = \\\"E217\\\";\\n    string internal constant LQ_INVALID_SEIZE_DISTRIBUTION = \\\"E218\\\";\\n    string internal constant EB_TIER_DOES_NOT_EXIST = \\\"E219\\\";\\n    string internal constant EB_ZERO_TIER_CANNOT_BE_ENABLED = \\\"E220\\\";\\n    string internal constant EB_ALREADY_ACTIVATED_TIER = \\\"E221\\\";\\n    string internal constant EB_END_BLOCK_MUST_BE_LARGER_THAN_CURRENT = \\\"E222\\\";\\n    string internal constant EB_CANNOT_MINT_TOKEN_FOR_ACTIVATED_TIER = \\\"E223\\\";\\n    string internal constant EB_EMISSION_BOOST_IS_NOT_IN_RANGE = \\\"E224\\\";\\n    string internal constant TARGET_ADDRESS_CANNOT_BE_ZERO = \\\"E225\\\";\\n    string internal constant INSUFFICIENT_TOKEN_IN_VESTING_CONTRACT = \\\"E226\\\";\\n    string internal constant VESTING_SCHEDULE_ALREADY_EXISTS = \\\"E227\\\";\\n    string internal constant INSUFFICIENT_TOKENS_TO_CREATE_SCHEDULE = \\\"E228\\\";\\n    string internal constant NO_VESTING_SCHEDULE = \\\"E229\\\";\\n    string internal constant SCHEDULE_IS_IRREVOCABLE = \\\"E230\\\";\\n    string internal constant SCHEDULE_START_IS_ZERO = \\\"E231\\\";\\n    string internal constant MNT_AMOUNT_IS_ZERO = \\\"E232\\\";\\n    string internal constant RECEIVER_ALREADY_LISTED = \\\"E233\\\";\\n    string internal constant RECEIVER_ADDRESS_CANNOT_BE_ZERO = \\\"E234\\\";\\n    string internal constant CURRENCY_ADDRESS_CANNOT_BE_ZERO = \\\"E235\\\";\\n    string internal constant INCORRECT_AMOUNT = \\\"E236\\\";\\n    string internal constant RECEIVER_NOT_IN_APPROVED_LIST = \\\"E237\\\";\\n    string internal constant MEMBERSHIP_LIMIT = \\\"E238\\\";\\n    string internal constant MEMBER_NOT_EXIST = \\\"E239\\\";\\n    string internal constant MEMBER_ALREADY_ADDED = \\\"E240\\\";\\n    string internal constant MEMBERSHIP_LIMIT_REACHED = \\\"E241\\\";\\n    string internal constant REPORTED_PRICE_SHOULD_BE_GREATER_THAN_ZERO = \\\"E242\\\";\\n    string internal constant MTOKEN_ADDRESS_CANNOT_BE_ZERO = \\\"E243\\\";\\n    string internal constant TOKEN_ADDRESS_CANNOT_BE_ZERO = \\\"E244\\\";\\n    string internal constant REDEEM_TOKENS_OR_REDEEM_AMOUNT_MUST_BE_ZERO = \\\"E245\\\";\\n    string internal constant FL_TOKEN_IS_NOT_UNDERLYING = \\\"E246\\\";\\n    string internal constant FL_AMOUNT_IS_TOO_LARGE = \\\"E247\\\";\\n    string internal constant FL_CALLBACK_FAILED = \\\"E248\\\";\\n    string internal constant DD_UNSUPPORTED_TOKEN = \\\"E249\\\";\\n    string internal constant DD_MARKET_ADDRESS_IS_ZERO = \\\"E250\\\";\\n    string internal constant DD_ROUTER_ADDRESS_IS_ZERO = \\\"E251\\\";\\n    string internal constant DD_RECEIVER_ADDRESS_IS_ZERO = \\\"E252\\\";\\n    string internal constant DD_BOT_ADDRESS_IS_ZERO = \\\"E253\\\";\\n    string internal constant DD_MARKET_NOT_FOUND = \\\"E254\\\";\\n    string internal constant DD_ROUTER_NOT_FOUND = \\\"E255\\\";\\n    string internal constant DD_RECEIVER_NOT_FOUND = \\\"E256\\\";\\n    string internal constant DD_BOT_NOT_FOUND = \\\"E257\\\";\\n    string internal constant DD_ROUTER_ALREADY_SET = \\\"E258\\\";\\n    string internal constant DD_RECEIVER_ALREADY_SET = \\\"E259\\\";\\n    string internal constant DD_BOT_ALREADY_SET = \\\"E260\\\";\\n    string internal constant EB_MARKET_INDEX_IS_LESS_THAN_USER_INDEX = \\\"E261\\\";\\n    string internal constant MV_BLOCK_NOT_YET_MINED = \\\"E262\\\";\\n    string internal constant MV_SIGNATURE_EXPIRED = \\\"E263\\\";\\n    string internal constant MV_INVALID_NONCE = \\\"E264\\\";\\n    string internal constant DD_EXPIRED_DEADLINE = \\\"E265\\\";\\n    string internal constant LQ_INVALID_DRR_ARRAY = \\\"E266\\\";\\n    string internal constant LQ_INVALID_SEIZE_ARRAY = \\\"E267\\\";\\n    string internal constant LQ_INVALID_DEBT_REDEMPTION_RATE = \\\"E268\\\";\\n    string internal constant LQ_INVALID_SEIZE_INDEX = \\\"E269\\\";\\n    string internal constant LQ_DUPLICATE_SEIZE_INDEX = \\\"E270\\\";\\n\\n    // Protocol errors\\n    string internal constant INVALID_PRICE = \\\"E301\\\";\\n    string internal constant MARKET_NOT_FRESH = \\\"E302\\\";\\n    string internal constant BORROW_RATE_TOO_HIGH = \\\"E303\\\";\\n    string internal constant INSUFFICIENT_TOKEN_CASH = \\\"E304\\\";\\n    string internal constant INSUFFICIENT_TOKENS_FOR_RELEASE = \\\"E305\\\";\\n    string internal constant INSUFFICIENT_MNT_FOR_GRANT = \\\"E306\\\";\\n    string internal constant TOKEN_TRANSFER_IN_UNDERFLOW = \\\"E307\\\";\\n    string internal constant NOT_PARTICIPATING_IN_BUYBACK = \\\"E308\\\";\\n    string internal constant NOT_ENOUGH_PARTICIPATING_ACCOUNTS = \\\"E309\\\";\\n    string internal constant NOTHING_TO_DISTRIBUTE = \\\"E310\\\";\\n    string internal constant ALREADY_PARTICIPATING_IN_BUYBACK = \\\"E311\\\";\\n    string internal constant MNT_APPROVE_FAILS = \\\"E312\\\";\\n    string internal constant TOO_EARLY_TO_DRIP = \\\"E313\\\";\\n    string internal constant INSUFFICIENT_SHORTFALL = \\\"E315\\\";\\n    string internal constant HEALTHY_FACTOR_NOT_IN_RANGE = \\\"E316\\\";\\n    string internal constant BUYBACK_DRIPS_ALREADY_HAPPENED = \\\"E317\\\";\\n    string internal constant EB_INDEX_SHOULD_BE_GREATER_THAN_INITIAL = \\\"E318\\\";\\n    string internal constant NO_VESTING_SCHEDULES = \\\"E319\\\";\\n    string internal constant INSUFFICIENT_UNRELEASED_TOKENS = \\\"E320\\\";\\n    string internal constant INSUFFICIENT_FUNDS = \\\"E321\\\";\\n    string internal constant ORACLE_PRICE_EXPIRED = \\\"E322\\\";\\n    string internal constant TOKEN_NOT_FOUND = \\\"E323\\\";\\n    string internal constant RECEIVED_PRICE_HAS_INVALID_ROUND = \\\"E324\\\";\\n    string internal constant FL_PULL_AMOUNT_IS_TOO_LOW = \\\"E325\\\";\\n    string internal constant INSUFFICIENT_TOTAL_PROTOCOL_INTEREST = \\\"E326\\\";\\n    string internal constant BB_ACCOUNT_RECENTLY_VOTED = \\\"E327\\\";\\n    // Invalid input - Admin functions\\n    string internal constant ZERO_EXCHANGE_RATE = \\\"E401\\\";\\n    string internal constant SECOND_INITIALIZATION = \\\"E402\\\";\\n    string internal constant MARKET_ALREADY_LISTED = \\\"E403\\\";\\n    string internal constant IDENTICAL_VALUE = \\\"E404\\\";\\n    string internal constant ZERO_ADDRESS = \\\"E405\\\";\\n    string internal constant NEW_ORACLE_MISMATCH = \\\"E406\\\";\\n    string internal constant EC_INVALID_PROVIDER_REPRESENTATIVE = \\\"E407\\\";\\n    string internal constant EC_PROVIDER_CANT_BE_REPRESENTATIVE = \\\"E408\\\";\\n    string internal constant OR_ORACLE_ADDRESS_CANNOT_BE_ZERO = \\\"E409\\\";\\n    string internal constant OR_UNDERLYING_TOKENS_DECIMALS_SHOULD_BE_GREATER_THAN_ZERO = \\\"E410\\\";\\n    string internal constant OR_REPORTER_MULTIPLIER_SHOULD_BE_GREATER_THAN_ZERO = \\\"E411\\\";\\n    string internal constant CONTRACT_ALREADY_SET = \\\"E412\\\";\\n    string internal constant INVALID_TOKEN = \\\"E413\\\";\\n    string internal constant INVALID_PROTOCOL_INTEREST_FACTOR_MANTISSA = \\\"E414\\\";\\n    string internal constant INVALID_REDUCE_AMOUNT = \\\"E415\\\";\\n    string internal constant LIQUIDATION_FEE_MANTISSA_SHOULD_BE_GREATER_THAN_ZERO = \\\"E416\\\";\\n    string internal constant INVALID_UTILISATION_FACTOR_MANTISSA = \\\"E417\\\";\\n    string internal constant INVALID_MTOKENS_OR_BORROW_CAPS = \\\"E418\\\";\\n    string internal constant FL_PARAM_IS_TOO_LARGE = \\\"E419\\\";\\n    string internal constant MNT_INVALID_NONVOTING_PERIOD = \\\"E420\\\";\\n    string internal constant INPUT_ARRAY_LENGTHS_ARE_NOT_EQUAL = \\\"E421\\\";\\n    string internal constant EC_INVALID_BOOSTS = \\\"E422\\\";\\n    string internal constant EC_ACCOUNT_IS_ALREADY_LIQUIDITY_PROVIDER = \\\"E423\\\";\\n    string internal constant EC_ACCOUNT_HAS_NO_AGREEMENT = \\\"E424\\\";\\n    string internal constant OR_TIMESTAMP_THRESHOLD_SHOULD_BE_GREATER_THAN_ZERO = \\\"E425\\\";\\n    string internal constant OR_UNDERLYING_TOKENS_DECIMALS_TOO_BIG = \\\"E426\\\";\\n    string internal constant OR_REPORTER_MULTIPLIER_TOO_BIG = \\\"E427\\\";\\n    string internal constant SHOULD_HAVE_REVOCABLE_SCHEDULE = \\\"E428\\\";\\n    string internal constant MEMBER_NOT_IN_DELAY_LIST = \\\"E429\\\";\\n    string internal constant DELAY_LIST_LIMIT = \\\"E430\\\";\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dripRate_\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"drip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MNTSource", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000420d526845b4420000000000000000000000000095966457bbad4391edac349a43db5798625720b4000000000000000000000000f1cbac32abcf089037365f49a53b9ef34490ce44", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}