{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/dao/GovernorBravoDelegator.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./GovernorBravoInterfaces.sol\\\";\\n\\ncontract GovernorBravoDelegator is\\n  GovernorBravoDelegatorStorage,\\n  GovernorBravoEvents\\n{\\n  constructor(\\n    address timelock_,\\n    address ondo_,\\n    address admin_,\\n    address implementation_,\\n    uint256 votingPeriod_,\\n    uint256 votingDelay_,\\n    uint256 proposalThreshold_\\n  ) public {\\n    // Admin set to msg.sender for initialization\\n    admin = msg.sender;\\n\\n    delegateTo(\\n      implementation_,\\n      abi.encodeWithSignature(\\n        \\\"initialize(address,address,uint256,uint256,uint256)\\\",\\n        timelock_,\\n        ondo_,\\n        votingPeriod_,\\n        votingDelay_,\\n        proposalThreshold_\\n      )\\n    );\\n\\n    _setImplementation(implementation_);\\n\\n    admin = admin_;\\n  }\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   */\\n  function _setImplementation(address implementation_) public {\\n    require(\\n      msg.sender == admin,\\n      \\\"GovernorBravoDelegator::_setImplementation: admin only\\\"\\n    );\\n    require(\\n      implementation_ != address(0),\\n      \\\"GovernorBravoDelegator::_setImplementation: invalid implementation address\\\"\\n    );\\n\\n    address oldImplementation = implementation;\\n    implementation = implementation_;\\n\\n    emit NewImplementation(oldImplementation, implementation);\\n  }\\n\\n  /**\\n   * @notice Internal method to delegate execution to another contract\\n   * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n   * @param callee The contract to delegatecall\\n   * @param data The raw data to delegatecall\\n   */\\n  function delegateTo(address callee, bytes memory data) internal {\\n    (bool success, bytes memory returnData) = callee.delegatecall(data);\\n    assembly {\\n      if eq(success, 0) {\\n        revert(add(returnData, 0x20), returndatasize)\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates execution to an implementation contract.\\n   * It returns to the external caller whatever the implementation returns\\n   * or forwards reverts.\\n   */\\n  function() external payable {\\n    // delegate all other functions to current implementation\\n    (bool success, ) = implementation.delegatecall(msg.data);\\n\\n    assembly {\\n      let free_mem_ptr := mload(0x40)\\n      returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n      switch success\\n        case 0 {\\n          revert(free_mem_ptr, returndatasize)\\n        }\\n        default {\\n          return(free_mem_ptr, returndatasize)\\n        }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dao/GovernorBravoInterfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\ncontract GovernorBravoEvents {\\n  /// @notice An event emitted when a new proposal is created\\n  event ProposalCreated(\\n    uint256 id,\\n    address proposer,\\n    address[] targets,\\n    uint256[] values,\\n    string[] signatures,\\n    bytes[] calldatas,\\n    uint256 startBlock,\\n    uint256 endBlock,\\n    string description\\n  );\\n\\n  /// @notice An event emitted when a vote has been cast on a proposal\\n  /// @param voter The address which casted a vote\\n  /// @param proposalId The proposal id which was voted on\\n  /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\\n  /// @param votes Number of votes which were cast by the voter\\n  /// @param reason The reason given for the vote by the voter\\n  event VoteCast(\\n    address indexed voter,\\n    uint256 proposalId,\\n    uint8 support,\\n    uint256 votes,\\n    string reason\\n  );\\n\\n  /// @notice An event emitted when a proposal has been canceled\\n  event ProposalCanceled(uint256 id);\\n\\n  /// @notice An event emitted when a proposal has been queued in the Timelock\\n  event ProposalQueued(uint256 id, uint256 eta);\\n\\n  /// @notice An event emitted when a proposal has been executed in the Timelock\\n  event ProposalExecuted(uint256 id);\\n\\n  /// @notice An event emitted when the voting delay is set\\n  event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n\\n  /// @notice An event emitted when the voting period is set\\n  event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n\\n  /// @notice Emitted when implementation is changed\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /// @notice Emitted when proposal threshold is set\\n  event ProposalThresholdSet(\\n    uint256 oldProposalThreshold,\\n    uint256 newProposalThreshold\\n  );\\n\\n  /// @notice Emitted when pendingAdmin is changed\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /// @notice Emitted when whitelist account expiration is set\\n  event WhitelistAccountExpirationSet(address account, uint256 expiration);\\n\\n  /// @notice Emitted when the whitelistGuardian is set\\n  event WhitelistGuardianSet(address oldGuardian, address newGuardian);\\n}\\n\\ncontract GovernorBravoDelegatorStorage {\\n  /// @notice Administrator for this contract\\n  address public admin;\\n\\n  /// @notice Pending administrator for this contract\\n  address public pendingAdmin;\\n\\n  /// @notice Active brains of Governor\\n  address public implementation;\\n}\\n\\n/**\\n * @title Storage for Governor Bravo Delegate\\n * @notice For future upgrades, do not change GovernorBravoDelegateStorageV1. Create a new\\n * contract which implements GovernorBravoDelegateStorageV1 and following the naming convention\\n * GovernorBravoDelegateStorageVX.\\n */\\ncontract GovernorBravoDelegateStorageV1 is GovernorBravoDelegatorStorage {\\n  /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\n  uint256 public votingDelay;\\n\\n  /// @notice The duration of voting on a proposal, in blocks\\n  uint256 public votingPeriod;\\n\\n  /// @notice The number of votes required in order for a voter to become a proposer\\n  uint256 public proposalThreshold;\\n\\n  /// @notice Initial proposal id set at become\\n  uint256 public initialProposalId;\\n\\n  /// @notice The total number of proposals\\n  uint256 public proposalCount;\\n\\n  /// @notice The address of the Ondo Protocol Timelock\\n  TimelockInterface public timelock;\\n\\n  /// @notice The address of the Ondo governance token\\n  OndoInterface public ondo;\\n\\n  /// @notice The official record of all proposals ever proposed\\n  mapping(uint256 => Proposal) public proposals;\\n\\n  /// @notice The latest proposal for each proposer\\n  mapping(address => uint256) public latestProposalIds;\\n\\n  struct Proposal {\\n    /// @notice Unique id for looking up a proposal\\n    uint256 id;\\n    /// @notice Creator of the proposal\\n    address proposer;\\n    /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\n    uint256 eta;\\n    /// @notice the ordered list of target addresses for calls to be made\\n    address[] targets;\\n    /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n    uint256[] values;\\n    /// @notice The ordered list of function signatures to be called\\n    string[] signatures;\\n    /// @notice The ordered list of calldata to be passed to each call\\n    bytes[] calldatas;\\n    /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\n    uint256 startBlock;\\n    /// @notice The block at which voting ends: votes must be cast prior to this block\\n    uint256 endBlock;\\n    /// @notice Current number of votes in favor of this proposal\\n    uint256 forVotes;\\n    /// @notice Current number of votes in opposition to this proposal\\n    uint256 againstVotes;\\n    /// @notice Current number of votes for abstaining for this proposal\\n    uint256 abstainVotes;\\n    /// @notice Flag marking whether the proposal has been canceled\\n    bool canceled;\\n    /// @notice Flag marking whether the proposal has been executed\\n    bool executed;\\n    /// @notice Receipts of ballots for the entire set of voters\\n    mapping(address => Receipt) receipts;\\n  }\\n\\n  /// @notice Ballot receipt record for a voter\\n  struct Receipt {\\n    /// @notice Whether or not a vote has been cast\\n    bool hasVoted;\\n    /// @notice Whether or not the voter supports the proposal or abstains\\n    uint8 support;\\n    /// @notice The number of votes the voter had, which were cast\\n    uint96 votes;\\n  }\\n\\n  /// @notice Possible states that a proposal may be in\\n  enum ProposalState {\\n    Pending,\\n    Active,\\n    Canceled,\\n    Defeated,\\n    Succeeded,\\n    Queued,\\n    Expired,\\n    Executed\\n  }\\n}\\n\\ncontract GovernorBravoDelegateStorageV2 is GovernorBravoDelegateStorageV1 {\\n  /// @notice Stores the expiration of account whitelist status as a timestamp\\n  mapping(address => uint256) public whitelistAccountExpirations;\\n\\n  /// @notice Address which manages whitelisted proposals and whitelist accounts\\n  address public whitelistGuardian;\\n}\\n\\ninterface TimelockInterface {\\n  function delay() external view returns (uint256);\\n\\n  function GRACE_PERIOD() external view returns (uint256);\\n\\n  function acceptAdmin() external;\\n\\n  function queuedTransactions(bytes32 hash) external view returns (bool);\\n\\n  function queueTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external returns (bytes32);\\n\\n  function cancelTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external;\\n\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external payable returns (bytes memory);\\n}\\n\\ninterface OndoInterface {\\n  function getPriorVotes(address account, uint256 blockNumber)\\n    external\\n    view\\n    returns (uint96);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ondo_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"WhitelistAccountExpirationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"WhitelistGuardianSet\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"_setImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GovernorBravoDelegator", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000cd28723f80a78a6f3e6f912c9bf0404c010b7f49000000000000000000000000449e59b2a2064014cd4ed359c397153ab8f8ffaf00000000000000000000000010d60c84c861a9ef56b4a1c15077ee45c0d15bfe00000000000000000000000020bd72c3ab333399a85da76bcc2784a2a0970a1300000000000000000000000000000000000000000000000000000000000043800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000295be96e64066972000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "1", "Implementation": "0x20bd72c3ab333399a85da76bcc2784a2a0970a13", "SwarmSource": ""}]}