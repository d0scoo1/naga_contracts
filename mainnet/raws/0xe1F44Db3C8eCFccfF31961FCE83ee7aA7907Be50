{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/renderer/Bezel.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SVG.sol\\\";\\nimport \\\"./WatchData.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// Renders the Bezel, which includes the address and progress bar.\\nlibrary Bezel {\\n    function render(\\n        address _address,\\n        string memory _ensName,\\n        uint256 _holdingProgress,\\n        bool _isLight\\n    ) public pure returns (string memory) {\\n        uint256 circumference = 1118; /* 2 * Pi * BezelRadius - 12 (??? idk what the -12 is, but it makes it look right.) */\\n\\n        // if progress is > 1000, you have reached the minimum.\\n        bool isComplete = _holdingProgress >= 1000;\\n\\n        // Need to convert progress into an offset value around the circle so\\n        // the ring can render correctly\\n        uint256 holdingProgressOffset = isComplete\\n            ? circumference\\n            : ((circumference * _holdingProgress) / 1000);\\n\\n        return\\n            svg.g(\\n                utils.NULL,\\n                string.concat(\\n                    // Outer bezel.\\n                    svg.circle(\\n                        string.concat(\\n                            svg.prop(\\\"cx\\\", utils.uint2str(WatchData.CENTER)),\\n                            svg.prop(\\\"cy\\\", utils.uint2str(WatchData.CENTER)),\\n                            svg.prop(\\n                                \\\"r\\\",\\n                                utils.uint2str(WatchData.OUTER_BEZEL_RADIUS)\\n                            ),\\n                            svg.prop(\\\"fill\\\", utils.getDefURL(\\\"obg\\\"))\\n                        ),\\n                        utils.NULL\\n                    ),\\n                    // Dark bezel overlay\\n                    svg.circle(\\n                        string.concat(\\n                            svg.prop(\\\"cx\\\", utils.uint2str(WatchData.CENTER)),\\n                            svg.prop(\\\"cy\\\", utils.uint2str(WatchData.CENTER)),\\n                            svg.prop(\\n                                \\\"r\\\",\\n                                utils.uint2str(\\n                                    (WatchData.OUTER_BEZEL_RADIUS * 98) / 100\\n                                )\\n                            ),\\n                            svg.prop(\\\"fill\\\", utils.getCssVar(\\\"black\\\")),\\n                            svg.prop(\\n                                \\\"fill-opacity\\\",\\n                                isComplete ? (_isLight ? \\\"0.2\\\" : \\\"0.4\\\") : \\\"0\\\"\\n                            ),\\n                            svg.prop(\\n                                \\\"style\\\",\\n                                string.concat(\\n                                    \\\"mix-blend-mode:hard-light;\\\",\\n                                    isComplete\\n                                        ? \\\"animation: fadeOpacity 4s ease-in-out infinite;\\\"\\n                                        : utils.NULL\\n                                )\\n                            )\\n                        ),\\n                        utils.NULL\\n                    ),\\n                    renderProgressBar(\\n                        circumference,\\n                        holdingProgressOffset,\\n                        isComplete\\n                    ),\\n                    // ADDRESS (includes inner bezel)\\n                    renderAddressAndInnerBezel(_address, _ensName)\\n                )\\n            );\\n    }\\n\\n    function renderProgressBar(\\n        uint256 _circumference,\\n        uint256 _progressOffset,\\n        bool _isComplete\\n    ) internal pure returns (string memory) {\\n        string memory strokeProps = string.concat(\\n            svg.prop(\\\"stroke\\\", utils.getCssVar(\\\"ba\\\")),\\n            svg.prop(\\\"stroke-width\\\", \\\"2\\\"),\\n            svg.prop(\\\"stroke-dasharray\\\", utils.uint2str(_circumference)),\\n            svg.prop(\\\"stroke-linecap\\\", \\\"round\\\"),\\n            svg.prop(\\n                \\\"stroke-dashoffset\\\",\\n                utils.uint2str(_circumference - _progressOffset)\\n            )\\n        );\\n\\n        return\\n            svg.circle(\\n                string.concat(\\n                    svg.prop(\\\"opacity\\\", _isComplete ? \\\"0.75\\\" : \\\"0.4\\\"),\\n                    svg.prop(\\\"cx\\\", utils.uint2str(WatchData.CENTER)),\\n                    svg.prop(\\\"cy\\\", utils.uint2str(WatchData.CENTER)),\\n                    svg.prop(\\n                        \\\"r\\\",\\n                        utils.uint2str(\\n                            (WatchData.OUTER_BEZEL_RADIUS * 99) / 100\\n                        )\\n                    ),\\n                    svg.prop(\\\"fill\\\", \\\"transparent\\\"),\\n                    svg.prop(\\\"transform\\\", \\\"rotate(270 180 180)\\\"),\\n                    strokeProps\\n                ),\\n                utils.NULL\\n            );\\n    }\\n\\n    function renderAddressAndInnerBezel(\\n        address _address,\\n        string memory _ensName\\n    ) internal pure returns (string memory) {\\n        string memory ownerAddress = Strings.toHexString(\\n            uint256(uint160(_address))\\n        );\\n        bool hasEns = !utils.stringsEqual(_ensName, \\\"\\\");\\n        string memory SEPARATOR = \\\" \\\";\\n        string memory fullAddress = hasEns\\n            ? (string.concat(SEPARATOR, _ensName, SEPARATOR, ownerAddress))\\n            : (string.concat(SEPARATOR, ownerAddress));\\n        uint256 fullAddressLen = utils.utfStringLength(fullAddress);\\n\\n        /* circumference - charWidth * address length.\\n        = how much space is left to distribute between the characters.*/\\n        uint256 spaceLeft = 1005 - /* circumference = Math.floor(2*Pi*r(160)) */\\n            7 * /* ~approximate char width in pixels across browsers. */\\n            fullAddressLen;\\n\\n        // scale everything by 1000\\n        uint256 letterSpacingRaw = (spaceLeft * 1000) / fullAddressLen;\\n        uint256 letterSpacingDecimal = (letterSpacingRaw % 1000) / 100;\\n        uint256 letterSpacingWhole = (letterSpacingRaw - letterSpacingDecimal) /\\n            1000;\\n\\n        return\\n            svg.g(\\n                string.concat(\\n                    svg.prop(\\\"fill\\\", utils.getCssVar(\\\"ba\\\")),\\n                    svg.prop(\\\"font-size\\\", utils.getCssVar(\\\"bts\\\"))\\n                ),\\n                string.concat(\\n                    svg.animateTransform(\\n                        string.concat(\\n                            svg.prop(\\\"attributeName\\\", \\\"transform\\\"),\\n                            svg.prop(\\\"attributeType\\\", \\\"XML\\\"),\\n                            svg.prop(\\\"type\\\", \\\"rotate\\\"),\\n                            svg.prop(\\\"from\\\", \\\"0 180 180\\\"),\\n                            svg.prop(\\\"to\\\", \\\"360 180 180\\\"),\\n                            svg.prop(\\\"dur\\\", \\\"120s\\\"),\\n                            svg.prop(\\\"repeatCount\\\", \\\"indefinite\\\")\\n                        )\\n                    ),\\n                    // Inner bezel\\n                    svg.circle(\\n                        string.concat(\\n                            svg.prop(\\\"cx\\\", utils.uint2str(WatchData.CENTER)),\\n                            svg.prop(\\\"cy\\\", utils.uint2str(WatchData.CENTER)),\\n                            svg.prop(\\n                                \\\"r\\\",\\n                                utils.uint2str(WatchData.INNER_BEZEL_RADIUS)\\n                            ),\\n                            svg.prop(\\\"fill\\\", utils.getDefURL(\\\"ibg\\\")),\\n                            svg.prop(\\\"stroke-width\\\", \\\"1.5\\\"),\\n                            svg.prop(\\\"stroke\\\", utils.getDefURL(\\\"rg\\\"))\\n                        ),\\n                        utils.NULL\\n                    ),\\n                    // Address text\\n                    svg.text(\\n                        string.concat(\\n                            svg.prop(\\n                                \\\"letter-spacing\\\",\\n                                string.concat(\\n                                    utils.uint2str(letterSpacingWhole),\\n                                    \\\".\\\",\\n                                    utils.uint2str(letterSpacingDecimal)\\n                                )\\n                            ),\\n                            svg.prop(\\\"opacity\\\", \\\"0.5\\\"),\\n                            svg.prop(\\n                                \\\"style\\\",\\n                                \\\"text-transform:uppercase;text-shadow:var(--textShadow);\\\"\\n                            )\\n                        ),\\n                        svg.el(\\n                            \\\"textPath\\\",\\n                            svg.prop(\\\"href\\\", \\\"#addressPath\\\"),\\n                            // fullAddress\\n                            string.concat(\\\"<![CDATA[\\\", fullAddress, \\\"]]>\\\")\\n                        )\\n                    ),\\n                    svg.el(\\n                        \\\"defs\\\",\\n                        utils.NULL,\\n                        svg.path(\\n                            string.concat(\\n                                svg.prop(\\n                                    \\\"d\\\",\\n                                    \\\"M20,180a160,160 0 1,1 320,0a160,160 0 1,1 -320,0\\\"\\n                                ),\\n                                svg.prop(\\\"id\\\", \\\"addressPath\\\")\\n                            ),\\n                            utils.NULL\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/SVG.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\nimport \\\"./Utils.sol\\\";\\n\\n// Core SVG utilitiy library which helps us construct\\n// onchain SVG's with a simple, web-like API.\\nlibrary svg {\\n    /* MAIN ELEMENTS */\\n    function g(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"g\\\", _props, _children);\\n    }\\n\\n    function path(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"path\\\", _props, _children);\\n    }\\n\\n    function text(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"text\\\", _props, _children);\\n    }\\n\\n    function line(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"line\\\", _props, _children);\\n    }\\n\\n    function circle(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"circle\\\", _props, _children);\\n    }\\n\\n    function rect(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"rect\\\", _props, _children);\\n    }\\n\\n    function filter(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"filter\\\", _props, _children);\\n    }\\n\\n    /* GRADIENTS */\\n    function radialGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"radialGradient\\\", _props, _children);\\n    }\\n\\n    function linearGradient(string memory _props, string memory _children)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"linearGradient\\\", _props, _children);\\n    }\\n\\n    function gradientStop(\\n        uint256 offset,\\n        string memory stopColor,\\n        string memory _props\\n    ) internal pure returns (string memory) {\\n        return\\n            el(\\n                \\\"stop\\\",\\n                string.concat(\\n                    prop(\\\"stop-color\\\", stopColor),\\n                    \\\" \\\",\\n                    prop(\\\"offset\\\", string.concat(utils.uint2str(offset), \\\"%\\\")),\\n                    \\\" \\\",\\n                    _props\\n                ),\\n                utils.NULL\\n            );\\n    }\\n\\n    function animateTransform(string memory _props)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return el(\\\"animateTransform\\\", _props, utils.NULL);\\n    }\\n\\n    /* COMMON */\\n    // A generic element, can be used to construct any SVG (or HTML) element\\n    function el(\\n        string memory _tag,\\n        string memory _props,\\n        string memory _children\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"<\\\",\\n                _tag,\\n                \\\" \\\",\\n                _props,\\n                \\\">\\\",\\n                _children,\\n                \\\"</\\\",\\n                _tag,\\n                \\\">\\\"\\n            );\\n    }\\n\\n    // an SVG attribute\\n    function prop(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/WatchData.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Utils.sol\\\";\\n\\n// Primary library for storing all core constants and rendering data.\\nlibrary WatchData {\\n    /* CONSTANTS */\\n    uint256 public constant WATCH_SIZE = 360;\\n    uint256 public constant CENTER = 180;\\n    uint256 public constant OUTER_BEZEL_RADIUS = 180;\\n    uint256 public constant INNER_BEZEL_RADIUS = 152;\\n    uint256 public constant FACE_RADIUS = 144; // OUTER_BEZEL_RADIUS * 0.8\\n    uint8 public constant GLOW_IN_THE_DARK_ID = 99;\\n\\n    /* IDs */\\n    enum MaterialId {\\n        Pearl,\\n        Copper,\\n        Onyx,\\n        Quartz,\\n        Emerald,\\n        Ruby,\\n        Sapphire,\\n        Amber,\\n        Amethyst,\\n        Obsidian,\\n        Gold,\\n        Diamond\\n    }\\n\\n    enum MoodId {\\n        Surprised,\\n        Happy,\\n        Relaxed,\\n        Excited,\\n        Speechless,\\n        Chilling,\\n        Annoyed,\\n        Sleepy,\\n        Unimpressed,\\n        Meditating,\\n        Relieved,\\n        Cheeky,\\n        Sus\\n    }\\n\\n    enum GlassesId {\\n        None,\\n        LeftMonocle,\\n        RightMonocle,\\n        Flip,\\n        Valentine,\\n        Shutters,\\n        ThreeD,\\n        Ski,\\n        Monolens\\n    }\\n\\n    /* TRAIT STRUCTS */\\n    struct Material {\\n        MaterialId id;\\n        string name;\\n        string[2] vals;\\n        uint256 supply;\\n    }\\n\\n    struct Glasses {\\n        GlassesId id;\\n        string name;\\n        uint256 supply;\\n    }\\n\\n    struct Mood {\\n        MoodId id;\\n        string name;\\n        uint256 supply;\\n    }\\n\\n    struct GlowInTheDarkData {\\n        // contains the light mode colors\\n        string[2] light;\\n        // contains the dark mode colors\\n        string[2] dark;\\n        string name;\\n    }\\n\\n    /* DATA RETRIEVAL */\\n    function getGlowInTheDarkData()\\n        internal\\n        pure\\n        returns (GlowInTheDarkData memory)\\n    {\\n        return\\n            GlowInTheDarkData(\\n                [\\\"#fbfffc\\\", \\\"#d7ffd7\\\"],\\n                [\\\"#052925\\\", \\\"#a4ffa1\\\"],\\n                \\\"Glow In The Dark\\\"\\n            );\\n    }\\n\\n    function getMaterial(uint256 _materialId)\\n        internal\\n        pure\\n        returns (Material memory)\\n    {\\n        Material[12] memory materials = [\\n            Material(\\n                MaterialId.Pearl,\\n                \\\"Ocean Pearl\\\",\\n                [\\\"#ffffff\\\", \\\"#f6e6ff\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Copper,\\n                \\\"Resistor Copper\\\",\\n                [\\\"#f7d1bf\\\", \\\"#5a2c1d\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Onyx,\\n                \\\"Ocean Pearl\\\",\\n                [\\\"#615c5c\\\", \\\"#0f0f0f\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Quartz,\\n                \\\"Block Quartz\\\",\\n                [\\\"#ffb4be\\\", \\\"#81004e\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Emerald,\\n                \\\"Matrix Emerald\\\",\\n                [\\\"#97ff47\\\", \\\"#011601\\\"],\\n                840\\n            ),\\n            Material(MaterialId.Ruby, \\\"404 Ruby\\\", [\\\"#fe3d4a\\\", \\\"#460008\\\"], 840),\\n            Material(\\n                MaterialId.Sapphire,\\n                \\\"Hyperlink Sapphire\\\",\\n                [\\\"#4668ff\\\", \\\"#000281\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Amber,\\n                \\\"Sunset Amber\\\",\\n                [\\\"#ffa641\\\", \\\"#30031f\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Amethyst,\\n                \\\"Candy Amethyst\\\",\\n                [\\\"#f7dfff\\\", \\\"#3671ca\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Obsidian,\\n                \\\"Nether Obsidian\\\",\\n                [\\\"#6f00ff\\\", \\\"#2b003b\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Gold,\\n                \\\"Electric Gold\\\",\\n                [\\\"#fcba7d\\\", \\\"#864800\\\"],\\n                840\\n            ),\\n            Material(\\n                MaterialId.Diamond,\\n                \\\"Ethereal Diamond\\\",\\n                [\\\"#b5f9ff\\\", \\\"#30c2c2\\\"],\\n                840\\n            )\\n        ];\\n\\n        return materials[_materialId];\\n    }\\n\\n    function getMood(uint256 _moodId) internal pure returns (Mood memory) {\\n        Mood[13] memory moods = [\\n            Mood(MoodId.Surprised, \\\"Surprised\\\", 840),\\n            Mood(MoodId.Happy, \\\"Happy\\\", 840),\\n            Mood(MoodId.Relaxed, \\\"Relaxed\\\", 840),\\n            Mood(MoodId.Excited, \\\"Excited\\\", 840),\\n            Mood(MoodId.Speechless, \\\"Speechless\\\", 25),\\n            Mood(MoodId.Chilling, \\\"Chilling\\\", 840),\\n            Mood(MoodId.Annoyed, \\\"Annoyed\\\", 840),\\n            Mood(MoodId.Sleepy, \\\"Sleepy\\\", 840),\\n            Mood(MoodId.Unimpressed, \\\"Unimpressed\\\", 840),\\n            Mood(MoodId.Meditating, \\\"Meditating\\\", 840),\\n            Mood(MoodId.Relieved, \\\"Relieved\\\", 840),\\n            Mood(MoodId.Cheeky, \\\"Cheeky\\\", 840),\\n            Mood(MoodId.Sus, \\\"Sus\\\", 840)\\n        ];\\n\\n        return moods[_moodId];\\n    }\\n\\n    function getGlasses(uint256 _glassesId)\\n        internal\\n        pure\\n        returns (Glasses memory)\\n    {\\n        Glasses[9] memory glasses = [\\n            Glasses(GlassesId.None, \\\"None\\\", 840),\\n            Glasses(GlassesId.LeftMonocle, \\\"Left Monocle\\\", 840),\\n            Glasses(GlassesId.RightMonocle, \\\"Right Monocle\\\", 840),\\n            Glasses(GlassesId.Flip, \\\"Flip\\\", 840),\\n            Glasses(GlassesId.Valentine, \\\"Valentine\\\", 840),\\n            Glasses(GlassesId.Shutters, \\\"Shutters\\\", 840),\\n            Glasses(GlassesId.ThreeD, \\\"3D\\\", 840),\\n            Glasses(GlassesId.Ski, \\\"Ski\\\", 840),\\n            Glasses(GlassesId.Monolens, \\\"Monolens\\\", 840)\\n        ];\\n\\n        return glasses[_glassesId];\\n    }\\n\\n    /* UTILS */\\n    // used to determine proper accent colors.\\n    function isLightMaterial(MaterialId _id) internal pure returns (bool) {\\n        return _id == MaterialId.Pearl || _id == MaterialId.Diamond;\\n    }\\n\\n    function getMaterialAccentColor(MaterialId _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (isLightMaterial(_id)) {\\n            return utils.getCssVar(\\\"black\\\");\\n        }\\n\\n        return utils.getCssVar(\\\"white\\\");\\n    }\\n\\n    function getMaterialShadow(MaterialId _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (isLightMaterial(_id)) {\\n            return utils.black_a(85);\\n        }\\n\\n        return utils.white_a(85);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/renderer/Utils.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n    // used to simulate empty strings\\n    string internal constant NULL = \\\"\\\";\\n\\n    // formats a CSS variable line. includes a semicolon for formatting.\\n    function setCssVar(string memory _key, string memory _val)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n    }\\n\\n    // formats getting a css variable\\n    function getCssVar(string memory _key)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n    }\\n\\n    // formats getting a def URL\\n    function getDefURL(string memory _id)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n    }\\n\\n    // formats rgba white with a specified opacity / alpha\\n    function white_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(255, 255, 255, _a);\\n    }\\n\\n    // formats rgba black with a specified opacity / alpha\\n    function black_a(uint256 _a) internal pure returns (string memory) {\\n        return rgba(0, 0, 0, _a);\\n    }\\n\\n    // formats generic rgba color in css\\n    function rgba(\\n        uint256 _r,\\n        uint256 _g,\\n        uint256 _b,\\n        uint256 _a\\n    ) internal pure returns (string memory) {\\n        string memory formattedA = _a < 100\\n            ? string.concat(\\\"0.\\\", utils.uint2str(_a))\\n            : \\\"1\\\";\\n        return\\n            string.concat(\\n                \\\"rgba(\\\",\\n                utils.uint2str(_r),\\n                \\\",\\\",\\n                utils.uint2str(_g),\\n                \\\",\\\",\\n                utils.uint2str(_b),\\n                \\\",\\\",\\n                formattedA,\\n                \\\")\\\"\\n            );\\n    }\\n\\n    // checks if two strings are equal\\n    function stringsEqual(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n    }\\n\\n    // returns the length of a string in characters\\n    function utfStringLength(string memory _str)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(_str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n\\n    // converts an unsigned integer to a string\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ensName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_holdingProgress\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLight\",\"type\":\"bool\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Bezel", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}