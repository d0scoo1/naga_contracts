{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FraxGaugeIncentives.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.6;\\n\\n// ====================================================================\\n// |       ______                _                 ___      __        |\\n// |      / ____/________ __  __(_)___ ___  ____ _/ (_)____/ /______  |\\n// |     / /_  / ___/ __ `/ |/_/ / __ `__ \\\\/ __ `/ / / ___/ __/ ___/  |\\n// |    / __/ / /  / /_/ />  </ / / / / / / /_/ / / (__  ) /_(__  )   |\\n// |   /_/   /_/   \\\\__,_/_/|_/_/_/ /_/ /_/\\\\__,_/_/_/____/\\\\__/____/    |\\n// |                                                                  |\\n// ====================================================================\\n// ============================= Pitch ================================\\n// ====================================================================\\n\\n// Original idea and credit: \\n// Curve Finance's Incentive System \\n// bribe.crv.finance\\n// https://etherscan.io/address/0x7893bbb46613d7a4fbcc31dab4c9b823ffee1026\\n// Almost all logic and algorithms used are from that team, with the only difference being contract addresses, an implementation of fees, ownability, events for monitoring, and changes in variable visibility.\\n\\n// Primary Author(s)\\n// Charlie Pyle: https://github.com/charliepyle\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interface used to interact with Frax's gauge system, which is found here: https://etherscan.io/address/0x44ade9AA409B0C29463fF7fcf07c9d3c939166ce\\ninterface GaugeController {\\n    struct VotedSlope {\\n        uint slope;\\n        uint power;\\n        uint end;\\n    }\\n    \\n    struct Point {\\n        uint bias;\\n        uint slope;\\n    }\\n    \\n    function vote_user_slopes(address, address) external view returns (VotedSlope memory);\\n    function last_user_vote(address, address) external view returns (uint);\\n    function points_weight(address, uint256) external view returns (Point memory);\\n    function checkpoint_gauge(address) external;\\n}\\n\\n// Interface used to interact with Frax's veFXS system, which is found here: https://etherscan.io/address/0xc8418aF6358FFddA74e09Ca9CC3Fe03Ca6aDC5b0\\ninterface ve {\\n    function get_last_user_slope(address) external view returns (int128);\\n}\\n\\ninterface erc20 { \\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address) external view returns (uint);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n}\\n\\ncontract FraxGaugeIncentives is Ownable {\\n    uint constant WEEK = 86400 * 7;\\n    uint constant PRECISION = 10**18;\\n\\n    // Fee structure added using Votium as reference implementation\\n    \\n    // Updatable via ownable function.\\n    address public gaugeAddress = 0x3669C421b77340B2979d1A00a792CC2ee0FcE737;\\n\\n    // Fraximalists Multisig\\n    address public feeAddress = 0x8A421C3A25e8158b9aC815aE1319fBCf83F6bD6c; \\n    uint256 public platformFee = 400;             // 4%\\n    uint256 public constant DENOMINATOR = 10000;  // denominates weights 10000 = 100%\\n\\n    // The two addresses below are changed from the bribe.crv.finance implementation\\n    GaugeController constant GAUGE = GaugeController(0x44ade9AA409B0C29463fF7fcf07c9d3c939166ce);\\n    ve constant VE = ve(0xc8418aF6358FFddA74e09Ca9CC3Fe03Ca6aDC5b0);\\n    \\n    // These mappings were made public, while the bribe.crv.finance implementation keeps them private.\\n    mapping(address => mapping(address => uint)) public _claims_per_gauge;\\n    mapping(address => mapping(address => uint)) public _reward_per_gauge;\\n    \\n    mapping(address => mapping(address => uint)) public reward_per_token;\\n    mapping(address => mapping(address => uint)) public active_period;\\n    mapping(address => mapping(address => mapping(address => uint))) public last_user_claim;\\n    \\n    mapping(address => address[]) _rewards_per_gauge;\\n    mapping(address => address[]) _gauges_per_reward;\\n    mapping(address => mapping(address => bool)) _rewards_in_gauge;\\n\\n    \\n    \\n    function _add(address gauge, address reward) internal {\\n        if (!_rewards_in_gauge[gauge][reward]) {\\n            _rewards_per_gauge[gauge].push(reward);\\n            _gauges_per_reward[reward].push(gauge);\\n            _rewards_in_gauge[gauge][reward] = true;\\n        }\\n    }\\n    \\n    function rewards_per_gauge(address gauge) external view returns (address[] memory) {\\n        return _rewards_per_gauge[gauge];\\n    }\\n    \\n    function gauges_per_reward(address reward) external view returns (address[] memory) {\\n        return _gauges_per_reward[reward];\\n    }\\n    \\n    function _update_period(address gauge, address reward_token) internal returns (uint) {\\n        uint _period = active_period[gauge][reward_token];\\n        if (block.timestamp >= _period + WEEK) {\\n            _period = block.timestamp / WEEK * WEEK;\\n            GaugeController(gaugeAddress).checkpoint_gauge(gauge);\\n            uint _slope = GaugeController(gaugeAddress).points_weight(gauge, _period).slope;\\n            uint _amount = _reward_per_gauge[gauge][reward_token] - _claims_per_gauge[gauge][reward_token];\\n            reward_per_token[gauge][reward_token] = _amount * PRECISION / _slope;\\n            active_period[gauge][reward_token] = _period;\\n        }\\n        return _period;\\n    }\\n    \\n    function add_reward_amount(address gauge, address reward_token, uint amount) external returns (bool) {\\n        // The below was added to the bribe.crv.finance implementation to handle fee distribution\\n        uint256 fee = amount*platformFee/DENOMINATOR;\\n        uint256 incentiveTotal = amount-fee;\\n        _safeTransferFrom(reward_token, msg.sender, feeAddress, fee);\\n        \\n        // replaced the amount variable with our incentiveTotal variable\\n        _safeTransferFrom(reward_token, msg.sender, address(this), incentiveTotal);\\n        _reward_per_gauge[gauge][reward_token] += incentiveTotal;\\n        _update_period(gauge, reward_token);\\n        _add(gauge, reward_token);\\n        return true;\\n    }\\n    \\n    function tokens_for_incentive(address user, address gauge, address reward_token) external view returns (uint) {\\n        return uint(int(VE.get_last_user_slope(user))) * reward_per_token[gauge][reward_token] / PRECISION;\\n    }\\n    \\n    function claimable(address user, address gauge, address reward_token) external view returns (uint) {\\n        uint _period = active_period[gauge][reward_token];\\n        uint _amount = 0;\\n        if (last_user_claim[user][gauge][reward_token] < _period) {\\n            uint _last_vote = GaugeController(gaugeAddress).last_user_vote(user, gauge);\\n            if (_last_vote < _period) {\\n                uint _slope = GaugeController(gaugeAddress).vote_user_slopes(user, gauge).slope;\\n                _amount = _slope * reward_per_token[gauge][reward_token] / PRECISION;\\n            }\\n        }\\n        return _amount;\\n    }\\n    \\n    function claim_reward(address user, address gauge, address reward_token) external returns (uint) {\\n        uint amount = _claim_reward(user, gauge, reward_token);\\n        emit Claimed(user, gauge, reward_token, amount);\\n        return amount;\\n    }\\n    \\n    function claim_reward(address gauge, address reward_token) external returns (uint) {\\n        uint amount = _claim_reward(msg.sender, gauge, reward_token);\\n        emit Claimed(msg.sender, gauge, reward_token, amount);\\n        return amount;\\n    }\\n    \\n    function _claim_reward(address user, address gauge, address reward_token) internal returns (uint) {\\n        uint _period = _update_period(gauge, reward_token);\\n        uint _amount = 0;\\n        if (last_user_claim[user][gauge][reward_token] < _period) {\\n            last_user_claim[user][gauge][reward_token] = _period;\\n            uint _last_vote = GaugeController(gaugeAddress).last_user_vote(user, gauge);\\n            if (_last_vote < _period) {\\n                uint _slope = GaugeController(gaugeAddress).vote_user_slopes(user, gauge).slope;\\n                _amount = _slope * reward_per_token[gauge][reward_token] / PRECISION;\\n                if (_amount > 0) {\\n                    _claims_per_gauge[gauge][reward_token] += _amount;\\n                    _safeTransfer(reward_token, user, _amount);\\n                }\\n            }\\n        }\\n\\n        return _amount;\\n    }\\n    \\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n    \\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(erc20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    /* ========== OWNER FUNCTIONS ========== */\\n\\n    // update fee address\\n    function updateFeeAddress(address _feeAddress) public onlyOwner {\\n      feeAddress = _feeAddress;\\n    }\\n\\n    function updateGaugeControllerAddres(address _gaugeAddress) public onlyOwner {\\n      gaugeAddress = _gaugeAddress;\\n    }\\n\\n    // update fee amount\\n    function updateFeeAmount(uint256 _feeAmount) public onlyOwner {\\n      require(_feeAmount < 400, \\\"max fee\\\"); // Max fee 4%\\n      platformFee = _feeAmount;\\n      emit UpdatedFee(_feeAmount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n    /* This event was added to record claimed events for testing purposes, but it isn't strictly needed for the app's functionality. */\\n    event Claimed(address indexed user, address indexed gauge, address indexed token, uint256 amount);\\n    event UpdatedFee(uint256 _feeAmount);\\n    \\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_claims_per_gauge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_reward_per_gauge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"active_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add_reward_amount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"}],\"name\":\"claim_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"}],\"name\":\"claim_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"gauges_per_reward\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_user_claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_per_token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"rewards_per_gauge\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"}],\"name\":\"tokens_for_incentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"updateFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gaugeAddress\",\"type\":\"address\"}],\"name\":\"updateGaugeControllerAddres\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FraxGaugeIncentives", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}