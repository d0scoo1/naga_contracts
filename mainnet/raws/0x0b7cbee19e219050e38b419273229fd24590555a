{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.6.5 https://hardhat.org\r\n\r\n// File contracts/ethregistrar/SafeMath.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ethregistrar/IPriceOracle.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\ninterface IPriceOracle {\r\n    struct Price {\r\n        uint256 base;\r\n        uint256 premium;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the price to register or renew a name.\r\n     * @param name The name being registered or renewed.\r\n     * @param expires When the name presently expires (0 if this is a new registration).\r\n     * @param duration How long the name is being registered or extended for, in seconds.\r\n     * @return base premium tuple of base price + premium price\r\n     */\r\n    function price(\r\n        string calldata name,\r\n        uint256 expires,\r\n        uint256 duration\r\n    ) external view returns (Price calldata);\r\n}\r\n\r\n\r\n// File contracts/ethregistrar/StringUtils.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\nlibrary StringUtils {\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     *\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string memory s) internal pure returns (uint) {\r\n        uint len;\r\n        uint i = 0;\r\n        uint bytelength = bytes(s).length;\r\n        for(len = 0; i < bytelength; len++) {\r\n            bytes1 b = bytes(s)[i];\r\n            if(b < 0x80) {\r\n                i += 1;\r\n            } else if (b < 0xE0) {\r\n                i += 2;\r\n            } else if (b < 0xF0) {\r\n                i += 3;\r\n            } else if (b < 0xF8) {\r\n                i += 4;\r\n            } else if (b < 0xFC) {\r\n                i += 5;\r\n            } else {\r\n                i += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.2\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/ethregistrar/StablePriceOracle.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\n\r\n\r\n\r\n\r\ninterface AggregatorInterface {\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\n// StablePriceOracle sets a price in USD, based on an oracle.\r\ncontract StablePriceOracle is IPriceOracle {\r\n    using SafeMath for *;\r\n    using StringUtils for *;\r\n\r\n    // Rent in base price units by length\r\n    uint256 public immutable price1Letter;\r\n    uint256 public immutable price2Letter;\r\n    uint256 public immutable price3Letter;\r\n    uint256 public immutable price4Letter;\r\n    uint256 public immutable price5Letter;\r\n\r\n    // Oracle address\r\n    AggregatorInterface public immutable usdOracle;\r\n\r\n    event RentPriceChanged(uint256[] prices);\r\n\r\n    constructor(AggregatorInterface _usdOracle, uint256[] memory _rentPrices) {\r\n        usdOracle = _usdOracle;\r\n        price1Letter = _rentPrices[0];\r\n        price2Letter = _rentPrices[1];\r\n        price3Letter = _rentPrices[2];\r\n        price4Letter = _rentPrices[3];\r\n        price5Letter = _rentPrices[4];\r\n    }\r\n\r\n    function price(\r\n        string calldata name,\r\n        uint256 expires,\r\n        uint256 duration\r\n    ) external view override returns (IPriceOracle.Price memory) {\r\n        uint256 len = name.strlen();\r\n        uint256 basePrice;\r\n\r\n        if (len == 1) {\r\n            basePrice = price1Letter * duration;\r\n        } else if (len == 2) {\r\n            basePrice = price2Letter * duration;\r\n        } else if (len == 3) {\r\n            basePrice = price3Letter * duration;\r\n        } else if (len == 4) {\r\n            basePrice = price4Letter * duration;\r\n        } else {\r\n            basePrice = price5Letter * duration;\r\n        }\r\n\r\n        return\r\n            IPriceOracle.Price({\r\n                base: attoUSDToWei(basePrice),\r\n                premium: attoUSDToWei(_premium(name, expires, duration))\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the pricing premium in wei.\r\n     */\r\n    function premium(\r\n        string calldata name,\r\n        uint256 expires,\r\n        uint256 duration\r\n    ) external view returns (uint256) {\r\n        return attoUSDToWei(_premium(name, expires, duration));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the pricing premium in internal base units.\r\n     */\r\n    function _premium(\r\n        string memory name,\r\n        uint256 expires,\r\n        uint256 duration\r\n    ) internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\r\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\r\n        return (amount * 1e8) / ethPrice;\r\n    }\r\n\r\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\r\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\r\n        return (amount * ethPrice) / 1e8;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceID == type(IERC165).interfaceId ||\r\n            interfaceID == type(IPriceOracle).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ethregistrar/ExponentialPremiumPriceOracle.sol\r\n\r\npragma solidity >=0.8.4;\r\n\r\n\r\ncontract ExponentialPremiumPriceOracle is StablePriceOracle {\r\n    uint256 constant GRACE_PERIOD = 90 days;\r\n    uint256 immutable startPremium;\r\n    uint256 immutable endValue;\r\n\r\n    constructor(\r\n        AggregatorInterface _usdOracle,\r\n        uint256[] memory _rentPrices,\r\n        uint256 _startPremium,\r\n        uint256 totalDays\r\n    ) StablePriceOracle(_usdOracle, _rentPrices) {\r\n        startPremium = _startPremium;\r\n        endValue = _startPremium >> totalDays;\r\n    }\r\n\r\n    uint256 constant PRECISION = 1e18;\r\n    uint256 constant bit1 = 999989423469314432; // 0.5 ^ 1/65536 * (10 ** 18)\r\n    uint256 constant bit2 = 999978847050491904; // 0.5 ^ 2/65536 * (10 ** 18)\r\n    uint256 constant bit3 = 999957694548431104;\r\n    uint256 constant bit4 = 999915390886613504;\r\n    uint256 constant bit5 = 999830788931929088;\r\n    uint256 constant bit6 = 999661606496243712;\r\n    uint256 constant bit7 = 999323327502650752;\r\n    uint256 constant bit8 = 998647112890970240;\r\n    uint256 constant bit9 = 997296056085470080;\r\n    uint256 constant bit10 = 994599423483633152;\r\n    uint256 constant bit11 = 989228013193975424;\r\n    uint256 constant bit12 = 978572062087700096;\r\n    uint256 constant bit13 = 957603280698573696;\r\n    uint256 constant bit14 = 917004043204671232;\r\n    uint256 constant bit15 = 840896415253714560;\r\n    uint256 constant bit16 = 707106781186547584;\r\n\r\n    /**\r\n     * @dev Returns the pricing premium in internal base units.\r\n     */\r\n    function _premium(\r\n        string memory,\r\n        uint256 expires,\r\n        uint256\r\n    ) internal view override returns (uint256) {\r\n        expires = expires + GRACE_PERIOD;\r\n        if (expires > block.timestamp) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 elapsed = block.timestamp - expires;\r\n        uint256 premium = decayedPremium(startPremium, elapsed);\r\n        if (premium >= endValue) {\r\n            return premium - endValue;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the premium price at current time elapsed\r\n     * @param startPremium starting price\r\n     * @param elapsed time past since expiry\r\n     */\r\n    function decayedPremium(uint256 startPremium, uint256 elapsed)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 daysPast = (elapsed * PRECISION) / 1 days;\r\n        uint256 intDays = daysPast / PRECISION;\r\n        uint256 premium = startPremium >> intDays;\r\n        uint256 partDay = (daysPast - intDays * PRECISION);\r\n        uint256 fraction = (partDay * (2**16)) / PRECISION;\r\n        uint256 totalPremium = addFractionalPremium(fraction, premium);\r\n        return totalPremium;\r\n    }\r\n\r\n    function addFractionalPremium(uint256 fraction, uint256 premium)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (fraction & (1 << 0) != 0) {\r\n            premium = (premium * bit1) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 1) != 0) {\r\n            premium = (premium * bit2) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 2) != 0) {\r\n            premium = (premium * bit3) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 3) != 0) {\r\n            premium = (premium * bit4) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 4) != 0) {\r\n            premium = (premium * bit5) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 5) != 0) {\r\n            premium = (premium * bit6) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 6) != 0) {\r\n            premium = (premium * bit7) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 7) != 0) {\r\n            premium = (premium * bit8) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 8) != 0) {\r\n            premium = (premium * bit9) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 9) != 0) {\r\n            premium = (premium * bit10) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 10) != 0) {\r\n            premium = (premium * bit11) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 11) != 0) {\r\n            premium = (premium * bit12) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 12) != 0) {\r\n            premium = (premium * bit13) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 13) != 0) {\r\n            premium = (premium * bit14) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 14) != 0) {\r\n            premium = (premium * bit15) / PRECISION;\r\n        }\r\n        if (fraction & (1 << 15) != 0) {\r\n            premium = (premium * bit16) / PRECISION;\r\n        }\r\n        return premium;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceID);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDays\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"elapsed\",\"type\":\"uint256\"}],\"name\":\"decayedPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price2Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price3Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price4Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price5Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ExponentialPremiumPriceOracle", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000001500000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001275209157690000000000000000000000000000000000000000000000000000049d482455da00000000000000000000000000000000000000000000000000000024ea4122af", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d07fd085635d69e966589b764d3c6fe6633cd30700d7d7c6c1fba429bec3b1d9"}]}