{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.17;\r\ncontract BetGame  {\r\n    struct bet {\r\n        address player;\r\n        uint deposit;\r\n    }\r\n\r\n\tmodifier onlyowner {\r\n\t\trequire(msg.sender == owner, \"Only owner is allowed\");\r\n\t\t_;\r\n\t }\r\n\r\n\tbet[] private A ;\r\n\tbet[] private B;\r\n\tbet[] private D;\r\n\r\n\tuint private totalA; \r\n\tuint private totalB;\r\n\tuint private totalD;\r\n\tuint private betEnd;\r\n\tstring private teamA ;\r\n\tstring private teamB ;\r\n\tbool private open;\r\n\taddress private owner;\r\n\r\n\tconstructor(uint t, string a, string b) public {\r\n\t\towner = msg.sender;\r\n\t\tbetEnd = t;\r\n\t\tteamA = a;\r\n\t\tteamB = b;\r\n\t\topen = true;\r\n\t}\r\n\r\n\tfunction close() public onlyowner {\r\n\t\tselfdestruct(owner);\r\n\t}\r\n\r\n\tfunction getInfo() view onlyowner public returns(string, string, uint, uint, uint, uint, bool, uint, uint, uint) {\r\n\t\treturn (teamA, teamB, betEnd, totalA, totalB, totalD, open, A.length, B.length, D.length );\r\n\t}\r\n\r\n\tfunction getInfoA(uint index) view onlyowner public returns(address, uint) {\r\n\t\treturn (A[index].player, A[index].deposit);\r\n\t}\r\n\t\r\n\tfunction getInfoB(uint index) view onlyowner public returns(address, uint) {\r\n\t\treturn (B[index].player, B[index].deposit);\r\n\t}\r\n\t\r\n\tfunction getInfoD(uint index) view onlyowner public returns(address, uint) {\r\n\t\treturn (D[index].player, D[index].deposit);\r\n\t}\r\n\t\r\n\r\n\tfunction winnerIsA() public onlyowner {\r\n\t\tif (totalA > 0) {\r\n        \tuint housefee = (totalB + totalD) /80;\r\n\r\n\t\t\tuint award = (totalB + totalD) - housefee;\r\n\r\n\t\t\tuint ratio = 1000000 * award/totalA;\r\n\r\n\t\t\tfor (uint p = 0; p < A.length; p++) {\r\n\t\t\t\tif (A[p].deposit > 0 ) {\r\n\t\t\t\t\tif (A[p].player.send(A[p].deposit + A[p].deposit/1000000*ratio)) {\r\n\t\t\t\t\t\tA[p].deposit = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n        \t}\r\n\t\t\ttotalA = 0;\r\n\t\t}\r\n\t\ttotalB = 0;\r\n\t\ttotalD = 0;\r\n\t\topen = false;\r\n    }\r\n\r\n\tfunction winnerIsB() public onlyowner{\r\n\t\tif (totalB > 0) {\r\n\t\t\tuint housefee = (totalA + totalD) /80;\r\n\t\t\tuint award = (totalA + totalD) - housefee;\r\n\t\t\tuint ratio = 1000000 * award/totalB;\r\n\r\n\t\t\tfor (uint p = 0; p < B.length; p++) {\r\n\t\t\t\tif (B[p].deposit > 0 ) {\r\n\t\t\t\t\tif (B[p].player.send(B[p].deposit + B[p].deposit/1000000*ratio)) {\r\n\t\t\t\t\t\tB[p].deposit = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n        \t}\r\n\t\t\ttotalB = 0;\r\n\t\t}\r\n\t\ttotalA = 0;\r\n\t\ttotalD = 0;\r\n\t\topen = false;\r\n    }\r\n\r\n\tfunction winnerIsDraw() public onlyowner{\r\n\t\tif (totalD > 0) {\r\n       \t\tuint housefee = (totalB + totalA) /80;\r\n\t\t\tuint award = (totalB + totalA) - housefee;\r\n\t\t\tuint ratio = 1000000 * award/totalD;\r\n\r\n\t\t\tfor (uint p = 0; p < D.length; p++) {\r\n\t\t\t\tif (D[p].deposit > 0 ) {\r\n\t\t\t\t\tif (D[p].player.send(D[p].deposit + D[p].deposit/1000000*ratio)) {\r\n\t\t\t\t\t\tD[p].deposit = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n        \t}\r\n\t\t\ttotalD = 0;\r\n\t\t}\r\n\t\ttotalA = 0;\r\n\t\ttotalB = 0;\r\n\t\topen = false;\r\n    }\r\n\r\n\tfunction status(address addr) public view returns(uint, uint, uint, uint, uint, uint, bool) {\r\n\t\tuint a;\r\n\t\tuint b;\r\n\t\tuint d;\r\n\t\t\r\n\t\tif (!open) {\r\n\t\t\treturn (0,0,0,0,0,0, false);\r\n\t\t}\r\n\t\t \r\n\t\tfor (uint p = 0; p < D.length; p++) {\r\n\t\t\tif (D[p].player == addr) {\r\n\t\t\t\td+=D[p].deposit;\r\n\t\t\t}\r\n        }\r\n\t\t\r\n\t\tfor (p = 0; p < A.length; p++) {\r\n\t\t\tif (A[p].player == addr) {\r\n\t\t\t\ta+=A[p].deposit;\r\n\t\t\t}\r\n        }\r\n\t\tfor (p = 0; p < B.length; p++) {\r\n\t\t\tif (B[p].player == addr) {\r\n\t\t\t\tb+=B[p].deposit;\r\n\t\t\t}\r\n        }\r\n\t\t\r\n\t\treturn (a,b,d, totalA, totalB, totalD, true);\r\n\t}\r\n\r\n\r\n\tfunction betA() public payable {\r\n\t\trequire(\r\n            now <= betEnd,\r\n            \"Betting already ended.\"\r\n        );\r\n\r\n\t\trequire(open, \"Game closed\");\r\n\r\n\t\trequire(msg.value >= 0.01 ether, \"Single bet must be at least 0.01 ether\");\r\n\t\ttotalA+=msg.value;\r\n\t\tfor(uint p =0; p<A.length; p++) {\r\n\t\t\tif (A[p].player == msg.sender)\r\n\t\t\t{\r\n\t\t\t\tA[p].deposit += msg.value;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tA.push(bet({player:msg.sender, deposit:msg.value}));\r\n\t}\r\n\r\n\tfunction betB() public payable {\r\n\t\trequire(\r\n            now <= betEnd,\r\n            \"Betting already ended.\"\r\n        );\r\n\r\n\t\trequire(open, \"Game closed\");\r\n\t\trequire(msg.value >= 0.01 ether, \"Single bet must be at least 0.01 ether\");\r\n\t\ttotalB+=msg.value;\r\n\t\tfor(uint p =0; p<B.length; p++) {\r\n\t\t\tif (B[p].player == msg.sender)\r\n\t\t\t{\r\n\t\t\t\tB[p].deposit += msg.value;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tB.push(bet({player:msg.sender, deposit:msg.value}));\r\n\t}\r\n\t\r\n\tfunction betD() public payable {\r\n\t\trequire(\r\n            now <= betEnd,\r\n            \"Betting already ended.\"\r\n        );\r\n\t\trequire(open, \"Game closed\");\r\n\t\trequire(msg.value >= 0.01 ether, \"Single bet must be at least 0.01 ether\");\r\n\t\ttotalD+=msg.value;\r\n\t\tfor(uint p =0; p<D.length; p++) {\r\n\t\t\tif (D[p].player == msg.sender)\r\n\t\t\t{\r\n\t\t\t\tD[p].deposit += msg.value;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tD.push(bet({player:msg.sender, deposit:msg.value}));\r\n\t}\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"winnerIsB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"betA\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInfoB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"betD\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInfoA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"betB\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"winnerIsA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInfoD\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"winnerIsDraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"t\",\"type\":\"uint256\"},{\"name\":\"a\",\"type\":\"string\"},{\"name\":\"b\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "BetGame", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000005b250778000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000009417267656e74696e61000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074963656c616e6400000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5921a4e15b0adebcffe492277a7a2bdb02b90138ab3b5d69549bb9813fee36e6"}]}