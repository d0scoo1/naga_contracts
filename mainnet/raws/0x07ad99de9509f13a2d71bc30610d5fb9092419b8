{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/interface/ISkvllbabiez.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISkvllbabiez {\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function walletOfOwner(address _owner) external view returns(uint256[] memory);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function approve(address operator, uint256 tokenId) external;\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: contracts/DaycareStaking.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DaycareStaking is IERC721Receiver, Ownable, ReentrancyGuard {\r\n\r\n    event SkvllbabyCheckedIn(address owner, uint256 skvllbabyId);\r\n    event SkvllbabyCheckedOut(address owner, uint256 skvllbabyId);\r\n    event RewardCollected(address owner, uint256 skvllbabyId, uint256 amount);\r\n    event DaycareOpen();\r\n    event DaycareClosed();\r\n\r\n    struct Skvllbaby{\r\n        uint256 id;\r\n        address owner;\r\n        uint256 lastClaimTimestamp;\r\n        uint256 accruedBalance;\r\n        bool staked;\r\n    }\r\n\r\n    uint256 private constant REWARD_PER_DAY = 4*10**18;\r\n    uint256 private constant REWARD_PER_SEC = REWARD_PER_DAY / 86400;\r\n\r\n    ISkvllbabiez private SkvllpvnkzDaycare = ISkvllbabiez(0x40BCA1edDf13b5FFA8f6f1d470cabC78Ec2FC3bb);\r\n    IERC20 private SkvllpvnkzTreasury = IERC20(0xBcB6112292a9EE9C9cA876E6EAB0FeE7622445F1);\r\n    \r\n    bool public isDaycareOpen = false;\r\n\r\n    mapping(uint256 => Skvllbaby) private skvllbabiez;\r\n    mapping(address => uint256[]) private skvllbabiezByOwner;\r\n    uint256[] private checkedInList;\r\n    \r\n    modifier daycareOpen {\r\n        require( isDaycareOpen, \"Skvllpvnkz Daycare is closed\" );\r\n        _;\r\n    }\r\n\r\n    modifier isSkvllbaby(address contractAddress) {    \r\n        require( contractAddress == address(SkvllpvnkzDaycare), \"Not a Skvllbaby!\" );\r\n        _;\r\n    }\r\n    \r\n    function onERC721Received(address, address from, uint256 skvllbabyId, bytes memory) \r\n        override external daycareOpen isSkvllbaby(msg.sender) returns(bytes4) { \r\n            skvllbabiezByOwner[from].push(skvllbabyId);\r\n            skvllbabiez[skvllbabyId] = \r\n                Skvllbaby(\r\n                    skvllbabyId, \r\n                    from, \r\n                    block.timestamp, \r\n                    0, \r\n                    true); \r\n            emit SkvllbabyCheckedIn( from, skvllbabyId );\r\n            return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n    \r\n    function checkIn(uint256[] memory skvllbabyIds) external nonReentrant {\r\n        for (uint256 i; i < skvllbabyIds.length; i++){\r\n            SkvllpvnkzDaycare.safeTransferFrom( msg.sender, address(this), skvllbabyIds[i]);\r\n        }\r\n    }\r\n\r\n    function checkOut(uint256[] memory skvllbabyIds) public daycareOpen nonReentrant {\r\n        require(skvllbabyIds.length > 0, \"Need to provide at least 1 id\");\r\n        uint256 rewardTimestamp = block.timestamp;\r\n        for (uint256 i; i < skvllbabyIds.length; i++){\r\n            require(msg.sender == skvllbabiez[skvllbabyIds[i]].owner, \"Not your Skvllbaby\");\r\n            skvllbabiez[skvllbabyIds[i]].accruedBalance = _calculateRewards(skvllbabyIds[i], rewardTimestamp );\r\n            skvllbabiez[skvllbabyIds[i]].staked = false;\r\n            SkvllpvnkzDaycare.safeTransferFrom( address(this), msg.sender, skvllbabyIds[i]);\r\n            updateSkvllbabiezByOwner(skvllbabyIds[i]);\r\n            emit SkvllbabyCheckedOut(msg.sender, skvllbabyIds[i]);\r\n        }\r\n    }\r\n\r\n    function collectRewards(uint256[] memory skvllbabyIds) public daycareOpen nonReentrant{\r\n        uint256 rewardTimestamp = block.timestamp;\r\n        uint256 rewardAmount = 0;\r\n        for (uint256 i; i < skvllbabyIds.length; i++){\r\n            if (address(this) == SkvllpvnkzDaycare.ownerOf(skvllbabyIds[i])) {\r\n                rewardAmount += _calculateRewards(skvllbabyIds[i], rewardTimestamp );\r\n                rewardAmount += skvllbabiez[skvllbabyIds[i]].accruedBalance;             \r\n            } else {\r\n                require(msg.sender == SkvllpvnkzDaycare.ownerOf(skvllbabyIds[i]), \"Not your Skvllbaby\");\r\n                rewardAmount += skvllbabiez[skvllbabyIds[i]].accruedBalance;\r\n            }\r\n            skvllbabiez[skvllbabyIds[i]].accruedBalance = 0;\r\n            skvllbabiez[skvllbabyIds[i]].lastClaimTimestamp = rewardTimestamp;\r\n            emit RewardCollected(msg.sender, skvllbabyIds[i], rewardAmount);\r\n        }\r\n        _releasePayment(rewardAmount);\r\n    }\r\n\r\n    function _calculateRewards(uint256 skvllbabyId, uint256 currentTime ) internal view returns (uint256){\r\n        return (currentTime - skvllbabiez[skvllbabyId].lastClaimTimestamp) * REWARD_PER_SEC;\r\n    }\r\n\r\n    function _releasePayment(uint256 rewardAmount) internal {\r\n        require(rewardAmount > 0, \"Nothing to collect\");\r\n        require(SkvllpvnkzTreasury.balanceOf(address(this)) >= rewardAmount, \"Not enough AMMO\");\r\n        SkvllpvnkzTreasury.approve(address(this), rewardAmount); \r\n        SkvllpvnkzTreasury.transfer(msg.sender, rewardAmount);\r\n    }\r\n    \r\n    function getSkvllbabyReport(uint256 skvllbabyId) public view returns (Skvllbaby memory ){\r\n        bool staked = address(this) == SkvllpvnkzDaycare.ownerOf(skvllbabyId);\r\n        return Skvllbaby(\r\n                    skvllbabyId,\r\n                    staked ? skvllbabiez[skvllbabyId].owner : SkvllpvnkzDaycare.ownerOf(skvllbabyId), \r\n                    skvllbabiez[skvllbabyId].lastClaimTimestamp, \r\n                    staked ? _calculateRewards(skvllbabyId, block.timestamp) : skvllbabiez[skvllbabyId].accruedBalance,\r\n                    staked);\r\n        \r\n    }\r\n\r\n    function getWalletReport(address wallet) external view returns(Skvllbaby[] memory ){\r\n        uint256[] memory stakedIds = skvllbabiezByOwner[ wallet ];\r\n        uint256[] memory unstakedIds = SkvllpvnkzDaycare.walletOfOwner(wallet);\r\n        uint256[] memory ids = _concatArrays(stakedIds, unstakedIds);\r\n        require(ids.length > 0, \"Wallet has no babiez\");\r\n        Skvllbaby[] memory babiez = new Skvllbaby[](ids.length);\r\n        for (uint256 i; i < ids.length; i++){\r\n            babiez[i] = getSkvllbabyReport(ids[i]);\r\n        }\r\n        return babiez;\r\n        \r\n    }\r\n\r\n    function getBatchPendingRewards(uint64[] memory tokenIds) external view returns(Skvllbaby[] memory) {\r\n        Skvllbaby[] memory allRewards = new Skvllbaby[](tokenIds.length);\r\n        for (uint64 i = 0; i < tokenIds.length; i++){\r\n            allRewards[i] = getSkvllbabyReport(tokenIds[i]);\r\n        }\r\n        return allRewards;\r\n    }\r\n\r\n    function _concatArrays(uint256[] memory ids, uint256[] memory ids2) internal pure returns(uint256[] memory) {\r\n        uint256[] memory returnArr = new uint256[](ids.length + ids2.length);\r\n\r\n        uint i=0;\r\n        for (; i < ids.length; i++) {\r\n            returnArr[i] = ids[i];\r\n        }\r\n\r\n        uint j=0;\r\n        while (j < ids2.length) {\r\n            returnArr[i++] = ids2[j++];\r\n        }\r\n\r\n        return returnArr;\r\n    }\r\n\r\n    function updateSkvllbabiezByOwner(uint256 skvllbabyId) internal {\r\n        if (skvllbabiezByOwner[msg.sender].length == 1) {\r\n            delete skvllbabiezByOwner[msg.sender];\r\n        } else {\r\n            for (uint256 i; i < skvllbabiezByOwner[msg.sender].length; i++){\r\n                if (skvllbabiezByOwner[msg.sender][i] == skvllbabyId) {\r\n                    skvllbabiezByOwner[msg.sender][i] = skvllbabiezByOwner[msg.sender][skvllbabiezByOwner[msg.sender].length - 1];\r\n                    skvllbabiezByOwner[msg.sender].pop();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function isSkvllbabyCheckedIn (uint256 skvllbabyId) external view returns (bool){\r\n        return SkvllpvnkzDaycare.ownerOf(skvllbabyId) == address(this) ? true : false;\r\n    }\r\n\r\n    function openCloseDaycare() external onlyOwner {\r\n        isDaycareOpen = !isDaycareOpen;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external payable onlyOwner {\r\n        require(payable(msg.sender).send(amount), \"Payment failed\");\r\n    }\r\n\r\n    function setTreasuryContract(address skvllpvnkzTreasury) external onlyOwner {\r\n        SkvllpvnkzTreasury = IERC20(skvllpvnkzTreasury);\r\n    }\r\n\r\n    function setSkvllbabiezContract(address skvllpvnkzDaycare) external onlyOwner {\r\n        SkvllpvnkzDaycare = ISkvllbabiez(skvllpvnkzDaycare);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[],\"name\":\"DaycareClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DaycareOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skvllbabyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skvllbabyId\",\"type\":\"uint256\"}],\"name\":\"SkvllbabyCheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"skvllbabyId\",\"type\":\"uint256\"}],\"name\":\"SkvllbabyCheckedOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"skvllbabyIds\",\"type\":\"uint256[]\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"skvllbabyIds\",\"type\":\"uint256[]\"}],\"name\":\"checkOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"skvllbabyIds\",\"type\":\"uint256[]\"}],\"name\":\"collectRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"tokenIds\",\"type\":\"uint64[]\"}],\"name\":\"getBatchPendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"}],\"internalType\":\"struct DaycareStaking.Skvllbaby[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skvllbabyId\",\"type\":\"uint256\"}],\"name\":\"getSkvllbabyReport\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"}],\"internalType\":\"struct DaycareStaking.Skvllbaby\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletReport\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"}],\"internalType\":\"struct DaycareStaking.Skvllbaby[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDaycareOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skvllbabyId\",\"type\":\"uint256\"}],\"name\":\"isSkvllbabyCheckedIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"skvllbabyId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openCloseDaycare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"skvllpvnkzDaycare\",\"type\":\"address\"}],\"name\":\"setSkvllbabiezContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"skvllpvnkzTreasury\",\"type\":\"address\"}],\"name\":\"setTreasuryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "DaycareStaking", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be1d3929594842841790fe62546ded37742c2df0c44a49e97e303c1335022290"}]}