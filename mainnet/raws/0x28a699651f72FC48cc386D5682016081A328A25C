{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/src/contracts/TheBigPicture.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT  \\r\\npragma solidity ^0.8.2; \\r\\n  \\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";  \\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n  \\r\\ncontract TheBigPicture is ERC721, Ownable { \\r\\n    using Strings for uint256;\\r\\n\\r\\n    uint16 public MAX_SUPPLY = 1024; // Only 1,024 total nfts available. (32*32 to build a pixel 256x256 image)\\r\\n    uint public constant DEV_MINT_FEE = 80; // Allows me to get 80% of the mint money. The rest is distributed to current holders at the time of mint. Directly added to devBalance.\\r\\n    uint public constant DEV_MISC_FEE = 5; // Later used as 5% on all other in-game fees. Directly added to devBalance.\\r\\n    uint public constant PUBLIC_MISC_FEE = 5; // 5% of all misc fees on direct transactions are given out to the rest of the holders. (updatePlot)\\r\\n    uint16 public totalSupply = 0; // Keeps track of total supply. ERC721Enumerable was making gas fees WAY too high.\\r\\n\\r\\n    bool lockMintPrice = false; // Used to block the contract owner from editing mint price.\\r\\n    bool lockFees = false; // Used to block the contract owner from editing fees that users use on specific plots modification transactions.\\r\\n    bool lockMaxLimitPeriod = false; // Only used to block the contract owner from editing the max limit period for a plot.\\r\\n\\r\\n    uint256 public MINT_PRICE = 0.02 ether; // The mint price.\\r\\n    uint256 public MODIFY_FEE = 0.005 ether; // The fee to modify a plot if there have been no modifications done prior.\\r\\n    uint256 public LIMIT_FEE_PER_BLOCK = 0.000005 ether; // The fee per block that is used to limit a plot. Limiting blocks anyone but the owner from editing the plot.\\r\\n    uint256 public MODIFY_INCREASE_RATE = 2; // Every time your plot is modified, the cost to modify again for external users is increased by this rate. Example: 1 edit is an increase of 2% of the initial MODIFY_FEE.\\r\\n\\r\\n    uint256 public MAX_LIMIT_PERIOD = 25000; // The maximum length in blocks a plot can be limited for.\\r\\n\\r\\n    uint256 d = 0xf000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; //This value is the required minimum for creating a hex color code uint256 in a plot.\\r\\n    uint256 devBalance = 0 ether; // Keeps track of all earnings for the developer.\\r\\n    uint256 globalRewards = 0 ether; // Keeps track of all global rewards. It's not a direct indictator of how much has been made, but it is used to keep everyone aligned.\\r\\n\\r\\n    string private baseTokenURI; // Stores the URL for getting the NFT's metadata.\\r\\n\\r\\n    struct Plot {\\r\\n        uint16 id; // Plot's Id\\r\\n        uint32 timesModified; // The amount of times the plot has been modified both by the owner and by others.\\r\\n        uint256 modifyRewards; // The pending rewards for a plot. This is earned only by modifications.\\r\\n        uint256 claimedGlobalRewards; // This keeps the plot's global rewards compared to the overall rewards made. It helps calculate the amount that is due for the massively spread out amounts among all plots.\\r\\n        uint256 limitBlock; // The block where, if enabled, a limit will expire. If the limit is below the current block, it isn't limited.\\r\\n        uint256[7] pixels; // Stores 7 uint256s that are convertable into hex color codes to display on the site. This helps easily recreate and transfer designs around.\\r\\n    }\\r\\n\\r\\n    mapping(uint16 => Plot) public plotIdToPlot; // This is how the code reverses a tokenId into a plot object.\\r\\n    \\r\\n    // Initial constructor that sets the metadata URI and basic information.\\r\\n    constructor(string memory newBaseURI) ERC721(\\\"The Big Picture\\\", \\\"PLOT\\\") {\\r\\n        baseTokenURI = newBaseURI;\\r\\n    }\\r\\n\\r\\n    /* Mint */\\r\\n\\r\\n    // Mints an ERC721 token and builds a plot in storage.\\r\\n    function mint(uint16 plotId) external payable {\\r\\n        require(msg.value == MINT_PRICE, \\\"Incorrect ether sent.\\\");\\r\\n        require(plotId < MAX_SUPPLY && plotId >= 0, \\\"You're trying to mint outside the picture.\\\");\\r\\n        \\r\\n        _safeMint(msg.sender, plotId);\\r\\n\\r\\n        if (totalSupply > 0){\\r\\n            // Gives the developer 80% of the mint value.\\r\\n            devBalance += msg.value / 100 * DEV_MINT_FEE;\\r\\n\\r\\n            // Sets the reward for any plot that has been minted to a higher value.\\r\\n            globalRewards += (msg.value / 100 * (100-DEV_MINT_FEE)) / (totalSupply);\\r\\n        }\\r\\n        else{\\r\\n            // Gives the developer 100% of the mint value since there are no other plots to reward yet.\\r\\n            devBalance += msg.value;\\r\\n        }\\r\\n\\r\\n        // Increments total supply since we are manually tracking this.\\r\\n        totalSupply += 1;\\r\\n\\r\\n        // Initializes the plot for later use. This is why the gas price is so high... sorry...\\r\\n        plotIdToPlot[plotId] = Plot(plotId, 0, 0 ether, globalRewards, block.number, [d,d,d,d,d,d,d]);\\r\\n\\r\\n    }\\r\\n\\r\\n    /* Plots */\\r\\n\\r\\n    // Returns all variables for a given plot.\\r\\n    function viewPlot(uint16 plotId) public view returns (Plot memory) {\\r\\n        return plotIdToPlot[plotId];\\r\\n    }\\r\\n\\r\\n    // Returns a full list of plots and their variables. This is key in reproducing the map without doing 64 total requests per block. It's an intense query nonetheless.\\r\\n    function viewPlots(uint16[] calldata plotIds) public view returns (Plot[] memory){\\r\\n        Plot[] memory plots = new Plot[](plotIds.length);\\r\\n        for(uint16 x = 0; x < plotIds.length; x++){\\r\\n            Plot memory plot = viewPlot(plotIds[x]);\\r\\n            plots[x] = plot;\\r\\n        }\\r\\n        return plots;\\r\\n    }\\r\\n\\r\\n    // Allows editing of a plot's pixel data. The input pixels is uint256s that can be decoded into hex strings that contain hex color codes. They must match a basic criteria so that all values can be read.\\r\\n    function updateFullPlot(uint16 plotId, uint256[7] memory pixels) public payable {\\r\\n        require((msg.value == (MODIFY_FEE*((100+((MODIFY_INCREASE_RATE*plotIdToPlot[plotId].timesModified)))))/100 && ownerOf(plotId) != msg.sender) || (ownerOf(plotId) == msg.sender && msg.value == 0 ether), \\\"Incorrect ether sent.\\\");\\r\\n        require(plotIdToPlot[plotId].limitBlock < block.number || ownerOf(plotId) == msg.sender, \\\"This plot is limited.\\\");\\r\\n\\r\\n        for(uint8 x = 0; x < 7; x++){\\r\\n            require(pixels[x] >= d, \\\"Upload does not meet standards.\\\"); // This prevents any entry into the pixel list that isn't going to create hex color codes.\\r\\n        }\\r\\n\\r\\n        // If the person doing the transaction is not the owner, it'll cost them money, but if they're the owner, we don't need to waste time with that logic below.\\r\\n        if(msg.sender != ownerOf(plotId)){\\r\\n\\r\\n            if(totalSupply-1 > 0){\\r\\n\\r\\n                //Gives the developer 5% of the modification price.\\r\\n                devBalance += msg.value / 100 * DEV_MISC_FEE;\\r\\n\\r\\n                //Gives 5% of the modification price spread out to all plots EXCEPT the plot being edited.\\r\\n                globalRewards += (msg.value / 100 * PUBLIC_MISC_FEE)/(totalSupply-1);\\r\\n                plotIdToPlot[plotId].claimedGlobalRewards += (msg.value / 100 * PUBLIC_MISC_FEE)/(totalSupply-1);\\r\\n\\r\\n                // Gives 90% of the modification price to the plot that's being edited's rewards.\\r\\n                plotIdToPlot[plotId].modifyRewards += msg.value / 100 * (100-DEV_MISC_FEE-PUBLIC_MISC_FEE);\\r\\n            }\\r\\n            else{\\r\\n                // Gives the developer 5% of the modification price.\\r\\n                devBalance += msg.value / 100 * DEV_MISC_FEE;\\r\\n               // Gives 95% of the modification price to the plot that's being edited's rewards. This is an edge case where there is only 1 plot and that plot is modified.\\r\\n                plotIdToPlot[plotId].modifyRewards += msg.value / 100 * (100-DEV_MISC_FEE);\\r\\n            }\\r\\n        \\r\\n        }\\r\\n        \\r\\n        // Replaces the array of pixels with new pixels.\\r\\n        plotIdToPlot[plotId].pixels = pixels;\\r\\n        // Increments the total times modified. This will increase the price to modify and will burn any pending transaction with the same modification price.\\r\\n        plotIdToPlot[plotId].timesModified += 1;\\r\\n    }\\r\\n\\r\\n    // Allows a user to limit their plot to be only editable by the owner of the token for a certain number of blocks.\\r\\n    function limitPlot(uint16 plotId, uint256 blocks) public payable {\\r\\n        require(ownerOf(plotId) == msg.sender, \\\"You cannot modify this plot.\\\");\\r\\n        require(msg.value == blocks*LIMIT_FEE_PER_BLOCK, \\\"Incorrect ether sent.\\\");\\r\\n        require(blocks > 0, \\\"You must increase by more than 0.\\\");\\r\\n        require(blocks <= MAX_LIMIT_PERIOD, \\\"You cannot set your limitation this far.\\\");\\r\\n        require(plotIdToPlot[plotId].limitBlock+blocks <= block.number+MAX_LIMIT_PERIOD, \\\"You cannot extend your limitations this far.\\\");\\r\\n\\r\\n        // If the plot currently has no limit, set the limit to the block that is the requested distance out.\\r\\n        if(plotIdToPlot[plotId].limitBlock <= block.number){\\r\\n            plotIdToPlot[plotId].limitBlock = block.number + blocks;\\r\\n        }\\r\\n        else{\\r\\n            // If the plot has a limit, just add the new block count to the old limit.\\r\\n            plotIdToPlot[plotId].limitBlock += blocks;\\r\\n        }\\r\\n\\r\\n        if (totalSupply-1 > 0){\\r\\n            //Gives the developer 5% of the limit price.\\r\\n            devBalance += (msg.value*(DEV_MISC_FEE/100));\\r\\n\\r\\n            //Gives all holders, but the plot owner a reward that is 95% of the limit fee spread out over all supply.\\r\\n            globalRewards += (msg.value / 100 * (100-DEV_MISC_FEE))/(totalSupply-1);\\r\\n            plotIdToPlot[plotId].claimedGlobalRewards += (msg.value / 100 * (100-DEV_MISC_FEE))/(totalSupply-1);\\r\\n        }\\r\\n        else{\\r\\n            // Gives the developer 100% of the limit fee. This is an edge case where there is only 1 plot and that plot is limited.\\r\\n            devBalance += msg.value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Resets the limit block for a plot. No refund given.\\r\\n    function unlimitPlot(uint16 plotId) public {\\r\\n        require(ownerOf(plotId) == msg.sender,\\\"You don't own this plot.\\\");\\r\\n        require(plotIdToPlot[plotId].limitBlock > block.number,\\\"This plot is not limited.\\\");\\r\\n\\r\\n        // Sets the limit block to the current block which resets it to be seen as not limited.\\r\\n        plotIdToPlot[plotId].limitBlock = block.number;\\r\\n    }\\r\\n\\r\\n    /* Reward Claiming */\\r\\n\\r\\n    // Returns the current balance of a plot.\\r\\n    function viewRewards(uint16 plotId) public view returns (uint256) {\\r\\n\\r\\n        // If the plot exists, return the values, if not, return 0.\\r\\n        if(plotIdToPlot[plotId].limitBlock != 0){\\r\\n            return (globalRewards-plotIdToPlot[plotId].claimedGlobalRewards) + plotIdToPlot[plotId].modifyRewards;\\r\\n        }\\r\\n        else{\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Returns the current devBalance.\\r\\n    function viewDevRewards() public view returns (uint256) {\\r\\n        return devBalance;\\r\\n    }\\r\\n\\r\\n    // Allows a plot holder to claim rewards for their plot.\\r\\n    function claimRewards(uint16 plotId) public {\\r\\n        require(msg.sender == ownerOf(plotId), \\\"You do not own this plot.\\\");\\r\\n        require(globalRewards-plotIdToPlot[plotId].claimedGlobalRewards > 0 || plotIdToPlot[plotId].modifyRewards > 0, \\\"Plot has no rewards to claim.\\\");\\r\\n\\r\\n        // If the plot has pending rewards from limits or global rewards.\\r\\n        if (globalRewards-plotIdToPlot[plotId].claimedGlobalRewards > 0){\\r\\n            \\r\\n            bool sent = payable(ownerOf(plotId)).send(globalRewards-plotIdToPlot[plotId].claimedGlobalRewards);\\r\\n            require(sent, \\\"Failed to send Ether\\\");\\r\\n\\r\\n            plotIdToPlot[plotId].claimedGlobalRewards = globalRewards;\\r\\n        }\\r\\n\\r\\n        // If the plot has pending rewards from modifications.\\r\\n        if (plotIdToPlot[plotId].modifyRewards > 0){\\r\\n\\r\\n            bool sentTwo = payable(ownerOf(plotId)).send(plotIdToPlot[plotId].modifyRewards);\\r\\n            require(sentTwo, \\\"Failed to send Ether\\\");\\r\\n\\r\\n            plotIdToPlot[plotId].modifyRewards = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Allows the owner of the contract to claim the entire developer balance.\\r\\n    function claimDevRewards() public onlyOwner {\\r\\n        require(devBalance > 0 ether, \\\"Developer balance is 0 ether.\\\");\\r\\n\\r\\n        bool sent = payable(msg.sender).send(devBalance);\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n\\r\\n        devBalance = 0 ether;\\r\\n    }\\r\\n\\r\\n    /* Normal NFT Stuff */\\r\\n\\r\\n    // Returns the link you'll use to view data. Mostly just used to cache information on OpenSea and similar.\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory){\\r\\n        require(_exists(tokenId),\\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        string memory currentBaseURI = baseTokenURI;\\r\\n        return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString())): \\\"\\\";\\r\\n    }\\r\\n\\r\\n    // Allows the owner of the contract to set the link for metadata.\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseTokenURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    /* Price / Fee Changing */\\r\\n    \\r\\n    // Trust is needed on these. If I cannot be trusted, I will do the locking functions.\\r\\n\\r\\n    //Allows me to only decrease the mint price. Obviously it's already cheap to mint, but I'd be able to set it to free, but never higher.\\r\\n    function setMintPrice(uint256 newPrice) public onlyOwner {\\r\\n        require(!lockMintPrice, \\\"Owner is locked from editing the price.\\\");\\r\\n        require(newPrice < MINT_PRICE, \\\"You cannot increase the mint price.\\\");\\r\\n        MINT_PRICE = newPrice;\\r\\n    }\\r\\n\\r\\n    // These values are the base fees. I will handle with care. Will change only on community vote. I'd mostly be using these functions to match floor prices and keep it fair to holders.\\r\\n\\r\\n    // Sets the base modification fee for attempting to modify a plot that isn't theirs.\\r\\n    function setModifyFee(uint256 newModifyFee) public onlyOwner {\\r\\n        require(!lockFees, \\\"Owner is locked from editing the fees.\\\");\\r\\n        MODIFY_FEE = newModifyFee;\\r\\n    }\\r\\n\\r\\n    // Sets the increase rate for when someone is attempting to modify a plot that isn't theirs. Only here just in case the starting prices are either too high or too little.\\r\\n    function setModifyIncreaseRate(uint256 newModifyIncreaseRate) public onlyOwner {\\r\\n        require(!lockFees, \\\"Owner is locked from editing the rate.\\\");\\r\\n        MODIFY_INCREASE_RATE = newModifyIncreaseRate;\\r\\n    }\\r\\n\\r\\n    // Sets the fee per block when limiting a plot.\\r\\n    function setLimitPerBlockFee(uint256 newLimitPerBlockFee) public onlyOwner {\\r\\n        require(!lockFees, \\\"Owner is locked from editing the fees.\\\");\\r\\n        LIMIT_FEE_PER_BLOCK = newLimitPerBlockFee;\\r\\n    }\\r\\n\\r\\n    // Sets the furthest block out you can lock a plot for.\\r\\n    function setMaxLimitPeriod(uint256 newMaxLimitPeriod) public onlyOwner {\\r\\n        require(!lockMaxLimitPeriod, \\\"Owner is locked from editing the fees.\\\");\\r\\n        MAX_LIMIT_PERIOD = newMaxLimitPeriod;\\r\\n    }\\r\\n\\r\\n\\r\\n    /* Locking The Developer Mechanism */\\r\\n\\r\\n    // I will go along with whatever the community votes for. Again, just trust me to do the right thing.\\r\\n\\r\\n    function doLockFees() public onlyOwner {\\r\\n        lockFees = true;\\r\\n    }\\r\\n\\r\\n    function doLockMintPrice() public onlyOwner {\\r\\n        lockMintPrice = true;\\r\\n    }\\r\\n\\r\\n    function doLockMaxLimitPeriod() public onlyOwner {\\r\\n        lockMaxLimitPeriod = true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /* Rewards to holders from external sources. */\\r\\n\\r\\n    // Possibly used later for a second collection to bridge earnings over from the other contract or I may return some secondary sales back to holders.\\r\\n    // Just want the ability to add in ETH and disperse it to everyone if it ever comes up. <3\\r\\n    // ANYONE CAN REWARD HOLDERS. IF YOU GET JUICED OFF THE MINT, SPREAD THE LOVE.\\r\\n\\r\\n    function rewardHolders() public payable {\\r\\n        require(msg.value >= 0.01 ether, \\\"Reward must be greater than 0.01 ETH.\\\");\\r\\n        globalRewards += msg.value/totalSupply;\\r\\n    }\\r\\n\\r\\n    /* Other */ \\r\\n\\r\\n    // All variables listed here are explained above. This is just a nice way to store and return the information.\\r\\n    struct GameData {\\r\\n        uint16  MAX_SUPPLY;\\r\\n        uint DEV_MINT_FEE;\\r\\n        uint DEV_MISC_FEE;\\r\\n        uint PUBLIC_MISC_FEE;\\r\\n        uint16 totalSupply;\\r\\n        bool lockMintPrice;\\r\\n        bool lockFees;\\r\\n        bool lockMaxLimitPeriod;\\r\\n        uint256 MINT_PRICE;\\r\\n        uint256 MODIFY_FEE;\\r\\n        uint256 LIMIT_FEE_PER_BLOCK;\\r\\n        uint256 MAX_LIMIT_PERIOD;\\r\\n        uint256 MODIFY_INCREASE_RATE;\\r\\n    }\\r\\n\\r\\n    // This is used to keep the site up to date with the current variables. It's an eyesore, but many of these variables are important for the front end to see.\\r\\n    function getGameVariables() public view returns (GameData memory){\\r\\n        return GameData(MAX_SUPPLY, DEV_MINT_FEE, DEV_MISC_FEE, PUBLIC_MISC_FEE, totalSupply, lockMintPrice, lockFees, lockMaxLimitPeriod, MINT_PRICE, MODIFY_FEE, LIMIT_FEE_PER_BLOCK, MAX_LIMIT_PERIOD, MODIFY_INCREASE_RATE);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEV_MINT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_MISC_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIMIT_FEE_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LIMIT_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODIFY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODIFY_INCREASE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_MISC_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDevRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"plotId\",\"type\":\"uint16\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doLockFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doLockMaxLimitPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doLockMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameVariables\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"MAX_SUPPLY\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"DEV_MINT_FEE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DEV_MISC_FEE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PUBLIC_MISC_FEE\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"lockMintPrice\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lockMaxLimitPeriod\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"MINT_PRICE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MODIFY_FEE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LIMIT_FEE_PER_BLOCK\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MAX_LIMIT_PERIOD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MODIFY_INCREASE_RATE\",\"type\":\"uint256\"}],\"internalType\":\"struct TheBigPicture.GameData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"plotId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"limitPlot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"plotId\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"plotIdToPlot\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"timesModified\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"modifyRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedGlobalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHolders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimitPerBlockFee\",\"type\":\"uint256\"}],\"name\":\"setLimitPerBlockFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxLimitPeriod\",\"type\":\"uint256\"}],\"name\":\"setMaxLimitPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newModifyFee\",\"type\":\"uint256\"}],\"name\":\"setModifyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newModifyIncreaseRate\",\"type\":\"uint256\"}],\"name\":\"setModifyIncreaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"plotId\",\"type\":\"uint16\"}],\"name\":\"unlimitPlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"plotId\",\"type\":\"uint16\"},{\"internalType\":\"uint256[7]\",\"name\":\"pixels\",\"type\":\"uint256[7]\"}],\"name\":\"updateFullPlot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewDevRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"plotId\",\"type\":\"uint16\"}],\"name\":\"viewPlot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"timesModified\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"modifyRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedGlobalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[7]\",\"name\":\"pixels\",\"type\":\"uint256[7]\"}],\"internalType\":\"struct TheBigPicture.Plot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"plotIds\",\"type\":\"uint16[]\"}],\"name\":\"viewPlots\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"timesModified\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"modifyRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedGlobalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[7]\",\"name\":\"pixels\",\"type\":\"uint256[7]\"}],\"internalType\":\"struct TheBigPicture.Plot[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"plotId\",\"type\":\"uint16\"}],\"name\":\"viewRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TheBigPicture", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002668747470733a2f2f626967706963747572652e6172742f6d657461646174612f706c6f74732f0000000000000000000000000000000000000000000000000000", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}