{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DeploymentValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/Authorizable.sol\\\";\\nimport \\\"./interfaces/IDeploymentValidator.sol\\\";\\n\\ncontract DeploymentValidator is IDeploymentValidator, Authorizable {\\n    // a mapping of wrapped position contracts deployed by Element\\n    mapping(address => bool) public wrappedPositions;\\n    // a mapping of pool contracts deployed by Element\\n    mapping(address => bool) public pools;\\n    // a mapping of wrapped position + pool pairs that are deployed by Element\\n    // we keccak256 hash these tuples together to serve as the mapping keys\\n    mapping(bytes32 => bool) public pairs;\\n\\n    /// @notice Constructs this contract and stores needed data\\n    /// @param _owner The contract owner authorized to validate addresses\\n    constructor(address _owner) {\\n        // authorize the owner address to be able to execute the validations\\n        _authorize(_owner);\\n    }\\n\\n    /// @notice adds a wrapped position address to the mapping\\n    /// @param wrappedPosition The wrapped position contract address\\n    function validateWPAddress(address wrappedPosition)\\n        public\\n        override\\n        onlyAuthorized\\n    {\\n        // add address to mapping to indicating it was deployed by Element\\n        wrappedPositions[wrappedPosition] = true;\\n    }\\n\\n    /// @notice adds a wrapped position address to the mapping\\n    /// @param pool the pool contract address\\n    function validatePoolAddress(address pool) public override onlyAuthorized {\\n        // add address to mapping to indicating it was deployed by Element\\n        pools[pool] = true;\\n    }\\n\\n    /// @notice adds a wrapped position + pool pair of addresses to mapping\\n    /// @param wrappedPosition the wrapped position contract address\\n    /// @param pool the pool contract address\\n    function validateAddresses(address wrappedPosition, address pool)\\n        external\\n        override\\n        onlyAuthorized\\n    {\\n        // add to pool validation mapping\\n        validatePoolAddress(pool);\\n        // add to wp validation mapping\\n        validateWPAddress(wrappedPosition);\\n        // hash together the contract addresses\\n        bytes32 data = keccak256(abi.encodePacked(wrappedPosition, pool));\\n        // add the hashed pair into the mapping\\n        pairs[data] = true;\\n    }\\n\\n    /// @notice checks to see if the address has been validated\\n    /// @param wrappedPosition the address to check\\n    /// @return true if validated, false if not\\n    function checkWPValidation(address wrappedPosition)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return wrappedPositions[wrappedPosition];\\n    }\\n\\n    /// @notice checks to see if the address has been validated\\n    /// @param pool the address to check\\n    /// @return true if validated, false if not\\n    function checkPoolValidation(address pool)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return pools[pool];\\n    }\\n\\n    /// @notice checks to see if the pair of addresses have been validated\\n    /// @param wrappedPosition the wrapped position address to check\\n    /// @param pool the pool address to check\\n    /// @return true if validated, false if not\\n    function checkPairValidation(address wrappedPosition, address pool)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        bytes32 data = keccak256(abi.encodePacked(wrappedPosition, pool));\\n        return pairs[data];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Authorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.0;\\n\\ncontract Authorizable {\\n    // This contract allows a flexible authorization scheme\\n\\n    // The owner who can change authorization status\\n    address public owner;\\n    // A mapping from an address to its authorization status\\n    mapping(address => bool) public authorized;\\n\\n    /// @dev We set the deployer to the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev This modifier checks if the msg.sender is the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender not owner\\\");\\n        _;\\n    }\\n\\n    /// @dev This modifier checks if an address is authorized\\n    modifier onlyAuthorized() {\\n        require(isAuthorized(msg.sender), \\\"Sender not Authorized\\\");\\n        _;\\n    }\\n\\n    /// @dev Returns true if an address is authorized\\n    /// @param who the address to check\\n    /// @return true if authorized false if not\\n    function isAuthorized(address who) public view returns (bool) {\\n        return authorized[who];\\n    }\\n\\n    /// @dev Privileged function authorize an address\\n    /// @param who the address to authorize\\n    function authorize(address who) external onlyOwner {\\n        _authorize(who);\\n    }\\n\\n    /// @dev Privileged function to de authorize an address\\n    /// @param who The address to remove authorization from\\n    function deauthorize(address who) external onlyOwner {\\n        authorized[who] = false;\\n    }\\n\\n    /// @dev Function to change owner\\n    /// @param who The new owner address\\n    function setOwner(address who) public onlyOwner {\\n        owner = who;\\n    }\\n\\n    /// @dev Inheritable function which authorizes someone\\n    /// @param who the address to authorize\\n    function _authorize(address who) internal {\\n        authorized[who] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDeploymentValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IDeploymentValidator {\\n    function validateWPAddress(address wrappedPosition) external;\\n\\n    function validatePoolAddress(address pool) external;\\n\\n    function validateAddresses(address wrappedPosition, address pool) external;\\n\\n    function checkWPValidation(address wrappedPosition)\\n        external\\n        view\\n        returns (bool);\\n\\n    function checkPoolValidation(address pool) external view returns (bool);\\n\\n    function checkPairValidation(address wrappedPosition, address pool)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 7500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedPosition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"checkPairValidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"checkPoolValidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedPosition\",\"type\":\"address\"}],\"name\":\"checkWPValidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedPosition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"validateAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"validatePoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedPosition\",\"type\":\"address\"}],\"name\":\"validateWPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrappedPositions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DeploymentValidator", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "7500", "ConstructorArguments": "000000000000000000000000422494292e7a9dda8778bb4ea05c2779a3d60f5d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}