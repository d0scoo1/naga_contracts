{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\ncontract ERC20Interface{ \r\n    \r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address who) public view returns (uint);\r\n    function transfer(address to, uint value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Interface{\r\n\r\n    function allowance(address owner, address spender) public view returns (uint);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n    function approve (address spender, uint value) public returns (bool);\r\n    event Approval (address indexed owner, address indexed spender, uint value);\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n//\ud574\ub2f9 \ucee8\ud2b8\ub799\ud2b8\ub294 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uc120\uc5b8\ud55c \ud568\uc218\ub4e4\uc758 \uae30\ub2a5\uc744 \uad6c\ud604\ud574\uc900\ub2e4.\r\ncontract BasicToken is ERC20Interface{\r\n    using SafeMath for uint256;\r\n    //using A for B : B \uc790\ub8cc\ud615\uc5d0 A \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub97c \ubd99\uc5ec\ub77c.\r\n    //dot(.)\uc73c\ub85c \ud638\ucd9c \ud560\uc218 \uc788\uac8c\ub428.\r\n    //ex) using SafeMath for uint256 \uc774\uba74 uint256\uc790\ub8cc\ud615\uc5d0 SafeMath \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub97c .\uc744 \uc774\uc6a9\ud574 \uc0ac\uc6a9\uac00\ub2a5\ud558\ub2e4\ub294 \ub73b => a.add(1) ,b.sub(2)\ub97c \uc0ac\uc6a9\uac00\ub2a5\ud558\uac8c \ud568.\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n\r\n    uint totalSupply_;\r\n\r\n// \ud1a0\ud070\uc758 \ucd1d \ubc1c\ud589\ub7c9\uc744 \uad6c\ud558\ub294 \ud568\uc218.\r\n  function totalSupply() public view returns (uint){\r\n    return totalSupply_;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) public returns (bool){\r\n    require (_to != address(0));\r\n    // address(0)\uc740 \uac12\uc774 \uc5c6\ub2e4\ub294 \uac83.\r\n    // require\ub780 \ucc38\uc774\uba74 \uc2e4\ud589\ud558\ub294 \uac83.\r\n    require (_value <= balances[msg.sender]);\r\n    // \ud568\uc218\ub97c \ud638\ucd9c\ud55c '\ub098'\uc758 \ud1a0\ud070 \uc794\uace0\uac00 \ubcf4\ub0b4\ub294 \ud1a0\ud070\uc758 \uac1c\uc218\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc744\ub54c \uc2e4\ud589.\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    //sub\ub294 \ube84\uc148. , \ubcf4\ub0b8 \ud1a0\ud070\uac1c\uc218\ub9cc\ud07c \ube80\ub2e4.\r\n    balances[_to] = balances[_to].add(_value);\r\n    //add\ub294 \ub367\uc148. , \ubc1b\uc740 \ud1a0\ud070\uac1c\uc218 \ub9cc\ud07c \ub354\ud55c\ub2e4.\r\n\r\n    emit Transfer(msg.sender,_to,_value);\r\n    // Transfer\ub77c\ub294 \uc774\ubca4\ud2b8\ub97c \uc2e4\ud589\ud558\uc5ec \uc774\ub354\ub9ac\uc6c0 \ube14\ub85d\uccb4\uc778\uc0c1\uc5d0 \uac70\ub798\ub0b4\uc5ed\uc744 \uae30\ub85d\ud55c\ub2e4. \ubb3c\ub860, \ub4f1\ub85d\ub42c\uc73c\ubbc0\ub85c \uac80\uc0c9 \uac00\ub2a5.\r\n    return true; //\ubaa8\ub4e0\uac83\uc774 \uc2e4\ud589\ub418\uba74 \ucc38\uc744 \ucd9c\ub825.\r\n\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns(uint balance){\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken{\r\n  //ERC20\uc5d0 \uc120\uc5b8\ub41c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud558\ub294 \ucee8\ud2b8\ub799\ud2b8.\r\n\r\n  mapping (address => mapping (address => uint)) internal allowed;\r\n  // allowed \ub9e4\ud551\uc740 '\ub204\uac00','\ub204\uad6c\uc5d0\uac8c','\uc5bc\ub9c8\uc758' \uc778\ucd9c\uad8c\ud55c\uc744 \uc904\uc9c0\ub97c \uc800\uc7a5\ud558\ub294 \uac83. ex) allowed[\ub204\uac00][\ub204\uad6c\uc5d0\uac8c] = \uc5bc\ub9c8;\r\n\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool){\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    //\ubcf4\ub0b4\ub824\ub294 \ud1a0\ud070\uac1c\uc218\uac00 \uacc4\uc88c\uc8fc\uc778 _from\uc774 \ub3c8\uc744 \ube7c\ub824\ub294 msg.sender\uc5d0\uac8c \ud5c8\uc6a9\ud55c \uac1c\uc218\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc73c\uba74 \ucc38.\r\n    //_fromr\uc5d0\uac8c \uc778\ucd9c\uad8c\ud55c\uc744 \ubc1b\uc740 msg.sender\uac00 \uac00\uc2a4\ube44\ub97c \uc18c\ubaa8\ud568.\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from,_to,_value);\r\n    return true;\r\n\r\n  }\r\n\r\n  function approve(address _spender, uint _value) public returns (bool){\r\n    allowed[msg.sender][_spender] = _value;\r\n    //msg.sender\uc758 \uacc4\uc88c\uc5d0\uc11c _value \ub9cc\ud07c \uc778\ucd9c\ud574 \uac08 \uc218 \uc788\ub294 \uad8c\ub9ac\ub97c _spender \uc5d0\uac8c \ubd80\uc5ec\ud55c\ub2e4.\r\n    emit Approval(msg.sender,_spender,_value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint){\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract JHToken is StandardToken{\r\n\r\n  string public constant name = \"JHToken\";\r\n  string public constant symbol = \"JHTK\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  uint256 public constant INITIAL_SUPPLY =            4000000000 * (10**uint256(decimals));\r\n\r\n  constructor() public{\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    balances[msg.sender] = INITIAL_SUPPLY;\r\n    emit Transfer(0x0,msg.sender,INITIAL_SUPPLY);\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "JHToken", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://13e6aa0fc916917229ae4fb628ec3a1eb0a25ca282cb83bfd1797cd8634bb490"}]}