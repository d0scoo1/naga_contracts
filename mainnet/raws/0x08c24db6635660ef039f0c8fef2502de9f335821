{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity 0.4.24;\r\n\r\ncontract ERC20TokenInterface {\r\n\r\n    function totalSupply () external constant returns (uint);\r\n    function balanceOf (address tokenOwner) external constant returns (uint balance);\r\n    function transfer (address to, uint tokens) external returns (bool success);\r\n    function transferFrom (address from, address to, uint tokens) external returns (bool success);\r\n\r\n}\r\n\r\n/**\r\n * Math operations with safety checks that throw on overflows.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul (uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div (uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    function sub (uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add (uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * bitcca tokens vesting contract. \r\n *\r\n * The bitcca  \"Vesting\" smart contract should be in place to ensure meeting the token sale commitments.\r\n *\r\n * Two instances of the contract will be deployed for holding tokens. \r\n */\r\ncontract bitccaTokenVesting {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Address of DreamToken.\r\n     */\r\n    ERC20TokenInterface public bitcca;\r\n\r\n    /**\r\n     * Address for receiving tokens.\r\n     */\r\n    address public withdrawAddress;\r\n\r\n    /**\r\n     * Tokens vesting stage structure with vesting date and tokens allowed to unlock.\r\n     */\r\n    struct VestingStage {\r\n        uint256 date;\r\n        uint256 tokensUnlockedPercentage;\r\n    }\r\n\r\n    /**\r\n     * Array for storing all vesting stages with structure defined above.\r\n     */\r\n    VestingStage[20] public stages;\r\n\r\n    /**\r\n     * Starting timestamp of the first stage of vesting (1 June 2022, 00:00:00 GMT).\r\n     * Will be used as a starting point for all dates calculations.\r\n     */\r\n    uint256 public vestingStartTimestamp = 1654041600;\r\n\r\n    /**\r\n     * Total amount of tokens sent.\r\n     */\r\n    uint256 public initialTokensBalance;\r\n\r\n    /**\r\n     * Amount of tokens already sent.\r\n     */\r\n    uint256 public tokensSent;\r\n\r\n    /**\r\n     * Event raised on each successful withdraw.\r\n     */\r\n    event Withdraw(uint256 amount, uint256 timestamp);\r\n\r\n    /**\r\n     * Could be called only from withdraw address.\r\n     */\r\n    modifier onlyWithdrawAddress () {\r\n        require(msg.sender == withdrawAddress);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * We are filling vesting stages array right when the contract is deployed.\r\n     *\r\n     * @param token Address of bitcca that will be locked on contract.\r\n     * @param withdraw Address of tokens receiver when it is unlocked.\r\n     */\r\n    constructor (ERC20TokenInterface token, address withdraw) public {\r\n        bitcca = token;\r\n        withdrawAddress = withdraw;\r\n        initVestingStages();\r\n    }\r\n    \r\n    /**\r\n     * Fallback \r\n     */\r\n    function () external {\r\n        withdrawTokens();\r\n    }\r\n\r\n    /**\r\n     * Calculate tokens amount that is sent to withdrawAddress.\r\n     * \r\n     * @return Amount of tokens that can be sent.\r\n     */\r\n    function getAvailableTokensToWithdraw () public view returns (uint256 tokensToSend) {\r\n        uint256 tokensUnlockedPercentage = getTokensUnlockedPercentage();\r\n        // In the case of stuck tokens we allow the withdrawal of them all after vesting period ends.\r\n        if (tokensUnlockedPercentage >= 100) {\r\n            tokensToSend = bitcca.balanceOf(this);\r\n        } else {\r\n            tokensToSend = getTokensAmountAllowedToWithdraw(tokensUnlockedPercentage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get detailed info about stage. \r\n     * Provides ability to get attributes of every stage from external callers, ie Web3, truffle tests, etc.\r\n     *\r\n     * @param index Vesting stage number. Ordered by ascending date and starting from zero.\r\n     *\r\n     * @return {\r\n     *    \"date\": \"Date of stage in unix timestamp format.\",\r\n     *    \"tokensUnlockedPercentage\": \"Percent of tokens allowed to be withdrawn.\"\r\n     * }\r\n     */\r\n    function getStageAttributes (uint8 index) public view returns (uint256 date, uint256 tokensUnlockedPercentage) {\r\n        return (stages[index].date, stages[index].tokensUnlockedPercentage);\r\n    }\r\n\r\n    /**\r\n     * Setup array with vesting stages dates and percents.\r\n     */\r\n    function initVestingStages () internal {\r\n        stages[0].date = vestingStartTimestamp; \r\n        stages[1].date = 1656633600; // 1 july 2022\r\n        stages[2].date = 1659312000; // 1 august 2022 \r\n        stages[3].date = 1661990400; // 1 september 2022\r\n        stages[4].date = 1664582400; // 1 october 2022 \r\n        stages[5].date = 1667260800; // 1 november 2022\r\n        stages[6].date = 1669852800; // 1 december 2022 \r\n        stages[7].date = 1672531200; // 1 january 2023\r\n        stages[8].date = 1675209600; // 1 february 2023\r\n        stages[9].date = 1677628800; // 1 march 2023\r\n        stages[10].date = 1680307200; // 1 april 2023 \r\n        stages[11].date = 1682899200; // 1 may 2023\r\n        stages[12].date = 1685577600; // 1 june 2023 \r\n        stages[13].date = 1688169600; // 1 july 2023\r\n        stages[14].date = 1690848000; // 1 august 2023\r\n        stages[15].date = 1693526400; // 1 september 2023\r\n        stages[16].date = 1696118400; // 1 october 2023\r\n        stages[17].date = 1698796800; // 1 November 2023\r\n        stages[18].date = 1701388800; // 1 December 2023\r\n        stages[19].date = 1704067200; // 1 January 2024\r\n\r\n\r\n        stages[0].tokensUnlockedPercentage = 5;\r\n        stages[1].tokensUnlockedPercentage = 10;\r\n        stages[2].tokensUnlockedPercentage = 15;\r\n        stages[3].tokensUnlockedPercentage = 20;\r\n        stages[4].tokensUnlockedPercentage = 25;\r\n        stages[5].tokensUnlockedPercentage = 30;\r\n        stages[6].tokensUnlockedPercentage = 35;\r\n        stages[7].tokensUnlockedPercentage = 40;\r\n        stages[8].tokensUnlockedPercentage = 45;\r\n        stages[9].tokensUnlockedPercentage = 50;\r\n        stages[10].tokensUnlockedPercentage = 55;\r\n        stages[11].tokensUnlockedPercentage = 60;\r\n        stages[12].tokensUnlockedPercentage = 65;\r\n        stages[13].tokensUnlockedPercentage = 70;\r\n        stages[14].tokensUnlockedPercentage = 75;\r\n        stages[15].tokensUnlockedPercentage = 80;\r\n        stages[16].tokensUnlockedPercentage = 85;\r\n        stages[17].tokensUnlockedPercentage = 90;\r\n        stages[18].tokensUnlockedPercentage = 95;\r\n        stages[19].tokensUnlockedPercentage = 100;\r\n\r\n    }\r\n\r\n    /**\r\n     * Main method for withdraw tokens from vesting.\r\n     */\r\n    function withdrawTokens () onlyWithdrawAddress private {\r\n        // Setting initial tokens balance on a first withdraw.\r\n        if (initialTokensBalance == 0) {\r\n            setInitialTokensBalance();\r\n        }\r\n        uint256 tokensToSend = getAvailableTokensToWithdraw();\r\n        sendTokens(tokensToSend);\r\n    }\r\n\r\n    /**\r\n     * Set initial tokens balance when making the first withdrawal.\r\n     */\r\n    function setInitialTokensBalance () private {\r\n        initialTokensBalance = bitcca.balanceOf(this);\r\n    }\r\n\r\n    /**\r\n     * Send tokens to withdrawAddress.\r\n     * \r\n     * @param tokensToSend Amount of tokens will be sent.\r\n     */\r\n    function sendTokens (uint256 tokensToSend) private {\r\n        if (tokensToSend > 0) {\r\n            // Updating tokens sent counter\r\n            tokensSent = tokensSent.add(tokensToSend);\r\n            // Sending allowed tokens amount\r\n            bitcca.transfer(withdrawAddress, tokensToSend);\r\n            // Raising event\r\n            emit Withdraw(tokensToSend, now);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate tokens available for withdrawal.\r\n     *\r\n     * @param tokensUnlockedPercentage Percent of tokens that are allowed to be sent.\r\n     *\r\n     * @return Amount of tokens that can be sent according to provided percentage.\r\n     */\r\n    function getTokensAmountAllowedToWithdraw (uint256 tokensUnlockedPercentage) private view returns (uint256) {\r\n        uint256 totalTokensAllowedToWithdraw = initialTokensBalance.mul(tokensUnlockedPercentage).div(100);\r\n        uint256 unsentTokensAmount = totalTokensAllowedToWithdraw.sub(tokensSent);\r\n        return unsentTokensAmount;\r\n    }\r\n\r\n    /**\r\n     * Get tokens unlocked percentage on current stage.\r\n     * \r\n     * @return Percent of tokens allowed to be sent.\r\n     */\r\n    function getTokensUnlockedPercentage () private view returns (uint256) {\r\n        uint256 allowedPercent;\r\n        \r\n        for (uint8 i = 0; i < stages.length; i++) {\r\n            if (now >= stages[i].date) {\r\n                allowedPercent = stages[i].tokensUnlockedPercentage;\r\n            }\r\n        }\r\n        \r\n        return allowedPercent;\r\n    }\r\n}\r\n\r\ncontract bitccaVesting is bitccaTokenVesting {\r\n    constructor(ERC20TokenInterface token, address withdraw) bitccaTokenVesting(token, withdraw) public {}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTokensToWithdraw\",\"outputs\":[{\"name\":\"tokensToSend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitcca\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokensBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"tokensUnlockedPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getStageAttributes\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"tokensUnlockedPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"withdraw\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]", "ContractName": "bitccaVesting", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e4d75e9b493458d032a5c3cc1ee9b0712c1ece060000000000000000000000004ba86664bd6307eb6f888ccb2aa37dbee2d08e8f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://19611f59ffded4a6711b815594bed918fb97b2de653b3e0fc1e5139881da1a44"}]}