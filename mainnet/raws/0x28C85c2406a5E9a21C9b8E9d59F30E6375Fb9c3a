{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/adapters/HarvestVaultAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.5 <0.8.0;\\r\\n\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\r\\n\\r\\nimport '../libraries/FixedPointMath.sol';\\r\\nimport '../libraries/TransferHelper.sol';\\r\\nimport '../interfaces/IDetailedERC20.sol';\\r\\nimport '../interfaces/IHarvestVaultAdapter.sol';\\r\\nimport '../interfaces/IHarvestVault.sol';\\r\\nimport '../interfaces/IHarvestFarm.sol';\\r\\n\\r\\n/// @title YearnVaultAdapter\\r\\n///\\r\\n/// @dev A vault adapter implementation which wraps a yEarn vault.\\r\\ncontract HarvestVaultAdapter is IHarvestVaultAdapter {\\r\\n\\tusing FixedPointMath for FixedPointMath.uq192x64;\\r\\n\\tusing TransferHelper for address;\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\t/// @dev The vault that the adapter is wrapping.\\r\\n\\tIHarvestVault public vault;\\r\\n\\r\\n\\tIHarvestFarm public farm;\\r\\n\\r\\n\\t/// @dev The address which has admin control over this contract.\\r\\n\\taddress public admin;\\r\\n\\r\\n\\t/// @dev The decimals of the token.\\r\\n\\tuint256 public decimals;\\r\\n\\r\\n\\taddress public treasury;\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\tIHarvestVault _vault,\\r\\n\\t\\tIHarvestFarm _farm,\\r\\n\\t\\taddress _admin,\\r\\n\\t\\taddress _treasury\\r\\n\\t) public {\\r\\n\\t\\tvault = _vault;\\r\\n\\t\\tfarm = _farm;\\r\\n\\t\\tadmin = _admin;\\r\\n\\t\\ttreasury = _treasury;\\r\\n\\t\\tupdateVaultApproval();\\r\\n\\t\\tupdateFarmApproval();\\r\\n\\t\\tdecimals = _vault.decimals();\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev A modifier which reverts if the caller is not the admin.\\r\\n\\tmodifier onlyAdmin() {\\r\\n\\t\\trequire(admin == msg.sender, 'HarvestVaultAdapter: only admin');\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Gets the token that the vault accepts.\\r\\n\\t///\\r\\n\\t/// @return the accepted token.\\r\\n\\tfunction token() external view override returns (address) {\\r\\n\\t\\treturn vault.underlying();\\r\\n\\t}\\r\\n\\r\\n\\tfunction lpToken() external view override returns (address) {\\r\\n\\t\\treturn address(vault);\\r\\n\\t}\\r\\n\\r\\n\\tfunction lpTokenInFarm() public view override returns (uint256) {\\r\\n\\t\\treturn farm.balanceOf(address(this));\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Gets the total value of the assets that the adapter holds in the vault.\\r\\n\\t///\\r\\n\\t/// @return the total assets.\\r\\n\\tfunction totalValue() external view override returns (uint256) {\\r\\n\\t\\treturn _sharesToTokens(lpTokenInFarm());\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Deposits tokens into the vault.\\r\\n\\t///\\r\\n\\t/// @param _amount the amount of tokens to deposit into the vault.\\r\\n\\tfunction deposit(uint256 _amount) external override {\\r\\n\\t\\tvault.deposit(_amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Withdraws tokens from the vault to the recipient.\\r\\n\\t///\\r\\n\\t/// This function reverts if the caller is not the admin.\\r\\n\\t///\\r\\n\\t/// @param _recipient the account to withdraw the tokes to.\\r\\n\\t/// @param _amount    the amount of tokens to withdraw.\\r\\n\\tfunction withdraw(address _recipient, uint256 _amount) external override onlyAdmin {\\r\\n\\t\\tvault.withdraw(_tokensToShares(_amount));\\r\\n\\t\\taddress _token = vault.underlying();\\r\\n\\t\\tuint256 _balance = IERC20(_token).balanceOf(address(this));\\r\\n\\t\\t_token.safeTransfer(_recipient, _balance);\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev stake into farming pool.\\r\\n\\tfunction stake(uint256 _amount) external override {\\r\\n\\t\\tfarm.stake(_amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev unstake from farming pool.\\r\\n\\tfunction unstake(uint256 _amount) external override onlyAdmin {\\r\\n\\t\\tfarm.withdraw(_tokensToShares(_amount));\\r\\n\\t}\\r\\n\\r\\n\\tfunction claim() external override {\\r\\n\\t\\tfarm.getReward();\\r\\n\\t\\taddress _rewardToken = farm.rewardToken();\\r\\n\\t\\tuint256 _balance = IERC20(_rewardToken).balanceOf(address(this));\\r\\n\\t\\tif (_balance > 0) {\\r\\n\\t\\t\\t_rewardToken.safeTransfer(treasury, _balance);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Updates the vaults approval of the token to be the maximum value.\\r\\n\\tfunction updateVaultApproval() public {\\r\\n\\t\\taddress _token = vault.underlying();\\r\\n\\t\\t_token.safeApprove(address(vault), uint256(-1));\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Update the farm approval.\\r\\n\\tfunction updateFarmApproval() public {\\r\\n\\t\\taddress(vault).safeApprove(address(farm), uint256(-1));\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Computes the number of tokens an amount of shares is worth.\\r\\n\\t///\\r\\n\\t/// @param _sharesAmount the amount of shares.\\r\\n\\t///\\r\\n\\t/// @return the number of tokens the shares are worth.\\r\\n\\r\\n\\tfunction _sharesToTokens(uint256 _sharesAmount) internal view returns (uint256) {\\r\\n\\t\\treturn _sharesAmount.mul(vault.getPricePerFullShare()).div(10**decimals);\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Computes the number of shares an amount of tokens is worth.\\r\\n\\t///\\r\\n\\t/// @param _tokensAmount the amount of shares.\\r\\n\\t///\\r\\n\\t/// @return the number of shares the tokens are worth.\\r\\n\\tfunction _tokensToShares(uint256 _tokensAmount) internal view returns (uint256) {\\r\\n\\t\\treturn _tokensAmount.mul(10**decimals).div(vault.getPricePerFullShare());\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FixedPointMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.5 <0.8.0;\\r\\n\\r\\n\\r\\nlibrary FixedPointMath {\\r\\n  uint256 public constant DECIMALS = 18;\\r\\n  uint256 public constant SCALAR = 10**DECIMALS;\\r\\n\\r\\n  struct uq192x64 {\\r\\n    uint256 x;\\r\\n  }\\r\\n\\r\\n  function fromU256(uint256 value) internal pure returns (uq192x64 memory) {\\r\\n    uint256 x;\\r\\n    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\\r\\n    return uq192x64(x);\\r\\n  }\\r\\n\\r\\n  function maximumValue() internal pure returns (uq192x64 memory) {\\r\\n    return uq192x64(uint256(-1));\\r\\n  }\\r\\n\\r\\n  function add(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\\r\\n    uint256 x;\\r\\n    require((x = self.x + value.x) >= self.x);\\r\\n    return uq192x64(x);\\r\\n  }\\r\\n\\r\\n  function add(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\r\\n    return add(self, fromU256(value));\\r\\n  }\\r\\n\\r\\n  function sub(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\\r\\n    uint256 x;\\r\\n    require((x = self.x - value.x) <= self.x);\\r\\n    return uq192x64(x);\\r\\n  }\\r\\n\\r\\n  function sub(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\r\\n    return sub(self, fromU256(value));\\r\\n  }\\r\\n\\r\\n  function mul(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\r\\n    uint256 x;\\r\\n    require(value == 0 || (x = self.x * value) / value == self.x);\\r\\n    return uq192x64(x);\\r\\n  }\\r\\n\\r\\n  function div(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\r\\n    require(value != 0);\\r\\n    return uq192x64(self.x / value);\\r\\n  }\\r\\n\\r\\n  function cmp(uq192x64 memory self, uq192x64 memory value) internal pure returns (int256) {\\r\\n    if (self.x < value.x) {\\r\\n      return -1;\\r\\n    }\\r\\n\\r\\n    if (self.x > value.x) {\\r\\n      return 1;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  function decode(uq192x64 memory self) internal pure returns (uint256) {\\r\\n    return self.x / SCALAR;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.5 <0.8.0;\\n\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDetailedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.5 <0.8.0;\\r\\n\\r\\ninterface IDetailedERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IHarvestVaultAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.5 <0.8.0;\\n\\ninterface IHarvestVaultAdapter {\\n\\tfunction totalValue() external view returns (uint256);\\n\\n\\tfunction deposit(uint256) external;\\n\\n\\tfunction withdraw(address, uint256) external;\\n\\n\\tfunction token() external view returns (address);\\n\\n\\tfunction lpToken() external view returns (address);\\n\\n\\tfunction lpTokenInFarm() external view returns (uint256);\\n\\n\\tfunction stake(uint256) external;\\n\\n\\tfunction unstake(uint256) external;\\n\\n\\tfunction claim() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHarvestVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.5 <0.8.0;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IHarvestVault is IERC20 {\\n\\tfunction underlying() external view returns (address);\\n\\n\\tfunction totalValue() external view returns (uint256);\\n\\n\\tfunction deposit(uint256) external;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction getPricePerFullShare() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHarvestFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.5 <0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IHarvestFarm {\\n\\tfunction rewardToken() external view returns (address);\\n\\n\\tfunction lpToken() external view returns (address);\\n\\n\\tfunction getReward() external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction rewards(address) external returns (uint256);\\n\\n\\tfunction balanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IHarvestVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IHarvestFarm\",\"name\":\"_farm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"contract IHarvestFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenInFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFarmApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVaultApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IHarvestVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HarvestVaultAdapter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab7fa2b2985bccfc13c6d86b1d5a17486ab1e04c00000000000000000000000015d3a64b2d5ab9e152f16593cdebc4bb165b5b4a0000000000000000000000000f768ce5053753b29047732ca7eeb0c8bfc786720000000000000000000000003400985be0b41ce9778823e9618074115f830799", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}