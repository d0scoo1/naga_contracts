{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/JAXUDETHBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IERC20 {\\n  function mint(address, uint) external;\\n  function burn(uint) external;\\n  function transfer(address, uint) external;\\n  function transferFrom(address, address, uint) external;\\n}\\n\\ncontract JaxudEthBridge {\\n\\n  uint chainId;\\n  \\n  address public admin;\\n\\n  uint public penalty_amount = 0;\\n\\n  address public penalty_wallet;  \\n  \\n  uint public max_pending_audit_records = 10;\\n  uint public pending_audit_records;\\n\\n  IERC20 public jaxud = IERC20(0x935b0bF173552cd55E53AD651a783430a5700cD4);\\n\\n  mapping(uint => uint) public fee_percent; // 8 decimals\\n  mapping(uint => uint) public minimum_fee_amount; \\n\\n  bool public use_no_gas;\\n\\n  enum RequestStatus {Init, Proved, Verified, Released, Completed, Rejected}\\n\\n  struct Request {\\n    uint src_chain_id;\\n    uint dest_chain_id;\\n    uint amount;\\n    uint fee_amount;\\n    address to;\\n    uint deposit_timestamp;\\n    bytes32 src_chain_data_hash;\\n    bytes32 data_hash;\\n    RequestStatus status;\\n    string deposit_tx_hash;\\n    string deposit_tx_link;\\n    string release_tx_link;\\n  }\\n\\n  Request[] public requests;\\n\\n  address[] public auditors;\\n  address[] public verifiers;\\n  address[] public bridge_executors;\\n  mapping(address => uint) public operating_limits;\\n  mapping(address => address) public fee_wallets;\\n\\n  mapping(bytes32 => bool) public proccessed_txd_hashes;\\n\\n  mapping(bytes32 => Request) public foreign_requests;\\n\\n  event Deposit(uint indexed request_id, bytes32 indexed data_hash, address indexed to, uint amount, uint fee_amount, uint64 src_chain_id, uint64 dest_chain_id, uint128 deposit_timestamp);\\n  event Release(bytes32 indexed src_chain_data_hash);\\n  event Verify_Data_Hash(bytes32 src_chain_data_hash);\\n  event Reject_Bridge_Transaction(bytes32 src_chain_data_hash);\\n  event Complete_Release_Tx_Link(uint request_id, string deposit_tx_hash, string release_tx_hash, bytes32 info_hash);\\n  event Update_Release_Tx_Link(uint request_id, string deposit_tx_hash, string release_tx_hash);\\n  event Reject_Request(uint request_id);\\n  event Set_Fee(uint fee_percent, uint minimum_fee_amount);\\n  event Add_Penalty_Amount(uint amount, bytes32 info_hash);\\n  event Subtract_Penalty_Amount(uint amount, bytes32 info_hash);\\n  event Withdraw_By_Admin(address token, uint amount);\\n\\n  constructor() {\\n    admin = msg.sender;\\n    uint _chainId;\\n    assembly {\\n        _chainId := chainid()\\n    }\\n    chainId = _chainId;\\n    penalty_wallet = msg.sender;\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(admin == msg.sender, \\\"Only Admin can perform this operation.\\\");\\n    _;\\n  }\\n\\n  modifier onlyAuditor() {\\n    require(isAuditor(msg.sender), \\\"Only Auditor can perform this operation.\\\");\\n    _;\\n  }\\n\\n  modifier onlyVerifier() {\\n    require(isVerifier(msg.sender), \\\"Only Verifier can perform this operation.\\\");\\n    _;\\n  }\\n\\n  modifier onlyExecutor() {\\n    require(isBridgeExecutor(msg.sender), \\\"Not a bridge executor\\\");\\n    _;\\n  }\\n\\n  modifier noGas() {\\n    uint gas = gasleft();\\n    _;\\n    if(use_no_gas){\\n      payable(msg.sender).transfer(tx.gasprice * (gas - gasleft()));\\n    }\\n  }\\n\\n  function deposit(uint dest_chain_id, uint amount) external {\\n    require(amount >= minimum_fee_amount[dest_chain_id], \\\"Minimum amount\\\");\\n    require(chainId != dest_chain_id, \\\"Invalid Destnation network\\\");\\n    uint request_id = requests.length;\\n    uint fee_amount = amount * fee_percent[dest_chain_id] / 1e8;\\n    if(fee_amount < minimum_fee_amount[dest_chain_id]) fee_amount = minimum_fee_amount[dest_chain_id];\\n    bytes32 src_chain_data_hash = _get_data_hash(request_id, msg.sender, chainId, dest_chain_id, amount, fee_amount, block.timestamp);\\n    Request memory request = Request({\\n      src_chain_id: chainId,\\n      dest_chain_id: dest_chain_id,\\n      amount: amount,\\n      fee_amount: fee_amount,\\n      to: msg.sender,\\n      deposit_timestamp: block.timestamp,\\n      src_chain_data_hash: src_chain_data_hash,\\n      data_hash: 0,\\n      status: RequestStatus.Init,\\n      deposit_tx_hash: \\\"\\\",\\n      deposit_tx_link: \\\"\\\",\\n      release_tx_link: \\\"\\\"\\n    });\\n    requests.push(request);\\n    jaxud.transferFrom(msg.sender, address(this), amount);\\n    jaxud.burn(amount);\\n    emit Deposit(request_id, src_chain_data_hash, msg.sender, amount, fee_amount, uint64(chainId), uint64(dest_chain_id), uint128(block.timestamp));\\n  }\\n\\n\\n  function verify_data_hash(\\n    uint request_id,\\n    address to,\\n    uint src_chain_id,\\n    uint dest_chain_id,\\n    uint amount,\\n    uint fee_amount,\\n    uint timestamp,\\n    bytes32 src_chain_data_hash,\\n    string memory deposit_tx_hash\\n  ) external noGas onlyVerifier {\\n    require( dest_chain_id == chainId, \\\"Incorrect destination network\\\" );\\n    require( src_chain_data_hash == _get_data_hash(request_id, to, src_chain_id, chainId, amount, fee_amount, timestamp), \\\"Incorrect data hash\\\");\\n    bytes32 txDHash = keccak256(abi.encodePacked(deposit_tx_hash));\\n    require( !proccessed_txd_hashes[txDHash], \\\"Invalid deposit tx hash\\\");\\n    bytes32 data_hash = keccak256(abi.encodePacked(src_chain_data_hash, deposit_tx_hash));\\n    Request memory request = Request({\\n      src_chain_id: src_chain_id,\\n      dest_chain_id: dest_chain_id,\\n      amount: amount,\\n      fee_amount: fee_amount,\\n      to: to,\\n      deposit_timestamp: timestamp,\\n      src_chain_data_hash: src_chain_data_hash,\\n      data_hash: data_hash,\\n      status: RequestStatus.Verified,\\n      deposit_tx_hash: deposit_tx_hash,\\n      deposit_tx_link: \\\"\\\",\\n      release_tx_link: \\\"\\\"\\n    });\\n    foreign_requests[src_chain_data_hash] = request;\\n    emit Verify_Data_Hash(src_chain_data_hash);\\n  }\\n\\n  function reject_bridge_transaction(\\n    uint request_id,\\n    address to,\\n    uint src_chain_id,\\n    uint dest_chain_id,\\n    uint amount,\\n    uint fee_amount,\\n    uint timestamp,\\n    string memory deposit_tx_hash\\n  ) external noGas onlyVerifier {\\n    bytes32 src_chain_data_hash = _get_data_hash(request_id, to, src_chain_id, dest_chain_id, amount, fee_amount, timestamp);\\n    bytes32 data_hash = keccak256(abi.encodePacked(src_chain_data_hash, deposit_tx_hash));\\n    Request storage request = foreign_requests[src_chain_data_hash];\\n    require( request.status == RequestStatus.Verified, \\\"Invalid status\\\" );\\n    require( data_hash == request.data_hash, \\\"Datahash mismatch\\\" );\\n    request.status = RequestStatus.Rejected;\\n    emit Reject_Bridge_Transaction(src_chain_data_hash);\\n  }\\n\\n  function release(\\n    uint request_id,\\n    address to,\\n    uint src_chain_id,\\n    uint dest_chain_id,\\n    uint amount,\\n    uint fee_amount,\\n    uint timestamp,\\n    string memory deposit_tx_hash\\n  ) external noGas onlyExecutor {\\n    require( dest_chain_id == chainId, \\\"Incorrect destination network\\\" );\\n    bytes32 src_chain_data_hash = _get_data_hash(request_id, to, src_chain_id, chainId, amount, fee_amount, timestamp);\\n    Request storage request = foreign_requests[src_chain_data_hash];\\n    require( request.status == RequestStatus.Verified, \\\"Invalid status\\\" );\\n    require( keccak256(abi.encodePacked(src_chain_data_hash, deposit_tx_hash)) == request.data_hash, \\\"Datahash mismatch\\\" );\\n    require(operating_limits[msg.sender] >= amount, \\\"Out of operating limit\\\");\\n    require(max_pending_audit_records > pending_audit_records, \\\"Exceed maximum pending audit records\\\");\\n    pending_audit_records += 1;\\n    operating_limits[msg.sender] -= amount;\\n    jaxud.mint(address(this), amount);\\n    jaxud.transfer(to, amount - fee_amount);\\n    if(penalty_amount > 0) {\\n      if(penalty_amount > fee_amount) {\\n        jaxud.transfer(penalty_wallet, fee_amount);\\n        penalty_amount -= fee_amount;\\n      }\\n      else {\\n        jaxud.transfer(penalty_wallet, penalty_amount);\\n        jaxud.transfer(fee_wallets[msg.sender], fee_amount - penalty_amount);\\n        penalty_amount -= penalty_amount;\\n      }\\n    }\\n    else {\\n      jaxud.transfer(fee_wallets[msg.sender], fee_amount);\\n    }\\n    proccessed_txd_hashes[keccak256(abi.encodePacked(deposit_tx_hash))] = true;\\n    request.status = RequestStatus.Released;\\n    emit Release(src_chain_data_hash);\\n  }\\n\\n  function complete_release_tx_link(\\n    uint request_id,\\n    address to,\\n    uint src_chain_id,\\n    uint dest_chain_id,\\n    uint amount,\\n    uint fee_amount,\\n    uint timestamp,\\n    string memory deposit_tx_hash,\\n    string memory deposit_tx_link, \\n    string memory release_tx_link,\\n    bytes32 info_hash\\n  ) external noGas onlyAuditor {\\n    bytes32 src_chain_data_hash = _get_data_hash(request_id, to, src_chain_id, dest_chain_id, amount, fee_amount, timestamp);\\n    bytes32 data_hash = keccak256(abi.encodePacked(src_chain_data_hash, deposit_tx_hash));\\n    Request storage request = foreign_requests[src_chain_data_hash];\\n    require( request.status == RequestStatus.Released, \\\"Invalid status\\\" );\\n    require( data_hash == request.data_hash, \\\"Datahash mismatch\\\" );\\n    \\n    request.deposit_tx_link = deposit_tx_link;\\n    request.release_tx_link = release_tx_link;\\n    pending_audit_records -= 1;\\n    request.status = RequestStatus.Completed;\\n    emit Complete_Release_Tx_Link(request_id, deposit_tx_link, release_tx_link, info_hash);\\n  }\\n\\n  function update_release_tx_link(uint request_id, string memory deposit_tx_link, string memory release_tx_link) external onlyAdmin {\\n    Request storage request = requests[request_id];\\n    request.deposit_tx_link = deposit_tx_link;\\n    request.release_tx_link = release_tx_link;\\n    emit Update_Release_Tx_Link(request_id, deposit_tx_link, release_tx_link);\\n  }\\n\\n  function _get_data_hash(\\n    uint request_id, \\n    address to,\\n    uint src_chain_id,\\n    uint dest_chain_id,\\n    uint amount,\\n    uint fee_amount,\\n    uint timestamp\\n  ) pure public returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\n      request_id,\\n      to,\\n      src_chain_id,\\n      dest_chain_id,\\n      amount,\\n      fee_amount,\\n      timestamp\\n    ));\\n  }\\n\\n  function add_auditor(address auditor) external onlyAdmin {\\n    for(uint i = 0; i < auditors.length; i += 1) {\\n      if(auditors[i] == auditor)\\n        revert(\\\"Already exists\\\");\\n    }\\n    auditors.push(auditor);\\n  }\\n\\n  function delete_auditor(address auditor) external onlyAdmin {\\n    uint i = 0;\\n    for(; i < auditors.length; i += 1) {\\n      if(auditors[i] == auditor)\\n        break;\\n    }\\n    require(i < auditors.length, \\\"Not an auditor\\\");\\n    auditors[i] = auditors[auditors.length - 1];\\n    auditors.pop();\\n  }\\n\\n  function isAuditor(address auditor) public view returns(bool) {\\n    uint i = 0;\\n    for(; i < auditors.length; i += 1) {\\n      if(auditors[i] == auditor)\\n        return true;\\n    } \\n    return false;\\n  }\\n\\n\\n  function add_verifier(address verifier) external onlyAdmin {\\n    for(uint i = 0; i < verifiers.length; i += 1) {\\n      if(verifiers[i] == verifier)\\n        revert(\\\"Already exists\\\");\\n    }\\n    verifiers.push(verifier);\\n  }\\n\\n  function delete_verifier(address verifier) external onlyAdmin {\\n    uint i = 0;\\n    for(; i < verifiers.length; i += 1) {\\n      if(verifiers[i] == verifier)\\n        break;\\n    }\\n    require(i < verifiers.length, \\\"Not an verifier\\\");\\n    verifiers[i] = verifiers[verifiers.length - 1];\\n    verifiers.pop();\\n  }\\n\\n  function isVerifier(address verifier) public view returns(bool) {\\n    uint i = 0;\\n    for(; i < verifiers.length; i += 1) {\\n      if(verifiers[i] == verifier)\\n        return true;\\n    } \\n    return false;\\n  }\\n\\n  function add_bridge_executor(address executor, uint operating_limit, address fee_wallet) external onlyAdmin {\\n    for(uint i = 0; i < bridge_executors.length; i += 1) {\\n      if(bridge_executors[i] == executor)\\n        revert(\\\"Already exists\\\");\\n    }\\n    bridge_executors.push(executor);\\n    operating_limits[executor] = operating_limit;\\n    fee_wallets[executor] = fee_wallet;\\n  }\\n\\n  function isBridgeExecutor(address executor) public view returns(bool) {\\n    uint i = 0;\\n    for(; i < bridge_executors.length; i += 1) {\\n      if(bridge_executors[i] == executor)\\n        return true;\\n    } \\n    return false;\\n  }\\n\\n  function set_operating_limit(address executor, uint operating_limit) external onlyAdmin {\\n    require(isBridgeExecutor(executor), \\\"Not a bridge executor\\\");\\n    operating_limits[executor] = operating_limit;\\n  }\\n\\n  function set_fee(uint dest_chain_id, uint _fee_percent, uint _minimum_fee_amount) external onlyAdmin {\\n    fee_percent[dest_chain_id] = _fee_percent;\\n    minimum_fee_amount[dest_chain_id] = _minimum_fee_amount;\\n    emit Set_Fee(_fee_percent, _minimum_fee_amount);\\n  }\\n\\n  function set_penalty_wallet(address _penalty_wallet) external onlyAdmin {\\n    penalty_wallet = _penalty_wallet;\\n  }\\n\\n  function set_admin(address _admin) external onlyAdmin {\\n    admin = _admin;\\n  }\\n\\n  function add_penalty_amount(uint amount, bytes32 info_hash) external noGas onlyAuditor {\\n    penalty_amount += amount;\\n    emit Add_Penalty_Amount(amount, info_hash);\\n  }\\n\\n  function subtract_penalty_amount(uint amount, bytes32 info_hash) external noGas onlyAuditor {\\n    require(penalty_amount >= amount, \\\"over penalty amount\\\");\\n    penalty_amount -= amount;\\n    emit Subtract_Penalty_Amount(amount, info_hash);\\n  }\\n\\n  function set_use_no_gas(bool flag) external onlyAdmin {\\n    use_no_gas = flag;\\n  }\\n  \\n  function withdrawByAdmin(address token, uint amount) external onlyAdmin {\\n      IERC20(token).transfer(msg.sender, amount);\\n      emit Withdraw_By_Admin(token, amount);\\n  }\\n\\n\\n  fallback() external payable {\\n\\n  }\\n\\n  receive() external payable {\\n\\n  }\\n\\n  function withdraw_ETH(uint amount) external onlyAdmin {\\n    payable(msg.sender).transfer(amount);\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"info_hash\",\"type\":\"bytes32\"}],\"name\":\"Add_Penalty_Amount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"deposit_tx_hash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"release_tx_hash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"info_hash\",\"type\":\"bytes32\"}],\"name\":\"Complete_Release_Tx_Link\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"data_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"src_chain_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dest_chain_id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"deposit_timestamp\",\"type\":\"uint128\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"src_chain_data_hash\",\"type\":\"bytes32\"}],\"name\":\"Reject_Bridge_Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"}],\"name\":\"Reject_Request\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"src_chain_data_hash\",\"type\":\"bytes32\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee_percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimum_fee_amount\",\"type\":\"uint256\"}],\"name\":\"Set_Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"info_hash\",\"type\":\"bytes32\"}],\"name\":\"Subtract_Penalty_Amount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"deposit_tx_hash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"release_tx_hash\",\"type\":\"string\"}],\"name\":\"Update_Release_Tx_Link\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"src_chain_data_hash\",\"type\":\"bytes32\"}],\"name\":\"Verify_Data_Hash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw_By_Admin\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"src_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"_get_data_hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"add_auditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"operating_limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fee_wallet\",\"type\":\"address\"}],\"name\":\"add_bridge_executor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"info_hash\",\"type\":\"bytes32\"}],\"name\":\"add_penalty_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"add_verifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auditors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridge_executors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"src_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"release_tx_link\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"info_hash\",\"type\":\"bytes32\"}],\"name\":\"complete_release_tx_link\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"delete_auditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"delete_verifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fee_percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fee_wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"foreign_requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"src_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"src_chain_data_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"data_hash\",\"type\":\"bytes32\"},{\"internalType\":\"enum JaxudEthBridge.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"release_tx_link\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"isAuditor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"isBridgeExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"isVerifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jaxud\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_pending_audit_records\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minimum_fee_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operating_limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penalty_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penalty_wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending_audit_records\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proccessed_txd_hashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"src_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_hash\",\"type\":\"string\"}],\"name\":\"reject_bridge_transaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"src_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_hash\",\"type\":\"string\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"src_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"src_chain_data_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"data_hash\",\"type\":\"bytes32\"},{\"internalType\":\"enum JaxudEthBridge.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"release_tx_link\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"set_admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimum_fee_amount\",\"type\":\"uint256\"}],\"name\":\"set_fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"operating_limit\",\"type\":\"uint256\"}],\"name\":\"set_operating_limit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_penalty_wallet\",\"type\":\"address\"}],\"name\":\"set_penalty_wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"set_use_no_gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"info_hash\",\"type\":\"bytes32\"}],\"name\":\"subtract_penalty_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_link\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"release_tx_link\",\"type\":\"string\"}],\"name\":\"update_release_tx_link\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"use_no_gas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"src_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dest_chain_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"src_chain_data_hash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"deposit_tx_hash\",\"type\":\"string\"}],\"name\":\"verify_data_hash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_ETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JaxudEthBridge", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}