{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"sources\": {\r\n    \"ILenderVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ILenderVerifier {\\n    function isAllowed(\\n        address lender,\\n        uint256 amount,\\n        bytes memory signature\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IManageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IManageable {\\n    function manager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"Manageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IManageable} from \\\"IManageable.sol\\\";\\n\\ncontract Manageable is IManageable {\\n    address public manager;\\n    address public pendingManager;\\n\\n    event ManagementTransferred(address indexed oldManager, address indexed newManager);\\n\\n    modifier onlyManager() {\\n        require(manager == msg.sender, \\\"Manageable: Caller is not the manager\\\");\\n        _;\\n    }\\n\\n    constructor(address _manager) {\\n        _setManager(_manager);\\n    }\\n\\n    function transferManagement(address newManager) external onlyManager {\\n        pendingManager = newManager;\\n    }\\n\\n    function claimManagement() external {\\n        require(pendingManager == msg.sender, \\\"Manageable: Caller is not the pending manager\\\");\\n        _setManager(pendingManager);\\n        pendingManager = address(0);\\n    }\\n\\n    function _setManager(address newManager) internal {\\n        address oldManager = manager;\\n        manager = newManager;\\n        emit ManagementTransferred(oldManager, newManager);\\n    }\\n}\\n\"\r\n    },\r\n    \"GlobalWhitelistLenderVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {ILenderVerifier} from \\\"ILenderVerifier.sol\\\";\\nimport {Manageable} from \\\"Manageable.sol\\\";\\n\\ncontract GlobalWhitelistLenderVerifier is Manageable, ILenderVerifier {\\n    mapping(address => bool) public isWhitelisted;\\n\\n    constructor() Manageable(msg.sender) {}\\n\\n    event WhitelistStatusChanged(address user, bool status);\\n\\n    function isAllowed(\\n        address user,\\n        uint256,\\n        bytes memory\\n    ) external view returns (bool) {\\n        return isWhitelisted[user];\\n    }\\n\\n    function setWhitelistStatus(address user, bool status) public onlyManager {\\n        isWhitelisted[user] = status;\\n        emit WhitelistStatusChanged(user, status);\\n    }\\n\\n    function setWhitelistStatusForMany(address[] calldata addressesToWhitelist, bool status) external onlyManager {\\n        for (uint256 i = 0; i < addressesToWhitelist.length; i++) {\\n            setWhitelistStatus(addressesToWhitelist[i], status);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistStatusChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesToWhitelist\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhitelistStatusForMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GlobalWhitelistLenderVerifier", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}