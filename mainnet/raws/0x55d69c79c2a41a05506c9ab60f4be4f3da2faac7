{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: Vesting.sol\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract VestingHarvestContarct is Ownable {\r\n    /*\r\n     * Vesting Information\r\n     */\r\n    struct VestingItems {\r\n        address tokenAddress;\r\n        address withdrawalAddress;\r\n        uint256 tokenAmount;\r\n        uint256 unlockTime;\r\n        bool withdrawn;\r\n    }\r\n\r\n    uint256 public vestingSize;\r\n    uint256[] public allVestingIdentifiers;\r\n    mapping(address => uint256[]) public vestingsByWithdrawalAddress;\r\n    mapping(uint256 => VestingItems) public vestedToken;\r\n    mapping(address => mapping(address => uint256))\r\n        public walletVestedTokenBalance;\r\n\r\n    event VestingExecution(address SentToAddress, uint256 AmountTransferred);\r\n    event WithdrawalExecution(address SentToAddress, uint256 AmountTransferred);\r\n\r\n    /**\r\n     * Init vestings\r\n     */\r\n    function initVestings(\r\n        address _tokenAddress,\r\n        address _withdrawalAddress,\r\n        uint256[] memory _amounts,\r\n        uint256[] memory _unlockTimes\r\n    ) public {\r\n        require(_amounts.length > 0);\r\n        require(_amounts.length == _unlockTimes.length);\r\n\r\n        for (uint256 i = 0; i < _amounts.length; i++) {\r\n            require(_amounts[i] > 0);\r\n            require(_unlockTimes[i] < 10000000000);\r\n\r\n            // Update balance in address\r\n            walletVestedTokenBalance[_tokenAddress][_withdrawalAddress] =\r\n                walletVestedTokenBalance[_tokenAddress][_withdrawalAddress] +\r\n                _amounts[i];\r\n\r\n            vestingSize = vestingSize + 1;\r\n            vestedToken[vestingSize].tokenAddress = _tokenAddress;\r\n            vestedToken[vestingSize].withdrawalAddress = _withdrawalAddress;\r\n            vestedToken[vestingSize].tokenAmount = _amounts[i];\r\n            vestedToken[vestingSize].unlockTime = _unlockTimes[i];\r\n            vestedToken[vestingSize].withdrawn = false;\r\n\r\n            allVestingIdentifiers.push(vestingSize);\r\n            vestingsByWithdrawalAddress[_withdrawalAddress].push(vestingSize);\r\n            \r\n            // Transfer tokens into contract\r\n            require(\r\n                IERC20(_tokenAddress).transferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    _amounts[i]\r\n                )\r\n            );\r\n\r\n            emit VestingExecution(_withdrawalAddress, _amounts[i]);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    /**\r\n     * Withdraw vested tokens\r\n     */\r\n    function withdrawVestedTokens(uint256 _id) public {\r\n        require(block.timestamp >= vestedToken[_id].unlockTime);\r\n        require(msg.sender == vestedToken[_id].withdrawalAddress);\r\n        require(!vestedToken[_id].withdrawn);\r\n\r\n        vestedToken[_id].withdrawn = true;\r\n\r\n        walletVestedTokenBalance[vestedToken[_id].tokenAddress][msg.sender] =\r\n            walletVestedTokenBalance[vestedToken[_id].tokenAddress][\r\n                msg.sender\r\n            ] -\r\n            vestedToken[_id].tokenAmount;\r\n\r\n        uint256 arrLength = vestingsByWithdrawalAddress[vestedToken[_id].withdrawalAddress].length;\r\n        for (uint256 j = 0; j < arrLength; j++) {\r\n            if (\r\n                vestingsByWithdrawalAddress[vestedToken[_id].withdrawalAddress][j] == _id\r\n            ) {\r\n                vestingsByWithdrawalAddress[vestedToken[_id].withdrawalAddress][j] = vestingsByWithdrawalAddress[\r\n                    vestedToken[_id].withdrawalAddress][arrLength - 1];\r\n                vestingsByWithdrawalAddress[vestedToken[_id].withdrawalAddress].pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(\r\n            IERC20(vestedToken[_id].tokenAddress).transfer(\r\n                msg.sender,\r\n                vestedToken[_id].tokenAmount\r\n            )\r\n        );\r\n        emit WithdrawalExecution(msg.sender, vestedToken[_id].tokenAmount);\r\n    }\r\n\r\n    /* Get total token balance in contract*/\r\n    function getTotalVestedTokenBalance(address _tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return IERC20(_tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    /* Get total token balance by address */\r\n    function getVestedTokenBalanceByAddress(\r\n        address _tokenAddress,\r\n        address _walletAddress\r\n    ) public view returns (uint256) {\r\n        return walletVestedTokenBalance[_tokenAddress][_walletAddress];\r\n    }\r\n\r\n    /* Get allVestingIdentifiers */\r\n    function getAllVestingIdentifiers() public view returns (uint256[] memory) {\r\n        return allVestingIdentifiers;\r\n    }\r\n\r\n    /* Get getVestingDetails */\r\n    function getVestingDetails(uint256 _id)\r\n        public\r\n        view\r\n        returns (\r\n            address _tokenAddress,\r\n            address _withdrawalAddress,\r\n            uint256 _tokenAmount,\r\n            uint256 _unlockTime,\r\n            bool _withdrawn\r\n        )\r\n    {\r\n        return (\r\n            vestedToken[_id].tokenAddress,\r\n            vestedToken[_id].withdrawalAddress,\r\n            vestedToken[_id].tokenAmount,\r\n            vestedToken[_id].unlockTime,\r\n            vestedToken[_id].withdrawn\r\n        );\r\n    }\r\n\r\n    /* Get VestingsByWithdrawalAddress */\r\n    function getVestingsByWithdrawalAddress(address _withdrawalAddress)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return vestingsByWithdrawalAddress[_withdrawalAddress];\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"VestingExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"WithdrawalExecution\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVestingIdentifiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVestingIdentifiers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalVestedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getVestedTokenBalanceByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVestingDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"}],\"name\":\"getVestingsByWithdrawalAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockTimes\",\"type\":\"uint256[]\"}],\"name\":\"initVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingsByWithdrawalAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletVestedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VestingHarvestContarct", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a2f9372444702218fc6e26c58045a7b786e56996f0cd49439fcf3a0cfdad5760"}]}