{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ApeRunnersRUN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./base/Controllable.sol\\\";\\nimport \\\"sol-temple/src/tokens/ERC721.sol\\\";\\nimport \\\"sol-temple/src/tokens/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n/// @title Ape Runners RUN\\n/// @author naomsa <https://twitter.com/naomsa666>\\ncontract ApeRunnersRUN is\\n  Ownable,\\n  Pausable,\\n  Controllable,\\n  ERC20(\\\"Ape Runners\\\", \\\"RUN\\\", 18, \\\"1\\\")\\n{\\n  /* -------------------------------------------------------------------------- */\\n  /*                               Airdrop Details                              */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Ape Runners contract.\\n  ERC721 public immutable apeRunners;\\n\\n  /// @notice Ape Runner id => claimed airdrop.\\n  mapping(uint256 => bool) public airdroped;\\n\\n  constructor(address newApeRunners) {\\n    apeRunners = ERC721(newApeRunners);\\n  }\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                Airdrop Logic                               */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Claim pending airdrop for each Ape Runner.\\n  /// @param ids Ape Runner token ids to claim airdrop.\\n  function claim(uint256[] memory ids) external {\\n    uint256 pending;\\n\\n    for (uint256 i; i < ids.length; i++) {\\n      require(apeRunners.ownerOf(ids[i]) == msg.sender, \\\"Not the token owner\\\");\\n      require(!airdroped[ids[i]], \\\"Airdrop already claimed\\\");\\n      airdroped[ids[i]] = true;\\n      pending += 150 ether;\\n    }\\n\\n    super._mint(msg.sender, pending);\\n  }\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                 Owner Logic                                */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Add or edit contract controllers.\\n  /// @param addrs Array of addresses to be added/edited.\\n  /// @param state New controller state of addresses.\\n  function setControllers(address[] calldata addrs, bool state)\\n    external\\n    onlyOwner\\n  {\\n    for (uint256 i; i < addrs.length; i++)\\n      super._setController(addrs[i], state);\\n  }\\n\\n  /// @notice Switch the contract paused state between paused and unpaused.\\n  function togglePaused() external onlyOwner {\\n    if (paused()) _unpause();\\n    else _pause();\\n  }\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                ERC-20 Logic                                */\\n  /* -------------------------------------------------------------------------- */\\n\\n  /// @notice Mint tokens.\\n  /// @param to Address to get tokens minted to.\\n  /// @param value Number of tokens to be minted.\\n  function mint(address to, uint256 value) external onlyController {\\n    super._mint(to, value);\\n  }\\n\\n  /// @notice Burn tokens.\\n  /// @param from Address to get tokens burned from.\\n  /// @param value Number of tokens to be burned.\\n  function burn(address from, uint256 value) external onlyController {\\n    super._burn(from, value);\\n  }\\n\\n  /// @notice See {ERC20-_beforeTokenTransfer}.\\n  /// @dev Overriden to block transactions while the contract is paused (avoiding bugs).\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override whenNotPaused {\\n    super._beforeTokenTransfer(from, to, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/Controllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/// @title Controllable\\nabstract contract Controllable {\\n  /// @notice address => is controller.\\n  mapping(address => bool) private _isController;\\n\\n  /// @notice Require the caller to be a controller.\\n  modifier onlyController() {\\n    require(\\n      _isController[msg.sender],\\n      \\\"Controllable: Caller is not a controller\\\"\\n    );\\n    _;\\n  }\\n\\n  /// @notice Check if `addr` is a controller.\\n  function isController(address addr) public view returns (bool) {\\n    return _isController[addr];\\n  }\\n\\n  /// @notice Set the `addr` controller status to `status`.\\n  function _setController(address addr, bool status) internal {\\n    _isController[addr] = status;\\n  }\\n}\\n\"\r\n    },\r\n    \"sol-temple/src/tokens/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title ERC721\\n/// @author naomsa <https://twitter.com/naomsa666>\\n/// @notice A complete ERC721 implementation including metadata and enumerable\\n/// functions. Completely gas optimized and extensible.\\nabstract contract ERC721 is IERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n  /*         _           _            */\\n  /*        ( )_        ( )_          */\\n  /*    ___ | ,_)   _ _ | ,_)   __    */\\n  /*  /',__)| |   /'__` )| |   /'__`\\\\  */\\n  /*  \\\\__, \\\\| |_ ( (_| || |_ (  ___/  */\\n  /*  (____/`\\\\__)`\\\\__,_)`\\\\__)`\\\\____)  */\\n\\n  /// @notice See {ERC721Metadata-name}.\\n  string public name;\\n\\n  /// @notice See {ERC721Metadata-symbol}.\\n  string public symbol;\\n\\n  /// @notice See {ERC721Enumerable-totalSupply}.\\n  uint256 public totalSupply;\\n\\n  /// @notice Array of all owners.\\n  mapping(uint256 => address) private _owners;\\n\\n  /// @notice Mapping of all balances.\\n  mapping(address => uint256) private _balanceOf;\\n\\n  /// @notice Mapping from token Id to it's approved address.\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  /// @notice Mapping of approvals between owner and operator.\\n  mapping(address => mapping(address => bool)) private _isApprovedForAll;\\n\\n  /*   _                            */\\n  /*  (_ )                _         */\\n  /*   | |    _      __  (_)   ___  */\\n  /*   | |  /'_`\\\\  /'_ `\\\\| | /'___) */\\n  /*   | | ( (_) )( (_) || |( (___  */\\n  /*  (___)`\\\\___/'`\\\\__  |(_)`\\\\____) */\\n  /*              ( )_) |           */\\n  /*               \\\\___/'           */\\n\\n  /// @dev Set token's name and symbol.\\n  constructor(string memory name_, string memory symbol_) {\\n    name = name_;\\n    symbol = symbol_;\\n  }\\n\\n  /// @notice See {ERC721-balanceOf}.\\n  function balanceOf(address account_) public view virtual returns (uint256) {\\n    require(account_ != address(0), \\\"ERC721: balance query for the zero address\\\");\\n    return _balanceOf[account_];\\n  }\\n\\n  /// @notice See {ERC721-ownerOf}.\\n  function ownerOf(uint256 tokenId_) public view virtual returns (address) {\\n    require(_exists(tokenId_), \\\"ERC721: query for nonexistent token\\\");\\n    address owner = _owners[tokenId_];\\n    return owner;\\n  }\\n\\n  /// @notice See {ERC721Metadata-tokenURI}.\\n  function tokenURI(uint256) public view virtual returns (string memory);\\n\\n  /// @notice See {ERC721-approve}.\\n  function approve(address to_, uint256 tokenId_) public virtual {\\n    address owner = ownerOf(tokenId_);\\n    require(to_ != owner, \\\"ERC721: approval to current owner\\\");\\n\\n    require(\\n      msg.sender == owner || _isApprovedForAll[owner][msg.sender],\\n      \\\"ERC721: caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to_, tokenId_);\\n  }\\n\\n  /// @notice See {ERC721-getApproved}.\\n  function getApproved(uint256 tokenId_) public view virtual returns (address) {\\n    require(_exists(tokenId_), \\\"ERC721: query for nonexistent token\\\");\\n    return _tokenApprovals[tokenId_];\\n  }\\n\\n  /// @notice See {ERC721-setApprovalForAll}.\\n  function setApprovalForAll(address operator_, bool approved_) public virtual {\\n    _setApprovalForAll(msg.sender, operator_, approved_);\\n  }\\n\\n  /// @notice See {ERC721-isApprovedForAll}.\\n  function isApprovedForAll(address account_, address operator_) public view virtual returns (bool) {\\n    return _isApprovedForAll[account_][operator_];\\n  }\\n\\n  /// @notice See {ERC721-transferFrom}.\\n  function transferFrom(\\n    address from_,\\n    address to_,\\n    uint256 tokenId_\\n  ) public virtual {\\n    require(_isApprovedOrOwner(msg.sender, tokenId_), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n    _transfer(from_, to_, tokenId_);\\n  }\\n\\n  /// @notice See {ERC721-safeTransferFrom}.\\n  function safeTransferFrom(\\n    address from_,\\n    address to_,\\n    uint256 tokenId_\\n  ) public virtual {\\n    safeTransferFrom(from_, to_, tokenId_, \\\"\\\");\\n  }\\n\\n  /// @notice See {ERC721-safeTransferFrom}.\\n  function safeTransferFrom(\\n    address from_,\\n    address to_,\\n    uint256 tokenId_,\\n    bytes memory data_\\n  ) public virtual {\\n    require(_isApprovedOrOwner(msg.sender, tokenId_), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n    _safeTransfer(from_, to_, tokenId_, data_);\\n  }\\n\\n  /// @notice See {ERC721Enumerable.tokenOfOwnerByIndex}.\\n  function tokenOfOwnerByIndex(address account_, uint256 index_) public view returns (uint256 tokenId) {\\n    require(index_ < balanceOf(account_), \\\"ERC721Enumerable: Index out of bounds\\\");\\n    uint256 count;\\n    for (uint256 i; i < totalSupply; ++i) {\\n      if (account_ == _owners[i]) {\\n        if (count == index_) return i;\\n        else count++;\\n      }\\n    }\\n    revert(\\\"ERC721Enumerable: Index out of bounds\\\");\\n  }\\n\\n  /// @notice See {ERC721Enumerable.tokenByIndex}.\\n  function tokenByIndex(uint256 index_) public view virtual returns (uint256) {\\n    require(index_ < totalSupply, \\\"ERC721Enumerable: Index out of bounds\\\");\\n    return index_;\\n  }\\n\\n  /// @notice Returns a list of all token Ids owned by `owner`.\\n  function walletOfOwner(address account_) public view returns (uint256[] memory) {\\n    uint256 balance = balanceOf(account_);\\n    uint256[] memory ids = new uint256[](balance);\\n\\n    for (uint256 i = 0; i < balance; i++) ids[i] = tokenOfOwnerByIndex(account_, i);\\n    return ids;\\n  }\\n\\n  /*             _                               _    */\\n  /*   _        ( )_                            (_ )  */\\n  /*  (_)  ___  | ,_)   __   _ __   ___     _ _  | |  */\\n  /*  | |/' _ `\\\\| |   /'__`\\\\( '__)/' _ `\\\\ /'__` ) | |  */\\n  /*  | || ( ) || |_ (  ___/| |   | ( ) |( (_| | | |  */\\n  /*  (_)(_) (_)`\\\\__)`\\\\____)(_)   (_) (_)`\\\\__,_)(___) */\\n\\n  /// @notice Safely transfers `tokenId_` token from `from_` to `to`, checking first that contract recipients\\n  /// are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n  function _safeTransfer(\\n    address from_,\\n    address to_,\\n    uint256 tokenId_,\\n    bytes memory data_\\n  ) internal virtual {\\n    _transfer(from_, to_, tokenId_);\\n    _checkOnERC721Received(from_, to_, tokenId_, data_);\\n  }\\n\\n  /// @notice Returns whether `tokenId_` exists.\\n  function _exists(uint256 tokenId_) internal view virtual returns (bool) {\\n    return tokenId_ < totalSupply && _owners[tokenId_] != address(0);\\n  }\\n\\n  /// @notice Returns whether `spender_` is allowed to manage `tokenId`.\\n  function _isApprovedOrOwner(address spender_, uint256 tokenId_) internal view virtual returns (bool) {\\n    require(_exists(tokenId_), \\\"ERC721: query for nonexistent token\\\");\\n    address owner = _owners[tokenId_];\\n    return (spender_ == owner || getApproved(tokenId_) == spender_ || isApprovedForAll(owner, spender_));\\n  }\\n\\n  /// @notice Safely mints `tokenId_` and transfers it to `to`.\\n  function _safeMint(address to_, uint256 tokenId_) internal virtual {\\n    _safeMint(to_, tokenId_, \\\"\\\");\\n  }\\n\\n  /// @notice Same as {_safeMint}, but with an additional `data_` parameter which is\\n  /// forwarded in {ERC721Receiver-onERC721Received} to contract recipients.\\n  function _safeMint(\\n    address to_,\\n    uint256 tokenId_,\\n    bytes memory data_\\n  ) internal virtual {\\n    _mint(to_, tokenId_);\\n    _checkOnERC721Received(address(0), to_, tokenId_, data_);\\n  }\\n\\n  /// @notice Mints `tokenId_` and transfers it to `to_`.\\n  function _mint(address to_, uint256 tokenId_) internal virtual {\\n    require(!_exists(tokenId_), \\\"ERC721: token already minted\\\");\\n\\n    _beforeTokenTransfer(address(0), to_, tokenId_);\\n\\n    _owners[tokenId_] = to_;\\n    totalSupply++;\\n    unchecked {\\n      _balanceOf[to_]++;\\n    }\\n\\n    emit Transfer(address(0), to_, tokenId_);\\n    _afterTokenTransfer(address(0), to_, tokenId_);\\n  }\\n\\n  /// @notice Destroys `tokenId`. The approval is cleared when the token is burned.\\n  function _burn(uint256 tokenId_) internal virtual {\\n    address owner = ownerOf(tokenId_);\\n\\n    _beforeTokenTransfer(owner, address(0), tokenId_);\\n\\n    // Clear approvals\\n    _approve(address(0), tokenId_);\\n\\n    totalSupply--;\\n    _balanceOf[owner]--;\\n    delete _owners[tokenId_];\\n\\n    emit Transfer(owner, address(0), tokenId_);\\n    _afterTokenTransfer(owner, address(0), tokenId_);\\n  }\\n\\n  /// @notice Transfers `tokenId_` from `from_` to `to`.\\n  function _transfer(\\n    address from_,\\n    address to_,\\n    uint256 tokenId_\\n  ) internal virtual {\\n    require(_owners[tokenId_] == from_, \\\"ERC721: transfer of token that is not own\\\");\\n\\n    _beforeTokenTransfer(from_, to_, tokenId_);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId_);\\n\\n    _owners[tokenId_] = to_;\\n    unchecked {\\n      _balanceOf[from_]--;\\n      _balanceOf[to_]++;\\n    }\\n\\n    emit Transfer(from_, to_, tokenId_);\\n    _afterTokenTransfer(from_, to_, tokenId_);\\n  }\\n\\n  /// @notice Approve `to_` to operate on `tokenId_`\\n  function _approve(address to_, uint256 tokenId_) internal virtual {\\n    _tokenApprovals[tokenId_] = to_;\\n    emit Approval(_owners[tokenId_], to_, tokenId_);\\n  }\\n\\n  /// @notice Approve `operator_` to operate on all of `account_` tokens.\\n  function _setApprovalForAll(\\n    address account_,\\n    address operator_,\\n    bool approved_\\n  ) internal virtual {\\n    require(account_ != operator_, \\\"ERC721: approve to caller\\\");\\n    _isApprovedForAll[account_][operator_] = approved_;\\n    emit ApprovalForAll(account_, operator_, approved_);\\n  }\\n\\n  /// @notice ERC721Receiver callback checking and calling helper.\\n  function _checkOnERC721Received(\\n    address from_,\\n    address to_,\\n    uint256 tokenId_,\\n    bytes memory data_\\n  ) private {\\n    if (to_.code.length > 0) {\\n      try IERC721Receiver(to_).onERC721Received(msg.sender, from_, tokenId_, data_) returns (bytes4 returned) {\\n        require(returned == 0x150b7a02, \\\"ERC721: safe transfer to non ERC721Receiver implementation\\\");\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721: safe transfer to non ERC721Receiver implementation\\\");\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @notice Hook that is called before any token transfer.\\n  function _beforeTokenTransfer(\\n    address from_,\\n    address to_,\\n    uint256 tokenId_\\n  ) internal virtual {}\\n\\n  /// @notice Hook that is called after any token transfer.\\n  function _afterTokenTransfer(\\n    address from_,\\n    address to_,\\n    uint256 tokenId_\\n  ) internal virtual {}\\n\\n  /*    ___  _   _  _ _      __   _ __  */\\n  /*  /',__)( ) ( )( '_`\\\\  /'__`\\\\( '__) */\\n  /*  \\\\__, \\\\| (_) || (_) )(  ___/| |    */\\n  /*  (____/`\\\\___/'| ,__/'`\\\\____)(_)    */\\n  /*               | |                  */\\n  /*               (_)                  */\\n\\n  /// @notice See {ERC165-supportsInterface}.\\n  function supportsInterface(bytes4 interfaceId_) public view virtual returns (bool) {\\n    return\\n      interfaceId_ == type(IERC721).interfaceId || // ERC721\\n      interfaceId_ == type(IERC721Metadata).interfaceId || // ERC721Metadata\\n      interfaceId_ == type(IERC721Enumerable).interfaceId || // ERC721Enumerable\\n      interfaceId_ == type(IERC165).interfaceId; // ERC165\\n  }\\n}\\n\"\r\n    },\r\n    \"sol-temple/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/**\\n * @title ERC20\\n * @author naomsa <https://twitter.com/naomsa666>\\n * @notice A complete ERC20 implementation including EIP-2612 permit feature.\\n * Inspired by Solmate's ERC20, aiming at efficiency.\\n */\\nabstract contract ERC20 is IERC20 {\\n  /*         _           _            */\\n  /*        ( )_        ( )_          */\\n  /*    ___ | ,_)   _ _ | ,_)   __    */\\n  /*  /',__)| |   /'_` )| |   /'__`\\\\  */\\n  /*  \\\\__, \\\\| |_ ( (_| || |_ (  ___/  */\\n  /*  (____/`\\\\__)`\\\\__,_)`\\\\__)`\\\\____)  */\\n\\n  /// @notice See {ERC20-name}.\\n  string public name;\\n\\n  /// @notice See {ERC20-symbol}.\\n  string public symbol;\\n\\n  /// @notice See {ERC20-decimals}.\\n  uint8 public immutable decimals;\\n\\n  /// @notice Used to hash the Domain Separator.\\n  string public version;\\n\\n  /// @notice See {ERC20-totalSupply}.\\n  uint256 public totalSupply;\\n\\n  /// @notice See {ERC20-balanceOf}.\\n  mapping(address => uint256) public balanceOf;\\n\\n  /// @notice See {ERC20-allowance}.\\n  mapping(address => mapping(address => uint256)) public allowance;\\n\\n  /// @notice See {ERC2612-nonces}.\\n  mapping(address => uint256) public nonces;\\n\\n  /*   _                            */\\n  /*  (_ )                _         */\\n  /*   | |    _      __  (_)   ___  */\\n  /*   | |  /'_`\\\\  /'_ `\\\\| | /'___) */\\n  /*   | | ( (_) )( (_) || |( (___  */\\n  /*  (___)`\\\\___/'`\\\\__  |(_)`\\\\____) */\\n  /*              ( )_) |           */\\n  /*               \\\\___/'           */\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_,\\n    string memory version_\\n  ) {\\n    name = name_;\\n    symbol = symbol_;\\n    decimals = decimals_;\\n    version = version_;\\n  }\\n\\n  /// @notice See {ERC20-transfer}.\\n  function transfer(address to_, uint256 value_) public returns (bool) {\\n    _transfer(msg.sender, to_, value_);\\n    return true;\\n  }\\n\\n  /// @notice See {ERC20-transferFrom}.\\n  function transferFrom(\\n    address from_,\\n    address to_,\\n    uint256 value_\\n  ) public returns (bool) {\\n    uint256 allowed = allowance[from_][msg.sender];\\n    require(allowed >= value_, \\\"ERC20: allowance exceeds transfer value\\\");\\n    if (allowed != type(uint256).max) allowance[from_][msg.sender] -= value_;\\n\\n    _transfer(from_, to_, value_);\\n    return true;\\n  }\\n\\n  /// @notice See {ERC20-approve}.\\n  function approve(address spender_, uint256 value_) public returns (bool) {\\n    _approve(msg.sender, spender_, value_);\\n    return true;\\n  }\\n\\n  /// @notice See {ERC2612-DOMAIN_SEPARATOR}.\\n  function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n    return _hashEIP712Domain(name, version, block.chainid, address(this));\\n  }\\n\\n  /// @notice See {ERC2612-permit}.\\n  function permit(\\n    address owner_,\\n    address spender_,\\n    uint256 value_,\\n    uint256 deadline_,\\n    uint8 v_,\\n    bytes32 r_,\\n    bytes32 s_\\n  ) public {\\n    require(deadline_ >= block.timestamp, \\\"ERC20: expired permit deadline\\\");\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n    bytes32 digest = _hashEIP712Message(\\n      DOMAIN_SEPARATOR(),\\n      keccak256(\\n        abi.encode(\\n          0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9,\\n          owner_,\\n          spender_,\\n          value_,\\n          nonces[owner_]++,\\n          deadline_\\n        )\\n      )\\n    );\\n\\n    address signer = ecrecover(digest, v_, r_, s_);\\n    require(signer != address(0) && signer == owner_, \\\"ERC20: invalid signature\\\");\\n\\n    _approve(owner_, spender_, value_);\\n  }\\n\\n  /*             _                               _    */\\n  /*   _        ( )_                            (_ )  */\\n  /*  (_)  ___  | ,_)   __   _ __   ___     _ _  | |  */\\n  /*  | |/' _ `\\\\| |   /'__`\\\\( '__)/' _ `\\\\ /'_` ) | |  */\\n  /*  | || ( ) || |_ (  ___/| |   | ( ) |( (_| | | |  */\\n  /*  (_)(_) (_)`\\\\__)`\\\\____)(_)   (_) (_)`\\\\__,_)(___) */\\n\\n  /// @notice Internal transfer helper. Throws if `value_` exceeds `from_` balance.\\n  function _transfer(\\n    address from_,\\n    address to_,\\n    uint256 value_\\n  ) internal {\\n    require(balanceOf[from_] >= value_, \\\"ERC20: insufficient balance\\\");\\n    _beforeTokenTransfer(from_, to_, value_);\\n\\n    unchecked {\\n      balanceOf[from_] -= value_;\\n      balanceOf[to_] += value_;\\n    }\\n\\n    emit Transfer(from_, to_, value_);\\n    _afterTokenTransfer(from_, to_, value_);\\n  }\\n\\n  /// @notice Internal approve helper.\\n  function _approve(\\n    address owner_,\\n    address spender_,\\n    uint256 value_\\n  ) internal {\\n    allowance[owner_][spender_] = value_;\\n    emit Approval(owner_, spender_, value_);\\n  }\\n\\n  /// @notice Internal minting logic.\\n  function _mint(address to_, uint256 value_) internal {\\n    _beforeTokenTransfer(address(0), to_, value_);\\n\\n    totalSupply += value_;\\n    unchecked {\\n      balanceOf[to_] += value_;\\n    }\\n\\n    emit Transfer(address(0), to_, value_);\\n    _afterTokenTransfer(address(0), to_, value_);\\n  }\\n\\n  /// @notice Internal burning logic.\\n  function _burn(address from_, uint256 value_) internal {\\n    _beforeTokenTransfer(from_, address(0), value_);\\n    require(balanceOf[from_] >= value_, \\\"ERC20: burn value exceeds balance\\\");\\n\\n    unchecked {\\n      balanceOf[from_] -= value_;\\n      totalSupply -= value_;\\n    }\\n\\n    emit Transfer(from_, address(0), value_);\\n    _afterTokenTransfer(from_, address(0), value_);\\n  }\\n\\n  /**\\n   * @notice EIP721 domain hashing helper.\\n   * @dev Modified from https://github.com/0xProject/0x-monorepo/blob/development/contracts/utils/contracts/src/LibEIP712.sol\\n   */\\n  function _hashEIP712Domain(\\n    string memory name_,\\n    string memory version_,\\n    uint256 chainId_,\\n    address verifyingContract_\\n  ) private pure returns (bytes32) {\\n    bytes32 result;\\n    assembly {\\n      // Calculate hashes of dynamic data\\n      let nameHash := keccak256(add(name_, 32), mload(name_))\\n      let versionHash := keccak256(add(version_, 32), mload(version_))\\n\\n      // Load free memory pointer\\n      let memPtr := mload(64)\\n\\n      // Store params in memory\\n      mstore(memPtr, 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f)\\n      mstore(add(memPtr, 32), nameHash)\\n      mstore(add(memPtr, 64), versionHash)\\n      mstore(add(memPtr, 96), chainId_)\\n      mstore(add(memPtr, 128), verifyingContract_)\\n\\n      // Compute hash\\n      result := keccak256(memPtr, 160)\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @notice EIP721 typed message hashing helper.\\n   * @dev Modified from https://github.com/0xProject/0x-monorepo/blob/development/contracts/utils/contracts/src/LibEIP712.sol\\n   */\\n  function _hashEIP712Message(bytes32 domainSeparator_, bytes32 hash_) private pure returns (bytes32) {\\n    bytes32 result;\\n    assembly {\\n      // Load free memory pointer\\n      let memPtr := mload(64)\\n\\n      mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000) // EIP191 header\\n      mstore(add(memPtr, 2), domainSeparator_) // EIP712 domain hash\\n      mstore(add(memPtr, 34), hash_) // Hash of struct\\n\\n      // Compute hash\\n      result := keccak256(memPtr, 66)\\n    }\\n    return result;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal virtual {}\\n\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 512\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newApeRunners\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdroped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeRunners\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setControllers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ApeRunnersRUN", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "512", "ConstructorArguments": "00000000000000000000000023d29535dd1a10d8783f76a5bd32c860262b8191", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}