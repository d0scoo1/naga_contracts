{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ninterface IERC1155 is IERC165 {\r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\r\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    event URI(string _value, uint256 indexed _id);\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\r\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface IERC1155Metadata is IERC1155 {\r\n    function uri(uint256 _id) external view returns (string memory);\r\n}\r\n\r\ninterface IERC1155Receiver {\r\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external returns(bytes4);\r\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external returns(bytes4);       \r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address, uint256) external;\r\n    function transferFrom(address, address, uint256) external;\r\n}\r\n\r\ninterface IProxyRegistry{\r\n    function proxies(address) external view returns(address);\r\n}\r\n\r\ncontract LustNFT {\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\r\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\r\n    struct Minter{\r\n        address token;\r\n        uint256 amountPerShare;\r\n        bool redeemEnable;\r\n    }\r\n    struct Total{\r\n        uint256 totalDonors;\r\n        uint256 totalDonateAmount;\r\n        uint256 totalRedeemed;\r\n        uint256 totalDonations;\r\n    }\r\n    mapping(uint256 => uint256) public totalSupply;\r\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    mapping(address => bool) public defaultApproved;\r\n    string private _uri;\r\n    string public name;\r\n    string public symbol;\r\n    bool private _lock;\r\n    address payable public recipient = payable(0x5881Be40EC3044edD9512B56c3cC71003c4080f2);\r\n    Minter[] public minters;\r\n    uint256 private denominator = 50;\r\n    uint256 private startTime;\r\n    uint256 private duration = 7 days;\r\n    mapping(uint256 => Total) public totalInfo;\r\n    bool public paused;\r\n    address public owner;\r\n    mapping(address => mapping(uint256 => uint256)) private donatedAmount;\r\n    uint256 public cap = 133785730;\r\n    address public registry = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;\r\n    \r\n    modifier lock() {\r\n        require(!_lock, \"locked\");\r\n        _lock = true;\r\n        _;\r\n        _lock = false;\r\n    }\r\n    \r\n    modifier notPaused() {\r\n        require(!paused, \"paused\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"onlyOwner\");\r\n        _;\r\n    }\r\n    \r\n    modifier checkId(uint256 tokenId) {\r\n        require(tokenId < minters.length, \"tokenId not allowed\");\r\n        _;\r\n    }\r\n    \r\n    constructor(uint256 _startTime, string memory _name, string memory _symbol, string memory uri_) {\r\n        _uri = uri_;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        startTime = _startTime;\r\n        owner = msg.sender;\r\n        defaultApproved[address(this)] = true;\r\n        _mint(recipient, 0, 100, \"\");\r\n        _mint(recipient, 1, 300, \"\");\r\n        _mint(recipient, 2, 600, \"\");\r\n        minters.push(Minter(address(0), 1e17, false));\r\n        minters.push(Minter(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD, 1e21, false));\r\n        minters.push(Minter(0xbd31EA8212119f94A611FA969881CBa3EA06Fa3d, 1e12, false));\r\n    }\r\n    \r\n    function exists(uint256 id) public view returns (bool) {\r\n        return totalSupply[id] > 0;\r\n    }\r\n    \r\n    function uri(uint256 id) public view returns(string memory){\r\n        return bytes(_uri).length == 0 ? \"\" : string(abi.encodePacked(_uri, toString(id)));\r\n    }\r\n    \r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view returns (uint256[] memory) {\r\n        require(accounts.length == ids.length);\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf[accounts[i]][ids[i]];\r\n        }\r\n        return batchBalances;\r\n    }\r\n    \r\n    function setApprovalForAll(address operator, bool approved) public {\r\n        address _caller = msg.sender;\r\n        require(_caller != operator);\r\n        _operatorApprovals[_caller][operator] = approved;\r\n        emit ApprovalForAll(_caller, operator, approved);\r\n    }\r\n    \r\n    function isApprovedForAll(address account, address operator) public view returns (bool) {\r\n        if(defaultApproved[operator]) return true;\r\n        if(IProxyRegistry(registry).proxies(account) == operator) return true;\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n    \r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool){\r\n        return interfaceID == type(IERC165).interfaceId || \r\n        interfaceID == type(IERC1155).interfaceId || \r\n        interfaceID == type(IERC1155Metadata).interfaceId;\r\n    }\r\n    \r\n    function _doSafeTransferAcceptanceCheck(address operator, address from, address to, \r\n        uint256 id, uint256 amount, bytes memory data) private {\r\n        if (to.code.length > 0) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                require(response == IERC1155Receiver.onERC1155Received.selector);\r\n            } catch {\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _doSafeBatchTransferAcceptanceCheck(address operator, address from, address to, uint256[] memory ids, \r\n        uint256[] memory amounts, bytes memory data) private {\r\n        if (to.code.length > 0) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\r\n                require(response == IERC1155Receiver.onERC1155BatchReceived.selector);\r\n            } catch {\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n    \r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) public {\r\n        address operator = msg.sender;\r\n        require(from == operator || isApprovedForAll(from, operator));\r\n        require(to != address(0));\r\n        balanceOf[from][id] -= amount;\r\n        balanceOf[to][id] += amount;\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n    \r\n    function safeBatchTransferFrom(address from, address to, uint256[] memory ids, \r\n        uint256[] memory amounts, bytes memory data) public {\r\n        address operator = msg.sender;\r\n        require(from == operator || isApprovedForAll(from, operator));\r\n        require(ids.length == amounts.length);\r\n        require(to != address(0));\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n            balanceOf[from][id] -= amount;\r\n            balanceOf[to][id] += amount;\r\n        }\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n    \r\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal {\r\n        require(to != address(0));\r\n        address operator = msg.sender;\r\n        balanceOf[to][id] += amount;\r\n        totalSupply[id] += amount;\r\n        require(totalSupplyOfAll() <= cap, \"over cap\");\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n    \r\n    function mint(uint256 tokenId, uint256 share) public payable checkId(tokenId) notPaused lock{\r\n        require(block.timestamp >= startTime, \"not open\");\r\n        require(block.timestamp <= startTime + duration, \"already end\");\r\n        require(share >= 1, \"Zero share\");\r\n        Minter memory minter = minters[tokenId];\r\n        address _caller = msg.sender;\r\n        uint256 donateAmount = share * minter.amountPerShare;\r\n        uint256 fee = minter.amountPerShare / denominator * share;\r\n        uint256 value = msg.value;\r\n        address token = minter.token;\r\n        if(token == address(0)){\r\n            require(value >= donateAmount,\"not enough eth\");\r\n            recipient.transfer(donateAmount);\r\n            value -= donateAmount;\r\n        }else{\r\n            IERC20(token).transferFrom(_caller, address(this), donateAmount);\r\n            IERC20(token).transfer(recipient, fee);\r\n        }\r\n        _mint(_caller, tokenId, share, \"\");\r\n        Total storage total = totalInfo[tokenId];\r\n        total.totalDonateAmount += donateAmount;\r\n        total.totalDonations++;\r\n        if (donatedAmount[_caller][tokenId] == 0) {\r\n            total.totalDonors++;\r\n        }\r\n        donatedAmount[_caller][tokenId] += share;\r\n        if(value > 0){\r\n            payable(_caller).transfer(value);\r\n        }\r\n    }\r\n    \r\n    function redeem(uint256 tokenId, uint256 share) public checkId(tokenId) notPaused lock {\r\n        require(share >= 1, \"Zero share\");\r\n        address _caller = msg.sender;\r\n        Minter memory minter = minters[tokenId];\r\n        require(minter.redeemEnable, \"not allowed redeem\");\r\n        address token = minter.token;\r\n        Total storage total = totalInfo[tokenId];\r\n        uint256 redeemAmount = share * minter.amountPerShare;\r\n        require(total.totalRedeemed + redeemAmount <= total.totalDonateAmount, \"not enough token\");\r\n        uint256 fee = minter.amountPerShare / denominator * share;\r\n        safeTransferFrom(_caller, address(this), tokenId, share, \"\");\r\n        IERC20(token).transfer(_caller, redeemAmount - fee);\r\n        total.totalRedeemed += redeemAmount;\r\n    }\r\n    \r\n    function getDonateInfo() public view returns(\r\n            address _recipient,\r\n            uint256 _feePerShare,\r\n            uint256 _denominator,\r\n            uint256 _startTime,\r\n            uint256 _duration,\r\n            Minter[] memory _minters,\r\n            Total[] memory _totalInfos\r\n    ) {\r\n        uint256 len = minters.length;\r\n        Total[] memory totalInfos = new Total[](minters.length);\r\n        for(uint256 i = 0; i < len; i++){\r\n            totalInfos[i] = totalInfo[i];\r\n        }\r\n        return(\r\n            recipient,\r\n            2,\r\n            100,\r\n            startTime,\r\n            duration,\r\n            minters,\r\n            totalInfos\r\n        );\r\n    }\r\n    \r\n    function getUserInfo(address user) external view returns(uint256[] memory _donatedAmounts){\r\n        uint256 len = minters.length;\r\n        _donatedAmounts = new uint256[](len);\r\n        for(uint256 i = 0; i < len; i++){\r\n            _donatedAmounts[i] = donatedAmount[user][i];\r\n        }\r\n    }\r\n    \r\n    function totalSupplyOfAll() public view returns (uint256){\r\n        uint256 sum = 0;\r\n        for(uint256 i = 0; i < minters.length; i++){\r\n            sum += totalSupply[i];\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external returns(bytes4){\r\n        return this.onERC1155Received.selector;\r\n    }\r\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external returns(bytes4){\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n    \r\n    function addMinter(address token, uint256 amountPerShare) public onlyOwner{\r\n        minters.push(Minter(token, amountPerShare, false));\r\n    }\r\n    \r\n    function setMinter(uint256 tokenId, bool enable) public checkId(tokenId) onlyOwner{\r\n        require(tokenId > 0, \"set eth\");\r\n        minters[tokenId].redeemEnable = enable;\r\n    }\r\n    \r\n    function setStartTime(uint256 _startTime) public onlyOwner{\r\n        startTime = _startTime;\r\n    }\r\n     \r\n    function setDuration(uint256 _duration) public onlyOwner{\r\n        duration = _duration;\r\n    }\r\n    \r\n    function setPaused(bool _paused) public onlyOwner{\r\n        paused = _paused;\r\n    }\r\n    \r\n    function setOwner(address _owner) public onlyOwner{\r\n        owner = _owner;\r\n    }\r\n\r\n    function setDefaultApproved(address _account, bool enable) public onlyOwner{\r\n        defaultApproved[_account] = enable;\r\n    }\r\n    \r\n    function setRegistry(address _registry) public onlyOwner{\r\n        registry = _registry;\r\n    }\r\n    \r\n    function setURI(string memory uri_) public onlyOwner{\r\n        _uri = uri_;\r\n    }\r\n    \r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerShare\",\"type\":\"uint256\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"defaultApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDonateInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemEnable\",\"type\":\"bool\"}],\"internalType\":\"struct LustNFT.Minter[]\",\"name\":\"_minters\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalDonors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonations\",\"type\":\"uint256\"}],\"internalType\":\"struct LustNFT.Total[]\",\"name\":\"_totalInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_donatedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemEnable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setDefaultApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDonors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyOfAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LustNFT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000627e6460000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000094c555354455244414f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094c555354455244414f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002568747470733a2f2f736f736c756e612e636f6d2f7265736f757263652f6c7573746e66742f000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e692c9141069416185fae683f7b62da603297ff534bc543e1a022d306902a100"}]}