{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File contracts/OtoCoJurisdiction.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract OtoCoJurisdiction {\r\n\r\n    string private name;\r\n    string private defaultBadge;\r\n    string private goldBadge;\r\n\r\n    constructor (\r\n        string memory _name,\r\n        string memory _defaultBadge,\r\n        string memory _goldBadge\r\n    ) {\r\n        name = _name;\r\n        defaultBadge = _defaultBadge;\r\n        goldBadge = _goldBadge;\r\n    }\r\n\r\n    /**\r\n     * Get formatted name according to the jurisdiction requirement.\r\n     * To use when create new series, before series creation.\r\n     * Returns the string name formatted accordingly.\r\n     *\r\n     * @param count current number of series deployed at the jurisdiction.\r\n     * @return nameToFormat name of the series to format accordingly.\r\n     */\r\n    function getSeriesNameFormatted (uint256 count, string calldata nameToFormat) public pure virtual returns(string memory);\r\n    \r\n    /**\r\n     * Return the name of the jurisdiction.\r\n     * \r\n     * @return name the name of the jurisdiction.\r\n     */\r\n    function getJurisdictionName () external view returns(string memory){\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Return the NFT URI link of the jurisdiction.\r\n     * \r\n     * @return defaultBadge the badge URI.\r\n     */\r\n    function getJurisdictionBadge () external view returns(string memory) {\r\n        return defaultBadge;\r\n    }\r\n\r\n    /**\r\n     * Return the Gold NFT URI link of the jurisdiction.\r\n     * \r\n     * @return goldBadge the gold badge URI.\r\n     */\r\n    function getJurisdictionGoldBadge () external view returns(string memory){\r\n        return goldBadge;\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/jurisdictions/Delaware.sol\r\npragma solidity ^0.8.0;\r\n\r\ncontract JurisdictionDelaware is OtoCoJurisdiction {\r\n\r\n    constructor (\r\n        string memory _name,\r\n        string memory _defaultBadge,\r\n        string memory _goldBadge\r\n    ) OtoCoJurisdiction(_name, _defaultBadge, _goldBadge) {}\r\n\r\n    /**\r\n     * @dev See {OtoCoJurisdiction-getSeriesNameFormatted}.\r\n     */\r\n    function getSeriesNameFormatted (\r\n        uint256 count,\r\n        string calldata nameToFormat\r\n    ) public pure override returns(string memory){\r\n        return string(abi.encodePacked(nameToFormat, ' LLC'));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_defaultBadge\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_goldBadge\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getJurisdictionBadge\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJurisdictionGoldBadge\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJurisdictionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nameToFormat\",\"type\":\"string\"}],\"name\":\"getSeriesNameFormatted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "JurisdictionDelaware", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000844454c4157415245000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f68747470733a2f2f636c6f7564666c6172652d697066732e636f6d2f697066732f516d64416b59614d71797963454a32527136377a6836593578364657316e426b45427863744c33537650706b6a570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f68747470733a2f2f636c6f7564666c6172652d697066732e636f6d2f697066732f516d5978546455655538747878644855567553546e546a714446535064675835566434626372764b354e427942540000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3fe717ef2cb8d4a4af4d15fededb029cb3dfebfc6ed7123efbdd4c88f5e8cc77"}]}