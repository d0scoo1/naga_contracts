{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"github/XSublimatio/smart-contracts/contracts/XSublimatio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport { ERC721, ERC721Enumerable, Strings } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nimport { IXSublimatio } from \\\"./interfaces/IXSublimatio.sol\\\";\\n\\ncontract XSublimatio is IXSublimatio, ERC721Enumerable {\\n\\n    using Strings for uint256;\\n\\n    // Contains first 21 molecule availabilities (12 bits each).\\n    uint256 internal COMPACT_STATE_1 = uint256(60087470205620319587750252891185586116542855063423969629534558109603704138);\\n\\n    // Contains next 42 molecule availabilities (6 bits each).\\n    uint256 internal COMPACT_STATE_2 = uint256(114873104402099400223353432978706708436353982610412083425164130989245597730);\\n\\n    // Contains (right to left) 19 drug availabilities (8 bits each), total drugs available (11 bits), total molecules available (13 bits), and nonce (remaining 80 bits).\\n    uint256 internal COMPACT_STATE_3 = uint256(67212165445492353831982701316699907697777805738906362);\\n\\n    uint256 public immutable LAUNCH_TIMESTAMP;\\n\\n    address public owner;\\n    address public pendingOwner;\\n    address public proceedsDestination;\\n\\n    bytes32 public assetGeneratorHash;\\n\\n    string public baseURI;\\n\\n    uint256 public pricePerTokenMint;\\n\\n    mapping(address => bool) internal _canClaimFreeWater;\\n\\n    constructor (\\n        string memory baseURI_,\\n        address owner_,\\n        uint256 pricePerTokenMint_,\\n        uint256 launchTimestamp_\\n    ) ERC721(\\\"XSublimatio\\\", \\\"XSUB\\\") {\\n        baseURI = baseURI_;\\n        owner = owner_;\\n        pricePerTokenMint = pricePerTokenMint_;\\n        LAUNCH_TIMESTAMP = launchTimestamp_;\\n    }\\n\\n    modifier onlyAfterLaunch() {\\n        require(block.timestamp >= LAUNCH_TIMESTAMP, \\\"NOT_LAUNCHED_YET\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeforeLaunch() {\\n        require(block.timestamp < LAUNCH_TIMESTAMP, \\\"ALREADY_LAUNCHED\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /***********************/\\n    /*** Admin Functions ***/\\n    /***********************/\\n\\n    function acceptOwnership() external {\\n        require(pendingOwner == msg.sender, \\\"UNAUTHORIZED\\\");\\n\\n        emit OwnershipAccepted(owner, msg.sender);\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    function proposeOwnership(address newOwner_) external onlyOwner {\\n        emit OwnershipProposed(owner, pendingOwner = newOwner_);\\n    }\\n\\n    function setAssetGeneratorHash(bytes32 assetGeneratorHash_) external onlyOwner {\\n        require(assetGeneratorHash == bytes32(0) || block.timestamp < LAUNCH_TIMESTAMP, \\\"ALREADY_LAUNCHED\\\");\\n        emit AssetGeneratorHashSet(assetGeneratorHash = assetGeneratorHash_);\\n    }\\n\\n    function setBaseURI(string calldata baseURI_) external onlyOwner {\\n        emit BaseURISet(baseURI = baseURI_);\\n    }\\n\\n    function setPricePerTokenMint(uint256 pricePerTokenMint_) external onlyOwner onlyBeforeLaunch {\\n        emit PricePerTokenMintSet(pricePerTokenMint = pricePerTokenMint_);\\n    }\\n\\n    function setProceedsDestination(address proceedsDestination_) external onlyOwner {\\n        require(proceedsDestination == address(0) || block.timestamp < LAUNCH_TIMESTAMP, \\\"ALREADY_LAUNCHED\\\");\\n        emit ProceedsDestinationSet(proceedsDestination = proceedsDestination_);\\n    }\\n\\n    function setPromotionAccounts(address[] memory accounts_) external onlyOwner onlyBeforeLaunch {\\n        for (uint256 i; i < accounts_.length;) {\\n            address account = accounts_[i];\\n            _canClaimFreeWater[account] = true;\\n            emit PromotionAccountSet(account);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function unsetPromotionAccounts(address[] memory accounts_) external onlyOwner onlyBeforeLaunch {\\n        for (uint256 i; i < accounts_.length;) {\\n            address account = accounts_[i];\\n            _canClaimFreeWater[account] = false;\\n            emit PromotionAccountUnset(account);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function withdrawProceeds() external {\\n        uint256 amount = address(this).balance;\\n        address destination = proceedsDestination;\\n        destination = destination == address(0) ? owner : destination;\\n\\n        require(_transferEther(destination, amount), \\\"ETHER_TRANSFER_FAILED\\\");\\n        emit ProceedsWithdrawn(destination, amount);\\n    }\\n\\n    /**************************/\\n    /*** External Functions ***/\\n    /**************************/\\n\\n    function brew(uint256[] calldata molecules_, uint256 drugType_, address destination_) external onlyAfterLaunch returns (uint256 drug_) {\\n        // Check that drugType_ is valid.\\n        require(drugType_ < 19, \\\"INVALID_DRUG_TYPE\\\");\\n\\n        // Cache relevant compact state from storage.\\n        uint256 compactState3 = COMPACT_STATE_3;\\n\\n        // Check that drug is available.\\n        require(_getDrugAvailability(compactState3, drugType_) != 0, \\\"DRUG_NOT_AVAILABLE\\\");\\n\\n        uint256 specialWater;\\n\\n        unchecked {\\n            // The specific special water moleculeType for this drug is 44 more than the drugType.\\n            specialWater = drugType_ + 44;\\n        }\\n\\n        // Fetch the recipe from the pure function.\\n        uint8[] memory recipe = getRecipeOfDrug(drugType_);\\n\\n        uint256 index;\\n\\n        // For each moleculeType defined by the recipe, check that the provided moleculeType at that index is as expected, or the special water.\\n        while (index < recipe.length) {\\n            uint256 molecule = molecules_[index];\\n\\n            // Check that the caller owns the token.\\n            require(ownerOf(molecule) == msg.sender, \\\"NOT_OWNER\\\");\\n\\n            // Extract molecule type from token id.\\n            uint256 moleculeType = molecule >> 93;\\n\\n            // Check that the molecule type matches what the recipe calls for, or the molecule is the special water.\\n            require(moleculeType == specialWater || recipe[index] == moleculeType, \\\"INVALID_MOLECULE\\\");\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        index = 0;\\n\\n        address drugAsAddress = address(uint160(drug_ = _generateTokenId(drugType_ + 63, _generatePseudoRandomNumber(_getTokenNonce(compactState3)))));\\n\\n        // Make the drug itself own all the molecules used.\\n        while (index < recipe.length) {\\n            uint256 molecule = molecules_[index];\\n\\n            // Transfer the molecule.\\n            _transfer(msg.sender, drugAsAddress, molecule);\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        // Put token type as the leftmost 8 bits in the token id and mint the drug NFT (drugType + 63).\\n        _mint(destination_, drug_);\\n\\n        // Decrement it's availability, decrement the total amount of drugs available, and increment the drug nonce, and set storage.\\n        COMPACT_STATE_3 = _decrementDrugAvailability(compactState3, drugType_);\\n    }\\n\\n    function claimWater(address destination_) external returns (uint256 molecule_) {\\n        // NOTE: no need for the onlyBeforeLaunch modifier since `canClaimFreeWater` already checks the timestamp\\n        require(canClaimFreeWater(msg.sender), \\\"CANNOT_CLAIM\\\");\\n\\n        _canClaimFreeWater[msg.sender] = false;\\n\\n        ( COMPACT_STATE_1, COMPACT_STATE_2, COMPACT_STATE_3, molecule_ ) = _giveMolecule(COMPACT_STATE_1, COMPACT_STATE_2, COMPACT_STATE_3, 0, destination_);\\n    }\\n\\n    function decompose(uint256 drug_) external {\\n        // NOTE: no need for onlyAfterLaunch modifier because drug cannot exist (be brewed) before launch, nor can water be burned before launch.\\n        // Check that the caller owns the token.\\n        require(ownerOf(drug_) == msg.sender, \\\"NOT_OWNER\\\");\\n\\n        uint256 drugType = (drug_ >> 93);\\n\\n        // Check that the token is a drug.\\n        require(drugType >= 63 && drugType < 82, \\\"NOT_DRUG\\\");\\n\\n        unchecked {\\n            drugType -= 63;\\n        }\\n\\n        address drugAsAddress = address(uint160(drug_));\\n        uint256 moleculeCount = balanceOf(drugAsAddress);\\n\\n        for (uint256 i = moleculeCount; i > 0;) {\\n            uint256 molecule = tokenOfOwnerByIndex(drugAsAddress, --i);\\n\\n            if (i == 0) {\\n                // Burn the water (which should be the first token).\\n                _burn(molecule);\\n                continue;\\n            }\\n\\n            // Transfer the molecule to the owner.\\n            _transfer(drugAsAddress, msg.sender, molecule);\\n        }\\n\\n        // Increment the drugs' availability, increment the total amount of drugs available, and set storage.\\n        COMPACT_STATE_3 = _incrementDrugAvailability(COMPACT_STATE_3, drugType);\\n\\n        // Burn the drug.\\n        _burn(drug_);\\n    }\\n\\n    function giveWaters(address[] memory destinations_, uint256[] memory amounts_) external onlyOwner onlyBeforeLaunch {\\n        // Cache relevant compact states from storage.\\n        uint256 compactState1 = COMPACT_STATE_1;\\n        uint256 compactState2 = COMPACT_STATE_2;\\n        uint256 compactState3 = COMPACT_STATE_3;\\n\\n        for (uint256 i; i < destinations_.length;) {\\n            for (uint256 j; j < amounts_[i];) {\\n                ( compactState1, compactState2, compactState3, ) = _giveMolecule(compactState1, compactState2, compactState3, 0, destinations_[i]);\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Set relevant storage state fromm the cache ones.\\n        COMPACT_STATE_1 = compactState1;\\n        COMPACT_STATE_2 = compactState2;\\n        COMPACT_STATE_3 = compactState3;\\n    }\\n\\n    function giveMolecules(address[] memory destinations_, uint256[] memory amounts_) external onlyOwner onlyBeforeLaunch {\\n        require(block.timestamp < LAUNCH_TIMESTAMP, \\\"ALREADY_LAUNCHED\\\");\\n\\n        // Cache relevant compact states from storage.\\n        uint256 compactState1 = COMPACT_STATE_1;\\n        uint256 compactState2 = COMPACT_STATE_2;\\n        uint256 compactState3 = COMPACT_STATE_3;\\n\\n        // Get the number of molecules available from compactState3.\\n        uint256 availableMoleculeCount = _getMoleculesAvailable(compactState3);\\n\\n        for (uint256 i; i < destinations_.length;) {\\n            for (uint256 j; j < amounts_[i];) {\\n                // Get a pseudo random number.\\n                uint256 randomNumber = _generatePseudoRandomNumber(_getTokenNonce(compactState3));\\n                uint256 moleculeType;\\n\\n                // Provide _drawMolecule with the 3 relevant cached compact states, and a random number between 0 and availableMoleculeCount - 1, inclusively.\\n                // The result is newly updated cached compact states. Also, availableMoleculeCount is pre-decremented so that each random number is within correct bounds.\\n                ( compactState1, compactState2, compactState3, moleculeType ) = _drawMolecule(compactState1, compactState2, compactState3, _limitTo(randomNumber, --availableMoleculeCount));\\n\\n                // Generate a token id from the moleculeType and randomNumber (saving it in the array of token IDs) and mint the molecule NFT.\\n                _mint(destinations_[i], _generateTokenId(moleculeType, randomNumber));\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Set relevant storage state fromm the cache ones.\\n        COMPACT_STATE_1 = compactState1;\\n        COMPACT_STATE_2 = compactState2;\\n        COMPACT_STATE_3 = compactState3;\\n    }\\n\\n    function purchase(address destination_, uint256 quantity_, uint256 minQuantity_) external payable onlyAfterLaunch returns (uint256[] memory molecules_) {\\n        // Cache relevant compact states from storage.\\n        uint256 compactState1 = COMPACT_STATE_1;\\n        uint256 compactState2 = COMPACT_STATE_2;\\n        uint256 compactState3 = COMPACT_STATE_3;\\n\\n        // Get the number of molecules available from compactState3 and determine how many molecules will be purchased in this call.\\n        uint256 availableMoleculeCount = _getMoleculesAvailable(compactState3);\\n        uint256 count = availableMoleculeCount >= quantity_ ? quantity_ : availableMoleculeCount;\\n\\n        // Prevent a purchase fo 0 nfts, as well as a purchase of less nfts than the user expected.\\n        require(count != 0, \\\"NO_MOLECULES_AVAILABLE\\\");\\n        require(count >= minQuantity_, \\\"CANNOT_FULLFIL_REQUEST\\\");\\n\\n        // Compute the price this purchase will cost, since it will be needed later, and count will be decremented in a while-loop.\\n        uint256 totalCost;\\n        unchecked {\\n            totalCost = pricePerTokenMint * count;\\n        }\\n\\n        // Require that enough ether was provided,\\n        require(msg.value >= totalCost, \\\"INCORRECT_VALUE\\\");\\n\\n        if (msg.value > totalCost) {\\n            // If extra, require that it is successfully returned to the caller.\\n            unchecked {\\n                require(_transferEther(msg.sender, msg.value - totalCost), \\\"TRANSFER_FAILED\\\");\\n            }\\n        }\\n\\n        // Initialize the array of token IDs to a length of the nfts to be purchased.\\n        molecules_ = new uint256[](count);\\n\\n        while (count > 0) {\\n            // Get a pseudo random number.\\n            uint256 randomNumber = _generatePseudoRandomNumber(_getTokenNonce(compactState3));\\n            uint256 moleculeType;\\n\\n            unchecked {\\n                // Provide _drawMolecule with the 3 relevant cached compact states, and a random number between 0 and availableMoleculeCount - 1, inclusively.\\n                // The result is newly updated cached compact states. Also, availableMoleculeCount is pre-decremented so that each random number is within correct bounds.\\n                ( compactState1, compactState2, compactState3, moleculeType ) = _drawMolecule(compactState1, compactState2, compactState3, _limitTo(randomNumber, --availableMoleculeCount));\\n\\n                // Generate a token id from the moleculeType and randomNumber (saving it in the array of token IDs) and mint the molecule NFT.\\n                _mint(destination_, molecules_[--count] = _generateTokenId(moleculeType, randomNumber));\\n            }\\n        }\\n\\n        // Set relevant storage state fromm the cache ones.\\n        COMPACT_STATE_1 = compactState1;\\n        COMPACT_STATE_2 = compactState2;\\n        COMPACT_STATE_3 = compactState3;\\n    }\\n\\n    /***************/\\n    /*** Getters ***/\\n    /***************/\\n\\n    function availabilities() external view returns (uint256[63] memory moleculesAvailabilities_, uint256[19] memory drugAvailabilities_) {\\n        moleculesAvailabilities_ = moleculeAvailabilities();\\n        drugAvailabilities_ = drugAvailabilities();\\n    }\\n\\n    function canClaimFreeWater(address account_) public view returns (bool canClaimFreeWater_) {\\n        return block.timestamp < LAUNCH_TIMESTAMP && _canClaimFreeWater[account_];\\n    }\\n\\n    function compactStates() external view returns (uint256 compactState1_, uint256 compactState2_, uint256 compactState3_) {\\n        return (COMPACT_STATE_1, COMPACT_STATE_2, COMPACT_STATE_3);\\n    }\\n\\n    function contractURI() external view returns (string memory contractURI_) {\\n        return baseURI;\\n    }\\n\\n    function drugAvailabilities() public view returns (uint256[19] memory availabilities_) {\\n        // Cache relevant compact states from storage.\\n        uint256 compactState3 = COMPACT_STATE_3;\\n\\n        for (uint256 i; i < 19;) {\\n            availabilities_[i] = _getDrugAvailability(compactState3, i);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n    }\\n\\n    function drugsAvailable() external view returns (uint256 drugsAvailable_) {\\n        drugsAvailable_ = _getDrugsAvailable(COMPACT_STATE_3);\\n    }\\n\\n    function getAvailabilityOfDrug(uint256 drugType_) external view returns (uint256 availability_) {\\n        availability_ = _getDrugAvailability(COMPACT_STATE_3, drugType_);\\n    }\\n\\n    function getAvailabilityOfMolecule(uint256 moleculeType_) external view returns (uint256 availability_) {\\n        availability_ = _getMoleculeAvailability(COMPACT_STATE_1, COMPACT_STATE_2, moleculeType_);\\n    }\\n\\n    function getDrugContainingMolecule(uint256 molecule_) external view returns (uint256 drug_) {\\n        drug_ = uint256(uint160(ownerOf(molecule_)));\\n    }\\n\\n    function getMoleculesWithinDrug(uint256 drug_) external view returns (uint256[] memory molecules_) {\\n        molecules_ = tokensOfOwner(address(uint160(drug_)));\\n    }\\n\\n    function getRecipeOfDrug(uint256 drugType_) public pure returns (uint8[] memory recipe_) {\\n        if (drugType_ <= 7) {\\n            recipe_ = new uint8[](2);\\n\\n            recipe_[1] =\\n                drugType_ == 0 ? 1 :  // Alcohol (Isolated)\\n                drugType_ == 1 ? 33 : // Chloroquine (Isolated)\\n                drugType_ == 2 ? 8 :  // Cocaine (Isolated)\\n                drugType_ == 3 ? 31 : // GHB (Isolated)\\n                drugType_ == 4 ? 15 : // Ketamine (Isolated)\\n                drugType_ == 5 ? 32 : // LSD (Isolated)\\n                drugType_ == 6 ? 2 :  // Methamphetamine (Isolated)\\n                14;                   // Morphine (Isolated)\\n        } else if (drugType_ == 16) {\\n            recipe_ = new uint8[](3);\\n\\n            // Mate\\n            recipe_[1] = 3;\\n            recipe_[2] = 4;\\n        } else if (drugType_ == 11 || drugType_ == 12) {\\n            recipe_ = new uint8[](4);\\n\\n            if (drugType_ == 11) { // Khat\\n                recipe_[1] = 5;\\n                recipe_[2] = 6;\\n                recipe_[3] = 7;\\n            } else {               // Lactuca Virosa\\n                recipe_[1] = 19;\\n                recipe_[2] = 20;\\n                recipe_[3] = 21;\\n            }\\n        } else if (drugType_ == 14 || drugType_ == 15 || drugType_ == 17) {\\n            recipe_ = new uint8[](5);\\n\\n            if (drugType_ == 14) {        // Magic Truffle\\n                recipe_[1] = 25;\\n                recipe_[2] = 26;\\n                recipe_[3] = 27;\\n                recipe_[4] = 28;\\n            } else if (drugType_ == 15) { // Mandrake\\n                recipe_[1] = 16;\\n                recipe_[2] = 17;\\n                recipe_[3] = 18;\\n                recipe_[4] = 34;\\n            } else {                      // Opium\\n                recipe_[1] = 14;\\n                recipe_[2] = 22;\\n                recipe_[3] = 23;\\n                recipe_[4] = 24;\\n            }\\n        } else if (drugType_ == 9 || drugType_ == 10 || drugType_ == 18) {\\n            recipe_ = new uint8[](6);\\n\\n            if (drugType_ == 9) {         // Belladonna\\n                recipe_[1] = 16;\\n                recipe_[2] = 17;\\n                recipe_[3] = 18;\\n                recipe_[4] = 29;\\n                recipe_[5] = 30;\\n            } else if (drugType_ == 10) { // Cannabis\\n                recipe_[1] = 9;\\n                recipe_[2] = 10;\\n                recipe_[3] = 11;\\n                recipe_[4] = 12;\\n                recipe_[5] = 13;\\n            } else {                      // Salvia Divinorum\\n                recipe_[1] = 35;\\n                recipe_[2] = 36;\\n                recipe_[3] = 40;\\n                recipe_[4] = 41;\\n                recipe_[5] = 42;\\n            }\\n        } else if (drugType_ == 8) {\\n            recipe_ = new uint8[](7);\\n\\n            // Ayahuasca\\n            recipe_[1] = 8;\\n            recipe_[2] = 37;\\n            recipe_[3] = 38;\\n            recipe_[4] = 39;\\n            recipe_[5] = 43;\\n            recipe_[6] = 44;\\n        } else if (drugType_ == 13) {\\n            recipe_ = new uint8[](9);\\n\\n            // Love Elixir\\n            recipe_[1] = 9;\\n            recipe_[2] = 45;\\n            recipe_[3] = 46;\\n            recipe_[4] = 47;\\n            recipe_[5] = 48;\\n            recipe_[6] = 49;\\n            recipe_[7] = 50;\\n            recipe_[8] = 51;\\n        } else {\\n            revert(\\\"INVALID_RECIPE\\\");\\n        }\\n\\n        // All recipes require Water, so recipe_[0] remains 0.\\n    }\\n\\n    function moleculesAvailable() external view returns (uint256 moleculesAvailable_) {\\n        moleculesAvailable_ = _getMoleculesAvailable(COMPACT_STATE_3);\\n    }\\n\\n    function moleculeAvailabilities() public view returns (uint256[63] memory availabilities_) {\\n        // Cache relevant compact states from storage.\\n        uint256 compactState1 = COMPACT_STATE_1;\\n        uint256 compactState2 = COMPACT_STATE_2;\\n\\n        for (uint256 i; i < 63;) {\\n            availabilities_[i] = _getMoleculeAvailability(compactState1, compactState2, i);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function tokensOfOwner(address owner_) public view returns (uint256[] memory tokenIds_) {\\n        uint256 balance = balanceOf(owner_);\\n\\n        tokenIds_ = new uint256[](balance);\\n\\n        for (uint256 i; i < balance;) {\\n            tokenIds_[i] = tokenOfOwnerByIndex(owner_, i);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId_) public override view returns (string memory tokenURI_) {\\n        require(_exists(tokenId_), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURICache = baseURI;\\n\\n        tokenURI_ = bytes(baseURICache).length > 0 ? string(abi.encodePacked(baseURICache, \\\"/\\\", tokenId_.toString())) : \\\"\\\";\\n    }\\n\\n    /**************************/\\n    /*** Internal Functions ***/\\n    /**************************/\\n\\n    function _beforeTokenTransfer(address from_, address to_, uint256 tokenId_) internal override {\\n        // Can mint before launch, but transfers and burns can only happen after launch.\\n        require(from_ == address(0) || block.timestamp >= LAUNCH_TIMESTAMP, \\\"NOT_LAUNCHED_YET\\\");\\n        super._beforeTokenTransfer(from_, to_, tokenId_);\\n    }\\n\\n    function _clearBits(uint256 input_, uint256 mask_, uint256 shift_) internal pure returns (uint256 output_) {\\n        // Clear out bits in input with mask.\\n        output_ = (input_ & ~(mask_ << shift_));\\n    }\\n\\n    function _constrainBits(uint256 input_, uint256 mask_, uint256 shift_, uint256 max_) internal pure returns (uint256 output_) {\\n        // Clear out bits in input with mask, and replace them with the removed bits constrained to some max.\\n        output_ = _clearBits(input_, mask_, shift_) | ((((input_ >> shift_) & mask_) % max_) << shift_);\\n    }\\n\\n    function _decrementDrugAvailability(uint256 compactState3_, uint256 drugType_) internal pure returns (uint256 newCompactState3_) {\\n        unchecked {\\n            // Increment the token nonce, which is located left of 19 8-bit individual drug availabilities, an 11-bit total drug availability, and a 13-bit total molecule availability.\\n            // Decrement the total drug availability, which is located left of 19 8-bit individual drug availabilities.\\n            // Decrement the corresponding availability of a specific drug.\\n            // Clearer: newCompactState3_ = compactState4_\\n            //            + (1 << (19 * 8 + 11 + 13))\\n            //            - (1 << (19 * 8))\\n            //            - (1 << (drugType_ * 8));\\n            newCompactState3_ = compactState3_ + 95780965595127282823557164963750446178190649605488640 - (1 << (drugType_ * 8));\\n        }\\n    }\\n\\n    function _decrementMoleculeAvailability(\\n        uint256 compactState1_,\\n        uint256 compactState2_,\\n        uint256 compactState3_,\\n        uint256 moleculeType_\\n    ) internal pure returns (uint256 newCompactState1_, uint256 newCompactState2_, uint256 newCompactState3_) {\\n        unchecked {\\n            // Increment the token nonce, which is located left of 19 8-bit individual drug availabilities, an 11-bit total drug availability, and a 13-bit total molecule availability.\\n            // Decrement the total molecule availability, which is located left of 19 8-bit individual drug availabilities and an 11-bit total drug availability.\\n            // Clearer: compactState3_ = compactState3_\\n            //            + (1 << (19 * 8 + 11 + 13))\\n            //            - (1 << (19 * 8 + 11));\\n            compactState3_ = compactState3_ + 95769279291019406424051059718232593712013947676131328;\\n\\n            // Decrement the corresponding availability of a specific molecule, in a compact state given the molecule type.\\n            if (moleculeType_ < 21) return (compactState1_ - (1 << (moleculeType_ * 12)), compactState2_, compactState3_);\\n\\n            return (compactState1_, compactState2_ - (1 << ((moleculeType_ - 21) * 6)), compactState3_);\\n        }\\n    }\\n\\n    function _drawMolecule(\\n        uint256 compactState1_,\\n        uint256 compactState2_,\\n        uint256 compactState3_,\\n        uint256 randomNumber_\\n    ) internal pure returns (uint256 newCompactState1_, uint256 newCompactState2_, uint256 newCompactState3_, uint256 moleculeType_) {\\n        uint256 offset;\\n\\n        while (moleculeType_ < 63) {\\n            unchecked {\\n                // Increment the offset by the availability of the molecule defined by moleculeType, and break if randomNumber is less than it.\\n                if (randomNumber_ < (offset += _getMoleculeAvailability(compactState1_, compactState2_, moleculeType_))) break;\\n\\n                // If not (i.e. randomNumber does not corresponding to picking moleculeType), increment the moleculeType and try again.\\n                ++moleculeType_;\\n            }\\n        }\\n\\n        // Decrement the availability of this molecule, decrement the total amount of available molecules, and increment some molecule nonce.\\n        // Give this pure function the relevant cached compact states and get back updated compact states.\\n        ( newCompactState1_, newCompactState2_, newCompactState3_ ) = _decrementMoleculeAvailability(compactState1_, compactState2_, compactState3_, moleculeType_);\\n    }\\n\\n    function _generatePseudoRandomNumber(uint256 nonce_) internal view returns (uint256 pseudoRandomNumber_) {\\n        unchecked {\\n            pseudoRandomNumber_ = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), msg.sender, nonce_, gasleft())));\\n        }\\n    }\\n\\n    function _generateTokenId(uint256 type_, uint256 pseudoRandomNumber_) internal pure returns (uint256 tokenId_) {\\n        // In right-most 100 bits, first 7 bits are the type and last 93 bits are from the pseudo random number.\\n        tokenId_ = (type_ << 93) | (pseudoRandomNumber_ >> 163);\\n\\n        // From right to left:\\n        //  - 32 bits are to be used as an unsigned 32-bit (or signed 32-bit) seed.\\n        //  - 16 bits are to be used as an unsigned 16-bit for brt.\\n        //  - 16 bits are to be used as an unsigned 16-bit for sat.\\n        //  - 16 bits are to be used as an unsigned 16-bit for hue.\\n\\n        if (type_ > 62) {\\n            tokenId_ = _clearBits(tokenId_, 1, 32 + 16 + 16 + 16);\\n            tokenId_ = _clearBits(tokenId_, 3, 32 + 16 + 16 + 16 + 1);\\n        } else {\\n            //  - 1 bit is to be used for 2 lighting types.\\n            tokenId_ = _constrainBits(tokenId_, 1, 32 + 16 + 16 + 16, 2);\\n\\n            //  - 2 bits are to be used for 4 molecule integrity types.\\n            tokenId_ = _constrainBits(tokenId_, 3, 32 + 16 + 16 + 16 + 1, 4);\\n        }\\n\\n        //  - 2 bits are to be used for 3 deformation types.\\n        tokenId_ = _constrainBits(tokenId_, 3, 32 + 16 + 16 + 16 + 1 + 2, 3);\\n\\n        //  - 1 bit is to be used for 2 color shift types.\\n        tokenId_ = _constrainBits(tokenId_, 1, 32 + 16 + 16 + 16 + 1 + 2 + 2, 2);\\n\\n        //  - 2 bits are to be used for 3 stripe amount types.\\n        tokenId_ = _constrainBits(tokenId_, 3, 32 + 16 + 16 + 16 + 1 + 2 + 2 + 1, 3);\\n\\n        //  - 2 bits are to be used for 3 blob types.\\n        tokenId_ = _constrainBits(tokenId_, 3, 32 + 16 + 16 + 16 + 1 + 2 + 2 + 1 + 2, 3);\\n\\n        //  - 3 bits are to be used for 6 palette types.\\n        tokenId_ = _constrainBits(tokenId_, 7, 32 + 16 + 16 + 16 + 1 + 2 + 2 + 1 + 2 + 2, 6);\\n    }\\n\\n    function _getDrugAvailability(uint256 compactState3_, uint256 drugType_) internal pure returns (uint256 availability_) {\\n        unchecked {\\n            availability_ = (compactState3_ >> (drugType_ * 8)) & 255;\\n        }\\n    }\\n\\n    function _getDrugsAvailable(uint256 compactState3_) internal pure returns (uint256 drugsAvailable_) {\\n        // Shift out 19 8-bit values (19 drug availabilities) from the right of the compact state, and mask as 11 bits.\\n        drugsAvailable_ = (compactState3_ >> 152) & 2047;\\n    }\\n\\n    function _getMoleculeAvailability(\\n        uint256 compactState1_,\\n        uint256 compactState2_,\\n        uint256 moleculeType_\\n    ) internal pure returns (uint256 availability_) {\\n        unchecked {\\n            if (moleculeType_ < 21) return (compactState1_ >> (moleculeType_ * 12)) & 4095;\\n\\n            return (compactState2_ >> ((moleculeType_ - 21) * 6)) & 63;\\n        }\\n    }\\n\\n    function _getMoleculesAvailable(uint256 compactState3_) internal pure returns (uint256 moleculesAvailable_) {\\n        // Shift out 19 8-bit values (19 drug availabilities) and an 11-bit value (total drugs available), and mask as 13 bits.\\n        moleculesAvailable_ = (compactState3_ >> 163) & 8191;\\n    }\\n\\n    function _getTokenNonce(uint256 compactState3_) internal pure returns (uint256 moleculeNonce_) {\\n        // Shift out 19 8-bit values (19 drug availabilities), an 11-bit value (total drugs available), and a 13-bit value (total molecules available).\\n        moleculeNonce_ = compactState3_ >> 176;\\n    }\\n\\n    function _giveMolecule(\\n        uint256 compactState1_,\\n        uint256 compactState2_,\\n        uint256 compactState3_,\\n        uint256 moleculeType_,\\n        address destination_\\n    ) internal returns (uint256 newCompactState1_, uint256 newCompactState2_, uint256 newCompactState3_, uint256 molecule_) {\\n        require(_getMoleculeAvailability(compactState1_, compactState2_, moleculeType_) > 0, \\\"NO_AVAILABILITY\\\");\\n\\n        // Get a pseudo random number.\\n        uint256 randomNumber = _generatePseudoRandomNumber(_getTokenNonce(compactState3_));\\n\\n        // Decrement the availability of the molecule, decrement the total amount of available molecules, and increment some molecule nonce.\\n        // Give this pure function the relevant cached compact states and get back updated compact states.\\n        // Set relevant storage state fromm the cache ones.\\n        ( newCompactState1_, newCompactState2_, newCompactState3_ ) = _decrementMoleculeAvailability(compactState1_, compactState2_, compactState3_, moleculeType_);\\n\\n        // Generate a token id from the moleculeType and randomNumber (saving it in the array of token IDs) and mint the molecule NFT.\\n        _mint(destination_, molecule_ = _generateTokenId(moleculeType_, randomNumber));\\n    }\\n\\n    function _incrementDrugAvailability(uint256 compactState3_, uint256 drugType_) internal pure returns (uint256 newCompactState3_) {\\n        unchecked {\\n            // Increment the total drug availability, which is located left of 19 8-bit individual drug availabilities.\\n            // Increment the corresponding availability of a specific drug.\\n            // Clearer: newCompactState3_ = compactState3_\\n            //            + (1 << (19 * 8))\\n            //            + (1 << (drugType_ * 8));\\n            newCompactState3_ = compactState3_ + 5708990770823839524233143877797980545530986496 + (1 << (drugType_ * 8));\\n        }\\n    }\\n\\n    function _limitTo(uint256 input_, uint256 max_) internal pure returns (uint256 output_) {\\n        output_ = 0 == max_ ? 0 : input_ % (max_ + 1);\\n    }\\n\\n    function _transferEther(address destination_, uint256 amount_) internal returns (bool success_) {\\n        ( success_, ) = destination_.call{ value: amount_ }(\\\"\\\");\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"github/XSublimatio/smart-contracts/contracts/interfaces/IXSublimatio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport { IERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IXSublimatio is IERC721Enumerable {\\n\\n    /// @notice Emitted when the base URI is set (or re-set).\\n    event AirdropSet(address indexed account);\\n\\n    /// @notice Emitted when the hash of the asset generator is set.\\n    event AssetGeneratorHashSet(bytes32 indexed assetGeneratorHash);\\n\\n    /// @notice Emitted when the base URI is set (or re-set).\\n    event BaseURISet(string baseURI);\\n\\n    /// @notice Emitted when an account has decomposed of their drugs into its molecules.\\n    event DrugDecomposed(uint256 indexed drug, uint256[] molecules);\\n\\n    /// @notice Emitted when an account has accepted ownership.\\n    event OwnershipAccepted(address indexed previousOwner, address indexed owner);\\n\\n    /// @notice Emitted when owner proposed an account that can accept ownership.\\n    event OwnershipProposed(address indexed owner, address indexed pendingOwner);\\n\\n    /// @notice Emitted when the price per token mint has been decreased.\\n    event PricePerTokenMintSet(uint256 price);\\n\\n    /// @notice Emitted when proceeds have been withdrawn to proceeds destination.\\n    event ProceedsWithdrawn(address indexed destination, uint256 amount);\\n\\n    /// @notice Emitted when an account is given the right to claim a free water molecule as a promotion.\\n    event PromotionAccountSet(address indexed account);\\n\\n    /// @notice Emitted when an account is loses the right to claim a free water molecule as a promotion.\\n    event PromotionAccountUnset(address indexed account);\\n\\n    /// @notice Emitted when an account is set as the destination where proceeds will be withdrawn to.\\n    event ProceedsDestinationSet(address indexed account);\\n\\n    /*************/\\n    /*** State ***/\\n    /*************/\\n\\n    function LAUNCH_TIMESTAMP() external returns (uint256 launchTimestamp_);\\n\\n    function assetGeneratorHash() external returns (bytes32 assetGeneratorHash_);\\n\\n    function baseURI() external returns (string memory baseURI_);\\n\\n    function canClaimFreeWater(address account_) external returns (bool canClaimFreeWater_);\\n\\n    function owner() external returns (address owner_);\\n\\n    function pendingOwner() external returns (address pendingOwner_);\\n\\n    function proceedsDestination() external returns (address proceedsDestination_);\\n\\n    function pricePerTokenMint() external returns (uint256 pricePerTokenMint_);\\n\\n    /***********************/\\n    /*** Admin Functions ***/\\n    /***********************/\\n\\n    function acceptOwnership() external;\\n\\n    function proposeOwnership(address newOwner_) external;\\n\\n    function setAssetGeneratorHash(bytes32 assetGeneratorHash_) external;\\n\\n    function setBaseURI(string calldata baseURI_) external;\\n\\n    function setPricePerTokenMint(uint256 pricePerTokenMint_) external;\\n\\n    function setProceedsDestination(address proceedsDestination_) external;\\n\\n    function setPromotionAccounts(address[] memory accounts_) external;\\n\\n    function unsetPromotionAccounts(address[] memory accounts_) external;\\n\\n    function withdrawProceeds() external;\\n\\n    /**************************/\\n    /*** External Functions ***/\\n    /**************************/\\n\\n    function brew(uint256[] calldata molecules_, uint256 drugType_, address destination_) external returns (uint256 drug_);\\n\\n    function claimWater(address destination_) external returns (uint256 molecule_);\\n\\n    function decompose(uint256 drug_) external;\\n\\n    function giveWaters(address[] memory destinations_, uint256[] memory amounts_) external;\\n\\n    function giveMolecules(address[] memory destinations_, uint256[] memory amounts_) external;\\n\\n    function purchase(address destination_, uint256 quantity_, uint256 minQuantity_) external payable returns (uint256[] memory molecules_);\\n\\n    /***************/\\n    /*** Getters ***/\\n    /***************/\\n\\n    function availabilities() external view returns (uint256[63] memory moleculesAvailabilities_, uint256[19] memory drugAvailabilities_);\\n\\n    function compactStates() external view returns (uint256 compactState1_, uint256 compactState2_, uint256 compactState3_);\\n\\n    function contractURI() external view returns (string memory contractURI_);\\n\\n    function drugAvailabilities() external view returns (uint256[19] memory availabilities_);\\n\\n    function drugsAvailable() external view returns (uint256 drugsAvailable_);\\n\\n    function getAvailabilityOfDrug(uint256 drugType_) external view returns (uint256 availability_);\\n\\n    function getAvailabilityOfMolecule(uint256 moleculeType_) external view returns (uint256 availability_);\\n\\n    function getDrugContainingMolecule(uint256 molecule_) external view returns (uint256 drug_);\\n\\n    function getMoleculesWithinDrug(uint256 drug_) external view returns (uint256[] memory molecules_);\\n\\n    function getRecipeOfDrug(uint256 drugType_) external pure returns (uint8[] memory recipe_);\\n\\n    function moleculesAvailable() external view returns (uint256 moleculesAvailable_);\\n\\n    function moleculeAvailabilities() external view returns (uint256[63] memory availabilities_);\\n\\n    function tokensOfOwner(address owner_) external view returns (uint256[] memory tokenIds_);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerTokenMint_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchTimestamp_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AirdropSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetGeneratorHash\",\"type\":\"bytes32\"}],\"name\":\"AssetGeneratorHashSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"drug\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"molecules\",\"type\":\"uint256[]\"}],\"name\":\"DrugDecomposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PricePerTokenMintSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ProceedsDestinationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProceedsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PromotionAccountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PromotionAccountUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LAUNCH_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetGeneratorHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availabilities\",\"outputs\":[{\"internalType\":\"uint256[63]\",\"name\":\"moleculesAvailabilities_\",\"type\":\"uint256[63]\"},{\"internalType\":\"uint256[19]\",\"name\":\"drugAvailabilities_\",\"type\":\"uint256[19]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"molecules_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"drugType_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"brew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"drug_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"canClaimFreeWater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canClaimFreeWater_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"claimWater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"molecule_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compactStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"compactState1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compactState2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compactState3_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drug_\",\"type\":\"uint256\"}],\"name\":\"decompose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drugAvailabilities\",\"outputs\":[{\"internalType\":\"uint256[19]\",\"name\":\"availabilities_\",\"type\":\"uint256[19]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drugsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"drugsAvailable_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drugType_\",\"type\":\"uint256\"}],\"name\":\"getAvailabilityOfDrug\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availability_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moleculeType_\",\"type\":\"uint256\"}],\"name\":\"getAvailabilityOfMolecule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availability_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"molecule_\",\"type\":\"uint256\"}],\"name\":\"getDrugContainingMolecule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"drug_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drug_\",\"type\":\"uint256\"}],\"name\":\"getMoleculesWithinDrug\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"molecules_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drugType_\",\"type\":\"uint256\"}],\"name\":\"getRecipeOfDrug\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"recipe_\",\"type\":\"uint8[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"giveMolecules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"destinations_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"giveWaters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moleculeAvailabilities\",\"outputs\":[{\"internalType\":\"uint256[63]\",\"name\":\"availabilities_\",\"type\":\"uint256[63]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moleculesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"moleculesAvailable_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerTokenMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proceedsDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuantity_\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"molecules_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetGeneratorHash_\",\"type\":\"bytes32\"}],\"name\":\"setAssetGeneratorHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerTokenMint_\",\"type\":\"uint256\"}],\"name\":\"setPricePerTokenMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proceedsDestination_\",\"type\":\"address\"}],\"name\":\"setProceedsDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"}],\"name\":\"setPromotionAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"}],\"name\":\"unsetPromotionAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XSublimatio", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000055e559c974346ed3ae4f8b1b1b6c87b6506ccabc000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000062c89ad00000000000000000000000000000000000000000000000000000000000000024787375626c696d6174696f2e66616374696f6e2e6172742f6170692f6d6574616461746100000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}