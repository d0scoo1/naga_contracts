{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract IERC20 {\r\n  function transfer(address _to, uint256 _value) public virtual returns (bool success);\r\n  function balanceOf(address owner) public virtual view returns (uint256 balance);  \r\n} \r\n\r\ncontract MultiSig {\r\n\r\n    // events\r\n    event WalletCreated(address creator, address[] owners);\r\n    event SubmitTransaction (address indexed owner, address indexed destination, uint id, uint value, bytes data);\r\n    event ConfirmTransaction( address indexed owner, uint id);\r\n    event ExecteTransaction(address indexed owner, uint id);\r\n    event SubmitTokenTransaction(address indexed token, address indexed owner, address indexed destination, uint256 value, uint id);\r\n    event ConfirmTokenTransaction(address indexed owner, uint256 id);\r\n    event ExecteTokenTransaction(address indexed token, address indexed owner, uint id);\r\n\r\n    // Types\r\n    struct Transaction{\r\n        uint id;\r\n        address to;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n        uint numConfirmations;\r\n        address creator;\r\n    }\r\n\r\n    struct TokenTransaction{\r\n        uint id;\r\n        address token;\r\n        address to;\r\n        uint256 value;\r\n        bool executed;\r\n        uint numConfirmations;\r\n        address creator;\r\n    }\r\n\r\n    address[] public  owners;\r\n    Transaction[] transactions;\r\n    TokenTransaction[] tokenTransactions;\r\n    mapping(address => bool) public isOwner;\r\n    // mapping from tx index => owner => bool\r\n    mapping(uint => mapping(address => bool)) public isTxnConfirmed;\r\n    mapping(uint => mapping(address => bool)) public isTokenTxnConfirmed;\r\n    uint public numConfirmationsRequired;\r\n\r\n    constructor(uint _confirmations, address[] memory _owners) payable {\r\n        require(_owners.length > 0, \"owners required\");\r\n        require(\r\n            _confirmations > 0 &&\r\n                _confirmations <= _owners.length,\r\n            \"invalid number of required confirmations\"\r\n        );\r\n         for (uint i = 0; i < _owners.length; i++) {\r\n            address owner = _owners[i];\r\n\r\n            require(owner != address(0), \"invalid owner\");\r\n            require(!isOwner[owner], \"owner not unique\");\r\n\r\n            isOwner[owner] = true;\r\n            owners.push(owner);\r\n        }\r\n        \r\n        numConfirmationsRequired = _confirmations;\r\n        emit WalletCreated(msg.sender, _owners);\r\n    }   \r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function getOwners() public virtual view returns(address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function getTransactionCount() public view returns (uint) {\r\n        return transactions.length;\r\n    }\r\n\r\n    function getTransaction(uint _txIndex) public virtual view returns (uint id, address to, uint value, bytes memory data, bool executed, uint numConfirmations, address creator){\r\n        Transaction storage transaction = transactions[_txIndex];\r\n\r\n        return (transaction.id, transaction.to, transaction.value, transaction.data, transaction.executed, transaction.numConfirmations, transaction.creator);\r\n    }\r\n\r\n    function getTokenTransactionCount() public view returns (uint) {\r\n        return tokenTransactions.length;\r\n    }\r\n\r\n    function getTokenTransaction(uint _txIndex) public virtual view returns (uint id, address token, address to, uint value, bool executed, uint numConfirmations){\r\n        TokenTransaction storage tokenTransaction = tokenTransactions[_txIndex];\r\n\r\n        return (tokenTransaction.id, tokenTransaction.token, tokenTransaction.to, tokenTransaction.value, tokenTransaction.executed, tokenTransaction.numConfirmations);\r\n    }\r\n\r\n    //modifier\r\n    modifier onlyOwner(){\r\n       require(isOwner[msg.sender],\"Not owner\");\r\n       _;\r\n    }\r\n\r\n    modifier txExists(uint _txIndex){\r\n        require(_txIndex < transactions.length, \"Transaction does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier tokenTxExists(uint _txIndex){\r\n        require(_txIndex < tokenTransactions.length);\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint _txIndex) {\r\n        require(!transactions[_txIndex].executed, \"tx already executed\");\r\n        _;\r\n    }\r\n    modifier notTokenTxnExecuted(uint _txIndex) {\r\n        require(!tokenTransactions[_txIndex].executed, \"tx already executed\");\r\n        _;\r\n    }\r\n    modifier notConfirmed(uint _txIndex) {\r\n        require(!isTxnConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\r\n        _;\r\n    }\r\n\r\n    modifier notTokenTxnConfirmed(uint _txIndex) {\r\n        require(!isTokenTxnConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\r\n        _;\r\n    }\r\n\r\n    function submitTransaction (address _to, uint256 _value, bytes memory _data) public onlyOwner returns (bool){\r\n        uint txIndex = transactions.length;\r\n        transactions.push(Transaction({\r\n            id: txIndex,\r\n            to:_to,\r\n            value:_value,\r\n            data:_data,\r\n            executed:false,\r\n            numConfirmations:0,\r\n            creator:msg.sender\r\n        }));\r\n        \r\n        emit SubmitTransaction(msg.sender, _to, txIndex, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function confirmTransaction(uint _txIndex) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) notConfirmed(_txIndex) returns (bool){\r\n        Transaction storage transaction = transactions[_txIndex];\r\n        transaction.numConfirmations +=1;\r\n        isTxnConfirmed[_txIndex][msg.sender] = true;\r\n\r\n        emit ConfirmTransaction(msg.sender, _txIndex);\r\n        return true;\r\n    }\r\n\r\n    function executeTransaction(uint _txIndex) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) returns (bool) {\r\n        Transaction storage transaction = transactions[_txIndex];\r\n        require(transaction.numConfirmations >= numConfirmationsRequired, \"can not execute transaction\");\r\n\r\n        transaction.executed = true;\r\n        (bool success, ) = transaction.to.call{value:transaction.value}(transaction.data);\r\n        require(success,\"transaction failed\");\r\n        emit ExecteTransaction(msg.sender, _txIndex);\r\n\r\n        return true;\r\n    }\r\n\r\n    function submitTokenTransaction(address _token, address _to, uint256 _value) public onlyOwner returns (bool){\r\n        uint txIndex = tokenTransactions.length;\r\n        tokenTransactions.push(TokenTransaction({\r\n            id: txIndex,\r\n            token: _token,\r\n            to: _to,\r\n            value: _value,\r\n            executed: false,\r\n            creator: msg.sender,\r\n            numConfirmations: 0\r\n        }));\r\n        emit SubmitTokenTransaction(_token, msg.sender, _to, _value, txIndex);\r\n        return true;\r\n    }\r\n\r\n    function confirmTokenTransaction(uint _txIndex) public onlyOwner tokenTxExists(_txIndex) notTokenTxnExecuted(_txIndex) notTokenTxnConfirmed(_txIndex) returns(bool){\r\n        TokenTransaction storage tokenTransaction = tokenTransactions[_txIndex];\r\n        tokenTransaction.numConfirmations +=1;\r\n        isTokenTxnConfirmed[_txIndex][msg.sender] = true;\r\n\r\n        emit ConfirmTokenTransaction(msg.sender, _txIndex);\r\n        return true;\r\n    }\r\n\r\n    function executeTokenTransaction(uint _txIndex) public onlyOwner tokenTxExists(_txIndex) notTokenTxnExecuted(_txIndex) returns(bool){\r\n        TokenTransaction storage tokenTransaction = tokenTransactions[_txIndex];\r\n        require(tokenTransaction.numConfirmations >= numConfirmationsRequired, \"can not execute token transaction\");\r\n\r\n        uint256 tokenBal = IERC20(tokenTransaction.token).balanceOf(address(this));\r\n        require (tokenTransaction.value <= tokenBal, \"insufficient token balance\");\r\n        IERC20(tokenTransaction.token).transfer(tokenTransaction.to, tokenTransaction.value);\r\n        tokenTransaction.executed = true;\r\n\r\n        emit ExecteTokenTransaction(tokenTransaction.token, msg.sender, _txIndex);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_confirmations\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ConfirmTokenTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ExecteTokenTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ExecteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SubmitTokenTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTokenTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"executeTokenTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTokenTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenTxnConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxnConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"submitTokenTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiSig", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005000000000000000000000000a9abfa652f64f9e028ea11677204da0f61697ebe00000000000000000000000097b0b5b1ebd5be2a314fa3cc852908ff9032d72b00000000000000000000000089d17fc1fb1012c1691b1dd22f287db8bbf5cc76000000000000000000000000863807283559ae7595dca81d0ccfafd8a9eae9210000000000000000000000006af8dea18da786a29a4cf4386a65737f6e326379", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e48a26c84bc05df7a34b37f8c10e28720eb7f5973f12b401e6dabfd7651c3dc3"}]}