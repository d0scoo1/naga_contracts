{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PBAB/plottables/GenArt721CoreV2_Plottables.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../libs/CustomERC721Metadata.sol\\\";\\nimport \\\"../../libs/SafeMath.sol\\\";\\nimport \\\"../../libs/Strings.sol\\\";\\n\\ninterface IRandomizer {\\n    function returnValue() external view returns (bytes32);\\n}\\n\\ncontract GenArt721CoreV2_Plottables is CustomERC721Metadata {\\n    using SafeMath for uint256;\\n\\n    event Mint(\\n        address indexed _to,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _projectId\\n    );\\n\\n    IRandomizer public randomizerContract;\\n\\n    struct Project {\\n        string name;\\n        string artist;\\n        string description;\\n        string website;\\n        string license;\\n        string projectBaseURI;\\n        uint256 invocations;\\n        uint256 maxInvocations;\\n        string scriptJSON;\\n        mapping(uint256 => string) scripts;\\n        uint256 scriptCount;\\n        string ipfsHash;\\n        bool active;\\n        bool locked;\\n        bool paused;\\n    }\\n\\n    uint256 constant ONE_MILLION = 1_000_000;\\n    mapping(uint256 => Project) projects;\\n\\n    //All financial functions are stripped from struct for visibility\\n    mapping(uint256 => address) public projectIdToArtistAddress;\\n    mapping(uint256 => string) public projectIdToCurrencySymbol;\\n    mapping(uint256 => address) public projectIdToCurrencyAddress;\\n    mapping(uint256 => uint256) public projectIdToPricePerTokenInWei;\\n    mapping(uint256 => address) public projectIdToAdditionalPayee;\\n    mapping(uint256 => uint256) public projectIdToAdditionalPayeePercentage;\\n    mapping(uint256 => uint256)\\n        public projectIdToSecondaryMarketRoyaltyPercentage;\\n\\n    address public renderProviderAddress;\\n    uint256 public renderProviderPercentage = 10;\\n\\n    mapping(uint256 => uint256) public tokenIdToProjectId;\\n    mapping(uint256 => bytes32) public tokenIdToHash;\\n    mapping(bytes32 => uint256) public hashToTokenId;\\n\\n    address public admin;\\n    mapping(address => bool) public isWhitelisted;\\n    mapping(address => bool) public isMintWhitelisted;\\n\\n    uint256 public nextProjectId = 0;\\n\\n    modifier onlyValidTokenId(uint256 _tokenId) {\\n        require(_exists(_tokenId), \\\"Token ID does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyUnlocked(uint256 _projectId) {\\n        require(!projects[_projectId].locked, \\\"Only if unlocked\\\");\\n        _;\\n    }\\n\\n    modifier onlyArtist(uint256 _projectId) {\\n        require(\\n            msg.sender == projectIdToArtistAddress[_projectId],\\n            \\\"Only artist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        require(isWhitelisted[msg.sender], \\\"Only whitelisted\\\");\\n        _;\\n    }\\n\\n    modifier onlyArtistOrWhitelisted(uint256 _projectId) {\\n        require(\\n            isWhitelisted[msg.sender] ||\\n                msg.sender == projectIdToArtistAddress[_projectId],\\n            \\\"Only artist or whitelisted\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        address _randomizerContract\\n    ) public CustomERC721Metadata(_tokenName, _tokenSymbol) {\\n        admin = msg.sender;\\n        isWhitelisted[msg.sender] = true;\\n        renderProviderAddress = msg.sender;\\n        randomizerContract = IRandomizer(_randomizerContract);\\n    }\\n\\n    function mint(\\n        address _to,\\n        uint256 _projectId,\\n        address _by\\n    ) external returns (uint256 _tokenId) {\\n        require(\\n            isMintWhitelisted[msg.sender],\\n            \\\"Must mint from whitelisted minter contract.\\\"\\n        );\\n        require(\\n            projects[_projectId].invocations.add(1) <=\\n                projects[_projectId].maxInvocations,\\n            \\\"Must not exceed max invocations\\\"\\n        );\\n        require(\\n            projects[_projectId].active ||\\n                _by == projectIdToArtistAddress[_projectId],\\n            \\\"Project must exist and be active\\\"\\n        );\\n        require(\\n            !projects[_projectId].paused ||\\n                _by == projectIdToArtistAddress[_projectId],\\n            \\\"Purchases are paused.\\\"\\n        );\\n\\n        uint256 tokenId = _mintToken(_to, _projectId);\\n\\n        return tokenId;\\n    }\\n\\n    function _mintToken(address _to, uint256 _projectId)\\n        internal\\n        returns (uint256 _tokenId)\\n    {\\n        uint256 tokenIdToBe = (_projectId * ONE_MILLION) +\\n            projects[_projectId].invocations;\\n\\n        projects[_projectId].invocations = projects[_projectId].invocations.add(\\n            1\\n        );\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                projects[_projectId].invocations,\\n                block.number,\\n                blockhash(block.number - 1),\\n                randomizerContract.returnValue()\\n            )\\n        );\\n        tokenIdToHash[tokenIdToBe] = hash;\\n        hashToTokenId[hash] = tokenIdToBe;\\n\\n        _mint(_to, tokenIdToBe);\\n\\n        tokenIdToProjectId[tokenIdToBe] = _projectId;\\n\\n        emit Mint(_to, tokenIdToBe, _projectId);\\n\\n        return tokenIdToBe;\\n    }\\n\\n    function updateAdmin(address _adminAddress) public onlyAdmin {\\n        admin = _adminAddress;\\n    }\\n\\n    function updateRenderProviderAddress(address _renderProviderAddress)\\n        public\\n        onlyAdmin\\n    {\\n        renderProviderAddress = _renderProviderAddress;\\n    }\\n\\n    function updateRenderProviderPercentage(uint256 _renderProviderPercentage)\\n        public\\n        onlyAdmin\\n    {\\n        require(_renderProviderPercentage <= 25, \\\"Max of 25%\\\");\\n        renderProviderPercentage = _renderProviderPercentage;\\n    }\\n\\n    function addWhitelisted(address _address) public onlyAdmin {\\n        isWhitelisted[_address] = true;\\n    }\\n\\n    function removeWhitelisted(address _address) public onlyAdmin {\\n        isWhitelisted[_address] = false;\\n    }\\n\\n    function addMintWhitelisted(address _address) public onlyAdmin {\\n        isMintWhitelisted[_address] = true;\\n    }\\n\\n    function removeMintWhitelisted(address _address) public onlyAdmin {\\n        isMintWhitelisted[_address] = false;\\n    }\\n\\n    function updateRandomizerAddress(address _randomizerAddress)\\n        public\\n        onlyWhitelisted\\n    {\\n        randomizerContract = IRandomizer(_randomizerAddress);\\n    }\\n\\n    function toggleProjectIsLocked(uint256 _projectId)\\n        public\\n        onlyWhitelisted\\n        onlyUnlocked(_projectId)\\n    {\\n        projects[_projectId].locked = true;\\n    }\\n\\n    function toggleProjectIsActive(uint256 _projectId) public onlyWhitelisted {\\n        projects[_projectId].active = !projects[_projectId].active;\\n    }\\n\\n    function updateProjectArtistAddress(\\n        uint256 _projectId,\\n        address _artistAddress\\n    ) public onlyArtistOrWhitelisted(_projectId) {\\n        projectIdToArtistAddress[_projectId] = _artistAddress;\\n    }\\n\\n    function toggleProjectIsPaused(uint256 _projectId)\\n        public\\n        onlyArtist(_projectId)\\n    {\\n        projects[_projectId].paused = !projects[_projectId].paused;\\n    }\\n\\n    function addProject(\\n        string memory _projectName,\\n        address _artistAddress,\\n        uint256 _pricePerTokenInWei\\n    ) public onlyWhitelisted {\\n        uint256 projectId = nextProjectId;\\n        projectIdToArtistAddress[projectId] = _artistAddress;\\n        projects[projectId].name = _projectName;\\n        projectIdToCurrencySymbol[projectId] = \\\"ETH\\\";\\n        projectIdToPricePerTokenInWei[projectId] = _pricePerTokenInWei;\\n        projects[projectId].paused = true;\\n        projects[projectId].maxInvocations = ONE_MILLION;\\n        nextProjectId = nextProjectId.add(1);\\n    }\\n\\n    function updateProjectCurrencyInfo(\\n        uint256 _projectId,\\n        string memory _currencySymbol,\\n        address _currencyAddress\\n    ) public onlyArtist(_projectId) {\\n        projectIdToCurrencySymbol[_projectId] = _currencySymbol;\\n        projectIdToCurrencyAddress[_projectId] = _currencyAddress;\\n    }\\n\\n    function updateProjectPricePerTokenInWei(\\n        uint256 _projectId,\\n        uint256 _pricePerTokenInWei\\n    ) public onlyArtist(_projectId) {\\n        projectIdToPricePerTokenInWei[_projectId] = _pricePerTokenInWei;\\n    }\\n\\n    function updateProjectName(uint256 _projectId, string memory _projectName)\\n        public\\n        onlyUnlocked(_projectId)\\n        onlyArtistOrWhitelisted(_projectId)\\n    {\\n        projects[_projectId].name = _projectName;\\n    }\\n\\n    function updateProjectArtistName(\\n        uint256 _projectId,\\n        string memory _projectArtistName\\n    ) public onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) {\\n        projects[_projectId].artist = _projectArtistName;\\n    }\\n\\n    function updateProjectAdditionalPayeeInfo(\\n        uint256 _projectId,\\n        address _additionalPayee,\\n        uint256 _additionalPayeePercentage\\n    ) public onlyArtist(_projectId) {\\n        require(_additionalPayeePercentage <= 100, \\\"Max of 100%\\\");\\n        projectIdToAdditionalPayee[_projectId] = _additionalPayee;\\n        projectIdToAdditionalPayeePercentage[\\n            _projectId\\n        ] = _additionalPayeePercentage;\\n    }\\n\\n    function updateProjectSecondaryMarketRoyaltyPercentage(\\n        uint256 _projectId,\\n        uint256 _secondMarketRoyalty\\n    ) public onlyArtist(_projectId) {\\n        require(_secondMarketRoyalty <= 100, \\\"Max of 100%\\\");\\n        projectIdToSecondaryMarketRoyaltyPercentage[\\n            _projectId\\n        ] = _secondMarketRoyalty;\\n    }\\n\\n    function updateProjectDescription(\\n        uint256 _projectId,\\n        string memory _projectDescription\\n    ) public onlyArtist(_projectId) {\\n        projects[_projectId].description = _projectDescription;\\n    }\\n\\n    function updateProjectWebsite(\\n        uint256 _projectId,\\n        string memory _projectWebsite\\n    ) public onlyArtist(_projectId) {\\n        projects[_projectId].website = _projectWebsite;\\n    }\\n\\n    function updateProjectLicense(\\n        uint256 _projectId,\\n        string memory _projectLicense\\n    ) public onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) {\\n        projects[_projectId].license = _projectLicense;\\n    }\\n\\n    function updateProjectMaxInvocations(\\n        uint256 _projectId,\\n        uint256 _maxInvocations\\n    ) public onlyArtist(_projectId) {\\n        require(\\n            (!projects[_projectId].locked ||\\n                _maxInvocations < projects[_projectId].maxInvocations),\\n            \\\"Only if unlocked\\\"\\n        );\\n        require(\\n            _maxInvocations > projects[_projectId].invocations,\\n            \\\"You must set max invocations greater than current invocations\\\"\\n        );\\n        require(_maxInvocations <= ONE_MILLION, \\\"Cannot exceed 1000000\\\");\\n        projects[_projectId].maxInvocations = _maxInvocations;\\n    }\\n\\n    function addProjectScript(uint256 _projectId, string memory _script)\\n        public\\n        onlyUnlocked(_projectId)\\n        onlyArtistOrWhitelisted(_projectId)\\n    {\\n        projects[_projectId].scripts[\\n            projects[_projectId].scriptCount\\n        ] = _script;\\n        projects[_projectId].scriptCount = projects[_projectId].scriptCount.add(\\n            1\\n        );\\n    }\\n\\n    function updateProjectScript(\\n        uint256 _projectId,\\n        uint256 _scriptId,\\n        string memory _script\\n    ) public onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) {\\n        require(\\n            _scriptId < projects[_projectId].scriptCount,\\n            \\\"scriptId out of range\\\"\\n        );\\n        projects[_projectId].scripts[_scriptId] = _script;\\n    }\\n\\n    function removeProjectLastScript(uint256 _projectId)\\n        public\\n        onlyUnlocked(_projectId)\\n        onlyArtistOrWhitelisted(_projectId)\\n    {\\n        require(\\n            projects[_projectId].scriptCount > 0,\\n            \\\"there are no scripts to remove\\\"\\n        );\\n        delete projects[_projectId].scripts[\\n            projects[_projectId].scriptCount - 1\\n        ];\\n        projects[_projectId].scriptCount = projects[_projectId].scriptCount.sub(\\n            1\\n        );\\n    }\\n\\n    function updateProjectScriptJSON(\\n        uint256 _projectId,\\n        string memory _projectScriptJSON\\n    ) public onlyUnlocked(_projectId) onlyArtistOrWhitelisted(_projectId) {\\n        projects[_projectId].scriptJSON = _projectScriptJSON;\\n    }\\n\\n    function updateProjectIpfsHash(uint256 _projectId, string memory _ipfsHash)\\n        public\\n        onlyUnlocked(_projectId)\\n        onlyArtistOrWhitelisted(_projectId)\\n    {\\n        projects[_projectId].ipfsHash = _ipfsHash;\\n    }\\n\\n    function updateProjectBaseURI(uint256 _projectId, string memory _newBaseURI)\\n        public\\n        onlyArtist(_projectId)\\n    {\\n        projects[_projectId].projectBaseURI = _newBaseURI;\\n    }\\n\\n    function projectDetails(uint256 _projectId)\\n        public\\n        view\\n        returns (\\n            string memory projectName,\\n            string memory artist,\\n            string memory description,\\n            string memory website,\\n            string memory license\\n        )\\n    {\\n        projectName = projects[_projectId].name;\\n        artist = projects[_projectId].artist;\\n        description = projects[_projectId].description;\\n        website = projects[_projectId].website;\\n        license = projects[_projectId].license;\\n    }\\n\\n    function projectTokenInfo(uint256 _projectId)\\n        public\\n        view\\n        returns (\\n            address artistAddress,\\n            uint256 pricePerTokenInWei,\\n            uint256 invocations,\\n            uint256 maxInvocations,\\n            bool active,\\n            address additionalPayee,\\n            uint256 additionalPayeePercentage,\\n            string memory currency,\\n            address currencyAddress\\n        )\\n    {\\n        artistAddress = projectIdToArtistAddress[_projectId];\\n        pricePerTokenInWei = projectIdToPricePerTokenInWei[_projectId];\\n        invocations = projects[_projectId].invocations;\\n        maxInvocations = projects[_projectId].maxInvocations;\\n        active = projects[_projectId].active;\\n        additionalPayee = projectIdToAdditionalPayee[_projectId];\\n        additionalPayeePercentage = projectIdToAdditionalPayeePercentage[\\n            _projectId\\n        ];\\n        currency = projectIdToCurrencySymbol[_projectId];\\n        currencyAddress = projectIdToCurrencyAddress[_projectId];\\n    }\\n\\n    function projectScriptInfo(uint256 _projectId)\\n        public\\n        view\\n        returns (\\n            string memory scriptJSON,\\n            uint256 scriptCount,\\n            string memory ipfsHash,\\n            bool locked,\\n            bool paused\\n        )\\n    {\\n        scriptJSON = projects[_projectId].scriptJSON;\\n        scriptCount = projects[_projectId].scriptCount;\\n        ipfsHash = projects[_projectId].ipfsHash;\\n        locked = projects[_projectId].locked;\\n        paused = projects[_projectId].paused;\\n    }\\n\\n    function projectScriptByIndex(uint256 _projectId, uint256 _index)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        return projects[_projectId].scripts[_index];\\n    }\\n\\n    function projectURIInfo(uint256 _projectId)\\n        public\\n        view\\n        returns (string memory projectBaseURI)\\n    {\\n        projectBaseURI = projects[_projectId].projectBaseURI;\\n    }\\n\\n    function tokensOfOwner(address owner)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return _tokensOfOwner(owner);\\n    }\\n\\n    function getRoyaltyData(uint256 _tokenId)\\n        public\\n        view\\n        returns (\\n            address artistAddress,\\n            address additionalPayee,\\n            uint256 additionalPayeePercentage,\\n            uint256 royaltyFeeByID\\n        )\\n    {\\n        artistAddress = projectIdToArtistAddress[tokenIdToProjectId[_tokenId]];\\n        additionalPayee = projectIdToAdditionalPayee[\\n            tokenIdToProjectId[_tokenId]\\n        ];\\n        additionalPayeePercentage = projectIdToAdditionalPayeePercentage[\\n            tokenIdToProjectId[_tokenId]\\n        ];\\n        royaltyFeeByID = projectIdToSecondaryMarketRoyaltyPercentage[\\n            tokenIdToProjectId[_tokenId]\\n        ];\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        external\\n        view\\n        onlyValidTokenId(_tokenId)\\n        returns (string memory)\\n    {\\n        return\\n            Strings.strConcat(\\n                projects[tokenIdToProjectId[_tokenId]].projectBaseURI,\\n                Strings.uint2str(_tokenId)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/CustomERC721Metadata.sol\": {\r\n      \"content\": \"// File: contracts/CustomERC721Metadata.sol\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./ERC721Enumerable.sol\\\";\\n\\n/**\\n * ERC721 base contract without the concept of tokenUri as this is managed by the parent\\n */\\ncontract CustomERC721Metadata is ERC165, ERC721, ERC721Enumerable {\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /**\\n     * @dev Constructor function\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n    }\\n\\n    /**\\n     * @dev Gets the token name\\n     * @return string representing the token name\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Gets the token symbol\\n     * @return string representing the token symbol\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeMath.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Strings.sol\": {\r\n      \"content\": \"// File: contracts/Strings.sol\\n\\npragma solidity ^0.5.0;\\n\\n//https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\\nlibrary Strings {\\n    function strConcat(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (string memory _concatenatedString)\\n    {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c\\n    ) internal pure returns (string memory _concatenatedString) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d\\n    ) internal pure returns (string memory _concatenatedString) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d,\\n        string memory _e\\n    ) internal pure returns (string memory _concatenatedString) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        bytes memory _bc = bytes(_c);\\n        bytes memory _bd = bytes(_d);\\n        bytes memory _be = bytes(_e);\\n        string memory abcde = new string(\\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\\n        );\\n        bytes memory babcde = bytes(abcde);\\n        uint256 k = 0;\\n        uint256 i = 0;\\n        for (i = 0; i < _ba.length; i++) {\\n            babcde[k++] = _ba[i];\\n        }\\n        for (i = 0; i < _bb.length; i++) {\\n            babcde[k++] = _bb[i];\\n        }\\n        for (i = 0; i < _bc.length; i++) {\\n            babcde[k++] = _bc[i];\\n        }\\n        for (i = 0; i < _bd.length; i++) {\\n            babcde[k++] = _bd[i];\\n        }\\n        for (i = 0; i < _be.length; i++) {\\n            babcde[k++] = _be[i];\\n        }\\n        return string(babcde);\\n    }\\n\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ERC165.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC165` interface.\\n *\\n * Contracts may inherit from this and call `_registerInterface` to declare\\n * their support of an interface.\\n */\\ncontract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor() internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See `IERC165.supportsInterface`.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See `IERC165.supportsInterface`.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ERC721.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Counters.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is ERC165, IERC721 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using Counters for Counters.Counter;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from token ID to owner\\n    mapping(uint256 => address) private _tokenOwner;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to number of owned token\\n    mapping(address => Counters.Counter) private _ownedTokensCount;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    constructor() public {\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n    }\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n\\n        return _ownedTokensCount[owner].current();\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        address owner = _tokenOwner[tokenId];\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: owner query for nonexistent token\\\"\\n        );\\n\\n        return owner;\\n    }\\n\\n    function approve(address to, uint256 tokenId) public {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    function getApproved(uint256 tokenId) public view returns (address) {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    function setApprovalForAll(address to, bool approved) public {\\n        require(to != msg.sender, \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[msg.sender][to] = approved;\\n        emit ApprovalForAll(msg.sender, to, approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(msg.sender, tokenId),\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public {\\n        transferFrom(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        address owner = _tokenOwner[tokenId];\\n        return owner != address(0);\\n    }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _tokenOwner[tokenId] = to;\\n        _ownedTokensCount[to].increment();\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _burn(address owner, uint256 tokenId) internal {\\n        require(\\n            ownerOf(tokenId) == owner,\\n            \\\"ERC721: burn of token that is not own\\\"\\n        );\\n\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[owner].decrement();\\n        _tokenOwner[tokenId] = address(0);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId) internal {\\n        _burn(ownerOf(tokenId), tokenId);\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        require(\\n            ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[from].decrement();\\n        _ownedTokensCount[to].increment();\\n\\n        _tokenOwner[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(\\n            msg.sender,\\n            from,\\n            tokenId,\\n            _data\\n        );\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    function _clearApproval(uint256 tokenId) private {\\n        if (_tokenApprovals[tokenId] != address(0)) {\\n            _tokenApprovals[tokenId] = address(0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ERC721Enumerable.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => uint256[]) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Constructor function.\\n     */\\n    constructor() public {\\n        // register the supported interface to conform to ERC721Enumerable via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\\n     * @param owner address owning the tokens list to be accessed\\n     * @param index uint256 representing the index to be accessed of the requested tokens list\\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            index < balanceOf(owner),\\n            \\\"ERC721Enumerable: owner index out of bounds\\\"\\n        );\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev Gets the total amount of tokens stored by the contract.\\n     * @return uint256 representing the total amount of tokens\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev Gets the token ID at a given index of all the tokens in this contract\\n     * Reverts if the index is greater or equal to the total number of tokens.\\n     * @param index uint256 representing the index to be accessed of the tokens list\\n     * @return uint256 token ID at the given index of the tokens list\\n     */\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\n        require(\\n            index < totalSupply(),\\n            \\\"ERC721Enumerable: global index out of bounds\\\"\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        super._transferFrom(from, to, tokenId);\\n\\n        _removeTokenFromOwnerEnumeration(from, tokenId);\\n\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to mint a new token.\\n     * Reverts if the given token ID already exists.\\n     * @param to address the beneficiary that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        super._mint(to, tokenId);\\n\\n        _addTokenToOwnerEnumeration(to, tokenId);\\n\\n        _addTokenToAllTokensEnumeration(tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token.\\n     * Reverts if the token does not exist.\\n     * Deprecated, use _burn(uint256) instead.\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(address owner, uint256 tokenId) internal {\\n        super._burn(owner, tokenId);\\n\\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\\n        _ownedTokensIndex[tokenId] = 0;\\n\\n        _removeTokenFromAllTokensEnumeration(tokenId);\\n    }\\n\\n    /**\\n     * @dev Gets the list of token IDs of the requested owner.\\n     * @param owner address owning the tokens\\n     * @return uint256[] List of token IDs owned by the requested address\\n     */\\n    function _tokensOfOwner(address owner)\\n        internal\\n        view\\n        returns (uint256[] storage)\\n    {\\n        return _ownedTokens[owner];\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\\n        _ownedTokens[to].push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the _ownedTokensIndex mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId)\\n        private\\n    {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        _ownedTokens[from].length--;\\n\\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\\n        // lastTokenId, or just over the end of the array if the token was the last one).\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        _allTokens.length--;\\n        _allTokensIndex[tokenId] = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IERC165.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others (`ERC165Checker`).\\n *\\n * For an implementation, see `ERC165`.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IERC721.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ncontract IERC721 is IERC165 {\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of NFTs in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the NFT specified by `tokenId`.\\n     */\\n    function ownerOf(uint256 tokenId) public view returns (address owner);\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     *\\n     *\\n     * Requirements:\\n     * - `from`, `to` cannot be zero.\\n     * - `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this\\n     * NFT by either `approve` or `setApproveForAll`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public;\\n\\n    /**\\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Requirements:\\n     * - If the caller is not `from`, it must be approved to move this NFT by\\n     * either `approve` or `setApproveForAll`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public;\\n\\n    function approve(address to, uint256 tokenId) public;\\n\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) public;\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Address.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/utils/Address.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * > It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Counters.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/drafts/Counters.sol\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IERC721Receiver.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\\n\\npragma solidity ^0.5.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ncontract IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IERC721Enumerable.sol\": {\r\n      \"content\": \"// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract IERC721Enumerable is IERC721 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        returns (uint256 tokenId);\\n\\n    function tokenByIndex(uint256 index) public view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_randomizerContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addMintWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerTokenInWei\",\"type\":\"uint256\"}],\"name\":\"addProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_script\",\"type\":\"string\"}],\"name\":\"addProjectScript\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"additionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"additionalPayeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFeeByID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"hashToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMintWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artist\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"license\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToAdditionalPayee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToAdditionalPayeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToArtistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToCurrencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToCurrencySymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToPricePerTokenInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdToSecondaryMarketRoyaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"projectScriptByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectScriptInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"scriptJSON\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"scriptCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerTokenInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invocations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvocations\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"additionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"additionalPayeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"projectURIInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"projectBaseURI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomizerContract\",\"outputs\":[{\"internalType\":\"contract IRandomizer\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeMintWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"removeProjectLastScript\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"renderProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"renderProviderPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectIsActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectIsLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"toggleProjectIsPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_additionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_additionalPayeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateProjectAdditionalPayeeInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"}],\"name\":\"updateProjectArtistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectArtistName\",\"type\":\"string\"}],\"name\":\"updateProjectArtistName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"updateProjectBaseURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_currencySymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"}],\"name\":\"updateProjectCurrencyInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectDescription\",\"type\":\"string\"}],\"name\":\"updateProjectDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"updateProjectIpfsHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectLicense\",\"type\":\"string\"}],\"name\":\"updateProjectLicense\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxInvocations\",\"type\":\"uint256\"}],\"name\":\"updateProjectMaxInvocations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"updateProjectName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerTokenInWei\",\"type\":\"uint256\"}],\"name\":\"updateProjectPricePerTokenInWei\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scriptId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_script\",\"type\":\"string\"}],\"name\":\"updateProjectScript\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectScriptJSON\",\"type\":\"string\"}],\"name\":\"updateProjectScriptJSON\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondMarketRoyalty\",\"type\":\"uint256\"}],\"name\":\"updateProjectSecondaryMarketRoyaltyPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectWebsite\",\"type\":\"string\"}],\"name\":\"updateProjectWebsite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomizerAddress\",\"type\":\"address\"}],\"name\":\"updateRandomizerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renderProviderAddress\",\"type\":\"address\"}],\"name\":\"updateRenderProviderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_renderProviderPercentage\",\"type\":\"uint256\"}],\"name\":\"updateRenderProviderPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GenArt721CoreV2_Plottables", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f9abd90b27dbfbed4ef05cadcd9c95cdc88d52c2000000000000000000000000000000000000000000000000000000000000000a506c6f747461626c6573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005504c4f5453000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}