{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/MarketBids.sol\": {\r\n      \"content\": \"//*~~~> SPDX-License-Identifier: MIT make it better, stronger, faster\\n\\n/*~~~>\\n    Thank you Phunks for your inspiration and phriendship.\\n      Never stop phighting, never surrender, always stand up for what is right and make the best of all situations towards all people.\\n      Phunks are phreedom phighters!\\n        \\\"When the power of love overcomes the love of power the world will know peace.\\\" - Jimi Hendrix <3\\n\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((((((((((((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((((((((((((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((((((((((((((((((((((@@@@@##############################%%%%%@@@@@((((((((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((((((((((((((((((((((@@@@@##############################%%%%%@@@@@((((((((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((@@@@@########################################%%%%%@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((@@@@@########################################%%%%%@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###############@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###############@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@##########@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((@PhunkyJON was here programming trustless, unstoppable contracts@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@/////////////////////////////////////////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@/////////////////////////////////////////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@#PHUNKYJON///////////////#PHUNKYJON//////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@#PHUNKYJON///////////////#PHUNKYJON//////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@/////@EYES////////////////////@EYES///////////////@@@@@((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@/////@EYES////////////////////@EYES///////////////EAR@@((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@//////////////////////////////////////////////////EAR@@((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@//////////////////////////////////////////////////EAR@@((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@/////////////////////////////////////////////@@@@@@@@@@((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@/////////////////////////////////////////////@@@@@@@@@@((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@//////////NOSE@NOSE@////////////////////#####@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((SMOKE((((((((((@@@@@//////////NOSE@NOSE@////////////////////#####@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((@@@@@#####//////////////////////////////##########@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((@@@@@#####//////////////////////////////##########@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((@SPLIFF@SPLIFF@SPLIFF@SPLIFF@@###################################@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((@SPLIFF@SPLIFF@SPLIFF@SPLIFF@@###################################@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((EMBER(((((,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@MOUTH&&&&&####################@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((EMBER(((((,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@MOUTH&&&&&####################@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((@SPLIFF@SPLIFF@SPLIFF@SPLIFF@@##############################/////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((@SPLIFF@SPLIFF@SPLIFF@SPLIFF@@##############################/////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((((((((((((((((((((((@@@@@##############################//////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%(((((((((((((((((((((((((((((((((((@@@@@##############################//////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@///////////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@///////////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((@@@@@///////////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((@@@@@///////////////@@@@@(((((((((((((((((((((((((%%%%%\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@///////////////@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@///////////////@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\\n\\n <~~~*/\\n\\n\\n/*~~~> \\n  Thank you Chopper and OGKenobi for your inspiration on this contract and your hard work on NLL!\\n<~~~*/\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./interfaces/IEscrow.sol\\\";\\nimport \\\"./interfaces/INFTMarket.sol\\\";\\nimport \\\"./interfaces/IRoleProvider.sol\\\";\\nimport \\\"./interfaces/IRewardsController.sol\\\";\\n\\ninterface IERC721 {\\n  function ownerOf(uint tokenId) external view returns(address);\\n  function balanceOf(address owner) external view returns(uint);\\n}\\n\\ncontract MarketBids is ReentrancyGuard {\\n\\n  //*~~~> State variables\\n  uint public bidMin;\\n  uint private bidIds;\\n  uint private blindBidIds;\\n  uint[] private openStorage;\\n  uint[] private blindOpenStorage;\\n  address public roleAdd;\\n\\n  //*~~~> global address variable from Role Provider contract\\n  bytes32 public constant MARKET = keccak256(\\\"MARKET\\\");\\n  bytes32 public constant NFT = keccak256(\\\"NFT\\\");\\n  bytes32 public constant REWARDS = keccak256(\\\"REWARDS\\\");\\n  bytes32 public constant OFFERS = keccak256(\\\"OFFERS\\\");\\n  bytes32 public constant TRADES = keccak256(\\\"TRADES\\\");\\n\\n  //*~~~> Roles for designated accessibility\\n  bytes32 public constant PROXY_ROLE = keccak256(\\\"PROXY_ROLE\\\");\\n  bytes32 public constant DEV = keccak256(\\\"DEV\\\");\\n\\n  modifier hasAdmin(){\\n    require(IRoleProvider(roleAdd).hasTheRole(PROXY_ROLE, msg.sender), \\\"DOES NOT HAVE ADMIN ROLE\\\");\\n    _;\\n  }\\n  modifier hasContractAdmin(){\\n    require(IRoleProvider(roleAdd).hasContractRole(msg.sender), \\\"DOES NOT HAVE CONTRACT ROLE\\\");\\n    _;\\n  }\\n  modifier hasDevAdmin(){\\n    require(IRoleProvider(roleAdd).hasTheRole(DEV, msg.sender), \\\"DOES NOT HAVE DEV ROLE\\\");\\n    _;\\n  }\\n  \\n  constructor(address role) {\\n    bidMin = 1e15;\\n    roleAdd = role;\\n  }\\n\\n  //*~~~> Declaring object structures for listed items with bids\\n  struct Bid {\\n    uint itemId;\\n    uint tokenId;\\n    uint bidId;\\n    uint bidValue;\\n    uint timestamp;\\n    address payable bidder;\\n    address payable seller;\\n  }\\n\\n  //*~~~> Declaring object structure for blind bids\\n  struct BlindBid {\\n    bool specific;\\n    uint tokenId;\\n    uint bidId;\\n    uint bidValue;\\n    uint amount1155;\\n    address payable collectionBid;\\n    address payable bidder;\\n  }\\n\\n  //*~~~> Memory array of all Bid ids\\n  mapping (uint256 => Bid) private idToNftBid;\\n\\n  //*~~~> Memory array of Market contract Ids to bid Ids\\n  mapping (uint256 => uint256) private mktIdToBidId;\\n\\n  //*~~~> Memory array of all Blind Bids\\n  mapping (uint256 => BlindBid) private idToBlindBid;\\n\\n  //*~~~> Declaring event object structures for bids\\n  event BidEntered(\\n    uint tokenId,\\n    uint itemId,\\n    uint bidId,\\n    uint bidValue, \\n    address indexed bidder,\\n    address indexed seller\\n    );\\n\\n  //*~~~> Declaring event object structure for blind bids\\n  event BlindBidentered (\\n    bool isSpecified,\\n    uint indexed tokenId,\\n    uint blindBidId,\\n    uint bidValue,\\n    uint amount1155,\\n    address indexed collectionBid,\\n    address indexed bidder\\n  );\\n\\n  //*~~~> Declaring event object structures for Bid accepted\\n  event BlindBidAccepted(\\n    uint indexed tokenId,\\n    uint blindBidId,\\n    uint bidValue,\\n    address indexed bidder,\\n    address indexed seller\\n  );\\n\\n  //*~~~> Declaring event object structures for Bid accepted\\n  event BidAccepted(\\n    uint indexed tokenId,\\n    uint bidId,\\n    uint bidValue,\\n    address indexed bidder,\\n    address indexed seller\\n  );\\n\\n  //*~~~> Declaring event object structures for bids withdrawn\\n  event BidWithdrawn(\\n    uint256 indexed tokenId, \\n    uint indexed bidId,\\n    address indexed bidder\\n    );\\n\\n  //*~~~> Declaring event object structures for blind bids withdrawn\\n  event BlindBidWithdrawn(\\n    uint indexed blindBidId,\\n    address indexed bidder\\n    );\\n\\n  //*~~~> Decalring event object structures for bids refunded\\n  event BidRefunded(\\n    uint indexed tokenId,\\n    uint indexed bidId,\\n    address indexed bidder\\n  );\\n\\n  //~~~> To set the minimum bid price\\n  function setBidMinimum(uint minWei) external hasDevAdmin returns(bool){\\n    bidMin = minWei;\\n    return true;\\n  }\\n\\n  /// @notice \\n  //*~~~> Allows user to enter bids on listed market items\\n  /// @dev \\n    /*~~~>\\n      tokenId: token_id of the NFT to be bid on;\\n      itemId: itemId for internal storage index in the Market Contract;\\n      bidValue: Value of the bid entered;\\n      seller: ownerOf NFT;\\n    <~~~*/\\n  /// @return Bool\\n  function enterBidForNft(\\n    uint[] memory tokenId,\\n    uint[] memory itemId,\\n    uint[] memory bidValue,\\n    address[] memory seller\\n  ) external payable returns(bool){\\n    uint total;\\n    for (uint i=0;i < tokenId.length;i++){\\n      total += bidValue[i];\\n      require(bidValue[i] > bidMin, \\\"Must be greater than min. bid.\\\");\\n      /*~~~> \\n        Check for the case where there is a bid.\\n          If the bid entered is lesser than the existing bid, revert.\\n          If the existing bid is lesser than the bid entered, \\n            transfer the existing biddder the existing bidValue of the bid. \\n      <~~~*/\\n      uint id = mktIdToBidId[itemId[i]];\\n      if (id > 0) {\\n        Bid memory existing = idToNftBid[id];\\n        if (bidValue[i] <= existing.bidValue) revert();\\n        if (existing.bidValue < bidValue[i]) {\\n          //*~~~> Refund the failing bid\\n          require(sendEther(existing.bidder, existing.bidValue));\\n        }\\n      }\\n      uint bidId;\\n      uint len = openStorage.length;\\n      if (len>=1){\\n        bidId = openStorage[len-1];\\n        removeId(0);\\n      } else {\\n        bidId = bidIds+=1;\\n      }\\n      idToNftBid[bidId] = Bid(itemId[i], tokenId[i], bidId, bidValue[i], block.timestamp, payable(msg.sender), payable(seller[i]));\\n\\n      emit BidEntered(\\n        tokenId[i],\\n        itemId[i],\\n        bidId,\\n        bidValue[i],\\n        msg.sender, \\n        seller[i]);\\n    }\\n    require(total == msg.value);\\n    return true;\\n  }\\n\\n  /// @notice\\n  //*~~~> External function for entering specific or collection wide blind bids\\n  /// @dev \\n      /*~~~>\\n        isSpecific: Is bid for a specific NFT(true) or collection-wide bid(false?;\\n        value: Bid value;\\n        tokenId: token_id being bid on;\\n        amount: Amount to be bid on if the specific item is an ERC1155;\\n        bidAddress: Address of collection to be bid on;\\n      <~~~*/\\n  /// @return Bool\\n  function enterBlindBid(\\n    bool[] memory isSpecific, \\n    uint[] memory value, \\n    uint[] memory tokenId, \\n    uint[] memory amount1155, \\n    address[] memory bidAddress) external payable nonReentrant returns(bool){\\n    \\n    uint total;\\n    for (uint i=0;i<bidAddress.length;i++){\\n      total += value[i];\\n      require(value[i] > bidMin, \\\"Must be greater than min. bid.\\\");\\n      uint bidId;\\n      uint len = blindOpenStorage.length;\\n      if (len>=1){\\n        bidId=blindOpenStorage[len-1];\\n        removeId(1);\\n      } else {\\n        bidId = blindBidIds+=1;\\n      }\\n      idToBlindBid[bidId] = BlindBid(isSpecific[i], tokenId[i], bidId, value[i], amount1155[i], payable(bidAddress[i]), payable(msg.sender));\\n\\n      emit BlindBidentered(\\n        isSpecific[i],\\n        tokenId[i],\\n        bidId,\\n        value[i],\\n        amount1155[i],\\n        bidAddress[i],\\n        msg.sender\\n      );\\n    }\\n    require(msg.value == total);\\n    return true;\\n  }\\n\\n  /// @notice \\n  //*~~~> External function for accpeting specific or collection wide blind bids\\n  /// @dev \\n      /*~~~>\\n        blindBidId: Id of the Bid for reference;\\n        tokenId: token_id being bid on;\\n        listedId: If the item is listed on Market, \\n          and a regular bid is placed on it,\\n          this allows us to update the market listings;\\n        is1155: if 1155(true);\\n      <~~~*/\\n  /// @return Bool\\n  function acceptBlindBid(\\n    uint[] memory blindBidId, \\n    uint[] memory tokenId,\\n    uint[] memory listedId, \\n    bool[] memory is1155) external nonReentrant returns(bool){\\n    \\n    address rewardsAdd = IRoleProvider(roleAdd).fetchAddress(REWARDS);\\n    address marketAdd = IRoleProvider(roleAdd).fetchAddress(MARKET);\\n    uint balance = IERC721(marketAdd).balanceOf(msg.sender);\\n\\n    for (uint i=0; i<blindBidId.length; i++){\\n      BlindBid memory bid = idToBlindBid[blindBidId[i]];\\n      //*~~~> Disallow random acceptances if specific\\n      if(bid.specific){\\n          require(tokenId[i]==bid.tokenId,\\\"Wrong item!\\\");\\n        }\\n        if(balance<1){\\n          /*~~~> Calculating the platform fee <~~~*/\\n          uint256 saleFee = calcFee(bid.bidValue);\\n          uint256 userAmnt = (bid.bidValue - saleFee);\\n          /// send saleFee to rewards controller\\n          require(sendEther(rewardsAdd, saleFee));\\n          /// send (bidValue - saleFee) to user\\n          require(sendEther(msg.sender, userAmnt));\\n        } else {\\n          require(sendEther(msg.sender, bid.bidValue));\\n        }\\n        if (!is1155[i]){\\n        //*~~~> Disallow if the msg.sender is not the token owner\\n        require(IERC721(bid.collectionBid).ownerOf(tokenId[i]) == msg.sender, \\\"Not the token owner!\\\");\\n        if(listedId[i]>0){\\n            require(INFTMarket(marketAdd).transferNftForSale(bid.bidder, listedId[i]));\\n          } else {\\n            require(transferFromERC721(bid.collectionBid, tokenId[i], bid.bidder));\\n          }\\n      } else {\\n        uint bal = IERC1155(bid.collectionBid).balanceOf(msg.sender, tokenId[i]);\\n        require( bal> 0, \\\"Not the token owner!\\\");\\n        if(listedId[i]==0){\\n          IERC1155(bid.collectionBid).safeTransferFrom(address(msg.sender), bid.bidder, tokenId[i], bid.amount1155, \\\"\\\");\\n        } else {\\n          require(INFTMarket(marketAdd).transferNftForSale(bid.bidder, listedId[i]));\\n        }\\n      }\\n      blindOpenStorage.push(blindBidId[i]);\\n      idToBlindBid[blindBidId[i]] = BlindBid(false, 0, blindBidId[i], 0, 0, payable(0x0), payable(0x0));\\n      emit BlindBidAccepted(tokenId[i], blindBidId[i], bid.bidValue, bid.bidder, msg.sender);\\n    }\\n    return true;\\n  }\\n  \\n  /// @notice \\n  //*~~~> External function for accepting bids\\n  /// @dev \\n      /*~~~>\\n        bidId: Id of the Bid;\\n      <~~~*/\\n  /// @return Bool\\n  function acceptBidForNft(\\n      uint[] memory bidId\\n  ) external nonReentrant returns (bool) {\\n    address marketNft = IRoleProvider(roleAdd).fetchAddress(NFT);\\n    address marketAdd = IRoleProvider(roleAdd).fetchAddress(MARKET);\\n    address offersAdd = IRoleProvider(roleAdd).fetchAddress(OFFERS);\\n    address tradesAdd = IRoleProvider(roleAdd).fetchAddress(TRADES);\\n    address rewardsAdd = IRoleProvider(roleAdd).fetchAddress(REWARDS);\\n\\n    uint balance = IERC721(marketNft).balanceOf(msg.sender);\\n    for (uint i=0; i<bidId.length; i++){\\n      Bid memory bid = idToNftBid[bidId[i]];\\n      require(msg.sender == bid.seller);\\n      if(balance<1) {\\n          /*~~~> Calculating the platform fee <~~~*/\\n          uint256 saleFee = calcFee(bid.bidValue);\\n          uint256 userAmnt = (bid.bidValue - saleFee);\\n          /// send saleFee to rewards controller\\n          require(sendEther(rewardsAdd, saleFee));\\n          /// send (bidValue - saleFee) to user\\n          require(sendEther(bid.seller, userAmnt));\\n      } else {\\n        require(sendEther(bid.seller, bid.bidValue));\\n      }\\n      /*~~~> Check for the case where there is a trade and refund it. <~~~*/\\n      uint offerId = IOffers(offersAdd).fetchOfferId(bid.itemId);\\n      if (offerId > 0) {\\n      /*~~~> Kill offer and refund amount <~~~*/\\n        //*~~~> Call the contract to refund the NFT offered for trade \\n        require(IOffers(offersAdd).refundOffer(bid.itemId, offerId));\\n      }\\n      /*~~~> Check for the case where there is an offer and refund it. <~~~*/\\n      uint tradeId = ITrades(tradesAdd).fetchTradeId(bid.itemId);\\n      if (tradeId > 0) {\\n      /*~~~> Kill offer and refund amount <~~~*/\\n        //*~~~> Call the contract to refund the ERC20 offered for trade \\n        require(ITrades(tradesAdd).refundTrade(bid.itemId, tradeId));\\n      }\\n      require(INFTMarket(marketAdd).transferNftForSale(address(bid.bidder), bid.itemId));\\n\\n      openStorage.push(bidId[i]);\\n      idToNftBid[bidId[i]] = Bid(0, 0, 0, 0, 0, payable(address(0x0)), payable(address(0x0)));\\n      \\n      emit BidAccepted(bid.itemId, bidId[i], bid.bidValue, bid.bidder, bid.seller);\\n    }\\n  return true;\\n  }\\n\\n  /// @notice \\n    //*~~~> External function to withdraw both blind or regular bids\\n  /// @dev\\n    /*~~~>\\n      bidId: Id of the bid in storage to be withdrawn;\\n      isBlind: if it is a blind blind (true);\\n    <~~~*/\\n  /// @return Bool\\n  function withdrawBid(uint[] memory bidId, bool[] memory isBlind) external nonReentrant returns(bool){\\n    for (uint i=0;i<bidId.length;i++){\\n      if (isBlind[i]){\\n        BlindBid memory bid = idToBlindBid[bidId[i]];\\n        if (bid.bidder != msg.sender) revert();\\n        require(sendEther(bid.bidder, bid.bidValue));\\n        blindOpenStorage.push(bidId[i]);\\n        idToBlindBid[bidId[i]] = BlindBid(false, 0, 0, 0, 0, payable(address(0x0)), payable(address(0x0)));\\n        emit BlindBidWithdrawn(bidId[i], msg.sender);\\n      } else {\\n        Bid memory bid = idToNftBid[bidId[i]];\\n        require(bid.timestamp < block.timestamp - 1 days);\\n        if (bid.bidder != msg.sender) revert();\\n        require(sendEther(bid.bidder, bid.bidValue));\\n        openStorage.push(bidId[i]);\\n        idToNftBid[bidId[i]] = Bid(0, 0, 0, 0, 0, payable(address(0x0)), payable(address(0x0)));\\n        emit BidWithdrawn(bid.tokenId, bidId[i], msg.sender);\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /// @notice \\n    //*~~~> only CONTRACT_ROLE function to refund regular bids if the item is bought\\n  /// @dev\\n    /*~~~>\\n      tokenId: Id of the NFT to be refunded;\\n      bidId: Id for the bid item to return;\\n    <~~~*/\\n  /// @return Bool\\n  function refundBid(uint bidId) external nonReentrant hasContractAdmin returns(bool) {\\n    Bid memory bid = idToNftBid[bidId];\\n    require(sendEther(bid.bidder, bid.bidValue));\\n    openStorage.push(bidId);\\n    emit BidRefunded(bid.tokenId, bidId, msg.sender);\\n    idToNftBid[bidId] = Bid(0, 0, 0, 0, 0, payable(address(0x0)), payable(address(0x0)));\\n    return true;\\n  }\\n\\n  /// @notice \\n    /*~~~> \\n      Internal function to transfer ERC721 NFTs, including crypto kitties/punks\\n    <~~~*/\\n  /// @dev\\n    /*~~~>\\n      assetAddr: address of the token to be transfered;\\n      tokenId: Id of the token to be transfered;\\n      to: to be transfered to;\\n    <~~~*/\\nfunction transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual returns(bool){\\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n    bytes memory data;\\n    if (assetAddr == kitties) {\\n        //*~~~> Cryptokitties.\\n        data = abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", msg.sender, to, tokenId);\\n    } else if (assetAddr == punks) {\\n        //*~~~> CryptoPunks.\\n        bytes memory punkIndexToAddress = abi.encodeWithSignature(\\\"punkIndexToAddress(uint256)\\\", tokenId);\\n        (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\\n        (address nftOwner) = abi.decode(result, (address));\\n        require(checkSuccess && nftOwner == msg.sender, \\\"Not the NFT owner\\\");\\n        data = abi.encodeWithSignature(\\\"transferPunk(address,uint256)\\\", msg.sender, tokenId);\\n    } else {\\n        //*~~~> Default.\\n        //*~~~> We push to avoid an unneeded transfer.\\n        data = abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256)\\\", msg.sender, to, tokenId);\\n    }\\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\\n    require(success, string(resultData));\\n    return true;\\n  }\\n\\n  /// @notice\\n  /*~~~> \\n    Internal function for sending ether\\n  <~~~*/\\n  /// @return Bool\\n  function sendEther(address recipient, uint ethvalue) internal returns (bool){\\n    (bool success, bytes memory data) = address(recipient).call{value: ethvalue}(\\\"\\\");\\n    return(success);\\n  }\\n\\n  /// @notice \\n  /*~~~> \\n    Calculating the platform fee, \\n      Base fee set at 2% (i.e. value * 200 / 10,000) \\n      Future fees can be set by the controlling DAO \\n    <~~~*/\\n  /// @return platform fee\\n  function calcFee(uint256 value) internal returns (uint256) {\\n      address rewardsAdd = IRoleProvider(roleAdd).fetchAddress(REWARDS);\\n      uint fee = IRewardsController(rewardsAdd).getFee();\\n      uint256 percent = ((value * fee) / 10000);\\n      return percent;\\n    }\\n\\n  /// @notice \\n  /*~~~> \\n    Internal function for removing elements from an array\\n    Only used for internal storage array index recycling\\n\\n      In order to reduce storage array size of listed items \\n        while maintaining specific enumerable bidId's, \\n        any sold or removed item spots are re-used by referring to their index,\\n        else a new storage spot is created;\\n\\n        We use the last item in the storage (length of array - 1),\\n        in order to pop off the item and avoid rewriting \\n  <~~~*/\\n  function removeId(uint store) internal {\\n      if (store==0){\\n      openStorage.pop();\\n      } else if (store==1){\\n      blindOpenStorage.pop();\\n      }\\n    }\\n\\n  /// @notice \\n  //*~~~> External read functions\\n  function fetchBidItems() external view returns (Bid[] memory) {\\n    uint bidcount = bidIds;\\n    Bid[] memory bids = new Bid[](bidcount);\\n    for (uint i=0; i < bidcount; i++) {\\n      if (idToNftBid[i + 1].itemId > 0) {\\n        Bid storage currentItem = idToNftBid[i + 1];\\n        bids[i] = currentItem;\\n      }\\n    }\\n    return bids;\\n  }\\n\\n  function fetchBidItemsByBidder(address bidder) external view returns (Bid[] memory) {\\n    uint bidcount = bidIds;\\n    Bid[] memory bids = new Bid[](bidcount);\\n    for (uint i=0; i < bidcount; i++) {\\n      if (idToNftBid[i + 1].bidder == bidder) {\\n        Bid storage currentItem = idToNftBid[i + 1];\\n        bids[i] = currentItem;\\n      }\\n    }\\n    return bids;\\n  }\\n\\n  function fetchBlindBidItems() external view returns (BlindBid[] memory) {\\n    uint bidcount = blindBidIds;\\n    BlindBid[] memory bids = new BlindBid[](bidcount);\\n    for (uint i=0; i < bidcount; i++) {\\n      if (idToBlindBid[i + 1].bidValue > 0) {\\n        BlindBid storage currentItem = idToBlindBid[i + 1];\\n        bids[i] = currentItem;\\n      }\\n    }\\n    return bids;\\n  }\\n\\n  function fetchBlindBidItemsByBidder(address bidder) external view returns (BlindBid[] memory) {\\n    uint bidcount = blindBidIds;\\n    BlindBid[] memory bids = new BlindBid[](bidcount);\\n    for (uint i=0; i < bidcount; i++) {\\n      if (idToBlindBid[i + 1].bidder == bidder) {\\n        BlindBid storage currentItem = idToBlindBid[i + 1];\\n        bids[i] = currentItem;\\n      }\\n    }\\n    return bids;\\n  }\\n\\n  function fetchBlindBidItemById(uint bidId) external view returns (BlindBid memory bid) {\\n    BlindBid memory currentItem = idToBlindBid[bidId];\\n    return currentItem;\\n  }\\n\\n  function fetchBidItemById(uint tokenId) external view returns (Bid memory bid) { \\n    uint bidcount = bidIds;\\n    for (uint i=0; i < bidcount; i++) {\\n      if (idToNftBid[i + 1].tokenId == tokenId) {\\n        Bid memory currentItem = idToNftBid[i + 1];\\n        return currentItem;\\n      }\\n    }\\n  }\\n\\n  function fetchBidId(uint marketId) external view returns (uint id) {\\n    uint _id = mktIdToBidId[marketId];\\n    return _id;\\n  }\\n\\n  ///@notice\\n  /*~~~> External ETH transfer forwarded to role provider contract <~~~*/\\n  event FundsForwarded(uint value, address from, address to);\\n  receive() external payable {\\n    require(sendEther(roleAdd, msg.value));\\n      emit FundsForwarded(msg.value, msg.sender, roleAdd);\\n  }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IEscrow.sol\": {\r\n      \"content\": \"//*~~~> SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IOffers {\\n  function fetchOfferId(uint marketId) external returns(uint);\\n  function refundOffer(uint itemID, uint offerId) external returns (bool);\\n}\\ninterface ITrades {\\n  function fetchTradeId(uint marketId) external returns(uint);\\n  function refundTrade(uint itemId, uint tradeId) external returns (bool);\\n}\\ninterface IBids {\\n  function fetchBidId(uint marketId) external returns(uint);\\n  function refundBid(uint bidId) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/INFTMarket.sol\": {\r\n      \"content\": \"//*~~~> SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface INFTMarket { \\n    function transferNftForSale(address receiver, uint itemId) external returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardsController.sol\": {\r\n      \"content\": \"//*~~~> SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IRewardsController {\\n  function createNftHodler(uint tokenId) external returns (bool);\\n  function depositERC20Rewards(uint amount, address tokenAddress) external returns(bool);\\n  function getFee() external view returns(uint);\\n  function setFee(uint fee) external returns (bool);\\n  function depositEthRewards(uint reward) external payable returns(bool);\\n  function createUser(address userAddress) external returns(bool);\\n  function setUser(bool canClaim, address userAddress) external returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRoleProvider.sol\": {\r\n      \"content\": \"//*~~~> SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IRoleProvider {\\n  function hasTheRole(bytes32 role, address theaddress) external returns(bool);\\n  function fetchAddress(bytes32 thevar) external returns(address);\\n  function hasContractRole(address theaddress) external view returns(bool);\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"role\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"BidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blindBidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"BlindBidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blindBidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BlindBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSpecified\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blindBidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1155\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionBid\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BlindBidentered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FundsForwarded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEV\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFERS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADES\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bidId\",\"type\":\"uint256[]\"}],\"name\":\"acceptBidForNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blindBidId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"listedId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"is1155\",\"type\":\"bool[]\"}],\"name\":\"acceptBlindBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bidValue\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"seller\",\"type\":\"address[]\"}],\"name\":\"enterBidForNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"isSpecific\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount1155\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"bidAddress\",\"type\":\"address[]\"}],\"name\":\"enterBlindBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"fetchBidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"fetchBidItemById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct MarketBids.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchBidItems\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct MarketBids.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"fetchBidItemsByBidder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct MarketBids.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"fetchBlindBidItemById\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"specific\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1155\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"collectionBid\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"}],\"internalType\":\"struct MarketBids.BlindBid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchBlindBidItems\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"specific\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1155\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"collectionBid\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"}],\"internalType\":\"struct MarketBids.BlindBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"fetchBlindBidItemsByBidder\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"specific\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1155\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"collectionBid\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"}],\"internalType\":\"struct MarketBids.BlindBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"}],\"name\":\"refundBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minWei\",\"type\":\"uint256\"}],\"name\":\"setBidMinimum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bidId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isBlind\",\"type\":\"bool[]\"}],\"name\":\"withdrawBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MarketBids", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000f4bc1b7afbcbd8fc985cfd2ba50c64deb0306330", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}