{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/SpoolStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"./external/@openzeppelin/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"./external/spool-core/SpoolOwnable.sol\\\";\\r\\nimport \\\"./interfaces/ISpoolStaking.sol\\\";\\r\\n\\r\\nimport \\\"./external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./external/@openzeppelin/utils/SafeCast.sol\\\";\\r\\nimport \\\"./interfaces/IVoSpoolRewards.sol\\\";\\r\\nimport \\\"./interfaces/IVoSPOOL.sol\\\";\\r\\nimport \\\"./interfaces/IRewardDistributor.sol\\\";\\r\\n\\r\\n/* ========== STRUCTS ========== */\\r\\n\\r\\n// The reward configuration struct, containing all the necessary data of a typical Synthetix StakingReward contract\\r\\nstruct RewardConfiguration {\\r\\n\\tuint32 rewardsDuration;\\r\\n\\tuint32 periodFinish;\\r\\n\\tuint192 rewardRate; // rewards per second multiplied by accuracy\\r\\n\\tuint32 lastUpdateTime;\\r\\n\\tuint224 rewardPerTokenStored;\\r\\n\\tmapping(address => uint256) userRewardPerTokenPaid;\\r\\n\\tmapping(address => uint256) rewards;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice Implementation of the {ISpoolStaking} interface.\\r\\n *\\r\\n * @dev\\r\\n * An adaptation of the Synthetix StakingRewards contract to support multiple tokens:\\r\\n *\\r\\n * https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\\r\\n *\\r\\n * At stake, gradual voSPOOL (Spool DAO Voting Token) is minted and accumulated every week.\\r\\n * At unstake all voSPOOL is burned. The maturing process of voSPOOL restarts.\\r\\n */\\r\\ncontract SpoolStaking is ReentrancyGuardUpgradeable, SpoolOwnable, ISpoolStaking {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\t/* ========== CONSTANTS ========== */\\r\\n\\r\\n\\t/// @notice Multiplier used when dealing reward calculations\\r\\n\\tuint256 private constant REWARD_ACCURACY = 1e18;\\r\\n\\r\\n\\t/* ========== STATE VARIABLES ========== */\\r\\n\\r\\n\\t/// @notice SPOOL token address\\r\\n\\tIERC20 public immutable stakingToken;\\r\\n\\r\\n\\t/// @notice voSPOOL token address\\r\\n\\tIVoSPOOL public immutable voSpool;\\r\\n\\r\\n\\t/// @notice voSPOOL token rewards address\\r\\n\\tIVoSpoolRewards public immutable voSpoolRewards;\\r\\n\\r\\n\\t/// @notice Spool reward distributor\\r\\n\\tIRewardDistributor public immutable rewardDistributor;\\r\\n\\r\\n\\t/// @notice Reward token configurations\\r\\n\\tmapping(IERC20 => RewardConfiguration) public rewardConfiguration;\\r\\n\\r\\n\\t/// @notice Reward tokens\\r\\n\\tIERC20[] public rewardTokens;\\r\\n\\r\\n\\t/// @notice Blacklisted force-removed tokens\\r\\n\\tmapping(IERC20 => bool) public tokenBlacklist;\\r\\n\\r\\n\\t/// @notice Total SPOOL staked\\r\\n\\tuint256 public totalStaked;\\r\\n\\r\\n\\t/// @notice Account SPOOL staked balance\\r\\n\\tmapping(address => uint256) public balances;\\r\\n\\r\\n\\t/// @notice Whitelist showing if address can stake for another address\\r\\n\\tmapping(address => bool) public canStakeFor;\\r\\n\\r\\n\\t/// @notice Mapping showing if and what address staked for another address\\r\\n\\t/// @dev if address is 0, noone staked for address (or unstaking was permitted)\\r\\n\\tmapping(address => address) public stakedBy;\\r\\n\\r\\n\\t/* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Sets the immutable values\\r\\n\\t *\\r\\n\\t * @param _stakingToken SPOOL token\\r\\n\\t * @param _voSpool Spool voting token (voSPOOL)\\r\\n\\t * @param _voSpoolRewards voSPOOL rewards contract\\r\\n\\t * @param _rewardDistributor reward distributor contract\\r\\n\\t * @param _spoolOwner Spool DAO owner contract\\r\\n\\t */\\r\\n\\tconstructor(\\r\\n\\t\\tIERC20 _stakingToken,\\r\\n\\t\\tIVoSPOOL _voSpool,\\r\\n\\t\\tIVoSpoolRewards _voSpoolRewards,\\r\\n\\t\\tIRewardDistributor _rewardDistributor,\\r\\n\\t\\tISpoolOwner _spoolOwner\\r\\n\\t) SpoolOwnable(_spoolOwner) {\\r\\n\\t\\tstakingToken = _stakingToken;\\r\\n\\t\\tvoSpool = _voSpool;\\r\\n\\t\\tvoSpoolRewards = _voSpoolRewards;\\r\\n\\t\\trewardDistributor = _rewardDistributor;\\r\\n\\t}\\r\\n\\r\\n\\t/* ========== INITIALIZER ========== */\\r\\n\\r\\n\\tfunction initialize() external initializer {\\r\\n\\t\\t__ReentrancyGuard_init();\\r\\n\\t}\\r\\n\\r\\n\\t/* ========== VIEWS ========== */\\r\\n\\r\\n\\tfunction lastTimeRewardApplicable(IERC20 token) public view returns (uint32) {\\r\\n\\t\\treturn uint32(_min(block.timestamp, rewardConfiguration[token].periodFinish));\\r\\n\\t}\\r\\n\\r\\n\\tfunction rewardPerToken(IERC20 token) public view returns (uint224) {\\r\\n\\t\\tRewardConfiguration storage config = rewardConfiguration[token];\\r\\n\\r\\n\\t\\tif (totalStaked == 0) return config.rewardPerTokenStored;\\r\\n\\r\\n\\t\\tuint256 timeDelta = lastTimeRewardApplicable(token) - config.lastUpdateTime;\\r\\n\\r\\n\\t\\tif (timeDelta == 0) return config.rewardPerTokenStored;\\r\\n\\r\\n\\t\\treturn SafeCast.toUint224(config.rewardPerTokenStored + ((timeDelta * config.rewardRate) / totalStaked));\\r\\n\\t}\\r\\n\\r\\n\\tfunction earned(IERC20 token, address account) public view returns (uint256) {\\r\\n\\t\\tRewardConfiguration storage config = rewardConfiguration[token];\\r\\n\\r\\n\\t\\tuint256 accountStaked = balances[account];\\r\\n\\r\\n\\t\\tif (accountStaked == 0) return config.rewards[account];\\r\\n\\r\\n\\t\\tuint256 userRewardPerTokenPaid = config.userRewardPerTokenPaid[account];\\r\\n\\r\\n\\t\\treturn\\r\\n\\t\\t\\t((accountStaked * (rewardPerToken(token) - userRewardPerTokenPaid)) / REWARD_ACCURACY) +\\r\\n\\t\\t\\tconfig.rewards[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction rewardTokensCount() external view returns (uint256) {\\r\\n\\t\\treturn rewardTokens.length;\\r\\n\\t}\\r\\n\\r\\n\\t/* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n\\tfunction stake(uint256 amount) external nonReentrant updateRewards(msg.sender) {\\r\\n\\t\\t_stake(msg.sender, amount);\\r\\n\\r\\n\\t\\tstakingToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n\\t\\temit Staked(msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _stake(address account, uint256 amount) private {\\r\\n\\t\\trequire(amount > 0, \\\"SpoolStaking::_stake: Cannot stake 0\\\");\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\ttotalStaked = totalStaked += amount;\\r\\n\\t\\t\\tbalances[account] += amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// mint gradual voSPOOL for the account\\r\\n\\t\\tvoSpool.mintGradual(account, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction compound(bool doCompoundVoSpoolRewards) external nonReentrant {\\r\\n\\t\\t// collect SPOOL earned fom spool rewards and stake them\\r\\n\\t\\tuint256 reward = _getRewardForCompound(msg.sender, doCompoundVoSpoolRewards);\\r\\n\\r\\n\\t\\tif (reward > 0) {\\r\\n\\t\\t\\t// update user rewards before staking\\r\\n\\t\\t\\t_updateSpoolRewards(msg.sender);\\r\\n\\r\\n\\t\\t\\t// update user voSPOOL based reward before staking\\r\\n\\t\\t\\t// skip updating voSPOOL reward if we compounded form it as it's already updated\\r\\n\\t\\t\\tif (!doCompoundVoSpoolRewards) {\\r\\n\\t\\t\\t\\t_updateVoSpoolReward(msg.sender);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// stake collected reward\\r\\n\\t\\t\\t_stake(msg.sender, reward);\\r\\n\\t\\t\\t// move compounded SPOOL reward to this contract\\r\\n\\t\\t\\trewardDistributor.payReward(address(this), stakingToken, reward);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction unstake(uint256 amount) public nonReentrant notStakedBy updateRewards(msg.sender) {\\r\\n\\t\\trequire(amount > 0, \\\"SpoolStaking::unstake: Cannot withdraw 0\\\");\\r\\n\\t\\trequire(amount <= balances[msg.sender], \\\"SpoolStaking::unstake: Cannot unstake more than staked\\\");\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\ttotalStaked = totalStaked -= amount;\\r\\n\\t\\t\\tbalances[msg.sender] -= amount;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tstakingToken.safeTransfer(msg.sender, amount);\\r\\n\\r\\n\\t\\t// burn gradual voSPOOL for the sender\\r\\n\\t\\tif (balances[msg.sender] == 0) {\\r\\n\\t\\t\\tvoSpool.burnGradual(msg.sender, 0, true);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tvoSpool.burnGradual(msg.sender, amount, false);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit Unstaked(msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getRewardForCompound(address account, bool doCompoundVoSpoolRewards)\\r\\n\\t\\tinternal\\r\\n\\t\\tupdateReward(stakingToken, account)\\r\\n\\t\\treturns (uint256 reward)\\r\\n\\t{\\r\\n\\t\\tRewardConfiguration storage config = rewardConfiguration[stakingToken];\\r\\n\\r\\n\\t\\treward = config.rewards[account];\\r\\n\\t\\tif (reward > 0) {\\r\\n\\t\\t\\tconfig.rewards[account] = 0;\\r\\n\\t\\t\\temit RewardCompounded(msg.sender, reward);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (doCompoundVoSpoolRewards) {\\r\\n\\t\\t\\t_updateVoSpoolReward(account);\\r\\n\\t\\t\\tuint256 voSpoolreward = voSpoolRewards.flushRewards(account);\\r\\n\\r\\n\\t\\t\\tif (voSpoolreward > 0) {\\r\\n\\t\\t\\t\\treward += voSpoolreward;\\r\\n\\t\\t\\t\\temit VoRewardCompounded(msg.sender, reward);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRewards(IERC20[] memory tokens, bool doClaimVoSpoolRewards) external nonReentrant notStakedBy {\\r\\n\\t\\tfor (uint256 i; i < tokens.length; i++) {\\r\\n\\t\\t\\t_getReward(tokens[i], msg.sender);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (doClaimVoSpoolRewards) {\\r\\n\\t\\t\\t_getVoSpoolRewards(msg.sender);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getActiveRewards(bool doClaimVoSpoolRewards) external nonReentrant notStakedBy {\\r\\n\\t\\t_getActiveRewards(msg.sender);\\r\\n\\r\\n\\t\\tif (doClaimVoSpoolRewards) {\\r\\n\\t\\t\\t_getVoSpoolRewards(msg.sender);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUpdatedVoSpoolRewardAmount() external returns (uint256 rewards) {\\r\\n\\t\\t// update rewards\\r\\n\\t\\trewards = voSpoolRewards.updateRewards(msg.sender);\\r\\n\\t\\t// update and store users voSPOOL\\r\\n\\t\\tvoSpool.updateUserVotingPower(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getActiveRewards(address account) internal {\\r\\n\\t\\tuint256 _rewardTokensCount = rewardTokens.length;\\r\\n\\t\\tfor (uint256 i; i < _rewardTokensCount; i++) {\\r\\n\\t\\t\\t_getReward(rewardTokens[i], account);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getReward(IERC20 token, address account) internal updateReward(token, account) {\\r\\n\\t\\tRewardConfiguration storage config = rewardConfiguration[token];\\r\\n\\r\\n\\t\\trequire(config.rewardsDuration != 0, \\\"SpoolStaking::_getReward: Bad reward token\\\");\\r\\n\\r\\n\\t\\tuint256 reward = config.rewards[account];\\r\\n\\t\\tif (reward > 0) {\\r\\n\\t\\t\\tconfig.rewards[account] = 0;\\r\\n\\t\\t\\trewardDistributor.payReward(account, token, reward);\\r\\n\\t\\t\\temit RewardPaid(token, account, reward);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getVoSpoolRewards(address account) internal {\\r\\n\\t\\t_updateVoSpoolReward(account);\\r\\n\\t\\tuint256 reward = voSpoolRewards.flushRewards(account);\\r\\n\\r\\n\\t\\tif (reward > 0) {\\r\\n\\t\\t\\trewardDistributor.payReward(account, stakingToken, reward);\\r\\n\\t\\t\\temit VoSpoolRewardPaid(stakingToken, account, reward);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n\\tfunction stakeFor(address account, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\tnonReentrant\\r\\n\\t\\tcanStakeForAddress(account)\\r\\n\\t\\tupdateRewards(account)\\r\\n\\t{\\r\\n\\t\\t_stake(account, amount);\\r\\n\\t\\tstakingToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\t\\tstakedBy[account] = msg.sender;\\r\\n\\r\\n\\t\\temit StakedFor(account, msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Allow unstake for `allowFor` address\\r\\n\\t * @dev\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - the caller must be the Spool DAO or address that staked for `allowFor` address\\r\\n\\t *\\r\\n\\t * @param allowFor address to allow unstaking for\\r\\n\\t */\\r\\n\\tfunction allowUnstakeFor(address allowFor) external {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t(canStakeFor[msg.sender] && stakedBy[allowFor] == msg.sender) || isSpoolOwner(),\\r\\n\\t\\t\\t\\\"SpoolStaking::allowUnstakeFor: Cannot allow unstaking for address\\\"\\r\\n\\t\\t);\\r\\n\\t\\t// reset address to 0 to allow unstaking\\r\\n\\t\\tstakedBy[allowFor] = address(0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Allows a new token to be added to the reward system\\r\\n\\t *\\r\\n\\t * @dev\\r\\n\\t * Emits an {TokenAdded} event indicating the newly added reward token\\r\\n\\t * and configuration\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - the caller must be the reward Spool DAO\\r\\n\\t * - the reward duration must be non-zero\\r\\n\\t * - the token must not have already been added\\r\\n\\t *\\r\\n\\t */\\r\\n\\tfunction addToken(\\r\\n\\t\\tIERC20 token,\\r\\n\\t\\tuint32 rewardsDuration,\\r\\n\\t\\tuint256 reward\\r\\n\\t) external onlyOwner {\\r\\n\\t\\tRewardConfiguration storage config = rewardConfiguration[token];\\r\\n\\r\\n\\t\\trequire(!tokenBlacklist[token], \\\"SpoolStaking::addToken: Cannot add blacklisted token\\\");\\r\\n\\t\\trequire(rewardsDuration != 0, \\\"SpoolStaking::addToken: Reward duration cannot be 0\\\");\\r\\n\\t\\trequire(config.lastUpdateTime == 0, \\\"SpoolStaking::addToken: Token already added\\\");\\r\\n\\r\\n\\t\\trewardTokens.push(token);\\r\\n\\r\\n\\t\\tconfig.rewardsDuration = rewardsDuration;\\r\\n\\r\\n\\t\\tif (reward > 0) {\\r\\n\\t\\t\\t_notifyRewardAmount(token, reward);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction notifyRewardAmount(\\r\\n\\t\\tIERC20 token,\\r\\n\\t\\tuint32 _rewardsDuration,\\r\\n\\t\\tuint256 reward\\r\\n\\t) external onlyOwner {\\r\\n\\t\\tRewardConfiguration storage config = rewardConfiguration[token];\\r\\n\\t\\tconfig.rewardsDuration = _rewardsDuration;\\r\\n\\t\\trequire(\\r\\n\\t\\t\\trewardConfiguration[token].lastUpdateTime != 0,\\r\\n\\t\\t\\t\\\"SpoolStaking::notifyRewardAmount: Token not yet added\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_notifyRewardAmount(token, reward);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _notifyRewardAmount(IERC20 token, uint256 reward) private updateReward(token, address(0)) {\\r\\n\\t\\tRewardConfiguration storage config = rewardConfiguration[token];\\r\\n\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tconfig.rewardPerTokenStored + (reward * REWARD_ACCURACY) <= type(uint192).max,\\r\\n\\t\\t\\t\\\"SpoolStaking::_notifyRewardAmount: Reward amount too big\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint32 newPeriodFinish = uint32(block.timestamp) + config.rewardsDuration;\\r\\n\\r\\n\\t\\tif (block.timestamp >= config.periodFinish) {\\r\\n\\t\\t\\tconfig.rewardRate = SafeCast.toUint192((reward * REWARD_ACCURACY) / config.rewardsDuration);\\r\\n\\t\\t\\temit RewardAdded(token, reward, config.rewardsDuration);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tuint256 remaining = config.periodFinish - block.timestamp;\\r\\n\\t\\t\\tuint256 leftover = remaining * config.rewardRate;\\r\\n\\t\\t\\tuint192 newRewardRate = SafeCast.toUint192((reward * REWARD_ACCURACY + leftover) / config.rewardsDuration);\\r\\n\\r\\n\\t\\t\\tconfig.rewardRate = newRewardRate;\\r\\n\\t\\t\\temit RewardUpdated(token, reward, leftover, config.rewardsDuration, newPeriodFinish);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tconfig.lastUpdateTime = uint32(block.timestamp);\\r\\n\\t\\tconfig.periodFinish = newPeriodFinish;\\r\\n\\t}\\r\\n\\r\\n\\t// End rewards emission earlier\\r\\n\\tfunction updatePeriodFinish(IERC20 token, uint32 timestamp) external onlyOwner updateReward(token, address(0)) {\\r\\n\\t\\tif (rewardConfiguration[token].lastUpdateTime > timestamp) {\\r\\n\\t\\t\\trewardConfiguration[token].periodFinish = rewardConfiguration[token].lastUpdateTime;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\trewardConfiguration[token].periodFinish = timestamp;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit PeriodFinishUpdated(token, rewardConfiguration[token].periodFinish);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Remove reward from vault rewards configuration.\\r\\n\\t * @dev\\r\\n\\t * Used to sanitize vault and save on gas, after the reward has ended.\\r\\n\\t * Users will be able to claim rewards\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - the caller must be the spool owner or Spool DAO\\r\\n\\t * - cannot claim vault underlying token\\r\\n\\t * - cannot only execute if the reward finished\\r\\n\\t *\\r\\n\\t * @param token Token address to remove\\r\\n\\t */\\r\\n\\tfunction removeReward(IERC20 token) external onlyOwner onlyFinished(token) updateReward(token, address(0)) {\\r\\n\\t\\t_removeReward(token);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Allow an address to stake for another address.\\r\\n\\t * @dev\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - the caller must be the distributor\\r\\n\\t *\\r\\n\\t * @param account Address to allow\\r\\n\\t * @param _canStakeFor True to allow, false to remove allowance\\r\\n\\t */\\r\\n\\tfunction setCanStakeFor(address account, bool _canStakeFor) external onlyOwner {\\r\\n\\t\\tcanStakeFor[account] = _canStakeFor;\\r\\n\\t\\temit CanStakeForSet(account, _canStakeFor);\\r\\n\\t}\\r\\n\\r\\n\\tfunction recoverERC20(\\r\\n\\t\\tIERC20 tokenAddress,\\r\\n\\t\\tuint256 tokenAmount,\\r\\n\\t\\taddress recoverTo\\r\\n\\t) external onlyOwner {\\r\\n\\t\\trequire(tokenAddress != stakingToken, \\\"SpoolStaking::recoverERC20: Cannot withdraw the staking token\\\");\\r\\n\\t\\ttokenAddress.safeTransfer(recoverTo, tokenAmount);\\r\\n\\t}\\r\\n\\r\\n\\t/* ========== PRIVATE FUNCTIONS ========== */\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Syncs rewards across all tokens of the system\\r\\n\\t *\\r\\n\\t * This function is meant to be invoked every time the instant deposit\\r\\n\\t * of a user changes.\\r\\n\\t */\\r\\n\\tfunction _updateRewards(address account) private {\\r\\n\\t\\t// update SPOOL based rewards\\r\\n\\t\\t_updateSpoolRewards(account);\\r\\n\\r\\n\\t\\t// update voSPOOL based reward\\r\\n\\t\\t_updateVoSpoolReward(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _updateSpoolRewards(address account) private {\\r\\n\\t\\tuint256 _rewardTokensCount = rewardTokens.length;\\r\\n\\r\\n\\t\\t// update SPOOL based rewards\\r\\n\\t\\tfor (uint256 i; i < _rewardTokensCount; i++) _updateReward(rewardTokens[i], account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _updateReward(IERC20 token, address account) private {\\r\\n\\t\\tRewardConfiguration storage config = rewardConfiguration[token];\\r\\n\\t\\tconfig.rewardPerTokenStored = rewardPerToken(token);\\r\\n\\t\\tconfig.lastUpdateTime = lastTimeRewardApplicable(token);\\r\\n\\t\\tif (account != address(0)) {\\r\\n\\t\\t\\tconfig.rewards[account] = earned(token, account);\\r\\n\\t\\t\\tconfig.userRewardPerTokenPaid[account] = config.rewardPerTokenStored;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Update rewards collected from account voSPOOL\\r\\n\\t * @dev\\r\\n\\t * First we update rewards calling `voSpoolRewards.updateRewards`\\r\\n\\t * - Here we only simulate the reward accumulated over tranches\\r\\n\\t * Then we update and store users power by calling voSPOOL contract\\r\\n\\t * - Here we actually store the udated values.\\r\\n\\t * - If store wouldn't happen, next time we'd simulate the same voSPOOL tranches again\\r\\n\\t */\\r\\n\\tfunction _updateVoSpoolReward(address account) private {\\r\\n\\t\\t// update rewards\\r\\n\\t\\tvoSpoolRewards.updateRewards(account);\\r\\n\\t\\t// update and store users voSPOOL\\r\\n\\t\\tvoSpool.updateUserVotingPower(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _removeReward(IERC20 token) private {\\r\\n\\t\\tuint256 _rewardTokensCount = rewardTokens.length;\\r\\n\\t\\tfor (uint256 i; i < _rewardTokensCount; i++) {\\r\\n\\t\\t\\tif (rewardTokens[i] == token) {\\r\\n\\t\\t\\t\\trewardTokens[i] = rewardTokens[_rewardTokensCount - 1];\\r\\n\\r\\n\\t\\t\\t\\trewardTokens.pop();\\r\\n\\t\\t\\t\\temit RewardRemoved(token);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _onlyFinished(IERC20 token) private view {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tblock.timestamp > rewardConfiguration[token].periodFinish,\\r\\n\\t\\t\\t\\\"SpoolStaking::_onlyFinished: Reward not finished\\\"\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _min(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n\\t\\treturn a > b ? b : a;\\r\\n\\t}\\r\\n\\r\\n\\t/* ========== MODIFIERS ========== */\\r\\n\\r\\n\\tmodifier updateReward(IERC20 token, address account) {\\r\\n\\t\\t_updateReward(token, account);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier updateRewards(address account) {\\r\\n\\t\\t_updateRewards(account);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier canStakeForAddress(address account) {\\r\\n\\t\\t// verify sender can stake for\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tcanStakeFor[msg.sender] || isSpoolOwner(),\\r\\n\\t\\t\\t\\\"SpoolStaking::canStakeForAddress: Cannot stake for other addresses\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// if address already staked, verify further\\r\\n\\t\\tif (balances[account] > 0) {\\r\\n\\t\\t\\t// verify address was staked by some other address\\r\\n\\t\\t\\trequire(stakedBy[account] != address(0), \\\"SpoolStaking::canStakeForAddress: Address already staked\\\");\\r\\n\\r\\n\\t\\t\\t// verify address was staked by the sender or sender is the Spool DAO\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\tstakedBy[account] == msg.sender || isSpoolOwner(),\\r\\n\\t\\t\\t\\t\\\"SpoolStaking::canStakeForAddress: Address staked by another address\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier notStakedBy() {\\r\\n\\t\\trequire(stakedBy[msg.sender] == address(0), \\\"SpoolStaking::notStakedBy: Cannot withdraw until allowed\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyFinished(IERC20 token) {\\r\\n\\t\\t_onlyFinished(token);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\r\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() initializer {}\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     */\\r\\n    bool private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\r\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\r\\n        // contract may have been reentered.\\r\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n            _initialized = true;\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} modifier, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _isConstructor() private view returns (bool) {\\r\\n        return !AddressUpgradeable.isContract(address(this));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/@openzeppelin/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n *\\r\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\r\\n * all math on `uint256` and `int256` and then downcasting.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint224).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint224` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 224 bits\\r\\n     */\\r\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\r\\n        return uint224(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint192).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint192` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 192 bits\\r\\n     */\\r\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\r\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\r\\n        return uint192(value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n     * overflow (when the input is greater than largest uint128).\\r\\n     *\\r\\n     * Counterpart to Solidity's `uint128` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - input must fit into 128 bits\\r\\n     */\\r\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\r\\n        return uint128(value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/spool-core/SpoolOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"./interfaces/ISpoolOwner.sol\\\";\\r\\n\\r\\nabstract contract SpoolOwnable {\\r\\n    ISpoolOwner internal immutable spoolOwner;\\r\\n    \\r\\n    constructor(ISpoolOwner _spoolOwner) {\\r\\n        require(\\r\\n            address(_spoolOwner) != address(0),\\r\\n            \\\"SpoolOwnable::constructor: Spool owner contract address cannot be 0\\\"\\r\\n        );\\r\\n\\r\\n        spoolOwner = _spoolOwner;\\r\\n    }\\r\\n\\r\\n    function isSpoolOwner() internal view returns(bool) {\\r\\n        return spoolOwner.isSpoolOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _onlyOwner() internal view {\\r\\n        require(isSpoolOwner(), \\\"SpoolOwnable::onlyOwner: Caller is not the Spool owner\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/external/spool-core/interfaces/ISpoolOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface ISpoolOwner {\\r\\n    function isSpoolOwner(address user) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IRewardDistributor {\\r\\n\\t/* ========== FUNCTIONS ========== */\\r\\n\\r\\n\\tfunction payRewards(\\r\\n\\t\\taddress account,\\r\\n\\t\\tIERC20[] memory tokens,\\r\\n\\t\\tuint256[] memory amounts\\r\\n\\t) external;\\r\\n\\r\\n\\tfunction payReward(\\r\\n\\t\\taddress account,\\r\\n\\t\\tIERC20 token,\\r\\n\\t\\tuint256 amount\\r\\n\\t) external;\\r\\n\\r\\n\\t/* ========== EVENTS ========== */\\r\\n\\r\\n\\tevent RewardPaid(IERC20 token, address indexed account, uint256 amount);\\r\\n\\tevent RewardRetrieved(IERC20 token, address indexed account, uint256 amount);\\r\\n\\tevent DistributorUpdated(address indexed user, bool set);\\r\\n\\tevent PauserUpdated(address indexed user, bool set);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISpoolStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"../external/@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ISpoolStaking {\\r\\n\\t/* ========== EVENTS ========== */\\r\\n\\r\\n\\tevent Staked(address indexed user, uint256 amount);\\r\\n\\r\\n\\tevent StakedFor(address indexed stakedFor, address indexed stakedBy, uint256 amount);\\r\\n\\r\\n\\tevent Unstaked(address indexed user, uint256 amount);\\r\\n\\t\\r\\n\\tevent RewardCompounded(address indexed user, uint256 reward);\\r\\n\\t\\r\\n\\tevent VoRewardCompounded(address indexed user, uint256 reward);\\r\\n\\r\\n\\tevent RewardPaid(IERC20 token, address indexed user, uint256 reward);\\r\\n\\r\\n\\tevent VoSpoolRewardPaid(IERC20 token, address indexed user, uint256 reward);\\r\\n\\r\\n\\tevent RewardAdded(IERC20 indexed token, uint256 amount, uint256 duration);\\r\\n\\r\\n\\tevent RewardUpdated(IERC20 indexed token, uint256 amount, uint256 leftover, uint256 duration, uint32 periodFinish);\\r\\n\\r\\n\\tevent RewardRemoved(IERC20 indexed token);\\r\\n\\r\\n\\tevent PeriodFinishUpdated(IERC20 indexed token, uint32 periodFinish);\\r\\n\\r\\n\\tevent CanStakeForSet(address indexed account, bool canStakeFor);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoSPOOL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\n/* ========== STRUCTS ========== */\\r\\n\\r\\n/**\\r\\n * @notice global gradual struct\\r\\n * @member totalMaturedVotingPower total fully-matured voting power amount\\r\\n * @member totalMaturingAmount total maturing amount (amount of power that is accumulating every week for 1/156 of the amount)\\r\\n * @member totalRawUnmaturedVotingPower total raw voting power still maturing every tranche (totalRawUnmaturedVotingPower/156 is its voting power)\\r\\n * @member lastUpdatedTrancheIndex last (finished) tranche index global gradual has updated\\r\\n */\\r\\nstruct GlobalGradual {\\r\\n\\tuint48 totalMaturedVotingPower;\\r\\n\\tuint48 totalMaturingAmount;\\r\\n\\tuint56 totalRawUnmaturedVotingPower;\\r\\n\\tuint16 lastUpdatedTrancheIndex;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice user tranche position struct, pointing at user tranche\\r\\n * @dev points at `userTranches` mapping\\r\\n * @member arrayIndex points at `userTranches`\\r\\n * @member position points at UserTranches position from zero to three (zero, one, two, or three)\\r\\n */\\r\\nstruct UserTranchePosition {\\r\\n\\tuint16 arrayIndex;\\r\\n\\tuint8 position;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice user gradual struct, similar to global gradual holds user gragual voting power values\\r\\n * @dev points at `userTranches` mapping\\r\\n * @member maturedVotingPower users fully-matured voting power amount\\r\\n * @member maturingAmount users maturing amount\\r\\n * @member rawUnmaturedVotingPower users raw voting power still maturing every tranche\\r\\n * @member oldestTranchePosition UserTranchePosition pointing at the oldest unmatured UserTranche\\r\\n * @member latestTranchePosition UserTranchePosition pointing at the latest unmatured UserTranche\\r\\n * @member lastUpdatedTrancheIndex last (finished) tranche index user gradual has updated\\r\\n */\\r\\nstruct UserGradual {\\r\\n\\tuint48 maturedVotingPower; // matured voting amount, power accumulated and older than FULL_POWER_TIME, not accumulating anymore\\r\\n\\tuint48 maturingAmount; // total maturing amount (also maximum matured)\\r\\n\\tuint56 rawUnmaturedVotingPower; // current user raw unmatured voting power (increases every new tranche), actual unmatured voting power can be calculated as unmaturedVotingPower / FULL_POWER_TRANCHES_COUNT\\r\\n\\tUserTranchePosition oldestTranchePosition; // if arrayIndex is 0, user has no tranches (even if `latestTranchePosition` is not empty)\\r\\n\\tUserTranchePosition latestTranchePosition; // can only increment, in case of tranche removal, next time user gradually mints we point at tranche at next position\\r\\n\\tuint16 lastUpdatedTrancheIndex;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Spool DAO Voting Token interface\\r\\n */\\r\\ninterface IVoSPOOL {\\r\\n\\t/* ========== FUNCTIONS ========== */\\r\\n\\r\\n\\tfunction mint(address, uint256) external;\\r\\n\\r\\n\\tfunction burn(address, uint256) external;\\r\\n\\r\\n\\tfunction mintGradual(address, uint256) external;\\r\\n\\r\\n\\tfunction burnGradual(\\r\\n\\t\\taddress,\\r\\n\\t\\tuint256,\\r\\n\\t\\tbool\\r\\n\\t) external;\\r\\n\\r\\n\\tfunction updateVotingPower() external;\\r\\n\\r\\n\\tfunction updateUserVotingPower(address user) external;\\r\\n\\r\\n\\tfunction getTotalGradualVotingPower() external returns (uint256);\\r\\n\\r\\n\\tfunction getUserGradualVotingPower(address user) external returns (uint256);\\r\\n\\r\\n\\tfunction getNotUpdatedUserGradual(address user) external view returns (UserGradual memory);\\r\\n\\r\\n\\tfunction getNotUpdatedGlobalGradual() external view returns (GlobalGradual memory);\\r\\n\\r\\n\\tfunction getCurrentTrancheIndex() external view returns (uint16);\\r\\n\\r\\n\\tfunction getLastFinishedTrancheIndex() external view returns (uint16);\\r\\n\\r\\n\\t/* ========== EVENTS ========== */\\r\\n\\r\\n\\tevent Minted(address indexed recipient, uint256 amount);\\r\\n\\r\\n\\tevent Burned(address indexed source, uint256 amount);\\r\\n\\r\\n\\tevent GradualMinted(address indexed recipient, uint256 amount);\\r\\n\\r\\n\\tevent GradualBurned(address indexed source, uint256 amount, bool burnAll);\\r\\n\\r\\n\\tevent GlobalGradualUpdated(\\r\\n\\t\\tuint16 indexed lastUpdatedTrancheIndex,\\r\\n\\t\\tuint48 totalMaturedVotingPower,\\r\\n\\t\\tuint48 totalMaturingAmount,\\r\\n\\t\\tuint56 totalRawUnmaturedVotingPower\\r\\n\\t);\\r\\n\\r\\n\\tevent UserGradualUpdated(\\r\\n\\t\\taddress indexed user,\\r\\n\\t\\tuint16 indexed lastUpdatedTrancheIndex,\\r\\n\\t\\tuint48 maturedVotingPower,\\r\\n\\t\\tuint48 maturingAmount,\\r\\n\\t\\tuint56 rawUnmaturedVotingPower\\r\\n\\t);\\r\\n\\r\\n\\tevent MinterSet(address indexed minter, bool set);\\r\\n\\r\\n\\tevent GradualMinterSet(address indexed minter, bool set);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoSpoolRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IVoSpoolRewards {\\r\\n\\t/* ========== FUNCTIONS ========== */\\r\\n\\r\\n\\tfunction updateRewards(address user) external returns (uint256);\\r\\n\\r\\n\\tfunction flushRewards(address user) external returns (uint256);\\r\\n\\r\\n\\t/* ========== EVENTS ========== */\\r\\n\\r\\n\\tevent RewardRateUpdated(uint8 indexed fromTranche, uint8 indexed toTranche, uint112 rewardPerTranche);\\r\\n\\r\\n\\tevent RewardEnded(\\r\\n\\t\\tuint256 indexed rewardRatesIndex,\\r\\n\\t\\tuint8 indexed fromTranche,\\r\\n\\t\\tuint8 indexed toTranche,\\r\\n\\t\\tuint8 currentTrancheIndex\\r\\n\\t);\\r\\n\\r\\n\\tevent UserRewardUpdated(address indexed user, uint8 lastRewardRateIndex, uint248 earned);\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IVoSPOOL\",\"name\":\"_voSpool\",\"type\":\"address\"},{\"internalType\":\"contract IVoSpoolRewards\",\"name\":\"_voSpoolRewards\",\"type\":\"address\"},{\"internalType\":\"contract IRewardDistributor\",\"name\":\"_rewardDistributor\",\"type\":\"address\"},{\"internalType\":\"contract ISpoolOwner\",\"name\":\"_spoolOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canStakeFor\",\"type\":\"bool\"}],\"name\":\"CanStakeForSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"periodFinish\",\"type\":\"uint32\"}],\"name\":\"PeriodFinishUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardCompounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leftover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"periodFinish\",\"type\":\"uint32\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedFor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"VoRewardCompounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"VoSpoolRewardPaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"rewardsDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowFor\",\"type\":\"address\"}],\"name\":\"allowUnstakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canStakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"doCompoundVoSpoolRewards\",\"type\":\"bool\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"doClaimVoSpoolRewards\",\"type\":\"bool\"}],\"name\":\"getActiveRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"doClaimVoSpoolRewards\",\"type\":\"bool\"}],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpdatedVoSpoolRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_rewardsDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recoverTo\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardConfiguration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"rewardsDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"periodFinish\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"rewardRate\",\"type\":\"uint192\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdateTime\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"contract IRewardDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canStakeFor\",\"type\":\"bool\"}],\"name\":\"setCanStakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"updatePeriodFinish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voSpool\",\"outputs\":[{\"internalType\":\"contract IVoSPOOL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voSpoolRewards\",\"outputs\":[{\"internalType\":\"contract IVoSpoolRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SpoolStaking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "00000000000000000000000040803cea2b2a32bda1be61d3604af6a814e7097600000000000000000000000014199a3ceeeade52220425918ad2a2cc4b5cb169000000000000000000000000862be508b1421c595b919e8e2f71b06a1ea6ae5900000000000000000000000022bb10a016b1eb7bffd304862051aa3fce723f740000000000000000000000004f03f70a99e5c3b49d733ddd7458f80fa9b5a5b5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}