{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/fishermanDrop/ethereum/WAncientFisherman.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\nimport \\\"../../IToken.sol\\\";\\r\\n\\r\\ncontract WAncientFisherman is Ownable {\\r\\n\\r\\n    bool public isPrivateMint;\\r\\n    bool public isPublicMint;\\r\\n\\r\\n    \\r\\n    uint256 public mintPriceEth = 0.03 ether; \\r\\n    uint256 public mintPriceBundleEth = 0.12 ether; \\r\\n    \\r\\n    uint256 public mintPriceWrld = 1000 ether;\\r\\n    uint256 public mintPriceBundleWrld = 4000 ether;\\r\\n    \\r\\n    bytes32 public whitelistMerkleRoot;\\r\\n\\r\\n    address public foundersWallet;\\r\\n\\r\\n    IToken public WRLD_TOKEN;\\r\\n\\r\\n    event MintEth(address indexed player, bool bundle, uint256 numberOfTokens);\\r\\n    event MintWrld(address indexed player, bool bundle, uint256 numberOfTokens);\\r\\n\\r\\n    mapping(address => uint256) private maxMintsPerAddress;\\r\\n\\r\\n    constructor(){\\r\\n        foundersWallet = 0x02367e1ed0294AF91E459463b495C8F8F855fBb8;\\r\\n        WRLD_TOKEN = IToken(0xD5d86FC8d5C0Ea1aC1Ac5Dfab6E529c9967a45E9); \\r\\n    }\\r\\n    \\r\\n\\r\\n    function setFoundersWallet(address newFoundersWallet) external onlyOwner{\\r\\n        foundersWallet = newFoundersWallet;\\r\\n    }\\r\\n\\r\\n    //CONTROL FUNCTIONS\\r\\n    function updateWhitelistMerkleRoot(bytes32 _newMerkleRoot)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        whitelistMerkleRoot = _newMerkleRoot;\\r\\n    }\\r\\n    \\r\\n    function setPrice(uint256 mintPriceBundleEth_, uint256 mintPriceBundleWrld_, uint256 mintPriceEth_, uint256 mintPriceWrld_) external onlyOwner{\\r\\n        mintPriceBundleEth = mintPriceBundleEth_;\\r\\n        mintPriceBundleWrld = mintPriceBundleWrld_;\\r\\n        mintPriceEth = mintPriceEth_;\\r\\n        mintPriceWrld = mintPriceWrld_;\\r\\n    }\\r\\n\\r\\n    function setPublicMint(bool isPublicMint_) external onlyOwner{\\r\\n        isPublicMint = isPublicMint_;\\r\\n    }\\r\\n\\r\\n    function setPrivateMint(bool isPrivateMint_) external onlyOwner{\\r\\n        isPrivateMint = isPrivateMint_;\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter(address player, uint256 _numberOfTokens, bool bundle, bytes32[] calldata merkleProof){\\r\\n        require(isPrivateMint || isPublicMint, \\\"Mint not open\\\");\\r\\n        require(_numberOfTokens > 0, \\\"Token must be grt than 0\\\");\\r\\n        if(isPrivateMint){\\r\\n            if(bundle){\\r\\n                require(_numberOfTokens <= 1, \\\"max 1 bundle\\\");\\r\\n                require((maxMintsPerAddress[player] + _numberOfTokens * 5) <= 5, \\\"max 1 bundle\\\");\\r\\n                \\r\\n            }else{\\r\\n                require(_numberOfTokens <= 5, \\\"max 5 blds\\\");\\r\\n                require((maxMintsPerAddress[player] + _numberOfTokens) <= 5, \\\"max 5 blds\\\");\\r\\n                \\r\\n            }\\r\\n        }else{\\r\\n            if(bundle){\\r\\n                require(_numberOfTokens <= 5, \\\"max 5 bundle\\\");\\r\\n            }else{\\r\\n                require(_numberOfTokens <= 25, \\\"max 25 blds\\\");\\r\\n            }\\r\\n        }\\r\\n        \\r\\n\\r\\n        if(!isPublicMint){\\r\\n            bool isWhitelisted = MerkleProof.verify(\\r\\n                merkleProof, //routeProof\\r\\n                whitelistMerkleRoot, //root\\r\\n                keccak256(abi.encodePacked(player)/* leaf */)\\r\\n            );\\r\\n            require(isWhitelisted, \\\"invalid-proof\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mintEth(address player, uint256 _numberOfTokens, bool bundle, bytes32[] calldata merkleProof) external payable onlyMinter(player, _numberOfTokens, bundle, merkleProof){\\r\\n        if(bundle){\\r\\n            require(msg.value >= mintPriceBundleEth * _numberOfTokens, \\\"inc-bnd-val\\\");\\r\\n            maxMintsPerAddress[player] += _numberOfTokens * 5;\\r\\n        }else{\\r\\n            require(msg.value >= mintPriceEth * _numberOfTokens, \\\"inc-eth-val\\\");\\r\\n            maxMintsPerAddress[player] += _numberOfTokens;\\r\\n        }\\r\\n\\r\\n        emit MintEth(player, bundle, _numberOfTokens);\\r\\n        \\r\\n        \\r\\n    }\\r\\n\\r\\n    function mintWrld(address player, uint256 _numberOfTokens, bool bundle, bytes32[] calldata merkleProof) external payable onlyMinter(player, _numberOfTokens, bundle, merkleProof){\\r\\n        if(bundle){\\r\\n            require(mintPriceBundleWrld * _numberOfTokens <= WRLD_TOKEN.balanceOf(player), \\\"low-balance-bnd-wrld\\\");\\r\\n            require(mintPriceBundleWrld * _numberOfTokens <= WRLD_TOKEN.allowance(player, address(this)), \\\"low-allowance-bnd-wrld\\\");\\r\\n\\r\\n            WRLD_TOKEN.transferFrom(player, foundersWallet, mintPriceBundleWrld * _numberOfTokens);\\r\\n\\r\\n            maxMintsPerAddress[player] += _numberOfTokens * 5;\\r\\n        }else{\\r\\n            require(mintPriceWrld * _numberOfTokens <= WRLD_TOKEN.balanceOf(player), \\\"low-balance-wrld\\\");\\r\\n            require(mintPriceWrld * _numberOfTokens <= WRLD_TOKEN.allowance(player, address(this)), \\\"low-allowance-wrld\\\");\\r\\n\\r\\n            WRLD_TOKEN.transferFrom(player, foundersWallet, mintPriceWrld * _numberOfTokens);\\r\\n\\r\\n            maxMintsPerAddress[player] += _numberOfTokens;\\r\\n        }\\r\\n        \\r\\n        emit MintWrld(player, bundle, _numberOfTokens);\\r\\n        \\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        uint256 _balance = address(this).balance;\\r\\n        payable(foundersWallet).transfer(_balance);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IToken {\\r\\n    function balanceOf(address owner) external view returns(uint256);\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address, address, uint256) external;\\r\\n    function allowance(address owner, address spender) external view returns(uint256);\\r\\n    function approve(address spender, uint256 amount) external returns(bool);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bundle\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"MintEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bundle\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"MintWrld\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WRLD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundersWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPrivateMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bundle\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPriceBundleEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPriceBundleWrld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPriceEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPriceWrld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bundle\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintWrld\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFoundersWallet\",\"type\":\"address\"}],\"name\":\"setFoundersWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPriceBundleEth_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPriceBundleWrld_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPriceEth_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPriceWrld_\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPrivateMint_\",\"type\":\"bool\"}],\"name\":\"setPrivateMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPublicMint_\",\"type\":\"bool\"}],\"name\":\"setPublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateWhitelistMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WAncientFisherman", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}