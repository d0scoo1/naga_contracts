{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/core/fund-deployer/IFundDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    function getOwner() external view returns (address);\\n\\n    function hasReconfigurationRequest(address) external view returns (bool);\\n\\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\\n\\n    function isAllowedVaultCall(\\n        address,\\n        bytes4,\\n        bytes32\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/IIntegrationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {None, Approve, Transfer}\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function parseAssetsForAction(\\n        address _vaultProxy,\\n        bytes4 _selector,\\n        bytes calldata _encodedCallArgs\\n    )\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/adapters/IdleAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../infrastructure/price-feeds/derivatives/feeds/IdlePriceFeed.sol\\\";\\nimport \\\"../../../../interfaces/IIdleTokenV4.sol\\\";\\nimport \\\"../../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../utils/actions/IdleV4ActionsMixin.sol\\\";\\nimport \\\"../utils/AdapterBase.sol\\\";\\n\\n/// @title IdleAdapter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Adapter for Idle Lending <https://idle.finance/>\\n/// @dev There are some idiosyncrasies of reward accrual and claiming in IdleTokens that\\n/// are handled by this adapter:\\n/// - Rewards accrue to the IdleToken holder, but the accrued\\n/// amount is passed to the recipient of a transfer.\\n/// - Claiming rewards cannot be done on behalf of a holder, but must be done directly.\\n/// - Claiming rewards occurs automatically upon redeeming, but there are situations when\\n/// it is difficult to know whether to expect incoming rewards (e.g., after a user mints\\n/// idleTokens and then redeems before any other user has interacted with the protocol,\\n/// then getGovTokensAmounts() will return 0 balances). Because of this difficulty -\\n/// and in keeping with how other adapters treat claimed rewards -\\n/// this adapter does not report claimed rewards as incomingAssets.\\ncontract IdleAdapter is AdapterBase, IdleV4ActionsMixin {\\n    using AddressArrayLib for address[];\\n\\n    address private immutable IDLE_PRICE_FEED;\\n\\n    constructor(address _integrationManager, address _idlePriceFeed)\\n        public\\n        AdapterBase(_integrationManager)\\n    {\\n        IDLE_PRICE_FEED = _idlePriceFeed;\\n    }\\n\\n    /// @notice Claims rewards for a given IdleToken\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function claimRewards(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionSpendAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        address idleToken = __decodeClaimRewardsCallArgs(_actionData);\\n\\n        __idleV4ClaimRewards(idleToken);\\n\\n        __pushFullAssetBalances(_vaultProxy, __idleV4GetRewardsTokens(idleToken));\\n    }\\n\\n    /// @notice Lends an amount of a token for idleToken\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    function lend(\\n        address _vaultProxy,\\n        bytes calldata,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        // More efficient to parse all from _assetData\\n        (\\n            address[] memory spendAssets,\\n            uint256[] memory spendAssetAmounts,\\n            address[] memory incomingAssets\\n        ) = __decodeAssetData(_assetData);\\n\\n        __idleV4Lend(incomingAssets[0], spendAssets[0], spendAssetAmounts[0]);\\n    }\\n\\n    /// @notice Redeems an amount of idleToken for its underlying asset\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _actionData Data specific to this action\\n    /// @param _assetData Parsed spend assets and incoming assets data for this action\\n    /// @dev This will also pay out any due gov token rewards.\\n    /// We use the full IdleToken balance of the current contract rather than the user input\\n    /// for the corner case of a prior balance existing in the current contract, which would\\n    /// throw off the per-user avg price of the IdleToken used by Idle, and would leave the\\n    /// initial token balance in the current contract post-tx.\\n    function redeem(\\n        address _vaultProxy,\\n        bytes calldata _actionData,\\n        bytes calldata _assetData\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _assetData)\\n    {\\n        (address idleToken, , ) = __decodeRedeemCallArgs(_actionData);\\n\\n        __idleV4Redeem(idleToken, ERC20(idleToken).balanceOf(address(this)));\\n\\n        __pushFullAssetBalances(_vaultProxy, __idleV4GetRewardsTokens(idleToken));\\n    }\\n\\n    /// @dev Helper to get the underlying for a given IdleToken\\n    function __getUnderlyingForIdleToken(address _idleToken)\\n        private\\n        view\\n        returns (address underlying_)\\n    {\\n        return IdlePriceFeed(IDLE_PRICE_FEED).getUnderlyingForDerivative(_idleToken);\\n    }\\n\\n    /////////////////////////////\\n    // PARSE ASSETS FOR METHOD //\\n    /////////////////////////////\\n\\n    /// @notice Parses the expected assets in a particular action\\n    /// @param _selector The function selector for the callOnIntegration\\n    /// @param _actionData Data specific to this action\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\n    /// the adapter access to spend assets (`None` by default)\\n    /// @return spendAssets_ The assets to spend in the call\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\n    /// @return incomingAssets_ The assets to receive in the call\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\n    function parseAssetsForAction(\\n        address _vaultProxy,\\n        bytes4 _selector,\\n        bytes calldata _actionData\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        if (_selector == CLAIM_REWARDS_SELECTOR) {\\n            return __parseAssetsForClaimRewards(_vaultProxy, _actionData);\\n        } else if (_selector == LEND_SELECTOR) {\\n            return __parseAssetsForLend(_actionData);\\n        } else if (_selector == REDEEM_SELECTOR) {\\n            return __parseAssetsForRedeem(_actionData);\\n        }\\n\\n        revert(\\\"parseAssetsForAction: _selector invalid\\\");\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewards() calls\\n    function __parseAssetsForClaimRewards(address _vaultProxy, bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        address idleToken = __decodeClaimRewardsCallArgs(_actionData);\\n\\n        require(\\n            __getUnderlyingForIdleToken(idleToken) != address(0),\\n            \\\"__parseAssetsForClaimRewards: Unsupported idleToken\\\"\\n        );\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = idleToken;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = ERC20(idleToken).balanceOf(_vaultProxy);\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            new address[](0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lend() calls\\n    function __parseAssetsForLend(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            address idleToken,\\n            uint256 outgoingUnderlyingAmount,\\n            uint256 minIncomingIdleTokenAmount\\n        ) = __decodeLendCallArgs(_actionData);\\n\\n        address underlying = __getUnderlyingForIdleToken(idleToken);\\n        require(underlying != address(0), \\\"__parseAssetsForLend: Unsupported idleToken\\\");\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = underlying;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingUnderlyingAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = idleToken;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingIdleTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during redeem() calls\\n    function __parseAssetsForRedeem(bytes calldata _actionData)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            address idleToken,\\n            uint256 outgoingIdleTokenAmount,\\n            uint256 minIncomingUnderlyingAmount\\n        ) = __decodeRedeemCallArgs(_actionData);\\n\\n        address underlying = __getUnderlyingForIdleToken(idleToken);\\n        require(underlying != address(0), \\\"__parseAssetsForRedeem: Unsupported idleToken\\\");\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = idleToken;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingIdleTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = underlying;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingUnderlyingAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    ///////////////////////\\n    // ENCODED CALL ARGS //\\n    ///////////////////////\\n\\n    /// @dev Helper to decode callArgs for claiming rewards tokens\\n    function __decodeClaimRewardsCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (address idleToken_)\\n    {\\n        return abi.decode(_actionData, (address));\\n    }\\n\\n    /// @dev Helper to decode callArgs for lending\\n    function __decodeLendCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (\\n            address idleToken_,\\n            uint256 outgoingUnderlyingAmount_,\\n            uint256 minIncomingIdleTokenAmount_\\n        )\\n    {\\n        return abi.decode(_actionData, (address, uint256, uint256));\\n    }\\n\\n    /// @dev Helper to decode callArgs for redeeming\\n    function __decodeRedeemCallArgs(bytes memory _actionData)\\n        private\\n        pure\\n        returns (\\n            address idleToken_,\\n            uint256 outgoingIdleTokenAmount_,\\n            uint256 minIncomingUnderlyingAmount_\\n        )\\n    {\\n        return abi.decode(_actionData, (address, uint256, uint256));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `IDLE_PRICE_FEED` variable\\n    /// @return idlePriceFeed_ The `IDLE_PRICE_FEED` variable value\\n    function getIdlePriceFeed() external view returns (address idlePriceFeed_) {\\n        return IDLE_PRICE_FEED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../utils/AssetHelpers.sol\\\";\\nimport \\\"../IIntegrationAdapter.sol\\\";\\nimport \\\"./IntegrationSelectors.sol\\\";\\n\\n/// @title AdapterBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors, AssetHelpers {\\n    using SafeERC20 for ERC20;\\n\\n    address internal immutable INTEGRATION_MANAGER;\\n\\n    /// @dev Provides a standard implementation for transferring incoming assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionIncomingAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _assetData\\n    ) {\\n        _;\\n\\n        (, , address[] memory incomingAssets) = __decodeAssetData(_assetData);\\n\\n        __pushFullAssetBalances(_vaultProxy, incomingAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring unspent spend assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionSpendAssetsTransferHandler(address _vaultProxy, bytes memory _assetData) {\\n        _;\\n\\n        (address[] memory spendAssets, , ) = __decodeAssetData(_assetData);\\n\\n        __pushFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    modifier onlyIntegrationManager {\\n        require(\\n            msg.sender == INTEGRATION_MANAGER,\\n            \\\"Only the IntegrationManager can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _integrationManager) public {\\n        INTEGRATION_MANAGER = _integrationManager;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper to decode the _assetData param passed to adapter call\\n    function __decodeAssetData(bytes memory _assetData)\\n        internal\\n        pure\\n        returns (\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_\\n        )\\n    {\\n        return abi.decode(_assetData, (address[], uint256[], address[]));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IntegrationSelectors Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Selectors for integration actions\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\nabstract contract IntegrationSelectors {\\n    // Trading\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\n    );\\n\\n    // Lending\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\n\\n    // Staking\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\n\\n    // Rewards\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\n    );\\n\\n    // Combined\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/integration-manager/integrations/utils/actions/IdleV4ActionsMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/IIdleTokenV4.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title IdleV4ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with Idle tokens (V4)\\nabstract contract IdleV4ActionsMixin is AssetHelpers {\\n    address private constant IDLE_V4_REFERRAL_ACCOUNT = 0x1ad1fc9964c551f456238Dd88D6a38344B5319D7;\\n\\n    /// @dev Helper to claim gov token rewards for an IdleToken balance.\\n    /// Requires that the current contract has already been transferred the idleToken balance.\\n    function __idleV4ClaimRewards(address _idleToken) internal {\\n        IIdleTokenV4(_idleToken).redeemIdleToken(0);\\n    }\\n\\n    /// @dev Helper to get all rewards tokens for a specified idleToken\\n    function __idleV4GetRewardsTokens(address _idleToken)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        IIdleTokenV4 idleTokenContract = IIdleTokenV4(_idleToken);\\n\\n        rewardsTokens_ = new address[](idleTokenContract.getGovTokensAmounts(address(0)).length);\\n        for (uint256 i; i < rewardsTokens_.length; i++) {\\n            rewardsTokens_[i] = IIdleTokenV4(idleTokenContract).govTokens(i);\\n        }\\n\\n        return rewardsTokens_;\\n    }\\n\\n    /// @dev Helper to lend underlying for IdleToken\\n    function __idleV4Lend(\\n        address _idleToken,\\n        address _underlying,\\n        uint256 _underlyingAmount\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_underlying, _idleToken, _underlyingAmount);\\n        IIdleTokenV4(_idleToken).mintIdleToken(_underlyingAmount, true, IDLE_V4_REFERRAL_ACCOUNT);\\n    }\\n\\n    /// @dev Helper to redeem IdleToken for underlying\\n    function __idleV4Redeem(address _idleToken, uint256 _idleTokenAmount) internal {\\n        IIdleTokenV4(_idleToken).redeemIdleToken(_idleTokenAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDerivativePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Simple interface for derivative price source oracle implementations\\ninterface IDerivativePriceFeed {\\n    function calcUnderlyingValues(address, uint256)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/price-feeds/derivatives/feeds/IdlePriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../../interfaces/IIdleTokenV4.sol\\\";\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\nimport \\\"./utils/SingleUnderlyingDerivativeRegistryMixin.sol\\\";\\n\\n/// @title IdlePriceFeed Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Price source oracle for IdleTokens\\ncontract IdlePriceFeed is IDerivativePriceFeed, SingleUnderlyingDerivativeRegistryMixin {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant IDLE_TOKEN_UNIT = 10**18;\\n\\n    constructor(address _fundDeployer)\\n        public\\n        SingleUnderlyingDerivativeRegistryMixin(_fundDeployer)\\n    {}\\n\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\n    /// @param _derivative The derivative to convert\\n    /// @param _derivativeAmount The amount of the derivative to convert\\n    /// @return underlyings_ The underlying assets for the _derivative\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\n        external\\n        override\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\n    {\\n        underlyings_ = new address[](1);\\n        underlyings_[0] = getUnderlyingForDerivative(_derivative);\\n        require(underlyings_[0] != address(0), \\\"calcUnderlyingValues: Unsupported derivative\\\");\\n\\n        underlyingAmounts_ = new uint256[](1);\\n        underlyingAmounts_[0] = _derivativeAmount.mul(IIdleTokenV4(_derivative).tokenPrice()).div(\\n            IDLE_TOKEN_UNIT\\n        );\\n    }\\n\\n    /// @notice Checks if an asset is supported by the price feed\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is supported\\n    function isSupportedAsset(address _asset) external view override returns (bool isSupported_) {\\n        return getUnderlyingForDerivative(_asset) != address(0);\\n    }\\n\\n    /// @dev Helper to validate the derivative-underlying pair.\\n    /// Inherited from SingleUnderlyingDerivativeRegistryMixin.\\n    function __validateDerivative(address _derivative, address _underlying) internal override {\\n        require(\\n            IIdleTokenV4(_derivative).token() == _underlying,\\n            \\\"__validateDerivative: Invalid underlying for IdleToken\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/price-feeds/derivatives/feeds/utils/SingleUnderlyingDerivativeRegistryMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../utils/FundDeployerOwnerMixin.sol\\\";\\n\\n/// @title SingleUnderlyingDerivativeRegistryMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin for derivative price feeds that handle multiple derivatives\\n/// that each have a single underlying asset\\nabstract contract SingleUnderlyingDerivativeRegistryMixin is FundDeployerOwnerMixin {\\n    event DerivativeAdded(address indexed derivative, address indexed underlying);\\n\\n    event DerivativeRemoved(address indexed derivative);\\n\\n    mapping(address => address) private derivativeToUnderlying;\\n\\n    constructor(address _fundDeployer) public FundDeployerOwnerMixin(_fundDeployer) {}\\n\\n    /// @notice Adds derivatives with corresponding underlyings to the price feed\\n    /// @param _derivatives The derivatives to add\\n    /// @param _underlyings The corresponding underlyings to add\\n    function addDerivatives(address[] memory _derivatives, address[] memory _underlyings)\\n        external\\n        virtual\\n        onlyFundDeployerOwner\\n    {\\n        require(_derivatives.length > 0, \\\"addDerivatives: Empty _derivatives\\\");\\n        require(_derivatives.length == _underlyings.length, \\\"addDerivatives: Unequal arrays\\\");\\n\\n        for (uint256 i; i < _derivatives.length; i++) {\\n            require(_derivatives[i] != address(0), \\\"addDerivatives: Empty derivative\\\");\\n            require(_underlyings[i] != address(0), \\\"addDerivatives: Empty underlying\\\");\\n            require(\\n                getUnderlyingForDerivative(_derivatives[i]) == address(0),\\n                \\\"addDerivatives: Value already set\\\"\\n            );\\n\\n            __validateDerivative(_derivatives[i], _underlyings[i]);\\n\\n            derivativeToUnderlying[_derivatives[i]] = _underlyings[i];\\n\\n            emit DerivativeAdded(_derivatives[i], _underlyings[i]);\\n        }\\n    }\\n\\n    /// @notice Removes derivatives from the price feed\\n    /// @param _derivatives The derivatives to remove\\n    function removeDerivatives(address[] memory _derivatives) external onlyFundDeployerOwner {\\n        require(_derivatives.length > 0, \\\"removeDerivatives: Empty _derivatives\\\");\\n\\n        for (uint256 i; i < _derivatives.length; i++) {\\n            require(\\n                getUnderlyingForDerivative(_derivatives[i]) != address(0),\\n                \\\"removeDerivatives: Value not set\\\"\\n            );\\n\\n            delete derivativeToUnderlying[_derivatives[i]];\\n\\n            emit DerivativeRemoved(_derivatives[i]);\\n        }\\n    }\\n\\n    /// @dev Optionally allow the inheriting price feed to validate the derivative-underlying pair\\n    function __validateDerivative(address, address) internal virtual {\\n        // UNIMPLEMENTED\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the underlying asset for a given derivative\\n    /// @param _derivative The derivative for which to get the underlying asset\\n    /// @return underlying_ The underlying asset\\n    function getUnderlyingForDerivative(address _derivative)\\n        public\\n        view\\n        returns (address underlying_)\\n    {\\n        return derivativeToUnderlying[_derivative];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/interfaces/IIdleTokenV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IIdleTokenV4 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Minimal interface for our interactions with IdleToken (V4) contracts\\ninterface IIdleTokenV4 {\\n    function getGovTokensAmounts(address) external view returns (uint256[] calldata);\\n\\n    function govTokens(uint256) external view returns (address);\\n\\n    function mintIdleToken(\\n        uint256,\\n        bool,\\n        address\\n    ) external returns (uint256);\\n\\n    function redeemIdleToken(uint256) external returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function tokenPrice() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/release/utils/AddressArrayLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\\n        internal\\n        returns (bool removed_)\\n    {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/utils/AssetHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        uint256 allowance = ERC20(_asset).allowance(address(this), _target);\\n        if (allowance < _neededAmount) {\\n            if (allowance > 0) {\\n                ERC20(_asset).safeApprove(_target, 0);\\n            }\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/utils/FundDeployerOwnerMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() public view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idlePriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdlePriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"idlePriceFeed_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IdleAdapter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000031329024f1a3e4a4b3336e0b1dfa74cc3fec633e0000000000000000000000008ddf1f3f0c13e099378b2b6f73cdb8f61526ed6f", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}