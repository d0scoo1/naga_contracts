{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BandwidthGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./CosmosToken.sol\\\";\\nimport \\\"./Gravity.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/** \\n * @title BandwidthGenerator\\n * @dev   Contract for generating Basic Bandwidth Credentials (BBCs) on the Nym cosmos blockchain, \\n *        using ERC20 representations of NYM as payment. Utilises the Gravity Bridge for cross-chain payment. \\n * \\n *        Credential generation can be switched on/off by the contract owner.\\n *        \\n *        Credentials represent a certain amount of bandwidth which can be sent through the Nym Mixnet. \\n *        By default 1 NYM = 1 GB of bandwidth. The `BytesPerToken` amount can be adjusted by the contract owner. \\n *        The amount of bandwidth bought is calculated according to the following formula: \\n *        `(Token amount in 'wei' / 10**6) * BytesPerToken`\\n */ \\ncontract BandwidthGenerator is Ownable {\\n\\n    using SafeMath for uint256; \\n\\n    CosmosERC20 public erc20;\\n    Gravity     public gravityBridge; \\n    uint256     public BytesPerToken; \\n    bool        public credentialGenerationEnabled;\\n    \\n    event BBCredentialPurchased(\\n        uint256 Bandwidth,\\n        uint256 indexed VerificationKey,\\n        bytes   SignedVerificationKey, \\n        string  CosmosRecipient\\n    );\\n\\n    event RatioChanged(\\n        uint256 indexed NewBytesPerToken\\n    );\\n\\n    event CredentialGenerationSwitch(\\n        bool Enabled\\n    ); \\n\\n    modifier checkEnabled() {\\n        require(credentialGenerationEnabled, \\\"BandwidthGenerator: credential generation isn't currently enabled\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @param _erc20          Address of the erc20NYM deployed through the Gravity Bridge.\\n     * @param _gravityBridge  Address of the deployed Gravity Bridge. \\n     */\\n    constructor(CosmosERC20 _erc20, Gravity _gravityBridge) {\\n        require(address(_erc20) != address(0),         \\\"BandwidthGenerator: erc20 address cannot be null\\\"); \\n        require(address(_gravityBridge) != address(0), \\\"BandwidthGenerator: gravity bridge address cannot be null\\\"); \\n        erc20 = _erc20;\\n        gravityBridge = _gravityBridge; \\n        BytesPerToken = 1073741824; // default amount set at deployment: 1 erc20NYM = 1073741824 Bytes = 1GB\\n        credentialGenerationEnabled = true;\\n    }\\n\\n    /**\\n     * @dev                            Changes amount of Bytes each erc20NYM is tradable for. Can only be called by Owner. \\n     * @param _newBytesPerTokenAmount  Amount of Bytes BBC is worth per 1 erc20NYM token.\\n     */    \\n    function changeRatio(uint256 _newBytesPerTokenAmount) public onlyOwner { \\n        require(_newBytesPerTokenAmount != 0, \\\"BandwidthGenerator: price cannot be 0\\\"); \\n        BytesPerToken = _newBytesPerTokenAmount;  \\n        emit RatioChanged(_newBytesPerTokenAmount);\\n    }\\n\\n    /**\\n     * @dev                            Switches credential generation on/off. Can only be called by Owner. \\n     * @param _generation              Whether credential generation is turned on/off. \\n     */  \\n    function credentialGenerationSwitch(bool _generation) public onlyOwner {\\n        credentialGenerationEnabled = _generation; \\n        emit CredentialGenerationSwitch(_generation); \\n    }\\n    \\n    /**\\n     * @dev                           Function to create a BBC for account owning the verification key on the Nym Cosmos Blockchain\\n     *                                by transfering erc20NYM via the Gravity Bridge. \\n     * @param _amount                 Amount of erc20NYM tokens to spend on BBC - denominated in wei. \\n     * @param _verificationKey        Verification key of account on Nym blockchain who is purchasing BBC.\\n     * @param _signedVerificationKey  Number of erc20NYMs to spend signed by _verificationKey for auth on Cosmos Blockchain.\\n     * @param _cosmosRecipient        Address of the recipient of payment on Nym Cosmos Blockchain.\\n     */    \\n    function generateBasicBandwidthCredential(uint256 _amount, uint256 _verificationKey, bytes memory _signedVerificationKey, string calldata _cosmosRecipient) public checkEnabled {\\n        require(_signedVerificationKey.length == 64, \\\"BandwidthGenerator: Signature doesn't have 64 bytes\\\");\\n        erc20.transferFrom(msg.sender, address(this), _amount);\\n        erc20.approve(address(gravityBridge), _amount); \\n        gravityBridge.sendToCosmos(\\n\\t\\t    address(erc20),\\n\\t\\t    _cosmosRecipient,    \\n\\t\\t    _amount\\n\\t    );\\n        uint256 bandwidth = bandwidthFromToken(_amount);\\n        emit BBCredentialPurchased(\\n            bandwidth, \\n            _verificationKey, \\n            _signedVerificationKey,\\n            _cosmosRecipient\\n        );\\n    }\\n\\n    function bandwidthFromToken(uint256 _amount) public view returns (uint256) {\\n        uint256 amountMulBytes = _amount.mul(BytesPerToken);\\n        return amountMulBytes.div(10**6); \\n    }\\n\\n}\\n \\n\\n\"\r\n    },\r\n    \"contracts/CosmosToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract CosmosERC20 is ERC20 {\\n\\tuint256 MAX_UINT = 2**256 - 1;\\n\\tuint8 private cosmosDecimals;\\n\\taddress private gravityAddress;\\n\\n\\t// This override ensures we return the proper number of decimals\\n\\t// for the cosmos token\\n\\tfunction decimals() public view virtual override returns (uint8) {\\n\\t\\treturn cosmosDecimals;\\n\\t}\\n\\n\\t// This is not an accurate total supply. Instead this is the total supply\\n\\t// of the given cosmos asset on Ethereum at this moment in time. Keeping\\n\\t// a totally accurate supply would require constant updates from the Cosmos\\n\\t// side, while in theory this could be piggy-backed on some existing bridge\\n\\t// operation it's a lot of complextiy to add so we chose to forgoe it.\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn MAX_UINT - balanceOf(gravityAddress);\\n\\t}\\n\\n\\tconstructor(\\n\\t\\taddress _gravityAddress,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint8 _decimals\\n\\t) ERC20(_name, _symbol) {\\n\\t\\tcosmosDecimals = _decimals;\\n\\t\\tgravityAddress = _gravityAddress;\\n\\t\\t_mint(_gravityAddress, MAX_UINT);\\n\\t}\\n}\"\r\n    },\r\n    \"contracts/Gravity.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./CosmosToken.sol\\\";\\n\\nerror InvalidSignature();\\nerror InvalidValsetNonce(uint256 newNonce, uint256 currentNonce);\\nerror InvalidBatchNonce(uint256 newNonce, uint256 currentNonce);\\nerror InvalidLogicCallNonce(uint256 newNonce, uint256 currentNonce);\\nerror InvalidLogicCallTransfers();\\nerror InvalidLogicCallFees();\\nerror InvalidSendToCosmos();\\nerror IncorrectCheckpoint();\\nerror MalformedNewValidatorSet();\\nerror MalformedCurrentValidatorSet();\\nerror MalformedBatch();\\nerror InsufficientPower(uint256 cumulativePower, uint256 powerThreshold);\\nerror BatchTimedOut();\\nerror LogicCallTimedOut();\\n\\n// This is being used purely to avoid stack too deep errors\\nstruct LogicCallArgs {\\n\\t// Transfers out to the logic contract\\n\\tuint256[] transferAmounts;\\n\\taddress[] transferTokenContracts;\\n\\t// The fees (transferred to msg.sender)\\n\\tuint256[] feeAmounts;\\n\\taddress[] feeTokenContracts;\\n\\t// The arbitrary logic call\\n\\taddress logicContractAddress;\\n\\tbytes payload;\\n\\t// Invalidation metadata\\n\\tuint256 timeOut;\\n\\tbytes32 invalidationId;\\n\\tuint256 invalidationNonce;\\n}\\n\\n// This is used purely to avoid stack too deep errors\\n// represents everything about a given validator set\\nstruct ValsetArgs {\\n\\t// the validators in this set, represented by an Ethereum address\\n\\taddress[] validators;\\n\\t// the powers of the given validators in the same order as above\\n\\tuint256[] powers;\\n\\t// the nonce of this validator set\\n\\tuint256 valsetNonce;\\n\\t// the reward amount denominated in the below reward token, can be\\n\\t// set to zero\\n\\tuint256 rewardAmount;\\n\\t// the reward token, should be set to the zero address if not being used\\n\\taddress rewardToken;\\n}\\n\\n// This represents a validator signature\\nstruct Signature {\\n\\tuint8 v;\\n\\tbytes32 r;\\n\\tbytes32 s;\\n}\\n\\ncontract Gravity is ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// The number of 'votes' required to execute a valset\\n\\t// update or batch execution, set to 2/3 of 2^32\\n\\tuint256 constant constant_powerThreshold = 2863311530;\\n\\n\\t// These are updated often\\n\\tbytes32 public state_lastValsetCheckpoint;\\n\\tmapping(address => uint256) public state_lastBatchNonces;\\n\\tmapping(bytes32 => uint256) public state_invalidationMapping;\\n\\tuint256 public state_lastValsetNonce = 0;\\n\\t// event nonce zero is reserved by the Cosmos module as a special\\n\\t// value indicating that no events have yet been submitted\\n\\tuint256 public state_lastEventNonce = 1;\\n\\n\\t// This is set once at initialization\\n\\tbytes32 public immutable state_gravityId;\\n\\n\\t// TransactionBatchExecutedEvent and SendToCosmosEvent both include the field _eventNonce.\\n\\t// This is incremented every time one of these events is emitted. It is checked by the\\n\\t// Cosmos module to ensure that all events are received in order, and that none are lost.\\n\\t//\\n\\t// ValsetUpdatedEvent does not include the field _eventNonce because it is never submitted to the Cosmos\\n\\t// module. It is purely for the use of relayers to allow them to successfully submit batches.\\n\\tevent TransactionBatchExecutedEvent(\\n\\t\\tuint256 indexed _batchNonce,\\n\\t\\taddress indexed _token,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent SendToCosmosEvent(\\n\\t\\taddress indexed _tokenContract,\\n\\t\\taddress indexed _sender,\\n\\t\\tstring _destination,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent ERC20DeployedEvent(\\n\\t\\t// FYI: Can't index on a string without doing a bunch of weird stuff\\n\\t\\tstring _cosmosDenom,\\n\\t\\taddress indexed _tokenContract,\\n\\t\\tstring _name,\\n\\t\\tstring _symbol,\\n\\t\\tuint8 _decimals,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\tevent ValsetUpdatedEvent(\\n\\t\\tuint256 indexed _newValsetNonce,\\n\\t\\tuint256 _eventNonce,\\n\\t\\tuint256 _rewardAmount,\\n\\t\\taddress _rewardToken,\\n\\t\\taddress[] _validators,\\n\\t\\tuint256[] _powers\\n\\t);\\n\\tevent LogicCallEvent(\\n\\t\\tbytes32 _invalidationId,\\n\\t\\tuint256 _invalidationNonce,\\n\\t\\tbytes _returnData,\\n\\t\\tuint256 _eventNonce\\n\\t);\\n\\n\\t// TEST FIXTURES\\n\\t// These are here to make it easier to measure gas usage. They should be removed before production\\n\\tfunction testMakeCheckpoint(ValsetArgs calldata _valsetArgs, bytes32 _gravityId) external pure {\\n\\t\\tmakeCheckpoint(_valsetArgs, _gravityId);\\n\\t}\\n\\n\\tfunction testCheckValidatorSignatures(\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\tSignature[] calldata _sigs,\\n\\t\\tbytes32 _theHash,\\n\\t\\tuint256 _powerThreshold\\n\\t) external pure {\\n\\t\\tcheckValidatorSignatures(_currentValset, _sigs, _theHash, _powerThreshold);\\n\\t}\\n\\n\\t// END TEST FIXTURES\\n\\n\\tfunction lastBatchNonce(address _erc20Address) external view returns (uint256) {\\n\\t\\treturn state_lastBatchNonces[_erc20Address];\\n\\t}\\n\\n\\tfunction lastLogicCallNonce(bytes32 _invalidation_id) external view returns (uint256) {\\n\\t\\treturn state_invalidationMapping[_invalidation_id];\\n\\t}\\n\\n\\t// Utility function to verify geth style signatures\\n\\tfunction verifySig(\\n\\t\\taddress _signer,\\n\\t\\tbytes32 _theHash,\\n\\t\\tSignature calldata _sig\\n\\t) private pure returns (bool) {\\n\\t\\tbytes32 messageDigest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _theHash)\\n\\t\\t);\\n\\t\\treturn _signer == ECDSA.recover(messageDigest, _sig.v, _sig.r, _sig.s);\\n\\t}\\n\\n\\t// Utility function to determine that a validator set and signatures are well formed\\n\\tfunction validateValset(ValsetArgs calldata _valset, Signature[] calldata _sigs) private pure {\\n\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\tif (\\n\\t\\t\\t_valset.validators.length != _valset.powers.length ||\\n\\t\\t\\t_valset.validators.length != _sigs.length\\n\\t\\t) {\\n\\t\\t\\trevert MalformedCurrentValidatorSet();\\n\\t\\t}\\n\\t}\\n\\n\\t// Make a new checkpoint from the supplied validator set\\n\\t// A checkpoint is a hash of all relevant information about the valset. This is stored by the contract,\\n\\t// instead of storing the information directly. This saves on storage and gas.\\n\\t// The format of the checkpoint is:\\n\\t// h(gravityId, \\\"checkpoint\\\", valsetNonce, validators[], powers[])\\n\\t// Where h is the keccak256 hash function.\\n\\t// The validator powers must be decreasing or equal. This is important for checking the signatures on the\\n\\t// next valset, since it allows the caller to stop verifying signatures once a quorum of signatures have been verified.\\n\\tfunction makeCheckpoint(ValsetArgs memory _valsetArgs, bytes32 _gravityId)\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (bytes32)\\n\\t{\\n\\t\\t// bytes32 encoding of the string \\\"checkpoint\\\"\\n\\t\\tbytes32 methodName = 0x636865636b706f696e7400000000000000000000000000000000000000000000;\\n\\n\\t\\tbytes32 checkpoint = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t_gravityId,\\n\\t\\t\\t\\tmethodName,\\n\\t\\t\\t\\t_valsetArgs.valsetNonce,\\n\\t\\t\\t\\t_valsetArgs.validators,\\n\\t\\t\\t\\t_valsetArgs.powers,\\n\\t\\t\\t\\t_valsetArgs.rewardAmount,\\n\\t\\t\\t\\t_valsetArgs.rewardToken\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\treturn checkpoint;\\n\\t}\\n\\n\\tfunction checkValidatorSignatures(\\n\\t\\t// The current validator set and their powers\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\t// The current validator's signatures\\n\\t\\tSignature[] calldata _sigs,\\n\\t\\t// This is what we are checking they have signed\\n\\t\\tbytes32 _theHash,\\n\\t\\tuint256 _powerThreshold\\n\\t) private pure {\\n\\t\\tuint256 cumulativePower = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _currentValset.validators.length; i++) {\\n\\t\\t\\t// If v is set to 0, this signifies that it was not possible to get a signature from this validator and we skip evaluation\\n\\t\\t\\t// (In a valid signature, it is either 27 or 28)\\n\\t\\t\\tif (_sigs[i].v != 0) {\\n\\t\\t\\t\\t// Check that the current validator has signed off on the hash\\n\\t\\t\\t\\tif (!verifySig(_currentValset.validators[i], _theHash, _sigs[i])) {\\n\\t\\t\\t\\t\\trevert InvalidSignature();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Sum up cumulative power\\n\\t\\t\\t\\tcumulativePower = cumulativePower + _currentValset.powers[i];\\n\\n\\t\\t\\t\\t// Break early to avoid wasting gas\\n\\t\\t\\t\\tif (cumulativePower > _powerThreshold) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Check that there was enough power\\n\\t\\tif (cumulativePower <= _powerThreshold) {\\n\\t\\t\\trevert InsufficientPower(cumulativePower, _powerThreshold);\\n\\t\\t}\\n\\t\\t// Success\\n\\t}\\n\\n\\t// This updates the valset by checking that the validators in the current valset have signed off on the\\n\\t// new valset. The signatures supplied are the signatures of the current valset over the checkpoint hash\\n\\t// generated from the new valset.\\n\\t// Anyone can call this function, but they must supply valid signatures of constant_powerThreshold of the current valset over\\n\\t// the new valset.\\n\\tfunction updateValset(\\n\\t\\t// The new version of the validator set\\n\\t\\tValsetArgs calldata _newValset,\\n\\t\\t// The current validators that approve the change\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\t// These are arrays of the parts of the current validator's signatures\\n\\t\\tSignature[] calldata _sigs\\n\\t) external {\\n\\t\\t// CHECKS\\n\\n\\t\\t// Check that the valset nonce is greater than the old one\\n\\t\\tif (_newValset.valsetNonce <= _currentValset.valsetNonce) {\\n\\t\\t\\trevert InvalidValsetNonce({\\n\\t\\t\\t\\tnewNonce: _newValset.valsetNonce,\\n\\t\\t\\t\\tcurrentNonce: _currentValset.valsetNonce\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Check that the valset nonce is less than a million nonces forward from the old one\\n\\t\\t// this makes it difficult for an attacker to lock out the contract by getting a single\\n\\t\\t// bad validator set through with uint256 max nonce\\n\\t\\tif (_newValset.valsetNonce > _currentValset.valsetNonce + 1000000) {\\n\\t\\t\\trevert InvalidValsetNonce({\\n\\t\\t\\t\\tnewNonce: _newValset.valsetNonce,\\n\\t\\t\\t\\tcurrentNonce: _currentValset.valsetNonce\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Check that new validators and powers set is well-formed\\n\\t\\tif (\\n\\t\\t\\t_newValset.validators.length != _newValset.powers.length ||\\n\\t\\t\\t_newValset.validators.length == 0\\n\\t\\t) {\\n\\t\\t\\trevert MalformedNewValidatorSet();\\n\\t\\t}\\n\\n\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\tvalidateValset(_currentValset, _sigs);\\n\\n\\t\\t// Check cumulative power to ensure the contract has sufficient power to actually\\n\\t\\t// pass a vote\\n\\t\\tuint256 cumulativePower = 0;\\n\\t\\tfor (uint256 i = 0; i < _newValset.powers.length; i++) {\\n\\t\\t\\tcumulativePower = cumulativePower + _newValset.powers[i];\\n\\t\\t\\tif (cumulativePower > constant_powerThreshold) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (cumulativePower <= constant_powerThreshold) {\\n\\t\\t\\trevert InsufficientPower({\\n\\t\\t\\t\\tcumulativePower: cumulativePower,\\n\\t\\t\\t\\tpowerThreshold: constant_powerThreshold\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\tif (makeCheckpoint(_currentValset, state_gravityId) != state_lastValsetCheckpoint) {\\n\\t\\t\\trevert IncorrectCheckpoint();\\n\\t\\t}\\n\\n\\t\\t// Check that enough current validators have signed off on the new validator set\\n\\t\\tbytes32 newCheckpoint = makeCheckpoint(_newValset, state_gravityId);\\n\\n\\t\\tcheckValidatorSignatures(_currentValset, _sigs, newCheckpoint, constant_powerThreshold);\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\t// Stored to be used next time to validate that the valset\\n\\t\\t// supplied by the caller is correct.\\n\\t\\tstate_lastValsetCheckpoint = newCheckpoint;\\n\\n\\t\\t// Store new nonce\\n\\t\\tstate_lastValsetNonce = _newValset.valsetNonce;\\n\\n\\t\\t// Send submission reward to msg.sender if reward token is a valid value\\n\\t\\tif (_newValset.rewardToken != address(0) && _newValset.rewardAmount != 0) {\\n\\t\\t\\tIERC20(_newValset.rewardToken).safeTransfer(msg.sender, _newValset.rewardAmount);\\n\\t\\t}\\n\\n\\t\\t// LOGS\\n\\n\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\t\\temit ValsetUpdatedEvent(\\n\\t\\t\\t_newValset.valsetNonce,\\n\\t\\t\\tstate_lastEventNonce,\\n\\t\\t\\t_newValset.rewardAmount,\\n\\t\\t\\t_newValset.rewardToken,\\n\\t\\t\\t_newValset.validators,\\n\\t\\t\\t_newValset.powers\\n\\t\\t);\\n\\t}\\n\\n\\t// submitBatch processes a batch of Cosmos -> Ethereum transactions by sending the tokens in the transactions\\n\\t// to the destination addresses. It is approved by the current Cosmos validator set.\\n\\t// Anyone can call this function, but they must supply valid signatures of constant_powerThreshold of the current valset over\\n\\t// the batch.\\n\\tfunction submitBatch(\\n\\t\\t// The validators that approve the batch\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\t// These are arrays of the parts of the validators signatures\\n\\t\\tSignature[] calldata _sigs,\\n\\t\\t// The batch of transactions\\n\\t\\tuint256[] calldata _amounts,\\n\\t\\taddress[] calldata _destinations,\\n\\t\\tuint256[] calldata _fees,\\n\\t\\tuint256 _batchNonce,\\n\\t\\taddress _tokenContract,\\n\\t\\t// a block height beyond which this batch is not valid\\n\\t\\t// used to provide a fee-free timeout\\n\\t\\tuint256 _batchTimeout\\n\\t) external nonReentrant {\\n\\t\\t// CHECKS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\t// Check that the batch nonce is higher than the last nonce for this token\\n\\t\\t\\tif (_batchNonce <= state_lastBatchNonces[_tokenContract]) {\\n\\t\\t\\t\\trevert InvalidBatchNonce({\\n\\t\\t\\t\\t\\tnewNonce: _batchNonce,\\n\\t\\t\\t\\t\\tcurrentNonce: state_lastBatchNonces[_tokenContract]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that the batch nonce is less than one million nonces forward from the old one\\n\\t\\t\\t// this makes it difficult for an attacker to lock out the contract by getting a single\\n\\t\\t\\t// bad batch through with uint256 max nonce\\n\\t\\t\\tif (_batchNonce > state_lastBatchNonces[_tokenContract] + 1000000) {\\n\\t\\t\\t\\trevert InvalidBatchNonce({\\n\\t\\t\\t\\t\\tnewNonce: _batchNonce,\\n\\t\\t\\t\\t\\tcurrentNonce: state_lastBatchNonces[_tokenContract]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that the block height is less than the timeout height\\n\\t\\t\\tif (block.number >= _batchTimeout) {\\n\\t\\t\\t\\trevert BatchTimedOut();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\t\\tvalidateValset(_currentValset, _sigs);\\n\\n\\t\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\t\\tif (makeCheckpoint(_currentValset, state_gravityId) != state_lastValsetCheckpoint) {\\n\\t\\t\\t\\trevert IncorrectCheckpoint();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that the transaction batch is well-formed\\n\\t\\t\\tif (_amounts.length != _destinations.length || _amounts.length != _fees.length) {\\n\\t\\t\\t\\trevert MalformedBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that enough current validators have signed off on the transaction batch and valset\\n\\t\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t\\t_currentValset,\\n\\t\\t\\t\\t_sigs,\\n\\t\\t\\t\\t// Get hash of the transaction batch and checkpoint\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\t\\tstate_gravityId,\\n\\t\\t\\t\\t\\t\\t// bytes32 encoding of \\\"transactionBatch\\\"\\n\\t\\t\\t\\t\\t\\t0x7472616e73616374696f6e426174636800000000000000000000000000000000,\\n\\t\\t\\t\\t\\t\\t_amounts,\\n\\t\\t\\t\\t\\t\\t_destinations,\\n\\t\\t\\t\\t\\t\\t_fees,\\n\\t\\t\\t\\t\\t\\t_batchNonce,\\n\\t\\t\\t\\t\\t\\t_tokenContract,\\n\\t\\t\\t\\t\\t\\t_batchTimeout\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tconstant_powerThreshold\\n\\t\\t\\t);\\n\\n\\t\\t\\t// ACTIONS\\n\\n\\t\\t\\t// Store batch nonce\\n\\t\\t\\tstate_lastBatchNonces[_tokenContract] = _batchNonce;\\n\\n\\t\\t\\t{\\n\\t\\t\\t\\t// Send transaction amounts to destinations\\n\\t\\t\\t\\tuint256 totalFee;\\n\\t\\t\\t\\tfor (uint256 i = 0; i < _amounts.length; i++) {\\n\\t\\t\\t\\t\\tIERC20(_tokenContract).safeTransfer(_destinations[i], _amounts[i]);\\n\\t\\t\\t\\t\\ttotalFee = totalFee + _fees[i];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Send transaction fees to msg.sender\\n\\t\\t\\t\\tIERC20(_tokenContract).safeTransfer(msg.sender, totalFee);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// LOGS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\t\\t\\temit TransactionBatchExecutedEvent(_batchNonce, _tokenContract, state_lastEventNonce);\\n\\t\\t}\\n\\t}\\n\\n\\t// This makes calls to contracts that execute arbitrary logic\\n\\t// First, it gives the logic contract some tokens\\n\\t// Then, it gives msg.senders tokens for fees\\n\\t// Then, it calls an arbitrary function on the logic contract\\n\\t// invalidationId and invalidationNonce are used for replay prevention.\\n\\t// They can be used to implement a per-token nonce by setting the token\\n\\t// address as the invalidationId and incrementing the nonce each call.\\n\\t// They can be used for nonce-free replay prevention by using a different invalidationId\\n\\t// for each call.\\n\\tfunction submitLogicCall(\\n\\t\\t// The validators that approve the call\\n\\t\\tValsetArgs calldata _currentValset,\\n\\t\\t// These are arrays of the parts of the validators signatures\\n\\t\\tSignature[] calldata _sigs,\\n\\t\\tLogicCallArgs memory _args\\n\\t) external nonReentrant {\\n\\t\\t// CHECKS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\t// Check that the call has not timed out\\n\\t\\t\\tif (block.number >= _args.timeOut) {\\n\\t\\t\\t\\trevert LogicCallTimedOut();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Check that the invalidation nonce is higher than the last nonce for this invalidation Id\\n\\t\\t\\tif (state_invalidationMapping[_args.invalidationId] >= _args.invalidationNonce) {\\n\\t\\t\\t\\trevert InvalidLogicCallNonce({\\n\\t\\t\\t\\t\\tnewNonce: _args.invalidationNonce,\\n\\t\\t\\t\\t\\tcurrentNonce: state_invalidationMapping[_args.invalidationId]\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\n\\t\\t\\t// note the lack of nonce skipping check, it's not needed here since an attacker\\n\\t\\t\\t// will never be able to fill the invalidationId space, therefore a nonce lockout\\n\\t\\t\\t// is simply not possible\\n\\n\\t\\t\\t// Check that current validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\t\\tvalidateValset(_currentValset, _sigs);\\n\\n\\t\\t\\t// Check that the supplied current validator set matches the saved checkpoint\\n\\t\\t\\tif (makeCheckpoint(_currentValset, state_gravityId) != state_lastValsetCheckpoint) {\\n\\t\\t\\t\\trevert IncorrectCheckpoint();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_args.transferAmounts.length != _args.transferTokenContracts.length) {\\n\\t\\t\\t\\trevert InvalidLogicCallTransfers();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_args.feeAmounts.length != _args.feeTokenContracts.length) {\\n\\t\\t\\t\\trevert InvalidLogicCallFees();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t{\\n\\t\\t\\tbytes32 argsHash = keccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tstate_gravityId,\\n\\t\\t\\t\\t\\t// bytes32 encoding of \\\"logicCall\\\"\\n\\t\\t\\t\\t\\t0x6c6f67696343616c6c0000000000000000000000000000000000000000000000,\\n\\t\\t\\t\\t\\t_args.transferAmounts,\\n\\t\\t\\t\\t\\t_args.transferTokenContracts,\\n\\t\\t\\t\\t\\t_args.feeAmounts,\\n\\t\\t\\t\\t\\t_args.feeTokenContracts,\\n\\t\\t\\t\\t\\t_args.logicContractAddress,\\n\\t\\t\\t\\t\\t_args.payload,\\n\\t\\t\\t\\t\\t_args.timeOut,\\n\\t\\t\\t\\t\\t_args.invalidationId,\\n\\t\\t\\t\\t\\t_args.invalidationNonce\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Check that enough current validators have signed off on the transaction batch and valset\\n\\t\\t\\tcheckValidatorSignatures(\\n\\t\\t\\t\\t_currentValset,\\n\\t\\t\\t\\t_sigs,\\n\\t\\t\\t\\t// Get hash of the transaction batch and checkpoint\\n\\t\\t\\t\\targsHash,\\n\\t\\t\\t\\tconstant_powerThreshold\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\t// Update invaldiation nonce\\n\\t\\tstate_invalidationMapping[_args.invalidationId] = _args.invalidationNonce;\\n\\n\\t\\t// Send tokens to the logic contract\\n\\t\\tfor (uint256 i = 0; i < _args.transferAmounts.length; i++) {\\n\\t\\t\\tIERC20(_args.transferTokenContracts[i]).safeTransfer(\\n\\t\\t\\t\\t_args.logicContractAddress,\\n\\t\\t\\t\\t_args.transferAmounts[i]\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Make call to logic contract\\n\\t\\tbytes memory returnData = Address.functionCall(_args.logicContractAddress, _args.payload);\\n\\n\\t\\t// Send fees to msg.sender\\n\\t\\tfor (uint256 i = 0; i < _args.feeAmounts.length; i++) {\\n\\t\\t\\tIERC20(_args.feeTokenContracts[i]).safeTransfer(msg.sender, _args.feeAmounts[i]);\\n\\t\\t}\\n\\n\\t\\t// LOGS scoped to reduce stack depth\\n\\t\\t{\\n\\t\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\t\\t\\temit LogicCallEvent(\\n\\t\\t\\t\\t_args.invalidationId,\\n\\t\\t\\t\\t_args.invalidationNonce,\\n\\t\\t\\t\\treturnData,\\n\\t\\t\\t\\tstate_lastEventNonce\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sendToCosmos(\\n\\t\\taddress _tokenContract,\\n\\t\\tstring calldata _destination,\\n\\t\\tuint256 _amount\\n\\t) external nonReentrant {\\n\\t\\t// we snapshot our current balance of this token\\n\\t\\tuint256 ourStartingBalance = IERC20(_tokenContract).balanceOf(address(this));\\n\\n\\t\\t// attempt to transfer the user specified amount\\n\\t\\tIERC20(_tokenContract).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n\\t\\t// check what this particular ERC20 implementation actually gave us, since it doesn't\\n\\t\\t// have to be at all related to the _amount\\n\\t\\tuint256 ourEndingBalance = IERC20(_tokenContract).balanceOf(address(this));\\n\\n\\t\\t// a very strange ERC20 may trigger this condition, if we didn't have this we would\\n\\t\\t// underflow, so it's mostly just an error message printer\\n\\t\\tif (ourEndingBalance <= ourStartingBalance) {\\n\\t\\t\\trevert InvalidSendToCosmos();\\n\\t\\t}\\n\\n\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\n\\t\\t// emit to Cosmos the actual amount our balance has changed, rather than the user\\n\\t\\t// provided amount. This protects against a small set of wonky ERC20 behavior, like\\n\\t\\t// burning on send but not tokens that for example change every users balance every day.\\n\\t\\temit SendToCosmosEvent(\\n\\t\\t\\t_tokenContract,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_destination,\\n\\t\\t\\tourEndingBalance - ourStartingBalance,\\n\\t\\t\\tstate_lastEventNonce\\n\\t\\t);\\n\\t}\\n\\n\\tfunction deployERC20(\\n\\t\\tstring calldata _cosmosDenom,\\n\\t\\tstring calldata _name,\\n\\t\\tstring calldata _symbol,\\n\\t\\tuint8 _decimals\\n\\t) external {\\n\\t\\t// Deploy an ERC20 with entire supply granted to Gravity.sol\\n\\t\\tCosmosERC20 erc20 = new CosmosERC20(address(this), _name, _symbol, _decimals);\\n\\n\\t\\t// Fire an event to let the Cosmos module know\\n\\t\\tstate_lastEventNonce = state_lastEventNonce + 1;\\n\\t\\temit ERC20DeployedEvent(\\n\\t\\t\\t_cosmosDenom,\\n\\t\\t\\taddress(erc20),\\n\\t\\t\\t_name,\\n\\t\\t\\t_symbol,\\n\\t\\t\\t_decimals,\\n\\t\\t\\tstate_lastEventNonce\\n\\t\\t);\\n\\t}\\n\\n\\tconstructor(\\n\\t\\t// A unique identifier for this gravity instance to use in signatures\\n\\t\\tbytes32 _gravityId,\\n\\t\\t// The validator set, not in valset args format since many of it's\\n\\t\\t// arguments would never be used in this case\\n\\t\\taddress[] memory _validators,\\n\\t\\tuint256[] memory _powers\\n\\t) {\\n\\t\\t// CHECKS\\n\\n\\t\\t// Check that validators, powers, and signatures (v,r,s) set is well-formed\\n\\t\\tif (_validators.length != _powers.length || _validators.length == 0) {\\n\\t\\t\\trevert MalformedCurrentValidatorSet();\\n\\t\\t}\\n\\n\\t\\t// Check cumulative power to ensure the contract has sufficient power to actually\\n\\t\\t// pass a vote\\n\\t\\tuint256 cumulativePower = 0;\\n\\t\\tfor (uint256 i = 0; i < _powers.length; i++) {\\n\\t\\t\\tcumulativePower = cumulativePower + _powers[i];\\n\\t\\t\\tif (cumulativePower > constant_powerThreshold) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (cumulativePower <= constant_powerThreshold) {\\n\\t\\t\\trevert InsufficientPower({\\n\\t\\t\\t\\tcumulativePower: cumulativePower,\\n\\t\\t\\t\\tpowerThreshold: constant_powerThreshold\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tValsetArgs memory _valset;\\n\\t\\t_valset = ValsetArgs(_validators, _powers, 0, 0, address(0));\\n\\n\\t\\tbytes32 newCheckpoint = makeCheckpoint(_valset, _gravityId);\\n\\n\\t\\t// ACTIONS\\n\\n\\t\\tstate_gravityId = _gravityId;\\n\\t\\tstate_lastValsetCheckpoint = newCheckpoint;\\n\\n\\t\\t// LOGS\\n\\n\\t\\temit ValsetUpdatedEvent(\\n\\t\\t\\tstate_lastValsetNonce,\\n\\t\\t\\tstate_lastEventNonce,\\n\\t\\t\\t0,\\n\\t\\t\\taddress(0),\\n\\t\\t\\t_validators,\\n\\t\\t\\t_powers\\n\\t\\t);\\n\\t}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract CosmosERC20\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"contract Gravity\",\"name\":\"_gravityBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Bandwidth\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"VerificationKey\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"SignedVerificationKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"CosmosRecipient\",\"type\":\"string\"}],\"name\":\"BBCredentialPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Enabled\",\"type\":\"bool\"}],\"name\":\"CredentialGenerationSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"NewBytesPerToken\",\"type\":\"uint256\"}],\"name\":\"RatioChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BytesPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bandwidthFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBytesPerTokenAmount\",\"type\":\"uint256\"}],\"name\":\"changeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credentialGenerationEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_generation\",\"type\":\"bool\"}],\"name\":\"credentialGenerationSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract CosmosERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_verificationKey\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signedVerificationKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cosmosRecipient\",\"type\":\"string\"}],\"name\":\"generateBasicBandwidthCredential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gravityBridge\",\"outputs\":[{\"internalType\":\"contract Gravity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BandwidthGenerator", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e8883baef3869e14e4823f46662e81d4f7d2a81f000000000000000000000000a4108aa1ec4967f8b52220a4f7e94a8201f2d906", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}