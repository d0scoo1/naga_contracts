{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.1.0\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/interfaces/ITreasuryPolicy.sol\r\n\r\npragma solidity 0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ITreasuryPolicy {\r\n    function minting_fee() external view returns (uint256);\r\n\r\n    function redemption_fee() external view returns (uint256);\r\n\r\n    function excess_collateral_safety_margin() external view returns (uint256);\r\n\r\n    function idleCollateralUtilizationRatio() external view returns (uint256);\r\n\r\n    function reservedCollateralThreshold() external view returns (uint256);\r\n}\r\n\r\n// File contracts/TreasuryPolicy.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ncontract TreasuryPolicy is Ownable, Initializable, ITreasuryPolicy {\r\n    address public treasury;\r\n\r\n    // Constants for various precisions\r\n    uint256 private constant PRICE_PRECISION = 1e6;\r\n    uint256 private constant RATIO_PRECISION = 1e6;\r\n\r\n    uint256 public override idleCollateralUtilizationRatio; // ratio where idle collateral can be used\r\n    uint256 public constant IDLE_COLLATERAL_UTILIZATION_RATION_MAX = 800000; // no more than 80%\r\n\r\n    uint256 public override reservedCollateralThreshold; // ratio of the threshold where collateral are reserved for redemption\r\n    uint256 public constant RESERVE_COLLATERAL_THRESHOLD_MIN = 150000; // no less than 15%\r\n\r\n    // fees\r\n    uint256 public override redemption_fee; // 6 decimals of precision\r\n    uint256 public constant REDEMPTION_FEE_MAX = 90000; // 9%\r\n\r\n    uint256 public override minting_fee; // 6 decimals of precision\r\n    uint256 public constant MINTING_FEE_MAX = 50000; // 5%\r\n\r\n    uint256 public override excess_collateral_safety_margin;\r\n    uint256 public constant EXCESS_COLLATERAL_SAFETY_MARGIN_MIN = 150000; // 15%\r\n\r\n    /* ========== EVENTS ============= */\r\n\r\n    event TreasuryChanged(address indexed newTreasury);\r\n\r\n    function initialize(\r\n        address _treasury,\r\n        uint256 _redemption_fee,\r\n        uint256 _minting_fee,\r\n        uint256 _excess_collateral_safety_margin,\r\n        uint256 _idleCollateralUtilizationRatio,\r\n        uint256 _reservedCollateralThreshold\r\n    ) external initializer onlyOwner {\r\n        setTreasury(_treasury);\r\n        setMintingFee(_minting_fee);\r\n        setRedemptionFee(_redemption_fee);\r\n        setExcessCollateralSafetyMargin(_excess_collateral_safety_margin);\r\n        setIdleCollateralUtilizationRatio(_idleCollateralUtilizationRatio);\r\n        setReservedCollateralThreshold(_reservedCollateralThreshold);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function setTreasury(address _treasury) public onlyOwner {\r\n        require(_treasury != address(0), \"Invalid address\");\r\n        treasury = _treasury;\r\n        emit TreasuryChanged(treasury);\r\n    }\r\n\r\n    function setRedemptionFee(uint256 _redemption_fee) public onlyOwner {\r\n        require(_redemption_fee <= REDEMPTION_FEE_MAX, \">REDEMPTION_FEE_MAX\");\r\n        redemption_fee = _redemption_fee;\r\n    }\r\n\r\n    function setMintingFee(uint256 _minting_fee) public onlyOwner {\r\n        require(_minting_fee <= MINTING_FEE_MAX, \">MINTING_FEE_MAX\");\r\n        minting_fee = _minting_fee;\r\n    }\r\n\r\n    function setExcessCollateralSafetyMargin(uint256 _excess_collateral_safety_margin) public onlyOwner {\r\n        require(_excess_collateral_safety_margin >= EXCESS_COLLATERAL_SAFETY_MARGIN_MIN, \"<EXCESS_COLLATERAL_SAFETY_MARGIN_MIN\");\r\n        excess_collateral_safety_margin = _excess_collateral_safety_margin;\r\n    }\r\n\r\n    function setIdleCollateralUtilizationRatio(uint256 _idleCollateralUtilizationRatio) public onlyOwner {\r\n        require(_idleCollateralUtilizationRatio <= IDLE_COLLATERAL_UTILIZATION_RATION_MAX, \">IDLE_COLLATERAL_UTILIZATION_RATION_MAX\");\r\n        idleCollateralUtilizationRatio = _idleCollateralUtilizationRatio;\r\n    }\r\n\r\n    function setReservedCollateralThreshold(uint256 _reservedCollateralThreshold) public onlyOwner {\r\n        require(_reservedCollateralThreshold >= RESERVE_COLLATERAL_THRESHOLD_MIN, \"<RESERVE_COLLATERAL_THRESHOLD_MIN\");\r\n        reservedCollateralThreshold = _reservedCollateralThreshold;\r\n    }\r\n    \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXCESS_COLLATERAL_SAFETY_MARGIN_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDLE_COLLATERAL_UTILIZATION_RATION_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTING_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_COLLATERAL_THRESHOLD_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excess_collateral_safety_margin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idleCollateralUtilizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redemption_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minting_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_excess_collateral_safety_margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_idleCollateralUtilizationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservedCollateralThreshold\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minting_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedCollateralThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_excess_collateral_safety_margin\",\"type\":\"uint256\"}],\"name\":\"setExcessCollateralSafetyMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idleCollateralUtilizationRatio\",\"type\":\"uint256\"}],\"name\":\"setIdleCollateralUtilizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minting_fee\",\"type\":\"uint256\"}],\"name\":\"setMintingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemption_fee\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservedCollateralThreshold\",\"type\":\"uint256\"}],\"name\":\"setReservedCollateralThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TreasuryPolicy", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7dd76a24b46b66491de86739e5321f1fccde255c3bf1f1918ca75415e8019928"}]}