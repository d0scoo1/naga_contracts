{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MetaPopitStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./libraries/Recoverable.sol\\\";\\nimport \\\"./interfaces/ITokenStake.sol\\\";\\n\\n/**\\n * @title MetaPopitStaking\\n * @notice MetaPopit Staking contract\\n * https://www.metapopit.com\\n */\\ncontract MetaPopitStaking is Ownable, Recoverable {\\n    using Counters for Counters.Counter;\\n\\n    struct TokenInfo {\\n        uint256 level;\\n        uint256 pool;\\n        bool redeemed;\\n    }\\n    struct OwnerInfo {\\n        uint256 hints;\\n        uint256 staked;\\n        uint256 startHintTime;\\n        bool redeemed;\\n    }\\n    struct PoolInfo {\\n        uint256 depositTime;\\n        uint256 levelSpeed;\\n        uint256[] tokens;\\n        address owner;\\n    }\\n\\n    uint256 public constant SPEED_RESOLUTION = 1000;\\n\\n    bool public isStakingClosed;\\n    uint256 public stakedTokenCount;\\n    uint256 public maxLevelTeamSize;\\n    uint256 public maxHintTeamSize;\\n    address public immutable collection;\\n\\n    Counters.Counter private _poolCounter;\\n\\n    // speeds per number of NFT\\n    mapping(uint256 => uint256) private _levelSpeed;\\n    mapping(uint256 => uint256) private _hintSpeed;\\n\\n    // mapping poolId => PoolInfo\\n    mapping(uint256 => PoolInfo) private _poolInfos;\\n    // mapping tokenId => TokenInfo\\n    mapping(uint256 => TokenInfo) private _tokenInfos;\\n    // mapping owner => OwnerInfo\\n    mapping(address => OwnerInfo) private _ownerInfos;\\n\\n    event Stake(address indexed account, uint256 poolIndex, uint256[] tokenIds);\\n    event UnStake(address indexed account, uint256 poolIndex, uint256[] tokenIds);\\n    event RedeemToken(uint256 tokenId, uint256 level);\\n    event RedeemAccount(address indexed account, uint256 hints);\\n    event StakingClosed();\\n\\n    modifier whenTokensNotStaked(uint256[] memory tokenIds) {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(!ITokenStake(collection).isTokenStaked(tokenIds[i]), \\\"MetaPopitStaking: Token already staked\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier whenStakingOpened() {\\n        require(!isStakingClosed, \\\"MetaPopitStaking: staking closed\\\");\\n        _;\\n    }\\n\\n    constructor(address _collection) {\\n        collection = _collection;\\n    }\\n\\n    function _getNextPoolId() internal returns (uint256) {\\n        _poolCounter.increment();\\n        return _poolCounter.current();\\n    }\\n\\n    /**\\n     * @dev returns the current pending reward based on current value and speed\\n     */\\n    function _getPendingRewards(\\n        uint256 currentValue,\\n        uint256 depositTime,\\n        uint256 speed\\n    ) internal view returns (uint256 pendingReward, uint256 nextRewardDate) {\\n        pendingReward = currentValue;\\n        nextRewardDate = 0;\\n\\n        if (speed > 0) {\\n            uint256 currentDate = depositTime * SPEED_RESOLUTION;\\n            uint256 maxDate = block.timestamp * SPEED_RESOLUTION;\\n            uint256 increment = speed;\\n\\n            pendingReward = 0;\\n            while (currentDate <= maxDate) {\\n                pendingReward += 1;\\n\\n                if (pendingReward > currentValue) {\\n                    currentDate += increment;\\n                }\\n\\n                increment *= 2;\\n            }\\n\\n            nextRewardDate = currentDate / SPEED_RESOLUTION;\\n        }\\n    }\\n\\n    /**\\n     * @dev Apply completed pending level rewards for a token\\n     */\\n    function _applyPendingLevel(\\n        uint256 tokenId,\\n        uint256 depositTime,\\n        uint256 levelSpeed\\n    ) internal {\\n        if (depositTime > 0 && levelSpeed > 0) {\\n            (uint256 pendingLevel, ) = _getPendingRewards(_tokenInfos[tokenId].level, depositTime, levelSpeed);\\n            if (pendingLevel > 0) _tokenInfos[tokenId].level = pendingLevel - 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Apply completed pending hints rewards for a user\\n     */\\n    function _applyPendingHints(address account) internal {\\n        if (_ownerInfos[account].staked == 0 || _ownerInfos[account].redeemed || _ownerInfos[account].startHintTime == 0) return;\\n\\n        uint256 hintSpeed = getHintSpeed(_ownerInfos[account].staked);\\n        if (hintSpeed > 0) {\\n            (uint256 pendingHints, ) = _getPendingRewards(\\n                _ownerInfos[account].hints,\\n                _ownerInfos[account].startHintTime,\\n                hintSpeed\\n            );\\n\\n            if (pendingHints > 0) {\\n                _ownerInfos[account].hints = pendingHints - 1;\\n            }\\n        }\\n\\n        _ownerInfos[account].startHintTime = 0;\\n    }\\n\\n    /**\\n     * @dev returns the current level state for token\\n     */\\n    function getLevel(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            uint256 level,\\n            uint256 pendingLevel,\\n            uint256 nextLevelDate,\\n            uint256 levelSpeed,\\n            uint256 poolId,\\n            bool redeemed\\n        )\\n    {\\n        level = _tokenInfos[tokenId].level;\\n        poolId = _tokenInfos[tokenId].pool;\\n        redeemed = _tokenInfos[tokenId].redeemed;\\n        levelSpeed = 0;\\n\\n        if (_tokenInfos[tokenId].pool != 0) {\\n            (pendingLevel, nextLevelDate) = _getPendingRewards(\\n                _tokenInfos[tokenId].level,\\n                _poolInfos[_tokenInfos[tokenId].pool].depositTime,\\n                _poolInfos[_tokenInfos[tokenId].pool].levelSpeed\\n            );\\n            levelSpeed = _poolInfos[_tokenInfos[tokenId].pool].levelSpeed;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the current hint state for a user\\n     */\\n    function getHints(address account)\\n        public\\n        view\\n        returns (\\n            uint256 hints,\\n            uint256 pendingHints,\\n            uint256 nextHintDate,\\n            uint256 hintSpeed,\\n            bool redeemed\\n        )\\n    {\\n        hints = _ownerInfos[account].hints;\\n        redeemed = _ownerInfos[account].redeemed;\\n        hintSpeed = 0;\\n\\n        if (_ownerInfos[account].startHintTime != 0) {\\n            hintSpeed = getHintSpeed(_ownerInfos[account].staked);\\n            (pendingHints, nextHintDate) = _getPendingRewards(\\n                _ownerInfos[account].hints,\\n                _ownerInfos[account].startHintTime,\\n                hintSpeed\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev returns `true` if `tokenId` is staked\\n     */\\n    function isStaked(uint256 tokenId) public view returns (bool) {\\n        return _tokenInfos[tokenId].pool != 0;\\n    }\\n\\n    /**\\n     * @dev returns stake info for a token (poolIndex, deposit time and rewards speed)\\n     */\\n    function getStakeInfo(uint256 tokenId)\\n        public\\n        view\\n        returns (\\n            uint256 poolIndex,\\n            uint256 depositTime,\\n            uint256 levelSpeed\\n        )\\n    {\\n        uint256 poolId = _tokenInfos[tokenId].pool;\\n        if (poolId == 0) {\\n            poolIndex = 0;\\n            depositTime = 0;\\n            levelSpeed = 0;\\n        } else {\\n            poolIndex = poolId;\\n            depositTime = _poolInfos[poolId].depositTime;\\n            levelSpeed = _poolInfos[poolId].levelSpeed;\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the info for a pool\\n     */\\n    function getPoolInfo(uint256 poolIndex) public view returns (PoolInfo memory pool) {\\n        pool = _poolInfos[poolIndex];\\n    }\\n\\n    /**\\n     * @dev returns the info for a token\\n     */\\n    function getTokenInfo(uint256 tokenId) public view returns (TokenInfo memory tokenInfo) {\\n        tokenInfo = _tokenInfos[tokenId];\\n    }\\n\\n    function _redeemToken(uint256 tokenId) internal {\\n        require(_tokenInfos[tokenId].pool == 0, \\\"MetaPopitStaking: Must unstake before redeem\\\");\\n        _tokenInfos[tokenId].redeemed = true;\\n        emit RedeemToken(tokenId, _tokenInfos[tokenId].level);\\n    }\\n\\n    function _redeemAccount(address account) internal {\\n        _applyPendingHints(account);\\n        _ownerInfos[account].redeemed = true;\\n        _ownerInfos[account].startHintTime = 0;\\n        emit RedeemAccount(account, _ownerInfos[account].hints);\\n    }\\n\\n    /**\\n     * @dev returns `true` if `tokenId` is redeemed\\n     */\\n    function isTokenRedeemed(uint256 tokenId) public view returns (bool) {\\n        return _tokenInfos[tokenId].redeemed;\\n    }\\n\\n    /**\\n     * @dev returns `true` if `tokenId` is redeemed\\n     */\\n    function isAccountRedeemed(address account) public view returns (bool) {\\n        return _ownerInfos[account].redeemed;\\n    }\\n\\n    function _stake(address tokenOwner, uint256[] memory tokenIds)\\n        internal\\n        whenStakingOpened\\n        whenTokensNotStaked(tokenIds)\\n    {\\n        uint256 poolIndex = _getNextPoolId();\\n        _poolInfos[poolIndex] = PoolInfo({\\n            depositTime: block.timestamp,\\n            levelSpeed: getLevelSpeed(tokenIds.length),\\n            tokens: tokenIds,\\n            owner: tokenOwner\\n        });\\n\\n        if (_ownerInfos[tokenOwner].staked < maxHintTeamSize) {\\n            _applyPendingHints(tokenOwner);\\n            _ownerInfos[tokenOwner].startHintTime = block.timestamp;\\n        }\\n        _ownerInfos[tokenOwner].staked += tokenIds.length;\\n        stakedTokenCount += tokenIds.length;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(!_tokenInfos[tokenId].redeemed, \\\"MetaPopitStaking: Rewards already redeemed\\\");\\n            require(ITokenStake(collection).ownerOf(tokenId) == tokenOwner, \\\"MetaPopitStaking: Not owner\\\");\\n            _tokenInfos[tokenId].pool = poolIndex;\\n            ITokenStake(collection).stakeToken(tokenId);\\n        }\\n\\n        emit Stake(tokenOwner, poolIndex, tokenIds);\\n    }\\n\\n    function _unstake(uint256 poolId, bool redeemRewards) internal {\\n        require(_poolInfos[poolId].owner != address(0), \\\"MetaPopitStaking: invalid pool\\\");\\n        PoolInfo memory pool = _poolInfos[poolId];\\n        delete _poolInfos[poolId];\\n\\n        if (_ownerInfos[pool.owner].staked - pool.tokens.length < maxHintTeamSize) {\\n            _applyPendingHints(pool.owner);\\n            _ownerInfos[pool.owner].startHintTime = block.timestamp;\\n        }\\n        _ownerInfos[pool.owner].staked -= pool.tokens.length;\\n\\n        for (uint256 i = 0; i < pool.tokens.length; i++) {\\n            _tokenInfos[pool.tokens[i]].pool = 0;\\n            _applyPendingLevel(pool.tokens[i], pool.depositTime, pool.levelSpeed);\\n            if (redeemRewards) _redeemToken(pool.tokens[i]);\\n            ITokenStake(collection).unstakeToken(pool.tokens[i]);\\n        }\\n\\n        stakedTokenCount -= pool.tokens.length;\\n        emit UnStake(pool.owner, poolId, pool.tokens);\\n    }\\n\\n    /**\\n     * @dev Stake a group of tokens in a pool\\n     */\\n    function stake(uint256[] calldata tokenIds) external {\\n        require(tokenIds.length <= maxLevelTeamSize, \\\"MetaPopitStaking: above max team size\\\");\\n        _stake(_msgSender(), tokenIds);\\n    }\\n\\n    /**\\n     * @dev Ustake tokens from `poolId``\\n     * @param redeemRewards : redeem rewards for token if set to `true`\\n     */\\n    function unstake(uint256 poolId, bool redeemRewards) external {\\n        require(_poolInfos[poolId].owner == _msgSender(), \\\"MetaPopitStaking: not owner of pool\\\");\\n        _unstake(poolId, redeemRewards);\\n    }\\n\\n    /**\\n     * @dev Batch stake a group of tokens in multiple pools\\n     */\\n    function batchStake(uint256[][] calldata batchTokenIds) external {\\n        for (uint256 i = 0; i < batchTokenIds.length; i++) {\\n            require(batchTokenIds[i].length <= maxLevelTeamSize, \\\"MetaPopitStaking: above max team size\\\");\\n            _stake(_msgSender(), batchTokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Batch unstake token from a list of pools\\n     * @param redeemRewards : redeem rewards for token if set to `true`\\n     */\\n    function batchUnstake(uint256[] calldata poolIds, bool redeemRewards) external {\\n        for (uint256 i = 0; i < poolIds.length; i++) {\\n            require(_poolInfos[poolIds[i]].owner == _msgSender(), \\\"MetaPopitStaking: not owner of pool\\\");\\n            _unstake(poolIds[i], redeemRewards);\\n        }\\n    }\\n\\n    /**\\n     * @dev Stake `tokenIds` in a existing pool\\n     */\\n    function addToPool(uint256 poolId, uint256[] calldata tokenIds)\\n        external\\n        whenStakingOpened\\n        whenTokensNotStaked(tokenIds)\\n    {\\n        require(_poolInfos[poolId].owner == _msgSender(), \\\"MetaPopitStaking: not owner of pool\\\");\\n        require(\\n            _poolInfos[poolId].tokens.length + tokenIds.length <= maxLevelTeamSize,\\n            \\\"MetaPopitStaking: above max team size\\\"\\n        );\\n\\n        // apply pending rewards\\n        if (_ownerInfos[_msgSender()].staked < maxHintTeamSize) {\\n            _applyPendingHints(_msgSender());\\n            _ownerInfos[_msgSender()].startHintTime = block.timestamp;\\n        }\\n        _ownerInfos[_msgSender()].staked += tokenIds.length;\\n\\n        uint256 oldLength = _poolInfos[poolId].tokens.length;\\n        uint256[] memory newTokenIds = new uint256[](oldLength + tokenIds.length);\\n        for (uint256 i = 0; i < _poolInfos[poolId].tokens.length; i++) {\\n            _applyPendingLevel(\\n                _poolInfos[poolId].tokens[i],\\n                _poolInfos[poolId].depositTime,\\n                _poolInfos[poolId].levelSpeed\\n            );\\n            newTokenIds[i] = _poolInfos[poolId].tokens[i];\\n        }\\n\\n        // stake new tokens\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(!_tokenInfos[tokenIds[i]].redeemed, \\\"MetaPopitStaking: Rewards already redeemed\\\");\\n            require(ITokenStake(collection).ownerOf(tokenIds[i]) == _msgSender(), \\\"MetaPopitStaking: Not owner\\\");\\n            ITokenStake(collection).stakeToken(tokenIds[i]);\\n            newTokenIds[oldLength + i] = tokenIds[i];\\n            _tokenInfos[tokenIds[i]].pool = poolId;\\n        }\\n\\n        // update pool infos\\n        _poolInfos[poolId].depositTime = block.timestamp;\\n        _poolInfos[poolId].levelSpeed = getLevelSpeed(newTokenIds.length);\\n        _poolInfos[poolId].tokens = newTokenIds;\\n\\n        stakedTokenCount += tokenIds.length;\\n        emit Stake(_msgSender(), poolId, tokenIds);\\n    }\\n\\n    /**\\n     * @dev Redeem the final rewards for a token.\\n     * Once redeemed a token cannot be staked in this contract anymore\\n     */\\n    function redeemToken(uint256 tokenId) external {\\n        require(!_tokenInfos[tokenId].redeemed, \\\"MetaPopitStaking: Token already redeemed\\\");\\n        require(ITokenStake(collection).ownerOf(tokenId) == _msgSender(), \\\"MetaPopitStaking: not owner\\\");\\n        _redeemToken(tokenId);\\n    }\\n\\n    /**\\n     * @dev Redeem the final rewards for an account.\\n     * Once redeemed hints are not incremented any more\\n     */\\n    function redeemAccount() external {\\n        require(!_ownerInfos[_msgSender()].redeemed, \\\"MetaPopitStaking: Account already redeemed\\\");\\n        _redeemAccount(_msgSender());\\n    }\\n\\n    /**\\n     * @dev returns the level speed for a `teamSize`\\n     */\\n    function getLevelSpeed(uint256 teamSize) public view returns (uint256) {\\n        if (teamSize > maxLevelTeamSize) {\\n            return _levelSpeed[maxLevelTeamSize];\\n        }\\n        return _levelSpeed[teamSize];\\n    }\\n\\n    /**\\n     * @dev returns the hint speed for a `teamSize`\\n     */\\n    function getHintSpeed(uint256 teamSize) public view returns (uint256) {\\n        if (teamSize > maxHintTeamSize) {\\n            return _hintSpeed[maxHintTeamSize];\\n        }\\n        return _hintSpeed[teamSize];\\n    }\\n\\n    /**\\n     * @dev Update the base speed of level and hint rewards\\n     * only callable by owner\\n     */\\n    function setSpeeds(uint256[] calldata levelSpeed, uint256[] calldata hintSpeed) external onlyOwner {\\n        maxLevelTeamSize = levelSpeed.length;\\n        maxHintTeamSize = hintSpeed.length;\\n\\n        for (uint256 i = 0; i < levelSpeed.length; i++) {\\n            _levelSpeed[i + 1] = levelSpeed[i];\\n        }\\n\\n        for (uint256 i = 0; i < hintSpeed.length; i++) {\\n            _hintSpeed[i + 1] = hintSpeed[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Close the staking\\n     * only callable by owner\\n     */\\n    function closeStaking() external onlyOwner {\\n        require(!isStakingClosed, \\\"MetaPopitStaking: staking already closed\\\");\\n        isStakingClosed = true;\\n        emit StakingClosed();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Recoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../interfaces/IRecoverable.sol\\\";\\n\\nabstract contract Recoverable is Ownable, IRecoverable {\\n    using SafeERC20 for IERC20;\\n\\n    event NonFungibleTokenRecovery(address indexed token, uint256 tokenId);\\n    event TokenRecovery(address indexed token, uint256 amount);\\n    event EthRecovery(uint256 amount);\\n\\n    /**\\n     * @notice Allows the owner to recover non-fungible tokens sent to the contract by mistake\\n     * @param _token: NFT token address\\n     * @param _tokenId: tokenId\\n     * @dev Callable by owner\\n     */\\n    function recoverNonFungibleToken(address _token, uint256 _tokenId) external virtual onlyOwner {\\n        IERC721(_token).transferFrom(address(this), address(msg.sender), _tokenId);\\n        emit NonFungibleTokenRecovery(_token, _tokenId);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to recover tokens sent to the contract by mistake\\n     * @param _token: token address\\n     * @dev Callable by owner\\n     */\\n    function recoverToken(address _token) external virtual onlyOwner {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(balance != 0, \\\"Operations: Cannot recover zero balance\\\");\\n\\n        IERC20(_token).safeTransfer(address(msg.sender), balance);\\n        emit TokenRecovery(_token, balance);\\n    }\\n\\n    function recoverEth(address payable _to) external virtual onlyOwner {\\n        uint256 balance = address(this).balance;\\n        _to.transfer(balance);\\n        emit EthRecovery(balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ITokenStake is IERC721 {\\n    function isTokenStaked(uint256 tokenId) external returns (bool);\\n\\n    function stakeToken(uint256 tokenId) external;\\n\\n    function unstakeToken(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRecoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRecoverable {\\n    /**\\n     * @notice Allows the owner to recover non-fungible tokens sent to the NFT contract by mistake and this contract\\n     * @param _token: NFT token address\\n     * @param _tokenId: tokenId\\n     * @dev Callable by owner\\n     */\\n    function recoverNonFungibleToken(address _token, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Allows the owner to recover tokens sent to the NFT contract and this contract by mistake\\n     * @param _token: token address\\n     * @dev Callable by owner\\n     */\\n    function recoverToken(address _token) external;\\n\\n    /**\\n     * @notice Allows the owner to recover ETH sent to the NFT contract ans and contract by mistake\\n     * @param _to: target address\\n     * @dev Callable by owner\\n     */\\n    function recoverEth(address payable _to) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NonFungibleTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hints\",\"type\":\"uint256\"}],\"name\":\"RedeemAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"RedeemToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StakingClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SPEED_RESOLUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"addToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"batchTokenIds\",\"type\":\"uint256[][]\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"redeemRewards\",\"type\":\"bool\"}],\"name\":\"batchUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamSize\",\"type\":\"uint256\"}],\"name\":\"getHintSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingHints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHintDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hintSpeed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextLevelDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamSize\",\"type\":\"uint256\"}],\"name\":\"getLevelSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct MetaPopitStaking.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelSpeed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemed\",\"type\":\"bool\"}],\"internalType\":\"struct MetaPopitStaking.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHintTeamSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevelTeamSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"recoverNonFungibleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"levelSpeed\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"hintSpeed\",\"type\":\"uint256[]\"}],\"name\":\"setSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemRewards\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetaPopitStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "000000000000000000000000d9a0139d78fcb906b5a39a9e289a7ae846f29798", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}