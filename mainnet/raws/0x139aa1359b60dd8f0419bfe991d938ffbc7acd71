{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal pure returns (bytes memory) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0),\"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub( uint256 a, uint256 b, string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div( uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod( uint256 a, uint256 b, string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n}\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IUniFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address);\r\n}\r\n\r\ninterface IMigrator {\r\n    function migrate(address lpToken, uint256 amount, uint256 unlockDate, address owner) external returns (bool);\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n// This contract locks uniswap v2 liquidity tokens that cannot be withdrawn until time expires\r\ncontract LiquidityPairLocker is Ownable {\r\n  using SafeMath for uint256;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  struct UserInfo {\r\n    EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\r\n    mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\r\n  }\r\n\r\n  struct TokenLock {\r\n    uint256 lockDate; // the date the token was locked\r\n    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\r\n    uint256 initialAmount; // the initial lock amount\r\n    uint256 unlockDate; // the date the token can be withdrawn\r\n    uint256 lockID; // lockID nonce per uni pair\r\n    address owner;\r\n  }\r\n\r\n  struct Fees {\r\n    uint256 ethFee; // Small eth fee to prevent spam on the platform\r\n    uint256 liquidityFee; // fee on univ2 liquidity tokens\r\n  }\r\n\r\n  mapping(address => UserInfo) private users; //map address to user info\r\n  mapping(address => TokenLock[]) public tokenLocks; //map univ2 pair to all its locks  \r\n  mapping(address => bool) public isWhiteListedAddress; // map address to fee exemption\r\n  mapping(address => bool) public feeExemptToken; // map if holding a token provides fee exemption\r\n  mapping(address => uint256) public tokenBalanceThreshold; // map token to required balance for fee exemption\r\n    \r\n  EnumerableSet.AddressSet private lockedTokens;\r\n\r\n  IUniFactory public uniswapFactory;\r\n  Fees public fees;\r\n  IMigrator migrator;\r\n\r\n  address payable public devaddr;\r\n\r\n    //parameters for reentracy guard modifier\r\n    uint256 private constant functionCalled = 1;\r\n    uint256 private constant functionComplete = 2;\r\n    uint256 private status;\r\n\r\n    //ensure resilience against re-entry attacks for function calls\r\n    modifier ReEntrancyGuard {\r\n        require(status != functionCalled);\r\n        status = functionCalled;\r\n        _;\r\n        status = functionComplete;\r\n    }\r\n\r\n  event onDeposit(address lpToken, address user, uint256 amount, uint256 lockDate, uint256 unlockDate);\r\n  event onWithdraw(address lpToken, uint256 amount);\r\n\r\n  constructor(IUniFactory _uniswapFactory) {\r\n    devaddr = msg.sender;\r\n    fees.ethFee = 1e17;\r\n    fees.liquidityFee = 10; // 1%\r\n    uniswapFactory = _uniswapFactory;\r\n  }\r\n  \r\n  function setDev(address payable _devaddr) public onlyOwner {\r\n    devaddr = _devaddr;\r\n  }\r\n  \r\n  //set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\r\n  function setMigrator(IMigrator _migrator) public onlyOwner {\r\n    migrator = _migrator;\r\n  }\r\n    \r\n  function setFees(uint256 _ethFee, uint256 _liquidityFee) public onlyOwner {\r\n    fees.ethFee = _ethFee;\r\n    fees.liquidityFee = _liquidityFee;\r\n  }\r\n  \r\n  //whitelisted accounts dont pay flatrate fees on locking\r\n  function whitelistFeeAccount(address _user, bool _exemptFromFee) public onlyOwner {\r\n    isWhiteListedAddress[_user] = _exemptFromFee;\r\n  }\r\n\r\n  //Creates a new LP lock\r\n  function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, bool _fee_in_eth, address payable _withdrawer, address _exemptToken) external payable ReEntrancyGuard {\r\n    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\r\n    require(_amount > 0, 'INSUFFICIENT');\r\n\r\n    // ensure this pair is a univ2 pair by querying the factory\r\n    IUniswapV2Pair lpair = IUniswapV2Pair(address(_lpToken));\r\n    address factoryPairAddress = uniswapFactory.getPair(lpair.token0(), lpair.token1());\r\n    require(factoryPairAddress == address(_lpToken), 'NOT UNIV2');\r\n\r\n    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\r\n    \r\n    // flatrate fees\r\n    if (!feeExemptToken[_exemptToken] || (feeExemptToken[_exemptToken] && !(ERC20(_exemptToken).balanceOf(msg.sender) >= tokenBalanceThreshold[_exemptToken]))) {\r\n      if(!isWhiteListedAddress[msg.sender]){\r\n        if(_fee_in_eth){\r\n                uint256 ethFee = fees.ethFee;            \r\n                require(msg.value == ethFee, 'FEE NOT MET');\r\n                devaddr.transfer(ethFee);\r\n        } else if (msg.value > 0) {\r\n            // refund eth if a whitelisted member sent it by mistake\r\n            msg.sender.transfer(msg.value);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // percent fee\r\n    uint256 liquidityFee;\r\n    if (!_fee_in_eth && !isWhiteListedAddress[msg.sender]) { // fee discount for large lockers using secondary token\r\n        liquidityFee = _amount.mul(fees.liquidityFee).div(1000);\r\n    }\r\n    if(liquidityFee > 0) {TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);}\r\n    uint256 amountLocked = _amount.sub(liquidityFee);\r\n\r\n    TokenLock memory token_lock;\r\n    token_lock.lockDate = block.timestamp;\r\n    token_lock.amount = amountLocked;\r\n    token_lock.initialAmount = amountLocked;\r\n    token_lock.unlockDate = _unlock_date;\r\n    token_lock.lockID = tokenLocks[_lpToken].length;\r\n    token_lock.owner = _withdrawer;\r\n\r\n    // record the lock for the univ2pair\r\n    tokenLocks[_lpToken].push(token_lock);\r\n    lockedTokens.add(_lpToken);\r\n\r\n    // record the lock for the user\r\n    UserInfo storage user = users[_withdrawer];\r\n    user.lockedTokens.add(_lpToken);\r\n    uint256[] storage user_locks = user.locksForToken[_lpToken];\r\n    user_locks.push(token_lock.lockID);\r\n    \r\n    emit onDeposit(_lpToken, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\r\n  }\r\n  \r\n  //extend a lock with a new unlock date, _index and _lockID ensure the correct lock is altered\r\n  function extendlock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _unlock_date) external ReEntrancyGuard {\r\n    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\r\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\r\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n    require(userLock.unlockDate < _unlock_date, 'UNLOCK BEFORE');\r\n    \r\n    uint256 liquidityFee = userLock.amount.mul(fees.liquidityFee).div(1000);\r\n    uint256 amountLocked = userLock.amount.sub(liquidityFee);\r\n    \r\n    userLock.amount = amountLocked;\r\n    userLock.unlockDate = _unlock_date;\r\n\r\n    // send univ2 fee to dev address\r\n    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\r\n  }\r\n  \r\n  //withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is altered\r\n  function withdraw (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external ReEntrancyGuard {\r\n    require(_amount > 0, 'ZERO WITHDRAWL');\r\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\r\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n    require(userLock.unlockDate < block.timestamp, 'NOT YET');\r\n    userLock.amount = userLock.amount.sub(_amount);\r\n    \r\n    // clean user storage\r\n    if (userLock.amount == 0) {\r\n      uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\r\n      userLocks[_index] = userLocks[userLocks.length-1];\r\n      userLocks.pop();\r\n      if (userLocks.length == 0) {\r\n        users[msg.sender].lockedTokens.remove(_lpToken);\r\n      }\r\n    }\r\n    \r\n    TransferHelper.safeTransfer(_lpToken, msg.sender, _amount);\r\n    emit onWithdraw(_lpToken, _amount);\r\n  }\r\n  \r\n  //increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\r\n  function incrementLock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external ReEntrancyGuard {\r\n    require(_amount > 0, 'ZERO AMOUNT');\r\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\r\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n    \r\n    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\r\n    \r\n    // send univ2 fee to dev address\r\n    uint256 liquidityFee = _amount.mul(fees.liquidityFee).div(1000);\r\n    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\r\n    uint256 amountLocked = _amount.sub(liquidityFee);\r\n    \r\n    userLock.amount = userLock.amount.add(amountLocked);\r\n    \r\n    emit onDeposit(_lpToken, msg.sender, amountLocked, userLock.lockDate, userLock.unlockDate);\r\n  }\r\n  \r\n  \r\n  //transfer a lock to a new owner\r\n  function transferLockOwnership (address _lpToken, uint256 _index, uint256 _lockID, address payable _newOwner) external {\r\n    require(msg.sender != _newOwner, 'OWNER');\r\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n    TokenLock storage transferredLock = tokenLocks[_lpToken][lockID];\r\n    require(lockID == _lockID && transferredLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n    \r\n    // record the lock for the new Owner\r\n    UserInfo storage user = users[_newOwner];\r\n    user.lockedTokens.add(_lpToken);\r\n    uint256[] storage user_locks = user.locksForToken[_lpToken];\r\n    user_locks.push(transferredLock.lockID);\r\n    \r\n    // remove the lock from the old owner\r\n    uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\r\n    userLocks[_index] = userLocks[userLocks.length-1];\r\n    userLocks.pop();\r\n    if (userLocks.length == 0) {\r\n      users[msg.sender].lockedTokens.remove(_lpToken);\r\n    }\r\n    transferredLock.owner = _newOwner;\r\n  }\r\n  \r\n  //migrates liquidity to uniswap v3\r\n  function migrate (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external ReEntrancyGuard {\r\n    require(address(migrator) != address(0), \"NOT SET\");\r\n    require(_amount > 0, 'ZERO MIGRATION');\r\n    \r\n    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\r\n    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n    userLock.amount = userLock.amount.sub(_amount);\r\n    \r\n    // clean user storage\r\n    if (userLock.amount == 0) {\r\n      uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\r\n      userLocks[_index] = userLocks[userLocks.length-1];\r\n      userLocks.pop();\r\n      if (userLocks.length == 0) {\r\n        users[msg.sender].lockedTokens.remove(_lpToken);\r\n      }\r\n    }\r\n    \r\n    TransferHelper.safeApprove(_lpToken, address(migrator), _amount);\r\n    migrator.migrate(_lpToken, _amount, userLock.unlockDate, msg.sender);\r\n  }\r\n  \r\n  function getNumLocksForToken (address _lpToken) external view returns (uint256) {\r\n    return tokenLocks[_lpToken].length;\r\n  }\r\n  \r\n  function getNumLockedTokens () external view returns (uint256) {\r\n    return lockedTokens.length();\r\n  }\r\n  \r\n  function getLockedTokenAtIndex (uint256 _index) external view returns (address) {\r\n    return lockedTokens.at(_index);\r\n  }\r\n  \r\n  // user functions\r\n  function getUserNumLockedTokens (address _user) external view returns (uint256) {\r\n    UserInfo storage user = users[_user];\r\n    return user.lockedTokens.length();\r\n  }\r\n  \r\n  function getUserLockedTokenAtIndex (address _user, uint256 _index) external view returns (address) {\r\n    UserInfo storage user = users[_user];\r\n    return user.lockedTokens.at(_index);\r\n  }\r\n  \r\n  function getUserNumLocksForToken (address _user, address _lpToken) external view returns (uint256) {\r\n    UserInfo storage user = users[_user];\r\n    return user.locksForToken[_lpToken].length;\r\n  }\r\n  \r\n  function getUserLockForTokenAtIndex (address _user, address _lpToken, uint256 _index) external view \r\n  returns (uint256, uint256, uint256, uint256, uint256, address) {\r\n    uint256 lockID = users[_user].locksForToken[_lpToken][_index];\r\n    TokenLock storage tokenLock = tokenLocks[_lpToken][lockID];\r\n    return (tokenLock.lockDate, tokenLock.amount, tokenLock.initialAmount, tokenLock.unlockDate, tokenLock.lockID, tokenLock.owner);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IUniFactory\",\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_date\",\"type\":\"uint256\"}],\"name\":\"extendlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeExemptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getNumLocksForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockForTokenAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockedTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserNumLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getUserNumLocksForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"incrementLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_date\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fee_in_eth\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_withdrawer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exemptToken\",\"type\":\"address\"}],\"name\":\"lockLPToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exemptFromFee\",\"type\":\"bool\"}],\"name\":\"whitelistFeeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LiquidityPairLocker", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35c695f5bede82a961a7359986ebe89ec6ad96488995c0466f2af6722708150c"}]}