{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: bridge.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\ninterface IERC20Decimals is IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @title OKLGAtomicSwapInstance\r\n * @dev This is the main contract that supports holding metadata for OKLG atomic inter and intrachain swapping\r\n */\r\ncontract FlokiBridge is Ownable {\r\n    IERC20Decimals private _token;\r\n\r\n    address public tokenOwner;\r\n    address payable public oracleAddress;\r\n    uint256 public maxSwapAmount;\r\n    uint8 public targetTokenDecimals;\r\n    uint256 public minimumGasForOperation = 5 * 10**15; // 2 finney (0.002 ETH)\r\n    bool public isActive = true;\r\n\r\n    struct Swap {\r\n        bytes32 id;\r\n        uint256 origTimestamp;\r\n        uint256 currentTimestamp;\r\n        bool isOutbound;\r\n        bool isComplete;\r\n        bool isRefunded;\r\n        bool isSendGasFunded;\r\n        address swapAddress;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(bytes32 => Swap) public swaps;\r\n    mapping(address => Swap) public lastUserSwap;\r\n\r\n    event ReceiveTokensFromSource(\r\n        bytes32 indexed id,\r\n        uint256 origTimestamp,\r\n        address sender,\r\n        uint256 amount\r\n    );\r\n\r\n    event SendTokensToDestination(\r\n        bytes32 indexed id,\r\n        address receiver,\r\n        uint256 amount\r\n    );\r\n\r\n    event RefundTokensToSource(\r\n        bytes32 indexed id,\r\n        address sender,\r\n        uint256 amount\r\n    );\r\n\r\n    event swapFunded(\r\n        bytes32 indexed id,\r\n        address sender,\r\n        uint256 amount\r\n    );\r\n\r\n    event TokenOwnerUpdated(address previousOwner, address newOwner);\r\n\r\n    constructor(\r\n        address _oracleAddress,\r\n        address _tokenOwner,\r\n        address _tokenAddy,\r\n        uint8 _targetTokenDecimals,\r\n        uint256 _maxSwapAmount\r\n    ) {\r\n        oracleAddress = payable(_oracleAddress);\r\n        tokenOwner = _tokenOwner;\r\n        _token = IERC20Decimals(_tokenAddy);\r\n        targetTokenDecimals = _targetTokenDecimals;\r\n        maxSwapAmount = _maxSwapAmount;\r\n    }\r\n\r\n    function getSwapTokenAddress() external view returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    function setActiveState(bool _isActive) external {\r\n        require(\r\n            msg.sender == owner() || msg.sender == tokenOwner,\r\n            \"setActiveState user must be contract creator\"\r\n        );\r\n        isActive = _isActive;\r\n    }\r\n\r\n    function setOracleAddress(address _oracleAddress) external onlyOwner {\r\n        oracleAddress = payable(_oracleAddress);\r\n        transferOwnership(oracleAddress);\r\n    }\r\n\r\n    function setTargetTokenDecimals(uint8 _decimals) external onlyOwner {\r\n        targetTokenDecimals = _decimals;\r\n    }\r\n\r\n    function setTokenOwner(address newOwner) external {\r\n        require(\r\n            msg.sender == tokenOwner,\r\n            \"user must be current token owner to change it\"\r\n        );\r\n        address previousOwner = tokenOwner;\r\n        tokenOwner = newOwner;\r\n        emit TokenOwnerUpdated(previousOwner, newOwner);\r\n    }\r\n\r\n    function withdrawTokens(uint256 _amount) external {\r\n        require(\r\n            msg.sender == tokenOwner,\r\n            \"withdrawTokens user must be token owner\"\r\n        );\r\n        _token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function setSwapCompletionStatus(bytes32 _id, bool _isComplete)\r\n        external\r\n        onlyOwner\r\n    {\r\n        swaps[_id].isComplete = _isComplete;\r\n    }\r\n\r\n    function setMinimumGasForOperation(uint256 _amountGas) external onlyOwner {\r\n        minimumGasForOperation = _amountGas;\r\n    }\r\n\r\n    function receiveTokensFromSource(uint256 _amount)\r\n        external\r\n        payable\r\n        returns (bytes32, uint256)\r\n    {\r\n        require(isActive, \"this atomic swap instance is not active\");\r\n        require(\r\n            msg.value >= minimumGasForOperation,\r\n            \"you must also send enough gas to cover the target transaction\"\r\n        );\r\n        require(\r\n            maxSwapAmount == 0 || _amount <= maxSwapAmount,\r\n            \"trying to send more than maxSwapAmount\"\r\n        );\r\n\r\n        // _payForService(minimumGasForOperation);\r\n\r\n        if (minimumGasForOperation > 0) {\r\n            oracleAddress.call{value: minimumGasForOperation}(\"\");\r\n        }\r\n        _token.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        uint256 _ts = block.timestamp;\r\n        bytes32 _id = sha256(abi.encodePacked(msg.sender, _ts, _amount));\r\n        swaps[_id] = Swap({\r\n            id: _id,\r\n            origTimestamp: _ts,\r\n            currentTimestamp: _ts,\r\n            isOutbound: false,\r\n            isComplete: false,\r\n            isRefunded: false,\r\n            isSendGasFunded: false,\r\n            swapAddress: msg.sender,\r\n            amount: _amount\r\n        });\r\n        lastUserSwap[msg.sender] = swaps[_id];\r\n        emit ReceiveTokensFromSource(_id, _ts, msg.sender, _amount);\r\n        return (_id, _ts);\r\n    }\r\n\r\n    function unsetLastUserSwap(address _addy) external onlyOwner {\r\n        delete lastUserSwap[_addy];\r\n    }\r\n\r\n    // msg.sender must be the user who originally created the swap.\r\n    // Otherwise, the unique identifier will not match from the originally\r\n    // sending txn.\r\n    //\r\n    // NOTE: We're aware this function can be spoofed by creating a sha256 hash of msg.sender's address\r\n    // and _origTimestamp, but it's important to note refundTokensFromSource and sendTokensToDestination\r\n    // can only be executed by the owner/oracle. Therefore validation should be done by the oracle before\r\n    // executing those and the only possibility of a vulnerability is if someone has compromised the oracle account.\r\n    function fundSendToDestinationGas(\r\n        bytes32 _id,\r\n        uint256 _origTimestamp,\r\n        uint256 _amount\r\n    ) external payable {\r\n        require(\r\n            msg.value >= minimumGasForOperation,\r\n            \"you must send enough gas to cover the send transaction\"\r\n        );\r\n        require(\r\n            _id ==\r\n                sha256(abi.encodePacked(msg.sender, _origTimestamp, _amount)),\r\n            \"we don't recognize this swap\"\r\n        );\r\n        if (minimumGasForOperation > 0) {\r\n            oracleAddress.call{value: minimumGasForOperation}(\"\");\r\n        }\r\n        // swaps[_id] = Swap({\r\n        //     id: _id,\r\n        //     origTimestamp: _origTimestamp,\r\n        //     currentTimestamp: block.timestamp,\r\n        //     isOutbound: true,\r\n        //     isComplete: false,\r\n        //     isRefunded: false,\r\n        //     isSendGasFunded: true,\r\n        //     swapAddress: msg.sender,\r\n        //     amount: _amount\r\n        // });\r\n        swaps[_id].id = _id;\r\n        swaps[_id].origTimestamp = _origTimestamp;\r\n        swaps[_id].isOutbound = true;\r\n        swaps[_id].isSendGasFunded = true;\r\n        swaps[_id].swapAddress = msg.sender;\r\n        swaps[_id].amount = _amount;\r\n\r\n        emit swapFunded(_id, msg.sender, _amount);\r\n    }\r\n\r\n    // This must be called AFTER fundSendToDestinationGas has been executed\r\n    // for this txn to fund this send operation\r\n    function refundTokensFromSource(bytes32 _id) external {\r\n        require(isActive, \"this atomic swap instance is not active\");\r\n\r\n        Swap storage swap = swaps[_id];\r\n\r\n        _confirmSwapExistsGasFundedAndSenderValid(swap);\r\n        swap.isRefunded = true;\r\n        _token.transfer(swap.swapAddress, swap.amount);\r\n        emit RefundTokensToSource(_id, swap.swapAddress, swap.amount);\r\n    }\r\n\r\n    // This must be called AFTER fundSendToDestinationGas has been executed\r\n    // for this txn to fund this send operation\r\n    function sendTokensToDestination(bytes32 _id) external returns (bytes32) {\r\n        require(isActive, \"this atomic swap instance is not active\");\r\n\r\n        Swap storage swap = swaps[_id];\r\n\r\n        _confirmSwapExistsGasFundedAndSenderValid(swap);\r\n\r\n        // handle if this token and target chain token in bridge have different decimals\r\n        // current decimals = 9 -- 100 tokens == 100000000000\r\n        // target decimals = 18 -- 100 tokens == 100000000000000000000\r\n        // to get current amount to transfer, need to multiply by ratio of 10^currentDecimals / 10^targetDecimals\r\n        uint256 _swapAmount = swap.amount;\r\n        if (targetTokenDecimals > 0) {\r\n            _swapAmount =\r\n                (_swapAmount * 10**_token.decimals()) /\r\n                10**targetTokenDecimals;\r\n        }\r\n        _token.transfer(swap.swapAddress, _swapAmount);\r\n\r\n        swap.currentTimestamp = block.timestamp;\r\n        swap.isComplete = true;\r\n        emit SendTokensToDestination(_id, swap.swapAddress, _swapAmount);\r\n        return _id;\r\n    }\r\n\r\n    function _confirmSwapExistsGasFundedAndSenderValid(Swap memory swap)\r\n        private\r\n        view\r\n        onlyOwner\r\n    {\r\n        // functions that call this should only be called by the current owner\r\n        // or oracle address as they will do the appropriate validation beforehand\r\n        // to confirm the receiving swap is valid before sending tokens to the user.\r\n        require(\r\n            swap.origTimestamp > 0 && swap.amount > 0,\r\n            \"swap does not exist yet.\"\r\n        );\r\n        // We're just validating here that the swap has not been\r\n        // completed and gas has been funded before moving forward.\r\n        require(\r\n            !swap.isComplete && !swap.isRefunded && swap.isSendGasFunded,\r\n            \"swap has already been completed, refunded, or gas has not been funded\"\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_targetTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_maxSwapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"origTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveTokensFromSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundTokensToSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendTokensToDestination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TokenOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapFunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_origTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundSendToDestinationGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUserSwap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"origTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOutbound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSendGasFunded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumGasForOperation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"receiveTokensFromSource\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"refundTokensFromSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"sendTokensToDestination\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setActiveState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountGas\",\"type\":\"uint256\"}],\"name\":\"setMinimumGasForOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isComplete\",\"type\":\"bool\"}],\"name\":\"setSwapCompletionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setTargetTokenDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"origTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOutbound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSendGasFunded\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"swapAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"unsetLastUserSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlokiBridge", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000eed4a33b6178325cddd87058642f3b2d3e9848e5000000000000000000000000eed4a33b6178325cddd87058642f3b2d3e9848e50000000000000000000000009f216b10dec75a64877eb825f0999756fd761a5d00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000001c6bf52634000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4c220c2464f19cf95452c62f83bc7a2235d51c6634e1171d4d6a10d1ffc1fd41"}]}