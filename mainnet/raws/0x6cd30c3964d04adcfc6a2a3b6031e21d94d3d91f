{"status": "1", "message": "OK", "result": [{"SourceCode": "// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n// import 'ds-auth/auth.sol';\r\npragma solidity ^0.4.23;\r\n\r\ncontract DSAuthority {\r\n    function canCall(\r\n        address src, address dst, bytes4 sig\r\n    ) public view returns (bool);\r\n}\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority (address indexed authority);\r\n    event LogSetOwner     (address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority  public  authority;\r\n    address      public  owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_)\r\n        public\r\n        auth\r\n    {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_)\r\n        public\r\n        auth\r\n    {\r\n        authority = authority_;\r\n        emit LogSetAuthority(authority);\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig));\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(0)) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, this, sig);\r\n        }\r\n    }\r\n}\r\n\r\n/// math.sol -- mixin for inline numerical wizardry\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.4.13;\r\n\r\ncontract DSMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function max(uint x, uint y) internal pure returns (uint z) {\r\n        return x >= y ? x : y;\r\n    }\r\n    function imin(int x, int y) internal pure returns (int z) {\r\n        return x <= y ? x : y;\r\n    }\r\n    function imax(int x, int y) internal pure returns (int z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint x, uint n) internal pure returns (uint z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// import './IkuraStorage.sol';\r\n\r\n/**\r\n *\r\n * \u30ed\u30b8\u30c3\u30af\u306e\u66f4\u65b0\u306b\u5f71\u97ff\u3055\u308c\u306a\u3044\u6c38\u7d9a\u5316\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u30af\u30e9\u30b9\r\n *\r\n */\r\ncontract IkuraStorage is DSMath, DSAuth {\r\n  // \u30aa\u30fc\u30ca\u30fc\uff08\u4e2d\u592e\u9280\u884c\uff09\u306e\u30a2\u30c9\u30ec\u30b9\r\n  address[] ownerAddresses;\r\n\r\n  // \u5404\u30a2\u30c9\u30ec\u30b9\u306edJPY\u306e\u53e3\u5ea7\u6b8b\u9ad8\r\n  mapping(address => uint) coinBalances;\r\n\r\n  // \u5404\u30a2\u30c9\u30ec\u30b9\u306eSHINJI token\u306e\u53e3\u5ea7\u6b8b\u9ad8\r\n  mapping(address => uint) tokenBalances;\r\n\r\n  // \u5404\u30a2\u30c9\u30ec\u30b9\u304c\u6307\u5b9a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u3057\u3066\u8a31\u53ef\u3059\u308b\u6700\u5927\u9001\u91d1\u984d\r\n  mapping(address => mapping (address => uint)) coinAllowances;\r\n\r\n  // dJPY\u306e\u767a\u884c\u9ad8\r\n  uint _totalSupply = 0;\r\n\r\n  // \u624b\u6570\u6599\u7387\r\n  // 0.01pips = 1\r\n  // \u4f8b). \u624b\u6570\u6599\u3092 0.05% \u3068\u3059\u308b\u5834\u5408\u306f 500\r\n  uint _transferFeeRate = 500;\r\n\r\n  // \u6700\u4f4e\u624b\u6570\u6599\u984d\r\n  // 1 = 1dJPY\r\n  // amount * \u624b\u6570\u6599\u7387\u3067\u7b97\u51fa\u3057\u305f\u91d1\u984d\u304c\u3053\u3053\u3067\u8a2d\u5b9a\u3057\u305f\u6700\u4f4e\u624b\u6570\u6599\u3092\u4e0b\u56de\u308b\u5834\u5408\u306f\u3001\u6700\u4f4e\u624b\u6570\u6599\u984d\u3092\u624b\u6570\u6599\u3068\u3059\u308b\r\n  uint8 _transferMinimumFee = 5;\r\n\r\n  address tokenAddress;\r\n  address multiSigAddress;\r\n  address authorityAddress;\r\n\r\n  // @NOTE \u30ea\u30ea\u30fc\u30b9\u6642\u306bcontract\u306edeploy -> watch contract -> setOwner\u306e\u6d41\u308c\u3092\r\n  //\u7701\u7565\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u3053\u3067\u76f4\u63a5controller\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3067\u304d\u307e\u3059\r\n  // \u52ff\u8ad6\u30c6\u30b9\u30c8\u306f\u901a\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u304c\u901a\u3063\u305f\u3089\u8a66\u3057\u3066\u306d\r\n  constructor() public DSAuth() {\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  function changeToken(address tokenAddress_) public auth {\r\n    tokenAddress = tokenAddress_;\r\n  }\r\n\r\n  function changeAssociation(address multiSigAddress_) public auth {\r\n    multiSigAddress = multiSigAddress_;\r\n  }\r\n\r\n  function changeAuthority(address authorityAddress_) public auth {\r\n    authorityAddress = authorityAddress_;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _totalSupply\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u7dcf\u767a\u884c\u984d\u3092\u8fd4\u3059\r\n   *\r\n   * @return \u7dcf\u767a\u884c\u984d\r\n   */\r\n  function totalSupply() public view auth returns (uint) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * \u7dcf\u767a\u884c\u6570\u3092\u5897\u3084\u3059\uff08mint\u3068\u4e26\u884c\u3057\u3066\u547c\u3070\u308c\u308b\u3053\u3068\u3092\u60f3\u5b9a\uff09\r\n   *\r\n   * @param amount \u92f3\u9020\u6570\r\n   */\r\n  function addTotalSupply(uint amount) public auth {\r\n    _totalSupply = add(_totalSupply, amount);\r\n  }\r\n\r\n  /**\r\n   * \u7dcf\u767a\u884c\u6570\u3092\u6e1b\u3089\u3059\uff08burn\u3068\u4e26\u884c\u3057\u3066\u547c\u3070\u308c\u308b\u3053\u3068\u3092\u60f3\u5b9a\uff09\r\n   *\r\n   * @param amount \u92f3\u9020\u6570\r\n   */\r\n  function subTotalSupply(uint amount) public auth {\r\n    _totalSupply = sub(_totalSupply, amount);\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _transferFeeRate\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u624b\u6570\u6599\u7387\u3092\u8fd4\u3059\r\n   *\r\n   * @return \u73fe\u5728\u306e\u624b\u6570\u6599\u7387\r\n   */\r\n  function transferFeeRate() public view auth returns (uint) {\r\n    return _transferFeeRate;\r\n  }\r\n\r\n  /**\r\n   * \u624b\u6570\u6599\u7387\u3092\u5909\u66f4\u3059\u308b\r\n   *\r\n   * @param newTransferFeeRate \u65b0\u3057\u3044\u624b\u6570\u6599\u7387\r\n   *\r\n   * @return \u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\uff08\u4eca\u306e\u3068\u3053\u308d\u5931\u6557\u3059\u308b\u30b1\u30fc\u30b9\u306f\u306a\u3044\uff09\r\n   */\r\n  function setTransferFeeRate(uint newTransferFeeRate) public auth returns (bool) {\r\n    _transferFeeRate = newTransferFeeRate;\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for _transferMinimumFee\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u6700\u4f4e\u624b\u6570\u6599\u8fd4\u3059\r\n   *\r\n   * @return \u73fe\u5728\u306e\u6700\u4f4e\u624b\u6570\u6599\r\n   */\r\n  function transferMinimumFee() public view auth returns (uint8) {\r\n    return _transferMinimumFee;\r\n  }\r\n\r\n  /**\r\n   * \u6700\u4f4e\u624b\u6570\u6599\u3092\u5909\u66f4\u3059\u308b\r\n   *\r\n   * @param newTransferMinimumFee \u65b0\u3057\u3044\u6700\u4f4e\u624b\u6570\u6599\r\n   *\r\n   * @return \u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\uff08\u4eca\u306e\u3068\u3053\u308d\u5931\u6557\u3059\u308b\u30b1\u30fc\u30b9\u306f\u306a\u3044\uff09\r\n   */\r\n  function setTransferMinimumFee(uint8 newTransferMinimumFee) public auth {\r\n    _transferMinimumFee = newTransferMinimumFee;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for ownerAddresses\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u30a2\u30c9\u30ec\u30b9\u3092\u30aa\u30fc\u30ca\u30fc\u306e\u4e00\u89a7\u306b\u8ffd\u52a0\u3059\u308b\r\n   *\r\n   * \u30c8\u30fc\u30af\u30f3\u306e\u79fb\u52d5\u6642\u306b\u5185\u90e8\u7684\u306b\u30aa\u30fc\u30ca\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3002\r\n   * \u30c8\u30fc\u30af\u30f3\u306e\u6240\u6709\u8005 = \u30aa\u30fc\u30ca\u30fc\u3068\u3044\u3046\u6271\u3044\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u3053\u306e\u914d\u5217\u306b\u542b\u307e\u308c\u308b\u30a2\u30c9\u30ec\u30b9\u306e\u4e00\u89a7\u306f\r\n   * \u624b\u6570\u6599\u304b\u3089\u306e\u53ce\u76ca\u306e\u5206\u914d\u3092\u3059\u308b\u6642\u306b\u5229\u7528\u3059\u308b\u3060\u3051\u3067\u3001\u30aa\u30fc\u30ca\u30fc\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u306b\u306f\u5229\u7528\u3057\u306a\u3044\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function addOwnerAddress(address addr) internal returns (bool) {\r\n    ownerAddresses.push(addr);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u30a2\u30c9\u30ec\u30b9\u3092\u30aa\u30fc\u30ca\u30fc\u306e\u4e00\u89a7\u304b\u3089\u524a\u9664\u3059\u308b\r\n   *\r\n   * \u30c8\u30fc\u30af\u30f3\u306e\u79fb\u52d5\u6642\u306b\u5185\u90e8\u7684\u306b\u30aa\u30fc\u30ca\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3002\r\n   *\r\n   * @param addr \u30aa\u30fc\u30ca\u30fc\u306b\u5c5e\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function removeOwnerAddress(address addr) internal returns (bool) {\r\n    uint i = 0;\r\n\r\n    while (ownerAddresses[i] != addr) { i++; }\r\n\r\n    while (i < ownerAddresses.length - 1) {\r\n      ownerAddresses[i] = ownerAddresses[i + 1];\r\n      i++;\r\n    }\r\n\r\n    ownerAddresses.length--;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6700\u521d\u306e\u30aa\u30fc\u30ca\u30fc\uff08contract\u3092deploy\u3057\u305f\u30e6\u30fc\u30b6\u30fc\uff09\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8fd4\u3059\r\n   *\r\n   * @return \u6700\u521d\u306e\u30aa\u30fc\u30ca\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   */\r\n  function primaryOwner() public view auth returns (address) {\r\n    return ownerAddresses[0];\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u304c\u30aa\u30fc\u30ca\u30fc\u30a2\u30c9\u30ec\u30b9\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u8fd4\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return \u30aa\u30fc\u30ca\u30fc\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u306ftrue\u3001\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306ffalse\r\n   */\r\n  function isOwnerAddress(address addr) public view auth returns (bool) {\r\n    for (uint i = 0; i < ownerAddresses.length; i++) {\r\n      if (ownerAddresses[i] == addr) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \u30aa\u30fc\u30ca\u30fc\u6570\u3092\u8fd4\u3059\r\n   *\r\n   * @return \u30aa\u30fc\u30ca\u30fc\u6570\r\n   */\r\n  function numOwnerAddress() public view auth returns (uint) {\r\n    return ownerAddresses.length;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for coinBalances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306edJPY\u6b8b\u9ad8\u3092\u8fd4\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return dJPY\u6b8b\u9ad8\r\n   */\r\n  function coinBalance(address addr) public view auth returns (uint) {\r\n    return coinBalances[addr];\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306edJPY\u306e\u6b8b\u9ad8\u3092\u5897\u3084\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u5dee\u5206\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function addCoinBalance(address addr, uint amount) public auth returns (bool) {\r\n    coinBalances[addr] = add(coinBalances[addr], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306edJPY\u306e\u6b8b\u9ad8\u3092\u6e1b\u3089\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u5dee\u5206\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function subCoinBalance(address addr, uint amount) public auth returns (bool) {\r\n    coinBalances[addr] = sub(coinBalances[addr], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for tokenBalances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306eSHINJI\u30c8\u30fc\u30af\u30f3\u306e\u6b8b\u9ad8\u3092\u8fd4\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   *\r\n   * @return SHINJI\u30c8\u30fc\u30af\u30f3\u6b8b\u9ad8\r\n   */\r\n  function tokenBalance(address addr) public view auth returns (uint) {\r\n    return tokenBalances[addr];\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306eSHINJI\u30c8\u30fc\u30af\u30f3\u306e\u6b8b\u9ad8\u3092\u5897\u3084\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u5dee\u5206\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function addTokenBalance(address addr, uint amount) public auth returns (bool) {\r\n    tokenBalances[addr] = add(tokenBalances[addr], amount);\r\n\r\n    if (tokenBalances[addr] > 0 && !isOwnerAddress(addr)) {\r\n      addOwnerAddress(addr);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306eSHINJI\u30c8\u30fc\u30af\u30f3\u306e\u6b8b\u9ad8\u3092\u6e1b\u3089\u3059\r\n   *\r\n   * @param addr \u30e6\u30fc\u30b6\u30fc\u306e\u30a2\u30c9\u30ec\u30b9\r\n   * @param amount \u5dee\u5206\r\n   *\r\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function subTokenBalance(address addr, uint amount) public auth returns (bool) {\r\n    tokenBalances[addr] = sub(tokenBalances[addr], amount);\r\n\r\n    if (tokenBalances[addr] <= 0) {\r\n      removeOwnerAddress(addr);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // --------------------------------------------------\r\n  // functions for coinAllowances\r\n  // --------------------------------------------------\r\n\r\n  /**\r\n   * \u9001\u91d1\u8a31\u53ef\u91d1\u984d\u3092\u8fd4\u3059\r\n   *\r\n   * @param owner_ \u9001\u91d1\u8005\r\n   * @param spender \u9001\u91d1\u4ee3\u884c\u8005\r\n   *\r\n   * @return \u9001\u91d1\u8a31\u53ef\u91d1\u984d\r\n   */\r\n  function coinAllowance(address owner_, address spender) public view auth returns (uint) {\r\n    return coinAllowances[owner_][spender];\r\n  }\r\n\r\n  /**\r\n   * \u9001\u91d1\u8a31\u53ef\u91d1\u984d\u3092\u6307\u5b9a\u3057\u305f\u91d1\u984d\u3060\u3051\u5897\u3084\u3059\r\n   *\r\n   * @param owner_ \u9001\u91d1\u8005\r\n   * @param spender \u9001\u91d1\u4ee3\u884c\u8005\r\n   * @param amount \u91d1\u984d\r\n   *\r\n   * @return \u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function addCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = add(coinAllowances[owner_][spender], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u9001\u91d1\u8a31\u53ef\u91d1\u984d\u3092\u6307\u5b9a\u3057\u305f\u91d1\u984d\u3060\u3051\u6e1b\u3089\u3059\r\n   *\r\n   * @param owner_ \u9001\u91d1\u8005\r\n   * @param spender \u9001\u91d1\u4ee3\u884c\u8005\r\n   * @param amount \u91d1\u984d\r\n   *\r\n   * @return \u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function subCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = sub(coinAllowances[owner_][spender], amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u9001\u91d1\u8a31\u53ef\u91d1\u984d\u3092\u6307\u5b9a\u3057\u305f\u5024\u306b\u66f4\u65b0\u3059\u308b\r\n   *\r\n   * @param owner_ \u9001\u91d1\u8005\r\n   * @param spender \u9001\u91d1\u4ee3\u884c\u8005\r\n   * @param amount \u9001\u91d1\u8a31\u53ef\u91d1\u984d\r\n   *\r\n   * @return \u6307\u5b9a\u306b\u6210\u529f\u3057\u305f\u3089true\u3001\u5931\u6557\u3057\u305f\u3089false\r\n   */\r\n  function setCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\r\n    coinAllowances[owner_][spender] = amount;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6a29\u9650\u30c1\u30a7\u30c3\u30af\u7528\u95a2\u6570\u306eoverride\r\n   *\r\n   * @param src \u5b9f\u884c\u8005\u30a2\u30c9\u30ec\u30b9\r\n   * @param sig \u5b9f\u884c\u95a2\u6570\u306e\u8b58\u5225\u5b50\r\n   *\r\n   * @return \u5b9f\u884c\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308c\u3070true\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\r\n   */\r\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n    sig; // #HACK\r\n\r\n    return  src == address(this) ||\r\n            src == owner ||\r\n            src == tokenAddress ||\r\n            src == authorityAddress ||\r\n            src == multiSigAddress;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * \u30a2\u30af\u30bb\u30b9\u6a29\u9650\u3092\u5236\u5fa1\u3059\u308b\u30af\u30e9\u30b9\r\n *\r\n */\r\ncontract IkuraAuthority is DSAuthority, DSAuth {\r\n  // \u30c7\u30fc\u30bf\u306e\u6c38\u7d9a\u5316\u30b9\u30c8\u30ec\u30fc\u30b8\r\n  IkuraStorage tokenStorage;\r\n\r\n  // \u5bfe\u79f0\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u6295\u7968\u3092\u5fc5\u8981\u3068\u3057\u3066\u3044\u308b\u5834\u304b\u3069\u3046\u304b\u306e\u30de\u30c3\u30d4\u30f3\u30b0\r\n  // #TODO \u5f8c\u304b\u3089\u6295\u7968\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5897\u6e1b\u3055\u305b\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u3053\u308c\u3082storage\u30af\u30e9\u30b9\u306b\u6301\u3063\u3066\u3044\u3063\u305f\u307b\u3046\u304c\u3088\u3044\uff1f\r\n  mapping(bytes4 => bool) actionsWithToken;\r\n\r\n  // \u8ab0\u304b\u3089\u3082\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u30a2\u30af\u30b7\u30e7\u30f3\r\n  mapping(bytes4 => bool) actionsForbidden;\r\n\r\n  // @NOTE \u30ea\u30ea\u30fc\u30b9\u6642\u306bcontract\u306edeploy -> watch contract -> setOwner\u306e\u6d41\u308c\u3092\r\n  //\u7701\u7565\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u3053\u3067\u76f4\u63a5controller\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3067\u304d\u307e\u3059\r\n  // \u52ff\u8ad6\u30c6\u30b9\u30c8\u306f\u901a\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u304c\u901a\u3063\u305f\u3089\u8a66\u3057\u3066\u306d\r\n  constructor() public DSAuth() {\r\n    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\r\n    owner = controllerAddress;\r\n    LogSetOwner(controllerAddress);*/\r\n  }\r\n\r\n  /**\r\n   * \u30b9\u30c8\u30ec\u30fc\u30b8\u3092\u66f4\u65b0\u3059\u308b\r\n   *\r\n   * @param storage_ \u65b0\u3057\u3044\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u30a2\u30c9\u30ec\u30b9\r\n   */\r\n  function changeStorage(address storage_) public auth {\r\n    tokenStorage = IkuraStorage(storage_);\r\n\r\n    // \u30c8\u30fc\u30af\u30f3\u306e\u4fdd\u6709\u7387\u306b\u3088\u308b\u627f\u8a8d\u30d7\u30ed\u30bb\u30b9\u304c\u5fc5\u8981\u306a\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\r\n    actionsWithToken[stringToSig('mint(uint256)')] = true;\r\n    actionsWithToken[stringToSig('burn(uint256)')] = true;\r\n    actionsWithToken[stringToSig('confirmProposal(string, uint256)')] = true;\r\n    actionsWithToken[stringToSig('numberOfProposals(string)')] = true;\r\n\r\n    // \u8ab0\u304b\u3089\u3082\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\r\n    actionsForbidden[stringToSig('forbiddenAction()')] = true;\r\n  }\r\n\r\n  /**\r\n   * \u6a29\u9650\u30c1\u30a7\u30c3\u30af\u306eoverride\r\n   * \u30aa\u30fc\u30ca\u30fc\u306e\u307f\u8a31\u53ef\u3059\u308b\r\n   *\r\n   * @param src \u5b9f\u884c\u8005\u30a2\u30c9\u30ec\u30b9\r\n   * @param dst \u5b9f\u884ccontract\r\n   * @param sig \u5b9f\u884c\u95a2\u6570\u306e\u8b58\u5225\u5b50\r\n   *\r\n   * @return \u547c\u3073\u51fa\u3057\u6a29\u9650\u3092\u6301\u3064\u5834\u5408\u306ftrue\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306ffalse\r\n   */\r\n  function canCall(address src, address dst, bytes4 sig) public constant returns (bool) {\r\n    // \u6295\u7968\u304c\u5fc5\u8981\u306a\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u5834\u5408\u306b\u306f\u5225\u30ed\u30b8\u30c3\u30af\u3067\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\r\n    if (actionsWithToken[sig]) return canCallWithAssociation(src, dst);\r\n\r\n    // \u8ab0\u304b\u3089\u3082\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u30a2\u30af\u30b7\u30e7\u30f3\r\n    if (actionsForbidden[sig]) return canCallWithNoOne();\r\n\r\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6a29\u9650\u30c1\u30a7\u30c3\u30af\r\n    return canCallDefault(src);\r\n  }\r\n\r\n  /**\r\n   * \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30aa\u30fc\u30ca\u30fc\u30e1\u30f3\u30d0\u30fc\u3000\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\r\n   *\r\n   * @return \u30aa\u30fc\u30ca\u30fc\u30e1\u30f3\u30d0\u30fc\u3067\u3042\u308b\u5834\u5408\u306ftrue\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306ffalse\r\n   */\r\n  function canCallDefault(address src) internal view returns (bool) {\r\n    return tokenStorage.isOwnerAddress(src);\r\n  }\r\n\r\n  /**\r\n   * \u30c8\u30fc\u30af\u30f3\u4fdd\u6709\u8005\u306b\u3088\u308b\u6295\u7968\u304c\u5fc5\u8981\u306a\u30a2\u30af\u30b7\u30e7\u30f3\r\n   *\r\n   * @param src \u5b9f\u884c\u8005\u30a2\u30c9\u30ec\u30b9\r\n   * @param dst \u5b9f\u884ccontract\r\n   *\r\n   * @return \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8a31\u53ef\u3059\u308b\u5834\u5408\u306ftrue\u3001\u5374\u4e0b\u3055\u308c\u305f\u5834\u5408\u306ffalse\r\n   */\r\n  function canCallWithAssociation(address src, address dst) internal view returns (bool) {\r\n    // warning\u6291\u5236\r\n    dst;\r\n\r\n    return tokenStorage.isOwnerAddress(src) &&\r\n           (tokenStorage.numOwnerAddress() == 1 || tokenStorage.tokenBalance(src) > 0);\r\n  }\r\n\r\n  /**\r\n   * \u8ab0\u304b\u3089\u3082\u547c\u3076\u3053\u3068\u306e\u3067\u304d\u306a\u3044\u30a2\u30af\u30b7\u30e7\u30f3\r\n   * \u30c6\u30b9\u30c8\u7528\u306e\u95a2\u6570\u3067\u3059\r\n   *\r\n   * @return \u5e38\u306bfalse\u3092\u8fd4\u3059\r\n   */\r\n  function canCallWithNoOne() internal pure returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \u95a2\u6570\u5b9a\u7fa9\u304b\u3089function identifier\u3078\u5909\u63db\u3059\u308b\r\n   *\r\n   * #see http://solidity.readthedocs.io/en/develop/units-and-global-variables.html#block-and-transaction-properties\r\n   *\r\n   * @param str \u95a2\u6570\u5b9a\u7fa9\r\n   *\r\n   * @return \u30cf\u30c3\u30b7\u30e5\u5316\u3055\u308c\u305f\u30ad\u30fc\u306e4\u30d0\u30a4\u30c8\r\n   */\r\n  function stringToSig(string str) internal pure returns (bytes4) {\r\n    return bytes4(keccak256(str));\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"canCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"storage_\",\"type\":\"address\"}],\"name\":\"changeStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"}]", "ContractName": "IkuraAuthority", "CompilerVersion": "v0.4.23+commit.124ca40d", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://90172c5b68957abb4cea55d69abf12e3b3f671052e773f666bcb0d07a0e11bf9"}]}