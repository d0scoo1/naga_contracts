{"status": "1", "message": "OK", "result": [{"SourceCode": "// File contracts/interfaces/IERC20.sol\r\npragma solidity >=0.7.5;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeERC20.sol\r\npragma solidity >=0.7.5;\r\n\r\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\r\n/// Taken from Solmate\r\nlibrary SafeERC20 {\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\r\n        );\r\n\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        (bool success, ) = to.call{value: amount}(new bytes(0));\r\n\r\n        require(success, \"ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITreasury.sol\r\npragma solidity >=0.7.5;\r\n\r\ninterface ITreasury {\r\n    function deposit(\r\n        uint256 _amount,\r\n        address _token,\r\n        uint256 _profit\r\n    ) external returns (uint256);\r\n\r\n    function withdraw(uint256 _amount, address _token) external;\r\n\r\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\r\n\r\n    function mint(address _recipient, uint256 _amount) external;\r\n\r\n    function manage(address _token, uint256 _amount) external;\r\n\r\n    function incurDebt(uint256 amount_, address token_) external;\r\n\r\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\r\n\r\n    function excessReserves() external view returns (uint256);\r\n\r\n    function baseSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniswapV2Router.sol\r\npragma solidity >=0.7.5;\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IOlympusAuthority.sol\r\npragma solidity >=0.7.5;\r\n\r\ninterface IOlympusAuthority {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n\r\n    event GovernorPulled(address indexed from, address indexed to);\r\n    event GuardianPulled(address indexed from, address indexed to);\r\n    event PolicyPulled(address indexed from, address indexed to);\r\n    event VaultPulled(address indexed from, address indexed to);\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function policy() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/types/OlympusAccessControlled.sol\r\npragma solidity >=0.7.5;\r\n\r\nabstract contract OlympusAccessControlled {\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\r\n\r\n    string UNAUTHORIZED = \"UNAUTHORIZED\"; // save gas\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IOlympusAuthority public authority;\r\n\r\n    /* ========== Constructor ========== */\r\n\r\n    constructor(IOlympusAuthority _authority) {\r\n        authority = _authority;\r\n        emit AuthorityUpdated(_authority);\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyGovernor() {\r\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyGuardian() {\r\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPolicy() {\r\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyVault() {\r\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    /* ========== GOV ONLY ========== */\r\n\r\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\r\n        authority = _newAuthority;\r\n        emit AuthorityUpdated(_newAuthority);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/migration/GelatoLiquidityMigrator.sol\r\n\r\n// SPDX-License-Identifier: AGPL-3.0\r\npragma solidity ^0.8.10;\r\npragma abicoder v2;\r\n\r\n\r\n\r\n\r\ninterface IGUniRouter {\r\n    function addLiquidity(\r\n        address pool,\r\n        uint256 amount0Max,\r\n        uint256 amount1Max,\r\n        uint256 amount0Min,\r\n        uint256 amount1Min,\r\n        address receiver\r\n    ) external;\r\n}\r\n\r\ncontract GelatoOHMFRAXLiquidityMigrator is OlympusAccessControlled {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // GUni Router\r\n    IGUniRouter internal immutable gUniRouter = IGUniRouter(0x513E0a261af2D33B46F98b81FED547608fA2a03d);\r\n\r\n    // Olympus Treasury\r\n    ITreasury internal immutable treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\r\n\r\n    // Uniswap Router\r\n    IUniswapV2Router internal immutable router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    address internal immutable OHMFRAXGUniPool = 0x61a0C8d4945A61bF26c13e07c30AF1f1ca67b473;\r\n    address internal immutable OHMFRAXLP = 0xB612c37688861f1f90761DC7F382C2aF3a50Cc39;\r\n    address internal immutable OHM = 0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5;\r\n    address internal immutable FRAX = 0x853d955aCEf822Db058eb8505911ED77F175b99e;\r\n\r\n    constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {}\r\n\r\n    /**\r\n     * @notice Removes liquidity from OHM/FRAX LP, then adds liquidty to\r\n     * OHM/FRAX GUni\r\n     */\r\n    function moveLiquidity(\r\n        uint256 _amountOHMFRAX,\r\n        uint256[2] calldata _minOHMFRAXLP,\r\n        uint256[2] calldata _minOHMFRAXGUni,\r\n        uint256 _deadline\r\n    ) external onlyGuardian {\r\n        // Manage LP from treasury\r\n        treasury.manage(OHMFRAXLP, _amountOHMFRAX);\r\n\r\n        // Approve LP to be spent by the uni router\r\n        IERC20(OHMFRAXLP).approve(address(router), _amountOHMFRAX);\r\n\r\n        // Remove specified liquidity from OHM/FRAX LP\r\n        (uint256 amountOHM, uint256 amountFRAX) = router.removeLiquidity(\r\n            OHM,\r\n            FRAX,\r\n            _amountOHMFRAX,\r\n            _minOHMFRAXLP[0],\r\n            _minOHMFRAXLP[1],\r\n            address(this),\r\n            _deadline\r\n        );\r\n\r\n        // Approve Balancer vault to spend tokens\r\n        IERC20(OHM).approve(address(gUniRouter), amountOHM);\r\n        IERC20(FRAX).approve(address(gUniRouter), amountFRAX);\r\n\r\n        gUniRouter.addLiquidity(OHMFRAXGUniPool, amountOHM, amountFRAX, _minOHMFRAXGUni[0], _minOHMFRAXGUni[1], authority.guardian());\r\n\r\n        // Send any leftover OHM back to guardian and FRAX to treasury\r\n        IERC20(OHM).safeTransfer(authority.guardian(), amountOHM);\r\n        IERC20(FRAX).safeTransfer(address(treasury), amountFRAX);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOHMFRAX\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_minOHMFRAXLP\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_minOHMFRAXGUni\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"moveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GelatoOHMFRAXLiquidityMigrator", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001c21f8ea7e39e2ba00bc12d2968d63f4acb38b7a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3d7a1159cff7992b50b15701bfd428bb3d29a0a86bfa99325baa7429d2d2ab21"}]}