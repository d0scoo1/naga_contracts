{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GasStation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@plasma-fi/contracts/interfaces/ITokensApprover.sol\\\";\\nimport \\\"./interfaces/ISwapV2Router.sol\\\";\\nimport \\\"./interfaces/IGasStationTokensStore.sol\\\";\\nimport \\\"./interfaces/IExchange.sol\\\";\\nimport \\\"./utils/FeePayerGuard.sol\\\";\\n\\nimport \\\"./utils/LondonTxSupport.sol\\\";\\n//import \\\"./utils/LegacyTxSupport.sol\\\";\\n\\ncontract GasStation is Ownable, FeePayerGuard, LondonTxSupport {\\n\\n    using SafeMath for uint256;\\n\\n    IExchange public exchange;\\n\\n    IGasStationTokensStore public feeTokensStore;\\n\\n    ITokensApprover public approver;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // Commission as a percentage of the transaction fee, for processing one transaction.\\n    uint256 public txRelayFeePercent;\\n    // Post call gas limit (Prevents overspending of gas)\\n    uint256 public maxPostCallGasUsage = 350000;\\n    // Gas usage by tokens\\n    mapping(address => uint256) postCallGasUsage;\\n\\n    event GasStationTxExecuted(\\n        address indexed from,\\n        address to,\\n        address feeToken,\\n        uint256 totalFeeInTokens,\\n        uint256 txRelayFeeInEth\\n    );\\n    event GasStationExchangeUpdated(address indexed newExchange);\\n    event GasStationFeeTokensStoreUpdated(address indexed newFeeTokensStore);\\n    event GasStationApproverUpdated(address indexed newApprover);\\n    event GasStationTxRelayFeePercentUpdated(uint256 newTxRelayFeePercent);\\n    event GasStationMaxPostCallGasUsageUpdated(uint256 newMaxPostCallGasUsage);\\n\\n    constructor(address _exchange, address _feeTokensStore, address _approver, address _feePayer, uint256 _txRelayFeePercent) {\\n        exchange = IExchange(_exchange);\\n        feeTokensStore = IGasStationTokensStore(_feeTokensStore);\\n        approver = ITokensApprover(_approver);\\n        txRelayFeePercent = _txRelayFeePercent;\\n\\n        if (_feePayer != address(0)) {\\n            feePayers[_feePayer] = true;\\n        }\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function setExchange(address _exchange) external onlyOwner {\\n        exchange = IExchange(_exchange);\\n        emit GasStationExchangeUpdated(_exchange);\\n    }\\n\\n    function setFeeTokensStore(IGasStationTokensStore _feeTokensStore) external onlyOwner {\\n        feeTokensStore = _feeTokensStore;\\n        emit GasStationFeeTokensStoreUpdated(address(_feeTokensStore));\\n    }\\n\\n    function setApprover(ITokensApprover _approver) external onlyOwner {\\n        approver = _approver;\\n        emit GasStationApproverUpdated(address(_approver));\\n    }\\n\\n    function setTxRelayFeePercent(uint256 _txRelayFeePercent) external onlyOwner {\\n        txRelayFeePercent = _txRelayFeePercent;\\n        emit GasStationTxRelayFeePercentUpdated(_txRelayFeePercent);\\n    }\\n\\n    function setMaxPostCallGasUsage(uint256 _maxPostCallGasUsage) external onlyOwner {\\n        maxPostCallGasUsage = _maxPostCallGasUsage;\\n        emit GasStationMaxPostCallGasUsageUpdated(_maxPostCallGasUsage);\\n    }\\n\\n    function getEstimatedPostCallGas(address _token) external view returns (uint256) {\\n        require(feeTokensStore.isAllowedToken(_token), \\\"Fee token not supported\\\");\\n        return _getEstimatedPostCallGas(_token);\\n    }\\n    /**\\n     * @notice Perform a transaction, take payment for gas with tokens, and exchange tokens back to ETH\\n     */\\n    function sendTransaction(TxRequest calldata _tx, TxFee calldata _fee, bytes calldata _sign) external onlyFeePayer {\\n        uint256 initialGas = gasleft();\\n        address txSender = _tx.from;\\n        IERC20 token = IERC20(_fee.token);\\n\\n        // Verify sign and fee token\\n        _verify(_tx, _sign);\\n        require(feeTokensStore.isAllowedToken(address(token)), \\\"Fee token not supported\\\");\\n\\n        // Execute user's transaction\\n        _call(txSender, _tx.to, _tx.value, _tx.data);\\n\\n        // Total gas usage for call.\\n        uint256 callGasUsed = initialGas.sub(gasleft());\\n        uint256 estimatedGasUsed = callGasUsed.add(_getEstimatedPostCallGas(address(token)));\\n        require(estimatedGasUsed < _tx.gas, \\\"Not enough gas\\\");\\n\\n        // Approve fee token with permit method\\n        _permit(_fee.token, _fee.approvalData);\\n\\n        // We calculate and collect tokens to pay for the transaction\\n        (uint256 maxFeeInEth,) = _calculateCharge(_tx.gas, txRelayFeePercent, _tx);\\n        uint256 maxFeeInTokens = exchange.getEstimatedTokensForETH(token, maxFeeInEth);\\n        require(token.transferFrom(txSender, address(exchange), maxFeeInTokens), \\\"Transfer fee failed\\\");\\n\\n        // Exchange user's tokens to ETH and emit executed event\\n        (uint256 totalFeeInEth, uint256 txRelayFeeInEth) = _calculateCharge(estimatedGasUsed, txRelayFeePercent, _tx);\\n        uint256 spentTokens = exchange.swapTokensToETH(token, totalFeeInEth, maxFeeInTokens, msg.sender, txSender);\\n        emit GasStationTxExecuted(txSender, _tx.to, _fee.token, spentTokens, txRelayFeeInEth);\\n\\n        // We check the gas consumption, and save it for calculation in the following transactions\\n        _setUpEstimatedPostCallGas(_fee.token, initialGas.sub(gasleft()).sub(callGasUsed));\\n    }\\n    /**\\n     * @notice Executes a transaction.\\n     * @dev Used to calculate the gas required to complete the transaction.\\n     */\\n    function execute(address from, address to, uint256 value, bytes calldata data) external onlyFeePayer {\\n        _call(from, to, value, data);\\n    }\\n\\n    function _permit(address token, bytes calldata approvalData) internal {\\n        if (approvalData.length > 0 && approver.hasConfigured(token)) {\\n            (bool success,) = approver.callPermit(token, approvalData);\\n            require(success, \\\"Permit Method Call Error\\\");\\n        }\\n    }\\n\\n    function _call(address from, address to, uint256 value, bytes calldata data) internal {\\n        bytes memory callData = abi.encodePacked(data, from);\\n        (bool success,) = to.call{value : value}(callData);\\n\\n        require(success, \\\"Transaction Call Error\\\");\\n    }\\n\\n    function _verify(TxRequest calldata _tx, bytes calldata _sign) internal {\\n        require(_tx.deadline == 0 || _tx.deadline > block.timestamp, \\\"Request expired\\\");\\n        require(nonces[_tx.from]++ == _tx.nonce, \\\"Nonce mismatch\\\");\\n\\n        address signer = _getSigner(DOMAIN_SEPARATOR, _tx, _sign);\\n\\n        require(signer != address(0) && signer == _tx.from, 'Invalid signature');\\n    }\\n\\n    function _getEstimatedPostCallGas(address _token) internal view returns (uint256) {\\n        return postCallGasUsage[_token] > 0 ? postCallGasUsage[_token] : maxPostCallGasUsage;\\n    }\\n\\n    function _setUpEstimatedPostCallGas(address _token, uint256 _postCallGasUsed) internal {\\n        require(_postCallGasUsed < maxPostCallGasUsage, \\\"Post call gas overspending\\\");\\n        postCallGasUsage[_token] = _max(postCallGasUsage[_token], _postCallGasUsed);\\n    }\\n\\n    function _max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/LondonTxSupport.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./EIP712Library.sol\\\";\\n\\nabstract contract LondonTxSupport is EIP712Library {\\n    using SafeMath for uint256;\\n\\n    struct TxRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 deadline;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n    }\\n\\n    int public constant TX_VERSION = 2;\\n\\n    bytes32 public constant TX_REQUEST_TYPEHASH = keccak256(\\\"TxRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 deadline,uint256 maxFeePerGas,uint256 maxPriorityFeePerGas)\\\");\\n\\n    function _getSigner(bytes32 _ds, TxRequest calldata _tx, bytes calldata _sign) internal pure returns (address) {\\n        bytes32 digest = keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _ds,\\n                keccak256(abi.encodePacked(\\n                    TX_REQUEST_TYPEHASH,\\n                    uint256(uint160(_tx.from)),\\n                    uint256(uint160(_tx.to)),\\n                    _tx.value,\\n                    _tx.gas,\\n                    _tx.nonce,\\n                    keccak256(_tx.data),\\n                    _tx.deadline,\\n                    _tx.maxFeePerGas,\\n                    _tx.maxPriorityFeePerGas\\n                ))\\n            ));\\n\\n        (uint8 v, bytes32 r, bytes32 s) = _splitSignature(_sign);\\n        return ecrecover(digest, v, r, s);\\n    }\\n\\n    function _calculateCharge(uint256 _gasUsed, uint256 _txRelayFeePercent, TxRequest calldata _tx) internal view returns (uint256, uint256) {\\n        uint256 baseFee = block.basefee.add(_tx.maxPriorityFeePerGas);\\n        uint256 feePerGas = baseFee < _tx.maxFeePerGas ? baseFee : _tx.maxFeePerGas;\\n\\n        uint256 feeForAllGas = _gasUsed.mul(feePerGas);\\n        uint256 totalFee = feeForAllGas.mul(_txRelayFeePercent.add(100)).div(100);\\n        uint256 txRelayFee = totalFee.sub(feeForAllGas);\\n\\n        return (totalFee, txRelayFee);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/FeePayerGuard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract FeePayerGuard is Ownable {\\n\\n    mapping(address => bool) internal feePayers;\\n\\n    modifier onlyFeePayer() {\\n        require(feePayers[msg.sender], \\\"Unknown fee payer address\\\");\\n        require(msg.sender == tx.origin, \\\"Fee payer must be sender of transaction\\\");\\n        _;\\n    }\\n\\n    function addFeePayer(address _feePayer) external onlyOwner {\\n        if (_feePayer != address(0)) {\\n            feePayers[_feePayer] = true;\\n        }\\n    }\\n\\n    function removeFeePayer(address _feePayer) external onlyOwner {\\n        feePayers[_feePayer] = false;\\n    }\\n\\n    function hasFeePayer(address _feePayer) external view returns (bool) {\\n        return feePayers[_feePayer];\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/EIP712Library.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract EIP712Library {\\n\\n    struct TxFee {\\n        address token;\\n        bytes approvalData;\\n    }\\n\\n    string public constant name = 'Plasma Gas Station';\\n    string public constant version = '1';\\n    mapping(address => uint256) public nonces;\\n\\n    function getNonce(address from) external view returns (uint256) {\\n        return nonces[from];\\n    }\\n\\n    function _splitSignature(bytes memory signature) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        require(signature.length == 65, \\\"Signature invalid length\\\");\\n\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := and(mload(add(signature, 65)), 255)\\n        }\\n\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28, \\\"Signature invalid v byte\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/ISwapV2Router.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISwapV2Router {\\n    function WETH() external returns (address);\\n    function getAmountsIn(uint256 amountOut, address[] memory path) external view returns (uint256[] memory amounts);\\n    function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] memory path, address to, uint256 deadline) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IGasStationTokensStore.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGasStationTokensStore {\\n    function feeTokens() external view returns (address[] memory);\\n    function addFeeToken(address _token) external;\\n    function removeFeeToken(address _token) external;\\n    function isAllowedToken(address _token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IExchange.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IExchange {\\n    /// @dev Calculation of the number of tokens that you need to spend to get _ethAmount\\n    /// @param _token - The address of the token that we exchange for ETH.\\n    /// @param _ethAmount - The amount of ETH to be received.\\n    /// @return The number of tokens you need to get ETH.\\n    function getEstimatedTokensForETH(IERC20 _token, uint256 _ethAmount) external returns (uint256);\\n\\n    /// @dev Exchange tokens for ETH\\n    /// @param _token - The address of the token that we exchange for ETH.\\n    /// @param _receiveEthAmount - The exact amount of ETH to be received.\\n    /// @param _tokensMaxSpendAmount - The maximum number of tokens allowed to spend.\\n    /// @param _ethReceiver - The wallet address to send ETH to after the exchange.\\n    /// @param _tokensReceiver - Wallet address, to whom to send the remaining unused tokens from the exchange.\\n    /// @return Number of tokens spent.\\n    function swapTokensToETH(IERC20 _token, uint256 _receiveEthAmount, uint256 _tokensMaxSpendAmount, address _ethReceiver, address _tokensReceiver) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@plasma-fi/contracts/interfaces/ITokensApprover.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITokensApprover {\\n    /**\\n     * @notice Data for issuing permissions for the token\\n     */\\n    struct ApproveConfig {\\n        string name;\\n        string version;\\n        string domainType;\\n        string primaryType;\\n        string noncesMethod;\\n        string permitMethod;\\n        bytes4 permitMethodSelector;\\n    }\\n\\n    function addConfig(ApproveConfig calldata config) external returns (uint256);\\n\\n    function setConfig(uint256 id, ApproveConfig calldata config) external returns (uint256);\\n\\n    function setToken(uint256 id, address token) external;\\n\\n    function getConfig(address token) view external returns (ApproveConfig memory);\\n\\n    function getConfigById(uint256 id) view external returns (ApproveConfig memory);\\n\\n    function configsLength() view external returns (uint256);\\n\\n    function hasConfigured(address token) view external returns (bool);\\n\\n    function callPermit(address token, bytes calldata permitCallData) external returns (bool, bytes memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTokensStore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feePayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_txRelayFeePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newApprover\",\"type\":\"address\"}],\"name\":\"GasStationApproverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExchange\",\"type\":\"address\"}],\"name\":\"GasStationExchangeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTokensStore\",\"type\":\"address\"}],\"name\":\"GasStationFeeTokensStoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxPostCallGasUsage\",\"type\":\"uint256\"}],\"name\":\"GasStationMaxPostCallGasUsageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFeeInTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txRelayFeeInEth\",\"type\":\"uint256\"}],\"name\":\"GasStationTxExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTxRelayFeePercent\",\"type\":\"uint256\"}],\"name\":\"GasStationTxRelayFeePercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TX_REQUEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TX_VERSION\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feePayer\",\"type\":\"address\"}],\"name\":\"addFeePayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approver\",\"outputs\":[{\"internalType\":\"contract ITokensApprover\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokensStore\",\"outputs\":[{\"internalType\":\"contract IGasStationTokensStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getEstimatedPostCallGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feePayer\",\"type\":\"address\"}],\"name\":\"hasFeePayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPostCallGasUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feePayer\",\"type\":\"address\"}],\"name\":\"removeFeePayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"}],\"internalType\":\"struct LondonTxSupport.TxRequest\",\"name\":\"_tx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"}],\"internalType\":\"struct EIP712Library.TxFee\",\"name\":\"_fee\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_sign\",\"type\":\"bytes\"}],\"name\":\"sendTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokensApprover\",\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"setApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGasStationTokensStore\",\"name\":\"_feeTokensStore\",\"type\":\"address\"}],\"name\":\"setFeeTokensStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPostCallGasUsage\",\"type\":\"uint256\"}],\"name\":\"setMaxPostCallGasUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txRelayFeePercent\",\"type\":\"uint256\"}],\"name\":\"setTxRelayFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txRelayFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GasStation", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000059801fd0b2a3fbd36975f772b6a6a528204b4a4e000000000000000000000000acd4fe965e53ceb419a0104a5b547ea5a797c20a000000000000000000000000b8d498f025c45a8a7a63277cb1cca36c2599bbd700000000000000000000000050a6b2ed6f605c4bde572118dde0a45d05767dbb000000000000000000000000000000000000000000000000000000000000001e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}