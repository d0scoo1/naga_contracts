{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/tokenIssueContract.sol\r\n\r\n\r\n// Written by Metabridge - https://www.metabridgeagency.com\r\n// We are a community of passionate <humans /> building a distributed world\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/// @author MetaBridge Agency LLC\r\n/// @title The bank for the Sheeba play to earn rewards.\r\ncontract SheebaGameTokenBank {\r\n    IERC20 public erc20Token;\r\n    \r\n    address public owner;\r\n    string public name = \"Sheeba Game Token Bank\";\r\n\r\n    mapping(address => bool) public admins;\r\n    mapping(address => uint256) public earners;\r\n    mapping(address => bool) public blockedAddresses;\r\n\r\n    constructor(address _erc20Token) {\r\n        erc20Token = IERC20(_erc20Token);\r\n        owner = msg.sender;\r\n        // Set the owner as a dev\r\n        admins[msg.sender] = true;\r\n    }\r\n\r\n    /// Return the users token balance.\r\n    /// @param userAddress the address to check.\r\n    /// @return the users token balance.\r\n    function getTokenBalance(address userAddress) public view returns(uint256) {\r\n        return erc20Token.balanceOf(userAddress);\r\n    }\r\n\r\n    /// Return the contracts balance of tokens.\r\n    /// @return the contracts balance of tokens.\r\n    function getContractBalance() public view returns(uint256) {\r\n        return getTokenBalance(address(this));\r\n    }\r\n\r\n    /// Return the users reward balance.\r\n    /// @param userAddress the address to check.\r\n    /// @return the users reward balance.\r\n    function getRewardsBalance(address userAddress) public view returns(uint256) {\r\n        return earners[userAddress];\r\n    }\r\n\r\n    /// Store 'totalSheeb'.\r\n    /// @param userAddressToAdd the address to add.\r\n    /// @param totalSheeb the amount of sheeb to add to the user. Not in full form decimal ex. 10 Tokens = 10\r\n    function addTokens(address userAddressToAdd, uint256 totalSheeb) public {\r\n        // Check if admin\r\n        require(admins[msg.sender] == true, \"YOU ARE NOT AN ADMIN\");\r\n        // Start\r\n        earners[userAddressToAdd] = earners[userAddressToAdd] += totalSheeb * 10 ** 18;\r\n    }\r\n\r\n    /// Store 'totalSheeb' per user.\r\n    /// @param userAddresses the addresses to add.\r\n    /// @param points the points to add. Not in full form decimal ex. 10 Tokens = 10\r\n    function addTokensMultiple(address[] memory userAddresses, uint256[] memory points) public {\r\n        // Check if admin\r\n        require(admins[msg.sender] == true, \"YOU ARE NOT AN ADMIN\");\r\n        require(userAddresses.length == points.length, \"Unequal arrays\");\r\n\r\n        // Start\r\n        for (uint i=0; i<userAddresses.length; i++) {\r\n            earners[userAddresses[i]] = earners[userAddresses[i]] += points[i] * 10 ** 18;\r\n        }\r\n    }\r\n\r\n    /// Store 'userAddressToAdd' as either bot or not.\r\n    /// @param userAddressToAdd the address to add or remove.\r\n    /// @param isBot the indication of whether or not this address is a bot.\r\n    function userIsBot(address userAddressToAdd, bool isBot) public {\r\n        // Check if admin\r\n        require(admins[msg.sender] == true, \"YOU ARE NOT AN ADMIN\");\r\n        // Start\r\n        blockedAddresses[userAddressToAdd] = isBot;\r\n    }\r\n\r\n    /// Store 'newAdmin' as admin.\r\n    /// @param newAdmin the address to add.\r\n    function addAdmin(address newAdmin) public {\r\n        require(admins[msg.sender] == true, \"YOU ARE NOT AN ADMIN\");\r\n\r\n        // Any admin can remove the another\r\n        require(newAdmin != msg.sender, \"Cannot add yourself as admin.\");\r\n        admins[newAdmin] = true;\r\n    }\r\n\r\n    /// Store 'adminToRemove' as admin.\r\n    /// @param adminToRemove the address to remove.\r\n    function removeAdmin(address adminToRemove) public {\r\n        require(admins[msg.sender] == true, \"YOU ARE NOT AN ADMIN\");\r\n        \r\n        // Any admin can remove the another\r\n        require(adminToRemove != msg.sender, \"Cannot remove yourself as admin.\");\r\n        admins[adminToRemove] = false;\r\n    }\r\n\r\n    /// Remove the tokens from the contract in case of upgrade or contract issue.\r\n    function retrieveRewardTokens() public {\r\n        require(admins[msg.sender] == true, \"YOU ARE NOT AN ADMIN\");\r\n        uint256 contractBalance = getTokenBalance(address(this));\r\n        erc20Token.transfer(msg.sender, contractBalance);\r\n    }\r\n\r\n    /// Send the tokens to the users wallet.\r\n    function recieveReward() public {\r\n        uint256 amountToSend = earners[msg.sender];\r\n        // Get balance of contract\r\n        uint256 contractBalance = getTokenBalance(address(this));\r\n\r\n        require(amountToSend > 0, \"You have not earned any tokens.\");\r\n        require(contractBalance >= amountToSend, \"Not enough tokens in the contract. Please contact the DEV team.\");\r\n        \r\n        earners[msg.sender] = 0;\r\n        erc20Token.transfer(msg.sender, amountToSend);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddressToAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSheeb\",\"type\":\"uint256\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"points\",\"type\":\"uint256[]\"}],\"name\":\"addTokensMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recieveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminToRemove\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddressToAdd\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBot\",\"type\":\"bool\"}],\"name\":\"userIsBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SheebaGameTokenBank", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006bb570c82c493135cc137644b168743dc1f7eb12", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bd4fd7992a98fdb36b3dc7fa2a54df5d8523da3177aa7959b5a436c8f79766ff"}]}