{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NftMint721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\n\\r\\n//String_Ownable_IERCmetadata_ERC165_IERC165_context_ERC721_IERC721\\r\\n\\r\\ncontract JustASquareERC721A is ERC721A, Ownable {\\r\\n\\tusing Strings for uint256;\\r\\n\\r\\n\\tstring public uriPrefix = \\\"\\\";\\r\\n\\tstring public uriSuffix = \\\".json\\\";\\r\\n\\r\\n\\tuint256 private cost = 0.01 ether;\\r\\n\\tuint256 private costFree = 0;\\r\\n\\tuint256 public maxSupply = 2000;\\r\\n\\tuint256 public maxSupplyFree = 1000;\\r\\n\\tuint256 public maxMintAmountPerTx = 10;\\r\\n\\tuint256 public maxMintPerWallet = 20;\\r\\n\\r\\n\\tbool public paused = true;\\r\\n\\r\\n\\tconstructor(string memory _tokenName, string memory _symbol) ERC721A(_tokenName, _symbol) {}\\r\\n\\r\\n\\tmodifier mintCompliance(uint256 _mintAmount) {\\r\\n\\t\\trequire(_mintAmount > 0 && _mintAmount <= maxMintAmountPerTx, \\\"Invalid mint amount!\\\");\\r\\n\\t\\trequire(totalSupply() + _mintAmount <= maxSupply, \\\"Max supply exceeded!\\\");\\r\\n\\t\\trequire(balanceOf(msg.sender) + _mintAmount <= maxMintPerWallet, \\\"Max supply for your wallet exceeded!\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction mint(uint256 _mintAmount) public payable mintCompliance(_mintAmount) {\\r\\n\\t\\trequire(!paused, \\\"The contract is paused!\\\");\\r\\n\\t\\tif (totalSupply() + _mintAmount <= maxSupplyFree) {\\r\\n\\t\\t\\t_safeMint(msg.sender, _mintAmount);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\trequire(msg.value >= cost * _mintAmount, \\\"Insufficient funds!\\\");\\r\\n\\t\\t\\t_safeMint(msg.sender, _mintAmount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction gift(uint256 _mintAmount, address _receiver) public onlyOwner {\\r\\n\\t\\trequire(totalSupply() + _mintAmount <= maxSupply, \\\"Max supply exceeded!\\\");\\r\\n\\t\\t_safeMint(_receiver, _mintAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction walletOfOwner(address _owner) public view returns (uint256[] memory) {\\r\\n\\t\\tuint256 ownerTokenCount = balanceOf(_owner);\\r\\n\\t\\tuint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\\r\\n\\t\\tuint256 currentTokenId = 1;\\r\\n\\t\\tuint256 ownedTokenIndex = 0;\\r\\n\\r\\n\\t\\twhile (ownedTokenIndex < ownerTokenCount && currentTokenId <= totalSupply()) {\\r\\n\\t\\t\\taddress currentTokenOwner = ownerOf(currentTokenId);\\r\\n\\r\\n\\t\\t\\tif (currentTokenOwner == _owner) {\\r\\n\\t\\t\\t\\townedTokenIds[ownedTokenIndex] = currentTokenId;\\r\\n\\r\\n\\t\\t\\t\\townedTokenIndex++;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tcurrentTokenId++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ownedTokenIds;\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\r\\n\\t\\trequire(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n\\t\\tstring memory currentBaseURI = _baseURI();\\r\\n\\t\\treturn bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)) : \\\"\\\";\\r\\n\\t}\\r\\n\\r\\n\\tfunction setCost(uint256 _cost) public onlyOwner {\\r\\n\\t\\tcost = _cost;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCost() public view returns (uint256) {\\r\\n\\t\\tif (totalSupply() < maxSupplyFree) {\\r\\n\\t\\t\\treturn costFree;\\r\\n\\t\\t}\\r\\n\\t\\treturn cost;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx) public onlyOwner {\\r\\n\\t\\tmaxMintAmountPerTx = _maxMintAmountPerTx;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setUriPrefix(string memory _uriPrefix) public onlyOwner {\\r\\n\\t\\turiPrefix = _uriPrefix;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setUriSuffix(string memory _uriSuffix) public onlyOwner {\\r\\n\\t\\turiSuffix = _uriSuffix;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setPaused(bool _state) public onlyOwner {\\r\\n\\t\\tpaused = _state;\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdraw() public onlyOwner {\\r\\n\\t\\t// This will transfer the remaining contract balance to the owner.\\r\\n\\t\\t(bool os, ) = payable(owner()).call{ value: address(this).balance }(\\\"\\\");\\r\\n\\t\\trequire(os);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawAmount(uint256 _amount) public onlyOwner {\\r\\n\\t\\trequire(_amount <= address(this).balance, \\\"not enought in contract\\\");\\r\\n\\t\\t(bool os, ) = payable(owner()).call{ value: _amount }(\\\"\\\");\\r\\n\\t\\trequire(os);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _baseURI() internal view virtual override returns (string memory) {\\r\\n\\t\\treturn uriPrefix;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _startTokenId() internal view virtual override returns (uint256) {\\r\\n\\t\\treturn 1;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.0.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC721A.sol\\\";\\r\\n\\r\\n//ERC721Metadata -> IERC721A\\r\\n//ERC165 -> IERC72A\\r\\n\\r\\n/**\\r\\n * @dev ERC721 token receiver interface.\\r\\n */\\r\\ninterface ERC721A__IERC721Receiver {\\r\\n\\tfunction onERC721Received(\\r\\n\\t\\taddress operator,\\r\\n\\t\\taddress from,\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tbytes calldata data\\r\\n\\t) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n *\\r\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is IERC721A {\\r\\n\\t// Mask of an entry in packed address data.\\r\\n\\tuint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\r\\n\\r\\n\\t// The bit position of `numberMinted` in packed address data.\\r\\n\\tuint256 private constant BITPOS_NUMBER_MINTED = 64;\\r\\n\\r\\n\\t// The bit position of `numberBurned` in packed address data.\\r\\n\\tuint256 private constant BITPOS_NUMBER_BURNED = 128;\\r\\n\\r\\n\\t// The bit position of `aux` in packed address data.\\r\\n\\tuint256 private constant BITPOS_AUX = 192;\\r\\n\\r\\n\\t// Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\r\\n\\tuint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\r\\n\\r\\n\\t// The bit position of `startTimestamp` in packed ownership.\\r\\n\\tuint256 private constant BITPOS_START_TIMESTAMP = 160;\\r\\n\\r\\n\\t// The bit mask of the `burned` bit in packed ownership.\\r\\n\\tuint256 private constant BITMASK_BURNED = 1 << 224;\\r\\n\\r\\n\\t// The bit position of the `nextInitialized` bit in packed ownership.\\r\\n\\tuint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\r\\n\\r\\n\\t// The bit mask of the `nextInitialized` bit in packed ownership.\\r\\n\\tuint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\\r\\n\\r\\n\\t// The bit position of `extraData` in packed ownership.\\r\\n\\tuint256 private constant BITPOS_EXTRA_DATA = 232;\\r\\n\\r\\n\\t// The mask of the lower 160 bits for addresses.\\r\\n\\tuint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n\\r\\n\\t// The maximum `quantity` that can be minted with `_mintERC2309`.\\r\\n\\t// This limit is to prevent overflows on the address data entries.\\r\\n\\t// For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\\r\\n\\t// is required to cause an overflow, which is unrealistic.\\r\\n\\tuint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\r\\n\\r\\n\\t// The tokenId of the next token to be minted.\\r\\n\\tuint256 private _currentIndex;\\r\\n\\r\\n\\t// The number of tokens burned.\\r\\n\\tuint256 private _burnCounter;\\r\\n\\r\\n\\t// Token name\\r\\n\\tstring private _name;\\r\\n\\r\\n\\t// Token symbol\\r\\n\\tstring private _symbol;\\r\\n\\r\\n\\t// Mapping from token ID to ownership details\\r\\n\\t// An empty struct value does not necessarily mean the token is unowned.\\r\\n\\t// See `_packedOwnershipOf` implementation for details.\\r\\n\\t//\\r\\n\\t// Bits Layout:\\r\\n\\t// - [0..159]   `addr`\\r\\n\\t// - [160..223] `startTimestamp`\\r\\n\\t// - [224]      `burned`\\r\\n\\t// - [225]      `nextInitialized`\\r\\n\\t// - [232..255] `extraData`\\r\\n\\tmapping(uint256 => uint256) private _packedOwnerships;\\r\\n\\r\\n\\t// Mapping owner address to address data.\\r\\n\\t//\\r\\n\\t// Bits Layout:\\r\\n\\t// - [0..63]    `balance`\\r\\n\\t// - [64..127]  `numberMinted`\\r\\n\\t// - [128..191] `numberBurned`\\r\\n\\t// - [192..255] `aux`\\r\\n\\tmapping(address => uint256) private _packedAddressData;\\r\\n\\r\\n\\t// Mapping from token ID to approved address.\\r\\n\\tmapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n\\t// Mapping from owner to operator approvals\\r\\n\\tmapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n\\tconstructor(string memory name_, string memory symbol_) {\\r\\n\\t\\t_name = name_;\\r\\n\\t\\t_symbol = symbol_;\\r\\n\\t\\t_currentIndex = _startTokenId();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the starting token ID.\\r\\n\\t * To change the starting token ID, please override this function.\\r\\n\\t */\\r\\n\\tfunction _startTokenId() internal view virtual returns (uint256) {\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the next token ID to be minted.\\r\\n\\t */\\r\\n\\tfunction _nextTokenId() internal view returns (uint256) {\\r\\n\\t\\treturn _currentIndex;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the total number of tokens in existence.\\r\\n\\t * Burned tokens will reduce the count.\\r\\n\\t * To get the total number of tokens minted, please see `_totalMinted`.\\r\\n\\t */\\r\\n\\tfunction totalSupply() public view override returns (uint256) {\\r\\n\\t\\t// Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n\\t\\t// more than `_currentIndex - _startTokenId()` times.\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\treturn _currentIndex - _burnCounter - _startTokenId();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the total amount of tokens minted in the contract.\\r\\n\\t */\\r\\n\\tfunction _totalMinted() internal view returns (uint256) {\\r\\n\\t\\t// Counter underflow is impossible as _currentIndex does not decrement,\\r\\n\\t\\t// and it is initialized to `_startTokenId()`\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\treturn _currentIndex - _startTokenId();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the total number of tokens burned.\\r\\n\\t */\\r\\n\\tfunction _totalBurned() internal view returns (uint256) {\\r\\n\\t\\treturn _burnCounter;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC165-supportsInterface}.\\r\\n\\t */\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n\\t\\t// The interface IDs are constants representing the first 4 bytes of the XOR of\\r\\n\\t\\t// all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\r\\n\\t\\t// e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\r\\n\\t\\treturn\\r\\n\\t\\t\\tinterfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\r\\n\\t\\t\\tinterfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\r\\n\\t\\t\\tinterfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-balanceOf}.\\r\\n\\t */\\r\\n\\tfunction balanceOf(address owner) public view override returns (uint256) {\\r\\n\\t\\tif (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n\\t\\treturn _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Returns the number of tokens minted by `owner`.\\r\\n\\t */\\r\\n\\tfunction _numberMinted(address owner) internal view returns (uint256) {\\r\\n\\t\\treturn (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n\\t */\\r\\n\\tfunction _numberBurned(address owner) internal view returns (uint256) {\\r\\n\\t\\treturn (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n\\t */\\r\\n\\tfunction _getAux(address owner) internal view returns (uint64) {\\r\\n\\t\\treturn uint64(_packedAddressData[owner] >> BITPOS_AUX);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n\\t * If there are multiple variables, please pack them into a uint64.\\r\\n\\t */\\r\\n\\tfunction _setAux(address owner, uint64 aux) internal {\\r\\n\\t\\tuint256 packed = _packedAddressData[owner];\\r\\n\\t\\tuint256 auxCasted;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// Cast aux without masking.\\r\\n\\t\\t\\tauxCasted := aux\\r\\n\\t\\t}\\r\\n\\t\\tpacked = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\\r\\n\\t\\t_packedAddressData[owner] = packed;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Returns the packed ownership data of `tokenId`.\\r\\n\\t */\\r\\n\\tfunction _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\r\\n\\t\\tuint256 curr = tokenId;\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (_startTokenId() <= curr)\\r\\n\\t\\t\\t\\tif (curr < _currentIndex) {\\r\\n\\t\\t\\t\\t\\tuint256 packed = _packedOwnerships[curr];\\r\\n\\t\\t\\t\\t\\t// If not burned.\\r\\n\\t\\t\\t\\t\\tif (packed & BITMASK_BURNED == 0) {\\r\\n\\t\\t\\t\\t\\t\\t// Invariant:\\r\\n\\t\\t\\t\\t\\t\\t// There will always be an ownership that has an address and is not burned\\r\\n\\t\\t\\t\\t\\t\\t// before an ownership that does not have an address and is not burned.\\r\\n\\t\\t\\t\\t\\t\\t// Hence, curr will not underflow.\\r\\n\\t\\t\\t\\t\\t\\t//\\r\\n\\t\\t\\t\\t\\t\\t// We can directly compare the packed value.\\r\\n\\t\\t\\t\\t\\t\\t// If the address is zero, packed is zero.\\r\\n\\t\\t\\t\\t\\t\\twhile (packed == 0) {\\r\\n\\t\\t\\t\\t\\t\\t\\tpacked = _packedOwnerships[--curr];\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\treturn packed;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\trevert OwnerQueryForNonexistentToken();\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Returns the unpacked `TokenOwnership` struct from `packed`.\\r\\n\\t */\\r\\n\\tfunction _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\r\\n\\t\\townership.addr = address(uint160(packed));\\r\\n\\t\\townership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\\r\\n\\t\\townership.burned = packed & BITMASK_BURNED != 0;\\r\\n\\t\\townership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Returns the unpacked `TokenOwnership` struct at `index`.\\r\\n\\t */\\r\\n\\tfunction _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\\r\\n\\t\\treturn _unpackedOwnership(_packedOwnerships[index]);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\r\\n\\t */\\r\\n\\tfunction _initializeOwnershipAt(uint256 index) internal {\\r\\n\\t\\tif (_packedOwnerships[index] == 0) {\\r\\n\\t\\t\\t_packedOwnerships[index] = _packedOwnershipOf(index);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n\\t * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n\\t */\\r\\n\\tfunction _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\r\\n\\t\\treturn _unpackedOwnership(_packedOwnershipOf(tokenId));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Packs ownership data into a single uint256.\\r\\n\\t */\\r\\n\\tfunction _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n\\t\\t\\towner := and(owner, BITMASK_ADDRESS)\\r\\n\\t\\t\\t// `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\\r\\n\\t\\t\\tresult := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags))\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-ownerOf}.\\r\\n\\t */\\r\\n\\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n\\t\\treturn address(uint160(_packedOwnershipOf(tokenId)));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Metadata-name}.\\r\\n\\t */\\r\\n\\tfunction name() public view virtual override returns (string memory) {\\r\\n\\t\\treturn _name;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Metadata-symbol}.\\r\\n\\t */\\r\\n\\tfunction symbol() public view virtual override returns (string memory) {\\r\\n\\t\\treturn _symbol;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\r\\n\\t */\\r\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n\\t\\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n\\t\\tstring memory baseURI = _baseURI();\\r\\n\\t\\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : \\\"\\\";\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n\\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n\\t * by default, it can be overridden in child contracts.\\r\\n\\t */\\r\\n\\tfunction _baseURI() internal view virtual returns (string memory) {\\r\\n\\t\\treturn \\\"\\\";\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Casts the boolean to uint256 without branching.\\r\\n\\t */\\r\\n\\tfunction _boolToUint256(bool value) private pure returns (uint256 result) {\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tresult := value\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-approve}.\\r\\n\\t */\\r\\n\\tfunction approve(address to, uint256 tokenId) public override {\\r\\n\\t\\taddress owner = ownerOf(tokenId);\\r\\n\\r\\n\\t\\tif (_msgSenderERC721A() != owner)\\r\\n\\t\\t\\tif (!isApprovedForAll(owner, _msgSenderERC721A())) {\\r\\n\\t\\t\\t\\trevert ApprovalCallerNotOwnerNorApproved();\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t_tokenApprovals[tokenId] = to;\\r\\n\\t\\temit Approval(owner, to, tokenId);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-getApproved}.\\r\\n\\t */\\r\\n\\tfunction getApproved(uint256 tokenId) public view override returns (address) {\\r\\n\\t\\tif (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n\\t\\treturn _tokenApprovals[tokenId];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-setApprovalForAll}.\\r\\n\\t */\\r\\n\\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n\\t\\tif (operator == _msgSenderERC721A()) revert ApproveToCaller();\\r\\n\\r\\n\\t\\t_operatorApprovals[_msgSenderERC721A()][operator] = approved;\\r\\n\\t\\temit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-isApprovedForAll}.\\r\\n\\t */\\r\\n\\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n\\t\\treturn _operatorApprovals[owner][operator];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-safeTransferFrom}.\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) public virtual override {\\r\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev See {IERC721-safeTransferFrom}.\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) public virtual override {\\r\\n\\t\\ttransferFrom(from, to, tokenId);\\r\\n\\t\\tif (to.code.length != 0)\\r\\n\\t\\t\\tif (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n\\t\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\r\\n\\t\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns whether `tokenId` exists.\\r\\n\\t *\\r\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n\\t *\\r\\n\\t * Tokens start existing when they are minted (`_mint`),\\r\\n\\t */\\r\\n\\tfunction _exists(uint256 tokenId) internal view returns (bool) {\\r\\n\\t\\treturn\\r\\n\\t\\t\\t_startTokenId() <= tokenId &&\\r\\n\\t\\t\\ttokenId < _currentIndex && // If within bounds,\\r\\n\\t\\t\\t_packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Equivalent to `_safeMint(to, quantity, '')`.\\r\\n\\t */\\r\\n\\tfunction _safeMint(address to, uint256 quantity) internal {\\r\\n\\t\\t_safeMint(to, quantity, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - If `to` refers to a smart contract, it must implement\\r\\n\\t *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n\\t * - `quantity` must be greater than 0.\\r\\n\\t *\\r\\n\\t * See {_mint}.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event for each mint.\\r\\n\\t */\\r\\n\\tfunction _safeMint(\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 quantity,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) internal {\\r\\n\\t\\t_mint(to, quantity);\\r\\n\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (to.code.length != 0) {\\r\\n\\t\\t\\t\\tuint256 end = _currentIndex;\\r\\n\\t\\t\\t\\tuint256 index = end - quantity;\\r\\n\\t\\t\\t\\tdo {\\r\\n\\t\\t\\t\\t\\tif (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\r\\n\\t\\t\\t\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} while (index < end);\\r\\n\\t\\t\\t\\t// Reentrancy protection.\\r\\n\\t\\t\\t\\tif (_currentIndex != end) revert();\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `quantity` must be greater than 0.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event for each mint.\\r\\n\\t */\\r\\n\\tfunction _mint(address to, uint256 quantity) internal {\\r\\n\\t\\tuint256 startTokenId = _currentIndex;\\r\\n\\t\\tif (to == address(0)) revert MintToZeroAddress();\\r\\n\\t\\tif (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n\\t\\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n\\t\\t// Overflows are incredibly unrealistic.\\r\\n\\t\\t// `balance` and `numberMinted` have a maximum limit of 2**64.\\r\\n\\t\\t// `tokenId` has a maximum limit of 2**256.\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t// Updates:\\r\\n\\t\\t\\t// - `balance += quantity`.\\r\\n\\t\\t\\t// - `numberMinted += quantity`.\\r\\n\\t\\t\\t//\\r\\n\\t\\t\\t// We can directly add to the `balance` and `numberMinted`.\\r\\n\\t\\t\\t_packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n\\t\\t\\t// Updates:\\r\\n\\t\\t\\t// - `address` to the owner.\\r\\n\\t\\t\\t// - `startTimestamp` to the timestamp of minting.\\r\\n\\t\\t\\t// - `burned` to `false`.\\r\\n\\t\\t\\t// - `nextInitialized` to `quantity == 1`.\\r\\n\\t\\t\\t_packedOwnerships[startTokenId] = _packOwnershipData(to, (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED) | _nextExtraData(address(0), to, 0));\\r\\n\\r\\n\\t\\t\\tuint256 tokenId = startTokenId;\\r\\n\\t\\t\\tuint256 end = quantity + startTokenId;\\r\\n\\t\\t\\tdo {\\r\\n\\t\\t\\t\\temit Transfer(address(0), to, tokenId++);\\r\\n\\t\\t\\t} while (tokenId < end);\\r\\n\\r\\n\\t\\t\\t_currentIndex = startTokenId + quantity;\\r\\n\\t\\t}\\r\\n\\t\\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n\\t *\\r\\n\\t * This function is intended for efficient minting only during contract creation.\\r\\n\\t *\\r\\n\\t * It emits only one {ConsecutiveTransfer} as defined in\\r\\n\\t * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\r\\n\\t * instead of a sequence of {Transfer} event(s).\\r\\n\\t *\\r\\n\\t * Calling this function outside of contract creation WILL make your contract\\r\\n\\t * non-compliant with the ERC721 standard.\\r\\n\\t * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\r\\n\\t * {ConsecutiveTransfer} event is only permissible during contract creation.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `quantity` must be greater than 0.\\r\\n\\t *\\r\\n\\t * Emits a {ConsecutiveTransfer} event.\\r\\n\\t */\\r\\n\\tfunction _mintERC2309(address to, uint256 quantity) internal {\\r\\n\\t\\tuint256 startTokenId = _currentIndex;\\r\\n\\t\\tif (to == address(0)) revert MintToZeroAddress();\\r\\n\\t\\tif (quantity == 0) revert MintZeroQuantity();\\r\\n\\t\\tif (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n\\t\\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n\\t\\t// Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t// Updates:\\r\\n\\t\\t\\t// - `balance += quantity`.\\r\\n\\t\\t\\t// - `numberMinted += quantity`.\\r\\n\\t\\t\\t//\\r\\n\\t\\t\\t// We can directly add to the `balance` and `numberMinted`.\\r\\n\\t\\t\\t_packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\r\\n\\r\\n\\t\\t\\t// Updates:\\r\\n\\t\\t\\t// - `address` to the owner.\\r\\n\\t\\t\\t// - `startTimestamp` to the timestamp of minting.\\r\\n\\t\\t\\t// - `burned` to `false`.\\r\\n\\t\\t\\t// - `nextInitialized` to `quantity == 1`.\\r\\n\\t\\t\\t_packedOwnerships[startTokenId] = _packOwnershipData(to, (_boolToUint256(quantity == 1) << BITPOS_NEXT_INITIALIZED) | _nextExtraData(address(0), to, 0));\\r\\n\\r\\n\\t\\t\\temit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\r\\n\\r\\n\\t\\t\\t_currentIndex = startTokenId + quantity;\\r\\n\\t\\t}\\r\\n\\t\\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the storage slot and value for the approved address of `tokenId`.\\r\\n\\t */\\r\\n\\tfunction _getApprovedAddress(uint256 tokenId) private view returns (uint256 approvedAddressSlot, address approvedAddress) {\\r\\n\\t\\tmapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\\r\\n\\t\\t// The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// Compute the slot.\\r\\n\\t\\t\\tmstore(0x00, tokenId)\\r\\n\\t\\t\\tmstore(0x20, tokenApprovalsPtr.slot)\\r\\n\\t\\t\\tapprovedAddressSlot := keccak256(0x00, 0x40)\\r\\n\\t\\t\\t// Load the slot's value from storage.\\r\\n\\t\\t\\tapprovedAddress := sload(approvedAddressSlot)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\\r\\n\\t */\\r\\n\\tfunction _isOwnerOrApproved(\\r\\n\\t\\taddress approvedAddress,\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress msgSender\\r\\n\\t) private pure returns (bool result) {\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n\\t\\t\\tfrom := and(from, BITMASK_ADDRESS)\\r\\n\\t\\t\\t// Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\r\\n\\t\\t\\tmsgSender := and(msgSender, BITMASK_ADDRESS)\\r\\n\\t\\t\\t// `msgSender == from || msgSender == approvedAddress`.\\r\\n\\t\\t\\tresult := or(eq(msgSender, from), eq(msgSender, approvedAddress))\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `tokenId` token must be owned by `from`.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction transferFrom(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) public virtual override {\\r\\n\\t\\tuint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n\\t\\tif (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\r\\n\\r\\n\\t\\t(uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\\r\\n\\r\\n\\t\\t// The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n\\t\\tif (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\r\\n\\t\\t\\tif (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n\\t\\tif (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n\\t\\t_beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n\\t\\t// Clear approvals from the previous owner.\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tif approvedAddress {\\r\\n\\t\\t\\t\\t// This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n\\t\\t\\t\\tsstore(approvedAddressSlot, 0)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Underflow of the sender's balance is impossible because we check for\\r\\n\\t\\t// ownership above and the recipient's balance can't realistically overflow.\\r\\n\\t\\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t// We can directly increment and decrement the balances.\\r\\n\\t\\t\\t--_packedAddressData[from]; // Updates: `balance -= 1`.\\r\\n\\t\\t\\t++_packedAddressData[to]; // Updates: `balance += 1`.\\r\\n\\r\\n\\t\\t\\t// Updates:\\r\\n\\t\\t\\t// - `address` to the next owner.\\r\\n\\t\\t\\t// - `startTimestamp` to the timestamp of transfering.\\r\\n\\t\\t\\t// - `burned` to `false`.\\r\\n\\t\\t\\t// - `nextInitialized` to `true`.\\r\\n\\t\\t\\t_packedOwnerships[tokenId] = _packOwnershipData(to, BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked));\\r\\n\\r\\n\\t\\t\\t// If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n\\t\\t\\tif (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\r\\n\\t\\t\\t\\tuint256 nextTokenId = tokenId + 1;\\r\\n\\t\\t\\t\\t// If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n\\t\\t\\t\\tif (_packedOwnerships[nextTokenId] == 0) {\\r\\n\\t\\t\\t\\t\\t// If the next slot is within bounds.\\r\\n\\t\\t\\t\\t\\tif (nextTokenId != _currentIndex) {\\r\\n\\t\\t\\t\\t\\t\\t// Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n\\t\\t\\t\\t\\t\\t_packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit Transfer(from, to, tokenId);\\r\\n\\t\\t_afterTokenTransfers(from, to, tokenId, 1);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Equivalent to `_burn(tokenId, false)`.\\r\\n\\t */\\r\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\r\\n\\t\\t_burn(tokenId, false);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Destroys `tokenId`.\\r\\n\\t * The approval is cleared when the token is burned.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n\\t\\tuint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\r\\n\\r\\n\\t\\taddress from = address(uint160(prevOwnershipPacked));\\r\\n\\r\\n\\t\\t(uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\\r\\n\\r\\n\\t\\tif (approvalCheck)\\r\\n\\t\\t\\tif (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\r\\n\\t\\t\\t\\tif (!isApprovedForAll(from, _msgSenderERC721A()))\\r\\n\\t\\t\\t\\t\\t// The nested ifs save around 20+ gas over a compound boolean condition.\\r\\n\\t\\t\\t\\t\\trevert TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n\\t\\t_beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n\\t\\t// Clear approvals from the previous owner.\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tif approvedAddress {\\r\\n\\t\\t\\t\\t// This is equivalent to `delete _tokenApprovals[tokenId]`.\\r\\n\\t\\t\\t\\tsstore(approvedAddressSlot, 0)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Underflow of the sender's balance is impossible because we check for\\r\\n\\t\\t// ownership above and the recipient's balance can't realistically overflow.\\r\\n\\t\\t// Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t// Updates:\\r\\n\\t\\t\\t// - `balance -= 1`.\\r\\n\\t\\t\\t// - `numberBurned += 1`.\\r\\n\\t\\t\\t//\\r\\n\\t\\t\\t// We can directly decrement the balance, and increment the number burned.\\r\\n\\t\\t\\t// This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\\r\\n\\t\\t\\t_packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\\r\\n\\r\\n\\t\\t\\t// Updates:\\r\\n\\t\\t\\t// - `address` to the last owner.\\r\\n\\t\\t\\t// - `startTimestamp` to the timestamp of burning.\\r\\n\\t\\t\\t// - `burned` to `true`.\\r\\n\\t\\t\\t// - `nextInitialized` to `true`.\\r\\n\\t\\t\\t_packedOwnerships[tokenId] = _packOwnershipData(from, (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked));\\r\\n\\r\\n\\t\\t\\t// If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\r\\n\\t\\t\\tif (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\r\\n\\t\\t\\t\\tuint256 nextTokenId = tokenId + 1;\\r\\n\\t\\t\\t\\t// If the next slot's address is zero and not burned (i.e. packed value is zero).\\r\\n\\t\\t\\t\\tif (_packedOwnerships[nextTokenId] == 0) {\\r\\n\\t\\t\\t\\t\\t// If the next slot is within bounds.\\r\\n\\t\\t\\t\\t\\tif (nextTokenId != _currentIndex) {\\r\\n\\t\\t\\t\\t\\t\\t// Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\r\\n\\t\\t\\t\\t\\t\\t_packedOwnerships[nextTokenId] = prevOwnershipPacked;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit Transfer(from, address(0), tokenId);\\r\\n\\t\\t_afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n\\t\\t// Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t_burnCounter++;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n\\t *\\r\\n\\t * @param from address representing the previous owner of the given token ID\\r\\n\\t * @param to target address that will receive the tokens\\r\\n\\t * @param tokenId uint256 ID of the token to be transferred\\r\\n\\t * @param _data bytes optional data to send along with the call\\r\\n\\t * @return bool whether the call correctly returned the expected magic value\\r\\n\\t */\\r\\n\\tfunction _checkContractOnERC721Received(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tbytes memory _data\\r\\n\\t) private returns (bool) {\\r\\n\\t\\ttry ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n\\t\\t\\treturn retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\r\\n\\t\\t} catch (bytes memory reason) {\\r\\n\\t\\t\\tif (reason.length == 0) {\\r\\n\\t\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the next extra data for the packed ownership data.\\r\\n\\t * The returned result is shifted into position.\\r\\n\\t */\\r\\n\\tfunction _nextExtraData(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 prevOwnershipPacked\\r\\n\\t) internal view virtual returns (uint256) {\\r\\n\\t\\tuint24 previousExtraData;\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\tpreviousExtraData := shr(BITPOS_EXTRA_DATA, prevOwnershipPacked)\\r\\n\\t\\t}\\r\\n\\t\\treturn uint256(_extraData(from, to, previousExtraData)) << BITPOS_EXTRA_DATA;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Called during each token transfer to set the 24bit `extraData` field.\\r\\n\\t * Intended to be overridden by the cosumer contract.\\r\\n\\t *\\r\\n\\t * `previousExtraData` - the value of `extraData` before transfer.\\r\\n\\t *\\r\\n\\t * Calling conditions:\\r\\n\\t *\\r\\n\\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n\\t * transferred to `to`.\\r\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n\\t * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t */\\r\\n\\tfunction _extraData(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint24 previousExtraData\\r\\n\\t) internal view virtual returns (uint24) {}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n\\t * And also called before burning one token.\\r\\n\\t *\\r\\n\\t * startTokenId - the first token id to be transferred\\r\\n\\t * quantity - the amount to be transferred\\r\\n\\t *\\r\\n\\t * Calling conditions:\\r\\n\\t *\\r\\n\\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\r\\n\\t * transferred to `to`.\\r\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n\\t * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t */\\r\\n\\tfunction _beforeTokenTransfers(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 startTokenId,\\r\\n\\t\\tuint256 quantity\\r\\n\\t) internal virtual {}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n\\t * minting.\\r\\n\\t * And also called after one token has been burned.\\r\\n\\t *\\r\\n\\t * startTokenId - the first token id to be transferred\\r\\n\\t * quantity - the amount to be transferred\\r\\n\\t *\\r\\n\\t * Calling conditions:\\r\\n\\t *\\r\\n\\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\r\\n\\t * transferred to `to`.\\r\\n\\t * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n\\t * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n\\t * - `from` and `to` are never both zero.\\r\\n\\t */\\r\\n\\tfunction _afterTokenTransfers(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 startTokenId,\\r\\n\\t\\tuint256 quantity\\r\\n\\t) internal virtual {}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the message sender (defaults to `msg.sender`).\\r\\n\\t *\\r\\n\\t * If you are writing GSN compatible contracts, you need to override this function.\\r\\n\\t */\\r\\n\\tfunction _msgSenderERC721A() internal view virtual returns (address) {\\r\\n\\t\\treturn msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n\\t */\\r\\n\\tfunction _toString(uint256 value) internal pure returns (string memory ptr) {\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// The maximum value of a uint256 contains 78 digits (1 byte per digit),\\r\\n\\t\\t\\t// but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\r\\n\\t\\t\\t// We will need 1 32-byte word to store the length,\\r\\n\\t\\t\\t// and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\r\\n\\t\\t\\tptr := add(mload(0x40), 128)\\r\\n\\t\\t\\t// Update the free memory pointer to allocate.\\r\\n\\t\\t\\tmstore(0x40, ptr)\\r\\n\\r\\n\\t\\t\\t// Cache the end of the memory to calculate the length later.\\r\\n\\t\\t\\tlet end := ptr\\r\\n\\r\\n\\t\\t\\t// We write the string from the rightmost digit to the leftmost digit.\\r\\n\\t\\t\\t// The following is essentially a do-while loop that also handles the zero case.\\r\\n\\t\\t\\t// Costs a bit more than early returning for the zero case,\\r\\n\\t\\t\\t// but cheaper in terms of deployment and overall runtime costs.\\r\\n\\t\\t\\tfor {\\r\\n\\t\\t\\t\\t// Initialize and perform the first pass without check.\\r\\n\\t\\t\\t\\tlet temp := value\\r\\n\\t\\t\\t\\t// Move the pointer 1 byte leftwards to point to an empty character slot.\\r\\n\\t\\t\\t\\tptr := sub(ptr, 1)\\r\\n\\t\\t\\t\\t// Write the character to the pointer. 48 is the ASCII index of '0'.\\r\\n\\t\\t\\t\\tmstore8(ptr, add(48, mod(temp, 10)))\\r\\n\\t\\t\\t\\ttemp := div(temp, 10)\\r\\n\\t\\t\\t} temp {\\r\\n\\t\\t\\t\\t// Keep dividing `temp` until zero.\\r\\n\\t\\t\\t\\ttemp := div(temp, 10)\\r\\n\\t\\t\\t} {\\r\\n\\t\\t\\t\\t// Body of the for loop.\\r\\n\\t\\t\\t\\tptr := sub(ptr, 1)\\r\\n\\t\\t\\t\\tmstore8(ptr, add(48, mod(temp, 10)))\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tlet length := sub(end, ptr)\\r\\n\\t\\t\\t// Move the pointer 32 bytes leftwards to make room for the length.\\r\\n\\t\\t\\tptr := sub(ptr, 32)\\r\\n\\t\\t\\t// Store the length.\\r\\n\\t\\t\\tmstore(ptr, length)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v4.0.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of an ERC721A compliant contract.\\r\\n */\\r\\ninterface IERC721A {\\r\\n\\t/**\\r\\n\\t * The caller must own the token or be an approved operator.\\r\\n\\t */\\r\\n\\terror ApprovalCallerNotOwnerNorApproved();\\r\\n\\r\\n\\t/**\\r\\n\\t * The token does not exist.\\r\\n\\t */\\r\\n\\terror ApprovalQueryForNonexistentToken();\\r\\n\\r\\n\\t/**\\r\\n\\t * The caller cannot approve to their own address.\\r\\n\\t */\\r\\n\\terror ApproveToCaller();\\r\\n\\r\\n\\t/**\\r\\n\\t * Cannot query the balance for the zero address.\\r\\n\\t */\\r\\n\\terror BalanceQueryForZeroAddress();\\r\\n\\r\\n\\t/**\\r\\n\\t * Cannot mint to the zero address.\\r\\n\\t */\\r\\n\\terror MintToZeroAddress();\\r\\n\\r\\n\\t/**\\r\\n\\t * The quantity of tokens minted must be more than zero.\\r\\n\\t */\\r\\n\\terror MintZeroQuantity();\\r\\n\\r\\n\\t/**\\r\\n\\t * The token does not exist.\\r\\n\\t */\\r\\n\\terror OwnerQueryForNonexistentToken();\\r\\n\\r\\n\\t/**\\r\\n\\t * The caller must own the token or be an approved operator.\\r\\n\\t */\\r\\n\\terror TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n\\t/**\\r\\n\\t * The token must be owned by `from`.\\r\\n\\t */\\r\\n\\terror TransferFromIncorrectOwner();\\r\\n\\r\\n\\t/**\\r\\n\\t * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\r\\n\\t */\\r\\n\\terror TransferToNonERC721ReceiverImplementer();\\r\\n\\r\\n\\t/**\\r\\n\\t * Cannot transfer to the zero address.\\r\\n\\t */\\r\\n\\terror TransferToZeroAddress();\\r\\n\\r\\n\\t/**\\r\\n\\t * The token does not exist.\\r\\n\\t */\\r\\n\\terror URIQueryForNonexistentToken();\\r\\n\\r\\n\\t/**\\r\\n\\t * The `quantity` minted with ERC2309 exceeds the safety limit.\\r\\n\\t */\\r\\n\\terror MintERC2309QuantityExceedsLimit();\\r\\n\\r\\n\\tstruct TokenOwnership {\\r\\n\\t\\t// The address of the owner.\\r\\n\\t\\taddress addr;\\r\\n\\t\\t// Keeps track of the start time of ownership with minimal overhead for tokenomics.\\r\\n\\t\\tuint64 startTimestamp;\\r\\n\\t\\t// Whether the token has been burned.\\r\\n\\t\\tbool burned;\\r\\n\\t\\t// Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\\r\\n\\t\\tuint24 extraData;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the total amount of tokens stored by the contract.\\r\\n\\t *\\r\\n\\t * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\r\\n\\t */\\r\\n\\tfunction totalSupply() external view returns (uint256);\\r\\n\\r\\n\\t// ==============================\\r\\n\\t//            IERC165\\r\\n\\t// ==============================\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns true if this contract implements the interface defined by\\r\\n\\t * `interfaceId`. See the corresponding\\r\\n\\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n\\t * to learn more about how these ids are created.\\r\\n\\t *\\r\\n\\t * This function call must use less than 30 000 gas.\\r\\n\\t */\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n\\t// ==============================\\r\\n\\t//            IERC721\\r\\n\\t// ==============================\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n\\t */\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n\\t */\\r\\n\\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n\\t */\\r\\n\\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of tokens in ``owner``'s account.\\r\\n\\t */\\r\\n\\tfunction balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the owner of the `tokenId` token.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t */\\r\\n\\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `from` cannot be the zero address.\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `tokenId` token must exist and be owned by `from`.\\r\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId,\\r\\n\\t\\tbytes calldata data\\r\\n\\t) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n\\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `from` cannot be the zero address.\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `tokenId` token must exist and be owned by `from`.\\r\\n\\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n\\t *\\r\\n\\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `from` cannot be the zero address.\\r\\n\\t * - `to` cannot be the zero address.\\r\\n\\t * - `tokenId` token must be owned by `from`.\\r\\n\\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n\\t *\\r\\n\\t * Emits a {Transfer} event.\\r\\n\\t */\\r\\n\\tfunction transferFrom(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 tokenId\\r\\n\\t) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n\\t * The approval is cleared when the token is transferred.\\r\\n\\t *\\r\\n\\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The caller must own the token or be an approved operator.\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t *\\r\\n\\t * Emits an {Approval} event.\\r\\n\\t */\\r\\n\\tfunction approve(address to, uint256 tokenId) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Approve or remove `operator` as an operator for the caller.\\r\\n\\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The `operator` cannot be the caller.\\r\\n\\t *\\r\\n\\t * Emits an {ApprovalForAll} event.\\r\\n\\t */\\r\\n\\tfunction setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the account approved for `tokenId` token.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - `tokenId` must exist.\\r\\n\\t */\\r\\n\\tfunction getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n\\t *\\r\\n\\t * See {setApprovalForAll}\\r\\n\\t */\\r\\n\\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n\\t// ==============================\\r\\n\\t//        IERC721Metadata\\r\\n\\t// ==============================\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the token collection name.\\r\\n\\t */\\r\\n\\tfunction name() external view returns (string memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the token collection symbol.\\r\\n\\t */\\r\\n\\tfunction symbol() external view returns (string memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n\\t */\\r\\n\\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n\\t// ==============================\\r\\n\\t//            IERC2309\\r\\n\\t// ==============================\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\\r\\n\\t * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\\r\\n\\t */\\r\\n\\tevent ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"gift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmountPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyFree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintAmountPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmountPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JustASquareERC721A", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000d4a7573742041205371756172650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034a41530000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}