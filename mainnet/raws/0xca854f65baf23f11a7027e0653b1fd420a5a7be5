{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/**** \r\n***** this code and any deployments of this code are strictly provided as-is; no guarantee, representation or warranty is being made, express or implied, as to the safety or correctness of the code \r\n***** or any smart contracts or other software deployed from these files, in accordance with the disclosures and licenses found here: https://github.com/ErichDylus/Open-Source-Law/tree/main/solidity#readme\r\n***** this code is not audited, and users, developers, or adapters of these files should proceed with caution and use at their own risk.\r\n****/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Pay In ETH\r\n/// @dev uses Sushiswap router to swap incoming ETH for USDC tokens, then sends to receiver address (initially, the deployer)\r\n/// @notice permits payment for services denominated in ETH but receiving stablecoins without undertaking the swap themselves, avoiding additional unnecessary de minimus taxable events in some jurisdictions.\r\n/// may be easily forked to instead accept DAI, RAI, or any other token with a swap pair - USDC merely used as an example\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract PayInETH {\r\n\r\n    address constant USDC_TOKEN_ADDR = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // USDC mainnet token contract address, change this for desired token to be received\r\n    address constant SUSHI_ROUTER_ADDR = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F; // Sushiswap router contract address\r\n    address receiver; \r\n\r\n    IUniswapV2Router02 public sushiRouter;\r\n\r\n    error CallerNotCurrentReceiver();\r\n\r\n    constructor() payable {\r\n        sushiRouter = IUniswapV2Router02(SUSHI_ROUTER_ADDR);\r\n        receiver = msg.sender;\r\n    }\r\n\r\n    /// @notice receives ETH payment and swaps to USDC via Sushiswap router, which is then sent to receiver.\r\n    /// @dev here, minimum amount set as 0 and deadline set to 100 seconds after call as initial options to avoid failure, but can be altered\r\n    receive() external payable {\r\n        sushiRouter.swapExactETHForTokens{ value: msg.value }(0, _getPathForETHtoUSDC(), receiver, block.timestamp+100);\r\n    }\r\n\r\n    /// @return the router path for ETH/USDC swap\r\n    function _getPathForETHtoUSDC() internal view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = sushiRouter.WETH(); //0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\r\n        path[1] = USDC_TOKEN_ADDR;\r\n        return path;\r\n    }\r\n    \r\n    /// @notice allows current receiver address to change the receiver address for payments\r\n    /// @param _newReceiver new address to receive ultimate stablecoin payment\r\n    /// @return the receiver address\r\n    function changeReceiver(address _newReceiver) external returns (address) {\r\n        if (msg.sender != receiver) revert CallerNotCurrentReceiver();\r\n        receiver = _newReceiver;\r\n        return (receiver);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotCurrentReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newReceiver\",\"type\":\"address\"}],\"name\":\"changeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PayInETH", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ebf178c66db8db824e5253f453f40b52eabf279568749d5d6a3666590c7edb6"}]}