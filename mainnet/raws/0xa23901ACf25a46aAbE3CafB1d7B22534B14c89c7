{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ClayWarsV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"./ClayLibrary.sol\\\";\\r\\nimport \\\"./ClayGen.sol\\\";\\r\\n\\r\\ninterface IClayStorage {  \\r\\n  function setStorage(uint256 id, uint128 key, uint256 value) external;\\r\\n  function getStorage(uint256 id, uint128 key) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IMudToken {  \\r\\n  function mint(address to, uint256 amount) external;\\r\\n  function burn(address from, uint256 amount) external;\\r\\n}\\r\\n\\r\\ninterface IClayTraitModifier {\\r\\n  function renderAttributes(uint256 _t) external view returns (string memory);\\r\\n}\\r\\n\\r\\ncontract ClayWarsV1001 is Ownable, ReentrancyGuard, IClayTraitModifier  {\\r\\n  IClayStorage internal storageContract;\\r\\n  IERC721 internal nftContract;\\r\\n  IMudToken internal tokenContract;\\r\\n\\r\\n  string internal overrideImageUrl;\\r\\n\\r\\n  uint256 internal immutable startCountTime = 1651553997;\\r\\n  uint128 internal constant STG_LAST_MUD_WITHDRAWAL = 1;\\r\\n  uint128 internal constant STG_ORE = 2;\\r\\n  uint128 internal constant STG_EYES = 3;\\r\\n  uint128 internal constant STG_MOUTH = 4;\\r\\n  uint128 internal constant STG_LARGE_ORE = 5;\\r\\n  uint128 internal constant STG_UPGRADE_CD = 6;\\r\\n  uint128 internal constant STG_GEM_ULTIMATE_CD = 7;\\r\\n  uint128 internal constant STG_MANIFEST_CD = 8;\\r\\n  uint128 internal constant STG_NATURE_ULTIMATE_CD = 10;\\r\\n  uint128 internal constant STG_SAP_CD = 11;\\r\\n  uint128 internal constant STG_SELF_DESTRUCT_CD = 12;\\r\\n\\r\\n  uint256 internal constant TRAIT_DEFAULT = 0;\\r\\n  uint256 internal constant TRAIT_NO = 1;\\r\\n  uint256 internal constant TRAIT_YES = 2;\\r\\n\\r\\n  uint256 internal constant COST_EYES = 200 ether;\\r\\n  uint256 internal constant COST_MOUTH = 25 ether;\\r\\n  uint256 internal constant COST_LARGE_ORE = 1000 ether;\\r\\n\\r\\n  bool internal withdrawEnabled = false;\\r\\n\\r\\n  constructor() {\\r\\n  }\\r\\n\\r\\n  function setStorageContract(address _storageContract) public onlyOwner {\\r\\n    storageContract = IClayStorage(_storageContract);\\r\\n  }\\r\\n\\r\\n  function setNFTContract(address _nftContract) public onlyOwner {\\r\\n    nftContract = IERC721(_nftContract);\\r\\n  }\\r\\n\\r\\n  function setTokenContract(address _tokenContract) public onlyOwner {\\r\\n    tokenContract = IMudToken(_tokenContract);\\r\\n  }\\r\\n\\r\\n  function setWithdrawEnabled(bool _withdrawEnabled) public onlyOwner {\\r\\n    withdrawEnabled = _withdrawEnabled;\\r\\n  }\\r\\n\\r\\n  function getTraits(uint256 _t) internal view returns (uint8[6] memory) {\\r\\n    uint8[6] memory traits = ClayGen.getTraits(_t);\\r\\n\\r\\n    {\\r\\n      uint8 ore = uint8(storageContract.getStorage(_t, STG_ORE));\\r\\n      traits[ClayGen.ORE_INDEX] = ore == TRAIT_DEFAULT ? traits[ClayGen.ORE_INDEX] : ore - 1;\\r\\n    }\\r\\n\\r\\n    {\\r\\n      uint8 hasEyes = uint8(storageContract.getStorage(_t, STG_EYES));\\r\\n      traits[ClayGen.EYES_INDEX] = hasEyes == TRAIT_DEFAULT ? traits[ClayGen.EYES_INDEX] : hasEyes - 1;\\r\\n    }\\r\\n\\r\\n    {\\r\\n      uint8 hasMouth = uint8(storageContract.getStorage(_t, STG_MOUTH));\\r\\n      traits[ClayGen.MOUTH_INDEX] = hasMouth == TRAIT_DEFAULT ? traits[ClayGen.MOUTH_INDEX] : hasMouth - 1;\\r\\n    }\\r\\n\\r\\n    {\\r\\n      uint8 largeOre = uint8(storageContract.getStorage(_t, STG_LARGE_ORE));\\r\\n      traits[ClayGen.LARGE_ORE_INDEX] = largeOre == TRAIT_DEFAULT ? traits[ClayGen.LARGE_ORE_INDEX] : largeOre - 1;\\r\\n    }\\r\\n\\r\\n    return traits;\\r\\n  }\\r\\n\\r\\n  function getWithdrawAmountWithTimestamp(uint256 lastMudWithdrawal, uint8[6] memory traits) internal view returns (uint256) {\\r\\n    uint256 largeOre = traits[ClayGen.LARGE_ORE_INDEX] == 1 ? 2 : 1;\\r\\n\\r\\n    uint256 withdrawAmount = (ClayLibrary.getBaseMultiplier(traits[ClayGen.BASE_INDEX]) * \\r\\n      ClayLibrary.getOreMultiplier(traits[ClayGen.ORE_INDEX]) * largeOre) / 1000 * 1 ether;\\r\\n\\r\\n    uint256 stakeStartTime = lastMudWithdrawal;\\r\\n    uint256 firstTimeBonus = 0;\\r\\n    if(lastMudWithdrawal == 0) {\\r\\n      stakeStartTime = startCountTime;\\r\\n      firstTimeBonus = 100 * 1 ether;\\r\\n    }\\r\\n\\r\\n    uint256 stakingTime = block.timestamp - stakeStartTime;\\r\\n    withdrawAmount *= stakingTime;\\r\\n    withdrawAmount /= 1 days;\\r\\n    withdrawAmount += firstTimeBonus;\\r\\n    return withdrawAmount;\\r\\n  }\\r\\n\\r\\n  function getWithdrawAmount(uint256 _t) public view returns (uint256) {\\r\\n    uint8[6] memory traits = getTraits(_t);\\r\\n    uint256 lastMudWithdrawal = storageContract.getStorage(_t, STG_LAST_MUD_WITHDRAWAL);\\r\\n    return getWithdrawAmountWithTimestamp(lastMudWithdrawal, traits);\\r\\n  }\\r\\n\\r\\n  function getWithdrawTotal(uint256[] calldata ids) public view returns (uint256) {\\r\\n    uint256 accum = 0;\\r\\n    for(uint256 i = 0;i < ids.length;i++) {\\r\\n      accum += getWithdrawAmount(ids[i]);\\r\\n    }\\r\\n\\r\\n    return accum;\\r\\n  }\\r\\n\\r\\n  function getWithdrawTotalWithBonus(uint256[] calldata ids, uint256 bgColorIndex) public view returns (uint256) {\\r\\n    uint256 accum = 0;\\r\\n    uint256 totalBonus = 1000;\\r\\n    for(uint256 i = 0;i < ids.length;i++) {\\r\\n      uint256 _t = ids[i];\\r\\n      uint8[6] memory traits = getTraits(_t);\\r\\n      if(traits[ClayGen.ORE_INDEX] < 5 && traits[ClayGen.BG_COLOR_INDEX] == bgColorIndex) {\\r\\n        totalBonus += 100;\\r\\n      }\\r\\n      uint256 lastMudWithdrawal = storageContract.getStorage(_t, STG_LAST_MUD_WITHDRAWAL);\\r\\n      accum += getWithdrawAmountWithTimestamp(lastMudWithdrawal, traits);\\r\\n    }\\r\\n\\r\\n    return accum * (totalBonus - 100) / 1000;\\r\\n  }\\r\\n\\r\\n  function getSetCd(uint256 _t, uint128 storageIndex) internal returns (uint256) {\\r\\n    uint256 lastCd = storageContract.getStorage(_t, storageIndex);\\r\\n    storageContract.setStorage(_t, storageIndex, block.timestamp);\\r\\n    return lastCd;\\r\\n  }\\r\\n\\r\\n  function withdrawToWithPenalty(uint256 _t, uint256 penalty) internal {\\r\\n    uint256 lastMudWithdrawal = getSetCd(_t, STG_LAST_MUD_WITHDRAWAL);\\r\\n    uint8[6] memory traits = getTraits(_t);\\r\\n    uint256 withdrawAmount = getWithdrawAmountWithTimestamp(lastMudWithdrawal, traits);\\r\\n    tokenContract.mint(nftContract.ownerOf(_t), withdrawAmount - penalty);\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 _t) public nonReentrant {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n    require(withdrawEnabled, \\\"Disabled\\\");\\r\\n    withdrawToWithPenalty(_t, 0);\\r\\n  }\\r\\n\\r\\n  function withdrawAll(uint256[] calldata ids) public {\\r\\n    require(withdrawEnabled, \\\"Disabled\\\");\\r\\n    uint256 totalWithdrawAmount = 0;\\r\\n\\r\\n    for(uint256 i = 0;i < ids.length;i++) {\\r\\n      uint256 _t = ids[i];\\r\\n      require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n      uint256 lastMudWithdrawal = getSetCd(_t, STG_LAST_MUD_WITHDRAWAL);\\r\\n      uint8[6] memory traits = getTraits(_t);\\r\\n      totalWithdrawAmount += getWithdrawAmountWithTimestamp(lastMudWithdrawal, traits);\\r\\n    }\\r\\n    \\r\\n    tokenContract.mint(msg.sender, totalWithdrawAmount);\\r\\n  }\\r\\n\\r\\n  function withdrawAllWithBonus(uint256[] calldata ids, uint256 bgColorIndex) public {\\r\\n    require(withdrawEnabled, \\\"Disabled\\\");\\r\\n    uint256 totalWithdrawAmount = 0;\\r\\n    uint256 totalBonus = 1000;\\r\\n\\r\\n    for(uint256 i = 0;i < ids.length;i++) {\\r\\n      uint256 _t = ids[i];\\r\\n      require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n      uint256 lastMudWithdrawal = getSetCd(_t, STG_LAST_MUD_WITHDRAWAL);\\r\\n      uint8[6] memory traits = getTraits(_t);\\r\\n      if(traits[ClayGen.ORE_INDEX] < 5 && traits[ClayGen.BG_COLOR_INDEX] == bgColorIndex) {\\r\\n        totalBonus += 100;\\r\\n      }\\r\\n      totalWithdrawAmount += getWithdrawAmountWithTimestamp(lastMudWithdrawal, traits);\\r\\n    }\\r\\n    \\r\\n    tokenContract.mint(msg.sender, totalWithdrawAmount * (totalBonus - 100) / 1000);\\r\\n  }\\r\\n\\r\\n  function renderAttributes(uint256 _t) external view returns (string memory) {\\r\\n    uint8[6] memory traits = getTraits(_t);\\r\\n    string memory metadataString = ClayGen.renderAttributesFromTraits(traits, _t);\\r\\n    uint256 mud = getWithdrawAmount(_t);\\r\\n    metadataString = string(\\r\\n      abi.encodePacked(\\r\\n        metadataString,\\r\\n        ',{\\\"trait_type\\\":\\\"Mud\\\",\\\"value\\\":',\\r\\n        ClayLibrary.toString(mud / 1 ether),\\r\\n        '}'\\r\\n      )\\r\\n    );\\r\\n\\r\\n    metadataString = string(abi.encodePacked(\\\"[\\\", metadataString, \\\"]\\\"));\\r\\n\\r\\n    if(ClayLibrary.isNotEmpty(overrideImageUrl)) {\\r\\n      metadataString = string(abi.encodePacked(metadataString,\\r\\n        ',\\\"image\\\":\\\"', overrideImageUrl, ClayLibrary.toString(_t),'\\\"'));\\r\\n    }\\r\\n\\r\\n    return metadataString;    \\r\\n  }\\r\\n\\r\\n  function setOverrideImageUrl(string calldata _overrideImageUrl) public onlyOwner {\\r\\n    overrideImageUrl = _overrideImageUrl;\\r\\n  }\\r\\n\\r\\n  function checkCoolDown(uint256 _t, uint256 cooldownTime, uint128 storageIndex, uint8[6] memory traits) internal {\\r\\n    uint256 upgradeCd = storageContract.getStorage(_t, storageIndex);\\r\\n    if(upgradeCd >= block.timestamp - cooldownTime) {\\r\\n      uint8 hasEyes = uint8(storageContract.getStorage(_t, STG_EYES));\\r\\n      hasEyes = hasEyes == TRAIT_DEFAULT ? traits[ClayGen.EYES_INDEX] : hasEyes - 1;\\r\\n      if(hasEyes > 0) {        \\r\\n        storageContract.setStorage(_t, STG_EYES, TRAIT_NO);\\r\\n      } else {\\r\\n        require(upgradeCd < block.timestamp - cooldownTime, \\\"Cooldown\\\");\\r\\n      }\\r\\n    }\\r\\n\\r\\n    storageContract.setStorage(_t, storageIndex, block.timestamp);\\r\\n  }\\r\\n\\r\\n  // ### MARKET ###\\r\\n  \\r\\n  function upgradeOre(uint256 _t) public nonReentrant {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n    uint256 ore = storageContract.getStorage(_t, STG_ORE);\\r\\n    uint8[6] memory traits = getTraits(_t);\\r\\n    uint256 oreLevel = ore == TRAIT_DEFAULT ? traits[ClayGen.ORE_INDEX] : ore - 1;\\r\\n    require(oreLevel != 4 && oreLevel != 8, \\\"oreLevel > 3\\\");\\r\\n    require(oreLevel > 0, \\\"oreLevel == 0\\\");\\r\\n    \\r\\n    checkCoolDown(_t, 1 days, STG_UPGRADE_CD, traits);\\r\\n\\r\\n    uint256 upgradeCost = ClayLibrary.getUpgradeCost(traits[ClayGen.BASE_INDEX]) * (((oreLevel - 1) % 4) + 2) * 1 ether;\\r\\n\\r\\n    tokenContract.burn(msg.sender, upgradeCost);\\r\\n    storageContract.setStorage(_t, STG_ORE, oreLevel + 2);\\r\\n  }\\r\\n\\r\\n  function chooseOre(uint256 _t, bool pathChoice) public nonReentrant {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n    uint256 ore = storageContract.getStorage(_t, STG_ORE);\\r\\n    uint8[6] memory traits = getTraits(_t);\\r\\n    uint256 oreLevel = ore == TRAIT_DEFAULT ? traits[ClayGen.ORE_INDEX] : ore - 1;\\r\\n    require(oreLevel == 0, \\\"oreLevel > 0\\\");\\r\\n    \\r\\n    uint256 upgradeCost = ClayLibrary.getUpgradeCost(traits[ClayGen.BASE_INDEX]) * 1 ether;\\r\\n    if(pathChoice) {\\r\\n      upgradeCost *= 3;\\r\\n    }\\r\\n    \\r\\n    checkCoolDown(_t, 1 days, STG_UPGRADE_CD, traits);\\r\\n\\r\\n    uint256 newOreLevel = pathChoice ? 5 : 1;\\r\\n    tokenContract.burn(msg.sender, upgradeCost);\\r\\n    storageContract.setStorage(_t, STG_ORE, newOreLevel + 1);\\r\\n  }\\r\\n\\r\\n  function purchaseBinary(uint256 _t, uint128 storageIndex, uint256 traitIndex, uint256 cost) internal {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n    uint256 eyes = storageContract.getStorage(_t, storageIndex);\\r\\n    uint8[6] memory traits = getTraits(_t);\\r\\n    require(eyes == TRAIT_NO || \\r\\n      (eyes == TRAIT_DEFAULT && traits[traitIndex] == 0), \\\"Already have\\\");\\r\\n    \\r\\n    tokenContract.burn(msg.sender, cost);\\r\\n    storageContract.setStorage(_t, storageIndex, TRAIT_YES);\\r\\n  }\\r\\n\\r\\n  function purchaseEyes(uint256 _t) public nonReentrant {\\r\\n    purchaseBinary(_t, STG_EYES, ClayGen.EYES_INDEX, COST_EYES);\\r\\n  }\\r\\n\\r\\n  function purchaseMouth(uint256 _t) public nonReentrant {\\r\\n    purchaseBinary(_t, STG_MOUTH, ClayGen.MOUTH_INDEX, COST_MOUTH);\\r\\n  } \\r\\n\\r\\n  function purchaseLargeOre(uint256 _t) public nonReentrant {\\r\\n    purchaseBinary(_t, STG_LARGE_ORE, ClayGen.LARGE_ORE_INDEX, COST_LARGE_ORE);\\r\\n  }  \\r\\n\\r\\n  // ### ABILITIES ###\\r\\n\\r\\n  // Downgrade another clay and earn free mud (3 day cooldown)\\r\\n  function gemUltimate(uint256 _t, uint256 target) public nonReentrant {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n    \\r\\n    uint8[6] memory myTraits = getTraits(_t);\\r\\n    uint8[6] memory targetTraits = getTraits(target);\\r\\n    \\r\\n    uint256 myOre = storageContract.getStorage(_t, STG_ORE);\\r\\n    uint256 targetOre = storageContract.getStorage(target, STG_ORE);\\r\\n    uint256 myOreLevel = myOre == TRAIT_DEFAULT ? myTraits[ClayGen.ORE_INDEX] : myOre - 1;\\r\\n    uint256 targetOreLevel = targetOre == TRAIT_DEFAULT ? targetTraits[ClayGen.ORE_INDEX] : targetOre - 1;\\r\\n\\r\\n    require(myOreLevel > 4, \\\"Not gem\\\");\\r\\n    require(targetOreLevel != 0, \\\"No ore\\\");\\r\\n    \\r\\n    uint256 myOreLevelAdjusted = (myOreLevel - 1) % 4;\\r\\n    uint256 targetOreLevelAdjusted = (targetOreLevel - 1) % 4;\\r\\n\\r\\n    require(targetOreLevelAdjusted <= myOreLevelAdjusted, \\\"Target > mine\\\");\\r\\n    require(targetOreLevelAdjusted != 0, \\\"Target == 0\\\");\\r\\n\\r\\n    checkCoolDown(_t, 3 days, STG_GEM_ULTIMATE_CD, myTraits);\\r\\n\\r\\n    // Check mouth    \\r\\n    uint256 mouth = storageContract.getStorage(target, STG_MOUTH);\\r\\n    if(mouth == TRAIT_YES || (mouth == TRAIT_DEFAULT && targetTraits[ClayGen.MOUTH_INDEX] == 1)) {\\r\\n      storageContract.setStorage(target, STG_MOUTH, TRAIT_NO);\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    withdrawToWithPenalty(target, 0);\\r\\n    // No subtraction here since = is actual -1\\r\\n    storageContract.setStorage(target, STG_ORE, targetOreLevel);\\r\\n    tokenContract.mint(msg.sender, 5000 ether);\\r\\n  }  \\r\\n\\r\\n  // Free mouth (7 day cooldown)\\r\\n  function manifest(uint256 _t) public nonReentrant {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n    uint256 mouth = storageContract.getStorage(_t, STG_MOUTH);\\r\\n    uint8[6] memory traits = getTraits(_t);\\r\\n    require(mouth == TRAIT_NO || \\r\\n      (mouth == TRAIT_DEFAULT && traits[ClayGen.MOUTH_INDEX] == 0), \\\"Already have\\\");\\r\\n        \\r\\n    uint256 myOre = storageContract.getStorage(_t, STG_ORE);\\r\\n    uint256 myOreLevel = myOre == TRAIT_DEFAULT ? traits[ClayGen.ORE_INDEX] : myOre - 1;\\r\\n    require(myOreLevel > 4, \\\"Not gem\\\");\\r\\n\\r\\n    checkCoolDown(_t, 7 days, STG_MANIFEST_CD, traits);\\r\\n\\r\\n    storageContract.setStorage(_t, STG_MOUTH, TRAIT_YES);\\r\\n  }  \\r\\n\\r\\n  // Collect mud into a single clay and add 10%\\r\\n  function coalesce(uint256 _t, uint256[] calldata ids) public nonReentrant {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n    \\r\\n    uint8[6] memory myTraits = getTraits(_t);\\r\\n    uint256 myOre = storageContract.getStorage(_t, STG_ORE);\\r\\n    uint256 myOreLevel = myOre == TRAIT_DEFAULT ? myTraits[ClayGen.ORE_INDEX] : myOre - 1;\\r\\n    require(myOreLevel > 4, \\\"Not gem\\\");\\r\\n\\r\\n    uint256 totalWithdrawAmount = 0;\\r\\n    for(uint256 i = 0;i < ids.length;i++) {\\r\\n      uint256 tokenId = ids[i];\\r\\n      require(nftContract.ownerOf(tokenId) == msg.sender, \\\"Not owner\\\");\\r\\n      uint256 lastMudWithdrawal = storageContract.getStorage(tokenId, STG_LAST_MUD_WITHDRAWAL);\\r\\n      storageContract.setStorage(tokenId, STG_LAST_MUD_WITHDRAWAL, block.timestamp);\\r\\n      uint8[6] memory traits = getTraits(tokenId);\\r\\n      totalWithdrawAmount += getWithdrawAmountWithTimestamp(lastMudWithdrawal, traits);\\r\\n    }\\r\\n    \\r\\n    tokenContract.burn(msg.sender, 20 ether);\\r\\n    tokenContract.mint(msg.sender, totalWithdrawAmount * 1100 / 1000);\\r\\n  }\\r\\n\\r\\n  // Swap ore with another 1 level higher (3 day cooldown)\\r\\n  function natureUltimate(uint256 _t, uint256 target) public nonReentrant {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n    \\r\\n    uint8[6] memory myTraits = getTraits(_t);\\r\\n    uint8[6] memory targetTraits = getTraits(target);\\r\\n    \\r\\n    uint256 myOre = storageContract.getStorage(_t, STG_ORE);\\r\\n    uint256 targetOre = storageContract.getStorage(target, STG_ORE);\\r\\n    uint256 myOreLevel = myOre == TRAIT_DEFAULT ? myTraits[ClayGen.ORE_INDEX] : myOre - 1;\\r\\n    uint256 targetOreLevel = targetOre == TRAIT_DEFAULT ? targetTraits[ClayGen.ORE_INDEX] : targetOre - 1;\\r\\n\\r\\n    require(myOreLevel > 0 && myOreLevel < 5, \\\"Not nature\\\");\\r\\n    require(targetOreLevel != 0, \\\"No ore\\\");\\r\\n    \\r\\n    uint256 myOreLevelAdjusted = (myOreLevel - 1) % 4;\\r\\n    uint256 targetOreLevelAdjusted = (targetOreLevel - 1) % 4;\\r\\n\\r\\n    require(targetOreLevelAdjusted == myOreLevelAdjusted + 1, \\\"Target != mine + 1\\\");\\r\\n\\r\\n    checkCoolDown(_t, 3 days, STG_NATURE_ULTIMATE_CD, myTraits);\\r\\n    tokenContract.burn(msg.sender, 50 ether);\\r\\n    \\r\\n    // Check mouth    \\r\\n    uint256 mouth = storageContract.getStorage(target, STG_MOUTH);\\r\\n    if(mouth == TRAIT_YES || (mouth == TRAIT_DEFAULT && targetTraits[ClayGen.MOUTH_INDEX] == 1)) {\\r\\n      storageContract.setStorage(target, STG_MOUTH, TRAIT_NO);\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    withdrawToWithPenalty(target, 0);\\r\\n    withdrawToWithPenalty(_t, 0);\\r\\n    storageContract.setStorage(target, STG_ORE, myOreLevel + 1);\\r\\n    storageContract.setStorage(_t, STG_ORE, targetOreLevel + 1);\\r\\n  }  \\r\\n\\r\\n  // Steal 2500 mud (1 day cooldown)\\r\\n  function sap(uint256 _t, uint256 target) public nonReentrant {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n    \\r\\n    uint8[6] memory myTraits = getTraits(_t);    \\r\\n    uint256 myOre = storageContract.getStorage(_t, STG_ORE);\\r\\n    uint256 myOreLevel = myOre == TRAIT_DEFAULT ? myTraits[ClayGen.ORE_INDEX] : myOre - 1;\\r\\n    require(myOreLevel > 0 && myOreLevel < 5, \\\"Not nature\\\");    \\r\\n\\r\\n    checkCoolDown(_t, 1 days, STG_SAP_CD, myTraits);\\r\\n\\r\\n    withdrawToWithPenalty(target, 2500 ether);\\r\\n    tokenContract.mint(msg.sender, 2500 ether);\\r\\n  }\\r\\n\\r\\n  // Downgrade ore level (1 day cooldown)\\r\\n  function selfDestruct(uint256 _t) public nonReentrant {\\r\\n    require(nftContract.ownerOf(_t) == msg.sender, \\\"Not owner\\\");\\r\\n\\r\\n    uint8[6] memory myTraits = getTraits(_t);    \\r\\n    uint256 myOre = storageContract.getStorage(_t, STG_ORE);\\r\\n    uint256 myOreLevel = myOre == TRAIT_DEFAULT ? myTraits[ClayGen.ORE_INDEX] : myOre - 1;\\r\\n    require(myOreLevel > 0 && myOreLevel < 5, \\\"Not nature\\\");   \\r\\n\\r\\n    checkCoolDown(_t, 1 days, STG_SELF_DESTRUCT_CD, myTraits);\\r\\n\\r\\n    withdrawToWithPenalty(_t, 0);\\r\\n    // No subtraction here since = is actual -1\\r\\n    storageContract.setStorage(_t, STG_ORE, myOreLevel);\\r\\n  \\r\\n    uint256 upgradeCost = ClayLibrary.getUpgradeCost(myTraits[ClayGen.BASE_INDEX]) * (((myOreLevel - 1) % 4) + 1) * 1 ether;\\r\\n    tokenContract.mint(msg.sender, upgradeCost * 750 / 1000);\\r\\n  }\\r\\n  \\r\\n  function getByOre(uint8 oreIndex, uint256 startId, uint256 endId) external view returns (uint256[] memory) {\\r\\n    uint256[] memory matchingOres = new uint256[](endId - startId);\\r\\n    uint256 index = 0;\\r\\n\\r\\n    for (uint256 _t = startId; _t < endId; _t++) {\\r\\n      uint8 oreTrait = ClayGen.getOreTrait(_t);\\r\\n      uint256 myOre = storageContract.getStorage(_t, STG_ORE);\\r\\n      uint256 myOreLevel = myOre == TRAIT_DEFAULT ? oreTrait : myOre - 1;\\r\\n\\r\\n      if(myOreLevel == oreIndex) {\\r\\n        matchingOres[index] = _t;\\r\\n        index++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    uint256[] memory result = new uint256[](index);\\r\\n    for (uint256 i = 0; i < index; i++) {\\r\\n      result[i] = matchingOres[i];\\r\\n    }\\r\\n    return result;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ClayLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nlibrary ClayLibrary {\\r\\n  uint256 public constant SEED = 144261992486;\\r\\n\\r\\n  function getBaseMultiplier(uint index) internal pure returns (uint256) {\\r\\n    uint8[4] memory baseTiers = [\\r\\n      10,\\r\\n      20,\\r\\n      30,\\r\\n      40\\r\\n    ];\\r\\n\\r\\n    return uint256(baseTiers[index]);\\r\\n  }\\r\\n\\r\\n  function getOreMultiplier(uint index) internal pure returns (uint256) {\\r\\n    uint16[9] memory oreTiers = [\\r\\n      1000,\\r\\n      2500,\\r\\n      3000,\\r\\n      3500,\\r\\n      4000,\\r\\n      1500,\\r\\n      2000,\\r\\n      6000,\\r\\n      10000\\r\\n    ];\\r\\n\\r\\n    return uint256(oreTiers[index]);\\r\\n  }\\r\\n\\r\\n  function getUpgradeCost(uint index) internal pure returns (uint256) {\\r\\n    uint16[4] memory baseTiers = [\\r\\n      50,\\r\\n      100,\\r\\n      250,\\r\\n      400\\r\\n    ];\\r\\n\\r\\n    return uint256(baseTiers[index] * 2);\\r\\n  }\\r\\n\\r\\n  function toString(uint256 value) internal pure returns (string memory) {\\r\\n      if (value == 0) {\\r\\n          return \\\"0\\\";\\r\\n      }\\r\\n      uint256 temp = value;\\r\\n      uint256 digits;\\r\\n      while (temp != 0) {\\r\\n          digits++;\\r\\n          temp /= 10;\\r\\n      }\\r\\n      bytes memory buffer = new bytes(digits);\\r\\n      while (value != 0) {\\r\\n          digits -= 1;\\r\\n          buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n          value /= 10;\\r\\n      }\\r\\n      return string(buffer);\\r\\n  }\\r\\n\\r\\n  function parseInt(string memory _a)\\r\\n      internal\\r\\n      pure\\r\\n      returns (uint8 _parsedInt)\\r\\n  {\\r\\n      bytes memory bresult = bytes(_a);\\r\\n      uint8 mint = 0;\\r\\n      for (uint8 i = 0; i < bresult.length; i++) {\\r\\n          if (\\r\\n              (uint8(uint8(bresult[i])) >= 48) &&\\r\\n              (uint8(uint8(bresult[i])) <= 57)\\r\\n          ) {\\r\\n              mint *= 10;\\r\\n              mint += uint8(bresult[i]) - 48;\\r\\n          }\\r\\n      }\\r\\n      return mint;\\r\\n  }\\r\\n\\r\\n  function substring(\\r\\n      string memory str,\\r\\n      uint256 startIndex,\\r\\n      uint256 endIndex\\r\\n  ) internal pure returns (string memory) {\\r\\n      bytes memory strBytes = bytes(str);\\r\\n      bytes memory result = new bytes(endIndex - startIndex);\\r\\n      for (uint256 i = startIndex; i < endIndex; i++) {\\r\\n          result[i - startIndex] = strBytes[i];\\r\\n      }\\r\\n      return string(result);\\r\\n  }\\r\\n\\r\\n  function stringLength(\\r\\n      string memory str\\r\\n  ) internal pure returns (uint256) {\\r\\n      bytes memory strBytes = bytes(str);\\r\\n      return strBytes.length;\\r\\n  }\\r\\n\\r\\n  function isNotEmpty(string memory str) internal pure returns (bool) {\\r\\n      return bytes(str).length > 0;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ClayGen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"./ClayLibrary.sol\\\";\\r\\n\\r\\nlibrary ClayGen {  \\r\\n  struct Trait {\\r\\n    string traitType;\\r\\n    string traitName;\\r\\n  }\\r\\n\\r\\n  uint8 public constant BASE_INDEX = 0;\\r\\n  uint8 public constant ORE_INDEX = 1;\\r\\n  uint8 public constant EYES_INDEX = 2;\\r\\n  uint8 public constant MOUTH_INDEX = 3;\\r\\n  uint8 public constant BG_COLOR_INDEX = 4;\\r\\n  uint8 public constant LARGE_ORE_INDEX = 5;\\r\\n\\r\\n  function getTiers() internal pure returns (uint16[][6] memory) {\\r\\n    uint16[][6] memory TIERS = [\\r\\n      new uint16[](4),\\r\\n      new uint16[](9),\\r\\n      new uint16[](2),\\r\\n      new uint16[](2),\\r\\n      new uint16[](6),\\r\\n      new uint16[](2)      \\r\\n    ];\\r\\n\\r\\n    //Base\\r\\n    TIERS[0][0] = 4000;\\r\\n    TIERS[0][1] = 3000;\\r\\n    TIERS[0][2] = 2000;\\r\\n    TIERS[0][3] = 1000;\\r\\n\\r\\n    //Ore\\r\\n    TIERS[1][0] = 5000;\\r\\n    TIERS[1][1] = 1500;\\r\\n    TIERS[1][2] = 1500;\\r\\n    TIERS[1][3] = 750;\\r\\n    TIERS[1][4] = 750;\\r\\n    TIERS[1][5] = 200;\\r\\n    TIERS[1][6] = 200;\\r\\n    TIERS[1][7] = 90;\\r\\n    TIERS[1][8] = 10;\\r\\n    \\r\\n    //HasEyes\\r\\n    TIERS[2][0] = 8000; \\r\\n    TIERS[2][1] = 2000;\\r\\n\\r\\n    //HasMouth\\r\\n    TIERS[3][0] = 9000;\\r\\n    TIERS[3][1] = 1000;\\r\\n\\r\\n    //BgColor\\r\\n    TIERS[4][0] = 2000;\\r\\n    TIERS[4][1] = 2000;\\r\\n    TIERS[4][2] = 1500;\\r\\n    TIERS[4][3] = 1500;\\r\\n    TIERS[4][4] = 1500;\\r\\n    TIERS[4][5] = 1500;\\r\\n\\r\\n    //LargeOre\\r\\n    TIERS[5][0] = 7500;\\r\\n    TIERS[5][1] = 2500;\\r\\n\\r\\n    return TIERS;\\r\\n  }\\r\\n\\r\\n  function getTraitTypes() internal pure returns (Trait[][6] memory) {\\r\\n    Trait[][6] memory TIERS = [\\r\\n      new Trait[](4),\\r\\n      new Trait[](9),\\r\\n      new Trait[](2),\\r\\n      new Trait[](2),\\r\\n      new Trait[](6),\\r\\n      new Trait[](2)      \\r\\n    ];\\r\\n\\r\\n    //Base\\r\\n    TIERS[0][0] = Trait('Base', 'Clay');\\r\\n    TIERS[0][1] = Trait('Base', 'Stone');\\r\\n    TIERS[0][2] = Trait('Base', 'Metal');\\r\\n    TIERS[0][3] = Trait('Base', 'Obsidian');\\r\\n\\r\\n    //Ore\\r\\n    TIERS[1][0] = Trait('Ore', 'None');\\r\\n    TIERS[1][1] = Trait('Ore', 'Grass');\\r\\n    TIERS[1][2] = Trait('Ore', 'Bronze');\\r\\n    TIERS[1][3] = Trait('Ore', 'Jade');\\r\\n    TIERS[1][4] = Trait('Ore', 'Gold');\\r\\n    TIERS[1][5] = Trait('Ore', 'Ruby');\\r\\n    TIERS[1][6] = Trait('Ore', 'Sapphire');\\r\\n    TIERS[1][7] = Trait('Ore', 'Amethyst');\\r\\n    TIERS[1][8] = Trait('Ore', 'Diamond');\\r\\n    \\r\\n    //HasEyes\\r\\n    TIERS[2][0] = Trait('HasEyes', 'No'); \\r\\n    TIERS[2][1] = Trait('HasEyes', 'Yes');\\r\\n\\r\\n    //HasMouth\\r\\n    TIERS[3][0] = Trait('HasMouth', 'No');\\r\\n    TIERS[3][1] = Trait('HasMouth', 'Yes');\\r\\n\\r\\n    //BgColor\\r\\n    TIERS[4][0] = Trait('BgColor', 'Forest');\\r\\n    TIERS[4][1] = Trait('BgColor', 'Mountain');\\r\\n    TIERS[4][2] = Trait('BgColor', 'River');\\r\\n    TIERS[4][3] = Trait('BgColor', 'Field');\\r\\n    TIERS[4][4] = Trait('BgColor', 'Cave');\\r\\n    TIERS[4][5] = Trait('BgColor', 'Clouds');\\r\\n\\r\\n    //LargeOre\\r\\n    TIERS[5][0] = Trait('LargeOre', 'No');\\r\\n    TIERS[5][1] = Trait('LargeOre', 'Yes');\\r\\n\\r\\n    return TIERS;\\r\\n  }\\r\\n\\r\\n    function generateMetadataHash(uint256 _t, uint256 _c)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory currentHash = \\\"\\\";\\r\\n        for (uint8 i = 0; i < 6; i++) {\\r\\n            uint16 _randinput = uint16(\\r\\n                uint256(keccak256(abi.encodePacked(_t, _c))) % 10000\\r\\n            );\\r\\n\\r\\n            currentHash = string(\\r\\n                abi.encodePacked(currentHash, rarityGen(_randinput, i))\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return currentHash;\\r\\n    }\\r\\n\\r\\n    function rarityGen(uint256 _randinput, uint8 _rarityTier)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n      uint16[][6] memory TIERS = getTiers();\\r\\n      uint16 currentLowerBound = 0;\\r\\n      for (uint8 i = 0; i < TIERS[_rarityTier].length; i++) {\\r\\n          uint16 thisPercentage = TIERS[_rarityTier][i];\\r\\n          if (\\r\\n              _randinput >= currentLowerBound &&\\r\\n              _randinput < currentLowerBound + thisPercentage\\r\\n          ) return ClayLibrary.toString(i);\\r\\n          currentLowerBound = currentLowerBound + thisPercentage;\\r\\n      }\\r\\n\\r\\n      revert();\\r\\n    }\\r\\n    \\r\\n\\r\\n  function getTraitIndex(string memory _hash, uint index) internal pure returns (uint8) {\\r\\n    return ClayLibrary.parseInt(ClayLibrary.substring(_hash, index, index + 1));\\r\\n  }\\r\\n\\r\\n  function getTraits(uint256 _t) internal pure returns (uint8[6] memory) {\\r\\n    string memory _hash = generateMetadataHash(_t, ClayLibrary.SEED);\\r\\n    uint8 baseIndex = getTraitIndex(_hash, 0);\\r\\n    uint8 oreIndex = getTraitIndex(_hash, 1);\\r\\n    uint8 hasEyesIndex = getTraitIndex(_hash, 2);\\r\\n    uint8 hasMouthIndex = getTraitIndex(_hash, 3);\\r\\n    uint8 bgColorIndex = getTraitIndex(_hash, 4);\\r\\n    uint8 largeOreIndex = getTraitIndex(_hash, 5);\\r\\n    uint8[6] memory traits = [baseIndex, oreIndex, hasEyesIndex, hasMouthIndex, bgColorIndex, largeOreIndex];\\r\\n    return traits;\\r\\n  }\\r\\n\\r\\n  function getOreTrait(uint256 _t) internal pure returns (uint8) {\\r\\n    string memory _hash = generateMetadataHash(_t, ClayLibrary.SEED);\\r\\n    return getTraitIndex(_hash, 1);\\r\\n  }\\r\\n\\r\\n  function renderAttributesFromTraits(uint8[6] memory traits, uint256 _t) internal pure returns (string memory) {\\r\\n    Trait[][6] memory traitTypes = getTraitTypes();\\r\\n    string memory metadataString = string(abi.encodePacked('{\\\"trait_type\\\":\\\"Base\\\",\\\"value\\\":\\\"', traitTypes[0][traits[0]].traitName,'\\\"},'));\\r\\n    metadataString = string(abi.encodePacked(metadataString, '{\\\"trait_type\\\":\\\"Ore\\\",\\\"value\\\":\\\"', traitTypes[1][traits[1]].traitName,'\\\"},'));\\r\\n    metadataString = string(abi.encodePacked(metadataString, '{\\\"trait_type\\\":\\\"HasEyes\\\",\\\"value\\\":\\\"', traitTypes[2][traits[2]].traitName,'\\\"},'));\\r\\n    metadataString = string(abi.encodePacked(metadataString, '{\\\"trait_type\\\":\\\"HasMouth\\\",\\\"value\\\":\\\"', traitTypes[3][traits[3]].traitName,'\\\"},'));\\r\\n    metadataString = string(abi.encodePacked(metadataString, '{\\\"trait_type\\\":\\\"BgColor\\\",\\\"value\\\":\\\"', traitTypes[4][traits[4]].traitName,'\\\"},'));\\r\\n    metadataString = string(abi.encodePacked(metadataString, '{\\\"trait_type\\\":\\\"LargeOre\\\",\\\"value\\\":\\\"', traitTypes[5][traits[5]].traitName,'\\\"},'));\\r\\n\\r\\n    uint256 seed = uint256(keccak256(abi.encodePacked(_t, ClayLibrary.SEED))) % 100000;\\r\\n    metadataString = string(abi.encodePacked(metadataString, '{\\\"trait_type\\\":\\\"Seed\\\",\\\"value\\\":\\\"', ClayLibrary.toString(seed), '\\\"}'));\\r\\n\\r\\n    return metadataString;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pathChoice\",\"type\":\"bool\"}],\"name\":\"chooseOre\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"coalesce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"gemUltimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"oreIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endId\",\"type\":\"uint256\"}],\"name\":\"getByOre\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"getWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getWithdrawTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bgColorIndex\",\"type\":\"uint256\"}],\"name\":\"getWithdrawTotalWithBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"manifest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"natureUltimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"purchaseEyes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"purchaseLargeOre\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"purchaseMouth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"renderAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"sap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"selfDestruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_overrideImageUrl\",\"type\":\"string\"}],\"name\":\"setOverrideImageUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageContract\",\"type\":\"address\"}],\"name\":\"setStorageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withdrawEnabled\",\"type\":\"bool\"}],\"name\":\"setWithdrawEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"upgradeOre\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bgColorIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawAllWithBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ClayWarsV1001", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}