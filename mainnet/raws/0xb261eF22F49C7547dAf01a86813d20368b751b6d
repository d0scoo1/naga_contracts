{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ClaimRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.13;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./Delegatable.sol\\\";\\nimport \\\"./caveat-enforcers/RevokableOwnableDelegatable.sol\\\";\\n\\ncontract ClaimRegistry is RevokableOwnableDelegatable {\\n\\n  constructor(string memory name) RevokableOwnableDelegatable(name) {}\\n\\n  mapping (string => mapping (bytes32 => bool)) public boolClaims;\\n  function makeBooleanClaim (string calldata identifier, bytes32 claimType, bool isClaimed) onlyOwner public {\\n    boolClaims[identifier][claimType] = isClaimed;\\n  }\\n\\n  mapping (string => mapping (bytes32 => string)) public claims;\\n  function makeClaim (string calldata identifier, bytes32 claimType, string calldata claim) onlyOwner public {\\n    claims[identifier][claimType] = claim;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Delegatable.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.13;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./TypesAndDecoders.sol\\\";\\nimport \\\"./caveat-enforcers/CaveatEnforcer.sol\\\";\\n\\nabstract contract Delegatable is EIP712Decoder {\\n  event DelegationTriggered(address principal, address indexed agent);\\n\\n  bytes32 public immutable domainHash;\\n  constructor (string memory contractName, string memory version) {\\n    domainHash = getEIP712DomainHash(contractName,version,block.chainid,address(this));\\n  }  \\n\\n  // Allows external signers to submit batches of signed invocations for processing. \\n  function invoke (SignedInvocation[] calldata signedInvocations) public returns (bool success) {\\n    for (uint i = 0; i < signedInvocations.length; i++) {\\n      SignedInvocation calldata signedInvocation = signedInvocations[i];\\n      address invocationSigner = verifyInvocationSignature(signedInvocation);\\n      enforceReplayProtection(invocationSigner, signedInvocations[i].invocations.replayProtection);\\n      _invoke(signedInvocation.invocations.batch, invocationSigner);\\n    }\\n  }\\n\\n  // Allows external contracts to submit batches of invocations for processing.\\n  function contractInvoke (Invocation[] calldata batch) public returns (bool) {\\n    return _invoke(batch, msg.sender);\\n  }\\n\\n  function _invoke (Invocation[] calldata batch, address sender) private returns (bool success) {\\n    for (uint x = 0; x < batch.length; x++) {\\n      Invocation memory invocation = batch[x];\\n      address intendedSender;\\n      address canGrant;\\n\\n      // If there are no delegations, this invocation comes from the signer\\n      if (invocation.authority.length == 0) {\\n        intendedSender = sender;\\n        canGrant = intendedSender;\\n      }\\n\\n      bytes32 authHash = 0x0;\\n\\n      for (uint d = 0; d < invocation.authority.length; d++) {\\n        SignedDelegation memory signedDelegation = invocation.authority[d];\\n        address delegationSigner = verifyDelegationSignature(signedDelegation);\\n\\n        // Implied sending account is the signer of the first delegation\\n        if (d == 0) {\\n          intendedSender = delegationSigner;\\n          canGrant = intendedSender;\\n        }\\n\\n        require(delegationSigner == canGrant, \\\"Delegation signer does not match required signer\\\");\\n\\n        Delegation memory delegation = signedDelegation.delegation;\\n        require(delegation.authority == authHash, \\\"Delegation authority does not match previous delegation\\\");\\n\\n        // TODO: maybe delegations should have replay protection, at least a nonce (non order dependent),\\n        // otherwise once it's revoked, you can't give the exact same permission again.\\n        bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(signedDelegation);\\n\\n        // Each delegation can include any number of caveats.\\n        // A caveat is any condition that may reject a proposed transaction.\\n        // The caveats specify an external contract that is passed the proposed tx,\\n        // As well as some extra terms that are used to parameterize the enforcer.\\n        for (uint16 y = 0; y < delegation.caveats.length; y++) {\\n          CaveatEnforcer enforcer = CaveatEnforcer(delegation.caveats[y].enforcer);\\n          bool caveatSuccess = enforcer.enforceCaveat(delegation.caveats[y].terms, invocation.transaction, delegationHash);\\n          require(caveatSuccess, \\\"Caveat rejected\\\");\\n        }\\n\\n        // Store the hash of this delegation in `authHash`\\n        // That way the next delegation can be verified against it.\\n        authHash = delegationHash;\\n        canGrant = delegation.delegate;\\n      }\\n\\n      // Here we perform the requested invocation.\\n      Transaction memory transaction = invocation.transaction;\\n\\n      require(transaction.to == address(this), \\\"Invocation target does not match\\\");\\n      emit DelegationTriggered(intendedSender, sender);\\n      success = execute(\\n        transaction.to,\\n        transaction.data,\\n        transaction.gasLimit,\\n        intendedSender\\n      );\\n      require(success, \\\"Delegator execution failed\\\");\\n    }\\n  }\\n\\n  mapping(address => mapping(uint => uint)) public multiNonce;\\n  function enforceReplayProtection (address intendedSender, ReplayProtection memory protection) private {\\n    uint queue = protection.queue;\\n    uint nonce = protection.nonce;\\n    require(nonce == (multiNonce[intendedSender][queue]+1), \\\"One-at-a-time order enforced. Nonce2 is too small\\\");\\n    multiNonce[intendedSender][queue] = nonce;\\n  }\\n\\n  function execute(\\n      address to,\\n      bytes memory data,\\n      uint256 gasLimit,\\n      address sender\\n  ) internal returns (bool success) {\\n    bytes memory full = abi.encodePacked(data, sender);\\n    assembly {\\n      success := call(gasLimit, to, 0, add(full, 0x20), mload(full), 0, 0)\\n    }\\n  }\\n\\n  function verifyInvocationSignature (SignedInvocation memory signedInvocation) public view returns (address) {\\n    bytes32 sigHash = getInvocationsTypedDataHash(signedInvocation.invocations);\\n    address recoveredSignatureSigner = recover(sigHash, signedInvocation.signature);\\n    return recoveredSignatureSigner;\\n  } \\n\\n  function verifyDelegationSignature (SignedDelegation memory signedDelegation) public view returns (address) {\\n    Delegation memory delegation = signedDelegation.delegation;\\n    bytes32 sigHash = getDelegationTypedDataHash(delegation);\\n    address recoveredSignatureSigner = recover(sigHash, signedDelegation.signature);\\n    return recoveredSignatureSigner;\\n  }\\n\\n  function getDelegationTypedDataHash(Delegation memory delegation) public view returns (bytes32) {\\n    bytes32 digest = keccak256(abi.encodePacked(\\n      \\\"\\\\x19\\\\x01\\\",\\n      domainHash,\\n      GET_DELEGATION_PACKETHASH(delegation)\\n    ));\\n    return digest;\\n  }\\n\\n  function getInvocationsTypedDataHash (Invocations memory invocations) public view returns (bytes32) {\\n    bytes32 digest = keccak256(abi.encodePacked(\\n      \\\"\\\\x19\\\\x01\\\",\\n      domainHash,\\n      GET_INVOCATIONS_PACKETHASH(invocations)\\n    ));\\n    return digest;\\n  }\\n\\n  function getEIP712DomainHash(string memory contractName, string memory version, uint256 chainId, address verifyingContract) public pure returns (bytes32) {\\n    bytes memory encoded = abi.encode(\\n      EIP712DOMAIN_TYPEHASH,\\n      keccak256(bytes(contractName)),\\n      keccak256(bytes(version)),\\n      chainId,\\n      verifyingContract\\n    );\\n    return keccak256(encoded);\\n  }\\n\\n\\n  function _msgSender () internal view virtual returns (address sender) {\\n    if(msg.sender == address(this)) {\\n      bytes memory array = msg.data;\\n      uint256 index = msg.data.length;\\n      assembly {\\n        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n      }\\n    } else {\\n      sender = msg.sender;\\n    }\\n    return sender;\\n  }\\n\\n}\\n\\n\"\r\n    },\r\n    \"contracts/caveat-enforcers/RevokableOwnableDelegatable.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.13;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./CaveatEnforcer.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; //https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\nimport \\\"../Delegatable.sol\\\";\\n\\nabstract contract RevokableOwnableDelegatable is Ownable, CaveatEnforcer, Delegatable {\\n\\n  constructor(string memory name) Delegatable(name, \\\"1\\\") {}\\n\\n  mapping(bytes32 => bool) isRevoked;\\n  function enforceCaveat(\\n    bytes calldata terms,\\n    Transaction calldata transaction,\\n    bytes32 delegationHash\\n  ) public view override returns (bool) {\\n    require(!isRevoked[delegationHash], \\\"Delegation has been revoked\\\");\\n\\n    // Owner methods are not delegatable in this contract:\\n    bytes4 targetSig = bytes4(transaction.data[0:4]);\\n\\n    // transferOwnership(address newOwner)\\n    require(targetSig != 0xf2fde38b, \\\"transferOwnership is not delegatable\\\");\\n\\n    // renounceOwnership() \\n    require(targetSig != 0x79ba79d8, \\\"renounceOwnership is not delegatable\\\");\\n\\n    return true;\\n  }\\n\\nfunction revokeDelegation(\\n    SignedDelegation calldata signedDelegation,\\n    SignedIntentionToRevoke calldata signedIntentionToRevoke\\n  ) public {\\n    address signer = verifyDelegationSignature(signedDelegation);\\n    address revocationSigner = verifyIntentionToRevokeSignature(signedIntentionToRevoke);\\n    require(signer == revocationSigner, \\\"Only the signer can revoke a delegation\\\");\\n\\n    bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(signedDelegation);\\n    isRevoked[delegationHash] = true;\\n  }\\n\\n  function verifyIntentionToRevokeSignature(\\n    SignedIntentionToRevoke memory signedIntentionToRevoke\\n  ) public view returns (address) {\\n    IntentionToRevoke memory intentionToRevoke = signedIntentionToRevoke.intentionToRevoke;\\n    bytes32 sigHash = getIntentionToRevokeTypedDataHash(intentionToRevoke);\\n    address recoveredSignatureSigner = recover(sigHash, signedIntentionToRevoke.signature);\\n    return recoveredSignatureSigner;\\n  }\\n\\n  function getIntentionToRevokeTypedDataHash(\\n    IntentionToRevoke memory intentionToRevoke\\n  ) public view returns (bytes32) {\\n    bytes32 digest = keccak256(abi.encodePacked(\\n      \\\"\\\\x19\\\\x01\\\",\\n      domainHash,\\n      GET_INTENTIONTOREVOKE_PACKETHASH(intentionToRevoke)\\n    ));\\n    return digest;\\n  }\\n\\n  /**\\n   * This is boilerplate that must be added to any Delegatable contract if it also inherits\\n   * from another class that also implements _msgSender().\\n   */\\n  function _msgSender () internal view override(Delegatable, Context) returns (address sender) {\\n    if(msg.sender == address(this)) {\\n      bytes memory array = msg.data;\\n      uint256 index = msg.data.length;\\n      assembly {\\n        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n      }\\n    } else {\\n      sender = msg.sender;\\n    }\\n    return sender;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/TypesAndDecoders.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.13;\\n// SPDX-License-Identifier: MIT\\nimport \\\"./ECRecovery.sol\\\";\\n\\n// BEGIN EIP712 AUTOGENERATED SETUP\\nstruct EIP712Domain {\\n  string name;\\n  string version;\\n  uint256 chainId;\\n  address verifyingContract;\\n}\\n\\nbytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\nstruct Invocation {\\n  Transaction transaction;\\n  SignedDelegation[] authority;\\n}\\n\\nbytes32 constant INVOCATION_TYPEHASH = keccak256(\\\"Invocation(Transaction transaction,SignedDelegation[] authority)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\\\");\\n\\nstruct Invocations {\\n  Invocation[] batch;\\n  ReplayProtection replayProtection;\\n}\\n\\nbytes32 constant INVOCATIONS_TYPEHASH = keccak256(\\\"Invocations(Invocation[] batch,ReplayProtection replayProtection)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\\\");\\n\\nstruct SignedInvocation {\\n  Invocations invocations;\\n  bytes signature;\\n}\\n\\nbytes32 constant SIGNEDINVOCATION_TYPEHASH = keccak256(\\\"SignedInvocation(Invocations invocations,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)Invocations(Invocation[] batch,ReplayProtection replayProtection)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\\\");\\n\\nstruct Transaction {\\n  address to;\\n  uint256 gasLimit;\\n  bytes data;\\n}\\n\\nbytes32 constant TRANSACTION_TYPEHASH = keccak256(\\\"Transaction(address to,uint256 gasLimit,bytes data)\\\");\\n\\nstruct ReplayProtection {\\n  uint nonce;\\n  uint queue;\\n}\\n\\nbytes32 constant REPLAYPROTECTION_TYPEHASH = keccak256(\\\"ReplayProtection(uint nonce,uint queue)\\\");\\n\\nstruct Delegation {\\n  address delegate;\\n  bytes32 authority;\\n  Caveat[] caveats;\\n}\\n\\nbytes32 constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegate,bytes32 authority,Caveat[] caveats)Caveat(address enforcer,bytes terms)\\\");\\n\\nstruct Caveat {\\n  address enforcer;\\n  bytes terms;\\n}\\n\\nbytes32 constant CAVEAT_TYPEHASH = keccak256(\\\"Caveat(address enforcer,bytes terms)\\\");\\n\\nstruct SignedDelegation {\\n  Delegation delegation;\\n  bytes signature;\\n}\\n\\nbytes32 constant SIGNEDDELEGATION_TYPEHASH = keccak256(\\\"SignedDelegation(Delegation delegation,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)\\\");\\n\\nstruct IntentionToRevoke {\\n  bytes32 delegationHash;\\n}\\n\\nbytes32 constant INTENTIONTOREVOKE_TYPEHASH = keccak256(\\\"IntentionToRevoke(bytes32 delegationHash)\\\");\\n\\nstruct SignedIntentionToRevoke {\\n  bytes signature;\\n  IntentionToRevoke intentionToRevoke;\\n}\\n\\nbytes32 constant SIGNEDINTENTIONTOREVOKE_TYPEHASH = keccak256(\\\"SignedIntentionToRevoke(bytes signature,IntentionToRevoke intentionToRevoke)IntentionToRevoke(bytes32 delegationHash)\\\");\\n\\n// END EIP712 AUTOGENERATED SETUP\\n\\ncontract EIP712Decoder is ECRecovery {\\n\\n  // BEGIN EIP712 AUTOGENERATED BODY. See scripts/typesToCode.js\\n\\n  function GET_EIP712DOMAIN_PACKETHASH (EIP712Domain memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      EIP712DOMAIN_TYPEHASH,\\n      _input.name,\\n      _input.version,\\n      _input.chainId,\\n      _input.verifyingContract\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_INVOCATION_PACKETHASH (Invocation memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      INVOCATION_TYPEHASH,\\n      GET_TRANSACTION_PACKETHASH(_input.transaction),\\n      GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(_input.authority)\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_SIGNEDDELEGATION_ARRAY_PACKETHASH (SignedDelegation[] memory _input) public pure returns (bytes32) {\\n    bytes memory encoded;\\n    for (uint i = 0; i < _input.length; i++) {\\n      encoded = bytes.concat(\\n        encoded,\\n        GET_SIGNEDDELEGATION_PACKETHASH(_input[i])\\n      );\\n    }\\n    \\n    bytes32 hash = keccak256(encoded);\\n    return hash;\\n  }\\n\\n  function GET_INVOCATIONS_PACKETHASH (Invocations memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      INVOCATIONS_TYPEHASH,\\n      GET_INVOCATION_ARRAY_PACKETHASH(_input.batch),\\n      GET_REPLAYPROTECTION_PACKETHASH(_input.replayProtection)\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_INVOCATION_ARRAY_PACKETHASH (Invocation[] memory _input) public pure returns (bytes32) {\\n    bytes memory encoded;\\n    for (uint i = 0; i < _input.length; i++) {\\n      encoded = bytes.concat(\\n        encoded,\\n        GET_INVOCATION_PACKETHASH(_input[i])\\n      );\\n    }\\n    \\n    bytes32 hash = keccak256(encoded);\\n    return hash;\\n  }\\n\\n  function GET_SIGNEDINVOCATION_PACKETHASH (SignedInvocation memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      SIGNEDINVOCATION_TYPEHASH,\\n      GET_INVOCATIONS_PACKETHASH(_input.invocations),\\n      keccak256(_input.signature)\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_TRANSACTION_PACKETHASH (Transaction memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      TRANSACTION_TYPEHASH,\\n      _input.to,\\n      _input.gasLimit,\\n      keccak256(_input.data)\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_REPLAYPROTECTION_PACKETHASH (ReplayProtection memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      REPLAYPROTECTION_TYPEHASH,\\n      _input.nonce,\\n      _input.queue\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_DELEGATION_PACKETHASH (Delegation memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      DELEGATION_TYPEHASH,\\n      _input.delegate,\\n      _input.authority,\\n      GET_CAVEAT_ARRAY_PACKETHASH(_input.caveats)\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_CAVEAT_ARRAY_PACKETHASH (Caveat[] memory _input) public pure returns (bytes32) {\\n    bytes memory encoded;\\n    for (uint i = 0; i < _input.length; i++) {\\n      encoded = bytes.concat(\\n        encoded,\\n        GET_CAVEAT_PACKETHASH(_input[i])\\n      );\\n    }\\n    \\n    bytes32 hash = keccak256(encoded);\\n    return hash;\\n  }\\n\\n  function GET_CAVEAT_PACKETHASH (Caveat memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      CAVEAT_TYPEHASH,\\n      _input.enforcer,\\n      keccak256(_input.terms)\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_SIGNEDDELEGATION_PACKETHASH (SignedDelegation memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      SIGNEDDELEGATION_TYPEHASH,\\n      GET_DELEGATION_PACKETHASH(_input.delegation),\\n      keccak256(_input.signature)\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_INTENTIONTOREVOKE_PACKETHASH (IntentionToRevoke memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      INTENTIONTOREVOKE_TYPEHASH,\\n      _input.delegationHash\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n\\n  function GET_SIGNEDINTENTIONTOREVOKE_PACKETHASH (SignedIntentionToRevoke memory _input) public pure returns (bytes32) {\\n    \\n    bytes memory encoded = abi.encode(\\n      SIGNEDINTENTIONTOREVOKE_TYPEHASH,\\n      keccak256(_input.signature),\\n      GET_INTENTIONTOREVOKE_PACKETHASH(_input.intentionToRevoke)\\n    );\\n    \\n    return keccak256(encoded);\\n  }\\n  // END EIP712 AUTOGENERATED BODY\\n\\n}\\n\"\r\n    },\r\n    \"contracts/caveat-enforcers/CaveatEnforcer.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.13;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"../TypesAndDecoders.sol\\\";\\n\\nabstract contract CaveatEnforcer {\\n  function enforceCaveat (bytes calldata terms, Transaction calldata tx, bytes32 delegationHash) virtual public returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ECRecovery.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.13;\\n// SPDX-License-Identifier: MIT \\n\\ncontract ECRecovery {\\n\\n    /**\\n    * @dev Recover signer address from a message by using their signature\\n    * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\\n    * @param sig bytes signature, the signature is generated using web3.eth.sign()\\n    */\\n    function recover(bytes32 hash, bytes memory sig) internal pure returns (address) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        //Check the signature length\\n        if (sig.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n// Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"DelegationTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"GET_CAVEAT_ARRAY_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_CAVEAT_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_DELEGATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"internalType\":\"struct EIP712Domain\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_EIP712DOMAIN_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IntentionToRevoke\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_INTENTIONTOREVOKE_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_INVOCATIONS_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"GET_INVOCATION_ARRAY_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_INVOCATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_REPLAYPROTECTION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"_input\",\"type\":\"tuple[]\"}],\"name\":\"GET_SIGNEDDELEGATION_ARRAY_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_SIGNEDDELEGATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IntentionToRevoke\",\"name\":\"intentionToRevoke\",\"type\":\"tuple\"}],\"internalType\":\"struct SignedIntentionToRevoke\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_SIGNEDINTENTIONTOREVOKE_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedInvocation\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_SIGNEDINVOCATION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"_input\",\"type\":\"tuple\"}],\"name\":\"GET_TRANSACTION_PACKETHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"boolClaims\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"}],\"name\":\"contractInvoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"name\":\"enforceCaveat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"}],\"name\":\"getDelegationTypedDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"name\":\"getEIP712DomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IntentionToRevoke\",\"name\":\"intentionToRevoke\",\"type\":\"tuple\"}],\"name\":\"getIntentionToRevokeTypedDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"}],\"name\":\"getInvocationsTypedDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedInvocation[]\",\"name\":\"signedInvocations\",\"type\":\"tuple[]\"}],\"name\":\"invoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"claimType\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"name\":\"makeBooleanClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"claimType\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"claim\",\"type\":\"string\"}],\"name\":\"makeClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multiNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"signedDelegation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IntentionToRevoke\",\"name\":\"intentionToRevoke\",\"type\":\"tuple\"}],\"internalType\":\"struct SignedIntentionToRevoke\",\"name\":\"signedIntentionToRevoke\",\"type\":\"tuple\"}],\"name\":\"revokeDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation\",\"name\":\"signedDelegation\",\"type\":\"tuple\"}],\"name\":\"verifyDelegationSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IntentionToRevoke\",\"name\":\"intentionToRevoke\",\"type\":\"tuple\"}],\"internalType\":\"struct SignedIntentionToRevoke\",\"name\":\"signedIntentionToRevoke\",\"type\":\"tuple\"}],\"name\":\"verifyIntentionToRevokeSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"authority\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"}],\"internalType\":\"struct Caveat[]\",\"name\":\"caveats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Delegation\",\"name\":\"delegation\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedDelegation[]\",\"name\":\"authority\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Invocation[]\",\"name\":\"batch\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queue\",\"type\":\"uint256\"}],\"internalType\":\"struct ReplayProtection\",\"name\":\"replayProtection\",\"type\":\"tuple\"}],\"internalType\":\"struct Invocations\",\"name\":\"invocations\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedInvocation\",\"name\":\"signedInvocation\",\"type\":\"tuple\"}],\"name\":\"verifyInvocationSignature\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ClaimRegistry", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000084d6f62794d61736b000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}