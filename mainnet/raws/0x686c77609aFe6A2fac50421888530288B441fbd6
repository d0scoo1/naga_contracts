{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CATPLUS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\\r\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\r\\n\\r\\n/* pragma solidity ^0.8.0; */\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\\r\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\r\\n\\r\\n/* pragma solidity ^0.8.0; */\\r\\n\\r\\n/* import \\\"../utils/Context.sol\\\"; */\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\r\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\r\\n\\r\\n/* pragma solidity ^0.8.0; */\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n////// lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\r\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\n/* pragma solidity ^0.8.0; */\\r\\n\\r\\n/* import \\\"../IERC20.sol\\\"; */\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n////// lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\r\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\r\\n\\r\\n/* pragma solidity ^0.8.0; */\\r\\n\\r\\n/* import \\\"./IERC20.sol\\\"; */\\r\\n/* import \\\"./extensions/IERC20Metadata.sol\\\"; */\\r\\n/* import \\\"../../utils/Context.sol\\\"; */\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\n////// lib/openzeppelin-contracts/contracts/utils/Address.sol\\r\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\r\\n\\r\\n/* pragma solidity ^0.8.0; */\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n////// src/IUniswapV2Factory.sol\\r\\n/* pragma solidity 0.8.10; */\\r\\n/* pragma experimental ABIEncoderV2; */\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\n////// src/IUniswapV2Pair.sol\\r\\n/* pragma solidity 0.8.10; */\\r\\n/* pragma experimental ABIEncoderV2; */\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract CATPLUS is Ownable, IERC20 {\\r\\n    address UNISWAPROUTER = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address ZERO = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    string private _name = \\\"Capital Aggregator Token\\\";\\r\\n    string private _symbol = \\\"CAT+\\\";\\r\\n\\r\\n    uint256 public treasuryFeeBPS = 500;\\r\\n    uint256 public liquidityFeeBPS;\\r\\n    uint256 public dividendFeeBPS = 500;\\r\\n    uint256 public stakingFeeBPS;\\r\\n    uint256 public burnFeeBPS;\\r\\n    uint256 public totalFeeBPS = 1000;\\r\\n\\r\\n    uint256 public totalBuyTax = 1000; // 1000 = 10%\\r\\n    uint256 public totalSellTax = 1000; // 1000 = 10%\\r\\n\\r\\n    uint256 public swapTokensAtAmount = 100000 * (10**18);\\r\\n    uint256 public swapTokensAtAmountPlusOne = swapTokensAtAmount + 1;\\r\\n    uint256 public lastSwapTime;\\r\\n    bool swapAllToken = false;\\r\\n\\r\\n    bool public swapEnabled = false;\\r\\n    bool public taxEnabled = true;\\r\\n    bool public compoundingEnabled = false;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    bool private swapping;\\r\\n\\r\\n    address public treasuryWallet;\\r\\n    address public liquidityWallet;\\r\\n    address public stakingWallet;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n    mapping(address => bool) public isBlacklisted;\\r\\n    mapping(address => bool) proxyToApproved; // proxy allowance for interaction with future contract\\r\\n\\r\\n    DividendTracker public dividendTracker;\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    address public uniswapV2Pair;\\r\\n    uint256 public maxTxBPS = 10;       // 10 = 0.1%\\r\\n    uint256 public maxWalletBPS = 200;  // 200 = 2%\\r\\n    uint256 public maxTxAmount;\\r\\n    uint256 public maxWallet;    \\r\\n    bool isOpen = false;\\r\\n\\r\\n    mapping(address => bool) private _isExcludedFromFees;\\r\\n    mapping(address => bool) private _isExcludedFromMaxTx;\\r\\n    mapping(address => bool) private _isExcludedFromMaxWallet;\\r\\n    \\r\\n    constructor(address _treasuryWallet, address _liquidityWallet, address _stakingWallet) {\\r\\n        treasuryWallet = _treasuryWallet;\\r\\n        liquidityWallet = _liquidityWallet;\\r\\n        stakingWallet = _stakingWallet;\\r\\n\\r\\n        uniswapV2Router = IUniswapV2Router02(UNISWAPROUTER);\\r\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\\r\\n            .createPair(address(this), uniswapV2Router.WETH());\\r\\n\\r\\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\\r\\n\\r\\n        excludeFromFees(owner(), true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(_treasuryWallet, true);\\r\\n        excludeFromFees(_liquidityWallet, true);\\r\\n        excludeFromFees(stakingWallet, true);\\r\\n\\r\\n        excludeFromMaxTx(owner(), true);\\r\\n        excludeFromMaxTx(address(this), true);\\r\\n        excludeFromMaxTx(_treasuryWallet, true);\\r\\n        excludeFromMaxTx(_liquidityWallet, true);\\r\\n        excludeFromMaxTx(stakingWallet, true);\\r\\n\\r\\n        excludeFromMaxWallet(owner(), true);\\r\\n        excludeFromMaxWallet(address(this), true);\\r\\n        excludeFromMaxWallet(_treasuryWallet, true);\\r\\n        excludeFromMaxWallet(_liquidityWallet, true);\\r\\n        excludeFromMaxWallet(stakingWallet, true);\\r\\n\\r\\n        _totalSupply += 1000000000 * (10**18);\\r\\n        _balances[owner()] += 1000000000 * (10**18); \\r\\n\\r\\n        _setMaxTxAmount();\\r\\n        _setMaxWallet();\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        require(_allowances[_msgSender()][spender] >= subtractedValue, \\\"DECREASE_BELOW_ZERO\\\");\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        require(_allowances[sender][_msgSender()] >= amount, \\\"TRANSFER_EXCEEDS_BAL\\\");\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function openTrading() external onlyOwner {\\r\\n        isOpen = true;\\r\\n    }\\r\\n\\r\\n    function setDividendTracker(address payable _dividendTracker) external onlyOwner {\\r\\n        require(_dividendTracker != address(0), \\\"_dividendTracker == 0\\\");\\r\\n        require(_dividendTracker != address(dividendTracker), \\\"SAME_ADDRESS\\\");\\r\\n        dividendTracker = DividendTracker(_dividendTracker);\\r\\n\\r\\n        dividendTracker.excludeFromDividends(_dividendTracker, true);\\r\\n        dividendTracker.excludeFromDividends(address(this), true);\\r\\n        dividendTracker.excludeFromDividends(owner(), true);\\r\\n        dividendTracker.excludeFromDividends(address(uniswapV2Router), true);\\r\\n        dividendTracker.excludeFromDividends(uniswapV2Pair, true);\\r\\n\\r\\n        excludeFromFees(_dividendTracker, true);\\r\\n        excludeFromMaxTx(_dividendTracker, true);\\r\\n        excludeFromMaxWallet(_dividendTracker, true);\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(isOpen || sender == owner() || recipient == owner() ||\\r\\n            proxyToApproved[sender] || proxyToApproved[recipient], \\\"Not Open\\\");\\r\\n\\r\\n        require(!isBlacklisted[sender], \\\"CAT+: Sender is blacklisted\\\");\\r\\n        require(!isBlacklisted[recipient], \\\"CAT+: Recipient is blacklisted\\\");\\r\\n        require(sender != address(0), \\\"CAT+: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"CAT+: transfer to the zero address\\\");\\r\\n\\r\\n        require(amount <= maxTxAmount || _isExcludedFromMaxTx[sender], \\\"TX Limit Exceeded\\\");\\r\\n\\r\\n        if (sender != owner() && recipient != address(this) && recipient != address(DEAD) &&\\r\\n            recipient != uniswapV2Pair && !proxyToApproved[sender] && !proxyToApproved[recipient]) \\r\\n        {\\r\\n            uint256 currentBalance = balanceOf(recipient);\\r\\n            require(_isExcludedFromMaxWallet[recipient] || (currentBalance + amount <= maxWallet));\\r\\n        }\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"CAT+: transfer amount exceeds balance\\\");\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        uint256 contractNativeBalance = address(this).balance;\\r\\n\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\r\\n        if (\\r\\n            swapEnabled && // True\\r\\n            canSwap && // true\\r\\n            !swapping && // swapping=false !false true\\r\\n            !automatedMarketMakerPairs[sender] && // no swap on remove liquidity step 1 or DEX buy\\r\\n            sender != address(uniswapV2Router) && // no swap on remove liquidity step 2\\r\\n            sender != owner() &&\\r\\n            recipient != owner()\\r\\n        ) {\\r\\n            swapping = true;\\r\\n            contractTokenBalance = swapAllToken ? contractTokenBalance : swapTokensAtAmount;\\r\\n            _executeSwap(contractTokenBalance, contractNativeBalance);\\r\\n            lastSwapTime = block.timestamp;\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n        bool takeFee;\\r\\n\\r\\n        if (sender == address(uniswapV2Pair) || recipient == address(uniswapV2Pair)) {\\r\\n            takeFee = true;\\r\\n        }\\r\\n\\r\\n        if (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient] || swapping || !taxEnabled) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        if (takeFee) {\\r\\n            uint256 fees = amount * (sender == address(uniswapV2Pair) ? totalBuyTax : totalSellTax) / 10000;\\r\\n            amount -= fees;\\r\\n            _executeTransfer(sender, address(this), fees);\\r\\n        }\\r\\n\\r\\n        _executeTransfer(sender, recipient, amount);\\r\\n\\r\\n        dividendTracker.setBalance(payable(sender), balanceOf(sender));\\r\\n        dividendTracker.setBalance(payable(recipient), balanceOf(recipient));\\r\\n    }    \\r\\n\\r\\n    function massTransfer(address[] calldata recipients, uint256[] calldata amounts) external onlyOwner {\\r\\n        require(recipients.length == amounts.length, \\\"RECIPIENTS<>AMOUNTS\\\");\\r\\n        uint256 total;\\r\\n        for(uint256 x; x < recipients.length; x++) {\\r\\n            total += amounts[x];\\r\\n            _balances[recipients[x]] += amounts[x];\\r\\n            dividendTracker.setBalance(payable(recipients[x]), balanceOf(recipients[x]));\\r\\n        }\\r\\n        require(balanceOf(_msgSender()) >= total, \\\"INSUFFICIENT_BAL\\\");\\r\\n        _balances[_msgSender()] -= total;\\r\\n        dividendTracker.setBalance(payable(_msgSender()), balanceOf(_msgSender()));            \\r\\n    }\\r\\n\\r\\n    function _executeTransfer(address sender, address recipient, uint256 amount) private {\\r\\n        _balances[sender] -= amount;\\r\\n        _balances[recipient] += amount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"APPROVE_FROM_ZERO\\\");\\r\\n        require(spender != address(0), \\\"APPROVE_TO_ZERO\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) private {\\r\\n        require(account != address(0), \\\"BURN_FROM_ZERO\\\");\\r\\n        require(_balances[account] >= amount, \\\"BURN_EXCEEDS_BAL\\\");\\r\\n        _balances[account] -= amount;\\r\\n        _totalSupply -= amount;\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function swapTokensForNative(uint256 tokens) private {\\r\\n        if (tokens < 1) return;\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        _approve(address(this), address(uniswapV2Router), tokens);\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokens,\\r\\n            0, // accept any amount of native\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokens, uint256 native) private {\\r\\n        if (tokens < 1) return;\\r\\n        _approve(address(this), address(uniswapV2Router), tokens);\\r\\n        uniswapV2Router.addLiquidityETH{value: native}(\\r\\n            address(this),\\r\\n            tokens,\\r\\n            0, // slippage unavoidable\\r\\n            0, // slippage unavoidable\\r\\n            liquidityWallet,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _executeSwap(uint256 tokens, uint256 native) private {\\r\\n        if (tokens < 1) return;\\r\\n\\r\\n        uint256 swapTokensMarketing = address(treasuryWallet) != address(0)\\r\\n            ? (tokens * treasuryFeeBPS) / totalFeeBPS\\r\\n            : 0;\\r\\n\\r\\n        uint256 swapTokensDividends = dividendTracker.totalSupply() > 0\\r\\n            ? (tokens * dividendFeeBPS) / totalFeeBPS\\r\\n            : 0;\\r\\n\\r\\n        uint256 burnTokens = tokens * burnFeeBPS / totalFeeBPS;\\r\\n        if (burnTokens > 0) {\\r\\n            _executeTransfer(address(this), DEAD, burnTokens);\\r\\n        }\\r\\n\\r\\n        uint256 stakingTokens = address(stakingWallet) != address(0)\\r\\n            ? (tokens * stakingFeeBPS) / totalFeeBPS\\r\\n            : 0;\\r\\n        if (stakingTokens > 0) {\\r\\n            _executeTransfer(address(this), stakingWallet, stakingTokens);\\r\\n        }\\r\\n\\r\\n        uint256 tokensForLiquidity = tokens - swapTokensMarketing - swapTokensDividends - \\r\\n            burnTokens - stakingTokens;\\r\\n        uint256 swapTokensLiquidity = tokensForLiquidity / 2;\\r\\n        uint256 addTokensLiquidity = tokensForLiquidity - swapTokensLiquidity;\\r\\n        uint256 swapTokensTotal = swapTokensMarketing + swapTokensDividends + swapTokensLiquidity;\\r\\n\\r\\n        uint256 initNativeBal = address(this).balance;\\r\\n        swapTokensForNative(swapTokensTotal);\\r\\n        uint256 nativeSwapped = (address(this).balance - initNativeBal) + native;\\r\\n\\r\\n        uint256 nativeMarketing = (nativeSwapped * swapTokensMarketing) / swapTokensTotal;\\r\\n        uint256 nativeDividends = (nativeSwapped * swapTokensDividends) / swapTokensTotal;\\r\\n        uint256 nativeLiquidity = nativeSwapped - nativeMarketing - nativeDividends;\\r\\n\\r\\n        if (nativeMarketing > 0) {\\r\\n            payable(treasuryWallet).transfer(nativeMarketing);\\r\\n        }\\r\\n\\r\\n        addLiquidity(addTokensLiquidity, nativeLiquidity);\\r\\n        emit SwapAndAddLiquidity(swapTokensLiquidity, nativeLiquidity, addTokensLiquidity);\\r\\n\\r\\n        if (nativeDividends > 0) {\\r\\n            (bool success, ) = address(dividendTracker).call{value: nativeDividends}(\\\"\\\");\\r\\n            if (success) {\\r\\n                emit SendDividends(swapTokensDividends, nativeDividends);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool value) public onlyOwner {\\r\\n        _isExcludedFromFees[account] = value;\\r\\n        emit ExcludeFromFees(account, value);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFees(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function manualSendDividend(uint256 amount, address holder) external onlyOwner {\\r\\n        dividendTracker.manualSendDividend(amount, holder);\\r\\n    }\\r\\n\\r\\n    function excludeFromDividends(address account, bool excluded) external onlyOwner {\\r\\n        dividendTracker.excludeFromDividends(account, excluded);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromDividends(address account) external view returns (bool) {\\r\\n        return dividendTracker.isExcludedFromDividends(account);\\r\\n    }\\r\\n\\r\\n    function setWallet(address payable _treasuryWallet, address payable _liquidityWallet,\\r\\n        address payable _stakingWallet) external onlyOwner \\r\\n    {\\r\\n        treasuryWallet = _treasuryWallet;\\r\\n        liquidityWallet = _liquidityWallet;\\r\\n        stakingWallet = _stakingWallet;\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\\r\\n        require(pair != uniswapV2Pair, \\\"CANNOT_REMOVE_DEX_PAIR\\\");\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function setFees(uint256 _treasuryFee, uint256 _liquidityFee, uint256 _dividendFee, \\r\\n        uint256 _stakingFee, uint256 _burnFee) external onlyOwner \\r\\n    {\\r\\n        treasuryFeeBPS = _treasuryFee;\\r\\n        liquidityFeeBPS = _liquidityFee;\\r\\n        dividendFeeBPS = _dividendFee;\\r\\n        stakingFeeBPS = _stakingFee;\\r\\n        burnFeeBPS = _burnFee;\\r\\n        totalFeeBPS = _treasuryFee + _liquidityFee + _dividendFee + _stakingFee + _burnFee;\\r\\n    }\\r\\n\\r\\n    // 1000 = 10%\\r\\n    function setTaxes(uint256 _buyTax, uint256 _sellTax) external onlyOwner {\\r\\n        totalBuyTax = _buyTax;\\r\\n        totalSellTax = _sellTax;\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(automatedMarketMakerPairs[pair] != value, \\\"AMM_SET_TO_VALUE\\\");\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n        if (address(dividendTracker) != address(0) && value) {\\r\\n            dividendTracker.excludeFromDividends(pair, true);\\r\\n        }\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\\r\\n        require(newAddress != address(uniswapV2Router), \\\"ROUTER_IS_SET\\\");\\r\\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\r\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\r\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\\r\\n            .createPair(address(this), uniswapV2Router.WETH());\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        dividendTracker.processAccount(payable(_msgSender()));\\r\\n    }\\r\\n\\r\\n    function compound() external {\\r\\n        require(compoundingEnabled, \\\"COMPOUND_NOT_ENABLED\\\");\\r\\n        dividendTracker.compoundAccount(payable(_msgSender()));\\r\\n    }\\r\\n\\r\\n    function withdrawableDividendOf(address account) external view returns (uint256) {\\r\\n        return dividendTracker.withdrawableDividendOf(account);\\r\\n    }\\r\\n\\r\\n    function withdrawnDividendOf(address account) external view returns (uint256) {\\r\\n        return dividendTracker.withdrawnDividendOf(account);\\r\\n    }\\r\\n\\r\\n    function accumulativeDividendOf(address account) external view returns (uint256) {\\r\\n        return dividendTracker.accumulativeDividendOf(account);\\r\\n    }\\r\\n\\r\\n    function getAccountInfo(address account) external view returns (address, uint256, uint256, uint256, uint256) {\\r\\n        return dividendTracker.getAccountInfo(account);\\r\\n    }\\r\\n\\r\\n    function getLastClaimTime(address account) external view returns (uint256) {\\r\\n        return dividendTracker.getLastClaimTime(account);\\r\\n    }\\r\\n\\r\\n    function setSwapEnabled(bool _enabled) external onlyOwner {\\r\\n        swapEnabled = _enabled;\\r\\n        emit SwapEnabled(_enabled);\\r\\n    }\\r\\n\\r\\n    function setTaxEnabled(bool _enabled) external onlyOwner {\\r\\n        taxEnabled = _enabled;\\r\\n        emit TaxEnabled(_enabled);\\r\\n    }\\r\\n\\r\\n    function setCompoundingEnabled(bool _enabled) external onlyOwner {\\r\\n        compoundingEnabled = _enabled;\\r\\n        emit CompoundingEnabled(_enabled);\\r\\n    }\\r\\n\\r\\n    function updateDividendSettings(bool _swapEnabled, uint256 _swapTokensAtAmount, bool _swapAllToken) external onlyOwner {\\r\\n        swapEnabled = _swapEnabled;\\r\\n        swapTokensAtAmount = _swapTokensAtAmount;\\r\\n        swapTokensAtAmountPlusOne = swapTokensAtAmount + 1;\\r\\n        swapAllToken = _swapAllToken;\\r\\n    }\\r\\n\\r\\n    function _setMaxTxAmount() private {\\r\\n        maxTxAmount = (totalSupply() * maxTxBPS) / 10000;\\r\\n    }\\r\\n\\r\\n    function _setMaxWallet() private {\\r\\n        maxWallet = (totalSupply() * maxWalletBPS) / 10000; \\r\\n    }\\r\\n\\r\\n    function setMaxTxBPS(uint256 bps) external onlyOwner {\\r\\n        require(bps > 9 && bps < 10001, \\\"BPS_<10_OR_>10000\\\");\\r\\n        maxTxBPS = bps;\\r\\n        _setMaxTxAmount();\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxTx(address account, bool excluded) public onlyOwner {\\r\\n        _isExcludedFromMaxTx[account] = excluded;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromMaxTx(address account) public view returns (bool) {\\r\\n        return _isExcludedFromMaxTx[account];\\r\\n    }\\r\\n\\r\\n    function setMaxWalletBPS(uint256 bps) external onlyOwner {\\r\\n        require(bps > 9 && bps < 10001, \\\"BPS_<10_OR_>10000\\\");\\r\\n        maxWalletBPS = bps;\\r\\n        _setMaxWallet();\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxWallet(address account, bool excluded) public onlyOwner {\\r\\n        _isExcludedFromMaxWallet[account] = excluded;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromMaxWallet(address account) external view returns (bool)     {\\r\\n        return _isExcludedFromMaxWallet[account];\\r\\n    }\\r\\n\\r\\n    function recoverToken(address _token, uint256 _amount) external {\\r\\n        IERC20(_token).transfer(treasuryWallet, _amount);\\r\\n    }\\r\\n\\r\\n    function recoverETH(uint256 _amount) external {\\r\\n        (bool sent, bytes memory data) = treasuryWallet.call{value: _amount}(\\\"\\\");\\r\\n        require(sent, \\\"FAILED_TO_SEND\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawCATToTreasury(uint256 _amount) external {\\r\\n        transfer(treasuryWallet, _amount);\\r\\n    }\\r\\n\\r\\n    // _amount is CAT tokens\\r\\n    function withdrawETHToTreasury(uint256 _amount) external {\\r\\n        require(balanceOf(address(this)) >= _amount, \\\"AMOUNT_TOO_BIG\\\");\\r\\n        uint256 bal = address(this).balance;\\r\\n        swapTokensForNative(_amount);\\r\\n        (bool sent, bytes memory data) = treasuryWallet.call{value: address(this).balance - bal}(\\\"\\\");\\r\\n        require(sent, \\\"FAILED_TO_SEND\\\");\\r\\n    }\\r\\n\\r\\n    function toggleBlackList(address _user) external onlyOwner {\\r\\n        isBlacklisted[_user] = !isBlacklisted[_user];\\r\\n    }\\r\\n\\r\\n    function toggleBlackListMany(address[] memory _users) external onlyOwner {\\r\\n        for (uint8 i; i < _users.length; i++) {\\r\\n            isBlacklisted[_users[i]] = isBlacklisted[_users[i]];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setProxy(address proxy, bool value) external onlyOwner {\\r\\n        proxyToApproved[proxy] = value;\\r\\n    }    \\r\\n\\r\\n    event SwapAndAddLiquidity(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 nativeReceived,\\r\\n        uint256 tokensIntoLiquidity\\r\\n    );\\r\\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n    event UpdateUniswapV2Router(\\r\\n        address indexed newAddress,\\r\\n        address indexed oldAddress\\r\\n    );\\r\\n    event SwapEnabled(bool enabled);\\r\\n    event TaxEnabled(bool enabled);\\r\\n    event CompoundingEnabled(bool enabled);\\r\\n    event BlacklistEnabled(bool enabled);    \\r\\n}\\r\\n\\r\\ncontract DividendTracker is Ownable, IERC20 {\\r\\n    address UNISWAPROUTER;\\r\\n\\r\\n    string private _name = \\\"CAT_DividendTracker\\\";\\r\\n    string private _symbol = \\\"CAT_DividendTracker\\\";\\r\\n\\r\\n    uint256 public lastProcessedIndex;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    uint256 private constant magnitude = 2**128;\\r\\n    uint256 public immutable minTokenBalanceForDividends;\\r\\n    uint256 private magnifiedDividendPerShare;\\r\\n    uint256 public totalDividendsDistributed;\\r\\n    uint256 public totalDividendsWithdrawn;\\r\\n\\r\\n    address public tokenAddress;\\r\\n\\r\\n    mapping(address => bool) public excludedFromDividends;\\r\\n    mapping(address => int256) private magnifiedDividendCorrections;\\r\\n    mapping(address => uint256) private withdrawnDividends;\\r\\n    mapping(address => uint256) private lastClaimTimes;\\r\\n\\r\\n    mapping(address => bool) proxyToApproved; // proxy allowance for interaction with future contract\\r\\n\\r\\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\\r\\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\\r\\n    event ExcludeFromDividends(address indexed account, bool excluded);\\r\\n    event Claim(address indexed account, uint256 amount);\\r\\n    event Compound(address indexed account, uint256 amount, uint256 tokens);\\r\\n\\r\\n    struct AccountInfo {\\r\\n        address account;\\r\\n        uint256 withdrawableDividends;\\r\\n        uint256 totalDividends;\\r\\n        uint256 lastClaimTime;\\r\\n    }\\r\\n\\r\\n    constructor(address _tokenAddress, address _uniswapRouter) {\\r\\n        minTokenBalanceForDividends = 1 * (10**18);\\r\\n        tokenAddress = _tokenAddress;\\r\\n        UNISWAPROUTER = _uniswapRouter;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        distributeDividends();\\r\\n    }\\r\\n\\r\\n    function distributeDividends() public payable {\\r\\n        require(_totalSupply > 0, \\\"TOTAL_SUPPLY_ZERO\\\");\\r\\n        if (msg.value > 0) {\\r\\n            magnifiedDividendPerShare += ((msg.value * magnitude) / _totalSupply);\\r\\n            emit DividendsDistributed(msg.sender, msg.value);\\r\\n            totalDividendsDistributed += msg.value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBalance(address payable account, uint256 newBalance) external onlyApproved {\\r\\n        if (excludedFromDividends[account]) return;\\r\\n        _setBalance(account, newBalance >= minTokenBalanceForDividends ? newBalance : 0);\\r\\n    }\\r\\n\\r\\n    function excludeFromDividends(address account, bool excluded) external onlyApproved {\\r\\n        require(excludedFromDividends[account] != excluded, \\\"CATDT_STATE_SET\\\");\\r\\n        excludedFromDividends[account] = excluded;\\r\\n        if (excluded) {\\r\\n            _setBalance(account, 0);\\r\\n        } else {\\r\\n            uint256 newBalance = IERC20(tokenAddress).balanceOf(account);\\r\\n            _setBalance(account, newBalance >= minTokenBalanceForDividends ? newBalance : 0);\\r\\n        }\\r\\n        emit ExcludeFromDividends(account, excluded);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromDividends(address account) public view returns (bool) {\\r\\n        return excludedFromDividends[account];\\r\\n    }\\r\\n\\r\\n    function manualSendDividend(uint256 amount, address holder) external onlyApproved {\\r\\n        uint256 contractETHBalance = address(this).balance;\\r\\n        payable(holder).transfer(amount > 0 ? amount : contractETHBalance);\\r\\n    }\\r\\n\\r\\n    function _setBalance(address account, uint256 newBalance) internal {\\r\\n        uint256 currentBalance = _balances[account];\\r\\n        if (newBalance > currentBalance) {\\r\\n            _mint(account, newBalance - currentBalance);\\r\\n        } else if (newBalance < currentBalance) {\\r\\n            _burn(account, currentBalance - newBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) private {\\r\\n        require(account != address(0), \\\"CATDT_MINT_TO_ZERO\\\");\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n        magnifiedDividendCorrections[account] -= int256(magnifiedDividendPerShare * amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) private {\\r\\n        require(account != address(0), \\\"CATDT_BURN_FROM_ZERO\\\");\\r\\n        require(_balances[account] >= amount, \\\"CATDT_BURN_EXCEEDS_BAL\\\");\\r\\n        _balances[account] -= amount;\\r\\n        _totalSupply -= amount;\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        magnifiedDividendCorrections[account] += int256(magnifiedDividendPerShare * amount);\\r\\n    }\\r\\n\\r\\n    function processAccount(address payable account) public onlyApproved returns (bool) {\\r\\n        uint256 amount = _withdrawDividendOfUser(account);\\r\\n        if (amount > 0) {\\r\\n            lastClaimTimes[account] = block.timestamp;\\r\\n            emit Claim(account, amount);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function _withdrawDividendOfUser(address payable account) private returns (uint256) {\\r\\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\\r\\n        if (_withdrawableDividend > 0) {\\r\\n            withdrawnDividends[account] += _withdrawableDividend;\\r\\n            totalDividendsWithdrawn += _withdrawableDividend;\\r\\n            emit DividendWithdrawn(account, _withdrawableDividend);\\r\\n            (bool success, ) = account.call{value: _withdrawableDividend, gas: 3000}(\\\"\\\");\\r\\n            if (!success) {\\r\\n                withdrawnDividends[account] -= _withdrawableDividend;\\r\\n                totalDividendsWithdrawn -= _withdrawableDividend;\\r\\n                return 0;\\r\\n            }\\r\\n            return _withdrawableDividend;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function compoundAccount(address payable account) public onlyApproved returns (bool) {\\r\\n        (uint256 amount, uint256 tokens) = _compoundDividendOfUser(account);\\r\\n        if (amount > 0) {\\r\\n            lastClaimTimes[account] = block.timestamp;\\r\\n            emit Compound(account, amount, tokens);\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function _compoundDividendOfUser(address payable account) private returns (uint256, uint256) {\\r\\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\\r\\n        if (_withdrawableDividend > 0) {\\r\\n            withdrawnDividends[account] += _withdrawableDividend;\\r\\n            totalDividendsWithdrawn += _withdrawableDividend;\\r\\n            emit DividendWithdrawn(account, _withdrawableDividend);\\r\\n\\r\\n            IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(UNISWAPROUTER);\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = uniswapV2Router.WETH();\\r\\n            path[1] = address(tokenAddress);\\r\\n\\r\\n            bool success;\\r\\n            uint256 tokens;\\r\\n\\r\\n            uint256 initTokenBal = IERC20(tokenAddress).balanceOf(account);\\r\\n            try\\r\\n                uniswapV2Router\\r\\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n                    value: _withdrawableDividend\\r\\n                }(0, path, address(account), block.timestamp)\\r\\n            {\\r\\n                success = true;\\r\\n                tokens = IERC20(tokenAddress).balanceOf(account) - initTokenBal;\\r\\n            } catch Error(\\r\\n                string memory /*err*/\\r\\n            ) {\\r\\n                success = false;\\r\\n            }\\r\\n\\r\\n            if (!success) {\\r\\n                withdrawnDividends[account] -= _withdrawableDividend;\\r\\n                totalDividendsWithdrawn -= _withdrawableDividend;\\r\\n                return (0, 0);\\r\\n            }\\r\\n\\r\\n            return (_withdrawableDividend, tokens);\\r\\n        }\\r\\n        return (0, 0);\\r\\n    }\\r\\n\\r\\n    function withdrawableDividendOf(address account) public view returns (uint256) {\\r\\n        return accumulativeDividendOf(account) - withdrawnDividends[account];\\r\\n    }\\r\\n\\r\\n    function withdrawnDividendOf(address account) public view returns (uint256) {\\r\\n        return withdrawnDividends[account];\\r\\n    }\\r\\n\\r\\n    function accumulativeDividendOf(address account) public view returns (uint256) {\\r\\n        int256 a = int256(magnifiedDividendPerShare * balanceOf(account));\\r\\n        int256 b = magnifiedDividendCorrections[account]; // this is an explicit int256 (signed)\\r\\n        return uint256(a + b) / magnitude;\\r\\n    }\\r\\n\\r\\n    function getAccountInfo(address account) public view returns (address, uint256, uint256, uint256, uint256) {\\r\\n        AccountInfo memory info;\\r\\n        info.account = account;\\r\\n        info.withdrawableDividends = withdrawableDividendOf(account);\\r\\n        info.totalDividends = accumulativeDividendOf(account);\\r\\n        info.lastClaimTime = lastClaimTimes[account];\\r\\n        return (\\r\\n            info.account,\\r\\n            info.withdrawableDividends,\\r\\n            info.totalDividends,\\r\\n            info.lastClaimTime,\\r\\n            totalDividendsWithdrawn\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getLastClaimTime(address account) public view returns (uint256) {\\r\\n        return lastClaimTimes[account];\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address, uint256) public pure override returns (bool) {\\r\\n        revert(\\\"CATDT_NOT_IMPLEMENTED\\\");\\r\\n    }\\r\\n\\r\\n    function allowance(address, address) public pure override returns (uint256) {\\r\\n        revert(\\\"CATDT_NOT_IMPLEMENTED\\\");\\r\\n    }\\r\\n\\r\\n    function approve(address, uint256) public pure override returns (bool) {\\r\\n        revert(\\\"CATDT_NOT_IMPLEMENTED\\\");\\r\\n    }\\r\\n\\r\\n    function transferFrom(address, address, uint256) public pure override returns (bool) {}\\r\\n\\r\\n    function setProxy(address proxy, bool value) external onlyOwner {\\r\\n        proxyToApproved[proxy] = value;\\r\\n    }\\r\\n\\r\\n    modifier onlyApproved() {\\r\\n        require(proxyToApproved[msg.sender] || msg.sender == owner() || \\r\\n            msg.sender == tokenAddress, \\\"NOT_AUTHORIZED\\\");\\r\\n        _;\\r\\n    }    \\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BlacklistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CompoundingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndAddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TaxEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"manualSendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"massTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCompoundingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dividendTracker\",\"type\":\"address\"}],\"name\":\"setDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setMaxTxBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_stakingWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmountPlusOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"toggleBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"toggleBlackListMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_swapAllToken\",\"type\":\"bool\"}],\"name\":\"updateDividendSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCATToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETHToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CATPLUS", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fcc257b471a66577f1d24a28574c25d2f79a016b000000000000000000000000fcc257b471a66577f1d24a28574c25d2f79a016b000000000000000000000000fcc257b471a66577f1d24a28574c25d2f79a016b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}