{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts_cart/CartCorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./CartPoolBase.sol\\\";\\nimport \\\"./interfaces/IFactory.sol\\\";\\n\\n/**\\n * @title CART Core Pool\\n *\\n * @notice Core pools represent permanent pools like CART or CART/ETH Pair pool,\\n *      core pools allow staking for arbitrary periods of time up to 1 year\\n *\\n * @dev See CartPoolBase for more details\\n *\\n */\\ncontract CartCorePool is CartPoolBase {\\n    /// @dev Flag indicating pool type, false means \\\"core pool\\\"\\n    bool public constant override isFlashPool = false;\\n\\n    /// @dev Pool tokens value available in the pool;\\n    ///      pool token examples are CART (CART core pool) or CART/ETH pair (LP core pool)\\n    /// @dev For LP core pool\\n    ///      while for CART core pool it does count for such tokens as well\\n    uint256 public poolTokenReserve;\\n\\n    /**\\n     * @dev Creates/deploys an instance of the core pool\\n     *\\n     * @param _cart CART ERC20 Token IlluviumERC20 address\\n     * @param _factory Pool factory CartPoolFactory address\\n     * @param _poolToken token the pool operates on, for example CART or CART/ETH pair\\n     * @param _weight number representing a weight of the pool, actual weight fraction\\n     *      is calculated as that number divided by the total pools weight and doesn't exceed one\\n     */\\n    constructor(\\n        address _cart,\\n        address _factory,\\n        address _poolToken,\\n        uint256 _weight\\n    ) CartPoolBase(_cart, _factory, _poolToken, _weight) {}\\n\\n    /**\\n     * @notice Service function to calculate\\n     *\\n     * @dev Internally executes similar function `_processRewards` from the parent smart contract\\n     *      to calculate and pay yield rewards\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      executed by deposit holder and when at least one block passes from the\\n     *      previous reward processing\\n     * @dev Executed internally when \\\"staking as a pool\\\" (`stakeAsPool`)\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end block), function doesn't throw and exits silently\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     */\\n    function processRewards() external override nonReentrant{\\n        _processRewards(msg.sender, true);\\n        User storage user = users[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Executed internally by the pool itself (from the parent `CartPoolBase` smart contract)\\n     *      as part of yield rewards processing logic (`CartPoolBase._processRewards` function)\\n     *\\n     * @dev Because the reward in all pools should be regarded as a yield staking in CART token pool\\n     *      thus this function can only be excecuted within CART token pool\\n     *\\n     * @param _staker an address which stakes (the yield reward)\\n     * @param _amount amount to be staked (yield reward amount)\\n     */\\n    function stakeAsPool(address _staker, uint256 _amount) external {\\n        require(IFactory(factory).isPoolExists(msg.sender), \\\"access denied\\\");\\n        require(poolToken == CART, \\\"not CART token pool\\\");\\n\\n        _sync();\\n        User storage user = users[_staker];\\n        if (user.tokenAmount > 0) {\\n            _processRewards(_staker, false);\\n        }\\n        // if length of deposits is zero, then push zero value of unlocked deposit\\n        if (user.deposits.length == 0) {\\n            // create zero value of unlocked deposit and save the deposit (append it to deposits array)\\n            Deposit memory unlockedDeposit =\\n                Deposit({\\n                    tokenAmount: 0,\\n                    weight: 0,\\n                    lockedFrom: 0,\\n                    lockedUntil: 0,\\n                    isYield: false\\n                });\\n            user.deposits.push(unlockedDeposit);\\n        }\\n        // staking for a year, stakeWeight should be 2\\n        uint256 depositWeight = _amount * 2 * weightMultiplier;\\n        Deposit memory newDeposit =\\n            Deposit({\\n                tokenAmount: _amount,\\n                lockedFrom: uint64(now256()),\\n                lockedUntil: uint64(now256() + 365 days),\\n                weight: depositWeight,\\n                isYield: true\\n            });\\n        user.tokenAmount += _amount;\\n        user.rewardAmount += _amount;\\n        user.totalWeight += depositWeight;\\n        user.deposits.push(newDeposit);\\n\\n        usersLockingWeight += depositWeight;\\n\\n        user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n\\n        // update `poolTokenReserve` only if this is a LP Core Pool (stakeAsPool can be executed only for LP pool)\\n        poolTokenReserve += _amount;\\n    }\\n    \\n    /**\\n     * @inheritdoc CartPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract\\n     *      and updates (increases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _stake(\\n        address _staker,\\n        uint256 _amount,\\n        uint64 _lockPeriod,\\n        address _nftAddress,\\n        uint256 _nftTokenId\\n    ) internal override {\\n        super._stake(_staker, _amount, _lockPeriod, _nftAddress, _nftTokenId);\\n        User storage user = users[_staker];\\n\\n        poolTokenReserve += _amount;\\n    }\\n\\n    /**\\n     * @inheritdoc CartPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract\\n     *      and updates (decreases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _unstake(\\n        address _staker,\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) internal override {\\n        User storage user = users[_staker];\\n        Deposit memory stakeDeposit = user.deposits[_depositId];\\n        require(stakeDeposit.lockedFrom == 0 || now256() > stakeDeposit.lockedUntil, \\\"deposit not yet unlocked\\\");\\n        poolTokenReserve -= _amount;\\n        super._unstake(_staker, _depositId, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc CartPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract\\n     *      and updates (decreases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _emergencyWithdraw(\\n        address _staker\\n    ) internal override {\\n        User storage user = users[_staker];\\n        uint256 amount = user.tokenAmount;\\n\\n        poolTokenReserve -= amount;\\n        super._emergencyWithdraw(_staker);\\n    }\\n\\n    /**\\n     * @inheritdoc CartPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract\\n     *      and for CART pool updates (increases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _processRewards(\\n        address _staker,\\n        bool _withUpdate\\n    ) internal override returns (uint256 pendingYield) {\\n        pendingYield = super._processRewards(_staker, _withUpdate);\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransfer on a CART token\\n     *\\n     */\\n    function transferCartToken(address _to, uint256 _value) internal {\\n        // just delegate call to the target\\n        SafeERC20.safeTransfer(IERC20(CART), _to, _value);\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransferFrom on a CART token\\n     *\\n     */\\n    function transferCartTokenFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        // just delegate call to the target\\n        SafeERC20.safeTransferFrom(IERC20(CART), _from, _to, _value);\\n    }\\n}\"\r\n    },\r\n    \"contracts_cart/CartPoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/ICorePool.sol\\\";\\nimport \\\"./interfaces/ITokenRecipient.sol\\\";\\nimport \\\"./interfaces/IFactory.sol\\\";\\n\\n/**\\n * @title Cart Pool Base\\n *\\n * @notice An abstract contract containing common logic for a core pool (permanent pool like CART/ETH or CART pool)\\n *\\n * @dev Deployment and initialization.\\n *      Any pool deployed must be bound to the deployed pool factory (CartPoolFactory)\\n *      Additionally, 3 token instance addresses must be defined on deployment:\\n *          - CART token address\\n *          - pool token address, it can be CART token address, CART/ETH pair address, and others\\n *\\n * @dev Pool weight defines the fraction of the yield current pool receives among the other pools,\\n *      pool factory is responsible for the weight synchronization between the pools.\\n * @dev The weight is logically 20% for CART pool and 80% for CART/ETH pool.\\n *      Since Solidity doesn't support fractions the weight is defined by the division of\\n *      pool weight by total pools weight (sum of all registered pools within the factory)\\n * @dev For CART Pool we use 200 as weight and for CART/ETH pool - 800.\\n *\\n */\\nabstract contract CartPoolBase is IPool, ReentrancyGuard, ITokenRecipient {\\n    \\n    /// @dev Link to CART STREET ERC20 Token instance\\n    address public immutable override CART;\\n\\n    /// @dev Token holder storage, maps token holder address to their data record\\n    mapping(address => User) public users;\\n\\n    /// @dev Link to the pool factory CartPoolFactory addresss\\n    address public immutable factory;\\n\\n    /// @dev Link to the pool token instance, for example CART or CART/ETH pair\\n    address public immutable override poolToken;\\n\\n    /// @dev Pool weight, 200 for CART pool or 800 for CART/ETH\\n    uint256 public override weight;\\n\\n    /// @dev Block number of the last yield distribution event\\n    uint256 public override lastYieldDistribution;\\n\\n    /// @dev Used to calculate yield rewards\\n    /// @dev This value is different from \\\"reward per token\\\" used in locked pool\\n    /// @dev Note: stakes are different in duration and \\\"weight\\\" reflects that\\n    uint256 public override yieldRewardsPerWeight;\\n\\n    /// @dev Used to calculate yield rewards, keeps track of the tokens weight locked in staking\\n    uint256 public override usersLockingWeight;\\n\\n    /// @dev Support for specified NFT whitelist address, True representing this NFT can be staked\\n    mapping(address => uint256) public supportNTF;\\n\\n    /**\\n     * @dev Stake weight is proportional to deposit amount and time locked, precisely\\n     *      \\\"deposit amount wei multiplied by (fraction of the year locked plus one)\\\"\\n     * @dev To avoid significant precision loss due to multiplication by \\\"fraction of the year\\\" [0, 1],\\n     *      weight is stored multiplied by 1e24 constant, as an integer\\n     * @dev Corner case 1: if time locked is zero, weight is deposit amount multiplied by 1e24\\n     * @dev Corner case 2: if time locked is one year, fraction of the year locked is one, and\\n     *      weight is a deposit amount multiplied by 2 * 1e24\\n     */\\n    uint256 public weightMultiplier;\\n\\n    /**\\n     * @dev Rewards per weight are stored multiplied by 1e48, as integers.\\n     */\\n    uint256 internal constant REWARD_PER_WEIGHT_MULTIPLIER = 1e48;\\n\\n    /**\\n     * @dev We want to get deposits batched but not one by one, thus here is define the size of each batch.\\n     */\\n    uint256 internal constant DEPOSIT_BATCH_SIZE  = 20;\\n\\n    /**\\n     * @dev Fired in _stake() and stake()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param _from token holder address, the tokens will be returned to that address\\n     * @param amount amount of tokens staked\\n     */\\n    event Staked(address indexed _by, address indexed _from, uint256 amount);\\n\\n\\n    /**\\n     * @dev Fired in _unstake() and unstake()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param _to an address which received the unstaked tokens, usually token holder\\n     * @param amount amount of tokens unstaked\\n     */\\n    event Unstaked(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _sync(), sync() and dependent functions (stake, unstake, etc.)\\n     *\\n     * @param _by an address which performed an operation\\n     * @param yieldRewardsPerWeight updated yield rewards per weight value\\n     * @param lastYieldDistribution usually, current block number\\n     */\\n    event Synchronized(address indexed _by, uint256 yieldRewardsPerWeight, uint256 lastYieldDistribution);\\n\\n    /**\\n     * @dev Fired in _processRewards(), processRewards() and dependent functions (stake, unstake, etc.)\\n     *\\n     * @param _by an address which performed an operation\\n     * @param _to an address which claimed the yield reward\\n     * @param amount amount of yield paid\\n     */\\n    event YieldClaimed(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in setWeight()\\n     *\\n     * @param _fromVal old pool weight value\\n     * @param _toVal new pool weight value\\n     */\\n    event PoolWeightUpdated(uint256 _fromVal, uint256 _toVal);\\n\\n    /**\\n     * @dev Fired in _emergencyWithdraw()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param amount amount of tokens withdraw\\n     */\\n    event EmergencyWithdraw(address indexed _by, uint256 amount);\\n\\n    /**\\n     * @dev Overridden in sub-contracts to construct the pool\\n     *\\n     * @param _cart CART ERC20 Token IlluviumERC20 address\\n     * @param _factory Pool factory CartPoolFactory address\\n     * @param _poolToken token the pool operates on, for example CART or CART/ETH pair\\n     * @param _weight number representing a weight of the pool, actual weight fraction\\n     *      is calculated as that number divided by the total pools weight and doesn't exceed one\\n     */\\n    constructor(\\n        address _cart,\\n        address _factory,\\n        address _poolToken,\\n        uint256 _weight\\n    ) {\\n        // verify the inputs are set\\n        require(_cart != address(0), \\\"cart token address not set\\\");\\n        require(_factory != address(0), \\\"CART Pool fct address not set\\\");\\n        require(_poolToken != address(0), \\\"pool token address not set\\\");\\n        require(_weight > 0, \\\"pool weight not set\\\");\\n\\n        // verify CartPoolFactory instance supplied\\n        require(\\n            IFactory(_factory).FACTORY_UID() == 0xb77099a6d99df5887a6108e413b3c6dfe0c11a1583c9d9b3cd08bfb8ca996aef,\\n            \\\"unexpected FACTORY_UID\\\"\\n        );\\n\\n        // save the inputs into internal state variables\\n        CART = _cart;\\n        factory = _factory;\\n        poolToken = _poolToken;\\n        weight = _weight;\\n        weightMultiplier = 1e24;\\n    }\\n\\n    /**\\n     * @notice Returns total staked token balance for the given address\\n     *\\n     * @param _user an address to query balance for\\n     * @return total staked token balance\\n     */\\n    function balanceOf(address _user) external view override returns (uint256) {\\n        // read specified user token amount and return\\n        return users[_user].tokenAmount;\\n    }\\n\\n    /**\\n     * @notice Returns origin information on the given deposit for the given address\\n     *\\n     * @dev See getDepositsLength\\n     *\\n     * @param _user an address to query deposit for\\n     * @param _depositId zero-indexed deposit ID for the address specified\\n     * @return deposit info as Deposit structure\\n     */\\n    function getOriginDeposit(address _user, uint256 _depositId) external view override returns (Deposit memory) {\\n        // read deposit at specified index and return\\n        return users[_user].deposits[_depositId];\\n    } \\n\\n    /**\\n     * @notice Returns number of deposits for the given address. Allows iteration over deposits.\\n     *\\n     * @dev See getDeposit\\n     *\\n     * @param _user an address to query deposit length for\\n     * @return number of deposits for the given address\\n     */\\n    function getDepositsLength(address _user) external view override returns (uint256) {\\n        // read deposits array length and return\\n        return users[_user].deposits.length;\\n    }\\n    \\n    /**\\n     * @notice Returns weight of NFT\\n     *\\n     * @param _nftAddress an address to query weight of NFT\\n     * @return weight of NFT\\n     */\\n    function getNFTWeight(address _nftAddress) external view returns (uint256) {\\n        // return weight of NFT\\n        return supportNTF[_nftAddress];\\n    }\\n\\n    /**\\n     * @notice Returns structure of user\\n     *\\n     * @param _user an address to query deposit length for\\n     * @return user data structure\\n     */\\n    function getUser(address _user) external view returns (User memory) {\\n        return users[_user];\\n    }\\n\\n    /**\\n     * @notice TokenRecipient. if got cart tokens, it will receive and stake.\\n     *\\n     * @param _staker an address which stakes tokens and which will receive them back\\n     * @param _amount amount of tokens to stake\\n     * @param _data include stake period, NFT address, NFT Token ID.\\n     */\\n    function tokensReceived(address _staker, uint _amount, bytes calldata _data) external override nonReentrant returns (bool) {\\n        require(msg.sender == CART, \\\"must from cart\\\");\\n        require(_data.length == 60, \\\"length of bytes error\\\");\\n\\n        // stake period as unix timestamp; zero means no locking\\n        uint64 _lockPeriod = uint64(toUint(_data, 0));\\n        address _nftAddress = address(toBytes20(_data, 20));\\n        uint _nftTokenId = toUint(_data, 40);\\n    \\n        _stake(_staker, _amount, _lockPeriod, _nftAddress, _nftTokenId);\\n        return true;\\n    }\\n    \\n    /**\\n     * @notice to 20 bytes\\n     *\\n     * @param _b bytes \\n     * @param _offset initial position to processing\\n     */\\n    function toBytes20(bytes memory _b, uint _offset) private pure returns (bytes20) {\\n        bytes20 out;\\n        for (uint i = 0; i < 20; i++) {\\n        out |= bytes20(_b[_offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n\\n    /**\\n     * @notice bytes to uint\\n     *\\n     * @param _b bytes \\n     * @param _offset initial position to processing\\n     */\\n    function toUint(bytes memory _b, uint _offset) private pure returns (uint) {\\n        uint out;\\n        for(uint i = 0; i < 20; i++){\\n        out = out + uint8(_b[_offset + i])*(2**(8*(20-(i+1))));\\n        }\\n        return out;\\n    }\\n\\n    /**\\n     * @notice Stakes specified amount of tokens for the specified amount of time,\\n     *      and pays pending yield rewards if any\\n     *\\n     * @dev Requires amount to stake to be greater than zero\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     * @param _amount amount of tokens to stake\\n     * @param _lockPeriod stake period as unix timestamp; zero means no locking\\n     * @param _nftAddress supported nft address\\n     * @param _nftTokenId users hold nft tokenId\\n     */\\n    function stake (\\n        uint256 _amount,\\n        uint64 _lockPeriod,\\n        address _nftAddress,\\n        uint256 _nftTokenId\\n    ) external override nonReentrant {\\n        // transfer `_amount`\\n        transferPoolTokenFrom(msg.sender, address(this), _amount);\\n        // delegate call to an internal function\\n        _stake(msg.sender, _amount, _lockPeriod, _nftAddress, _nftTokenId);\\n    }\\n\\n    /**\\n     * @notice Unstakes specified amount of tokens, and pays pending yield rewards if any\\n     *\\n     * @dev Requires amount to unstake to be greater than zero\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     * @param _depositId deposit ID to unstake from, zero-indexed\\n     * @param _amount amount of tokens to unstake\\n     */\\n    function unstake(\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        // delegate call to an internal function\\n        _unstake(msg.sender, _depositId, _amount);\\n    }\\n\\n    /**\\n     * @notice Service function to synchronize pool state with current time\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      at least one block passes between synchronizations\\n     * @dev Executed internally when staking, unstaking, processing rewards in order\\n     *      for calculations to be correct and to reflect state progress of the contract\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end block), function doesn't throw and exits silently\\n     */\\n    function sync() external override {\\n        // delegate call to an internal function\\n        _sync();\\n    }\\n\\n    /**\\n     * @notice Service function to calculate and pay pending yield rewards to the sender\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      executed by deposit holder and when at least one block passes from the\\n     *      previous reward processing\\n     * @dev Executed internally when staking and unstaking, executes sync() under the hood\\n     *      before making further calculations and payouts\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end block), function doesn't throw and exits silently\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     */\\n    function processRewards() external virtual override nonReentrant {\\n        // delegate call to an internal function\\n        _processRewards(msg.sender, true);\\n    }\\n\\n    /**\\n     * @dev Executed by the factory to modify pool weight; the factory is expected\\n     *      to keep track of the total pools weight when updating\\n     *\\n     * @dev Set weight to zero to disable the pool\\n     *\\n     * @param _weight new weight to set for the pool\\n     */\\n    function setWeight(uint256 _weight) external override {\\n        // verify function is executed by the factory\\n        require(msg.sender == factory, \\\"access denied\\\");\\n\\n        // emit an event logging old and new weight values\\n        emit PoolWeightUpdated(weight, _weight);\\n\\n        // set the new weight value\\n        weight = _weight;\\n    }\\n\\n    /**\\n     * @dev Executed by the factory to modify NFTWeight\\n     *\\n     * @dev Set new weight to the NFT address\\n     *\\n     * @param _nftAddress address of NFT\\n     * @param _nftWeight weight of NFT\\n     */\\n    function NFTWeightUpdated(address _nftAddress, uint256 _nftWeight) external {\\n        // verify function is executed by the factory\\n        require(msg.sender == factory, \\\"access denied\\\");\\n        // set new weight of NFT\\n        supportNTF[_nftAddress] = _nftWeight;\\n    }\\n\\n    /**\\n     * @dev Executed by the factory to modify weightMultiplier\\n     *\\n     * @dev Set new weight to weightMultiplier\\n     *\\n     * @param _newWeightMultiplier new weightMultiplier\\n     */\\n    function setWeightMultiplierbyFactory(uint256 _newWeightMultiplier) external {\\n        // verify function is executed by the factory\\n        require(msg.sender == factory, \\\"access denied\\\");\\n        // set the new weight multiplier\\n        weightMultiplier = _newWeightMultiplier;\\n    }\\n\\n    /**\\n     * @dev Similar to public pendingYieldRewards, but performs calculations based on\\n     *      current smart contract state only, not taking into account any additional\\n     *      time/blocks which might have passed\\n     *\\n     * @param _staker an address to calculate yield rewards value for\\n     * @return pending calculated yield reward value for the given address\\n     */\\n    function _pendingYieldRewards(address _staker) internal view returns (uint256 pending) {\\n        // read user data structure into memory\\n        User memory user = users[_staker];\\n\\n        // and perform the calculation using the values read\\n        return weightToReward(user.totalWeight, yieldRewardsPerWeight) - user.subYieldRewards;\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see stake()\\n     *\\n     * @param _staker an address which stakes tokens and which will receive them back\\n     * @param _amount amount of tokens to stake\\n     * @param _lockPeriod stake period as unix timestamp; zero means no locking \\n     * @param _nftAddress supported nft address, zero means no NFT token\\n     * @param _nftTokenId users hold nft tokenId, zero means no NFT token\\n     */\\n    function _stake(\\n        address _staker,\\n        uint256 _amount,\\n        uint64 _lockPeriod,\\n        address _nftAddress,\\n        uint256 _nftTokenId\\n    ) internal virtual {\\n        // validate the inputs\\n\\n        require(_amount > 0, \\\"zero amount\\\");\\n        require(_lockPeriod == 0 || _lockPeriod <= 365 days,\\\"invalid lock interval\\\");\\n \\n        // update smart contract state\\n        _sync();\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // process current pending rewards if any\\n        if (user.tokenAmount > 0) {\\n            _processRewards(_staker, false);\\n        }\\n\\n        // if length of deposits is zero, then push zero value of unlocked deposit\\n        if (user.deposits.length == 0) {\\n            // create zero value of unlocked deposit and save the deposit (append it to deposits array)\\n            Deposit memory unlockedDeposit =\\n                Deposit({\\n                    tokenAmount: 0,\\n                    weight: 0,\\n                    lockedFrom: 0,\\n                    lockedUntil: 0,\\n                    isYield: false\\n                });\\n            user.deposits.push(unlockedDeposit);\\n        }\\n\\n        // zero value for `_lockPeriod` means \\\"no locking\\\" and leads to zero values\\n        uint64 lockFrom = uint64(now256());\\n        uint64 lockPeriod = _lockPeriod;\\n\\n        // stakeWeight\\n        uint256 stakeWeight = ((lockPeriod * weightMultiplier) / 365 days + weightMultiplier) * _amount;\\n\\n        // makes sure stakeWeight is valid\\n        require(stakeWeight > 0, \\\"invalid stakeWeight\\\");    \\n\\n        // if the user has new unlocked stake, deposit will merge it\\n        if (lockPeriod == 0) {\\n            // init weight of NFT\\n            uint nft_weight = 0;\\n            // if the user hold the right NFT tokenId, nft_weight will increase\\n            if (_nftTokenId != 0 && _nftAddress != address(0) ) {\\n                require(IERC721(_nftAddress).ownerOf(_nftTokenId) == msg.sender, \\\"the NFT tokenId doesn't match the user\\\");\\n                nft_weight = supportNTF[_nftAddress];\\n            }\\n            \\n            // old stakeWeight\\n            uint256 oldStakeWeight = user.deposits[0].weight;\\n            // new stakeWeight, only check user's NFT info for unlocked deposit\\n            uint256 newStakeWeight = oldStakeWeight + _amount * weightMultiplier + nft_weight * weightMultiplier;\\n            // the stake is currently unlocked \\n            user.deposits[0].tokenAmount += _amount;\\n            user.deposits[0].weight = newStakeWeight;\\n            user.deposits[0].lockedFrom = 0;\\n\\n            // update user record\\n            user.tokenAmount += _amount;\\n            user.totalWeight = (user.totalWeight - oldStakeWeight + newStakeWeight);\\n            user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n\\n            // update global variable\\n            usersLockingWeight = (usersLockingWeight - oldStakeWeight + newStakeWeight);\\n        } else {\\n            // the stake is currently locking\\n            // create and save the deposit (append it to deposits array)\\n            Deposit memory deposit =\\n                Deposit({\\n                    tokenAmount: _amount,\\n                    weight: stakeWeight,\\n                    lockedFrom: lockFrom,\\n                    lockedUntil: lockFrom + lockPeriod,\\n                    isYield: false\\n                });\\n            // deposit ID is an index of the deposit in `deposits` array\\n            user.deposits.push(deposit);\\n\\n            // update user record\\n            user.tokenAmount += _amount;\\n            user.totalWeight += stakeWeight;\\n            user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n\\n            // update global variable\\n            usersLockingWeight += stakeWeight;\\n        }\\n\\n        // emit an event\\n        emit Staked(msg.sender, _staker, _amount);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see unstake()\\n     *\\n     * @param _staker an address which unstakes tokens (which previously staked them)\\n     * @param _depositId deposit ID to unstake from, zero-indexed\\n     * @param _amount amount of tokens to unstake\\n     */\\n    function _unstake(\\n        address _staker,\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) internal virtual {\\n        // verify an amount is set\\n        require(_amount > 0, \\\"zero amount\\\");\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // get a link to the corresponding deposit, we may write to it later\\n        Deposit storage stakeDeposit = user.deposits[_depositId];\\n        // deposit structure may get deleted, so we save isYield flag to be able to use it\\n        bool isYield = stakeDeposit.isYield;\\n\\n        // verify available balance\\n        // if staker address ot deposit doesn't exist this check will fail as well\\n        require(stakeDeposit.tokenAmount >= _amount, \\\"amount exceeds stake\\\");\\n\\n        // update smart contract state\\n        _sync();\\n        // and process current pending rewards if any\\n        _processRewards(_staker, false);\\n\\n        // recalculate deposit weight\\n        uint256 previousWeight = stakeDeposit.weight;\\n        uint256 newWeight =\\n            (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * weightMultiplier) /\\n                365 days +\\n                weightMultiplier) * (stakeDeposit.tokenAmount - _amount);\\n\\n        // update the deposit, or delete it if its depleted\\n        if (stakeDeposit.tokenAmount == _amount) {\\n            //set all deposits value to zero (default)\\n            delete user.deposits[_depositId];\\n        } else {\\n            stakeDeposit.tokenAmount -= _amount;\\n            stakeDeposit.weight = newWeight;\\n        }\\n\\n        // update user record\\n        user.tokenAmount -= _amount;\\n        user.totalWeight = user.totalWeight - previousWeight + newWeight;\\n        user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n\\n        // update global variable\\n        usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\\n\\n        // if the deposit was created by the pool itself as a yield reward\\n        if (isYield) {\\n            user.rewardAmount -= _amount;\\n            // mint the yield via the factory\\n            IFactory(factory).mintYieldTo(msg.sender, _amount);\\n        } else {\\n            // otherwise just return tokens back to holder, staking for a year\\n            transferPoolToken(msg.sender, _amount);\\n        }\\n\\n        // emit an event\\n        emit Unstaked(msg.sender, _staker, _amount);\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw specified amount of tokens\\n     *\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     *\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        require(IFactory(factory).totalWeight() == 0, \\\"totalWeight != 0\\\");\\n\\n        // delegate call to an internal function\\n        _emergencyWithdraw(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see emergencyWithdraw()\\n     *\\n     * @param _staker an address which unstakes tokens (which previously staked them)\\n     */\\n    function _emergencyWithdraw(\\n        address _staker\\n    ) internal virtual {\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n\\n        uint256 totalWeight = user.totalWeight ;\\n        uint256 amount = user.tokenAmount;\\n        uint256 reward = user.rewardAmount;\\n\\n        // update user record\\n        user.tokenAmount = 0;\\n        user.rewardAmount = 0;\\n        user.totalWeight = 0;\\n        user.subYieldRewards = 0;\\n\\n        // delete entire array directly\\n        delete user.deposits;\\n\\n        // update global variable\\n        usersLockingWeight = usersLockingWeight - totalWeight;\\n\\n        // just return tokens back to holder\\n        transferPoolToken(msg.sender, amount - reward);\\n        // mint the yield via the factory\\n        IFactory(factory).mintYieldTo(msg.sender, reward);\\n\\n        emit EmergencyWithdraw(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see sync()\\n     *\\n     * @dev Updates smart contract state (`yieldRewardsPerWeight`, `lastYieldDistribution`),\\n     */\\n    function _sync() internal virtual {\\n\\n        // Initialize lastYieldDistribution when the first stake\\n        if (lastYieldDistribution == 0) {\\n            lastYieldDistribution = blockNumber();\\n        }\\n        // check bound conditions and if these are not met -\\n        // exit silently, without emitting an event\\n        uint256 endBlock = IFactory(factory).endBlock();\\n        if (lastYieldDistribution >= endBlock) {\\n            return;\\n        }\\n        if (blockNumber() <= lastYieldDistribution) {\\n            return;\\n        }\\n        // if locking weight is zero - update only `lastYieldDistribution` and exit\\n        if (usersLockingWeight == 0) {\\n            lastYieldDistribution = blockNumber();\\n            return;\\n        }\\n\\n        // to calculate the reward we need to know how many blocks passed, and reward per block\\n        uint256 currentBlock = blockNumber() > endBlock ? endBlock : blockNumber();\\n        uint256 blocksPassed = currentBlock - lastYieldDistribution;\\n        uint256 cartPerBlock = IFactory(factory).cartPerBlock();\\n\\n        // calculate the reward\\n        uint256 cartReward = (blocksPassed * cartPerBlock * weight) / IFactory(factory).totalWeight();\\n\\n        // update rewards per weight and `lastYieldDistribution`\\n        yieldRewardsPerWeight += rewardToWeight(cartReward, usersLockingWeight);\\n        lastYieldDistribution = currentBlock;\\n\\n        // emit an event\\n        emit Synchronized(msg.sender, yieldRewardsPerWeight, lastYieldDistribution);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see processRewards()\\n     *\\n     * @param _staker an address which receives the reward (which has staked some tokens earlier)\\n     * @param _withUpdate flag allowing to disable synchronization (see sync()) if set to false\\n     * @return pendingYield the rewards calculated and optionally re-staked\\n     */\\n    function _processRewards(\\n        address _staker,\\n        bool _withUpdate\\n    ) internal virtual returns (uint256 pendingYield) {\\n        // update smart contract state if required\\n        if (_withUpdate) {\\n            _sync();\\n        }\\n\\n        // calculate pending yield rewards, this value will be returned\\n        pendingYield = _pendingYieldRewards(_staker);\\n\\n        // if pending yield is zero - just return silently\\n        if (pendingYield == 0) return 0;\\n\\n        // get link to a user data structure, we will write into it later\\n        User storage user = users[_staker];\\n\\n        if (poolToken == CART) {\\n            // mint the yield via the factory\\n            IFactory(factory).mintYieldTo(_staker, pendingYield);\\n        } else {\\n            // for other pools - stake as pool\\n            address cartPool = IFactory(factory).getPoolAddress(CART);\\n            require(cartPool != address(0),\\\"invalid cart pool address\\\");\\n            ICorePool(cartPool).stakeAsPool(_staker, pendingYield);\\n        }\\n\\n        // update users's record for `subYieldRewards` if requested\\n        if (_withUpdate) {\\n            user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n        }\\n\\n        // emit an event\\n        emit YieldClaimed(msg.sender, _staker, pendingYield);\\n    }\\n\\n\\n    /**\\n     * @dev Converts stake weight (not to be mixed with the pool weight) to\\n     *      CART reward value, applying the 10^48 division on weight\\n     *\\n     * @param _weight stake weight\\n     * @param rewardPerWeight CART reward per weight\\n     * @return reward value normalized to 10^48\\n     */\\n    function weightToReward(uint256 _weight, uint256 rewardPerWeight) public pure returns (uint256) {\\n        // apply the formula and return\\n        return (_weight * rewardPerWeight) / REWARD_PER_WEIGHT_MULTIPLIER;\\n    }\\n\\n    /**\\n     * @dev Converts reward CART value to stake weight (not to be mixed with the pool weight),\\n     *      applying the 10^12 multiplication on the reward\\n     *      - OR -\\n     * @dev Converts reward CART value to reward/weight if stake weight is supplied as second\\n     *      function parameter instead of reward/weight\\n     *\\n     * @param reward yield reward\\n     * @param rewardPerWeight reward/weight (or stake weight)\\n     * @return stake weight (or reward/weight)\\n     */\\n    function rewardToWeight(uint256 reward, uint256 rewardPerWeight) public pure returns (uint256) {\\n        // apply the reverse formula and return\\n        return (reward * REWARD_PER_WEIGHT_MULTIPLIER) / rewardPerWeight;\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override block number in helper test smart contracts\\n     *\\n     * @return `block.number` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function blockNumber() public view virtual returns (uint256) {\\n        // return current block number\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override time in helper test smart contracts\\n     *\\n     * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function now256() public view virtual returns (uint256) {\\n        // return current block timestamp\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransfer on a pool token\\n     *\\n     */\\n    function transferPoolToken(address _to, uint256 _value) internal {\\n        SafeERC20.safeTransfer(IERC20(poolToken), _to, _value);\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransferFrom on a pool token\\n     *\\n     */\\n    function transferPoolTokenFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        SafeERC20.safeTransferFrom(IERC20(poolToken), _from, _to, _value);\\n    }\\n}\"\r\n    },\r\n    \"contracts_cart/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Cart factory\\n *\\n * @notice An abstraction representing a factory, see CartPoolFactory for details\\n *\\n */\\ninterface IFactory {\\n\\n    struct PoolData {\\n        // @dev pool token address (like CART)\\n        address poolToken;\\n        // @dev pool address (like deployed core pool instance)\\n        address poolAddress;\\n        // @dev pool weight (200 for CART pools, 800 for CART/ETH pools - set during deployment)\\n        uint256 weight;\\n        // @dev flash pool flag\\n        bool isFlashPool;\\n    }\\n\\n    function FACTORY_UID() external view returns (uint256);\\n\\n    function CART() external view returns (address);\\n\\n    function cartPerBlock() external view returns (uint256);\\n    \\n    function totalWeight() external view returns (uint256);\\n\\n    function endBlock() external view returns (uint256);\\n\\n    function getPoolData(address _poolToken) external view returns (PoolData memory);\\n\\n    function getPoolAddress(address poolToken) external view returns (address);\\n\\n    function isPoolExists(address _pool) external view returns (bool);\\n    \\n    function mintYieldTo(address _to, uint256 _amount) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts_cart/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n* @dev Data structure representing token holder using a pool\\n*/\\nstruct User {\\n    // @dev Total staked amount\\n    uint256 tokenAmount;\\n    // @dev Total reward amount\\n    uint256 rewardAmount;\\n    // @dev Total weight\\n    uint256 totalWeight;\\n    // @dev Auxiliary variable for yield calculation\\n    uint256 subYieldRewards;\\n    // @dev An array of holder's deposits\\n    Deposit[] deposits;\\n}\\n\\n/**\\n* @dev Deposit is a key data structure used in staking,\\n*      it represents a unit of stake with its amount, weight and term (time interval)\\n*/\\nstruct Deposit {\\n    // @dev token amount staked\\n    uint256 tokenAmount;\\n    // @dev stake weight\\n    uint256 weight;\\n    // @dev locking period - from\\n    uint64 lockedFrom;\\n    // @dev locking period - until\\n    uint64 lockedUntil;\\n    // @dev indicates if the stake was created as a yield reward\\n    bool isYield;\\n}\\n\\n/**\\n * @title Cart Pool\\n *\\n * @notice An abstraction representing a pool, see CARTPoolBase for details\\n *\\n */\\ninterface IPool {\\n    \\n    // for the rest of the functions see Soldoc in CARTPoolBase\\n    function CART() external view returns (address);\\n\\n    function poolToken() external view returns (address);\\n\\n    function isFlashPool() external view returns (bool);\\n\\n    function weight() external view returns (uint256);\\n\\n    function lastYieldDistribution() external view returns (uint256);\\n\\n    function yieldRewardsPerWeight() external view returns (uint256);\\n\\n    function usersLockingWeight() external view returns (uint256);\\n\\n    function weightMultiplier() external view returns (uint256);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function getDepositsLength(address _user) external view returns (uint256);\\n\\n    function getOriginDeposit(address _user, uint256 _depositId) external view returns (Deposit memory);\\n\\n    function getUser(address _user) external view returns (User memory);\\n\\n    function stake(\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        address _nftAddress,\\n        uint256 _nftTokenId\\n    ) external;\\n\\n    function unstake(\\n        uint256 _depositId,\\n        uint256 _amount\\n    ) external;\\n\\n    function sync() external;\\n\\n    function processRewards() external;\\n\\n    function setWeight(uint256 _weight) external;\\n\\n    function NFTWeightUpdated(address _nftAddress, uint256 _nftWeight) external;\\n\\n    function setWeightMultiplierbyFactory(uint256 _newWeightMultiplier) external;\\n\\n    function getNFTWeight(address _nftAddress) external view returns (uint256);\\n\\n    function weightToReward(uint256 _weight, uint256 rewardPerWeight) external pure returns (uint256);\\n\\n    function rewardToWeight(uint256 reward, uint256 rewardPerWeight) external pure returns (uint256);\\n\\n}\"\r\n    },\r\n    \"contracts_cart/interfaces/ICorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface ICorePool is IPool {\\n\\n    function poolTokenReserve() external view returns (uint256);\\n\\n    function stakeAsPool(address _staker, uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts_cart/interfaces/ITokenRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/**\\n * @title ITokenRecipient\\n *\\n * @notice Recipient Cart Token and stake\\n *\\n */\\n\\ninterface ITokenRecipient {\\n  function tokensReceived(\\n      address from,\\n      uint amount,\\n      bytes calldata exData\\n  ) external returns (bool);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromVal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toVal\",\"type\":\"uint256\"}],\"name\":\"PoolWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRewardsPerWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastYieldDistribution\",\"type\":\"uint256\"}],\"name\":\"Synchronized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CART\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftWeight\",\"type\":\"uint256\"}],\"name\":\"NFTWeightUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"getNFTWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getOriginDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isYield\",\"type\":\"bool\"}],\"internalType\":\"struct Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subYieldRewards\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isYield\",\"type\":\"bool\"}],\"internalType\":\"struct Deposit[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFlashPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastYieldDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWeight\",\"type\":\"uint256\"}],\"name\":\"rewardToWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWeightMultiplier\",\"type\":\"uint256\"}],\"name\":\"setWeightMultiplierbyFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_lockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeAsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportNTF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subYieldRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersLockingWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerWeight\",\"type\":\"uint256\"}],\"name\":\"weightToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRewardsPerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CartCorePool", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000005c8c8d560048f34e5f7f8ad71f2f81a89dbd273e000000000000000000000000074a975d966a22bfaaa2de6a97f164a90b0187d000000000000000000000000090977dcc364f9806d7eda3ac2bdd17cbe2a7dfde0000000000000000000000000000000000000000000000000000000000000320", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}