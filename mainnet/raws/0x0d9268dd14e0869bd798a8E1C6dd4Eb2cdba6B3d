{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bond/CongruentBondStakeDepository.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"../libs/IERC20.sol\\\";\\r\\nimport \\\"../libs/SafeERC20.sol\\\";\\r\\nimport \\\"../libs/FixedPoint.sol\\\";\\r\\nimport \\\"../libs/DaoOwnable.sol\\\";\\r\\nimport \\\"../libs/interface/ITreasury.sol\\\";\\r\\nimport \\\"../libs/interface/IBondCalculator.sol\\\";\\r\\nimport \\\"../libs/interface/IsGaas.sol\\\";\\r\\nimport \\\"../libs/interface/IStaking.sol\\\";\\r\\nimport \\\"../libs/interface/IStakingHelper.sol\\\";\\r\\nimport \\\"../libs/SafeMath.sol\\\";\\r\\n\\r\\ncontract CongruentBondStakeDepository is DaoOwnable {\\r\\n\\r\\n    using FixedPoint for *;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    /* ======== EVENTS ======== */\\r\\n\\r\\n    event BondCreated( uint deposit, uint indexed payout, uint indexed expires, uint indexed priceInUSD );\\r\\n    event BondRedeemed( address indexed recipient, uint payout, uint remaining );\\r\\n    event BondPriceChanged( uint indexed priceInUSD, uint indexed internalPrice, uint indexed debtRatio );\\r\\n    event ControlVariableAdjustment( uint initialBCV, uint newBCV, uint adjustment, bool addition );\\r\\n\\r\\n    /* ======== STATE VARIABLES ======== */\\r\\n\\r\\n    address public immutable Gaas; // reward token from treasury\\r\\n\\taddress public immutable sGaas; // token given as payment for bond\\r\\n    address public immutable principle; // token used to create bond\\r\\n    address public immutable treasury; // mints Gaas when receives principle\\r\\n    address public immutable DAO; // receives profit share from bond\\r\\n\\r\\n    bool public immutable isLiquidityBond; // LP and Reserve bonds are treated slightly different\\r\\n    address public immutable bondCalculator; // calculates value of LP tokens\\r\\n\\r\\n    address public stakingHelper; // to stake and claim if no staking warmup\\r\\n\\r\\n    Terms public terms; // stores terms for new bonds\\r\\n    Adjust public adjustment; // stores adjustment to BCV data\\r\\n\\r\\n    mapping( address => Bond ) public bondInfo; // stores bond information for depositors\\r\\n\\r\\n    uint public totalDebt; // total value of outstanding bonds; used for pricing\\r\\n    uint public lastDecay; // reference block for debt decay\\r\\n    \\r\\n    /* ======== STRUCTS ======== */\\r\\n\\r\\n    // Info for creating new bonds\\r\\n    struct Terms {\\r\\n        uint controlVariable; // scaling variable for price\\r\\n        uint vestingTerm; // in blocks\\r\\n        uint minimumPrice; // vs principle value, 4 decimals. i.e. 1.5 = 1500\\r\\n        uint maxPayout; // in thousandths of a %. i.e. 500 = 0.5%\\r\\n        uint fee; // as % of bond payout, in hundreths. ( 500 = 5% = 0.05 for every 1 paid)\\r\\n        uint maxDebt; // 9 decimal debt ratio, max % total supply created as debt\\r\\n    }\\r\\n\\r\\n    // Info for bond holder with gons\\r\\n    struct Bond {\\r\\n        uint gonsPayout; // sGaas gons remaining to be paid\\r\\n\\t\\tuint GaasPayout; // Gaas amount at the moment of bond\\r\\n        uint vesting; // Blocks left to vest\\r\\n        uint lastBlock; // Last interaction\\r\\n        uint pricePaid; // In DAI, for front end viewing\\r\\n    }\\r\\n\\r\\n    // Info for incremental adjustments to control variable \\r\\n    struct Adjust {\\r\\n        bool add; // addition or subtraction\\r\\n        uint rate; // increment\\r\\n        uint target; // BCV when adjustment finished\\r\\n        uint buffer; // minimum length (in blocks) between adjustments\\r\\n        uint lastBlock; // block when last adjustment made\\r\\n    }\\r\\n\\r\\n    /* ======== INITIALIZATION ======== */\\r\\n\\r\\n    constructor ( \\r\\n        address _Gaas,\\r\\n\\t\\taddress _sGaas,\\r\\n        address _principle,\\r\\n        address _treasury, \\r\\n        address _DAO, \\r\\n        address _bondCalculator\\r\\n    ) {\\r\\n        require( _Gaas != address(0) );\\r\\n        Gaas = _Gaas;\\r\\n\\t\\trequire( _sGaas != address(0) );\\r\\n        sGaas = _sGaas;\\r\\n        require( _principle != address(0) );\\r\\n        principle = _principle;\\r\\n        require( _treasury != address(0) );\\r\\n        treasury = _treasury;\\r\\n        require( _DAO != address(0) );\\r\\n        DAO = _DAO;\\r\\n        // bondCalculator should be address(0) if not LP bond\\r\\n        bondCalculator = _bondCalculator;\\r\\n        isLiquidityBond = ( _bondCalculator != address(0) );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice initializes bond parameters\\r\\n     *  @param _controlVariable uint\\r\\n     *  @param _vestingTerm uint\\r\\n     *  @param _minimumPrice uint\\r\\n     *  @param _maxPayout uint\\r\\n     *  @param _fee uint\\r\\n     *  @param _maxDebt uint\\r\\n     *  @param _initialDebt uint\\r\\n     */\\r\\n    function initializeBondTerms( \\r\\n        uint _controlVariable, \\r\\n        uint _vestingTerm,\\r\\n        uint _minimumPrice,\\r\\n        uint _maxPayout,\\r\\n        uint _fee,\\r\\n        uint _maxDebt,\\r\\n        uint _initialDebt\\r\\n    ) external onlyManager() {\\r\\n        require( terms.controlVariable == 0, \\\"Bonds must be initialized from 0\\\" );\\r\\n        terms = Terms ({\\r\\n            controlVariable: _controlVariable,\\r\\n            vestingTerm: _vestingTerm,\\r\\n            minimumPrice: _minimumPrice,\\r\\n            maxPayout: _maxPayout,\\r\\n            fee: _fee,\\r\\n            maxDebt: _maxDebt\\r\\n        });\\r\\n        totalDebt = _initialDebt;\\r\\n        lastDecay = block.number;\\r\\n    }\\r\\n    \\r\\n    /* ======== POLICY FUNCTIONS ======== */\\r\\n\\r\\n    enum PARAMETER { VESTING, PAYOUT, FEE, DEBT, MINPRICE }\\r\\n    /**\\r\\n     *  @notice set parameters for new bonds\\r\\n     *  @param _parameter PARAMETER\\r\\n     *  @param _input uint\\r\\n     */\\r\\n    function setBondTerms ( PARAMETER _parameter, uint _input ) external onlyManager() {\\r\\n        if ( _parameter == PARAMETER.VESTING ) { // 0\\r\\n            require( _input >= 10000, \\\"Vesting must be longer than 36 hours\\\" );\\r\\n            terms.vestingTerm = _input;\\r\\n        } else if ( _parameter == PARAMETER.PAYOUT ) { // 1\\r\\n            require( _input <= 1000, \\\"Payout cannot be above 1 percent\\\" );\\r\\n            terms.maxPayout = _input;\\r\\n        } else if ( _parameter == PARAMETER.FEE ) { // 2\\r\\n            require( _input <= 10000, \\\"DAO fee cannot exceed payout\\\" );\\r\\n            terms.fee = _input;\\r\\n        } else if ( _parameter == PARAMETER.DEBT ) { // 3\\r\\n            terms.maxDebt = _input;\\r\\n        } else if ( _parameter == PARAMETER.MINPRICE ) { // 4\\r\\n            terms.minimumPrice = _input;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice set control variable adjustment\\r\\n     *  @param _addition bool\\r\\n     *  @param _increment uint\\r\\n     *  @param _target uint\\r\\n     *  @param _buffer uint\\r\\n     */\\r\\n    function setAdjustment ( \\r\\n        bool _addition,\\r\\n        uint _increment, \\r\\n        uint _target,\\r\\n        uint _buffer \\r\\n    ) external onlyManager() {\\r\\n        adjustment = Adjust({\\r\\n            add: _addition,\\r\\n            rate: _increment,\\r\\n            target: _target,\\r\\n            buffer: _buffer,\\r\\n            lastBlock: block.number\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice set contract for auto stake\\r\\n     *  @param _staking address\\r\\n     */\\r\\n    function setStaking( address _staking, bool ) external onlyManager() {\\r\\n        require( _staking != address(0) );\\r\\n        stakingHelper = _staking;\\r\\n    }\\r\\n\\r\\n    /* ======== USER FUNCTIONS ======== */\\r\\n\\r\\n    /**\\r\\n     *  @notice deposit bond\\r\\n     *  @param _amount uint\\r\\n     *  @param _maxPrice uint\\r\\n     *  @param _depositor address\\r\\n     *  @return uint\\r\\n     */\\r\\n    function deposit( \\r\\n        uint _amount, \\r\\n        uint _maxPrice,\\r\\n        address _depositor\\r\\n    ) external returns ( uint ) {\\r\\n        require( _depositor != address(0), \\\"Invalid address\\\" );\\r\\n\\r\\n        decayDebt();\\r\\n        \\r\\n        uint priceInUSD = bondPriceInUSD(); // Stored in bond info\\r\\n        uint nativePrice = _bondPrice();\\r\\n\\r\\n        require( _maxPrice >= nativePrice, \\\"Slippage limit: more than max price\\\" ); // slippage protection\\r\\n\\r\\n        uint value = ITreasury( treasury ).valueOf( principle, _amount );\\r\\n        uint payout = payoutFor( value ); // payout to bonder is computed\\r\\n\\r\\n        require( payout >= 10000000, \\\"Bond too small\\\" ); // must be > 0.01 Gaas ( underflow protection )\\r\\n        require( payout <= maxPayout(), \\\"Bond too large\\\"); // size protection because there is no slippage\\r\\n\\r\\n        // profits are calculated\\r\\n        uint fee = payout.mul( terms.fee ).div( 10000 );\\r\\n        uint profit = value.sub( payout ).sub( fee );\\r\\n\\r\\n        /**\\r\\n            principle is transferred in\\r\\n            approved and\\r\\n            deposited into the treasury, returning (_amount - profit) Gaas\\r\\n         */\\r\\n        IERC20( principle ).safeTransferFrom( msg.sender, address(this), _amount );\\r\\n        IERC20( principle ).approve( address( treasury ), _amount );\\r\\n        ITreasury( treasury ).deposit( _amount, principle, profit );\\r\\n        \\r\\n        if ( fee != 0 ) { // fee is transferred to dao \\r\\n            IERC20( Gaas ).safeTransfer( DAO, fee ); \\r\\n        }\\r\\n        \\r\\n        // total debt is increased\\r\\n        totalDebt = totalDebt.add( value ); \\r\\n        require( totalDebt <= terms.maxDebt, \\\"Max capacity reached\\\" );\\r\\n\\r\\n\\t\\tIERC20( Gaas ).approve( stakingHelper, payout );\\r\\n        IStakingHelper( stakingHelper ).stake( payout, address(this) );\\r\\n\\t\\t\\r\\n\\t\\tuint stakeGons = IsGaas( sGaas ).gonsForBalance(payout);\\r\\n\\t\\t\\r\\n        // depositor info is stored\\r\\n        bondInfo[ _depositor ] = Bond({ \\r\\n            gonsPayout: bondInfo[ _depositor ].gonsPayout.add( stakeGons ),\\r\\n\\t\\t\\tGaasPayout: bondInfo[ _depositor ].GaasPayout.add( payout ),\\r\\n            vesting: terms.vestingTerm,\\r\\n            lastBlock: block.number,\\r\\n            pricePaid: priceInUSD\\r\\n        });\\r\\n\\r\\n        // indexed events are emitted\\r\\n        emit BondCreated( _amount, payout, block.number.add( terms.vestingTerm ), priceInUSD );\\r\\n        emit BondPriceChanged( bondPriceInUSD(), _bondPrice(), debtRatio() );\\r\\n\\r\\n        adjust(); // control variable is adjusted\\r\\n        return payout; \\r\\n    }\\r\\n\\r\\n    /** \\r\\n     *  @notice redeem bond for user\\r\\n     *  @param _recipient address\\r\\n     *  @return uint\\r\\n     */ \\r\\n    function redeem( address _recipient, bool ) external returns ( uint ) {        \\r\\n        Bond memory info = bondInfo[ _recipient ];\\r\\n        uint percentVested = percentVestedFor( _recipient ); // (blocks since last interaction / vesting term remaining)\\r\\n\\t\\tIStaking(stakingHelper).claim(address(this));\\r\\n\\t\\t\\r\\n\\t\\tuint256 pendingGons;\\r\\n\\t\\tuint256 lockedGons;\\r\\n\\t\\tuint256 _amount;\\r\\n\\t\\t\\r\\n        if ( percentVested >= 10000 ) { // if fully vested\\r\\n\\t\\t\\tpendingGons = info.gonsPayout;\\r\\n\\t\\t\\tdelete bondInfo[ _recipient ]; // delete user info\\r\\n        } else { // if unfinished\\r\\n            // calculate payout vested\\r\\n            pendingGons = info.gonsPayout.mul( percentVested ).div( 10000 );\\r\\n            // store updated deposit info\\r\\n            bondInfo[ _recipient ] = Bond({\\r\\n                gonsPayout: info.gonsPayout.sub( pendingGons ),\\r\\n\\t\\t\\t\\tGaasPayout: info.GaasPayout,\\r\\n                vesting: info.vesting.sub( block.number.sub( info.lastBlock ) ),\\r\\n                lastBlock: block.number,\\r\\n                pricePaid: info.pricePaid\\r\\n            });\\r\\n\\t\\t\\tlockedGons = bondInfo[ _recipient ].gonsPayout;\\r\\n        }\\r\\n\\t\\t\\r\\n\\t\\t_amount = IsGaas( sGaas ).balanceForGons(pendingGons);\\r\\n\\t\\tIERC20(sGaas).transfer( _recipient, _amount);\\r\\n        emit BondRedeemed( _recipient, _amount, lockedGons ); // emit bond data\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /* ======== INTERNAL HELPER FUNCTIONS ======== */\\r\\n\\r\\n    /**\\r\\n     *  @notice makes incremental adjustment to control variable\\r\\n     */\\r\\n    function adjust() internal {\\r\\n        uint blockCanAdjust = adjustment.lastBlock.add( adjustment.buffer );\\r\\n        if( adjustment.rate != 0 && block.number >= blockCanAdjust ) {\\r\\n            uint initial = terms.controlVariable;\\r\\n            if ( adjustment.add ) {\\r\\n                terms.controlVariable = terms.controlVariable.add( adjustment.rate );\\r\\n                if ( terms.controlVariable >= adjustment.target ) {\\r\\n                    adjustment.rate = 0;\\r\\n                }\\r\\n            } else {\\r\\n                terms.controlVariable = terms.controlVariable.sub( adjustment.rate );\\r\\n                if ( terms.controlVariable <= adjustment.target ) {\\r\\n                    adjustment.rate = 0;\\r\\n                }\\r\\n            }\\r\\n            adjustment.lastBlock = block.number;\\r\\n            emit ControlVariableAdjustment( initial, terms.controlVariable, adjustment.rate, adjustment.add );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice reduce total debt\\r\\n     */\\r\\n    function decayDebt() internal {\\r\\n        totalDebt = totalDebt.sub( debtDecay() );\\r\\n        lastDecay = block.number;\\r\\n    }\\r\\n\\r\\n    /* ======== VIEW FUNCTIONS ======== */\\r\\n\\r\\n    /**\\r\\n     *  @notice determine maximum bond size\\r\\n     *  @return uint\\r\\n     */\\r\\n    function maxPayout() public view returns ( uint ) {\\r\\n        return IERC20( Gaas ).totalSupply().mul( terms.maxPayout ).div( 100000 );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate interest due for new bond\\r\\n     *  @param _value uint\\r\\n     *  @return uint\\r\\n     */\\r\\n    function payoutFor( uint _value ) public view returns ( uint ) {\\r\\n        return FixedPoint.fraction( _value, bondPrice() ).decode112with18().div( 1e14 );\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate current bond premium\\r\\n     *  @return price_ uint\\r\\n     */\\r\\n    function bondPrice() public view returns ( uint price_ ) {        \\r\\n        price_ = terms.controlVariable.mul( debtRatio() ).add( 1000000000 ).div( 1e5 );\\r\\n        if ( price_ < terms.minimumPrice ) {\\r\\n            price_ = terms.minimumPrice;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate current bond price and remove floor if above\\r\\n     *  @return price_ uint\\r\\n     */\\r\\n    function _bondPrice() internal returns ( uint price_ ) {\\r\\n        price_ = terms.controlVariable.mul( debtRatio() ).add( 1000000000 ).div( 1e5 );\\r\\n        if ( price_ < terms.minimumPrice ) {\\r\\n            price_ = terms.minimumPrice;        \\r\\n        } else if ( terms.minimumPrice != 0 ) {\\r\\n            terms.minimumPrice = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice converts bond price to DAI value\\r\\n     *  @return price_ uint\\r\\n     */\\r\\n    function bondPriceInUSD() public view returns ( uint price_ ) {\\r\\n        if( isLiquidityBond ) {\\r\\n            price_ = bondPrice().mul( IBondCalculator( bondCalculator ).markdown( principle ) ).div( 1e4 );\\r\\n        } else {\\r\\n            price_ = bondPrice().mul( 10 ** IERC20( principle ).decimals() ).div( 1e4 );\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate current ratio of debt to Gaas supply\\r\\n     *  @return debtRatio_ uint\\r\\n     */\\r\\n    function debtRatio() public view returns ( uint debtRatio_ ) {   \\r\\n        uint supply = IERC20( Gaas ).totalSupply();\\r\\n        debtRatio_ = FixedPoint.fraction( \\r\\n            currentDebt().mul( 1e9 ), \\r\\n            supply\\r\\n        ).decode112with18().div( 1e18 );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice debt ratio in same terms for reserve or liquidity bonds\\r\\n     *  @return uint\\r\\n     */\\r\\n    function standardizedDebtRatio() external view returns ( uint ) {\\r\\n        if ( isLiquidityBond ) {\\r\\n            return debtRatio().mul( IBondCalculator( bondCalculator ).markdown( principle ) ).div( 1e9 );\\r\\n        } else {\\r\\n            return debtRatio();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate debt factoring in decay\\r\\n     *  @return uint\\r\\n     */\\r\\n    function currentDebt() public view returns ( uint ) {\\r\\n        return totalDebt.sub( debtDecay() );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice amount to decay total debt by\\r\\n     *  @return decay_ uint\\r\\n     */\\r\\n    function debtDecay() public view returns ( uint decay_ ) {\\r\\n        uint blocksSinceLast = block.number.sub( lastDecay );\\r\\n        decay_ = totalDebt.mul( blocksSinceLast ).div( terms.vestingTerm );\\r\\n        if ( decay_ > totalDebt ) {\\r\\n            decay_ = totalDebt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate how far into vesting a depositor is\\r\\n     *  @param _depositor address\\r\\n     *  @return percentVested_ uint\\r\\n     */\\r\\n    function percentVestedFor( address _depositor ) public view returns ( uint percentVested_ ) {\\r\\n        Bond memory bond = bondInfo[ _depositor ];\\r\\n        uint blocksSinceLast = block.number.sub( bond.lastBlock );\\r\\n        uint vesting = bond.vesting;\\r\\n\\r\\n        if ( vesting > 0 ) {\\r\\n            percentVested_ = blocksSinceLast.mul( 10000 ).div( vesting );\\r\\n        } else {\\r\\n            percentVested_ = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice calculate amount of Gaas available for claim by depositor\\r\\n     *  @param _depositor address\\r\\n     *  @return pendingPayout_ uint\\r\\n     */\\r\\n    function pendingPayoutFor( address _depositor ) external view returns ( uint pendingPayout_ ) {\\r\\n        uint percentVested = percentVestedFor( _depositor );\\r\\n        uint payout = bondInfo[ _depositor ].gonsPayout;\\r\\n\\r\\n        if ( percentVested >= 10000 ) {\\r\\n            pendingPayout_ = payout;\\r\\n        } else {\\r\\n            pendingPayout_ = payout.mul( percentVested ).div( 10000 );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ======= AUXILLIARY ======= */\\r\\n\\r\\n    /**\\r\\n     *  @notice allow anyone to send lost tokens (excluding principle or Gaas) to the DAO\\r\\n     *  @return bool\\r\\n     */\\r\\n    function recoverLostToken( address _token ) external returns ( bool ) {\\r\\n        require( _token != Gaas );\\r\\n\\t\\trequire( _token != sGaas );\\r\\n        require( _token != principle );\\r\\n        IERC20( _token ).safeTransfer( DAO, IERC20( _token ).balanceOf( address(this) ) );\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libs/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n\\r\\n\\t/**\\r\\n     * @dev Returns the decimals of token.\\r\\n     */\\r\\n\\tfunction decimals() external view returns (uint8);\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libs/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/libs/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"./FullMath.sol\\\";\\r\\n\\r\\nlibrary FixedPoint {\\r\\n\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    struct uq144x112 {\\r\\n        uint256 _x;\\r\\n    }\\r\\n\\r\\n    uint8 private constant RESOLUTION = 112;\\r\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\r\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\r\\n\\r\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\r\\n        return uint112(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n\\r\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\r\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\r\\n\\r\\n        if (numerator <= type(uint144).max) {\\r\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\r\\n            require(result <= type(uint224).max, 'FixedPoint::fraction: overflow');\\r\\n            return uq112x112(uint224(result));\\r\\n        } else {\\r\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\r\\n            require(result <= type(uint224).max, 'FixedPoint::fraction: overflow');\\r\\n            return uq112x112(uint224(result));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libs/DaoOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ncontract DaoOwnable{\\r\\n\\r\\n    address internal _owner;\\r\\n    address internal _newOwner;\\r\\n\\r\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\r\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipPushed( address(0), _owner );\\r\\n    }\\r\\n\\r\\n    function manager() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require( _owner == msg.sender, \\\"Ownable: caller is not the owner\\\" );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceManagement() public onlyManager() {\\r\\n        emit OwnershipPushed( _owner, address(0) );\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function pushManagement( address newOwner_ ) public onlyManager() {\\r\\n        require( newOwner_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipPushed( _owner, newOwner_ );\\r\\n        _newOwner = newOwner_;\\r\\n    }\\r\\n    \\r\\n    function pullManagement() public {\\r\\n        require( msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\r\\n        emit OwnershipPulled( _owner, _newOwner );\\r\\n        _owner = _newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libs/interface/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function mintRewards( address _recipient, uint _amount ) external;\\r\\n\\tfunction deposit( uint _amount, address _token, uint _profit ) external returns ( bool );\\r\\n    function valueOf( address _token, uint _amount ) external view returns ( uint value_ );\\r\\n}\"\r\n    },\r\n    \"contracts/libs/interface/IBondCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IBondCalculator {\\r\\n    function valuation( address _LP, uint _amount ) external view returns ( uint );\\r\\n    function markdown( address _LP ) external view returns ( uint );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libs/interface/IsGaas.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IsGaas {\\r\\n    function rebase( uint256 METAProfit_, uint epoch_) external returns (uint256);\\r\\n\\r\\n    function circulatingSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n    function gonsForBalance( uint amount ) external view returns ( uint );\\r\\n\\r\\n    function balanceForGons( uint gons ) external view returns ( uint );\\r\\n    \\r\\n    function index() external view returns ( uint );\\r\\n\\t\\r\\n    function INDEX() external view returns ( uint );\\r\\n\\t\\r\\n    function totalSupply() external view returns ( uint );\\r\\n}\"\r\n    },\r\n    \"contracts/libs/interface/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IStaking {\\r\\n    function stake( uint _amount, address _recipient ) external returns ( bool );\\r\\n    function claim( address _recipient ) external;\\r\\n\\tfunction unstake( uint _amount, bool _trigger ) external;\\r\\n}\"\r\n    },\r\n    \"contracts/libs/interface/IStakingHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\ninterface IStakingHelper {\\r\\n    function stake( uint _amount, address _recipient ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libs/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\t\\n\\t\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n    */\\n    function percentageAmount( uint256 total_, uint8 percentage_ ) internal pure returns ( uint256 percentAmount_ ) {\\n        return div( mul( total_, percentage_ ), 1000 );\\n    }\\n\\n    /*\\n     * Expects percentage to be trailed by 00,\\n    */\\n    function substractPercentage( uint256 total_, uint8 percentageToSub_ ) internal pure returns ( uint256 result_ ) {\\n        return sub( total_, div( mul( total_, percentageToSub_ ), 1000 ) );\\n    }\\n\\n    function percentageOfTotal( uint256 part_, uint256 total_ ) internal pure returns ( uint256 percent_ ) {\\n        return div( mul(part_, 100) , total_ );\\n    }\\n\\n    /**\\n     * Taken from Hypersonic https://github.com/M2629/HyperSonic/blob/main/Math.sol\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    function quadraticPricing( uint256 payment_, uint256 multiplier_ ) internal pure returns (uint256) {\\n        return sqrrt( mul( multiplier_, payment_ ) );\\n    }\\n\\n\\tfunction bondingCurve( uint256 supply_, uint256 multiplier_ ) internal pure returns (uint256) {\\n\\t\\treturn mul( multiplier_, supply_ );\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\tuint8 private _decimals;\\r\\n\\t\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The defaut value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n\\t\\t_decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overloaded;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _balances[account] = accountBalance - amount;\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address, address, uint256) internal virtual { }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nlibrary FullMath {\\r\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\r\\n        uint256 mm = mulmod(x, y, uint256(-1));\\r\\n        l = x * y;\\r\\n        h = mm - l;\\r\\n        if (mm < l) h -= 1;\\r\\n    }\\r\\n\\r\\n    function fullDiv(\\r\\n        uint256 l,\\r\\n        uint256 h,\\r\\n        uint256 d\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 pow2 = d & -d;\\r\\n        d /= pow2;\\r\\n        l /= pow2;\\r\\n        l += h * ((-pow2) / pow2 + 1);\\r\\n        uint256 r = 1;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        return l * r;\\r\\n    }\\r\\n\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 d\\r\\n    ) internal pure returns (uint256) {\\r\\n        (uint256 l, uint256 h) = fullMul(x, y);\\r\\n        uint256 mm = mulmod(x, y, d);\\r\\n        if (mm > l) h -= 1;\\r\\n        l -= mm;\\r\\n        require(h < d, 'FullMath::mulDiv: overflow');\\r\\n        return fullDiv(l, h, d);\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Gaas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sGaas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondCalculator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"internalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"BondPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBCV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"addition\",\"type\":\"bool\"}],\"name\":\"ControlVariableAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Gaas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gonsPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GaasPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"decay_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"}],\"name\":\"initializeBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityBond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentVested_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sGaas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_addition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CongruentBondStakeDepository.PARAMETER\",\"name\":\"_parameter\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardizedDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CongruentBondStakeDepository", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b4dffa52fee44bd493f12d85829d775ec80176910000000000000000000000000aa9d1c726acbfa1ef8683a6b105ef46c5889a7c000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000e70311b73a193b9f87653c9399dd04c605d3e3570000000000000000000000004a6bf7737b54195bfb72030d8f2bf7cf2b466dc30000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}