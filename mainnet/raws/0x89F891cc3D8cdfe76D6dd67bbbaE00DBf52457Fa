{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Twali_V1/TwaliContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*                          \\n*                                          |`._         |\\\\\\n*                                           `   `.  .    | `.    |`.\\n*                                            .    `.|`-. |   `-..'  \\\\           _,.-'\\n*                                            '      `-. `.           \\\\ /|   _,-'   /\\n*                                        .--..'        `._`           ` |.-'      /\\n*                                         \\\\   |                                  /\\n*                                      ,..'   '                                 /\\n*                                      `.                                      /\\n*                                      _`.---                                 /\\n*                                  _,-'               `.                 ,-  /\\\"-._\\n*                                ,\\\"                   | `.             ,'|   `    `.           \\n*                              .'                     |   `.         .'  |    .     `.\\n*                            ,'                       '   ()`.     ,'()  '    |       `.\\n*'                          -.                    |`.  `.....-'    -----' _   |         .\\n*                           / ,   ________..'     '  `-._              _.'/   |         :\\n*                           ` '-\\\"\\\" _,.--\\\"'         \\\\   | `\\\"+--......-+' //   j `\\\"--.. , '\\n*                              `.'\\\"    .'           `. |   |     |   / //    .       ` '\\n*                                `.   /               `'   |    j   /,.'     '\\n*                                  \\\\ /                  `-.|_   |_.-'       /\\\\\\n*                                   /                        `\\\"\\\"          .'  \\\\\\n*                                  j                                           .\\n*                                  |                                 _,        |\\n*                                  |             ,^._            _.-\\\"          '\\n*                                  |          _.'    `'\\\"\\\"`----`\\\"'   `._       '\\n*                                  j__     _,'                         `-.'-.\\\"`\\n*                                     ',-.,' \\n*                           ++======================================================++\\n*       `````^`                                                                                                                                        .'```'  \\n*       ``````^^                                                                                                                                      `````^` \\n*       ^````^\\\"^                                                                                                                                      `^^^\\\"\\\"' \\n*       ^````^\\\"^                                                                                                                                       .''.   \\n*       ^````^\\\"^                                                                                                                                              \\n*       ^````^\\\"^                          `````^'                       `````^`      ..'```````````````````````^.  ``````^'                          .``````^`\\n*       ^````^\\\"^         ..''.            ````^^`                       `````^^    .'`````^^\\\"\\\"\\\"\\\"\\\"^^^``````````^^.  ``````^`                          ``'''``^^\\n*       ^`````^^      .'`````^^.          ^```^\\\"`            .          ````^^\\\"   .`````^\\\",`'..     .`````````^^.  ``````^`                          ``'''``^^\\n*       ^`````^`...'``^^^^^^^\\\"\\\".          ^```^\\\"`        `````^'        ````^^\\\"   `````^,`        '``````''```^\\\".  ``````^`                          ``'''``^^\\n*       ^`````^\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\",,\\\"^.           ^```^\\\"`        `````^`        `````^\\\"  .````^\\\"`       .```````.``'``^\\\".  ``''``^`                         .``'''``^^\\n*       ^````^\\\"\\\"                          ````^\\\"`        ````^^`        `````^\\\"  '````^\\\"'     .```````` ``''``^^.  ``''``^`                         .``'''``^^\\n*       `````^\\\"\\\"                 ......   ````^\\\"`        ````^\\\"`        `````^\\\"  '````^\\\"'    .```````^ '`''''``^.  ``''``^`                 ......  .``'''``^^\\n*       ``````^^            .''``````^^.  `````^`       .`````^`       .`````^\\\"  '`````^.   '``'''``^' ``''''``^.  ``''``^`            .''```````^  .``'''``^^\\n*       ``````^`         .'``````````^^.  `````^'      '````````     .'``''``^\\\"  '``''``'..'`''''```^..``''''``^.  ``''``^`         .'```'''''``^^  .``'''``^^\\n*       ^```````.  ...'``````````````^\\\".  ^``````.''````````````''```````````^\\\"  '````````````````^^^ .```````^\\\".  ^```````......'``````````````^\\\"  .```````^^\\n*       ^\\\"^^^^^^^^^^^^^^^^^^^^^\\\"\\\"\\\"\\\"\\\"\\\",,.  \\\"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\"\\\",,  .\\\"^^^^^^^^^^^^^\\\"\\\",,' '\\\"^^^^^\\\"\\\",.  \\\"\\\"^^^^^^^^^^^^^^^^^^^^^^^^^\\\"\\\",,  .\\\"^^^^\\\"\\\"\\\"\\\"\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n                                                                                                                                                                                            \\n\\ncontract TwaliContract is Initializable, ReentrancyGuard {\\n  \\n    address public owner;\\n    // expert address that is completion contract and recieving payment\\n    address payable public contract_expert;\\n    // SOW metadata for work agreed terms \\n    string public contract_sowMetaData;\\n\\n    bool private isInitialized;\\n    // Werk is approved or not approved yet\\n    bool public contract_werkApproved; // unassigned variable has default value of 'false'\\n    // Werk has been paid out \\n    bool public contract_werkPaidOut;\\n    // Werk was refunded \\n    bool public contract_werkRefunded;\\n    // contract creation date\\n    uint contract_created_on;\\n    // experts start date in contract\\n    uint public contract_start_date;\\n    // End date for werk completion \\n    uint public contract_end_date;\\n    // Completion Date for submitted werk\\n    // Contract amount to be paid \\n    uint256 public contract_payment_amount = 0.0 ether;\\n\\n    /// @notice This contract has four 'status' stages that transitions through in a full contract cycle.\\n    /// Draft: Contract is in draft stage awaiting for applications and selection.\\n    /// Active: Contract is active and funded with pay out amount with a selected Contract Expert to complete werk.\\n    /// Complete: Contract werk is completed, approved by client, and Expert has recieved payment.\\n    /// Killed: Contract werk is canceled in draft stage or no longer active and client is refunded.\\n    enum Status { \\n        Draft, Active, Complete, Killed\\n    }\\n\\n    /// @dev Status: Contract is set to default status of 'Draft' on contract creation.\\n    Status private contract_currentStatus;\\n  \\n    // Events\\n    event ReceivedPayout(address, bool, bool);\\n    event RefundedPayment(address, uint);\\n    event ContractActivated(address, uint, uint);\\n    event DepoistedExpertPaynment(address, uint);\\n\\n\\n    /// @notice Functions cannot be called at the current stage.\\n    error InvalidCurrentStatus();\\n\\n\\n    /// Execute on a call to contract if no other functions match given function signature.\\n    fallback() external payable{}\\n\\n\\n    receive() external payable{}\\n\\n\\n    /// @notice This initializer replaces the constructor to is the base input data for a new contract clone instances .\\n    /// @dev initialize(): Is also called within the clone contract in TwaliCloneFactory.sol.\\n    /// @param _adminClient the address of the contract owner who is the acting client.\\n    /// @param _sowMetaData Scope of work of the contract as a URI string.\\n    /// @param _creationDate is passed in from clone factory as the new contract is created.\\n    function initialize(\\n        address _adminClient,\\n        string memory _sowMetaData,\\n        uint _contract_payment_amount,\\n        uint _contract_start_date,\\n        uint _contract_end_date,\\n        uint _creationDate\\n    ) public initializer {\\n        require(!isInitialized, \\\"Contract is already initialized\\\");\\n        require(owner == address(0), \\\"Can't do that the contract already initialized\\\");\\n        owner = _adminClient;\\n        contract_sowMetaData = _sowMetaData;\\n        contract_payment_amount = _contract_payment_amount;\\n        contract_start_date = _contract_start_date;\\n        contract_end_date = _contract_end_date;\\n        contract_created_on = _creationDate;\\n        isInitialized = true;\\n    }\\n\\n    /*\\n    *  Modifiers\\n    */ \\n\\n    /// @notice onlyOwner(): This is added to selected function calls to check and ensure only the 'owner'(client) of the contract is calling the selected function.\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner, \\n            \\\"Only owner can call this function\\\"\\n            );\\n        _;\\n    }\\n\\n    /// @notice This checks that the address being used is the expert address that is activated within the contract. If not, will throw an error.\\n    /// @dev isExpert(): This modifier is added to calls that need to confirm addresses passed into functions it the contract_expert.\\n    /// @param _expert is an address passed in to check if it is expert. \\n    modifier isExpert(address _expert) {\\n        require(_expert == contract_expert, \\\"Not contract expert address\\\");\\n        _;\\n    }\\n\\n    /// @notice This checks that an address being passed into a function is a valid address and not a 0 address.\\n    /// @dev isValid(): Can be used in any function call that passes in a address that is not the contract owner.\\n    /// @param _addr: is normal wallet / contract address string.\\n    modifier isValid(address _addr) {\\n        require(_addr != address(0), \\\"Not a valid address\\\");\\n        _;\\n    }\\n\\n    /// @notice This is added to function calls to be called at at all life cycle status stages,(e.g., only being able to call functions for 'Active' stage).\\n    /// @dev isStatus(): This is checking concurrently that a function call is being called at it's appropriate set stage order.\\n    /// @param _contract_currentStatus is setting the appropriate stage as a base parameter to check to with a function call.\\n    modifier isStatus(Status _contract_currentStatus) {\\n        if (contract_currentStatus != _contract_currentStatus)\\n            revert InvalidCurrentStatus();\\n        _;\\n    }\\n\\n    /// @notice Simple check if werk has been paid out or not.\\n    modifier werkNotPaid() {\\n        require(contract_werkPaidOut != true, \\\"Werk already paid out!\\\");\\n        _;\\n    }\\n\\n    /// @notice Simple check if werk has not been previously approved, (e.g., to check during a payout instance).\\n    modifier werkNotApproved() {\\n        require(contract_werkApproved != true, \\\"Werk already approved!\\\");\\n        _;\\n    }\\n\\n    /// @notice Simple check that funds in contract has not been refunded.\\n    modifier isNotRefunded() {\\n        require(contract_werkRefunded != true, \\\"Refunded already!\\\");\\n        _;\\n    }\\n\\n    /// @notice This is added to a function and once it is completed it will then move the contract to its next stage.\\n    /// @dev setNextStage(): Use's the function 'nextStage()' to transition to contracts next stage with one increment (+1).\\n    modifier setNextStage() {\\n        _;\\n        nextStage();\\n    }\\n\\n\\n\\n    /// @notice Gets the current status of contract.\\n    function getCurrentStatus() public view returns (Status) {\\n        return contract_currentStatus;\\n    }\\n\\n     /// @notice Simple call / read function that returns balance of contract.\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice Refunds payment to Owner / Client of Contract\\n    /// @dev refundClient(): this can only be called within the 'KillDrafContract' function.\\n    function refundClient() \\n        internal \\n    {\\n        contract_werkRefunded = true;\\n        emit RefundedPayment(owner, contract_payment_amount);\\n        uint256 balance = address(this).balance;\\n        contract_payment_amount = 0;\\n        payable(owner).transfer(balance);\\n    }\\n\\n    /// @dev This is the stage transition in the 'setNextStage' modifier.\\n    function nextStage() internal {\\n        contract_currentStatus = Status(uint(contract_currentStatus)+1);\\n    }\\n\\n    /// @notice This will set a 'draft' contract to 'killed' stage if the contract needs to be closed.\\n    function killDraftContract() \\n        external \\n        onlyOwner\\n        isStatus(Status.Draft)\\n    {\\n        contract_currentStatus = Status.Killed;\\n    }\\n\\n    /// @notice This enables the Client to deposit funds to the created contract instance for Expert to be paid (escrow form of contract).\\n    /// @dev depositExpertPayment(): is passed into / called from the activateContract, so that the client can fund the contract in addition to addding in selected Expert.\\n    /// @param _amount is the amount saved variable that is stored within the contract.\\n    function depositExpertPayment(uint _amount) public payable {\\n        require(_amount <= msg.value, \\\"Wrong amount of ETH sent\\\");\\n\\n        emit DepoistedExpertPaynment(msg.sender, msg.value);\\n    }\\n\\n    /// @notice This is a contract activation to intialize Client & Expert Commencing werk.\\n    /// @dev activateContract(): Add's in selected Expert and activates Contract for Expert to begin completing werk.\\n    /// @param _contract_expert is the address of who is completing werk and receiving payment for werk completed.\\n    function activateContract(\\n        address _contract_expert)\\n        external\\n        payable \\n        onlyOwner\\n        isValid(_contract_expert)\\n        isStatus(Status.Draft)\\n        setNextStage \\n    { \\n        emit ContractActivated(contract_expert, \\n                               contract_start_date, \\n                               contract_payment_amount);\\n        contract_expert = payable(_contract_expert); \\n        depositExpertPayment(contract_payment_amount);\\n    }\\n\\n    /// @notice Sets an active contract to 'killed' stage and refunds ETH in contract to the client, who is the set contract 'owner'.\\n    /// @dev killActiveContract(): \\n    function killActiveContract() \\n        external \\n        onlyOwner\\n        isNotRefunded \\n        nonReentrant \\n        isStatus(Status.Active) \\n    {\\n        contract_currentStatus = Status.Killed;\\n        refundClient();\\n    }\\n\\n\\n    /// @notice This is called when an expert completes werk and client will then approve that werk is completed allowing for expert to be paid.\\n    /// @dev approveWorkSubmitted(): \\n    /// \\n    function approveWorkSubmitted() \\n        public \\n        onlyOwner\\n        werkNotApproved\\n        werkNotPaid\\n        isStatus(Status.Active) \\n        nonReentrant\\n        setNextStage \\n    {\\n        contract_werkApproved = true;\\n        contract_werkPaidOut = true;\\n        emit ReceivedPayout(contract_expert, \\n                            contract_werkPaidOut, \\n                            contract_werkApproved);\\n                            \\n        uint256 balance = address(this).balance;\\n        contract_expert.transfer(balance);     \\n    }\\n\\n  \\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InvalidCurrentStatus\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ContractActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DepoistedExpertPaynment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"ReceivedPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RefundedPayment\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract_expert\",\"type\":\"address\"}],\"name\":\"activateContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveWorkSubmitted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_end_date\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_expert\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_payment_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_sowMetaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_start_date\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_werkApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_werkPaidOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contract_werkRefunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositExpertPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentStatus\",\"outputs\":[{\"internalType\":\"enum TwaliContract.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminClient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_sowMetaData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_contract_payment_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contract_start_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contract_end_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_creationDate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killActiveContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killDraftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TwaliContract", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}