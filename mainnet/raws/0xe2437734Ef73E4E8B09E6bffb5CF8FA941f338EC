{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WAS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./Airdrop.sol\\\";\\n\\ninterface IWASNFT {\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n    function ownerOf(uint256 tokenId) external returns (address);\\n}\\n\\ncontract WAS is ERC20, Airdrop, Ownable, IERC721Receiver {\\n    //Master switch\\n    bool private _isContractActive;\\n\\n    //Max supply control\\n    uint256 private _maxSupply;\\n    uint256 private _totalSupply;\\n    uint256 private _claimedTokens;\\n    \\n    //Airdrop status & related settings\\n    bool private _airdropEnabled;\\n    bool private _airdropExpired;\\n    address private _communityLiquidityAddress;\\n    //Addresses eligible for airdrop -- ovo mi mozda ne treba uopste, s obzirom da se vuce iz drugog contracta\\n    // mapping(address => uint256) private _airdrop;\\n\\n    //Hell - Resurrection\\n    bool private _selfHellResurrectionStatus;\\n    bool private _hellResurrectionStatus;\\n    uint256 _publicResurrectionCost; //Cost of public resurrection in WAS utility tokens\\n    uint256 _selftResurrectionCost; //Cost of self-resurrection\\n    \\n    // Mapping of all Satoshis currently in hell / heaven - where the unit index is the satoshi #\\n    mapping(uint256 => bool) private _satoshisInHell;\\n    mapping(uint256 => bool) private _hellVersionSatoshis;\\n    mapping(uint256 => bool) private _heavenVersionSatoshis;\\n    mapping(uint256 => bool) private _restrictedSatoshis; //Unique and Flying satoshis can not be resurrected\\n    uint256[] private _resurrectedSatoshisHell; //Simple array holding all WAS NFT Ids ever resurrected in Hell State\\n    uint256[] private _resurrectedSatoshisHeaven; //Simple array holding all WAS NFT Ids ever resurrected in Heaven State\\n\\n\\n    //Fires when a genesis Satoshi is turned into Hell version Satoshi\\n    event SatoshiHellResurrection(uint256 satoshiId, address newOwner);\\n\\n    //Fires when a genesis Satoshi is turned into Heaven version Satoshi\\n    event SatoshiHeavenResurrection(uint256 satoshiId, address newOwner);\\n\\n    //Fires when a new genesis Satoshi is added to hell and is now available for public resurrection\\n    event SatoshiAddedToHell(uint256 satoshiId);\\n\\n    //Fires on public resurrections\\n    event PublicResurrection(uint256 satoshiId, address resurrectorAddress);\\n\\n    //Control events fired on reciving a new NFT\\n    event incomingNftOperator(address operatorAddress);\\n    event incomingNftFrom(address fromAddress);\\n    event incomingNftId(uint256 nftId);\\n    event incomingNftOwner(address nftOwnerAddress);\\n\\n    //WAS NFT Smart contract and OS Satoshi Hell address\\n    address private _wasNFTSmartContract;\\n    address private _satoshiHellOSAddress;\\n\\n    IWASNFT wasNFTContract = IWASNFT(_wasNFTSmartContract);\\n\\n    constructor(uint256 maxTokenSupply, address wasNftScAddress, address satoshisHellOsAddress, address communityLiquidityAddress) ERC20(\\\"WAS Utility Token\\\", \\\"WAS\\\") public {\\n        _isContractActive = true;\\n        _maxSupply = maxTokenSupply * 1000000000000000000;\\n        _claimedTokens = 0;\\n        _airdropEnabled = true;\\n        _airdropExpired = false;\\n        _communityLiquidityAddress = communityLiquidityAddress; //Ovo treba da se prebaci u metodu mozda\\n        _selfHellResurrectionStatus = true;\\n        _hellResurrectionStatus = true;\\n        _publicResurrectionCost = 25000000000000000000000; //i ovo mozda treba da ide u metodu\\n        _selftResurrectionCost = 100000000000000000000000;\\n        _wasNFTSmartContract = wasNftScAddress;\\n        _satoshiHellOSAddress = satoshisHellOsAddress;\\n        \\n        // Set restricted satoshis\\n        _restrictedSatoshis[1] = true;\\n        _restrictedSatoshis[4] = true;\\n        _restrictedSatoshis[191] = true;\\n        _restrictedSatoshis[350] = true;\\n        _restrictedSatoshis[587] = true;\\n        _restrictedSatoshis[78] = true;\\n        _restrictedSatoshis[989] = true;\\n        _restrictedSatoshis[204] = true;\\n        _restrictedSatoshis[570] = true;\\n        _restrictedSatoshis[122] = true;\\n        _restrictedSatoshis[923] = true;\\n    }\\n\\n    // Airdrop methods\\n    //2do: max supply mora da se ispravi na private i total sypply se smanjuje kada se burnuje, ova metoda ne valja\\n    function claimAirdrop(address to)\\n    public\\n    {\\n        require(_isContractActive, \\\"We'll be back in 5. (Contract is not active at this moment)\\\");\\n\\n        uint256 claimableAmount = getAirdropAmount(to);\\n        require(claimableAmount > 0,\\\"This address is not eligible for WAS utility token airdrop.\\\");\\n        require(_airdropEnabled, \\\"Sorry, WAS utility token airdrop claiming is not enabled at the moment.\\\");\\n        require(_airdropExpired == false, \\\"Sorry, WAS utility airdrop claiming window has expired.\\\");\\n        require(_maxSupply >= (_claimedTokens + claimableAmount),\\\"Invalid claim operation would exceed max token supply limit.\\\");\\n        invalidateAirdrop(to);\\n        _claimedTokens = _claimedTokens + claimableAmount;\\n        _mint(to, claimableAmount);\\n        if (_claimedTokens == _maxSupply) {\\n            _airdropExpired = true;\\n            _airdropEnabled = false;\\n        }\\n    }\\n\\n    function getClaimableTokensAmount(address to)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        uint256 claimableAmount = 0;\\n        if (_airdropExpired == false && _airdropEnabled) {\\n            claimableAmount = getAirdropAmount(to);\\n        }\\n        return claimableAmount;\\n    }\\n\\n    /**\\n    * Resurrection methods\\n    */\\n\\n    //This method is called by users to buy and resurrect Satoshis that are currently in hell\\n    function resurrectHellPublic(uint256 satoshiId)\\n    public\\n    {\\n        require(_isContractActive, \\\"We'll be back in 5. (Contract is not active at this moment)\\\");\\n        require(_heavenVersionSatoshis[satoshiId] == false,\\\"Can not turn a heaven Satoshi into hell Satoshi.\\\");\\n        require(_restrictedSatoshis[satoshiId] == false, \\\"Resurrection of this Satoshi is restricted.\\\");\\n        require(_satoshisInHell[satoshiId],\\\"This Satoshi is not in Hell and it can not be resurrected.\\\");\\n        require(_hellVersionSatoshis[satoshiId] == false, \\\"This Satoshi is already a hell version.\\\");\\n        require(balanceOf(msg.sender) >= _publicResurrectionCost, \\\"You do not have enough tokens to resurrect this Satoshi\\\");\\n\\n        _burn(msg.sender, _publicResurrectionCost);\\n\\n        delete _satoshisInHell[satoshiId];\\n        _hellVersionSatoshis[satoshiId] = true;\\n        _resurrectedSatoshisHell.push(satoshiId); //Record this Satoshi as Hell Version resurrection occured\\n        IWASNFT(_wasNFTSmartContract).safeTransferFrom(address(this), msg.sender, satoshiId);\\n        //wasNFTContract.safeTransferFrom(tokenOwner, msg.sender, satoshiId);\\n        emit SatoshiHellResurrection(satoshiId,msg.sender);\\n        emit PublicResurrection(satoshiId,msg.sender);\\n    }\\n\\n    //This method is called by users to self-resurrect Satoshis they own\\n    //This method should check if the sender owns the Satoshi being resurrected\\n    function selfResurrectHell(uint256 satoshiId)\\n    public\\n    {\\n        require(_isContractActive, \\\"We'll be back in 5. (Contract is not active at this moment)\\\");\\n\\n        //You can not turn heaven Satoshis into hell Satoshis\\n        require(_heavenVersionSatoshis[satoshiId] == false,\\\"Can not turn a heaven Satoshi into hell Satoshi.\\\");\\n        //You can not turn unique and super rare satoshis into hell Satoshis\\n        require(_restrictedSatoshis[satoshiId] == false, \\\"Resurrection of this Satoshi is restricted.\\\");\\n        //You can not turn hell Satoshis into hell Satoshis\\n        require(_hellVersionSatoshis[satoshiId] == false, \\\"This Satoshi is already a hell version\\\");\\n        //You need to have enough WAS tokens to resurrect a Satoshi\\n        require(balanceOf(msg.sender) >= _selftResurrectionCost, \\\"You do not have enough tokens to resurrect this Satoshi.\\\");\\n        //You must own this Satoshi\\n        require(IWASNFT(_wasNFTSmartContract).ownerOf(satoshiId) == msg.sender, \\\"You must own the Satoshi you wish to resurrect.\\\");\\n        \\n        \\n        // Burn utility tokens for the resurrection\\n        _burn(msg.sender, _selftResurrectionCost);\\n\\n        //Add this Satoshi to the map of hell version Satoshis\\n        _hellVersionSatoshis[satoshiId] = true;\\n        \\n        //Make a public record of this resurrection (needed for metadarta conversion)\\n        _resurrectedSatoshisHell.push(satoshiId); //Record the ressurrection\\n\\n        //Resurrection completed, emit the event\\n        emit SatoshiHellResurrection(satoshiId,msg.sender);\\n    }\\n\\n    // Heaven resurrection methods\\n    function resurrectHeavenPublic(uint256 satoshiId)\\n    public\\n    {\\n        require(_isContractActive, \\\"We'll be back in 5. (Contract is not active at this moment)\\\");\\n\\n        //You can not turn unique and super rare satoshis into heaven Satoshis\\n        require(_restrictedSatoshis[satoshiId] == false, \\\"Resurrection of this Satoshi is restricted.\\\");\\n\\n        //You can only turn hell Satoshi into heaven Satoshis\\n        require(_hellVersionSatoshis[satoshiId] == true, \\\"Satoshi must be a hell version before turning it to heaven version\\\");\\n        \\n        //You can not turn heaven Satoshis into heaven Satoshis\\n        require(_heavenVersionSatoshis[satoshiId] == false,\\\"Can not turn a heaven Satoshi into heaven Satoshi.\\\");\\n        \\n        //Is satoshi in hell / available for resurrection?\\n        require(_satoshisInHell[satoshiId] == true,\\\"This Satoshi is not in Hell and it can not be resurrected.\\\");\\n        \\n        //Does sender have enough funds to resurrect this Satoshi?\\n        require(balanceOf(msg.sender) >= _publicResurrectionCost, \\\"You do not have enough tokens to resurrect this Satoshi\\\");\\n\\n        // Burn the resurrection payment\\n        _burn(msg.sender, _publicResurrectionCost);\\n\\n        //Remove Satoshi from hell and list of hell version Satoshis\\n        delete _satoshisInHell[satoshiId];\\n        delete _hellVersionSatoshis[satoshiId];\\n\\n        //Move satoshi to the list of heaven version satoshis\\n        _heavenVersionSatoshis[satoshiId] = true;\\n        _resurrectedSatoshisHeaven.push(satoshiId);\\n\\n        //Transfer the resurrected Satoshi to the resurrector\\n        IWASNFT(_wasNFTSmartContract).safeTransferFrom(address(this), msg.sender, satoshiId);\\n        \\n        //Notify the world about this resurrection\\n        emit SatoshiHeavenResurrection(satoshiId,msg.sender);\\n        emit PublicResurrection(satoshiId,msg.sender);\\n    }\\n\\n    function selfResurrectHeaven(uint256 satoshiId)\\n    public\\n    {\\n        require(_isContractActive, \\\"We'll be back in 5. (Contract is not active at this moment)\\\");\\n\\n        //You can not turn unique and super rare satoshis into heaven Satoshis\\n        require(_restrictedSatoshis[satoshiId] == false, \\\"Resurrection of this Satoshi is restricted.\\\");\\n\\n        //You can only turn hell Satoshis into heaven Satoshis\\n        require(_hellVersionSatoshis[satoshiId] == true, \\\"Satoshi must be a hell version before turning it to heaven version\\\");\\n        \\n        //You can not turn heaven Satoshis into heaven Satoshis\\n        require(_heavenVersionSatoshis[satoshiId] == false,\\\"Can not turn a heaven Satoshi into heaven Satoshi.\\\");\\n\\n        //Does sender have enough funds to resurrect this Satoshi?\\n        require(balanceOf(msg.sender) >= _selftResurrectionCost, \\\"You do not have enough tokens to resurrect this Satoshi\\\");\\n\\n        //You must own this Satoshi\\n        require(IWASNFT(_wasNFTSmartContract).ownerOf(satoshiId) == msg.sender, \\\"You must own the Satoshi you wish to resurrect.\\\");\\n        \\n\\n        // Burn the resurrection payment\\n        _burn(msg.sender, _selftResurrectionCost);\\n\\n        //Remove Satoshi from the list of hell version satoshis\\n        delete _hellVersionSatoshis[satoshiId];\\n\\n        //Move satoshi to the list of heaven version satoshis\\n        _heavenVersionSatoshis[satoshiId] = true;\\n        _resurrectedSatoshisHeaven.push(satoshiId);\\n        \\n        //Notify the world about this resurrection\\n        emit SatoshiHeavenResurrection(satoshiId,msg.sender);\\n    }\\n\\n    function _addSatoshiToHell(uint256 satoshiId)\\n    internal \\n    {\\n        require(_isContractActive, \\\"We'll be back in 5. (Contract is not active at this moment)\\\");\\n        require(satoshiId <= 1024,\\\"Satoshi outside of the NFT collection size.\\\");\\n        require(satoshiId > 0,\\\"Satoshi outside of the NFT collection size.\\\");\\n        require(_satoshisInHell[satoshiId] == false,\\\"Satoshi already in hell.\\\");\\n        require(_restrictedSatoshis[satoshiId] == false, \\\"Resurrection of this Satoshi is restricted.\\\");\\n        require(_heavenVersionSatoshis[satoshiId] == false,\\\"Can not add heaven Satoshis to hell.\\\");\\n         \\n        _satoshisInHell[satoshiId] = true;\\n        emit SatoshiAddedToHell(satoshiId);\\n    }\\n\\n    //Only accept satoshis from WAS OS Satoshi Hell wallet\\n    function onERC721Received(address operator, address from, uint256 satoshiId, bytes memory)\\n    public\\n    virtual\\n    override\\n    returns (bytes4) {\\n        require(_isContractActive, \\\"We'll be back in 5. (Contract is not active at this moment)\\\");\\n        require(from == _satoshiHellOSAddress, \\\"No thank you, I am not sure this is a WAS NFT.\\\");\\n        require(IWASNFT(_wasNFTSmartContract).ownerOf(satoshiId) == address(this), \\\"This Satoshi does not belong to this smart contract.\\\");\\n       \\n        if (from == _satoshiHellOSAddress) {\\n            _addSatoshiToHell(satoshiId);\\n            emit incomingNftOperator(operator);\\n            emit incomingNftFrom(from);\\n            emit incomingNftId(satoshiId);\\n            return this.onERC721Received.selector;\\n        }\\n    }\\n\\n\\n    /**\\n    * Setters\\n    * The methods below are ownerOnly methods used to configure various properties of the smart contract.\\n    * These methods are also used to control various states of the contract.\\n    */\\n    function manualAddSatoshiToHell(uint256 satoshiId)\\n    public\\n    onlyOwner \\n    {\\n        require(IWASNFT(_wasNFTSmartContract).ownerOf(satoshiId) == address(this), \\\"This Satoshi does not belong to this smart contract.\\\");\\n        _addSatoshiToHell(satoshiId);\\n    }\\n\\n    function setSelfResurrectionPrice(uint256 newPrice)\\n    public\\n    onlyOwner\\n    {\\n        _selftResurrectionCost = newPrice * 1000000000000000000;\\n    }\\n\\n    function setPublicResurrectionPrice(uint256 newPrice)\\n    public\\n    onlyOwner \\n    {\\n        _publicResurrectionCost = newPrice * 1000000000000000000;\\n    }\\n\\n    function toggleContract()\\n    public\\n    onlyOwner\\n    {\\n        _isContractActive = !_isContractActive;\\n    }\\n\\n    function toggleAirdrop()\\n    public\\n    onlyOwner\\n    {\\n        _airdropEnabled = !_airdropEnabled;\\n    }\\n\\n    // Mint all utility tokens that were not claimed during the airdrop and transer them to the community wallet.\\n    function expireAirdrop()\\n    public\\n    onlyOwner\\n    {\\n        require(_airdropEnabled == false, \\\"Can not expire the airdrop until it's enabled.\\\");\\n        require(_airdropExpired == false, \\\"Airdrop already expired. Can not expire the airdrop again.\\\");\\n        _airdropExpired = true;\\n\\n        uint256 remainingTokens = _maxSupply - _claimedTokens;\\n        if (remainingTokens > 0) {\\n            _mint(_communityLiquidityAddress, remainingTokens);\\n            _claimedTokens = _claimedTokens + remainingTokens;\\n        }\\n    }\\n\\n    function setCommunityLiquidityAddress(address newCommunityAddress)\\n    public\\n    onlyOwner\\n    {\\n        _communityLiquidityAddress = newCommunityAddress;\\n    }\\n    //If needed, to change the interfacing address for WAS NFT smart contract\\n    function setWasSmartContractAddress(address newSCAddress)\\n    public\\n    onlyOwner\\n    {\\n        _wasNFTSmartContract = newSCAddress;\\n    }\\n\\n    function setSatoshisHellOsAddress(address newSatoshisHellOsAddresss)\\n    public\\n    onlyOwner \\n    {\\n        _satoshiHellOSAddress = newSatoshisHellOsAddresss;\\n    }\\n\\n\\n\\n\\n\\n\\n    // Public getters\\n    /**\\n    * The methods below are used to get/read various internal vars/information from the contract.\\n    */\\n    function isSatoshiInHell(uint256 satoshiId)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        return _satoshisInHell[satoshiId];\\n    }\\n\\n    function getResurrectedSatoshisHell()\\n    external\\n    view\\n    returns(uint256[] memory) {\\n        return _resurrectedSatoshisHell;\\n    }\\n\\n    function getResurrectedSatoshisHeaven()\\n    external\\n    view\\n    returns(uint256[] memory) {\\n        return _resurrectedSatoshisHeaven;\\n    }\\n\\n    function isSatoshiHellVersion(uint256 satoshiId)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        return _hellVersionSatoshis[satoshiId];\\n    }\\n\\n    function isSatoshiHeavenVersion(uint256 satoshiId)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        return _heavenVersionSatoshis[satoshiId];\\n    }\\n\\n    function getMaxSupply()\\n    public\\n    view\\n    returns (uint256) {\\n        return _maxSupply;\\n    }\\n\\n    function getTotalTokensClaimed()\\n    public\\n    view\\n    returns(uint256)\\n    {\\n        return _claimedTokens;\\n    }\\n\\n    //How many tokens left?\\n    function getRemainingTokens()\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        uint256 remainingTokens = _maxSupply - _claimedTokens;\\n        return remainingTokens;\\n    }\\n\\n    function getAirdropStatus()\\n    public\\n    view\\n    returns (bool)\\n    {\\n        return _airdropEnabled;\\n    }\\n\\n    function getPublicResurrectionCost()\\n    public\\n    view\\n    returns(uint256) {\\n        return _publicResurrectionCost;\\n    }\\n\\n    function getSelfResurrectionCost()\\n    public\\n    view\\n    returns(uint256) {\\n        return _selftResurrectionCost;\\n    }\\n\\n    function getWASNftContract()\\n    public\\n    view\\n    returns(address) {\\n        return _wasNFTSmartContract;\\n    }\\n\\n    function getWasCommunityWallet()\\n    public\\n    view\\n    returns(address)\\n    {\\n        return _communityLiquidityAddress;\\n    }\\n\\n    function getWasOsHellAddress()\\n    public\\n    view\\n    returns(address)\\n    {\\n        return _satoshiHellOSAddress;\\n    }\\n\\n    function getContractState()\\n    public\\n    view\\n    returns(bool)\\n    {\\n        return _isContractActive;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/Airdrop.sol\": {\r\n      \"content\": \"//Contract based on https://docs.openzeppelin.com/contracts/3.x/erc721\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\ncontract Airdrop {\\n    mapping(address => uint256) private _airdrop;\\n\\tconstructor() {\\n        _airdrop[0x48E0Bb3A663529887982B94787E9E6C7fc497449] = 30000000000000000000000;\\n        _airdrop[0x6DFaEA023567DF25E4b1f0E05EF5443aC5C26Ed9] = 50000000000000000000000;\\n        _airdrop[0x204Ce9E684DdCEADaEfbBB0d5A4bC7eb481b57E4] = 50000000000000000000000;\\n        _airdrop[0x63EE9d3BF50bD5315E53Cd2C723719e6Cf0e3C96] = 30000000000000000000000;\\n        _airdrop[0x7358B3dD144332377c14D8A47844E05A1b6f50aC] = 10000000000000000000000;\\n        _airdrop[0x615dd68D8254a0D29b212A5Be73b00674D540c02] = 10000000000000000000000;\\n        _airdrop[0xDf3759cc2277aDcDB0a97b8AC1469a6EddBC6A8d] = 10000000000000000000000;\\n        _airdrop[0x64C9fb6C978f0f5dd46CB36325b56c04243bAB75] = 30000000000000000000000;\\n        _airdrop[0xa4D26fC0814a8dacef55A79166291DD0898a8194] = 20000000000000000000000;\\n        _airdrop[0xA4f6F09F546e2B0E160906564DD8e396c891318F] = 40000000000000000000000;\\n        _airdrop[0xb9C5878a4891942C43A20b11C53a76961426bAD2] = 50000000000000000000000;\\n        _airdrop[0xA23A702Df9d7a2b5C7c2Aa87Df295F85A4CE3ac3] = 10000000000000000000000;\\n        _airdrop[0xcAC21e79De5FAc9FcA03fbe3cE050B9116689eB2] = 90000000000000000000000;\\n        _airdrop[0x1e27F3175a52877CC8C4e3115B2669037381DeDc] = 50000000000000000000000;\\n        _airdrop[0x017395053f29De984F0bB008C20A99365CD9172c] = 10000000000000000000000;\\n        _airdrop[0xF0ba012eC6090369E623eE5EE8a3D3A99e2977b2] = 20000000000000000000000;\\n        _airdrop[0xF2E81438e26FcE88cC8deBf8C178b80A506cE435] = 50000000000000000000000;\\n        _airdrop[0xb1D610fB451b5cdee4eADcA4538816122ad40E1d] = 70000000000000000000000;\\n        _airdrop[0x2d907A917Dc848843Cc3397D4a9d3B10023fDeE4] = 10000000000000000000000;\\n        _airdrop[0x8cD0E99c9ED5D40cE84737Bf9C9969C6b7c13a53] = 10000000000000000000000;\\n        _airdrop[0x4384293860C81Dc6a8A248a648B6dCa35fF3aA33] = 70000000000000000000000;\\n        _airdrop[0xBD513191C04051fC789BC0274095b8137ec2C790] = 20000000000000000000000;\\n        _airdrop[0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2] = 90000000000000000000000;\\n        _airdrop[0xD53B7F0bf1f1ccd199B46BE2fE79087154EFcdDA] = 10000000000000000000000;\\n        _airdrop[0x3052Dd6cFC8A09611D4d3d2430Ff5d8F43B2A22b] = 30000000000000000000000;\\n        _airdrop[0x0E862E0F9dFc849F95a0B5D64D5f16295373ff92] = 10000000000000000000000;\\n        _airdrop[0x2476c7F826339679dD3CfAFCaD72fA2fFa700b9d] = 60000000000000000000000;\\n        _airdrop[0x405EB35A58a0C88d9E193D4cB7e61c4Adf2fbcdF] = 30000000000000000000000;\\n        _airdrop[0xa214c5d496e7Dfa5c4DD3df5F6500b00aD746E96] = 20000000000000000000000;\\n        _airdrop[0x97874cf634457f07E7f1888C5C47D70DFAA542cb] = 80000000000000000000000;\\n        _airdrop[0x2e76E93931238E2eDFc245f16BD96f8779e21B51] = 80000000000000000000000;\\n        _airdrop[0x72a0726Ae7a9054476a8C7E759962A4dA667175F] = 30000000000000000000000;\\n        _airdrop[0x45BB3A3f57061f590Fa8AB7170D60f0C95Ce6eeB] = 10000000000000000000000;\\n        _airdrop[0xE008C844625CE7Eb4528d5E17fC2B6D782582cA7] = 10000000000000000000000;\\n        _airdrop[0xA219F044dc6d726f61249c7279EcFa457D6Aaea2] = 20000000000000000000000;\\n        _airdrop[0xA7bD22BcFC1eAE5f9944978d81ff71Bd5f5eAF42] = 20000000000000000000000;\\n        _airdrop[0xFD8E43431Bcdc2b42a28A95818077af7924c8F83] = 70000000000000000000000;\\n        _airdrop[0x6cb603c1967a32bb7b0726EcbCbB8c3A16b1c299] = 60000000000000000000000;\\n        _airdrop[0x5c4668d494C6Af375a20782727Ec2084605DDB64] = 30000000000000000000000;\\n        _airdrop[0x034B76cb6539F40be7853FD3F76aeb69E6A62677] = 30000000000000000000000;\\n        _airdrop[0x81083379a8c41501B39986D5C74428Dd618EB440] = 30000000000000000000000;\\n        _airdrop[0x7F2a2d2B16e889f954C79ec67CD42c2d4A1524Ee] = 30000000000000000000000;\\n        _airdrop[0xBa94281fC202399b77daC078722548Bd0faDB530] = 100000000000000000000000;\\n        _airdrop[0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2] = 100000000000000000000000;\\n        _airdrop[0x8951A87Adf50b555034B47D103875A1613B003B6] = 10000000000000000000000;\\n        _airdrop[0xf4015e422b95255671F4338B0a0819cfcDFC3517] = 10000000000000000000000;\\n        _airdrop[0x4bb74e3F27A41f0cC58A1696D61EFd4E4A754eD7] = 180000000000000000000000;\\n        _airdrop[0x197d43E5E7A3F662FEFF43119654AF1d6C7852E0] = 10000000000000000000000;\\n        _airdrop[0xBFc007C6D7dEb895643bf457060519137BbD2C8C] = 30000000000000000000000;\\n        _airdrop[0x3D75392bF1aC7C0617e639DCb5F58a156BE74fF8] = 10000000000000000000000;\\n        _airdrop[0x537DB9f04E5Be41dDE98d2684E0576638de3bF3D] = 10000000000000000000000;\\n        _airdrop[0xaEabe7513BB61325E22c0D7Fd7B2804b3e2C9C28] = 20000000000000000000000;\\n        _airdrop[0x7cA7Db1299e7Da45aBB55d274A18ec6eA53d66b8] = 60000000000000000000000;\\n        _airdrop[0xb87E63c791568E2ebE4b6E2DdB8a078F5B0B6BA5] = 100000000000000000000000;\\n        _airdrop[0x8093dda1fEdAC34a23540D6E75831800Dd9ea77A] = 60000000000000000000000;\\n        _airdrop[0x38aB518405bF4F84Add1508819d3beEe005976dB] = 50000000000000000000000;\\n        _airdrop[0x369DCD945f2ec96EFC489D9541b47cCa9594E9Fc] = 10000000000000000000000;\\n        _airdrop[0x2C42E8F3dBA3C17E765702FbC6918DeFeb76cd5f] = 10000000000000000000000;\\n        _airdrop[0x38c05b9B18f8B512CFDCE9bCFD0e57030344f602] = 20000000000000000000000;\\n        _airdrop[0xf98a9aCC1aAd53Abe8fD91A9BeB4537845960C76] = 40000000000000000000000;\\n        _airdrop[0xB0B7aBccD78a560955eaD86a34eae2F0B6f0199E] = 20000000000000000000000;\\n        _airdrop[0xdc90C6705c148e28970b108Efd1b5d4B5DAa0e46] = 10000000000000000000000;\\n        _airdrop[0x9309F2Ed55De312FDf51368593db75dE39369173] = 20000000000000000000000;\\n        _airdrop[0x72988B423c86afed473278E8d19a79456C404995] = 70000000000000000000000;\\n        _airdrop[0xA14B8d5E0687e63F9991E85DC17287f17d858731] = 10000000000000000000000;\\n        _airdrop[0x75AbF28b9CAe8edb0c1209efF172f9420CC63549] = 30000000000000000000000;\\n        _airdrop[0x5aDa65374aeF473fdD122feB78a17f4be5688ED0] = 130000000000000000000000;\\n        _airdrop[0xE037e26E4eB6ed3FE6d1383bc24217B461C82FA5] = 80000000000000000000000;\\n        _airdrop[0xF193B488B0384708ec4F0a1c6be3eD9BefC1Ee86] = 60000000000000000000000;\\n        _airdrop[0x6F14AFA784Ff0c764ecCB5F7A133403D5b7a4D34] = 80000000000000000000000;\\n        _airdrop[0x004196E84C7320EbB2e90e8dC4e0a766d3aaC8Db] = 20000000000000000000000;\\n        _airdrop[0xC649195a06E36041a394aEB3f3dF5F381724fFC8] = 20000000000000000000000;\\n        _airdrop[0x4e96CA2FC750520d508FadeD30C8B4bb479eE5BB] = 10000000000000000000000;\\n        _airdrop[0x60F444A38d8792EeD42E6E091E64216F93ceEeb8] = 20000000000000000000000;\\n        _airdrop[0xb261F055621fb3D19b86CD87d499b5aD9a561115] = 20000000000000000000000;\\n        _airdrop[0x85D3c6be944F7fF76968C79Fa7CE409F0a3734B6] = 30000000000000000000000;\\n        _airdrop[0x995418c315Ff98763dCe8e57695f1C05548b4eF5] = 20000000000000000000000;\\n        _airdrop[0x2CD99E5F701aEBE4E44e64c8062afad53F290BD3] = 10000000000000000000000;\\n        _airdrop[0xC93e7FEc09E54ECbbAE66754159989E44FB12aD2] = 20000000000000000000000;\\n        _airdrop[0xeBC5258E2810d9f1CE9e545930E5b931D2706191] = 20000000000000000000000;\\n        _airdrop[0x4C7688fB4Dc24F34E837ee6D5D25EB2Fa2B07235] = 40000000000000000000000;\\n        _airdrop[0x1C163b72D5a6bCA2Fc0535A1df2Bbc39fBaed2F5] = 10000000000000000000000;\\n        _airdrop[0x0e0bDf28A0324dD3639520Cd189983F194132825] = 30000000000000000000000;\\n        _airdrop[0x1aFF55f3BAfE7b83BE9Fbc82237a95Fb8d557e60] = 30000000000000000000000;\\n        _airdrop[0xd9a83959B85F191a5A9FFEf6B4A99b27d1edF40D] = 30000000000000000000000;\\n        _airdrop[0x2628d76a52ef36CD1E440f061D81D155907c500b] = 10000000000000000000000;\\n        _airdrop[0x01C9a2bbb109a24E86535bB41007cd15a0177C11] = 50000000000000000000000;\\n        _airdrop[0xE18bB67496ee8d43D1dd63d63ff0cBF672a65fef] = 10000000000000000000000;\\n        _airdrop[0xbda1825F4DD9B737e4719812f278F354433A6c4E] = 110000000000000000000000;\\n        _airdrop[0xe0d9A11C43079a6fd38d4F0F9D27282AbB8c71Cd] = 10000000000000000000000;\\n        _airdrop[0x82072FDB7EB0CCB624fd2914A4e8a712C782FA8f] = 20000000000000000000000;\\n        _airdrop[0x5Ae546E442355e4F3c7b48fFe575FD40dFcbFa4a] = 10000000000000000000000;\\n        _airdrop[0xEd62B641dB277c9C6A2bA6D7246A1d76E483C11C] = 20000000000000000000000;\\n        _airdrop[0x07142d97b560Bf6B630f8B74747e707C4B139fb0] = 20000000000000000000000;\\n        _airdrop[0xefc90868fB7397D13Bf542eda85D03FEbDDe28BB] = 80000000000000000000000;\\n        _airdrop[0x2A17068BC37705fA1710dC8bFd1EE49Bc0b432b0] = 50000000000000000000000;\\n        _airdrop[0x3061E89523544f002D49cDff2e4825eC05e574C7] = 10000000000000000000000;\\n        _airdrop[0x835feEBEbe8b607eFf3ca85a4E22Bf712f19ed21] = 20000000000000000000000;\\n        _airdrop[0x5A6bdC17B9F89Cb52b38dad319dF293b037a43d4] = 30000000000000000000000;\\n        _airdrop[0x66aB275551Fa8f0E3F823858ED744F74fd9067bD] = 10000000000000000000000;\\n        _airdrop[0x208Eff61de4d585bf1983fdaA5eE9E6c0A92D938] = 40000000000000000000000;\\n        _airdrop[0x35d50ceB03933Da0e3d0D970aBCAfA32F269181d] = 250000000000000000000000;\\n        _airdrop[0x4a8A003acC8a2c0329286e46650bE18dfe2cb12d] = 50000000000000000000000;\\n        _airdrop[0x682ae71bae517bcc4179a1d66223fcDfFb186581] = 50000000000000000000000;\\n        _airdrop[0xCb7566fd2C7F63794C31E63Bc261e437F0ccCb28] = 20000000000000000000000;\\n        _airdrop[0xd469CD19CEFA18e4eb9112e57A47e09398d98766] = 20000000000000000000000;\\n        _airdrop[0xe8F7B0F38c288D49D19857e96Ec88cDd7eb9A2B9] = 20000000000000000000000;\\n        _airdrop[0x6dDa282E7d11C38eb06e1cBad60c0767be39a3F6] = 20000000000000000000000;\\n        _airdrop[0x4d140380DE92396cE3Fa583393257a7024a2b653] = 100000000000000000000000;\\n        _airdrop[0x4B9fC228C687f8Ae3C7889579c9723b65882Ebd9] = 40000000000000000000000;\\n        _airdrop[0x87689C4e28200de1f0313A98080B4428490F7285] = 10000000000000000000000;\\n        _airdrop[0x1d4eb3b64Cee406B087591C5d8933005E5145e4a] = 30000000000000000000000;\\n        _airdrop[0xE96Db1b8ea6432E692a1CaA9dCf07662610AC04D] = 10000000000000000000000;\\n        _airdrop[0xD77D92f3C97B5ce6430560bd1Ab298E82ed4E058] = 30000000000000000000000;\\n        _airdrop[0x6955e29a59BF3748F62C2e8b8877A36d503D6d45] = 10000000000000000000000;\\n        _airdrop[0xa94c5f196a8C76c869AA712253d35102d1EAd6D5] = 10000000000000000000000;\\n        _airdrop[0xb78D0133b00Cb701887D5b009a9e9BD92459D46f] = 10000000000000000000000;\\n        _airdrop[0xC15f55d4381473A51830196d0307c2987e9A39d9] = 30000000000000000000000;\\n        _airdrop[0x822166Dc6A1ADc21ae1B7fbA3b700167cf0f0a6c] = 40000000000000000000000;\\n        _airdrop[0xdDafB7c4fEd00D11080f53b9EfaAA0CB1aB5cEf8] = 20000000000000000000000;\\n        _airdrop[0x2BEa720a5fe5e7738d775e8BfD3a37Fa072Cd46c] = 10000000000000000000000;\\n        _airdrop[0xCb46d80af2FCbC442E644fC360593d6abF4d3258] = 20000000000000000000000;\\n        _airdrop[0xaA4ba5752ED40b31BDDcD450b17649D88994dE2b] = 30000000000000000000000;\\n        _airdrop[0x13bCF25E17a633FAE7cfb62bfe92b53F227d722f] = 30000000000000000000000;\\n        _airdrop[0x087e269f123F479aE3Cf441657A8739236d36aEe] = 20000000000000000000000;\\n        _airdrop[0x876b32129a32B21d86c82b0630fb3c6DDBB0e7B8] = 20000000000000000000000;\\n        _airdrop[0x3C132E2d16f7452bdfAEFaE6C37b81e0FF83e749] = 70000000000000000000000;\\n        _airdrop[0x2c1a74debC7f797972EdbdA51554BE887594008F] = 20000000000000000000000;\\n        _airdrop[0x2F3282c956B65641E9d6D5F70262724FD32d2513] = 120000000000000000000000;\\n        _airdrop[0x635123F0a1e192B03F69b3d082e79C969A5eE9b0] = 150000000000000000000000;\\n        _airdrop[0xe4125A48C86C4281E8c02d71F5073516684da9dA] = 20000000000000000000000;\\n        _airdrop[0xE495C36e756Ba677D5Ae8fb868f8c8A41cc51611] = 50000000000000000000000;\\n        _airdrop[0x7d48f0AD0b2187C30Bb1cc6e930fB960161d3d6c] = 10000000000000000000000;\\n        _airdrop[0x42Ba24C0E282cB2F2732D305960ede5eDC3a6896] = 10000000000000000000000;\\n        _airdrop[0x69AE208ea38d55649dc6a49431557393a72149e9] = 10000000000000000000000;\\n        _airdrop[0xf6152a61dd9E41bc4b1DE9563fEe3b4162e6AdEE] = 140000000000000000000000;\\n        _airdrop[0xfd04340F02398520296bE10f785e6Ee1f0F36b85] = 50000000000000000000000;\\n        _airdrop[0x70Eb382597C564c6eAbFbf2971Cb48bD98A4bEdb] = 30000000000000000000000;\\n        _airdrop[0x2eea4706F85b9A2D5DD9e9ff007F27C07443EAB1] = 30000000000000000000000;\\n        _airdrop[0x2B7cD3Fec35fb21eFc8913E7383639adb088384B] = 20000000000000000000000;\\n        _airdrop[0x3f6a989786FD0FDAE539F356d99944e5aA4fBae1] = 20000000000000000000000;\\n        _airdrop[0xcD79853e46082e521E20f31c39Aff11adE79b8c6] = 10000000000000000000000;\\n        _airdrop[0x5Ee580933a9579c21Ef9187Bf485A4C8F35D3a92] = 20000000000000000000000;\\n        _airdrop[0x1D33BBe15f7CBe45676F3663340Ae6e8B2Bc5DE4] = 20000000000000000000000;\\n        _airdrop[0x215867219e590352f50f5c3B8cE2587236138494] = 20000000000000000000000;\\n        _airdrop[0x9c8bd5847971f024491b893063bE77b31E091117] = 10000000000000000000000;\\n        _airdrop[0x8bc3A620F67C4e0039AAD661Ed069C2E6Ad5faa3] = 20000000000000000000000;\\n        _airdrop[0x1877e5A2B21dBC2EB73eC1b8838461e080932A9f] = 20000000000000000000000;\\n        _airdrop[0xedE6D8113CF88bbA583a905241abdf23089b312D] = 20000000000000000000000;\\n        _airdrop[0xd8BD12bcdbDbf8F216127640F2590942b5E2F336] = 30000000000000000000000;\\n        _airdrop[0xc8c626980f06e95825cf2e12F762D2eaB8CA7b46] = 30000000000000000000000;\\n        _airdrop[0xA47603B00307Bf81A2f49176BBfbf600322Dc2a1] = 20000000000000000000000;\\n        _airdrop[0xcE9135ab7aEBe4a1Ff175e0bE2f9a25a0fb78a83] = 10000000000000000000000;\\n        _airdrop[0x399190C47dD486A553dEDCbD5465f811ab15C32B] = 50000000000000000000000;\\n        _airdrop[0x131E8fbB001DaFb01d96B87B2bb58Aa524c6BdA5] = 10000000000000000000000;\\n        _airdrop[0xC992c764a5dD14dd5Bd6F662a14377E1Cf7e31df] = 50000000000000000000000;\\n        _airdrop[0x4A90601B49605B3998A5339833763931D9BD4918] = 20000000000000000000000;\\n        _airdrop[0x7705cCfC1E1aAf09d24070F17e6eb64629e0F361] = 10000000000000000000000;\\n        _airdrop[0x140Eef04d2392C72403C046509555A779aF40957] = 10000000000000000000000;\\n        _airdrop[0xDCC15c04963095154aBa0131462C5F4b5284b7c0] = 30000000000000000000000;\\n        _airdrop[0xc4dFEa5E0D1DDAABca605E86Cc57ab7df9665a0a] = 20000000000000000000000;\\n        _airdrop[0x7fc0aB0667981a5F8cd18306360327386e217310] = 80000000000000000000000;\\n        _airdrop[0xBa6A7deF11Cc2d880D9cB3663350F6D571878af2] = 10000000000000000000000;\\n        _airdrop[0xa7BFc3Fb947Bd41B85Cf759900012456B0d39090] = 20000000000000000000000;\\n        _airdrop[0xd8FA256F9Fa47De1091441CD7D50644CE7CF5C50] = 10000000000000000000000;\\n        _airdrop[0x5AC15cF56DFFc5240Fa9e559FAEfE9cD31aDFDAC] = 10000000000000000000000;\\n        _airdrop[0x3723DDeC18A8F59CFC2bED4AEDe5e5Bebdf21712] = 20000000000000000000000;\\n        _airdrop[0x6dF83e206951f9C421e6ef9d2dC7BE0b5112D031] = 10000000000000000000000;\\n        _airdrop[0xE4E83eF0AA0e22506cf920434A3b1d9685DBD171] = 20000000000000000000000;\\n        _airdrop[0xFA9E14bAf401253e478Cb2378b911A76A535e697] = 20000000000000000000000;\\n        _airdrop[0xf64980B3f3EA14b1235f248B9BCA6853F0356F7F] = 50000000000000000000000;\\n        _airdrop[0xc564D44045a70646BeEf777469E7Aa4E4B6e692A] = 20000000000000000000000;\\n        _airdrop[0x81b4EA3D93f36506c0Ab3559a2401fe6698D5FdA] = 20000000000000000000000;\\n        _airdrop[0x632Ba722F95008963Be23dcd37CbaC3598182dAE] = 20000000000000000000000;\\n        _airdrop[0x06Df3F02E84F7034CF70f52cdf5Cdc0Ab02F6Fea] = 50000000000000000000000;\\n        _airdrop[0x8a9dF68963A68379Ad48245377eE172CbA56b92E] = 10000000000000000000000;\\n        _airdrop[0xb6ddE9a985c77d7bC62B171582819D995a51C3bf] = 30000000000000000000000;\\n        _airdrop[0xEF815e51fdf1Dc91877933bEF8B55375Aa3c34C6] = 10000000000000000000000;\\n        _airdrop[0x386c2f5aAB7392F86e5aF3de097673b7BFc4aE64] = 10000000000000000000000;\\n        _airdrop[0x22a6C7EAE21e6197d2F180673B8f939e0B2fAe8B] = 10000000000000000000000;\\n        _airdrop[0xE4324E43Ae3e8a611E927dF10795D3A20152aE4a] = 10000000000000000000000;\\n        _airdrop[0xb7153a50412beAebA3E9384460B75A7abcBF7d15] = 10000000000000000000000;\\n        _airdrop[0xF8f18ff9969aB94299e763e038902262002341CD] = 20000000000000000000000;\\n        _airdrop[0x4624865DAE01e0A152155e853b6cABBBe9eD24b9] = 80000000000000000000000;\\n        _airdrop[0x3f632222501F1342DCE8dE9D50d58E979bae5e2f] = 10000000000000000000000;\\n        _airdrop[0xDbfBc6B71CD26A88aaC7eBf01806614592d046d5] = 10000000000000000000000;\\n        _airdrop[0x9Fe658b1487E392b778B9d256020D532a3Cc19c2] = 10000000000000000000000;\\n        _airdrop[0x2711831f3EbCc36541aAc7cA4B0dDfaC56D0E2e0] = 30000000000000000000000;\\n        _airdrop[0x3908176C1802C43Cf5F481f53243145AcaA76bcc] = 20000000000000000000000;\\n        _airdrop[0xeFf626B4beBBd3f26cbA77b47e9ae6C9326cfebB] = 50000000000000000000000;\\n        _airdrop[0xE057B08e0D2DEda77BAFe0B7797bb0bb8d174E11] = 100000000000000000000000;\\n        _airdrop[0xd42F1B8778811aD583dc82ebe2814B3CC21192DF] = 20000000000000000000000;\\n        _airdrop[0x8Bf52d54578d06724A989906D47c7B021612E502] = 20000000000000000000000;\\n        _airdrop[0xC27e35f8AeE69c978d3360d30f973e798a1702Ef] = 20000000000000000000000;\\n        _airdrop[0x8A808Ac0a317E1a76C82831037204C9d3D9F9f3F] = 40000000000000000000000;\\n        _airdrop[0x9DB99D5FDedC50F333f3d128b91c435584D55cFC] = 10000000000000000000000;\\n        _airdrop[0xe4EBad58c7B418ACDBb4910cB29cB366DC6B31f8] = 10000000000000000000000;\\n        _airdrop[0xCf13EF0C1C77593902d76701d683141D26fcaB29] = 10000000000000000000000;\\n        _airdrop[0x9dC4568fC6ee6F6c2A00E1C392b23A8E7a401359] = 10000000000000000000000;\\n        _airdrop[0x461B5DD073BE81CaD6752bFcc355d5A252b8E910] = 50000000000000000000000;\\n        _airdrop[0xDA44F55C5ed083E579F0D343DDc97B473bAd9977] = 20000000000000000000000;\\n        _airdrop[0x86C0Cc4EF96577A2B2fAFc6eC62C26Fa30D8c735] = 20000000000000000000000;\\n        _airdrop[0x1c7B307CC027ec9163B1D4AE9d771c16F65598c2] = 10000000000000000000000;\\n        _airdrop[0xcCc487e0b99647d0D699C1FAfD1AEe16f2512fA6] = 10000000000000000000000;\\n        _airdrop[0x6B354c4505F30aDB4B70643a7a3e3Bc375194AA0] = 20000000000000000000000;\\n        _airdrop[0xA613e95408dbEfc3aeCB4630BDE04E757Bc46fD8] = 10000000000000000000000;\\n        _airdrop[0x6424094AaF8D7131C48e865Ad7a9F0A96E9b1329] = 10000000000000000000000;\\n        _airdrop[0xb0B56557092d87DE2A9648Cd9ab1c9B28a4A2B43] = 10000000000000000000000;\\n        _airdrop[0x7515a84722Be2eaACc7308892E21fae8B8D136d8] = 10000000000000000000000;\\n        _airdrop[0xA11c38BD820Ae3e3236e2EE750Ec2A6577173C49] = 10000000000000000000000;\\n        _airdrop[0x3D352A5063eAcfCc67187Db69080dFc219C553eA] = 10000000000000000000000;\\n        _airdrop[0xED114f78CbACf13E33450170162f341277292d54] = 10000000000000000000000;\\n        _airdrop[0x589a22fd4011d46B95891D1610aeBb25A39A1A9B] = 20000000000000000000000;\\n        _airdrop[0x050f062FA14B9da77C12b555656DE1C05dfC8Ab8] = 20000000000000000000000;\\n        _airdrop[0x86161076B6B234B6A56644a03c29aDd03e23eB91] = 10000000000000000000000;\\n        _airdrop[0xFf5772aD26453CD2c5Af595313435Cb825426Fc9] = 10000000000000000000000;\\n        _airdrop[0x96C075f295431C5D9fce55593902579b80fAF4A0] = 20000000000000000000000;\\n        _airdrop[0xB64614e28ccE4eC769c38fB979493016278ce440] = 30000000000000000000000;\\n        _airdrop[0xd968c650d86B6d576B746e31944016773E074f4a] = 10000000000000000000000;\\n        _airdrop[0xcDa8bec81F5090EE74509606FEDaF533148d0b26] = 20000000000000000000000;\\n        _airdrop[0x3090Ae063988b205b7d265121687ff1537c68F1D] = 10000000000000000000000;\\n        _airdrop[0xba4Ac4Db0EbA3da64Aba5D968CDf74CDfd2a6b9a] = 30000000000000000000000;\\n        _airdrop[0xE543F7311d4f97ed2d67Be409cfa353127D7F42B] = 30000000000000000000000;\\n        _airdrop[0xA96329580a8d31d47D2C083DB97066754188dd51] = 20000000000000000000000;\\n        _airdrop[0x0d6E832e8188c308904DE51EA62B43920FE1da46] = 20000000000000000000000;\\n        _airdrop[0x3c0EDd62018cb3c0E4044E3909c58d64CACB8dc3] = 30000000000000000000000;\\n        _airdrop[0x71D645C3CDe10912f98933c7BbA2cd971485A8c0] = 10000000000000000000000;\\n        _airdrop[0x2eE88422FBC9Ed5C4689089b05154887d737d76B] = 30000000000000000000000;\\n        _airdrop[0x27174e4cd394801D6fC316831dEfC16F43a07f55] = 10000000000000000000000;\\n        _airdrop[0xB35Abb65F67fd942fbD0a9fB96Eb2db8791357B2] = 10000000000000000000000;\\n        _airdrop[0x59164085e872594CB33F198C24a3485329dd09D5] = 10000000000000000000000;\\n        _airdrop[0x66B471Cf3ED57Cf8BDA6948ec1B412CFe7c4c266] = 10000000000000000000000;\\n        _airdrop[0x828cDcDc2a006E5EBCA06EEd673BFa8DF897852D] = 50000000000000000000000;\\n        _airdrop[0xA0ac4824CB006EeC9Ee510aac84cF9BB983c9494] = 10000000000000000000000;\\n        _airdrop[0xec7dA9b90713B119969a8309607197e5A8606493] = 20000000000000000000000;\\n        _airdrop[0xFEE8f55463e64b8E252269EF105F31B164619958] = 20000000000000000000000;\\n        _airdrop[0xB7f3045e4EF29D45C0AEbC9E93Ff3053882c5DC9] = 10000000000000000000000;\\n        _airdrop[0x1d2290Ed86055F96526AFB0ff8Fbe201C4eFce39] = 10000000000000000000000;\\n        _airdrop[0x1FC9aD1d4b2Ec8D78CfDA9FC35Cf729b9B49E7B6] = 20000000000000000000000;\\n        _airdrop[0x0E10CCf2995AD7a77908984F134778243D1052A5] = 10000000000000000000000;\\n        _airdrop[0x500bB12d7D453c8a8D16b4167946F11C98F5Aa5E] = 10000000000000000000000;\\n        _airdrop[0x8bfb27fe31e39959Bcc3Ec14ED5031f4F75b6041] = 10000000000000000000000;\\n        _airdrop[0x175F02F6473EcD2E87d450Ef33400C4eE673C387] = 20000000000000000000000;\\n        _airdrop[0xdc9121d70FDb1d997821F8B6146B41f347798dE0] = 40000000000000000000000;\\n        _airdrop[0x8aA2d6C90a402491B325B0cf7d93Ef582754a99e] = 20000000000000000000000;\\n        _airdrop[0xB7752f329b72E71a6066c7d944b0B69fEE970e4d] = 30000000000000000000000;\\n        _airdrop[0x5c5D1c68957EF6E9e46303e3CB02a0e3AecE1678] = 30000000000000000000000;\\n        _airdrop[0x6B4ee11d28ebeee4B933E17865F66d810D14297D] = 10000000000000000000000;\\n        _airdrop[0x5f0Fa6E54B9296622235CC146E02aaEaC667325a] = 70000000000000000000000;\\n        _airdrop[0x015732d3b7cda5826Ae3177a5A16ca0e271eA13F] = 20000000000000000000000;\\n        _airdrop[0xc7Cc0b1e40116574E1750Bc3FbA54f12c97F2319] = 10000000000000000000000;\\n        _airdrop[0xA01481b6fBE54BE00661290f1cE49e14E3Af82Ef] = 50000000000000000000000;\\n        _airdrop[0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1] = 60000000000000000000000;\\n        _airdrop[0x826ae03F697BbD3dAD37E9b34e7a8989d9317fc4] = 30000000000000000000000;\\n        _airdrop[0x1105bF50bE63cdaD34Ff7ac9425C1645e6275E1e] = 20000000000000000000000;\\n        _airdrop[0x0e45305f2203f0a4E430ca046C49Cf1e278a9013] = 10000000000000000000000;\\n        _airdrop[0xd7382dE5A85485Da6a79885E6757B108EBebc758] = 10000000000000000000000;\\n        _airdrop[0xDAFB6e907fC8589894F7d9d44D02c3fb50ffCE31] = 10000000000000000000000;\\n        _airdrop[0x53D881C09448da0112A2FEA60c954D4495B20e71] = 10000000000000000000000;\\n        _airdrop[0xfeAaB37506558E5cF3120A86E597943F89E8B8bE] = 20000000000000000000000;\\n        _airdrop[0xC709ACBD5531E461e39D04A28E36B81F4f6b995d] = 20000000000000000000000;\\n        _airdrop[0x2e47814BaA1Dd59F1e604f26E113Aa37B83276E5] = 20000000000000000000000;\\n        _airdrop[0x2F44B0D306B302edbef4DA019ae4e1005D58De35] = 30000000000000000000000;\\n        _airdrop[0x828B5Fa560a19D8aB8fAf05DE6E3F403e8D5AF21] = 10000000000000000000000;\\n        _airdrop[0xCBF8168418E618C57ea52a6128CDdbC096D3DB37] = 10000000000000000000000;\\n        _airdrop[0xE8d6001443d83E152FDf56d71a79E87B1c55b41b] = 10000000000000000000000;\\n        _airdrop[0xE95B8E7Ba16A19EFE3Ed3eD53fB47aa2319837e2] = 10000000000000000000000;\\n        _airdrop[0xD8eBaD35a992d5A460254383d7e5e5556516e4dA] = 10000000000000000000000;\\n        _airdrop[0x7ac34ed389d1D23BD85eC5edcBABA7C7eB2CD4Ac] = 80000000000000000000000;\\n        _airdrop[0x2b3a7d2b25Cc976F299080cD6A56eb3DB84C55b6] = 10000000000000000000000;\\n        _airdrop[0x7dA052e64fFA097A9819E7cc5F0e2b78f152e145] = 10000000000000000000000;\\n        _airdrop[0xe0debbB1A8b830B0D7A3Fe45A42A7dAd85B21f80] = 50000000000000000000000;\\n        _airdrop[0x206A95f8f2b60ea9D6642b5116e6D46aaa19CBB0] = 10000000000000000000000;\\n        _airdrop[0xC26990939740aAA4a8f4EF7eb212EcD6c31b4C06] = 90000000000000000000000;\\n        _airdrop[0x71a650C9bfF9D83a48Cf6d857D188Ba39C19bB01] = 20000000000000000000000;\\n        _airdrop[0x7403BDD9283EBd871630Fb5deB07cc427A67B3f9] = 10000000000000000000000;\\n        _airdrop[0xFf78bef83d6916b7d4f026C9EFd1E40099031A8B] = 10000000000000000000000;\\n        _airdrop[0x91115D501BC84d9CAf2f09AA3eDe863483FBA19A] = 20000000000000000000000;\\n        _airdrop[0x84FbB28e368946Ec4488fC74aB9E5d3BDfA6fEC2] = 10000000000000000000000;\\n        _airdrop[0x11f1908a8b6DbbDcEd43E920E21B78D9e32e3493] = 50000000000000000000000;\\n        _airdrop[0xe3863A499B65350BB13FB88BdF97Cbbe117cc0a3] = 10000000000000000000000;\\n        _airdrop[0xb08458E7bb184C0a0206d8c0Ce124D331983C1f9] = 10000000000000000000000;\\n        _airdrop[0x057E3520e130d62344C7AfF216568B3d78B89CD0] = 20000000000000000000000;\\n        _airdrop[0x80f3EEe5De1F656369860506d927533210077C5B] = 10000000000000000000000;\\n        _airdrop[0xb994bA33eaB3744020454a843b6FD5008Cea29c0] = 10000000000000000000000;\\n        _airdrop[0x0f15E698556f2c96e8Ed8f0964318dff378eA17f] = 30000000000000000000000;\\n        _airdrop[0x37F12bC1974843aA9657Fd1614a3eF9b08427E51] = 80000000000000000000000;\\n        _airdrop[0xC9793E1129322e28D657c803ac3354e4D9bFaf3E] = 50000000000000000000000;\\n        _airdrop[0xE0cc67a04705D0C7E946C9C5FFBb5a427bC24545] = 10000000000000000000000;\\n        _airdrop[0xcA8A7EFc165a9f31fc46eA7f3A85902bfb478CBD] = 10000000000000000000000;\\n        _airdrop[0xf508cDD187CFEb8Ec46E5430bfaEA449C82698Fe] = 20000000000000000000000;\\n        _airdrop[0xfe8129f030A205eAf338af2dDd34c306B769c090] = 10000000000000000000000;\\n        _airdrop[0x9E688a25aCaA94f4172Cc89B56DD06f4ea22Ff77] = 10000000000000000000000;\\n        _airdrop[0xD7cA49f6E3C90864BC7475a3B2e1B20377D6D820] = 20000000000000000000000;\\n        _airdrop[0x1Cda38092C37cC0D4008f69Da364FcA7E858CE78] = 30000000000000000000000;\\n        _airdrop[0xC4b4f3d707CC2A9C023E2e83fd87D39075f44f05] = 110000000000000000000000;\\n        _airdrop[0x5F4C5ef5Be53Db7631d5257348BBcD354159269A] = 10000000000000000000000;\\n        _airdrop[0xF02068333cB17993CEc1948f42A2244c5Dc5bdd0] = 10000000000000000000000;\\n        _airdrop[0x9945F42389497071Bd0d284B8819D57a2f88D312] = 10000000000000000000000;\\n        _airdrop[0xAC85BCE64Fcf6420a767fD438c9A20c9dBABc2D8] = 10000000000000000000000;\\n        _airdrop[0x46c48a7f5459aC749a1A4AbccED7796e112Da005] = 10000000000000000000000;\\n        _airdrop[0x79B3A621E3e0ce4F240763130C56eAd96f10565E] = 10000000000000000000000;\\n        _airdrop[0x0eaB7c25146423e9CA921D608aC3D436892183AB] = 10000000000000000000000;\\n        _airdrop[0xF3ebaD21AE3f6D5882d097F8EB1D0deAC2C66D00] = 10000000000000000000000;\\n        _airdrop[0x507b621DA61CB0F3581EEC2898E041275E9e4c61] = 10000000000000000000000;\\n        _airdrop[0xf040E96b19B385EEAFDD48487cAec748e80D15f9] = 10000000000000000000000;\\n        _airdrop[0x347E694f5e396924f8Ca8558E9d6600A27c00A07] = 10000000000000000000000;\\n        _airdrop[0x2121287C008f0b52D79d9FC9e9Db0F9F059Fdc49] = 10000000000000000000000;\\n        _airdrop[0xb2D1272E1169497A5d941490FDF0bC6328F5C13e] = 10000000000000000000000;\\n        _airdrop[0x9E750599aFD252b38f5bFF6cb223195346A03592] = 10000000000000000000000;\\n        _airdrop[0x445b34aaab922Ef104eD195D396dA020AFf432Cf] = 10000000000000000000000;\\n        _airdrop[0x18B1146573cEbdF82D8Ce7D7698D172499C95755] = 20000000000000000000000;\\n        _airdrop[0xCC9dA06FCE4750728806a1F324D2bDd2eA84eBe0] = 20000000000000000000000;\\n        _airdrop[0x100cC7048A3290bF5d94dAe865d308fBDdf332CC] = 10000000000000000000000;\\n        _airdrop[0x16dde7bDf083a0A41b6617237a2Af27034cb79eA] = 10000000000000000000000;\\n        _airdrop[0x2758DF847b870e2eD2B343d0c5d2437dDAc70A38] = 10000000000000000000000;\\n        _airdrop[0xe91d95bA259C6D8001a06DeaF02F811baA3e2DFA] = 10000000000000000000000;\\n        _airdrop[0x0045770bbA2805E1631631E7DDc917BA9D4Fc523] = 10000000000000000000000;\\n        _airdrop[0x1Adc7C20666167F49Bc2d1C80C73D157804b6F69] = 20000000000000000000000;\\n        _airdrop[0xC7A7A0c0F1B6b47703792D82185B0624cC3E79A2] = 10000000000000000000000;\\n        _airdrop[0x7F37e41b3C4aBF5500f2c5226A526FC99cCFeE61] = 10000000000000000000000;\\n        _airdrop[0x8B18824aA942bD4cd8410c561Fa4d05B6a0a5f4A] = 10000000000000000000000;\\n        _airdrop[0x3cA33bCcbA02Af638857bE53C18A4e5E622BC406] = 10000000000000000000000;\\n        _airdrop[0x898929d50566138bed1dEB1688919b52AB80aE63] = 10000000000000000000000;\\n        _airdrop[0x4C0D1Ea8a7F7BC2d74ca4E6cCBeFC97CAED8A2f5] = 20000000000000000000000;\\n        _airdrop[0x6b867Ed44Fd4042202156848D9824F9dA255fa43] = 20000000000000000000000;\\n        _airdrop[0x63847477f40C2C1125c3FaCb961A9Fc5a4eD51Db] = 10000000000000000000000;\\n        _airdrop[0xa84a906da6e3EDF1e320fc5e55163738b8B5Dd5F] = 110000000000000000000000;\\n        _airdrop[0xffB20706Ad48Bce88F119C9662364c02078C0280] = 10000000000000000000000;\\n        _airdrop[0xa51d3bEFE1bAF4A0128282163E7A7f3816aDC6B6] = 10000000000000000000000;\\n        _airdrop[0x8D0E10138a1B59D0b47f3ec149715509a21fAc87] = 10000000000000000000000;\\n        _airdrop[0x97843e39b6D0Db171568Bf472C59F75BdD32180f] = 10000000000000000000000;\\n        _airdrop[0x3b6DE55766c443475eE99AFffa42866d845793Ef] = 10000000000000000000000;\\n        _airdrop[0x0Ff987DF044265c19fbDe9586974902279a88FeC] = 10000000000000000000000;\\n        _airdrop[0xb8758CE976308464062C107C264D57dc1a744C69] = 10000000000000000000000;\\n        _airdrop[0xF17f0fE554559441f64Cf2427b8d508cc8D39782] = 10000000000000000000000;\\n        _airdrop[0xCb2544047e2965650df1D12CE1aAcB8E304245a6] = 10000000000000000000000;\\n        _airdrop[0x377fC3b608A46eFC254A21D4B665D1eAc990d08c] = 20000000000000000000000;\\n        _airdrop[0x55c254fe3eC4e8a5d4AA51044359fa0571cDa0db] = 10000000000000000000000;\\n        _airdrop[0xFfa246C39083704ED6b6e82A5a03E3Ed658E3d83] = 860000000000000000000000;\\n\\t}\\n\\n    function invalidateAirdrop(address airdropAddress) \\n    internal\\n    {\\n        delete _airdrop[airdropAddress];\\n    }\\n\\n    function getAirdropAmount(address to)\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        return _airdrop[to];\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wasNftScAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"satoshisHellOsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"communityLiquidityAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"resurrectorAddress\",\"type\":\"address\"}],\"name\":\"PublicResurrection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"}],\"name\":\"SatoshiAddedToHell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SatoshiHeavenResurrection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SatoshiHellResurrection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"incomingNftFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"incomingNftId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"incomingNftOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftOwnerAddress\",\"type\":\"address\"}],\"name\":\"incomingNftOwner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expireAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAirdropStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getClaimableTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicResurrectionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResurrectedSatoshisHeaven\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResurrectedSatoshisHell\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSelfResurrectionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWASNftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWasCommunityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWasOsHellAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"}],\"name\":\"isSatoshiHeavenVersion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"}],\"name\":\"isSatoshiHellVersion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"}],\"name\":\"isSatoshiInHell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"}],\"name\":\"manualAddSatoshiToHell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"}],\"name\":\"resurrectHeavenPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"}],\"name\":\"resurrectHellPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"}],\"name\":\"selfResurrectHeaven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"satoshiId\",\"type\":\"uint256\"}],\"name\":\"selfResurrectHell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCommunityAddress\",\"type\":\"address\"}],\"name\":\"setCommunityLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPublicResurrectionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSatoshisHellOsAddresss\",\"type\":\"address\"}],\"name\":\"setSatoshisHellOsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setSelfResurrectionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSCAddress\",\"type\":\"address\"}],\"name\":\"setWasSmartContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WAS", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000009c4000000000000000000000000000e543f7311d4f97ed2d67be409cfa353127d7f42b0000000000000000000000004bb74e3f27a41f0cc58a1696d61efd4e4a754ed7000000000000000000000000ffa246c39083704ed6b6e82a5a03e3ed658e3d83", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}