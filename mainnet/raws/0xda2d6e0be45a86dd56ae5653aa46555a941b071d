{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/BeastReroll.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface MAMMOTH {\r\n    function burn(address _from, uint256 _amount) external returns (bool);\r\n    function mintMammoth(address _to, uint256 _amount) external returns (bool);\r\n    }\r\n\r\ninterface RWASTE {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    }\r\n\r\ninterface DMT {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    }\r\n\r\ninterface PrimalBeasts {\r\n    function ownerOf(uint256 tokenIDofBeast) external returns (address);\r\n    function setReward(address ownerAddress, uint256 newReward) external;\r\n    function calcNewReward(address from) external view returns(uint256);\r\n    function claimableReward(address) external returns (uint256);\r\n\r\n    }\r\n\r\ncontract mammothReroll is Ownable, ReentrancyGuard {\r\n    \r\n    RWASTE public rwasteHandler = RWASTE(0x5cd2FAc9702D68dde5a94B1af95962bCFb80fC7d);\r\n    DMT public dmtHandler = DMT(0x5b1D655C93185b06B00f7925791106132Cb3ad75);\r\n    MAMMOTH public mammothHandler = MAMMOTH(0xa95ECa953CcF7eBF1a17018db14356DA5Ff92803);\r\n    PrimalBeasts public primalHandler = PrimalBeasts(0xE3c47892E6c71E881eaFF077664E3055A48F8E27);\r\n    \r\n    constructor(){}\r\n    mapping(address => uint256) public claimedReward;\r\n    mapping(address => bool) public approvedAddress;\r\n    bool public mammothEnabled = true;\r\n\r\n    function setReward(address ownerAddress, uint256 newReward) public {\r\n      require(approvedAddress[msg.sender], \"Only controllers can set reward\");\r\n      claimedReward[ownerAddress] = newReward;\r\n    }\r\n\r\n    function activateMammoth(bool mammothGo) external onlyOwner{\r\n        mammothEnabled = mammothGo;\r\n    }\r\n\r\n    function addController(address owner, bool access) external onlyOwner {\r\n        approvedAddress[owner] = access;\r\n    }\r\n\r\n    function claimRewards(address claimer) public nonReentrant{\r\n        require(mammothEnabled, \"Mammoth is paused.\");\r\n        require(claimer == msg.sender || approvedAddress[msg.sender], \"Can't claim for others\");\r\n        uint256 total = ((primalHandler.calcNewReward(claimer) + primalHandler.claimableReward(claimer) - claimedReward[claimer]));\r\n        if (total > 0) {\r\n            mammothHandler.mintMammoth(claimer, total);\r\n        }\r\n        claimedReward[claimer] += (primalHandler.calcNewReward(claimer) + primalHandler.claimableReward(claimer));\r\n    }\r\n\r\n\r\n    function getClaimableReward(address claimer) external returns (uint256){\r\n        return (primalHandler.claimableReward(claimer) + primalHandler.calcNewReward(claimer));\r\n    }\r\n\r\n    function setRWaste(address rWasted) external onlyOwner {\r\n        rwasteHandler = RWASTE(rWasted);\r\n    } \r\n\r\n    function setDMT(address DMTer) external onlyOwner {\r\n        dmtHandler = DMT(DMTer);\r\n    } \r\n\r\n    function setMammoth(address mammothAdder) external onlyOwner {\r\n        mammothHandler = MAMMOTH(mammothAdder);\r\n    }\r\n\r\n    function setPB(address PBAddy) external onlyOwner {\r\n        primalHandler = PrimalBeasts(PBAddy);\r\n    } \r\n\r\n    event mammothRerollEmit(uint256 beast);\r\n    event rwasteRerollEmit(uint256 beast);\r\n    event dmtRerollEmit(uint256 beast);\r\n    uint256 public rerollCost = 50 ether;\r\n    uint256 public rerollDMTCost = 50 ether;\r\n    uint256 public rerollRWASTECost = 20 ether;\r\n\r\n    function changeDMTCost(uint256 newCostDMT) public onlyOwner{\r\n        rerollDMTCost = newCostDMT;\r\n    }\r\n    function changeCost(uint256 newCost) public onlyOwner{\r\n        rerollCost = newCost;\r\n    }\r\n    function changeRWASTECost(uint256 newCostRWASTE) public onlyOwner{\r\n        rerollRWASTECost = newCostRWASTE;\r\n    }\r\n\r\n    address burnWalletDMT = 0xEaf13874Cf4408C71B78c7854Ab9A20ED5Af507d;\r\n    address burnWalletRWASTE = 0xEaf13874Cf4408C71B78c7854Ab9A20ED5Af507d;\r\n    address burnWallet = 0xEaf13874Cf4408C71B78c7854Ab9A20ED5Af507d;\r\n\r\n    function newBurnWallet(address newBurner) public onlyOwner{\r\n        burnWallet = newBurner;\r\n    }\r\n    function newBurnWalletDMT(address newBurner) public onlyOwner{\r\n        burnWalletDMT = newBurner;\r\n    }\r\n    function newBurnWalletRWASTE(address newBurner) public onlyOwner{\r\n        burnWalletRWASTE = newBurner;\r\n    }\r\n    bool public DMTReady = false;\r\n    bool public RWASTEReady = false;\r\n    bool public MammothReady = true;\r\n\r\n    function mammothApprove(bool newState) public onlyOwner{\r\n        MammothReady = newState;\r\n    }\r\n    function DMTApprove(bool newState) public onlyOwner{\r\n        DMTReady = newState;\r\n    }\r\n    function RWASTEApprove(bool newState) public onlyOwner{\r\n        RWASTEReady = newState;\r\n    }\r\n\r\n    function rerollMammoth(uint256 tokenID) public{\r\n        require(primalHandler.ownerOf(tokenID) == msg.sender, \"Must own token\");\r\n        require(MammothReady, \"Rerolls not active\");\r\n        if (((primalHandler.calcNewReward(msg.sender) + primalHandler.claimableReward(msg.sender) - claimedReward[msg.sender])) > rerollCost){\r\n            claimedReward[msg.sender] += rerollCost;\r\n        }\r\n        else{\r\n        mammothHandler.burn(msg.sender, rerollCost);\r\n        }\r\n        emit mammothRerollEmit(tokenID);\r\n    }\r\n\r\n    function rerollDMT(uint256 tokenID) public{\r\n        require(primalHandler.ownerOf(tokenID) == msg.sender, \"Must own token\");\r\n        require(DMTReady, \"Rerolls not active\");\r\n        dmtHandler.transferFrom(msg.sender, burnWalletDMT, rerollDMTCost);\r\n        emit dmtRerollEmit(tokenID);\r\n    }\r\n\r\n    function rerollrwaste(uint256 tokenID) public{\r\n        require(primalHandler.ownerOf(tokenID) == msg.sender, \"Must own token\");\r\n         require(RWASTEReady, \"Rerolls not active\");\r\n        rwasteHandler.transferFrom(msg.sender, burnWalletRWASTE, rerollRWASTECost);\r\n        emit rwasteRerollEmit(tokenID);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beast\",\"type\":\"uint256\"}],\"name\":\"dmtRerollEmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beast\",\"type\":\"uint256\"}],\"name\":\"mammothRerollEmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beast\",\"type\":\"uint256\"}],\"name\":\"rwasteRerollEmit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"DMTApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DMTReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MammothReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"RWASTEApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RWASTEReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mammothGo\",\"type\":\"bool\"}],\"name\":\"activateMammoth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"changeCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCostDMT\",\"type\":\"uint256\"}],\"name\":\"changeDMTCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCostRWASTE\",\"type\":\"uint256\"}],\"name\":\"changeRWASTECost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dmtHandler\",\"outputs\":[{\"internalType\":\"contract DMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getClaimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"mammothApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mammothEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mammothHandler\",\"outputs\":[{\"internalType\":\"contract MAMMOTH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"newBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"newBurnWalletDMT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"newBurnWalletRWASTE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primalHandler\",\"outputs\":[{\"internalType\":\"contract PrimalBeasts\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rerollCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"rerollDMT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rerollDMTCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"rerollMammoth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rerollRWASTECost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"rerollrwaste\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rwasteHandler\",\"outputs\":[{\"internalType\":\"contract RWASTE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"DMTer\",\"type\":\"address\"}],\"name\":\"setDMT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mammothAdder\",\"type\":\"address\"}],\"name\":\"setMammoth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"PBAddy\",\"type\":\"address\"}],\"name\":\"setPB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rWasted\",\"type\":\"address\"}],\"name\":\"setRWaste\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "mammothReroll", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://44dfd94336aa6cfe3791415d4c8b8257a1c7f5f4e1e0cd434669851da085100c"}]}