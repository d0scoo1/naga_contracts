{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BlocksMeebitsExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: BLOCKS\\n\\nimport \\\"./libraries/blocks/BlocksERC721LazyAllowlist.sol\\\";\\n\\n/**\\n * BlocksMeebitsExtension - BlocksERC721LazyAllowlist for the Meebits community\\n\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMMMMMMWo   lWMMMMMMMMMKcxMMMMMMMMMMMMMMMMMXcoWMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMMMMMMMO. .OMMMMMMMMMMKcxMMMMMMMMMMMMMMMMMXcoWMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMMMMMMMNc :XMMMMMMMMMMKcxMMMMMMNXKKKKKKKKKO:oWMMMMMWXKKKKKKKKKK\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMMWNNWMMx'dWMWNNMMMMMMKcxMMMMMMk;'''''''''..oWMMMMM0:'''''''''.\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMNl,;xWMKx0MMk,lXMMMMMKcxMMMMMMN000000000O; oWMMMMMNK00000000Oc\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMX; .oWMWNWMWd.,KMMMMMKcxMMMMMMMMMMMMMMMMNc oWMMMMMMMMMMMMMMMWd\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMX; .oWMMMMMWd.,KMMMMMKcxMMMMMMWWNNNNNNNNXc lWMMMMMWWNNNNNNNNNo\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMX; .oWMMMMMMd.,KMMMMMKcxMMMMMMO:,,,,,,,,,. oWMMMMM0c,,,,,,,,,.\\nMMMMMMMMMMNKKKKXWMMMMMMMMMMMMMMMNKKKKXWMMMMMMMMMx:0MMMMMX; .oWMMMMMMd.,KMMMMMKcxMMMMMMXkkkkkkkkkkd;oWMMMMMNOkkkkkkkkkk\\nMMMMMMMMMNo....:KMMMMMMMMMMMMMMNo....cXMMMMMMMMMx:0MMMMMX; .oWMMMMMMd.,KMMMMMKcxMMMMMMMMMMMMMMMMMXloWMMMMMMMMMMMMMMMMM\\nMMMMMMMMMNc    '0MMMMMMMMMMMMMMNc    ,KMMMMMMMMMx:0MMMMMX; .oWMMMMMWd.,KMMMMMKcxMMMMMMMMMMMMMMMMMXcoWMMMMMMMMMMMMMMMMM\\nMMMMMMMMMNc    '0MMMMMMMMMMMMMMNc    ,KMMMMMMMMMx,cxxxxxo,..:ddollcc' .lxxxxxl';xddxxxxxxxxdxxdddo',dxdxxxxxdxdxxxxxxx\\nMMMMMMMMMNc    '0MMMMMMMMMMMMMMNc    ,KMMMMMMMMMx;xKKKKKKKKKKK0Oxo,.  'kKKKKKx;l0KKKKKKKKKKKKKKKKO;c0KKKKKKKKKKKKKKKKK\\nMMMMMMMMMNc    '0MMMMMMMMMMMMMMNc    ;KMMMMMMMMMx:0MMMMMMMMMMMMMMMNk' ,KMMMMMKcxMMMMMMMMMMMMMMMMMXcoWMMMMMMMMMMMMMMMMM\\nMMMMMMMMMWOllllxNMMMMMMMMMMMMMMWOllllkNMMMMMMMMMx:0MMMMMWWWWWMMMMMMWd.,KMMMMMKcdWWWWWMMMMMMMMWWWWXcoWMMMMMMWWWWWWWWWWW\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk:0MMMWx:;;;;dNMMMMMx.,KMMMMMK;.;;;;c0MMMMMWk:;;;,.oWMMMMM0c;;;;;;;;;;\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMW0dddddOWMMMNk' ,KMMMMMK,     .kMMMMMWo      oWMMMMMXxdddddddddd\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMMMMMMMMMMWO,  ,KMMMMMK,     .kMMMMMWo      oWMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMMMMMMMMMMMWKl.,KMMMMMK,     .kMMMMMWo      oWMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMWOlccccxNMMMMMNl:KMMMMMK,     .kMMMMMWo      .ccccccccccoKMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMWOlllllkNMMMMMMxcKMMMMMK,     .kMMMMMWo      'cllllllllloKMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMMMMMMMMMMMMMX:;KMMMMMK,     .kMMMMMWo      oWMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMMMMMMMMMMMNO; ,KMMMMMK,     .kMMMMMWo      oWMMMMMMMMMMMMMMMMM\\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMx:0MMMMMMMMMMMWNKk:.  ,KMMMMMK,     .kMMMMMWo      oWMMMMMMMMMMMMMMMMM\\n*/\\n\\ncontract BlocksMeebitsExtension is BlocksERC721LazyAllowlist {\\n\\n constructor(address creator, string memory prefix, uint256 mintPrice, uint256 maxMints) BlocksERC721LazyAllowlist(creator, prefix, mintPrice, maxMints) {}\\n\\n}\"\r\n    },\r\n    \"/contracts/libraries/single-creator/SingleCreatorExtensionBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @author: manifold.xyz\\r\\n\\r\\n/**\\r\\n * @dev Extension that only uses a single creator contract instance\\r\\n */\\r\\nabstract contract SingleCreatorExtensionBase {\\r\\n    address internal _creator;\\r\\n\\r\\n    /**\\r\\n     * @dev Override with appropriate interface checks if necessary\\r\\n     */\\r\\n    function _setCreator(address creator) internal virtual {\\r\\n      _creator = creator;\\r\\n    }\\r\\n\\r\\n    function creatorContract() public view returns(address) {\\r\\n        return _creator;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/libraries/single-creator/ERC721/ERC721SingleCreatorExtensionBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @author: manifold.xyz\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\r\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\\\";\\r\\n\\r\\nimport \\\"../../LegacyInterfaces.sol\\\";\\r\\nimport \\\"../SingleCreatorExtensionBase.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension that only uses a single creator contract instance\\r\\n */\\r\\nabstract contract ERC721SingleCreatorExtensionBase is SingleCreatorExtensionBase {\\r\\n\\r\\n    function _setCreator(address creator) internal override {\\r\\n        require(ERC165Checker.supportsInterface(creator, type(IERC721CreatorCore).interfaceId) ||\\r\\n                ERC165Checker.supportsInterface(creator, LegacyInterfaces.IERC721CreatorCore_v1), \\r\\n                \\\"Creator contract must implement IERC721CreatorCore\\\");\\r\\n        super._setCreator(creator);\\r\\n    }\\r\\n  \\r\\n}\"\r\n    },\r\n    \"/contracts/libraries/blocks/IBlocksERC721LazyAllowlist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @author: BLOCKS\\r\\n/// @author: manifold.xyz\\r\\n\\r\\n/**\\r\\n * IBlocksERC721LazyAllowlist v1.1 - ERC721 Lazy Mint with Allowlist interface + additional Blocks functions\\r\\n */\\r\\n \\r\\ninterface IBlocksERC721LazyAllowlist {\\r\\n\\r\\n    /**\\r\\n     * @dev premints gifted nfts\\r\\n     */\\r\\n    function premint(address[] memory to) external;\\r\\n\\r\\n    /**\\r\\n     * @dev external mint function \\r\\n     */\\r\\n    function mint(bytes32[] memory merkleProof) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev sets the allowList\\r\\n     */\\r\\n    function setAllowList(bytes32 merkleRoot) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Set the token uri prefix\\r\\n     */\\r\\n    function setTokenURIPrefix(string calldata prefix) external;\\r\\n\\r\\n    /**\\r\\n     * @dev sets the mint price\\r\\n     */\\r\\n    function setMintPrice(uint256 mintPrice) external;\\r\\n\\r\\n    /**\\r\\n     * @dev sets the max mints\\r\\n     */\\r\\n    function setMaxMints(uint256 maxMints) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw funds from the contract\\r\\n     */\\r\\n    function withdraw(address to, uint amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libraries/blocks/BlocksERC721LazyAllowlistBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @author: BLOCKS\\r\\n/// @author: manifold.xyz\\r\\n \\r\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\\\";\\r\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\\\";\\r\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\\\";\\r\\n\\r\\nimport \\\"../ABDKMath64x64.sol\\\";\\r\\nimport \\\"../single-creator/ERC721/ERC721SingleCreatorExtensionBase.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\n/**\\r\\n * BlocksERC721LazyAllowlistBase v1.1 - ERC721 Lazy Mint with Allowlist interface + additional Blocks functions\\r\\n */\\r\\n\\r\\nabstract contract BlocksERC721LazyAllowlistBase is ERC721SingleCreatorExtensionBase, ICreatorExtensionTokenURI, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n    using ABDKMath64x64 for uint;\\r\\n\\r\\n    string private _tokenPrefix;\\r\\n    uint256 private _tokensMinted;\\r\\n    mapping(uint256 => uint256) private _tokenEdition;\\r\\n    bytes32 _merkleRoot;\\r\\n\\r\\n    uint256 private _mintPrice;\\r\\n    uint256 private _maxMints;\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165) returns (bool) {\\r\\n        return interfaceId == type(ICreatorExtensionTokenURI).interfaceId;\\r\\n    }\\r\\n\\r\\n    function _initialize(address creator, string memory prefix, uint256 mintPrice, uint256 maxMints) internal {\\r\\n      require(_creator == address(0), \\\"Already initialized\\\");\\r\\n      _setCreator(creator);\\r\\n      _tokenPrefix = prefix;\\r\\n      \\r\\n      _mintPrice = mintPrice;\\r\\n      _maxMints = maxMints;\\r\\n    }\\r\\n\\r\\n    function onAllowList(address claimer, bytes32[] memory proof) public view returns(bool) {\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(claimer));\\r\\n        return MerkleProof.verify(proof, _merkleRoot, leaf);\\r\\n    }\\r\\n\\r\\n    function _setAllowList(bytes32 merkleRoot) internal {\\r\\n        _merkleRoot = merkleRoot;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Premint direct to addresses\\r\\n     */\\r\\n    function _premint(address[] memory to) internal {\\r\\n        for (uint i = 0; i < to.length; i++) {\\r\\n            _tokenEdition[IERC721CreatorCore(_creator).mintExtension(to[i])] = _tokensMinted + i + 1;\\r\\n        }\\r\\n        _tokensMinted += to.length;\\r\\n        _maxMints += to.length; // Extend max mints when preminting\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Mint token if you are on the whitelist\\r\\n     */\\r\\n    function _mint(bytes32[] memory merkleProof) internal {\\r\\n        require(_tokensMinted < _maxMints, \\\"Not enough mints left\\\");\\r\\n        require(_mintPrice == msg.value, \\\"Not enough ETH\\\");\\r\\n        require(onAllowList(msg.sender, merkleProof), \\\"Not on allowlist\\\");\\r\\n\\r\\n        _tokenEdition[IERC721CreatorCore(_creator).mintExtension(msg.sender)] = _tokensMinted + 1;\\r\\n        _tokensMinted += 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set the token URI prefix\\r\\n     */\\r\\n    function _setTokenURIPrefix(string calldata prefix) internal {\\r\\n        _tokenPrefix = prefix;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set the token mint price\\r\\n     */\\r\\n    function _setMintPrice(uint256 mintPrice) internal {\\r\\n        _mintPrice = mintPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set the token max mints\\r\\n     */\\r\\n    function _setMaxMints(uint256 maxMints) internal {\\r\\n        _maxMints = maxMints;\\r\\n    }    \\r\\n\\r\\n    function _withdraw(address to, uint amount) internal {\\r\\n        payable(to).transfer(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ICreatorExtensionTokenURI-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(address creator, uint256 tokenId) external view override returns (string memory) {\\r\\n        require(creator == _creator && _tokenEdition[tokenId] != 0, \\\"Invalid token\\\");\\r\\n        return  string(abi.encodePacked(_tokenPrefix, _tokenEdition[tokenId].toString()));\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libraries/blocks/BlocksERC721LazyAllowlist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @author: BLOCKS\\r\\n/// @author: manifold.xyz\\r\\n\\r\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\\\";\\r\\n\\r\\nimport \\\"./BlocksERC721LazyAllowlistBase.sol\\\";\\r\\nimport \\\"./IBlocksERC721LazyAllowlist.sol\\\";\\r\\n\\r\\n/**\\r\\n * BlocksERC721LazyAllowlist v1.1 - Lazy Mint with Whitelist for ERC721 tokens + additional Blocks functions\\r\\n */\\r\\n \\r\\ncontract BlocksERC721LazyAllowlist is BlocksERC721LazyAllowlistBase, AdminControl, IBlocksERC721LazyAllowlist {\\r\\n\\r\\n    constructor(address creator, string memory prefix, uint256 mintPrice, uint256 maxMints) {\\r\\n        _initialize(creator, prefix, mintPrice, maxMints);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AdminControl, BlocksERC721LazyAllowlistBase) returns (bool) {\\r\\n        return interfaceId == type(IBlocksERC721LazyAllowlist).interfaceId || AdminControl.supportsInterface(interfaceId) || BlocksERC721LazyAllowlistBase.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function premint(address[] memory to) external override adminRequired {\\r\\n        _premint(to);\\r\\n    }\\r\\n\\r\\n    function mint(bytes32[] memory merkleProof) external override payable {\\r\\n        _mint(merkleProof);\\r\\n    }\\r\\n\\r\\n    function setAllowList(bytes32 merkleRoot) external override adminRequired {\\r\\n        _setAllowList(merkleRoot);\\r\\n    }\\r\\n\\r\\n    function setTokenURIPrefix(string calldata prefix) external override adminRequired {\\r\\n        _setTokenURIPrefix(prefix);\\r\\n    }\\r\\n\\r\\n    function setMintPrice(uint256 mintPrice) external override adminRequired {\\r\\n        _setMintPrice(mintPrice);\\r\\n    }\\r\\n\\r\\n    function setMaxMints(uint256 maxMints) external override adminRequired {\\r\\n        _setMaxMints(maxMints);\\r\\n    }\\r\\n\\r\\n    function withdraw(address to, uint amount) external override adminRequired {\\r\\n        _withdraw(to, amount);\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libraries/LegacyInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @author: manifold.xyz\\r\\n\\r\\n/**\\r\\n * Library of legacy interface constants\\r\\n */\\r\\nlibrary LegacyInterfaces {\\r\\n\\r\\n    // LEGACY ERC721CreatorCore interface\\r\\n    bytes4 internal constant IERC721CreatorCore_v1 = 0x478c8530;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/libraries/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\r\\n/*\\r\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary ABDKMath64x64 {\\r\\n  /*\\r\\n   * Minimum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * Maximum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n  /**\\r\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n      return int128 (x << 64);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n   * rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n  function toInt (int128 x) internal pure returns (int64) {\\r\\n    unchecked {\\r\\n      return int64 (x >> 64);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\r\\n      return int128 (int256 (x << 64));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n   * number rounding down.  Revert on underflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n  function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    unchecked {\\r\\n      require (x >= 0);\\r\\n      return uint64 (uint128 (x >> 64));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n   * number rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = x >> 64;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n  function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    unchecked {\\r\\n      return int256 (x) << 64;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x + y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = int256(x) + y;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x - y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = int256(x) - y;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 result = int256(x) * y >> 64;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    unchecked {\\r\\n      if (x == MIN_64x64) {\\r\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\r\\n        return -y << 63;\\r\\n      } else {\\r\\n        bool negativeResult = false;\\r\\n        if (x < 0) {\\r\\n          x = -x;\\r\\n          negativeResult = true;\\r\\n        }\\r\\n        if (y < 0) {\\r\\n          y = -y; // We rely on overflow behavior here\\r\\n          negativeResult = !negativeResult;\\r\\n        }\\r\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n        if (negativeResult) {\\r\\n          require (absoluteResult <=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n        } else {\\r\\n          require (absoluteResult <=\\r\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n          return int256 (absoluteResult);\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      if (y == 0) return 0;\\r\\n\\r\\n      require (x >= 0);\\r\\n\\r\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\r\\n\\r\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      hi <<= 64;\\r\\n\\r\\n      require (hi <=\\r\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n      return hi + lo;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n      int256 result = (int256 (x) << 64) / y;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n\\r\\n      bool negativeResult = false;\\r\\n      if (x < 0) {\\r\\n        x = -x; // We rely on overflow behavior here\\r\\n        negativeResult = true;\\r\\n      }\\r\\n      if (y < 0) {\\r\\n        y = -y; // We rely on overflow behavior here\\r\\n        negativeResult = !negativeResult;\\r\\n      }\\r\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n      if (negativeResult) {\\r\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n      } else {\\r\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n      uint128 result = divuu (x, y);\\r\\n      require (result <= uint128 (MAX_64x64));\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate -x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function neg (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x != MIN_64x64);\\r\\n      return -x;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate |x|.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function abs (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x != MIN_64x64);\\r\\n      return x < 0 ? -x : x;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function inv (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x != 0);\\r\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n   * Revert on overflow or in case x * y is negative.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      int256 m = int256 (x) * int256 (y);\\r\\n      require (m >= 0);\\r\\n      require (m <\\r\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n      return int128 (sqrtu (uint256 (m)));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      bool negative = x < 0 && y & 1 == 1;\\r\\n\\r\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\r\\n      uint256 absResult;\\r\\n      absResult = 0x100000000000000000000000000000000;\\r\\n\\r\\n      if (absX <= 0x10000000000000000) {\\r\\n        absX <<= 63;\\r\\n        while (y != 0) {\\r\\n          if (y & 0x1 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          if (y & 0x2 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          if (y & 0x4 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          if (y & 0x8 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n\\r\\n          y >>= 4;\\r\\n        }\\r\\n\\r\\n        absResult >>= 64;\\r\\n      } else {\\r\\n        uint256 absXShift = 63;\\r\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\r\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\r\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\r\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\r\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\r\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\r\\n\\r\\n        uint256 resultShift = 0;\\r\\n        while (y != 0) {\\r\\n          require (absXShift < 64);\\r\\n\\r\\n          if (y & 0x1 != 0) {\\r\\n            absResult = absResult * absX >> 127;\\r\\n            resultShift += absXShift;\\r\\n            if (absResult > 0x100000000000000000000000000000000) {\\r\\n              absResult >>= 1;\\r\\n              resultShift += 1;\\r\\n            }\\r\\n          }\\r\\n          absX = absX * absX >> 127;\\r\\n          absXShift <<= 1;\\r\\n          if (absX >= 0x100000000000000000000000000000000) {\\r\\n              absX >>= 1;\\r\\n              absXShift += 1;\\r\\n          }\\r\\n\\r\\n          y >>= 1;\\r\\n        }\\r\\n\\r\\n        require (resultShift < 64);\\r\\n        absResult >>= 64 - resultShift;\\r\\n      }\\r\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\r\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sqrt (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x >= 0);\\r\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function log_2 (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x > 0);\\r\\n\\r\\n      int256 msb = 0;\\r\\n      int256 xc = x;\\r\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      int256 result = msb - 64 << 64;\\r\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\r\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n        ux *= ux;\\r\\n        uint256 b = ux >> 255;\\r\\n        ux >>= 127 + b;\\r\\n        result += bit * int256 (b);\\r\\n      }\\r\\n\\r\\n      return int128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function ln (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x > 0);\\r\\n\\r\\n      return int128 (int256 (\\r\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n      if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n      uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n      if (x & 0x8000000000000000 > 0)\\r\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n      if (x & 0x4000000000000000 > 0)\\r\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n      if (x & 0x2000000000000000 > 0)\\r\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n      if (x & 0x1000000000000000 > 0)\\r\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n      if (x & 0x800000000000000 > 0)\\r\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n      if (x & 0x400000000000000 > 0)\\r\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n      if (x & 0x200000000000000 > 0)\\r\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n      if (x & 0x100000000000000 > 0)\\r\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n      if (x & 0x80000000000000 > 0)\\r\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n      if (x & 0x40000000000000 > 0)\\r\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n      if (x & 0x20000000000000 > 0)\\r\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n      if (x & 0x10000000000000 > 0)\\r\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n      if (x & 0x8000000000000 > 0)\\r\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n      if (x & 0x4000000000000 > 0)\\r\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n      if (x & 0x2000000000000 > 0)\\r\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n      if (x & 0x1000000000000 > 0)\\r\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n      if (x & 0x800000000000 > 0)\\r\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n      if (x & 0x400000000000 > 0)\\r\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n      if (x & 0x200000000000 > 0)\\r\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n      if (x & 0x100000000000 > 0)\\r\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n      if (x & 0x80000000000 > 0)\\r\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n      if (x & 0x40000000000 > 0)\\r\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n      if (x & 0x20000000000 > 0)\\r\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n      if (x & 0x10000000000 > 0)\\r\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n      if (x & 0x8000000000 > 0)\\r\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n      if (x & 0x4000000000 > 0)\\r\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n      if (x & 0x2000000000 > 0)\\r\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n      if (x & 0x1000000000 > 0)\\r\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n      if (x & 0x800000000 > 0)\\r\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n      if (x & 0x400000000 > 0)\\r\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n      if (x & 0x200000000 > 0)\\r\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n      if (x & 0x100000000 > 0)\\r\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n      if (x & 0x80000000 > 0)\\r\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n      if (x & 0x40000000 > 0)\\r\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n      if (x & 0x20000000 > 0)\\r\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n      if (x & 0x10000000 > 0)\\r\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n      if (x & 0x8000000 > 0)\\r\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n      if (x & 0x4000000 > 0)\\r\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n      if (x & 0x2000000 > 0)\\r\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n      if (x & 0x1000000 > 0)\\r\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n      if (x & 0x800000 > 0)\\r\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n      if (x & 0x400000 > 0)\\r\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n      if (x & 0x200000 > 0)\\r\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n      if (x & 0x100000 > 0)\\r\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n      if (x & 0x80000 > 0)\\r\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n      if (x & 0x40000 > 0)\\r\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n      if (x & 0x20000 > 0)\\r\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n      if (x & 0x10000 > 0)\\r\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n      if (x & 0x8000 > 0)\\r\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n      if (x & 0x4000 > 0)\\r\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n      if (x & 0x2000 > 0)\\r\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n      if (x & 0x1000 > 0)\\r\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n      if (x & 0x800 > 0)\\r\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n      if (x & 0x400 > 0)\\r\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n      if (x & 0x200 > 0)\\r\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n      if (x & 0x100 > 0)\\r\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n      if (x & 0x80 > 0)\\r\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n      if (x & 0x40 > 0)\\r\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n      if (x & 0x20 > 0)\\r\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n      if (x & 0x10 > 0)\\r\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n      if (x & 0x8 > 0)\\r\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n      if (x & 0x4 > 0)\\r\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n      if (x & 0x2 > 0)\\r\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n      if (x & 0x1 > 0)\\r\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n\\r\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\r\\n      require (result <= uint256 (int256 (MAX_64x64)));\\r\\n\\r\\n      return int128 (int256 (result));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp (int128 x) internal pure returns (int128) {\\r\\n    unchecked {\\r\\n      require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n      if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n      return exp_2 (\\r\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      require (y != 0);\\r\\n\\r\\n      uint256 result;\\r\\n\\r\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n        result = (x << 64) / y;\\r\\n      else {\\r\\n        uint256 msb = 192;\\r\\n        uint256 xc = x >> 192;\\r\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\r\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n        uint256 hi = result * (y >> 128);\\r\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n        uint256 xh = x >> 192;\\r\\n        uint256 xl = x << 64;\\r\\n\\r\\n        if (xl < lo) xh -= 1;\\r\\n        xl -= lo; // We rely on overflow behavior here\\r\\n        lo = hi << 128;\\r\\n        if (xl < lo) xh -= 1;\\r\\n        xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n        assert (xh == hi >> 128);\\r\\n\\r\\n        result += xl / y;\\r\\n      }\\r\\n\\r\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return uint128 (result);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n   * number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\r\\n    unchecked {\\r\\n      if (x == 0) return 0;\\r\\n      else {\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\r\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\r\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\r\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\r\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\r\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\r\\n        if (xx >= 0x8) { r <<= 1; }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return uint128 (r < r1 ? r : r1);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC721 creator interface\\n */\\ninterface IERC721CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBase(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token with no extension. Can only be called by an admin.\\n     * Returns tokenId minted\\n     */\\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to) external returns (uint256);\\n\\n    /**\\n     * @dev mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtension(address to, string calldata uri) external returns (uint256);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenIds minted\\n     */\\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint a token. Can only be called by a registered extension.\\n     * Returns tokenId minted\\n     */\\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev burn a token. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(uint256 tokenId) external;\\n\\n}\"\r\n    },\r\n    \"@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMints\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"onAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"premint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMints\",\"type\":\"uint256\"}],\"name\":\"setMaxMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"setTokenURIPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlocksMeebitsExtension", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000063d49351ec2191d5ffe046682061eae55863210f0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003668747470733a2f2f626574612e6a6f696e626c6f636b732e636f6d2f6170692f636f6c6c656374696f6e732f42584d4545424954532f00000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}