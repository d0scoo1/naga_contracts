{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/fx-portal/lib/Merkle.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Merkle {\r\n    function checkMembership(\r\n        bytes32 leaf,\r\n        uint256 index,\r\n        bytes32 rootHash,\r\n        bytes memory proof\r\n    ) internal pure returns (bool) {\r\n        require(proof.length % 32 == 0, \"Invalid proof length\");\r\n        uint256 proofHeight = proof.length / 32;\r\n        // Proof of size n means, height of the tree is n+1.\r\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\r\n        require(index < 2**proofHeight, \"Leaf index is too big\");\r\n\r\n        bytes32 proofElement;\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 32; i <= proof.length; i += 32) {\r\n            assembly {\r\n                proofElement := mload(add(proof, i))\r\n            }\r\n\r\n            if (index % 2 == 0) {\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n\r\n            index = index / 2;\r\n        }\r\n        return computedHash == rootHash;\r\n    }\r\n}\r\n\r\n// File: contracts/fx-portal/lib/RLPReader.sol\r\n\r\n/*\r\n * @author Hamdi Allam hamdi.allam97@gmail.com\r\n * Please reach out with any questions or concerns\r\n */\r\npragma solidity ^0.8.0;\r\n\r\nlibrary RLPReader {\r\n    uint8 constant STRING_SHORT_START = 0x80;\r\n    uint8 constant STRING_LONG_START = 0xb8;\r\n    uint8 constant LIST_SHORT_START = 0xc0;\r\n    uint8 constant LIST_LONG_START = 0xf8;\r\n    uint8 constant WORD_SIZE = 32;\r\n\r\n    struct RLPItem {\r\n        uint256 len;\r\n        uint256 memPtr;\r\n    }\r\n\r\n    struct Iterator {\r\n        RLPItem item; // Item that's being iterated over.\r\n        uint256 nextPtr; // Position of the next item in the list.\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\r\n     * @param self The iterator.\r\n     * @return The next element in the iteration.\r\n     */\r\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\r\n        require(hasNext(self));\r\n\r\n        uint256 ptr = self.nextPtr;\r\n        uint256 itemLength = _itemLength(ptr);\r\n        self.nextPtr = ptr + itemLength;\r\n\r\n        return RLPItem(itemLength, ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the iteration has more elements.\r\n     * @param self The iterator.\r\n     * @return true if the iteration has more elements.\r\n     */\r\n    function hasNext(Iterator memory self) internal pure returns (bool) {\r\n        RLPItem memory item = self.item;\r\n        return self.nextPtr < item.memPtr + item.len;\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded bytes\r\n     */\r\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\r\n        uint256 memPtr;\r\n        assembly {\r\n            memPtr := add(item, 0x20)\r\n        }\r\n\r\n        return RLPItem(item.length, memPtr);\r\n    }\r\n\r\n    /*\r\n     * @dev Create an iterator. Reverts if item is not a list.\r\n     * @param self The RLP item.\r\n     * @return An 'Iterator' over the item.\r\n     */\r\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\r\n        require(isList(self));\r\n\r\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\r\n        return Iterator(self, ptr);\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded bytes\r\n     */\r\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\r\n        return item.len;\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded bytes\r\n     */\r\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\r\n        return item.len - _payloadOffset(item.memPtr);\r\n    }\r\n\r\n    /*\r\n     * @param item RLP encoded list in bytes\r\n     */\r\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\r\n        require(isList(item));\r\n\r\n        uint256 items = numItems(item);\r\n        RLPItem[] memory result = new RLPItem[](items);\r\n\r\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint256 dataLen;\r\n        for (uint256 i = 0; i < items; i++) {\r\n            dataLen = _itemLength(memPtr);\r\n            result[i] = RLPItem(dataLen, memPtr);\r\n            memPtr = memPtr + dataLen;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\r\n    function isList(RLPItem memory item) internal pure returns (bool) {\r\n        if (item.len == 0) return false;\r\n\r\n        uint8 byte0;\r\n        uint256 memPtr = item.memPtr;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < LIST_SHORT_START) return false;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\r\n     * @return keccak256 hash of RLP encoded bytes.\r\n     */\r\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\r\n        uint256 ptr = item.memPtr;\r\n        uint256 len = item.len;\r\n        bytes32 result;\r\n        assembly {\r\n            result := keccak256(ptr, len)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n        uint256 memPtr = item.memPtr + offset;\r\n        uint256 len = item.len - offset; // data length\r\n        return (memPtr, len);\r\n    }\r\n\r\n    /*\r\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\r\n     * @return keccak256 hash of the item payload.\r\n     */\r\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\r\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\r\n        bytes32 result;\r\n        assembly {\r\n            result := keccak256(memPtr, len)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /** RLPItem conversions into data types **/\r\n\r\n    // @returns raw rlp encoding in bytes\r\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        bytes memory result = new bytes(item.len);\r\n        if (result.length == 0) return result;\r\n\r\n        uint256 ptr;\r\n        assembly {\r\n            ptr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr, ptr, item.len);\r\n        return result;\r\n    }\r\n\r\n    // any non-zero byte is considered true\r\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\r\n        require(item.len == 1);\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr;\r\n        assembly {\r\n            result := byte(0, mload(memPtr))\r\n        }\r\n\r\n        return result == 0 ? false : true;\r\n    }\r\n\r\n    function toAddress(RLPItem memory item) internal pure returns (address) {\r\n        // 1 byte for the length prefix\r\n        require(item.len == 21);\r\n\r\n        return address(uint160(toUint(item)));\r\n    }\r\n\r\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\r\n        require(item.len > 0 && item.len <= 33);\r\n\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n        uint256 len = item.len - offset;\r\n\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr + offset;\r\n        assembly {\r\n            result := mload(memPtr)\r\n\r\n            // shfit to the correct location if neccesary\r\n            if lt(len, 32) {\r\n                result := div(result, exp(256, sub(32, len)))\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // enforces 32 byte length\r\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\r\n        // one byte prefix\r\n        require(item.len == 33);\r\n\r\n        uint256 result;\r\n        uint256 memPtr = item.memPtr + 1;\r\n        assembly {\r\n            result := mload(memPtr)\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\r\n        require(item.len > 0);\r\n\r\n        uint256 offset = _payloadOffset(item.memPtr);\r\n        uint256 len = item.len - offset; // data length\r\n        bytes memory result = new bytes(len);\r\n\r\n        uint256 destPtr;\r\n        assembly {\r\n            destPtr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr + offset, destPtr, len);\r\n        return result;\r\n    }\r\n\r\n    /*\r\n     * Private Helpers\r\n     */\r\n\r\n    // @return number of payload items inside an encoded list.\r\n    function numItems(RLPItem memory item) private pure returns (uint256) {\r\n        if (item.len == 0) return 0;\r\n\r\n        uint256 count = 0;\r\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint256 endPtr = item.memPtr + item.len;\r\n        while (currPtr < endPtr) {\r\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\r\n            count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    // @return entire rlp item byte length\r\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\r\n        uint256 itemLen;\r\n        uint256 byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\r\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\r\n        else if (byte0 < LIST_SHORT_START) {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\r\n                memPtr := add(memPtr, 1) // skip over the first byte\r\n                /* 32 byte word size */\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        } else if (byte0 < LIST_LONG_START) {\r\n            itemLen = byte0 - LIST_SHORT_START + 1;\r\n        } else {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xf7)\r\n                memPtr := add(memPtr, 1)\r\n\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\r\n                itemLen := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n\r\n        return itemLen;\r\n    }\r\n\r\n    // @return number of bytes until the data\r\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\r\n        uint256 byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) return 0;\r\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\r\n        else if (byte0 < LIST_SHORT_START)\r\n            // being explicit\r\n            return byte0 - (STRING_LONG_START - 1) + 1;\r\n        else return byte0 - (LIST_LONG_START - 1) + 1;\r\n    }\r\n\r\n    /*\r\n     * @param src Pointer to source\r\n     * @param dest Pointer to destination\r\n     * @param len Amount of memory to copy from the source\r\n     */\r\n    function copy(\r\n        uint256 src,\r\n        uint256 dest,\r\n        uint256 len\r\n    ) private pure {\r\n        if (len == 0) return;\r\n\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        if (len == 0) return;\r\n\r\n        // left over bytes. Mask is used to remove unwanted bytes from the word\r\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\r\n\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask)) // zero out src\r\n            let destpart := and(mload(dest), mask) // retrieve the bytes\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/fx-portal/lib/ExitPayloadReader.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary ExitPayloadReader {\r\n    using RLPReader for bytes;\r\n    using RLPReader for RLPReader.RLPItem;\r\n\r\n    uint8 constant WORD_SIZE = 32;\r\n\r\n    struct ExitPayload {\r\n        RLPReader.RLPItem[] data;\r\n    }\r\n\r\n    struct Receipt {\r\n        RLPReader.RLPItem[] data;\r\n        bytes raw;\r\n        uint256 logIndex;\r\n    }\r\n\r\n    struct Log {\r\n        RLPReader.RLPItem data;\r\n        RLPReader.RLPItem[] list;\r\n    }\r\n\r\n    struct LogTopics {\r\n        RLPReader.RLPItem[] data;\r\n    }\r\n\r\n    // copy paste of private copy() from RLPReader to avoid changing of existing contracts\r\n    function copy(\r\n        uint256 src,\r\n        uint256 dest,\r\n        uint256 len\r\n    ) private pure {\r\n        if (len == 0) return;\r\n\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        // left over bytes. Mask is used to remove unwanted bytes from the word\r\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask)) // zero out src\r\n            let destpart := and(mload(dest), mask) // retrieve the bytes\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\r\n        RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\r\n\r\n        return ExitPayload(payloadData);\r\n    }\r\n\r\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[0].toUint();\r\n    }\r\n\r\n    function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\r\n        return payload.data[1].toBytes();\r\n    }\r\n\r\n    function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[2].toUint();\r\n    }\r\n\r\n    function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[3].toUint();\r\n    }\r\n\r\n    function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\r\n        return bytes32(payload.data[4].toUint());\r\n    }\r\n\r\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\r\n        return bytes32(payload.data[5].toUint());\r\n    }\r\n\r\n    function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\r\n        receipt.raw = payload.data[6].toBytes();\r\n        RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\r\n\r\n        if (receiptItem.isList()) {\r\n            // legacy tx\r\n            receipt.data = receiptItem.toList();\r\n        } else {\r\n            // pop first byte before parsting receipt\r\n            bytes memory typedBytes = receipt.raw;\r\n            bytes memory result = new bytes(typedBytes.length - 1);\r\n            uint256 srcPtr;\r\n            uint256 destPtr;\r\n            assembly {\r\n                srcPtr := add(33, typedBytes)\r\n                destPtr := add(0x20, result)\r\n            }\r\n\r\n            copy(srcPtr, destPtr, result.length);\r\n            receipt.data = result.toRlpItem().toList();\r\n        }\r\n\r\n        receipt.logIndex = getReceiptLogIndex(payload);\r\n        return receipt;\r\n    }\r\n\r\n    function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\r\n        return payload.data[7].toBytes();\r\n    }\r\n\r\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\r\n        return payload.data[8].toBytes();\r\n    }\r\n\r\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[8].toUint();\r\n    }\r\n\r\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\r\n        return payload.data[9].toUint();\r\n    }\r\n\r\n    // Receipt methods\r\n    function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\r\n        return receipt.raw;\r\n    }\r\n\r\n    function getLog(Receipt memory receipt) internal pure returns (Log memory) {\r\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\r\n        return Log(logData, logData.toList());\r\n    }\r\n\r\n    // Log methods\r\n    function getEmitter(Log memory log) internal pure returns (address) {\r\n        return RLPReader.toAddress(log.list[0]);\r\n    }\r\n\r\n    function getTopics(Log memory log) internal pure returns (LogTopics memory) {\r\n        return LogTopics(log.list[1].toList());\r\n    }\r\n\r\n    function getData(Log memory log) internal pure returns (bytes memory) {\r\n        return log.list[2].toBytes();\r\n    }\r\n\r\n    function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\r\n        return log.data.toRlpBytes();\r\n    }\r\n\r\n    // LogTopics methods\r\n    function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\r\n        return topics.data[index];\r\n    }\r\n}\r\n\r\n// File: contracts/fx-portal/lib/MerklePatriciaProof.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary MerklePatriciaProof {\r\n    /*\r\n     * @dev Verifies a merkle patricia proof.\r\n     * @param value The terminating value in the trie.\r\n     * @param encodedPath The path in the trie leading to value.\r\n     * @param rlpParentNodes The rlp encoded stack of nodes.\r\n     * @param root The root hash of the trie.\r\n     * @return The boolean validity of the proof.\r\n     */\r\n    function verify(\r\n        bytes memory value,\r\n        bytes memory encodedPath,\r\n        bytes memory rlpParentNodes,\r\n        bytes32 root\r\n    ) internal pure returns (bool) {\r\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\r\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\r\n\r\n        bytes memory currentNode;\r\n        RLPReader.RLPItem[] memory currentNodeList;\r\n\r\n        bytes32 nodeKey = root;\r\n        uint256 pathPtr = 0;\r\n\r\n        bytes memory path = _getNibbleArray(encodedPath);\r\n        if (path.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        for (uint256 i = 0; i < parentNodes.length; i++) {\r\n            if (pathPtr > path.length) {\r\n                return false;\r\n            }\r\n\r\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\r\n            if (nodeKey != keccak256(currentNode)) {\r\n                return false;\r\n            }\r\n            currentNodeList = RLPReader.toList(parentNodes[i]);\r\n\r\n            if (currentNodeList.length == 17) {\r\n                if (pathPtr == path.length) {\r\n                    if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                uint8 nextPathNibble = uint8(path[pathPtr]);\r\n                if (nextPathNibble > 16) {\r\n                    return false;\r\n                }\r\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\r\n                pathPtr += 1;\r\n            } else if (currentNodeList.length == 2) {\r\n                uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\r\n                if (pathPtr + traversed == path.length) {\r\n                    //leaf node\r\n                    if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                //extension node\r\n                if (traversed == 0) {\r\n                    return false;\r\n                }\r\n\r\n                pathPtr += traversed;\r\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _nibblesToTraverse(\r\n        bytes memory encodedPartialPath,\r\n        bytes memory path,\r\n        uint256 pathPtr\r\n    ) private pure returns (uint256) {\r\n        uint256 len = 0;\r\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\r\n        // and slicedPath have elements that are each one hex character (1 nibble)\r\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\r\n        bytes memory slicedPath = new bytes(partialPath.length);\r\n\r\n        // pathPtr counts nibbles in path\r\n        // partialPath.length is a number of nibbles\r\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\r\n            bytes1 pathNibble = path[i];\r\n            slicedPath[i - pathPtr] = pathNibble;\r\n        }\r\n\r\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\r\n            len = partialPath.length;\r\n        } else {\r\n            len = 0;\r\n        }\r\n        return len;\r\n    }\r\n\r\n    // bytes b must be hp encoded\r\n    function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\r\n        bytes memory nibbles = \"\";\r\n        if (b.length > 0) {\r\n            uint8 offset;\r\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\r\n            if (hpNibble == 1 || hpNibble == 3) {\r\n                nibbles = new bytes(b.length * 2 - 1);\r\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\r\n                nibbles[0] = oddNibble;\r\n                offset = 1;\r\n            } else {\r\n                nibbles = new bytes(b.length * 2 - 2);\r\n                offset = 0;\r\n            }\r\n\r\n            for (uint256 i = offset; i < nibbles.length; i++) {\r\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\r\n            }\r\n        }\r\n        return nibbles;\r\n    }\r\n\r\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\r\n        return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\r\n    }\r\n}\r\n\r\n// File: contracts/fx-portal/tunnel/FxBaseRootTunnel.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface IFxStateSender {\r\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\r\n}\r\n\r\ncontract ICheckpointManager {\r\n    struct HeaderBlock {\r\n        bytes32 root;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 createdAt;\r\n        address proposer;\r\n    }\r\n\r\n    /**\r\n     * @notice mapping of checkpoint header numbers to block details\r\n     * @dev These checkpoints are submited by plasma contracts\r\n     */\r\n    mapping(uint256 => HeaderBlock) public headerBlocks;\r\n}\r\n\r\nabstract contract FxBaseRootTunnel {\r\n    using RLPReader for RLPReader.RLPItem;\r\n    using Merkle for bytes32;\r\n    using ExitPayloadReader for bytes;\r\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\r\n    using ExitPayloadReader for ExitPayloadReader.Log;\r\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\r\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\r\n\r\n    // keccak256(MessageSent(bytes))\r\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\r\n\r\n    // state sender contract\r\n    IFxStateSender public fxRoot;\r\n    // root chain manager\r\n    ICheckpointManager public checkpointManager;\r\n    // child tunnel contract which receives and sends messages\r\n    address public fxChildTunnel;\r\n\r\n    // storage to avoid duplicate exits\r\n    mapping(bytes32 => bool) public processedExits;\r\n\r\n    constructor(address _checkpointManager, address _fxRoot) {\r\n        checkpointManager = ICheckpointManager(_checkpointManager);\r\n        fxRoot = IFxStateSender(_fxRoot);\r\n    }\r\n\r\n    // set fxChildTunnel if not set already\r\n    function setFxChildTunnel(address _fxChildTunnel) public virtual {\r\n        require(fxChildTunnel == address(0x0), \"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\");\r\n        fxChildTunnel = _fxChildTunnel;\r\n    }\r\n\r\n    /**\r\n     * @notice Send bytes message to Child Tunnel\r\n     * @param message bytes message that will be sent to Child Tunnel\r\n     * some message examples -\r\n     *   abi.encode(tokenId);\r\n     *   abi.encode(tokenId, tokenMetadata);\r\n     *   abi.encode(messageType, messageData);\r\n     */\r\n    function _sendMessageToChild(bytes memory message) internal {\r\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\r\n    }\r\n\r\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\r\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\r\n\r\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\r\n        uint256 blockNumber = payload.getBlockNumber();\r\n        // checking if exit has already been processed\r\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\r\n        bytes32 exitHash = keccak256(\r\n            abi.encodePacked(\r\n                blockNumber,\r\n                // first 2 nibbles are dropped while generating nibble array\r\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\r\n                // so converting to nibble array and then hashing it\r\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\r\n                payload.getReceiptLogIndex()\r\n            )\r\n        );\r\n        require(processedExits[exitHash] == false, \"FxRootTunnel: EXIT_ALREADY_PROCESSED\");\r\n        processedExits[exitHash] = true;\r\n\r\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\r\n        ExitPayloadReader.Log memory log = receipt.getLog();\r\n\r\n        // check child tunnel\r\n        require(fxChildTunnel == log.getEmitter(), \"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\");\r\n\r\n        bytes32 receiptRoot = payload.getReceiptRoot();\r\n        // verify receipt inclusion\r\n        require(\r\n            MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\r\n            \"FxRootTunnel: INVALID_RECEIPT_PROOF\"\r\n        );\r\n\r\n        // verify checkpoint inclusion\r\n        _checkBlockMembershipInCheckpoint(\r\n            blockNumber,\r\n            payload.getBlockTime(),\r\n            payload.getTxRoot(),\r\n            receiptRoot,\r\n            payload.getHeaderNumber(),\r\n            payload.getBlockProof()\r\n        );\r\n\r\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\r\n\r\n        require(\r\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\r\n            \"FxRootTunnel: INVALID_SIGNATURE\"\r\n        );\r\n\r\n        // received message data\r\n        bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\r\n        return message;\r\n    }\r\n\r\n    function _checkBlockMembershipInCheckpoint(\r\n        uint256 blockNumber,\r\n        uint256 blockTime,\r\n        bytes32 txRoot,\r\n        bytes32 receiptRoot,\r\n        uint256 headerNumber,\r\n        bytes memory blockProof\r\n    ) private view returns (uint256) {\r\n        (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\r\n\r\n        require(\r\n            keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\r\n                blockNumber - startBlock,\r\n                headerRoot,\r\n                blockProof\r\n            ),\r\n            \"FxRootTunnel: INVALID_HEADER\"\r\n        );\r\n        return createdAt;\r\n    }\r\n\r\n    /**\r\n     * @notice receive message from  L2 to L1, validated by proof\r\n     * @dev This function verifies if the transaction actually happened on child chain\r\n     *\r\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\r\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\r\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\r\n     *  2 - blockNumber - Block number containing the reference tx on child chain\r\n     *  3 - blockTime - Reference tx block time\r\n     *  4 - txRoot - Transactions root of block\r\n     *  5 - receiptRoot - Receipts root of block\r\n     *  6 - receipt - Receipt of the reference transaction\r\n     *  7 - receiptProof - Merkle proof of the reference receipt\r\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\r\n     *  9 - receiptLogIndex - Log Index to read from the receipt\r\n     */\r\n    function receiveMessage(bytes memory inputData) public virtual {\r\n        bytes memory message = _validateAndExtractMessage(inputData);\r\n        _processMessageFromChild(message);\r\n    }\r\n\r\n    /**\r\n     * @notice Process message received from Child Tunnel\r\n     * @dev function needs to be implemented to handle message as per requirement\r\n     * This is called by onStateReceive function.\r\n     * Since it is called via a system call, any event will not be emitted during its execution.\r\n     * @param message bytes message that was sent from Child Tunnel\r\n     */\r\n    function _processMessageFromChild(bytes memory message) internal virtual;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/access/DeveloperAccess.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an developer) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the developer account will be the one that deploys the contract. This\r\n * can later be changed with {transferDevelopership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyDeveloper`, which can be applied to your functions to restrict their use to\r\n * the developer.\r\n */\r\nabstract contract DeveloperAccess is Context {\r\n    address private _developer;\r\n\r\n    event DevelopershipTransferred(address indexed previousDeveloper, address indexed newDeveloper);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial developer.\r\n     */\r\n    constructor(address dev) {\r\n        _setDeveloper(dev);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current developer.\r\n     */\r\n    function developer() public view virtual returns (address) {\r\n        return _developer;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the developer.\r\n     */\r\n    modifier onlyDeveloper() {\r\n        require(developer() == _msgSender(), \"Ownable: caller is not the developer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without developer. It will not be possible to call\r\n     * `onlyDeveloper` functions anymore. Can only be called by the current developer.\r\n     *\r\n     * NOTE: Renouncing developership will leave the contract without an developer,\r\n     * thereby removing any functionality that is only available to the developer.\r\n     */\r\n    function renounceDevelopership() public virtual onlyDeveloper {\r\n        _setDeveloper(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers developership of the contract to a new account (`newDeveloper`).\r\n     * Can only be called by the current developer.\r\n     */\r\n    function transferDevelopership(address newDeveloper) public virtual onlyDeveloper {\r\n        require(newDeveloper != address(0), \"Ownable: new developer is the zero address\");\r\n        _setDeveloper(newDeveloper);\r\n    }\r\n\r\n    function _setDeveloper(address newDeveloper) private {\r\n        address oldDeveloper = _developer;\r\n        _developer = newDeveloper;\r\n        emit DevelopershipTransferred(oldDeveloper, newDeveloper);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/GACStaking.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The staking contract designated to exist on the Ethereum chain,\r\n * briged to Polygon (MATIC) via FX-Portal.\r\n *\r\n * Author: Cory Cherven (Animalmix55/ToxicPizza)\r\n */\r\ncontract GACStaking is FxBaseRootTunnel, Ownable, DeveloperAccess {\r\n    IERC721Metadata public gacToken;\r\n    bool public stakingPaused;\r\n\r\n    /**\r\n     * Users' staked tokens mapped from their address\r\n     */\r\n    mapping(address => mapping(uint256 => bool)) public staked;\r\n\r\n    constructor(\r\n        address checkpointManager,\r\n        address fxRoot,\r\n        address devAddress,\r\n        address tokenAddress\r\n    ) FxBaseRootTunnel(checkpointManager, fxRoot) DeveloperAccess(devAddress) {\r\n        gacToken = IERC721Metadata(tokenAddress);\r\n    }\r\n\r\n    // ----------------------------------------------- PUBLIC FUNCTIONS ----------------------------------------------\r\n\r\n    /**\r\n     * Stakes the given token ids, provided the contract is approved to move them.\r\n     * @param tokenIds - the token ids to stake\r\n     */\r\n    function stake(uint256[] calldata tokenIds) external {\r\n        require(!stakingPaused, \"Staking paused\");\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            gacToken.transferFrom(msg.sender, address(this), tokenIds[i]);\r\n            staked[msg.sender][tokenIds[i]] = true;\r\n        }\r\n\r\n        _informChildOfEvent(msg.sender, tokenIds.length, true);\r\n    }\r\n\r\n    /**\r\n     * Unstakes the given token ids.\r\n     * @param tokenIds - the token ids to unstake\r\n     */\r\n    function unstake(uint256[] calldata tokenIds) external {\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            require(staked[msg.sender][tokenIds[i]], \"Not owned\");\r\n            gacToken.transferFrom(address(this), msg.sender, tokenIds[i]);\r\n            staked[msg.sender][tokenIds[i]] = false;\r\n        }\r\n\r\n        _informChildOfEvent(msg.sender, tokenIds.length, false);\r\n    }\r\n\r\n    // -------------------------------------------- ADMIN FUNCTIONS --------------------------------------------------\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the developer/owner.\r\n     */\r\n    modifier onlyOwnerOrDeveloper() {\r\n        require(\r\n            developer() == _msgSender() || owner() == _msgSender(),\r\n            \"Ownable: caller is not the owner or developer\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Updates the paused state of staking.\r\n     * @param paused - the state's new value.\r\n     */\r\n    function setStakingPaused(bool paused) external onlyOwnerOrDeveloper {\r\n        stakingPaused = paused;\r\n    }\r\n\r\n    /**\r\n     * Allows permissioned setting of fxChildTunnel\r\n     * @param _fxChildTunnel - the fxChildTunnel address\r\n     */\r\n    function setFxChildTunnel(address _fxChildTunnel) public override onlyOwnerOrDeveloper {\r\n        fxChildTunnel = _fxChildTunnel;\r\n    }\r\n\r\n    // -------------------------------------------- INTERNAL FUNCTIONS ----------------------------------------------\r\n\r\n    /**\r\n     * Informs the child contract, via FX-Portal, that a staking event has occurred.\r\n     * @param from - the user that staked/unstaked\r\n     * @param count - the number staked/unstaked\r\n     * @param isInbound - true if staking, false if unstaking\r\n     */\r\n    function _informChildOfEvent(\r\n        address from,\r\n        uint256 count,\r\n        bool isInbound\r\n    ) internal {\r\n        _sendMessageToChild(abi.encode(from, count, isInbound));\r\n    }\r\n\r\n    /**\r\n     * A stub that does nothing. We will not anticipate receiving messages from Polygon,\r\n     * we will only send messages to Polygon via FX-Portal.\r\n     */\r\n    function _processMessageFromChild(bytes memory) internal override {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDeveloper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"DevelopershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gacToken\",\"outputs\":[{\"internalType\":\"contract IERC721Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceDevelopership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setStakingPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeveloper\",\"type\":\"address\"}],\"name\":\"transferDevelopership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GACStaking", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "00000000000000000000000086e4dc95c7fbdbf52e33d563bbdb00823894c287000000000000000000000000fe5e5d361b2ad62c541bab87c45a0b9b018389a20000000000000000000000001569ab627df0c74e55b8e099a3f2b7d133665186000000000000000000000000ac2a6706285b91143eaded25d946ff17a60a6512", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://525dc0e88414b7326bd513ba35a8439396dca1f584548c353c39dd319a64526c"}]}