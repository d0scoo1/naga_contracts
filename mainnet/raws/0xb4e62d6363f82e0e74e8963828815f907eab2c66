{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n//  \u2584\u2584\u2584\u2584\u2584\u2584  \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \r\n// \u2588      \u2588\u2588       \u2588       \u2588       \u2588       \u2588   \u2588       \u2588       \u2588\r\n// \u2588  \u2584    \u2588   \u2584   \u2588   \u2584   \u2588   \u2584\u2584\u2584\u2584\u2588   \u2584\u2584\u2584\u2584\u2588   \u2588    \u2584\u2584\u2584\u2588  \u2584\u2584\u2584\u2584\u2584\u2588\r\n// \u2588 \u2588 \u2588   \u2588  \u2588 \u2588  \u2588  \u2588 \u2588  \u2588  \u2588  \u2584\u2584\u2588  \u2588  \u2584\u2584\u2588   \u2588   \u2588\u2584\u2584\u2584\u2588 \u2588\u2584\u2584\u2584\u2584\u2584 \r\n// \u2588 \u2588\u2584\u2588   \u2588  \u2588\u2584\u2588  \u2588  \u2588\u2584\u2588  \u2588  \u2588 \u2588  \u2588  \u2588 \u2588  \u2588   \u2588    \u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584  \u2588\r\n// \u2588       \u2588       \u2588       \u2588  \u2588\u2584\u2584\u2588 \u2588  \u2588\u2584\u2584\u2588 \u2588   \u2588   \u2588\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2588 \u2588\r\n// \u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\r\n//\r\n//  \u2584\u2584   \u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584  \u2584\u2584\u2584\u2584\u2584\u2584\u2584    \u2584     \u2584 \u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584   \u2584\u2584 \r\n// \u2588  \u2588\u2584\u2588  \u2588      \u2588      \u2588\u2588       \u2588  \u2588 \u2588 \u2584 \u2588 \u2588   \u2588       \u2588  \u2588 \u2588  \u2588\r\n// \u2588       \u2588  \u2584   \u2588  \u2584    \u2588    \u2584\u2584\u2584\u2588  \u2588 \u2588\u2588 \u2588\u2588 \u2588   \u2588\u2584     \u2584\u2588  \u2588\u2584\u2588  \u2588\r\n// \u2588       \u2588 \u2588\u2584\u2588  \u2588 \u2588 \u2588   \u2588   \u2588\u2584\u2584\u2584   \u2588       \u2588   \u2588 \u2588   \u2588 \u2588       \u2588\r\n// \u2588       \u2588      \u2588 \u2588\u2584\u2588   \u2588    \u2584\u2584\u2584\u2588  \u2588       \u2588   \u2588 \u2588   \u2588 \u2588   \u2584   \u2588\r\n// \u2588 \u2588\u2588\u2584\u2588\u2588 \u2588  \u2584   \u2588       \u2588   \u2588\u2584\u2584\u2584   \u2588   \u2584   \u2588   \u2588 \u2588   \u2588 \u2588  \u2588 \u2588  \u2588\r\n// \u2588\u2584\u2588   \u2588\u2584\u2588\u2584\u2588 \u2588\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588  \u2588\u2584\u2584\u2588 \u2588\u2584\u2584\u2588\u2584\u2584\u2584\u2588 \u2588\u2584\u2584\u2584\u2588 \u2588\u2584\u2584\u2588 \u2588\u2584\u2584\u2588\r\n//\r\n//  \u2584\u2584\u2584     \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584   \u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584 \r\n// \u2588   \u2588   \u2588       \u2588  \u2588 \u2588  \u2588       \u2588\r\n// \u2588   \u2588   \u2588   \u2584   \u2588  \u2588\u2584\u2588  \u2588    \u2584\u2584\u2584\u2588\r\n// \u2588   \u2588   \u2588  \u2588 \u2588  \u2588       \u2588   \u2588\u2584\u2584\u2584 \r\n// \u2588   \u2588\u2584\u2584\u2584\u2588  \u2588\u2584\u2588  \u2588       \u2588    \u2584\u2584\u2584\u2588\r\n// \u2588       \u2588       \u2588\u2588     \u2588\u2588   \u2588\u2584\u2584\u2584 \r\n// \u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588 \u2588\u2584\u2584\u2584\u2588 \u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\r\n//\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ninterface IERC1155Receiver is IERC165 {\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC1155 is IERC165 {\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n    event URI(string value, uint256 indexed id);\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\nlibrary Strings {\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n    IERC1155 internal dooggies;\r\n    bool internal _isMintedOut = false;\r\n\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    mapping(uint256 => address) internal _owners;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(uint => uint) internal idStakeLockTimes;\r\n    mapping(uint => bool) internal OGDooggiesMintedNewNew;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_, address dooggiesContract) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        dooggies = IERC1155(dooggiesContract);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) external view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        if(_isMintedOut == false && idStakeLockTimes[tokenId] != 0 && OGDooggiesMintedNewNew[tokenId] == false) {\r\n            return address(this);\r\n        }\r\n        return owner;\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) external virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) external virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender || owner == address(this));\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        if(_isMintedOut == false) {\r\n            require(idStakeLockTimes[tokenId] == 0 || OGDooggiesMintedNewNew[tokenId], \"NFT Cant currently be sent cause its staked\");\r\n        }\r\n        require(ERC721.ownerOf(tokenId) == from || from == address(this), \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\nerror ApprovalQueryForNonexistentToken();\r\nerror ApproveToCaller();\r\nerror ApprovalToCurrentOwner();\r\nerror BalanceQueryForZeroAddress();\r\nerror MintToZeroAddress();\r\nerror MintZeroQuantity();\r\nerror OwnerQueryForNonexistentToken();\r\nerror TransferCallerNotOwnerNorApproved();\r\nerror TransferFromIncorrectOwner();\r\nerror TransferToNonERC721ReceiverImplementer();\r\nerror TransferToZeroAddress();\r\nerror URIQueryForNonexistentToken();\r\n\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n    }\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct AddressData {\r\n        // Realistically, 2**64-1 is more than enough.\r\n        uint64 balance;\r\n        // Keeps track of mint count with minimal overhead for tokenomics.\r\n        uint64 numberMinted;\r\n    }\r\n\r\n    uint256 internal _currentIndex;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than _currentIndex - _startTokenId() times\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) external view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() <= curr && curr < _currentIndex) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n                if (ownership.addr != address(0)) {\r\n                    return ownership;\r\n                }\r\n                while (true) {\r\n                    curr--;\r\n                    ownership = _ownerships[curr];\r\n                    if (ownership.addr != address(0)) {\r\n                            return ownership;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) external override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) external virtual override {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external virtual override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n        }\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _startTokenId() <= tokenId && tokenId < _currentIndex;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity, _data, true);\r\n    }\r\n\r\n    function _mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            _addressData[to].balance += uint64(quantity);\r\n            _addressData[to].numberMinted += uint64(quantity);\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n            uint256 end = updatedIndex + quantity;\r\n\r\n            if (safe && to.isContract()) {\r\n                do {\r\n                    emit Transfer(address(0), to, updatedIndex);\r\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n                    }\r\n                } while (updatedIndex != end);\r\n                // Reentrancy protection\r\n                if (_currentIndex != startTokenId) revert();\r\n            } else {\r\n                do {\r\n                    emit Transfer(address(0), to, updatedIndex++);\r\n                } while (updatedIndex != end);\r\n            }\r\n            _currentIndex = updatedIndex;\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == from ||\r\n            isApprovedForAll(from, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender());\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, from);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[from].balance -= 1;\r\n            _addressData[to].balance += 1;\r\n\r\n            TokenOwnership storage currSlot = _ownerships[tokenId];\r\n            currSlot.addr = to;\r\n            currSlot.startTimestamp = uint64(block.timestamp);\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\r\n            if (nextSlot.addr == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId),\r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId != _currentIndex) {\r\n                    nextSlot.addr = from;\r\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n            return retval == IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract DooggiesSnack is ERC721A, Ownable {\r\n    address private devOwner;\r\n    address private whoCanMint;\r\n    bool internal _revealed = false;\r\n    bool internal mintEnabled = true;\r\n\r\n    string private baseURIForNewNew = \"ipfs://QmUtKHbiThL5FikUuUgvLrH7HdNzQ9KmfUtDsE6o3hUKTp\";\r\n    string private baseExt = \"\";\r\n\r\n    constructor(address owner_, address whoCanMint_) ERC721A(\"DooggiesSnack\", \"DooggiesSnack\") { // not the real name ;)\r\n        devOwner = owner_;\r\n        whoCanMint = whoCanMint_;\r\n    }\r\n\r\n    receive() external payable {\r\n        (bool sent, ) = payable(owner()).call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function mint(uint256 numberOfTokens, address user) external {\r\n        require(mintEnabled, \"Cant mint yet\");\r\n        require(whoCanMint == msg.sender, \"You cant mint\");\r\n        require(\r\n            numberOfTokens + totalSupply() <= 5000,\r\n            \"Not enough supply\"\r\n        );\r\n        _safeMint(user, numberOfTokens);\r\n    }\r\n\r\n    function reveal(bool revealed, string calldata _baseURI) external {\r\n        require(msg.sender == devOwner, \"You are not the owner\");\r\n        _revealed = revealed;\r\n        baseURIForNewNew = _baseURI;\r\n    }\r\n\r\n    function setExtension(string calldata _baseExt) external {\r\n        require(msg.sender == devOwner, \"You are not the owner\");\r\n        baseExt = _baseExt;\r\n    }\r\n\r\n    function updateOwner(address owner_) external {\r\n        require(msg.sender == devOwner, \"You are not the owner\");\r\n        require(owner_ != address(0));\r\n        devOwner = owner_;\r\n    }\r\n\r\n    function toggleMint() external {\r\n        require(msg.sender == devOwner, \"You are not the owner\");\r\n        mintEnabled = !mintEnabled;\r\n    }\r\n\r\n    function isMintEnabled() external view returns (bool) {\r\n        return mintEnabled;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        if (_revealed) {\r\n            return string(abi.encodePacked(baseURIForNewNew, Strings.toString(tokenId), baseExt));\r\n        } else {\r\n            return string(abi.encodePacked(baseURIForNewNew));\r\n        }\r\n    }\r\n}\r\n\r\ncontract WrapYourDooggies is ERC721, ReentrancyGuard, IERC721Receiver, IERC1155Receiver, Ownable {\r\n    address private devOwner;\r\n    bool private lockMintForever = false;\r\n    uint private totalAmount = 0;\r\n\r\n    uint constant private dayCount = 60 days;\r\n    uint constant private mintOutLock = 365 days;\r\n    uint private whenDidWeDeploy;\r\n\r\n    string private baseURIForOGDooggies = \"ipfs://QmSRPvb4E4oT8J73QoWGyvdFizWzpMkkSozAnCEMjT5K7G/\";\r\n    string private baseExt = \"\";\r\n\r\n    DooggiesSnack dooggiesSnack; // Hmm you curious what this could be if youre a reader of the github???\r\n\r\n    constructor(address dooggiesContract) ERC721(\"Dooggies\", \"Dooggies\", dooggiesContract) {\r\n        devOwner = address(0xf8c45B2375a574BecA18224C47353969C044a9EC);\r\n        dooggiesSnack = new DooggiesSnack(devOwner, address(this));\r\n        whenDidWeDeploy = block.timestamp;\r\n    }\r\n\r\n    receive() external payable {\r\n        (bool sent, ) = payable(owner()).call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function wrapMany(uint[] calldata tokenIds) nonReentrant external {\r\n        require(\r\n            dooggies.isApprovedForAll(msg.sender, address(this)),\r\n            \"You need approval\"\r\n        );\r\n        require(tokenIds.length > 0, \"Must have something\");\r\n\r\n        unchecked {\r\n            uint count = tokenIds.length;\r\n            uint[] memory qty = new uint[](count);\r\n            for(uint i = 0; i < count; i++) {\r\n                qty[i] = 1;\r\n            }\r\n\r\n            dooggies.safeBatchTransferFrom(msg.sender, address(this), tokenIds, qty, \"\");\r\n\r\n            for(uint i = 0; i < count; i++) {\r\n                require(address(this) == ownerOf(tokenIds[i]), \"Bruh.. we dont own that\");\r\n                safeTransferFrom(address(this), msg.sender, tokenIds[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function unwrapMany(uint[] calldata tokenIds) nonReentrant external {\r\n        require(tokenIds.length > 0, \"Must have something\");\r\n        unchecked {\r\n            uint count = tokenIds.length;\r\n            uint[] memory qty = new uint[](count);\r\n            for(uint i = 0; i < count; i++) {\r\n                require(msg.sender == ownerOf(tokenIds[i]), \"Bruh.. you dont own that\");\r\n                safeTransferFrom(msg.sender, address(this), tokenIds[i]);\r\n            }\r\n\r\n            for(uint i = 0; i < count; i++) {\r\n                qty[i] = 1;\r\n            }\r\n\r\n            dooggies.safeBatchTransferFrom(address(this), msg.sender, tokenIds, qty, \"\");\r\n        }\r\n    }\r\n\r\n    function wrapManyAndStake(uint[] calldata tokenIds) nonReentrant external {\r\n        require(\r\n            dooggies.isApprovedForAll(msg.sender, address(this)),\r\n            \"You need approval\"\r\n        );\r\n        require(tokenIds.length > 0, \"Must have something\");\r\n        require(_isMintedOut == false, \"Already minted out\");\r\n\r\n        unchecked {\r\n            uint count = tokenIds.length;\r\n            uint[] memory qty = new uint[](count);\r\n            for(uint i = 0; i < count; i++) {\r\n                qty[i] = 1;\r\n            }\r\n\r\n            dooggies.safeBatchTransferFrom(msg.sender, address(this), tokenIds, qty, \"\");\r\n\r\n            for(uint i = 0; i < count; i++) {\r\n                require(idStakeLockTimes[tokenIds[i]] == 0, \"This is already staked\");\r\n                require(address(this) == ownerOf(tokenIds[i]), \"Bruh.. we dont own that\");\r\n                require(OGDooggiesMintedNewNew[tokenIds[i]] == false, \"Bruh.. this NFT can only stake once\");\r\n                _owners[tokenIds[i]] = msg.sender;\r\n                idStakeLockTimes[tokenIds[i]] = block.timestamp;\r\n                // lol so it shows up on Opensea xD\r\n                // since we want to funnel people here on first wrap :)\r\n                // This will put it in the users wallet on opensea but not allow\r\n                // them to sell since they dont own the asset\r\n                emit Transfer(msg.sender, address(this), tokenIds[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function stakeMany(uint[] calldata tokenIds) nonReentrant external {\r\n        require(tokenIds.length > 0, \"Must have something\");\r\n        require(_isMintedOut == false, \"Already minted out\");\r\n        unchecked {\r\n            uint count = tokenIds.length;\r\n            for(uint i = 0; i < count; i++) {\r\n                require(msg.sender == ownerOf(tokenIds[i]), \"Bruh.. you dont own that\");\r\n                safeTransferFrom(msg.sender, address(this), tokenIds[i]);\r\n            }\r\n\r\n            for(uint i = 0; i < count; i++) {\r\n                require(idStakeLockTimes[tokenIds[i]] == 0, \"This is already staked\");\r\n                require(address(this) == ownerOf(tokenIds[i]), \"Bruh.. we dont own that\");\r\n                require(OGDooggiesMintedNewNew[tokenIds[i]] == false, \"Bruh.. this NFT can only stake once\");\r\n                _owners[tokenIds[i]] = msg.sender;\r\n                idStakeLockTimes[tokenIds[i]] = block.timestamp;\r\n            }\r\n        }\r\n    }\r\n\r\n    function unStakeMany(uint[] calldata tokenIds) nonReentrant external {\r\n        require(tokenIds.length > 0, \"Must have something\");\r\n        unchecked {\r\n            uint count = tokenIds.length;\r\n\r\n            for(uint i = 0; i < count; i++) {\r\n                require(msg.sender == _owners[tokenIds[i]], \"Bruh.. you dont own that\");\r\n                require(OGDooggiesMintedNewNew[tokenIds[i]] == false, \"Bruh.. this NFT can only stake once\");\r\n                require(idStakeLockTimes[tokenIds[i]] != 0, \"Bruh.. this is not staked\");\r\n                idStakeLockTimes[tokenIds[i]] = 0;\r\n                safeTransferFrom(address(this), msg.sender, tokenIds[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function zMintNewNew(uint[] calldata tokenIds) nonReentrant external {\r\n        require(_isMintedOut == false, \"Already minted out\");\r\n        unchecked {\r\n            uint count = tokenIds.length;\r\n            require(count >= 2, \"You need at least two dooggies to mint\");\r\n\r\n            uint amountToMint = 0;\r\n            uint8 localCounter = 0;\r\n            for(uint i = 0; i < count; i++) {\r\n                require(OGDooggiesMintedNewNew[tokenIds[i]] == false, \"Bruh.. this NFT can only mint once.\");\r\n                require(msg.sender == _owners[tokenIds[i]], \"Bruh.. you dont own that\");\r\n                if(block.timestamp - idStakeLockTimes[tokenIds[i]] >= dayCount) {\r\n                    OGDooggiesMintedNewNew[tokenIds[i]] = true;\r\n                    localCounter += 1;\r\n                    if(localCounter >= 2) {\r\n                        localCounter = 0;\r\n                        amountToMint += 1;\r\n                    }\r\n                    safeTransferFrom(address(this), msg.sender, tokenIds[i]);\r\n                }\r\n            }\r\n            require(amountToMint > 0, \"Need to have some to mint\");\r\n\r\n            dooggiesSnack.mint(amountToMint, msg.sender);\r\n        }\r\n    }\r\n\r\n    function zzMintOutMystery(uint amount) external {\r\n        require(msg.sender == devOwner, \"You are not the owner\");\r\n        \r\n        // give people time to wrap for the mystery mint. \r\n        // they will always be able to wrap but not be able to mint out\r\n        require(block.timestamp - whenDidWeDeploy >= mintOutLock);\r\n        \r\n        dooggiesSnack.mint(amount, msg.sender);\r\n\r\n        if(dooggiesSnack.totalSupply() > 4999) {\r\n            _isMintedOut = true;\r\n        }\r\n    }\r\n\r\n    function zzLockMint() external {\r\n        require(msg.sender == devOwner, \"You are not the owner\");\r\n        require(lockMintForever == false, \"Mint is already locked\");\r\n        lockMintForever = true;\r\n    }\r\n\r\n    function zzinitialise(uint256[] calldata tokenIds) external {\r\n        require(lockMintForever == false, \"You can no longer mint\");\r\n        require(msg.sender == devOwner, \"You are not the owner\");\r\n\r\n        uint count = tokenIds.length;\r\n        require(count > 0, \"Must have something\");\r\n        _balances[address(this)] += count;\r\n\r\n        emit Transfer(address(this), address(this), tokenIds[0]);\r\n\r\n        unchecked {\r\n            totalAmount += count;\r\n        }\r\n\r\n        // update the balances so that on wrapping the contract logic works\r\n        for (uint256 i = 0; i < count; i++) {\r\n            require(_owners[tokenIds[i]] == address(0), \"You cant mint twice\");\r\n            _owners[tokenIds[i]] = address(this);\r\n        }\r\n    }\r\n\r\n    function updateOwner(address owner_) external {\r\n        require(msg.sender == devOwner, \"You are not the owner\");\r\n        require(owner_ != address(0));\r\n        devOwner = owner_;\r\n    }\r\n\r\n    function setExtension(string calldata _baseExt) external {\r\n        require(msg.sender == devOwner, \"You are not the owner\");\r\n        baseExt = _baseExt;\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes calldata) pure external returns(bytes4) {\r\n        return WrapYourDooggies.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata\r\n    ) pure external returns (bytes4) {\r\n        return WrapYourDooggies.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] calldata,\r\n        uint256[] calldata,\r\n        bytes calldata\r\n    ) pure external returns (bytes4) {\r\n        return WrapYourDooggies.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        return string(abi.encodePacked(baseURIForOGDooggies, Strings.toString(tokenId), baseExt)); \r\n    }\r\n\r\n    function setURIOG(string calldata _baseURI) external {\r\n        require(msg.sender == devOwner, \"Step off brah\");\r\n        baseURIForOGDooggies = _baseURI;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return totalAmount;\r\n    }\r\n\r\n    function newnewAddress() external view returns (address) {\r\n        return address(dooggiesSnack);\r\n    }\r\n\r\n    function timeLeftForID(uint tokenID) external view returns (uint) {\r\n        if((block.timestamp - idStakeLockTimes[tokenID]) < dayCount) {\r\n            return dayCount - (block.timestamp - idStakeLockTimes[tokenID]);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function hasIDBeenMinted(uint tokenID) external view returns (bool) {\r\n        return OGDooggiesMintedNewNew[tokenID];\r\n    }\r\n\r\n    function isStaked(uint tokenID) external view returns (bool) {\r\n        return idStakeLockTimes[tokenID] != 0 && OGDooggiesMintedNewNew[tokenID] == false;\r\n    }\r\n\r\n    function isMintLocked() external view returns (bool) {\r\n        return lockMintForever;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dooggiesContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"hasIDBeenMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newnewAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseExt\",\"type\":\"string\"}],\"name\":\"setExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setURIOG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"timeLeftForID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unStakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unwrapMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"wrapMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"wrapManyAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"zMintNewNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zzLockMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zzMintOutMystery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"zzinitialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WrapYourDooggies", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000495f947276749ce646f68ac8c248420045cb7b5e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://df351fb233231b03d7eb0632cebb32cdf1c4a3c0f28139886491502ead2ad1af"}]}