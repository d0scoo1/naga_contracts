{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-02-28\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2022-02-28\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2022-02-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2022-02-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2022-02-10\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2022-01-11\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-10-30\r\n*/\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    // constructor () internal {\r\n    //     _owner = msg.sender;\r\n    //     emit OwnershipTransferred(address(0), _owner);\r\n    // }\r\n    function ownerInit() internal {\r\n         _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function mint(address recipient, uint256 amount) external returns(bool);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n      function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function blindBox(address seller, string calldata tokenURI, bool flag, address to, string calldata ownerId) external returns (uint256);\r\n    function mintAliaForNonCrypto(uint256 price, address from) external returns (bool);\r\n    function nonCryptoNFTVault() external returns(address);\r\n    function mainPerecentage() external returns(uint256);\r\n    function authorPercentage() external returns(uint256);\r\n    function platformPerecentage() external returns(uint256);\r\n    function updateAliaBalance(string calldata stringId, uint256 amount) external returns(bool);\r\n    function getSellDetail(uint256 tokenId) external view returns (address, uint256, uint256, address, uint256, uint256, uint256);\r\n    function getNonCryptoWallet(string calldata ownerId) external view returns(uint256);\r\n    function getNonCryptoOwner(uint256 tokenId) external view returns(string memory);\r\n    function adminOwner(address _address) external view returns(bool);\r\n     function getAuthor(uint256 tokenIdFunction) external view returns (address);\r\n     function _royality(uint256 tokenId) external view returns (uint256);\r\n     function getrevenueAddressBlindBox(string calldata info) external view returns(address);\r\n     function getboxNameByToken(uint256 token) external view returns(string memory);\r\n    //Revenue share\r\n    function addNonCryptoAuthor(string calldata artistId, uint256 tokenId, bool _isArtist) external returns(bool);\r\n    function transferAliaArtist(address buyer, uint256 price, address nftVaultAddress, uint256 tokenId ) external returns(bool);\r\n    function checkArtistOwner(string calldata artistId, uint256 tokenId) external returns(bool);\r\n    function checkTokenAuthorIsArtist(uint256 tokenId) external returns(bool);\r\n    function withdraw(uint) external;\r\n    function deposit() payable external;\r\n    // function approve(address spender, uint256 rawAmount) external;\r\n\r\n    // BlindBox ref:https://noborderz.slack.com/archives/C0236PBG601/p1633942033011800?thread_ts=1633941154.010300&cid=C0236PBG601\r\n    function isSellable (string calldata name) external view returns(bool);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function burn (uint256 tokenId) external;\r\n\r\n}\r\n\r\n// File: contracts/INFT.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// import \"../openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol\";\r\n\r\ninterface INFT {\r\n    function transferFromAdmin(address owner, address to, uint256 tokenId) external;\r\n    function mintWithTokenURI(address to, string calldata tokenURI) external returns (uint256);\r\n    function getAuthor(uint256 tokenIdFunction) external view returns (address);\r\n    function updateTokenURI(uint256 tokenIdT, string calldata uriT) external;\r\n    //\r\n    function mint(address to, string calldata tokenURI) external returns (uint256);\r\n    function transferOwnership(address newOwner) external;\r\n    function ownerOf(uint256 tokenId) external view returns(address);\r\n    function transferFrom(address owner, address to, uint256 tokenId) external;\r\n}\r\n\r\n// File: contracts/IFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IFactory {\r\n    function create(string calldata name_, string calldata symbol_, address owner_) external returns(address);\r\n    function getCollections(address owner_) external view returns(address [] memory);\r\n}\r\n\r\n// File: contracts/LPInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface LPInterface {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n   \r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Proxy/DexStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n/**\r\n * @title DexStorage\r\n * @dev Defining dex storage for the proxy contract.\r\n */\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract DexStorage {\r\n using SafeMath for uint256;\r\n   address x; // dummy variable, never set or use its value in any logic contracts. It keeps garbage value & append it with any value set on it.\r\n   IERC20 ALIA;\r\n   INFT XNFT;\r\n   IFactory factory;\r\n   IERC20 OldNFTDex;\r\n   IERC20 BUSD;\r\n   IERC20 BNB;\r\n   struct RDetails {\r\n       address _address;\r\n       uint256 percentage;\r\n   }\r\n  struct AuthorDetails {\r\n    address _address;\r\n    uint256 royalty;\r\n    string ownerId;\r\n    bool isSecondry;\r\n  }\r\n  // uint256[] public sellList; // this violates generlization as not tracking tokenIds agains nftContracts/collections but ignoring as not using it in logic anywhere (uncommented)\r\n  mapping (uint256 => mapping(address => AuthorDetails)) internal _tokenAuthors;\r\n  mapping (address => bool) public adminOwner;\r\n  address payable public platform;\r\n  address payable public authorVault;\r\n  uint256 internal platformPerecentage;\r\n  struct fixedSell {\r\n  //  address nftContract; // adding to support multiple NFT contracts buy/sell \r\n    address seller;\r\n    uint256 price;\r\n    uint256 timestamp;\r\n    bool isDollar;\r\n    uint256 currencyType;\r\n  }\r\n  // stuct for auction\r\n  struct auctionSell {\r\n    address seller;\r\n    address nftContract;\r\n    address bidder;\r\n    uint256 minPrice;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 bidAmount;\r\n    bool isDollar;\r\n    uint256 currencyType;\r\n    // address nftAddress;\r\n  }\r\n\r\n  \r\n  // tokenId => nftContract => fixedSell\r\n  mapping (uint256 => mapping (address  => fixedSell)) internal _saleTokens;\r\n  mapping(address => bool) public _supportNft;\r\n  // tokenId => nftContract => auctionSell\r\n  mapping(uint256 => mapping ( address => auctionSell)) internal _auctionTokens;\r\n  address payable public nonCryptoNFTVault;\r\n  // tokenId => nftContract => ownerId\r\n  mapping (uint256=> mapping (address => string)) internal _nonCryptoOwners;\r\n  struct balances{\r\n    uint256 bnb;\r\n    uint256 Alia;\r\n    uint256 BUSD;\r\n  }\r\n  mapping (string => balances) internal _nonCryptoWallet;\r\n \r\n  LPInterface LPAlia;\r\n  LPInterface LPBNB;\r\n  uint256 public adminDiscount;\r\n  address admin;\r\n  mapping (string => address) internal revenueAddressBlindBox;\r\n  mapping (uint256=>string) internal boxNameByToken;\r\n   bool public collectionConfig;\r\n  uint256 public countCopy;\r\n  mapping (uint256=> mapping( address => mapping(uint256 => bool))) _allowedCurrencies;\r\n  IERC20 token;\r\n//   struct offer {\r\n//       address _address;\r\n//       string ownerId;\r\n//       uint256 currencyType;\r\n//       uint256 price;\r\n//   }\r\n//   struct offers {\r\n//       uint256 count;\r\n//       mapping (uint256 => offer) _offer;\r\n//   }\r\n//   mapping(uint256 => mapping(address => offers)) _offers;\r\n  uint256[] allowedArray;\r\n  mapping (address => bool) collectionsWithRoyalties;\r\n  address blindAddress;\r\n  mapping(uint256 => mapping(address => bool)) isBlindNft;\r\n  address private proxyOwner; //never use this variable\r\n\r\n}\r\n\r\n// File: contracts/SecondDexStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract SecondDexStorage{\r\n    // Add new storage here\r\n    mapping(uint256 => bool) blindNFTOpenForSale;\r\n    mapping(uint256 => mapping(address => uint256)) seriesIds;\r\n}\r\n\r\n// File: contracts/BNFT.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface BNFT {\r\n    function mint(address to_, uint256 countNFTs_) external returns (uint256, uint256);\r\n    function burnAdmin(uint256 tokenId) external;\r\n    function TransferFromAdmin(uint256 tokenId, address to) external;\r\n}\r\n\r\n// File: contracts/CollectionDex.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract BlindboxDex is Ownable, DexStorage, SecondDexStorage {\r\n   \r\n  event MintWithTokenURI(address indexed collection, uint256 indexed tokenId, address minter, string tokenURI);\r\n   event SellNFT(address indexed from, address nft_a, uint256 tokenId, address seller, uint256 price, uint256 royalty, uint256 baseCurrency, uint256[] allowedCurrencies);\r\n  event BuyNFT(address indexed from, address nft_a, uint256 tokenId, address buyer, uint256 price, uint256 baseCurrency, uint256 calculated, uint256 currencyType);\r\n  event CancelSell(address indexed from, address nftContract, uint256 tokenId);\r\n  event UpdatePrice(address indexed from, uint256 tokenId, uint256 newPrice, bool isDollar, address nftContract, uint256 baseCurrency, uint256[] allowedCurrencies);\r\n  event BuyNFTNonCrypto( address indexed from, address nft_a, uint256 tokenId, string buyer, uint256 price, uint256 baseCurrency, uint256 calculated, uint256 currencyType);\r\n event TransferPackNonCrypto(address indexed from, string to, uint256 tokenId);\r\n  event Claim(address indexed bidder, address nftContract, uint256 tokenId, uint256 amount, address seller, uint256 baseCurrency);\r\n event OnAuction(address indexed seller, address nftContract, uint256 indexed tokenId, uint256 startPrice, uint256 endTime, uint256 baseCurrency);\r\n\r\n    constructor() public{\r\n    }\r\n   \r\n\r\n  function newsaleTokens(address _newAddress, address _oldAddress, uint256[] memory ids) public {\r\n    require(msg.sender == admin, \"101\");\r\n   for(uint256 i =0; i< ids.length; i++){\r\n     uint256 id = ids[i];\r\n      address _tokenOwner = INFT(_oldAddress).ownerOf(id);\r\n    (uint256 fromIndex, uint256 toIndex) = BNFT(_newAddress).mint(_tokenOwner, 1);\r\n    if(_tokenOwner == address(this)) copyData(fromIndex,_newAddress,id,_oldAddress);\r\n    BNFT(_oldAddress).burnAdmin(id);\r\n    isBlindNft[fromIndex][_newAddress] = true;\r\n    delete isBlindNft[id][_oldAddress];\r\n    _tokenAuthors[fromIndex][_newAddress]._address = _tokenAuthors[id][_oldAddress]._address;\r\n    _tokenAuthors[fromIndex][_newAddress].royalty = _tokenAuthors[id][_oldAddress].royalty;\r\n    _tokenAuthors[fromIndex][_newAddress].ownerId = _tokenAuthors[id][_oldAddress].ownerId;\r\n    _tokenAuthors[fromIndex][_newAddress].isSecondry = _tokenAuthors[id][_oldAddress].isSecondry;\r\n    delete _tokenAuthors[id][_oldAddress];\r\n    \r\n   }\r\n}\r\n\r\n  function copyData(uint256 _newTokenId, address _newAddress, uint256 _oldTokenId, address _oldAddress) internal {\r\n    if(_saleTokens[_oldTokenId][_oldAddress].seller != address(0x0)){\r\n      _saleTokens[_newTokenId][_newAddress].seller = _saleTokens[_oldTokenId][_oldAddress].seller;\r\n      _saleTokens[_newTokenId][_newAddress].price = _saleTokens[_oldTokenId][_oldAddress].price;\r\n      _saleTokens[_newTokenId][_newAddress].timestamp = _saleTokens[_oldTokenId][_oldAddress].timestamp;\r\n      _saleTokens[_newTokenId][_newAddress].isDollar = _saleTokens[_oldTokenId][_oldAddress].isDollar;\r\n      _saleTokens[_newTokenId][_newAddress].currencyType = _saleTokens[_oldTokenId][_oldAddress].currencyType;\r\n      delete _saleTokens[_oldTokenId][_oldAddress];\r\n      //for polygon 4 currencies, 2 for eth\r\n      for(uint256 i = 0; i< 2; i++){\r\n      _allowedCurrencies[_newTokenId][_newAddress][i] = _allowedCurrencies[_oldTokenId][_oldAddress][i];\r\n      delete _allowedCurrencies[_oldTokenId][_oldAddress][i];\r\n    }\r\n    } else {\r\n      _auctionTokens[_newTokenId][_newAddress].seller = _auctionTokens[_oldTokenId][_oldAddress].seller;\r\n      _auctionTokens[_newTokenId][_newAddress].nftContract = _auctionTokens[_oldTokenId][_oldAddress].nftContract;\r\n      _auctionTokens[_newTokenId][_newAddress].bidder = _auctionTokens[_oldTokenId][_oldAddress].bidder;\r\n      _auctionTokens[_newTokenId][_newAddress].minPrice = _auctionTokens[_oldTokenId][_oldAddress].minPrice;\r\n      _auctionTokens[_newTokenId][_newAddress].startTime = _auctionTokens[_oldTokenId][_oldAddress].startTime;\r\n      _auctionTokens[_newTokenId][_newAddress].endTime = _auctionTokens[_oldTokenId][_oldAddress].endTime;\r\n      _auctionTokens[_newTokenId][_newAddress].bidAmount = _auctionTokens[_oldTokenId][_oldAddress].bidAmount;\r\n      _auctionTokens[_newTokenId][_newAddress].isDollar = _auctionTokens[_oldTokenId][_oldAddress].isDollar;\r\n      _auctionTokens[_newTokenId][_newAddress].currencyType = _auctionTokens[_oldTokenId][_oldAddress].currencyType;\r\n      delete _auctionTokens[_oldTokenId][_oldAddress];\r\n    }\r\n  }\r\n  function adminBlindMint(address collection, address to, address author, string memory ownerId, uint256 royalty) public {\r\n      require(admin == msg.sender, \"not authorize\");\r\n      (uint256 from, uint256 toIndex) = BNFT(collection).mint(to, 1);\r\n      _tokenAuthors[from][collection]._address = author;\r\n      _tokenAuthors[from][collection].royalty = royalty;\r\n     \r\n  }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_supportNft\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collection\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"ownerId\",\"type\":\"string\"},{\"name\":\"royalty\",\"type\":\"uint256\"}],\"name\":\"adminBlindMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectionConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_oldAddress\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"newsaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonCryptoNFTVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"MintWithTokenURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nft_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"royalty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"SellNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nft_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"calculated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currencyType\",\"type\":\"uint256\"}],\"name\":\"BuyNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isDollar\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nft_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"calculated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currencyType\",\"type\":\"uint256\"}],\"name\":\"BuyNFTNonCrypto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferPackNonCrypto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"}],\"name\":\"OnAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "BlindboxDex", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://669acf78a460fd6169200e0c9f7f01b3863da65fb9357d20050e71a16ebfa8f1"}]}