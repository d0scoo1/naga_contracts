{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/governance/ForwarderV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./ControllableV2.sol\\\";\\r\\nimport \\\"./ForwarderV2Storage.sol\\\";\\r\\nimport \\\"../../openzeppelin/IERC20.sol\\\";\\r\\nimport \\\"../../openzeppelin/SafeERC20.sol\\\";\\r\\nimport \\\"../interface/ISmartVault.sol\\\";\\r\\nimport \\\"../interface/IFeeRewardForwarder.sol\\\";\\r\\nimport \\\"../interface/IBookkeeper.sol\\\";\\r\\nimport \\\"../../third_party/uniswap/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../../third_party/uniswap/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../../third_party/uniswap/IUniswapV2Pair.sol\\\";\\r\\n\\r\\n/// @title Convert rewards from external projects to TETU and FundToken(USDC by default)\\r\\n///        and send them to Profit Sharing pool, FundKeeper and vaults\\r\\n///        After swap TETU tokens are deposited to the Profit Share pool and give xTETU tokens.\\r\\n///        These tokens sent to Vault as a reward for vesting (4 weeks).\\r\\n///        If external rewards have a destination Profit Share pool\\r\\n///        it is just sent to the contract as TETU tokens increasing share price.\\r\\n/// @author belbix\\r\\ncontract ForwarderV2 is ControllableV2, IFeeRewardForwarder, ForwarderV2Storage {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// @notice Version of the contract\\r\\n  /// @dev Should be incremented when contract is changed\\r\\n  string public constant VERSION = \\\"1.3.0\\\";\\r\\n  uint256 public constant LIQUIDITY_DENOMINATOR = 100;\\r\\n  uint constant public DEFAULT_UNI_FEE_DENOMINATOR = 1000;\\r\\n  uint constant public DEFAULT_UNI_FEE_NUMERATOR = 997;\\r\\n  uint constant public ROUTE_LENGTH_MAX = 5;\\r\\n  uint constant public SLIPPAGE_DENOMINATOR = 100;\\r\\n  uint constant public MINIMUM_AMOUNT = 100;\\r\\n\\r\\n  // ************ EVENTS **********************\\r\\n  /// @notice Fee distributed to Profit Sharing pool\\r\\n  event FeeMovedToPs(address indexed ps, address indexed token, uint256 amount);\\r\\n  /// @notice Fee distributed to vault\\r\\n  event FeeMovedToVault(address indexed vault, address indexed token, uint256 amount);\\r\\n  /// @notice Fee distributed to FundKeeper\\r\\n  event FeeMovedToFund(address indexed fund, address indexed token, uint256 amount);\\r\\n  /// @notice Simple liquidation was done\\r\\n  event Liquidated(address indexed tokenIn, address indexed tokenOut, uint256 amount);\\r\\n  event LiquidityAdded(\\r\\n    address router,\\r\\n    address token0,\\r\\n    uint256 token0Amount,\\r\\n    address token1,\\r\\n    uint256 token1Amount\\r\\n  );\\r\\n\\r\\n  /// @notice Initialize contract after setup it as proxy implementation\\r\\n  /// @dev Use it only once after first logic setup\\r\\n  ///      Initialize Controllable with sender address\\r\\n  function initialize(address _controller) external initializer {\\r\\n    ControllableV2.initializeControllable(_controller);\\r\\n  }\\r\\n\\r\\n  /// @dev Allow operation only for Controller or Governance\\r\\n  modifier onlyControllerOrGovernance() {\\r\\n    require(_isController(msg.sender) || _isGovernance(msg.sender), \\\"F2: Not controller or gov\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev Only Reward Distributor allowed. Governance is Reward Distributor by default.\\r\\n  modifier onlyRewardDistribution() {\\r\\n    require(IController(_controller()).isRewardDistributor(msg.sender), \\\"F2: Only distributor\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // ***************** VIEW ************************\\r\\n\\r\\n  /// @notice Return Profit Sharing pool address\\r\\n  /// @return Profit Sharing pool address\\r\\n  function psVault() public view returns (address) {\\r\\n    return IController(_controller()).psVault();\\r\\n  }\\r\\n\\r\\n  /// @notice Return FundKeeper address\\r\\n  /// @return FundKeeper address\\r\\n  function fund() public view returns (address) {\\r\\n    return IController(_controller()).fund();\\r\\n  }\\r\\n\\r\\n  /// @notice Return Target token (TETU) address\\r\\n  /// @return Target token (TETU) address\\r\\n  function tetu() public view returns (address) {\\r\\n    return IController(_controller()).rewardToken();\\r\\n  }\\r\\n\\r\\n  /// @notice Return a token address used for FundKeeper (USDC by default)\\r\\n  /// @return FundKeeper's main token address (USDC by default)\\r\\n  function fundToken() public view returns (address) {\\r\\n    return IController(_controller()).fundToken();\\r\\n  }\\r\\n\\r\\n  /// @notice Return slippage numerator\\r\\n  function slippageNumerator() public view returns (uint) {\\r\\n    return _slippageNumerator();\\r\\n  }\\r\\n\\r\\n\\r\\n  // ************ GOVERNANCE ACTIONS **************************\\r\\n\\r\\n  /// @notice Only Governance or Controller can call it.\\r\\n  ///         Add a pair with largest TVL for given token\\r\\n  function addLargestLps(address[] memory _tokens, address[] memory _lps) external onlyControllerOrGovernance {\\r\\n    require(_tokens.length == _lps.length, \\\"F2: Wrong arrays\\\");\\r\\n    for (uint i = 0; i < _lps.length; i++) {\\r\\n      IUniswapV2Pair lp = IUniswapV2Pair(_lps[i]);\\r\\n      address oppositeToken;\\r\\n      if (lp.token0() == _tokens[i]) {\\r\\n        oppositeToken = lp.token1();\\r\\n      } else if (lp.token1() == _tokens[i]) {\\r\\n        oppositeToken = lp.token0();\\r\\n      } else {\\r\\n        revert(\\\"F2: Wrong LP\\\");\\r\\n      }\\r\\n      largestLps[_tokens[i]] = LpData(address(lp), _tokens[i], oppositeToken);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance or Controller can call it.\\r\\n  ///         Add largest pairs with the most popular tokens on the current network\\r\\n  function addBlueChipsLps(address[] memory _lps) external onlyControllerOrGovernance {\\r\\n    for (uint i = 0; i < _lps.length; i++) {\\r\\n      IUniswapV2Pair lp = IUniswapV2Pair(_lps[i]);\\r\\n      blueChipsLps[lp.token0()][lp.token1()] = LpData(address(lp), lp.token0(), lp.token1());\\r\\n      blueChipsLps[lp.token1()][lp.token0()] = LpData(address(lp), lp.token0(), lp.token1());\\r\\n      blueChipsTokens[lp.token0()] = true;\\r\\n      blueChipsTokens[lp.token1()] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance or Controller can call it.\\r\\n  ///         Sets numerator for a part of profit that goes instead of PS to TETU liquidity\\r\\n  function setLiquidityNumerator(uint256 _value) external onlyControllerOrGovernance {\\r\\n    require(_value <= LIQUIDITY_DENOMINATOR, \\\"F2: Too high value\\\");\\r\\n    _setLiquidityNumerator(_value);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance or Controller can call it.\\r\\n  ///         Sets numerator for slippage value. Must be in a range 0-100\\r\\n  function setSlippageNumerator(uint256 _value) external onlyControllerOrGovernance {\\r\\n    require(_value <= SLIPPAGE_DENOMINATOR, \\\"F2: Too high value\\\");\\r\\n    _setSlippageNumerator(_value);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance or Controller can call it.\\r\\n  ///         Sets router for a pair with TETU liquidity\\r\\n  function setLiquidityRouter(address _value) external onlyControllerOrGovernance {\\r\\n    _setLiquidityRouter(_value);\\r\\n  }\\r\\n\\r\\n  /// @notice Only Governance or Controller can call it.\\r\\n  ///         Sets specific Swap fee for given factory\\r\\n  function setUniPlatformFee(address _factory, uint _feeNumerator, uint _feeDenominator) external onlyControllerOrGovernance {\\r\\n    require(_factory != address(0), \\\"F2: Zero factory\\\");\\r\\n    require(_feeNumerator <= _feeDenominator, \\\"F2: Wrong values\\\");\\r\\n    require(_feeDenominator != 0, \\\"F2: Wrong denominator\\\");\\r\\n    uniPlatformFee[_factory] = UniFee(_feeNumerator, _feeDenominator);\\r\\n  }\\r\\n\\r\\n  // ***************** EXTERNAL *******************************\\r\\n\\r\\n  /// @notice Only Reward Distributor or Governance or Controller can call it.\\r\\n  ///         Distribute rewards for given vault, move fees to PS and Fund\\r\\n  ///         Under normal circumstances, sender is the strategy\\r\\n  /// @param _amount Amount of tokens for distribute\\r\\n  /// @param _token Token for distribute\\r\\n  /// @param _vault Target vault\\r\\n  /// @return Amount of distributed Target(TETU) tokens + FundKeeper fee (approx)\\r\\n  function distribute(\\r\\n    uint256 _amount,\\r\\n    address _token,\\r\\n    address _vault\\r\\n  ) public override onlyRewardDistribution returns (uint256){\\r\\n    require(fundToken() != address(0), \\\"F2: Fund token is zero\\\");\\r\\n    require(_amount != 0, \\\"F2: Zero amount for distribute\\\");\\r\\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n    // don't spend gas for garbage\\r\\n    if (_amount < MINIMUM_AMOUNT) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    // calculate require amounts\\r\\n    uint toFund = _toFundAmount(_amount);\\r\\n    uint toPsAndLiq = _toPsAndLiqAmount(_amount - toFund);\\r\\n    uint toLiq = _toTetuLiquidityAmount(toPsAndLiq);\\r\\n    uint toLiqFundTokenPart = toLiq / 2;\\r\\n    uint toLiqTetuTokenPart = toLiq - toLiqFundTokenPart;\\r\\n    uint toPs = toPsAndLiq - toLiq;\\r\\n    uint toVault = _amount - toFund - toPsAndLiq;\\r\\n\\r\\n    uint fundTokenRequires = toFund + toLiqFundTokenPart;\\r\\n    uint tetuTokenRequires = toLiqTetuTokenPart + toPs + toVault;\\r\\n    require(fundTokenRequires + tetuTokenRequires == _amount, \\\"F2: Wrong amount sum\\\");\\r\\n\\r\\n\\r\\n    uint fundTokenAmount = _liquidate(_token, fundToken(), fundTokenRequires);\\r\\n    uint sentToFund = _sendToFund(fundTokenAmount, toFund, toLiqFundTokenPart);\\r\\n\\r\\n    uint tetuTokenAmount = _liquidate(_token, tetu(), tetuTokenRequires);\\r\\n\\r\\n    uint256 tetuDistributed = 0;\\r\\n    if (toPsAndLiq > MINIMUM_AMOUNT && fundTokenAmount > sentToFund) {\\r\\n      tetuDistributed += _sendToPsAndLiquidity(\\r\\n        tetuTokenAmount,\\r\\n        toLiqTetuTokenPart,\\r\\n        toPs,\\r\\n        toVault,\\r\\n        fundTokenAmount - sentToFund\\r\\n      );\\r\\n    }\\r\\n    if (toVault > MINIMUM_AMOUNT) {\\r\\n      tetuDistributed += _sendToVault(\\r\\n        _vault,\\r\\n        tetuTokenAmount,\\r\\n        toLiqTetuTokenPart,\\r\\n        toPs,\\r\\n        toVault\\r\\n      );\\r\\n    }\\r\\n\\r\\n    _sendExcessTokens();\\r\\n    return _plusFundAmountToDistributedAmount(tetuDistributed);\\r\\n  }\\r\\n\\r\\n  /// @dev Simple function for liquidate and send back the given token\\r\\n  ///      No strict access\\r\\n  function liquidate(address tokenIn, address tokenOut, uint256 amount) external override returns (uint256) {\\r\\n    if (tokenIn == tokenOut) {\\r\\n      // no action required if the same token;\\r\\n      return amount;\\r\\n    }\\r\\n    if (amount == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    uint256 resultAmount = _liquidate(tokenIn, tokenOut, amount);\\r\\n    require(resultAmount > 0, \\\"F2: Liquidated with zero result\\\");\\r\\n    IERC20(tokenOut).safeTransfer(msg.sender, resultAmount);\\r\\n    emit Liquidated(tokenIn, tokenOut, amount);\\r\\n    return resultAmount;\\r\\n  }\\r\\n\\r\\n  /// @dev We don't need this function anymore, keep for compatibility\\r\\n  function notifyPsPool(address, uint256) external pure override returns (uint256) {\\r\\n    revert(\\\"F2: Directly notifyPsPool not implemented\\\");\\r\\n  }\\r\\n\\r\\n  /// @dev We don't need this function anymore, keep for compatibility\\r\\n  function notifyCustomPool(address, address, uint256) external pure override returns (uint256) {\\r\\n    revert(\\\"F2: Directly notifyCustomPool not implemented\\\");\\r\\n  }\\r\\n\\r\\n\\r\\n  //************************* INTERNAL **************************\\r\\n\\r\\n  function _sendExcessTokens() internal {\\r\\n    uint excessFundToken = IERC20(fundToken()).balanceOf(address(this));\\r\\n    if (excessFundToken > MINIMUM_AMOUNT && fund() != address(0)) {\\r\\n      IERC20(fundToken()).safeTransfer(fund(), excessFundToken);\\r\\n      IBookkeeper(IController(_controller()).bookkeeper())\\r\\n      .registerFundKeeperEarned(fundToken(), excessFundToken);\\r\\n      emit FeeMovedToFund(fund(), fundToken(), excessFundToken);\\r\\n    }\\r\\n\\r\\n    uint excessTetuToken = IERC20(tetu()).balanceOf(address(this));\\r\\n    if (excessTetuToken > MINIMUM_AMOUNT) {\\r\\n      IERC20(tetu()).safeTransfer(psVault(), excessTetuToken);\\r\\n      emit FeeMovedToPs(psVault(), tetu(), excessTetuToken);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _sendToPsAndLiquidity(\\r\\n    uint tetuTokenAmount,\\r\\n    uint baseToLiqTetuTokenPart,\\r\\n    uint baseToPs,\\r\\n    uint baseToVault,\\r\\n    uint toLiqFundTokenPart\\r\\n  ) internal returns (uint) {\\r\\n    uint baseSum = baseToLiqTetuTokenPart + baseToPs + baseToVault;\\r\\n\\r\\n    uint toLiqTetuTokenPart = tetuTokenAmount * baseToLiqTetuTokenPart / baseSum;\\r\\n    uint tetuLiqAmount = _sendToLiquidity(toLiqTetuTokenPart, toLiqFundTokenPart);\\r\\n\\r\\n    uint toPs = tetuTokenAmount * baseToPs / baseSum;\\r\\n    if (toPs > MINIMUM_AMOUNT) {\\r\\n      IERC20(tetu()).safeTransfer(psVault(), toPs);\\r\\n      emit FeeMovedToPs(psVault(), tetu(), toPs);\\r\\n    }\\r\\n    return toPs + tetuLiqAmount;\\r\\n  }\\r\\n\\r\\n  function _sendToVault(\\r\\n    address _vault,\\r\\n    uint tetuTokenAmount,\\r\\n    uint baseToLiqTetuTokenPart,\\r\\n    uint baseToPs,\\r\\n    uint baseToVault\\r\\n  ) internal returns (uint256) {\\r\\n    address xTetu = psVault();\\r\\n    ISmartVault smartVault = ISmartVault(_vault);\\r\\n    address[] memory rts = smartVault.rewardTokens();\\r\\n    require(rts.length > 0, \\\"F2: No reward tokens\\\");\\r\\n    address rt = rts[0];\\r\\n\\r\\n    uint baseSum = baseToLiqTetuTokenPart + baseToPs + baseToVault;\\r\\n    uint toVault = tetuTokenAmount * baseToVault / baseSum;\\r\\n    // no actions if little amount\\r\\n    if (toVault < MINIMUM_AMOUNT) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 amountToSend;\\r\\n    if (rt == xTetu) {\\r\\n      uint rtBalanceBefore = IERC20(xTetu).balanceOf(address(this));\\r\\n      IERC20(tetu()).safeApprove(psVault(), toVault);\\r\\n      ISmartVault(psVault()).deposit(toVault);\\r\\n      amountToSend = IERC20(xTetu).balanceOf(address(this)) - rtBalanceBefore;\\r\\n    } else if (rt == tetu()) {\\r\\n      amountToSend = toVault;\\r\\n    } else {\\r\\n      revert(\\\"F2: First reward token not TETU nor xTETU\\\");\\r\\n    }\\r\\n\\r\\n    IERC20(rt).safeApprove(_vault, amountToSend);\\r\\n    smartVault.notifyTargetRewardAmount(rt, amountToSend);\\r\\n    emit FeeMovedToVault(_vault, rt, amountToSend);\\r\\n    return toVault;\\r\\n  }\\r\\n\\r\\n  function _sendToFund(uint256 fundTokenAmount, uint baseToFundAmount, uint baseToLiqFundTokenPart) internal returns (uint){\\r\\n    uint toFund = fundTokenAmount * baseToFundAmount / (baseToFundAmount + baseToLiqFundTokenPart);\\r\\n\\r\\n    // no actions if we don't have a fee for fund\\r\\n    if (toFund == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n    require(fund() != address(0), \\\"F2: Fund is zero\\\");\\r\\n\\r\\n    IERC20(fundToken()).safeTransfer(fund(), toFund);\\r\\n\\r\\n    IBookkeeper(IController(_controller()).bookkeeper())\\r\\n    .registerFundKeeperEarned(fundToken(), toFund);\\r\\n    emit FeeMovedToFund(fund(), fundToken(), toFund);\\r\\n    return toFund;\\r\\n  }\\r\\n\\r\\n  function _sendToLiquidity(uint toLiqTetuTokenPart, uint toLiqFundTokenPart) internal returns (uint256) {\\r\\n    // no actions if we don't have a fee for liquidity\\r\\n    if (toLiqTetuTokenPart < MINIMUM_AMOUNT || toLiqFundTokenPart < MINIMUM_AMOUNT) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 lpAmount = _addLiquidity(\\r\\n      liquidityRouter(),\\r\\n      fundToken(),\\r\\n      tetu(),\\r\\n      toLiqFundTokenPart,\\r\\n      toLiqTetuTokenPart\\r\\n    );\\r\\n\\r\\n    require(lpAmount != 0, \\\"F2: Liq: Zero LP amount\\\");\\r\\n\\r\\n    address liquidityPair = IUniswapV2Factory(IUniswapV2Router02(liquidityRouter()).factory())\\r\\n    .getPair(fundToken(), tetu());\\r\\n\\r\\n    IERC20(liquidityPair).safeTransfer(fund(), lpAmount);\\r\\n    return toLiqTetuTokenPart * 2;\\r\\n  }\\r\\n\\r\\n  /// @dev Compute amount for FundKeeper based on Fund ratio from Controller\\r\\n  /// @param _amount 100% Amount\\r\\n  /// @return Percent of total amount\\r\\n  function _toFundAmount(uint256 _amount) internal view returns (uint256) {\\r\\n    uint256 fundNumerator = IController(_controller()).fundNumerator();\\r\\n    uint256 fundDenominator = IController(_controller()).fundDenominator();\\r\\n    return _amount * fundNumerator / fundDenominator;\\r\\n  }\\r\\n\\r\\n  /// @dev Compute amount for Profit Sharing vault based Controller settings\\r\\n  /// @param _amount 100% Amount\\r\\n  /// @return Percent of total amount\\r\\n  function _toPsAndLiqAmount(uint _amount) internal view returns (uint) {\\r\\n    uint256 psNumerator = IController(_controller()).psNumerator();\\r\\n    uint256 psDenominator = IController(_controller()).psDenominator();\\r\\n    return _amount * psNumerator / psDenominator;\\r\\n  }\\r\\n\\r\\n  /// @dev Compute amount for TETU liquidity\\r\\n  function _toTetuLiquidityAmount(uint256 _amount) internal view returns (uint256) {\\r\\n    return _amount * liquidityNumerator() / LIQUIDITY_DENOMINATOR;\\r\\n  }\\r\\n\\r\\n  /// @dev Compute Approximate Total amount normalized to TETU token\\r\\n  /// @param _amount Amount of TETU token distributed to PS and Vault\\r\\n  /// @return Approximate Total amount normalized to TETU token\\r\\n  function _plusFundAmountToDistributedAmount(uint256 _amount) internal view returns (uint256) {\\r\\n    uint256 fundNumerator = IController(_controller()).fundNumerator();\\r\\n    uint256 fundDenominator = IController(_controller()).fundDenominator();\\r\\n    return _amount * fundDenominator / (fundDenominator - fundNumerator);\\r\\n  }\\r\\n\\r\\n  /// @dev Swap one token to another using all available amount\\r\\n  function _liquidate(address _tokenIn, address _tokenOut, uint256 _amount) internal returns (uint256) {\\r\\n    if (_tokenIn == _tokenOut) {\\r\\n      // this is already the right token\\r\\n      return _amount;\\r\\n    }\\r\\n    (LpData[] memory route, uint count) = _createLiquidationRoute(_tokenIn, _tokenOut);\\r\\n\\r\\n    uint outBalance = _amount;\\r\\n    for (uint i = 0; i < count; i++) {\\r\\n      LpData memory lpData = route[i];\\r\\n      uint outBalanceBefore = IERC20(lpData.oppositeToken).balanceOf(address(this));\\r\\n      _swap(lpData.token, lpData.oppositeToken, IUniswapV2Pair(lpData.lp), outBalance);\\r\\n      outBalance = IERC20(lpData.oppositeToken).balanceOf(address(this)) - outBalanceBefore;\\r\\n    }\\r\\n    return outBalance;\\r\\n  }\\r\\n\\r\\n  function _createLiquidationRoute(address _tokenIn, address _tokenOut) internal view returns (LpData[] memory, uint)  {\\r\\n    LpData[] memory route = new LpData[](ROUTE_LENGTH_MAX);\\r\\n    // in case that we try to liquidate blue chips use bc lps directly\\r\\n    LpData memory lpDataBC = blueChipsLps[_tokenIn][_tokenOut];\\r\\n    if (lpDataBC.lp != address(0)) {\\r\\n      lpDataBC.token = _tokenIn;\\r\\n      lpDataBC.oppositeToken = _tokenOut;\\r\\n      route[0] = lpDataBC;\\r\\n      return (route, 1);\\r\\n    }\\r\\n\\r\\n    // find the best LP for token IN\\r\\n    LpData memory lpDataIn = largestLps[_tokenIn];\\r\\n    require(lpDataIn.lp != address(0), \\\"F2: not found LP for tokenIn\\\");\\r\\n    route[0] = lpDataIn;\\r\\n    // if the best LP for token IN a pair with token OUT token we complete the route\\r\\n    if (lpDataIn.oppositeToken == _tokenOut) {\\r\\n      return (route, 1);\\r\\n    }\\r\\n\\r\\n    // if we able to swap opposite token to a blue chip it is the cheaper way to liquidate\\r\\n    lpDataBC = blueChipsLps[lpDataIn.oppositeToken][_tokenOut];\\r\\n    if (lpDataBC.lp != address(0)) {\\r\\n      lpDataBC.token = lpDataIn.oppositeToken;\\r\\n      lpDataBC.oppositeToken = _tokenOut;\\r\\n      route[1] = lpDataBC;\\r\\n      return (route, 2);\\r\\n    }\\r\\n\\r\\n    // find the largest LP for token out\\r\\n    LpData memory lpDataOut = largestLps[_tokenOut];\\r\\n    require(lpDataIn.lp != address(0), \\\"F2: not found LP for tokenOut\\\");\\r\\n    // if we can swap between largest LPs the route is ended\\r\\n    if (lpDataIn.oppositeToken == lpDataOut.oppositeToken) {\\r\\n      lpDataOut.oppositeToken = lpDataOut.token;\\r\\n      lpDataOut.token = lpDataIn.oppositeToken;\\r\\n      route[1] = lpDataOut;\\r\\n      return (route, 2);\\r\\n    }\\r\\n\\r\\n    // if we able to swap opposite token to a blue chip it is the cheaper way to liquidate\\r\\n    lpDataBC = blueChipsLps[lpDataIn.oppositeToken][lpDataOut.oppositeToken];\\r\\n    if (lpDataBC.lp != address(0)) {\\r\\n      lpDataBC.token = lpDataIn.oppositeToken;\\r\\n      lpDataBC.oppositeToken = lpDataOut.oppositeToken;\\r\\n      route[1] = lpDataBC;\\r\\n      lpDataOut.oppositeToken = lpDataOut.token;\\r\\n      lpDataOut.token = lpDataBC.oppositeToken;\\r\\n      route[2] = lpDataOut;\\r\\n      return (route, 3);\\r\\n    }\\r\\n\\r\\n    LpData memory lpDataInMiddle;\\r\\n    // this case only for a token with specific opposite token in a pair\\r\\n    if (!blueChipsTokens[lpDataIn.oppositeToken]) {\\r\\n\\r\\n      // some tokens have primary liquidity with specific token\\r\\n      // need to find a liquidity for them\\r\\n      lpDataInMiddle = largestLps[lpDataIn.oppositeToken];\\r\\n      require(lpDataInMiddle.lp != address(0), \\\"F2: not found LP for middle in\\\");\\r\\n      route[1] = lpDataInMiddle;\\r\\n      if (lpDataInMiddle.oppositeToken == _tokenOut) {\\r\\n        return (route, 2);\\r\\n      }\\r\\n\\r\\n      // if we able to swap opposite token to a blue chip it is the cheaper way to liquidate\\r\\n      lpDataBC = blueChipsLps[lpDataInMiddle.oppositeToken][_tokenOut];\\r\\n      if (lpDataBC.lp != address(0)) {\\r\\n        lpDataBC.token = lpDataInMiddle.oppositeToken;\\r\\n        lpDataBC.oppositeToken = _tokenOut;\\r\\n        route[2] = lpDataBC;\\r\\n        return (route, 3);\\r\\n      }\\r\\n\\r\\n      // if we able to swap opposite token to a blue chip it is the cheaper way to liquidate\\r\\n      lpDataBC = blueChipsLps[lpDataInMiddle.oppositeToken][lpDataOut.oppositeToken];\\r\\n      if (lpDataBC.lp != address(0)) {\\r\\n        lpDataBC.token = lpDataInMiddle.oppositeToken;\\r\\n        lpDataBC.oppositeToken = lpDataOut.oppositeToken;\\r\\n        route[2] = lpDataBC;\\r\\n        (lpDataOut.oppositeToken, lpDataOut.token) = (lpDataOut.token, lpDataOut.oppositeToken);\\r\\n        route[3] = lpDataOut;\\r\\n        return (route, 4);\\r\\n      }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    // if we don't have pair for token out try to find a middle lp\\r\\n    // it needs for cases where tokenOut has a pair with specific token\\r\\n    LpData memory lpDataOutMiddle = largestLps[lpDataOut.oppositeToken];\\r\\n    require(lpDataOutMiddle.lp != address(0), \\\"F2: not found LP for middle out\\\");\\r\\n    // even if we found lpDataInMiddle we have shorter way\\r\\n    if (lpDataOutMiddle.oppositeToken == lpDataIn.oppositeToken) {\\r\\n      (lpDataOutMiddle.oppositeToken, lpDataOutMiddle.token) = (lpDataOutMiddle.token, lpDataOutMiddle.oppositeToken);\\r\\n      route[1] = lpDataOutMiddle;\\r\\n      return (route, 2);\\r\\n    }\\r\\n\\r\\n    // tokenIn has not pair with bluechips\\r\\n    if (lpDataInMiddle.lp != address(0)) {\\r\\n      lpDataBC = blueChipsLps[lpDataInMiddle.oppositeToken][lpDataOutMiddle.oppositeToken];\\r\\n      if (lpDataBC.lp != address(0)) {\\r\\n        lpDataBC.token = lpDataInMiddle.oppositeToken;\\r\\n        lpDataBC.oppositeToken = lpDataOutMiddle.oppositeToken;\\r\\n        route[2] = lpDataBC;\\r\\n        (lpDataOutMiddle.oppositeToken, lpDataOutMiddle.token) = (lpDataOutMiddle.token, lpDataOutMiddle.oppositeToken);\\r\\n        route[3] = lpDataOutMiddle;\\r\\n        (lpDataOut.oppositeToken, lpDataOut.token) = (lpDataOut.token, lpDataOut.oppositeToken);\\r\\n        route[4] = lpDataOut;\\r\\n        return (route, 5);\\r\\n      }\\r\\n    } else {\\r\\n      // tokenIn has pair with bluechips\\r\\n      lpDataBC = blueChipsLps[lpDataIn.oppositeToken][lpDataOutMiddle.oppositeToken];\\r\\n      if (lpDataBC.lp != address(0)) {\\r\\n        lpDataBC.token = lpDataIn.oppositeToken;\\r\\n        lpDataBC.oppositeToken = lpDataOutMiddle.oppositeToken;\\r\\n        route[1] = lpDataBC;\\r\\n        (lpDataOutMiddle.oppositeToken, lpDataOutMiddle.token) = (lpDataOutMiddle.token, lpDataOutMiddle.oppositeToken);\\r\\n        route[2] = lpDataOutMiddle;\\r\\n        (lpDataOut.oppositeToken, lpDataOut.token) = (lpDataOut.token, lpDataOut.oppositeToken);\\r\\n        route[3] = lpDataOut;\\r\\n        return (route, 4);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    // we are not handling other cases\\r\\n    revert(\\\"F2: Liquidation path not found\\\");\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @dev Adopted version of swap function from UniswapRouter\\r\\n  ///      Assume that tokens exist on this contract\\r\\n  function _swap(address tokenIn, address tokenOut, IUniswapV2Pair lp, uint amount) internal {\\r\\n    require(amount != 0, \\\"F2: Zero swap amount\\\");\\r\\n    (uint reserveIn, uint reserveOut) = getReserves(lp, tokenIn, tokenOut);\\r\\n    address factory = lp.factory();\\r\\n    UniFee memory fee = uniPlatformFee[factory];\\r\\n    if (fee.numerator == 0) {\\r\\n      fee = UniFee(DEFAULT_UNI_FEE_NUMERATOR, DEFAULT_UNI_FEE_DENOMINATOR);\\r\\n    }\\r\\n    // hardcode for TetuSwap sync\\r\\n    if(factory == 0x684d8c187be836171a1Af8D533e4724893031828) {\\r\\n      lp.sync();\\r\\n    }\\r\\n    uint amountOut = getAmountOut(amount, reserveIn, reserveOut, fee);\\r\\n    IERC20(tokenIn).safeTransfer(address(lp), amount);\\r\\n    if (amountOut != 0) {\\r\\n      _swapCall(lp, tokenIn, tokenOut, amountOut);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _addLiquidity(\\r\\n    address _router,\\r\\n    address _token0,\\r\\n    address _token1,\\r\\n    uint256 _token0Amount,\\r\\n    uint256 _token1Amount\\r\\n  ) internal returns (uint256){\\r\\n    IERC20(_token0).safeApprove(_router, 0);\\r\\n    IERC20(_token0).safeApprove(_router, _token0Amount);\\r\\n    IERC20(_token1).safeApprove(_router, 0);\\r\\n    IERC20(_token1).safeApprove(_router, _token1Amount);\\r\\n\\r\\n    (,, uint256 liquidity) = IUniswapV2Router02(_router).addLiquidity(\\r\\n      _token0,\\r\\n      _token1,\\r\\n      _token0Amount,\\r\\n      _token1Amount,\\r\\n      _token0Amount * _slippageNumerator() / SLIPPAGE_DENOMINATOR,\\r\\n      _token1Amount * _slippageNumerator() / SLIPPAGE_DENOMINATOR,\\r\\n      address(this),\\r\\n      block.timestamp\\r\\n    );\\r\\n    emit LiquidityAdded(_router, _token0, _token0Amount, _token1, _token1Amount);\\r\\n    return liquidity;\\r\\n  }\\r\\n\\r\\n  /// @dev Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, UniFee memory fee) internal pure returns (uint amountOut) {\\r\\n    uint amountInWithFee = amountIn * fee.numerator;\\r\\n    uint numerator = amountInWithFee * reserveOut;\\r\\n    uint denominator = (reserveIn * fee.denominator) + amountInWithFee;\\r\\n    amountOut = numerator / denominator;\\r\\n  }\\r\\n\\r\\n  /// @dev Call swap function on pair with necessary preparations\\r\\n  ///      Assume that amountOut already sent to the pair\\r\\n  function _swapCall(IUniswapV2Pair _lp, address tokenIn, address tokenOut, uint amountOut) internal {\\r\\n    (address token0,) = sortTokens(tokenIn, tokenOut);\\r\\n    (uint amount0Out, uint amount1Out) = tokenIn == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\r\\n    _lp.swap(amount0Out, amount1Out, address(this), new bytes(0));\\r\\n  }\\r\\n\\r\\n  /// @dev returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n  }\\r\\n\\r\\n  /// @dev fetches and sorts the reserves for a pair\\r\\n  function getReserves(IUniswapV2Pair _lp, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\r\\n    (address token0,) = sortTokens(tokenA, tokenB);\\r\\n    (uint reserve0, uint reserve1,) = _lp.getReserves();\\r\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/governance/ControllableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\r\\nimport \\\"../interface/IControllable.sol\\\";\\r\\nimport \\\"../interface/IControllableExtended.sol\\\";\\r\\nimport \\\"../interface/IController.sol\\\";\\r\\n\\r\\n/// @title Implement basic functionality for any contract that require strict control\\r\\n///        V2 is optimised version for less gas consumption\\r\\n/// @dev Can be used with upgradeable pattern.\\r\\n///      Require call initializeControllable() in any case.\\r\\n/// @author belbix\\r\\nabstract contract ControllableV2 is Initializable, IControllable, IControllableExtended {\\r\\n\\r\\n  bytes32 internal constant _CONTROLLER_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1);\\r\\n  bytes32 internal constant _CREATED_BLOCK_SLOT = bytes32(uint256(keccak256(\\\"eip1967.controllable.created_block\\\")) - 1);\\r\\n\\r\\n  event ContractInitialized(address controller, uint ts, uint block);\\r\\n\\r\\n  /// @notice Initialize contract after setup it as proxy implementation\\r\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\r\\n  /// @dev Use it only once after first logic setup\\r\\n  /// @param __controller Controller address\\r\\n  function initializeControllable(address __controller) public initializer {\\r\\n    _setController(__controller);\\r\\n    _setCreated(block.timestamp);\\r\\n    _setCreatedBlock(block.number);\\r\\n    emit ContractInitialized(__controller, block.timestamp, block.number);\\r\\n  }\\r\\n\\r\\n  /// @dev Return true if given address is controller\\r\\n  function isController(address _value) external override view returns (bool) {\\r\\n    return _isController(_value);\\r\\n  }\\r\\n\\r\\n  function _isController(address _value) internal view returns (bool) {\\r\\n    return _value == _controller();\\r\\n  }\\r\\n\\r\\n  /// @notice Return true if given address is setup as governance in Controller\\r\\n  function isGovernance(address _value) external override view returns (bool) {\\r\\n    return _isGovernance(_value);\\r\\n  }\\r\\n\\r\\n  function _isGovernance(address _value) internal view returns (bool) {\\r\\n    return IController(_controller()).governance() == _value;\\r\\n  }\\r\\n\\r\\n  // ************* SETTERS/GETTERS *******************\\r\\n\\r\\n  /// @notice Return controller address saved in the contract slot\\r\\n  function controller() external view override returns (address) {\\r\\n    return _controller();\\r\\n  }\\r\\n\\r\\n  function _controller() internal view returns (address result) {\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      result := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Set a controller address to contract slot\\r\\n  function _setController(address _newController) private {\\r\\n    require(_newController != address(0));\\r\\n    bytes32 slot = _CONTROLLER_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _newController)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation timestamp\\r\\n  /// @return ts Creation timestamp\\r\\n  function created() external view override returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.timestamp\\r\\n  function _setCreated(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Return creation block number\\r\\n  /// @return ts Creation block number\\r\\n  function createdBlock() external view returns (uint256 ts) {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      ts := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Filled only once when contract initialized\\r\\n  /// @param _value block.number\\r\\n  function _setCreatedBlock(uint256 _value) private {\\r\\n    bytes32 slot = _CREATED_BLOCK_SLOT;\\r\\n    assembly {\\r\\n      sstore(slot, _value)\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/governance/ForwarderV2Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\r\\n\\r\\n/// @title Eternal storage + getters and setters pattern\\r\\n/// @dev If you will change a key value it will require setup it again\\r\\n/// @author belbix\\r\\nabstract contract ForwarderV2Storage is Initializable {\\r\\n\\r\\n  struct LpData {\\r\\n    address lp;\\r\\n    address token;\\r\\n    address oppositeToken;\\r\\n  }\\r\\n\\r\\n  struct UniFee {\\r\\n    uint numerator;\\r\\n    uint denominator;\\r\\n  }\\r\\n\\r\\n  // don't change names or ordering!\\r\\n  mapping(bytes32 => uint256) private uintStorage;\\r\\n  mapping(bytes32 => address) private addressStorage;\\r\\n\\r\\n  /// @dev Liquidity Pools with the highest TVL for given token\\r\\n  mapping(address => LpData) public largestLps;\\r\\n  /// @dev Liquidity Pools with the most popular tokens\\r\\n  mapping(address => mapping(address => LpData)) public blueChipsLps;\\r\\n  /// @dev Factory address to fee value map\\r\\n  mapping(address => UniFee) public uniPlatformFee;\\r\\n  /// @dev Hold blue chips tokens addresses\\r\\n  mapping(address => bool) public blueChipsTokens;\\r\\n\\r\\n  /// @notice Address changed the variable with `name`\\r\\n  event UpdatedAddressSlot(string indexed name, address oldValue, address newValue);\\r\\n  /// @notice Value changed the variable with `name`\\r\\n  event UpdatedUint256Slot(string indexed name, uint256 oldValue, uint256 newValue);\\r\\n\\r\\n  // ******************* SETTERS AND GETTERS **********************\\r\\n\\r\\n  function _setLiquidityRouter(address _address) internal {\\r\\n    emit UpdatedAddressSlot(\\\"liquidityRouter\\\", liquidityRouter(), _address);\\r\\n    setAddress(\\\"liquidityRouter\\\", _address);\\r\\n  }\\r\\n\\r\\n  /// @notice Router address for adding liquidity\\r\\n  function liquidityRouter() public view returns (address) {\\r\\n    return getAddress(\\\"liquidityRouter\\\");\\r\\n  }\\r\\n\\r\\n  function _setLiquidityNumerator(uint256 _value) internal {\\r\\n    emit UpdatedUint256Slot(\\\"liquidityNumerator\\\", liquidityNumerator(), _value);\\r\\n    setUint256(\\\"liquidityNumerator\\\", _value);\\r\\n  }\\r\\n\\r\\n  /// @notice Numerator for part of profit that goes to TETU liquidity\\r\\n  function liquidityNumerator() public view returns (uint256) {\\r\\n    return getUint256(\\\"liquidityNumerator\\\");\\r\\n  }\\r\\n\\r\\n  function _setSlippageNumerator(uint256 _value) internal {\\r\\n    emit UpdatedUint256Slot(\\\"slippageNumerator\\\", _slippageNumerator(), _value);\\r\\n    setUint256(\\\"slippageNumerator\\\", _value);\\r\\n  }\\r\\n\\r\\n  /// @notice Numerator for part of profit that goes to TETU liquidity\\r\\n  function _slippageNumerator() internal view returns (uint256) {\\r\\n    return getUint256(\\\"slippageNumerator\\\");\\r\\n  }\\r\\n\\r\\n  // ******************** STORAGE INTERNAL FUNCTIONS ********************\\r\\n\\r\\n  function setAddress(string memory key, address _address) private {\\r\\n    addressStorage[keccak256(abi.encodePacked(key))] = _address;\\r\\n  }\\r\\n\\r\\n  function getAddress(string memory key) private view returns (address) {\\r\\n    return addressStorage[keccak256(abi.encodePacked(key))];\\r\\n  }\\r\\n\\r\\n  function setUint256(string memory key, uint256 _value) private {\\r\\n    uintStorage[keccak256(abi.encodePacked(key))] = _value;\\r\\n  }\\r\\n\\r\\n  function getUint256(string memory key) private view returns (uint256) {\\r\\n    return uintStorage[keccak256(abi.encodePacked(key))];\\r\\n  }\\r\\n\\r\\n  //slither-disable-next-line unused-state\\r\\n  uint256[50] private ______gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n    );\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n  unchecked {\\r\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n    uint256 newAllowance = oldAllowance - value;\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n  }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface ISmartVault {\\r\\n\\r\\n  function setStrategy(address _strategy) external;\\r\\n\\r\\n  function changeActivityStatus(bool _active) external;\\r\\n\\r\\n  function changeProtectionMode(bool _active) external;\\r\\n\\r\\n  function changePpfsDecreaseAllowed(bool _value) external;\\r\\n\\r\\n  function setLockPeriod(uint256 _value) external;\\r\\n\\r\\n  function setLockPenalty(uint256 _value) external;\\r\\n\\r\\n  function setToInvest(uint256 _value) external;\\r\\n\\r\\n  function doHardWork() external;\\r\\n\\r\\n  function rebalance() external;\\r\\n\\r\\n  function disableLock() external;\\r\\n\\r\\n  function notifyTargetRewardAmount(address _rewardToken, uint256 reward) external;\\r\\n\\r\\n  function notifyRewardWithoutPeriodChange(address _rewardToken, uint256 reward) external;\\r\\n\\r\\n  function deposit(uint256 amount) external;\\r\\n\\r\\n  function depositAndInvest(uint256 amount) external;\\r\\n\\r\\n  function depositFor(uint256 amount, address holder) external;\\r\\n\\r\\n  function withdraw(uint256 numberOfShares) external;\\r\\n\\r\\n  function exit() external;\\r\\n\\r\\n  function getAllRewards() external;\\r\\n\\r\\n  function getReward(address rt) external;\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function strategy() external view returns (address);\\r\\n\\r\\n  function getRewardTokenIndex(address rt) external view returns (uint256);\\r\\n\\r\\n  function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n  function underlyingUnit() external view returns (uint256);\\r\\n\\r\\n  function duration() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceInVault() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceWithInvestment() external view returns (uint256);\\r\\n\\r\\n  function underlyingBalanceWithInvestmentForHolder(address holder) external view returns (uint256);\\r\\n\\r\\n  function availableToInvestOut() external view returns (uint256);\\r\\n\\r\\n  function earned(address rt, address account) external view returns (uint256);\\r\\n\\r\\n  function earnedWithBoost(address rt, address account) external view returns (uint256);\\r\\n\\r\\n  function rewardPerToken(address rt) external view returns (uint256);\\r\\n\\r\\n  function lastTimeRewardApplicable(address rt) external view returns (uint256);\\r\\n\\r\\n  function rewardTokensLength() external view returns (uint256);\\r\\n\\r\\n  function active() external view returns (bool);\\r\\n\\r\\n  function rewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  function periodFinishForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function rewardRateForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function lastUpdateTimeForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function rewardPerTokenStoredForToken(address _rt) external view returns (uint256);\\r\\n\\r\\n  function userRewardPerTokenPaidForToken(address _rt, address account) external view returns (uint256);\\r\\n\\r\\n  function rewardsForToken(address _rt, address account) external view returns (uint256);\\r\\n\\r\\n  function userLastWithdrawTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function userLastDepositTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function userBoostTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function userLockTs(address _user) external view returns (uint256);\\r\\n\\r\\n  function addRewardToken(address rt) external;\\r\\n\\r\\n  function removeRewardToken(address rt) external;\\r\\n\\r\\n  function stop() external;\\r\\n\\r\\n  function ppfsDecreaseAllowed() external view returns (bool);\\r\\n\\r\\n  function lockPeriod() external view returns (uint256);\\r\\n\\r\\n  function lockPenalty() external view returns (uint256);\\r\\n\\r\\n  function toInvest() external view returns (uint256);\\r\\n\\r\\n  function depositFeeNumerator() external view returns (uint256);\\r\\n\\r\\n  function lockAllowed() external view returns (bool);\\r\\n\\r\\n  function protectionMode() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IFeeRewardForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IFeeRewardForwarder {\\r\\n  function distribute(uint256 _amount, address _token, address _vault) external returns (uint256);\\r\\n\\r\\n  function notifyPsPool(address _token, uint256 _amount) external returns (uint256);\\r\\n\\r\\n  function notifyCustomPool(address _token, address _rewardPool, uint256 _maxBuyback) external returns (uint256);\\r\\n\\r\\n  function liquidate(address tokenIn, address tokenOut, uint256 amount) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IBookkeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IBookkeeper {\\r\\n\\r\\n  struct PpfsChange {\\r\\n    address vault;\\r\\n    uint256 block;\\r\\n    uint256 time;\\r\\n    uint256 value;\\r\\n    uint256 oldBlock;\\r\\n    uint256 oldTime;\\r\\n    uint256 oldValue;\\r\\n  }\\r\\n\\r\\n  struct HardWork {\\r\\n    address strategy;\\r\\n    uint256 block;\\r\\n    uint256 time;\\r\\n    uint256 targetTokenAmount;\\r\\n  }\\r\\n\\r\\n  function addVault(address _vault) external;\\r\\n\\r\\n  function addStrategy(address _strategy) external;\\r\\n\\r\\n  function registerStrategyEarned(uint256 _targetTokenAmount) external;\\r\\n\\r\\n  function registerFundKeeperEarned(address _token, uint256 _fundTokenAmount) external;\\r\\n\\r\\n  function registerUserAction(address _user, uint256 _amount, bool _deposit) external;\\r\\n\\r\\n  function registerVaultTransfer(address from, address to, uint256 amount) external;\\r\\n\\r\\n  function registerUserEarned(address _user, address _vault, address _rt, uint256 _amount) external;\\r\\n\\r\\n  function registerPpfsChange(address vault, uint256 value) external;\\r\\n\\r\\n  function registerRewardDistribution(address vault, address token, uint256 amount) external;\\r\\n\\r\\n  function vaults() external view returns (address[] memory);\\r\\n\\r\\n  function vaultsLength() external view returns (uint256);\\r\\n\\r\\n  function strategies() external view returns (address[] memory);\\r\\n\\r\\n  function strategiesLength() external view returns (uint256);\\r\\n\\r\\n  function lastPpfsChange(address vault) external view returns (PpfsChange memory);\\r\\n\\r\\n  /// @notice Return total earned TETU tokens for strategy\\r\\n  /// @dev Should be incremented after strategy rewards distribution\\r\\n  /// @param strategy Strategy address\\r\\n  /// @return Earned TETU tokens\\r\\n  function targetTokenEarned(address strategy) external view returns (uint256);\\r\\n\\r\\n  /// @notice Return share(xToken) balance of given user\\r\\n  /// @dev Should be calculated for each xToken transfer\\r\\n  /// @param vault Vault address\\r\\n  /// @param user User address\\r\\n  /// @return User share (xToken) balance\\r\\n  function vaultUsersBalances(address vault, address user) external view returns (uint256);\\r\\n\\r\\n  /// @notice Return earned token amount for given token and user\\r\\n  /// @dev Fills when user claim rewards\\r\\n  /// @param user User address\\r\\n  /// @param vault Vault address\\r\\n  /// @param token Token address\\r\\n  /// @return User's earned tokens amount\\r\\n  function userEarned(address user, address vault, address token) external view returns (uint256);\\r\\n\\r\\n  function lastHardWork(address vault) external view returns (HardWork memory);\\r\\n\\r\\n  /// @notice Return users quantity for given Vault\\r\\n  /// @dev Calculation based in Bookkeeper user balances\\r\\n  /// @param vault Vault address\\r\\n  /// @return Users quantity\\r\\n  function vaultUsersQuantity(address vault) external view returns (uint256);\\r\\n\\r\\n  function fundKeeperEarned(address vault) external view returns (uint256);\\r\\n\\r\\n  function vaultRewards(address vault, address token, uint256 idx) external view returns (uint256);\\r\\n\\r\\n  function vaultRewardsLength(address vault, address token) external view returns (uint256);\\r\\n\\r\\n  function strategyEarnedSnapshots(address strategy, uint256 idx) external view returns (uint256);\\r\\n\\r\\n  function strategyEarnedSnapshotsTime(address strategy, uint256 idx) external view returns (uint256);\\r\\n\\r\\n  function strategyEarnedSnapshotsLength(address strategy) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function WETH() external view returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint amountADesired,\\r\\n    uint amountBDesired,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint amountTokenDesired,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint liquidity,\\r\\n    uint amountAMin,\\r\\n    uint amountBMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint amountOut,\\r\\n    uint amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint[] memory amounts);\\r\\n\\r\\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  payable\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n  external\\r\\n  payable\\r\\n  returns (uint[] memory amounts);\\r\\n\\r\\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\r\\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\r\\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external returns (uint amountETH);\\r\\n\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint liquidity,\\r\\n    uint amountTokenMin,\\r\\n    uint amountETHMin,\\r\\n    address to,\\r\\n    uint deadline,\\r\\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n  ) external returns (uint amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external payable;\\r\\n\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint amountIn,\\r\\n    uint amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint deadline\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n  function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n  function allPairsLength() external view returns (uint);\\r\\n\\r\\n  function feeTo() external view returns (address);\\r\\n\\r\\n  function feeToSetter() external view returns (address);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/third_party/uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n\\r\\n  function symbol() external pure returns (string memory);\\r\\n\\r\\n  function decimals() external pure returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n  function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint);\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n  event Swap(\\r\\n    address indexed sender,\\r\\n    uint amount0In,\\r\\n    uint amount1In,\\r\\n    uint amount0Out,\\r\\n    uint amount1Out,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n  function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n  function kLast() external view returns (uint);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private _initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private _initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !_initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = true;\\r\\n      _initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = false;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IControllable {\\r\\n\\r\\n  function isController(address _contract) external view returns (bool);\\r\\n\\r\\n  function isGovernance(address _contract) external view returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllableExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/// @dev This interface contains additional functions for Controllable class\\r\\n///      Don't extend the exist Controllable for the reason of huge coherence\\r\\ninterface IControllableExtended {\\r\\n\\r\\n  function created() external view returns (uint256 ts);\\r\\n\\r\\n  function controller() external view returns (address adr);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\n/**\\r\\n* By using this software, you understand, acknowledge and accept that Tetu\\r\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\r\\n* basis and without warranties or representations of any kind either expressed\\r\\n* or implied. Any use of this open source software released under the ISC\\r\\n* Internet Systems Consortium license is done at your own risk to the fullest\\r\\n* extent permissible pursuant to applicable law any and all liability as well\\r\\n* as all warranties, including any fitness for a particular purpose with respect\\r\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\r\\n*/\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IController {\\r\\n\\r\\n  function addVaultsAndStrategies(address[] memory _vaults, address[] memory _strategies) external;\\r\\n\\r\\n  function addStrategy(address _strategy) external;\\r\\n\\r\\n  function governance() external view returns (address);\\r\\n\\r\\n  function dao() external view returns (address);\\r\\n\\r\\n  function bookkeeper() external view returns (address);\\r\\n\\r\\n  function feeRewardForwarder() external view returns (address);\\r\\n\\r\\n  function mintHelper() external view returns (address);\\r\\n\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  function fundToken() external view returns (address);\\r\\n\\r\\n  function psVault() external view returns (address);\\r\\n\\r\\n  function fund() external view returns (address);\\r\\n\\r\\n  function distributor() external view returns (address);\\r\\n\\r\\n  function announcer() external view returns (address);\\r\\n\\r\\n  function vaultController() external view returns (address);\\r\\n\\r\\n  function whiteList(address _target) external view returns (bool);\\r\\n\\r\\n  function vaults(address _target) external view returns (bool);\\r\\n\\r\\n  function strategies(address _target) external view returns (bool);\\r\\n\\r\\n  function psNumerator() external view returns (uint256);\\r\\n\\r\\n  function psDenominator() external view returns (uint256);\\r\\n\\r\\n  function fundNumerator() external view returns (uint256);\\r\\n\\r\\n  function fundDenominator() external view returns (uint256);\\r\\n\\r\\n  function isAllowedUser(address _adr) external view returns (bool);\\r\\n\\r\\n  function isDao(address _adr) external view returns (bool);\\r\\n\\r\\n  function isHardWorker(address _adr) external view returns (bool);\\r\\n\\r\\n  function isRewardDistributor(address _adr) external view returns (bool);\\r\\n\\r\\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\\r\\n\\r\\n  function isValidVault(address _vault) external view returns (bool);\\r\\n\\r\\n  function isValidStrategy(address _strategy) external view returns (bool);\\r\\n\\r\\n  function rebalance(address _strategy) external;\\r\\n\\r\\n  // ************ DAO ACTIONS *************\\r\\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator) external;\\r\\n\\r\\n  function changeWhiteListStatus(address[] calldata _targets, bool status) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize, which returns 0 for contracts in\\r\\n    // construction, since the code is only stored at the end of the\\r\\n    // constructor execution.\\r\\n\\r\\n    uint256 size;\\r\\n    assembly {\\r\\n      size := extcodesize(account)\\r\\n    }\\r\\n    return size > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ContractInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeMovedToFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ps\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeMovedToPs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeMovedToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdatedAddressSlot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdatedUint256Slot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_UNI_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_UNI_FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTE_LENGTH_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lps\",\"type\":\"address[]\"}],\"name\":\"addBlueChipsLps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_lps\",\"type\":\"address[]\"}],\"name\":\"addLargestLps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blueChipsLps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blueChipsTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__controller\",\"type\":\"address\"}],\"name\":\"initializeControllable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"largestLps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oppositeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notifyCustomPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notifyPsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLiquidityNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setLiquidityRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSlippageNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setUniPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tetu\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniPlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ForwarderV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}