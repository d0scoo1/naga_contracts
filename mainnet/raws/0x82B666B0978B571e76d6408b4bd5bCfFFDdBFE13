{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"FairXYZWallets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @ Fair.xyz dev\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"Ownable.sol\\\";\\n\\ncontract FairXYZWallets is Ownable{\\n    \\n    address internal signerAddress;\\n\\n    address internal withdrawAddress;\\n\\n    mapping(address => bool) internal preApprovedAddresses;\\n\\n    mapping(string => string) internal URIReveal; \\n\\n    mapping(string => bool) internal lockedURIReveal;\\n\\n    event NewSignerWallet(address indexed newSignerAddress);\\n    event NewWithdrawWallet(address indexed newWithdrawAddress);\\n\\n    constructor(address addressForSigner, address addressForWithdraw, address[] memory preApprovedList){\\n        \\n        require(preApprovedList.length <= 5, \\\"Cannot set too many pre-approved addresses!\\\");\\n        require(addressForSigner != address(0), \\\"Cannot be zero address\\\");\\n        require(addressForWithdraw != address(0), \\\"Cannot be zero address\\\");\\n\\n        signerAddress = addressForSigner;\\n        withdrawAddress = addressForWithdraw;\\n\\n        for(uint i = 0; i < preApprovedList.length; )\\n        {\\n            addPreapproved(preApprovedList[i]);\\n            ++i;\\n        }\\n    }\\n\\n    function viewPathURI(string memory pathURI) view external returns(string memory) \\n    {\\n        return URIReveal[pathURI];\\n    }\\n\\n    function viewSigner() view external returns(address)\\n    {\\n        return(signerAddress);\\n    }\\n\\n    function viewWithdraw() view external returns(address)\\n    {\\n        return(withdrawAddress);\\n    }\\n\\n    function revealPathURI(string memory pathURI, string memory revealURI) external onlyOwner returns(string memory)\\n    {\\n        require(!lockedURIReveal[pathURI], \\\"Path URI has been locked!\\\");\\n        URIReveal[pathURI] = revealURI;\\n        return(revealURI);\\n    }\\n\\n    function lockURIReveal(string memory pathURI) external onlyOwner\\n    {\\n        require(!lockedURIReveal[pathURI], \\\"Path URI has been locked!\\\");\\n        lockedURIReveal[pathURI] = true;\\n    }\\n\\n    function changeSigner(address newAddress) external onlyOwner returns(address)\\n    {\\n        signerAddress = newAddress;\\n        emit NewSignerWallet(signerAddress);\\n        return signerAddress;\\n    }\\n\\n    function changeWithdraw(address newAddress) external onlyOwner returns(address)\\n    {\\n        withdrawAddress = newAddress;\\n        emit NewWithdrawWallet(signerAddress);\\n        return withdrawAddress;\\n    }\\n\\n    function viewPreapproved(address address_) external view returns(bool)\\n    {\\n        return preApprovedAddresses[address_];\\n    }\\n\\n    // Gas-free listings on OpenSea and LooksRare. Can only be called from constructor\\n    function addPreapproved(address preapprovedAddress) private onlyOwner returns(address)\\n    {\\n        require(preapprovedAddress != address(0), \\\"Cannot be zero address\\\");\\n        preApprovedAddresses[preapprovedAddress] = true;\\n        return preapprovedAddress;\\n    }\\n\\n    function removePreapproved(address preapprovedAddress) external onlyOwner returns(address)\\n    {\\n        require(preApprovedAddresses[preapprovedAddress]);\\n        preApprovedAddresses[preapprovedAddress] = false;\\n        return(preapprovedAddress);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"FairXYZWallets.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressForSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressForWithdraw\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"preApprovedList\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSignerAddress\",\"type\":\"address\"}],\"name\":\"NewSignerWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWithdrawAddress\",\"type\":\"address\"}],\"name\":\"NewWithdrawWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeWithdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pathURI\",\"type\":\"string\"}],\"name\":\"lockURIReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"preapprovedAddress\",\"type\":\"address\"}],\"name\":\"removePreapproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pathURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"revealURI\",\"type\":\"string\"}],\"name\":\"revealPathURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pathURI\",\"type\":\"string\"}],\"name\":\"viewPathURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"viewPreapproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewWithdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FairXYZWallets", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b403d77946b4ac4fc7ca2ee1059e73f1b72d6e93000000000000000000000000c5a2f45ff2d4ca27e167600b5225c7e6e187d8c000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000476b535cf58dbdb440fcd4e8bc21c847b70a5314", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}