{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.3;\r\n\r\n/**\r\n * @title Represents an ownable resource.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n     * Constructor\r\n     * @param addr The owner of the smart contract\r\n     */\r\n    constructor (address addr) {\r\n        require(addr != address(0), \"non-zero address required\");\r\n        require(addr != address(1), \"ecrecover address not allowed\");\r\n        _owner = addr;\r\n        emit OwnershipTransferred(address(0), addr);\r\n    }\r\n\r\n    /**\r\n     * @notice This modifier indicates that the function can only be called by the owner.\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Only owner requirement\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership to the address specified.\r\n     * @param addr Specifies the address of the new owner.\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    function transferOwnership (address addr) public onlyOwner {\r\n        require(addr != address(0), \"non-zero address required\");\r\n        emit OwnershipTransferred(_owner, addr);\r\n        _owner = addr;\r\n    }\r\n\r\n    /**\r\n     * @notice Destroys the smart contract.\r\n     * @param addr The payable address of the recipient.\r\n     */\r\n    function destroy(address payable addr) public virtual onlyOwner {\r\n        require(addr != address(0), \"non-zero address required\");\r\n        require(addr != address(1), \"ecrecover address not allowed\");\r\n        selfdestruct(addr);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the address of the owner.\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates if the address specified is the owner of the resource.\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner(address addr) public view returns (bool) {\r\n        return addr == _owner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Represents a controllable resource.\r\n */\r\ncontract Controllable is Ownable {\r\n    // The address of the controller\r\n    address internal _controllerAddress;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param ownerAddr The owner of the smart contract\r\n     * @param controllerAddr The address of the controller\r\n     */\r\n    constructor (address ownerAddr, address controllerAddr) Ownable (ownerAddr) {\r\n        require(controllerAddr != address(0), \"Controller address required\");\r\n        require(controllerAddr != ownerAddr, \"Owner cannot be the Controller\");\r\n        _controllerAddress = controllerAddr;\r\n    }\r\n\r\n    /**\r\n     * @notice Throws if the sender is not the controller\r\n     */\r\n    modifier onlyController() {\r\n        require(msg.sender == _controllerAddress, \"Unauthorized controller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Makes sure the sender is either the owner of the contract or the controller\r\n     */\r\n    modifier onlyOwnerOrController() {\r\n        require(msg.sender == _controllerAddress || msg.sender == _owner, \"Only owner or controller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the controller\r\n     * @dev This function can be called by the owner only\r\n     * @param controllerAddr The address of the controller\r\n     */\r\n    function setController (address controllerAddr) public onlyOwner {\r\n        // Checks\r\n        require(controllerAddr != address(0), \"Controller address required\");\r\n        require(controllerAddr != _owner, \"Owner cannot be the Controller\");\r\n        require(controllerAddr != _controllerAddress, \"Controller already set\");\r\n\r\n        // State changes\r\n        _controllerAddress = controllerAddr;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the address of the controller\r\n     * @return Returns an address\r\n     */\r\n    function getControllerAddress () public view returns (address) {\r\n        return _controllerAddress;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @notice Defines the interface for whitelisting addresses.\r\n */\r\ninterface IAddressWhitelist {\r\n    /**\r\n     * @notice Whitelists the address specified.\r\n     * @param addr The address to enable\r\n     */\r\n    function enableAddress (address addr) external;\r\n\r\n    /**\r\n     * @notice Disables the address specified.\r\n     * @param addr The address to disable\r\n     */\r\n    function disableAddress (address addr) external;\r\n\r\n    /**\r\n     * @notice Indicates if the address is whitelisted or not.\r\n     * @param addr The address to disable\r\n     * @return Returns 1 if the address is whitelisted\r\n     */\r\n    function isWhitelistedAddress (address addr) external view returns (bool);\r\n\r\n    /**\r\n     * This event is triggered when a new address is whitelisted.\r\n     * @param addr The address that was whitelisted\r\n     */\r\n    event OnAddressEnabled(address addr);\r\n\r\n    /**\r\n     * This event is triggered when an address is disabled.\r\n     * @param addr The address that was disabled\r\n     */\r\n    event OnAddressDisabled(address addr);\r\n}\r\n\r\n/**\r\n * @title This contract allows you to manage configuration settings of all crosschain providers supported by the platform.\r\n */\r\ncontract CrosschainProviderConfigManager is Controllable {\r\n    // Defines the settings of each route\r\n    struct ConfigSetting {\r\n        address routerAddress;\r\n        bytes routingInfo;\r\n    }\r\n\r\n    // The settings of each crosschain, cross-provider route\r\n    mapping (bytes32 => ConfigSetting) private _routingData;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param ownerAddr The owner of the vault\r\n     * @param controllerAddr The controller of the vault\r\n     */\r\n    constructor (address ownerAddr, address controllerAddr) Controllable (ownerAddr, controllerAddr) { // solhint-disable-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the configuration of the provider specified.\r\n     * @dev This function can be called by the contract owner only.\r\n     * @param key The routing key\r\n     * @param routerAddress The router address for the source token specified.\r\n     * @param routingInfo The provider configuration\r\n     */\r\n    function setRoute (bytes32 key, address routerAddress, bytes memory routingInfo) public onlyOwnerOrController {\r\n        require(key != bytes32(0), \"Key required\");\r\n        require(routerAddress != address(0), \"Router address required\");\r\n        require(routingInfo.length > 0, \"Routing info required\");\r\n\r\n        _routingData[key] = ConfigSetting(routerAddress, routingInfo);\r\n    }\r\n\r\n    /**\r\n     * @notice Builds the routing key based on the parameters specified.\r\n     * @param tokenAddr The hash of the token address\r\n     * @param provider The hash of the crosschain provider. It could be Anyswap, LayerZero, etc.\r\n     * @param foreignNetwork The hash of the foreign network or chain. It could be Avalanche, Fantom, etc.\r\n     * @return Returns a key\r\n     */\r\n    function buildKey (address tokenAddr, bytes32 provider, bytes32 foreignNetwork) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(provider, foreignNetwork, tokenAddr));\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the routing configuration of the provider specified.\r\n     * @param key The routing key of the provider\r\n     * @return routerAddress The router address for the key specified\r\n     * @return routingInfo The routing settings for the key specified\r\n     */\r\n    function getRoute (bytes32 key) public view returns (address routerAddress, bytes memory routingInfo) {\r\n        routerAddress = _routingData[key].routerAddress;\r\n        routingInfo = _routingData[key].routingInfo;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Contract for whitelisting addresses\r\n */\r\ncontract AddressWhitelist is IAddressWhitelist, Ownable {\r\n    mapping (address => bool) internal whitelistedAddresses;\r\n\r\n    /**\r\n     * @notice Constructor.\r\n     * @param ownerAddr The address of the owner\r\n     */\r\n    constructor (address ownerAddr) Ownable (ownerAddr) { // solhint-disable-line no-empty-blocks\r\n    }\r\n\r\n    /**\r\n     * @notice Whitelists the address specified.\r\n     * @param addr The address to enable\r\n     */\r\n    function enableAddress (address addr) public override onlyOwner {\r\n        require(!whitelistedAddresses[addr], \"Already enabled\");\r\n        whitelistedAddresses[addr] = true;\r\n        emit OnAddressEnabled(addr);\r\n    }\r\n\r\n    /**\r\n     * @notice Disables the address specified.\r\n     * @param addr The address to disable\r\n     */\r\n    function disableAddress (address addr) public override onlyOwner {\r\n        require(whitelistedAddresses[addr], \"Already disabled\");\r\n        whitelistedAddresses[addr] = false;\r\n        emit OnAddressDisabled(addr);\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates if the address is whitelisted or not.\r\n     * @param addr The address to disable\r\n     * @return Returns true if the address is whitelisted\r\n     */\r\n    function isWhitelistedAddress (address addr) public view override returns (bool) {\r\n        return whitelistedAddresses[addr];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    /**\r\n    * Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering.\r\n     * One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0\r\n     * and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Returns the total number of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n    * Gets the balance of the address specified.\r\n    * @param addr The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address addr) external view returns (uint256);\r\n\r\n    /**\r\n     * Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * This event is triggered when a given amount of tokens is sent to an address.\r\n     * @param from The address of the sender\r\n     * @param to The address of the receiver\r\n     * @param value The amount transferred\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * This event is triggered when a given address is approved to spend a specific amount of tokens\r\n     * on behalf of the sender.\r\n     * @param owner The owner of the token\r\n     * @param spender The spender\r\n     * @param value The amount to transfer\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Represents a crosschain provider.\r\n */\r\nabstract contract BaseProvider is Controllable {\r\n    CrosschainProviderConfigManager public configManager;\r\n    AddressWhitelist internal _whitelist;\r\n    \r\n    event OnCrosschainTransfer (address routerAddress, uint256 destinationChainId, address fromAddress, address toAddress, uint256 amount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param ownerAddr The owner of the vault\r\n     * @param controllerAddr The controller of the vault\r\n     * @param newConfigManager The config manager\r\n     * @param newWhitelist The whitelist\r\n     */\r\n    constructor (address ownerAddr, address controllerAddr, CrosschainProviderConfigManager newConfigManager, AddressWhitelist newWhitelist) Controllable (ownerAddr, controllerAddr) {\r\n        configManager = newConfigManager;\r\n        _whitelist = newWhitelist;\r\n    }\r\n\r\n    /**\r\n     * @notice This modifier throws if the sender is not whitelisted, or if the whitelist is not set.\r\n     */\r\n    modifier onlyIfWhitelistedSender () {\r\n        require(address(_whitelist) != address(0), \"Whitelist not set\");\r\n        require(_whitelist.isWhitelistedAddress(msg.sender), \"Sender not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Approves the router to spend the amount of tokens specified\r\n     * @param tokenInterface The interface of the ERC20\r\n     * @param routerAddr The address of the router\r\n     * @param spenderAmount The spender amount granted to the router\r\n     */\r\n    function approveRouter (IERC20 tokenInterface, address routerAddr, uint256 spenderAmount) public onlyController {\r\n        require(tokenInterface.approve(routerAddr, spenderAmount), \"Approval failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Revokes allowance on the router address specified specified\r\n     * @param tokenInterface The interface of the ERC20\r\n     * @param routerAddr The address of the router\r\n     */\r\n    function revokeRouter (IERC20 tokenInterface, address routerAddr) public onlyController {\r\n        require(tokenInterface.approve(routerAddr, 0), \"Revoke failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Executes a crosschain transfer.\r\n     * @param underlyingTokenInterface The interface of the ERC20\r\n     * @param destinationAddr The destination address\r\n     * @param transferAmount The transfer amount\r\n     * @param foreignNetwork The hash of the remote network/chain\r\n     */\r\n    function executeTransfer (IERC20 underlyingTokenInterface, address destinationAddr, uint256 transferAmount, bytes32 foreignNetwork) public virtual;\r\n\r\n    /**\r\n     * @notice Gets the hash of the provider\r\n     * @return The hash of the provider\r\n     */\r\n    function getProviderHash() public pure virtual returns (bytes32);\r\n}\r\n\r\n/**\r\n * @notice This library provides stateless, general purpose functions.\r\n */\r\nlibrary Utils {\r\n    /**\r\n     * @notice Indicates if the address specified represents a smart contract.\r\n     * @dev Notice that this method returns TRUE if the address is a contract under construction\r\n     * @param addr The address to evaluate\r\n     * @return Returns true if the address represents a smart contract\r\n     */\r\n    function isContract (address addr) internal view returns (bool) {\r\n        bytes32 eoaHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n        bytes32 codeHash;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codeHash := extcodehash(addr) }\r\n\r\n        return (codeHash != eoaHash && codeHash != 0x0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ninterface IDeployable {\r\n    function deployCapital (uint256 deploymentAmount, bytes32 foreignNetwork) external;\r\n    function claim (uint256 dailyInterestAmount) external;\r\n}\r\n\r\n\r\n/**\r\n * @title Represents a yield reserve.\r\n */\r\ncontract YieldReserve is IDeployable, Controllable {\r\n    struct ProviderData {\r\n        BaseProvider providerContractInterface;\r\n        address recipientAddress;\r\n    }\r\n\r\n    uint256 public deployedCapital;\r\n\r\n    // The reentrancy guard for capital locks\r\n    uint8 private _reentrancyMutexForCapital;\r\n\r\n    // The reentrancy guard for transfers\r\n    uint8 private _reentrancyMutexForTransfers;\r\n\r\n    // The whitelisted addresses that can withdraw funds from the yield reserve\r\n    IAddressWhitelist private immutable _whitelistInterface;\r\n\r\n    /**\r\n     * @notice The address of the Vault\r\n     */\r\n    address public vaultAddress;\r\n\r\n    /**\r\n     * @notice The interface of the underlying token\r\n     */\r\n    IERC20 public immutable tokenInterface;\r\n\r\n    // The list of crosschain providers supported by the yield reserve\r\n    mapping (bytes32 => ProviderData) private _providers;\r\n\r\n    /**\r\n     * @notice This event is fired when a deployment of capital takes place.\r\n     * @param toAddress Specifies the address of the remote contract (foreign vault)\r\n     * @param throughAddress Specifies the address of the bridge\r\n     * @param amount Specifies the amount that was deployed\r\n     * @param targetNetwork Specifies the target network\r\n     */\r\n    event OnCapitalDeployed (address toAddress, address throughAddress, uint256 amount, bytes32 targetNetwork);\r\n\r\n    constructor (address ownerAddr, address controllerAddr, IERC20 eip20Interface, IAddressWhitelist whitelistInterface) Controllable (ownerAddr, controllerAddr) {\r\n        tokenInterface = eip20Interface;\r\n        _whitelistInterface = whitelistInterface;\r\n    }\r\n\r\n    /**\r\n     * @notice Throws if the sender is not the vault\r\n     */\r\n    modifier vaultOnly() {\r\n        require(vaultAddress != address(0) && msg.sender == vaultAddress, \"Unauthorized caller\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Throws if there is a capital lock in progress\r\n     */\r\n    modifier ifNotReentrantCapitalLock() {\r\n        require(_reentrancyMutexForCapital == 0, \"Reentrant capital lock rejected\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Throws if there is a token transfer in progress\r\n     */\r\n    modifier ifNotTransferringFunds() {\r\n        require(_reentrancyMutexForTransfers == 0, \"Transfer in progress\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the address of the vault\r\n     * @dev This function can be called by the owner or the controller.\r\n     * @param addr The address of the vault\r\n     */\r\n    function setVaultAddress (address addr) public onlyOwnerOrController {\r\n        require(addr != address(0) && addr != address(this), \"Invalid vault address\");\r\n        require(Utils.isContract(addr), \"The address must be a contract\");\r\n\r\n        vaultAddress = addr;\r\n    }\r\n\r\n    function setProvider (bytes32 foreignNetwork, BaseProvider xChainProvider, address recipientAddress) public onlyOwnerOrController {\r\n        _providers[foreignNetwork] = ProviderData(xChainProvider, recipientAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers funds to the list of addresses specified.\r\n     * @dev Throws if the destination address is not whitelisted. This function can be called by the owner or controller only.\r\n     * @param addresses The list of addresses\r\n     * @param amounts The corresponding amount of each address\r\n     */\r\n    function transferToMultipleAddresses (address[] memory addresses, uint256[] memory amounts) public onlyOwnerOrController ifNotTransferringFunds {\r\n        // Checks\r\n        require(addresses.length > 0, \"Addresses list required\");\r\n        require(amounts.length > 0, \"Amounts required\");\r\n        require(addresses.length == amounts.length, \"Invalid length for pairs\");\r\n        require(addresses.length < 11, \"Max addresses limit reached\");\r\n\r\n        // Wake up the reentrancy guard\r\n        _reentrancyMutexForTransfers = 1;\r\n\r\n        uint256 maxTransferAmount = tokenInterface.balanceOf(address(this));\r\n        require(maxTransferAmount > 0, \"Insufficient balance\");\r\n\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            require(addresses[i] != address(0) && addresses[i] != address(this), \"Invalid address for transfer\");\r\n            require(amounts[i] > 0 && amounts[i] <= maxTransferAmount, \"Invalid transfer amount\");\r\n            require(_whitelistInterface.isWhitelistedAddress(addresses[i]), \"Address not whitelisted\");\r\n            total += amounts[i];\r\n        }\r\n\r\n        require(total <= maxTransferAmount, \"Maximum transfer amount exceeded\");\r\n\r\n        // State changes\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            require(tokenInterface.transfer(addresses[i], amounts[i]), \"Transfer failed\");\r\n        }\r\n\r\n        // Reset the reentrancy guard\r\n        _reentrancyMutexForTransfers = 0; // solhint-disable-line reentrancy\r\n    }\r\n\r\n    /**\r\n     * @notice Deploys capital to an EOA\r\n     * @param targetAddr The destination address\r\n     * @param deploymentAmount The amount of capital to deploy\r\n     */\r\n    function deployCapitalToEoa (address targetAddr, uint256 deploymentAmount) public onlyOwnerOrController {\r\n        require(deploymentAmount > 0, \"Deployment amount required\");\r\n\r\n        // Wake up the reentrancy guard\r\n        _reentrancyMutexForCapital = 1;\r\n\r\n        deployedCapital += deploymentAmount;\r\n\r\n        require(tokenInterface.transfer(targetAddr, deploymentAmount), \"Xchain EOA transfer failed\");\r\n\r\n        emit OnCapitalDeployed(targetAddr, address(0), deploymentAmount, bytes32(0));\r\n\r\n        // Reset the reentrancy guard\r\n        _reentrancyMutexForCapital = 0; // solhint-disable-line reentrancy\r\n    }\r\n\r\n    /**\r\n     * @notice Deploys capital to another smart contract through a cross-chain bridge\r\n     * @param deploymentAmount The amount of capital to deploy\r\n     * @param foreignNetwork The target network\r\n     */\r\n    function deployCapital (uint256 deploymentAmount, bytes32 foreignNetwork) public override onlyOwnerOrController ifNotReentrantCapitalLock {\r\n        require(deploymentAmount > 0, \"Deployment amount required\");\r\n\r\n        // Wake up the reentrancy guard\r\n        _reentrancyMutexForCapital = 1;\r\n\r\n        deployedCapital += deploymentAmount;\r\n\r\n        address recipientAddress = _providers[foreignNetwork].recipientAddress;\r\n        address providerAddress = address(_providers[foreignNetwork].providerContractInterface);\r\n        \r\n        require(tokenInterface.transfer(providerAddress, deploymentAmount), \"Provider transfer failed\");\r\n\r\n        // Run the crosschain transfer through the provider specified\r\n        _providers[foreignNetwork].providerContractInterface.executeTransfer(tokenInterface, recipientAddress, deploymentAmount, foreignNetwork);\r\n\r\n        emit OnCapitalDeployed(recipientAddress, providerAddress, deploymentAmount, foreignNetwork);\r\n\r\n        // Reset the reentrancy guard\r\n        _reentrancyMutexForCapital = 0; // solhint-disable-line reentrancy\r\n    }\r\n\r\n    function claim (uint256 dailyInterestAmount) public override vaultOnly {\r\n        require(dailyInterestAmount > 0, \"Amount required\");\r\n\r\n        address senderAddr = msg.sender;\r\n\r\n        uint256 currentBalance = tokenInterface.balanceOf(address(this));\r\n        require(currentBalance >= dailyInterestAmount, \"Insufficient funds\");\r\n\r\n        require(tokenInterface.transfer(senderAddr, dailyInterestAmount), \"Token transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controllerAddr\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"eip20Interface\",\"type\":\"address\"},{\"internalType\":\"contract IAddressWhitelist\",\"name\":\"whitelistInterface\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"throughAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"targetNetwork\",\"type\":\"bytes32\"}],\"name\":\"OnCapitalDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dailyInterestAmount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deploymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"foreignNetwork\",\"type\":\"bytes32\"}],\"name\":\"deployCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deploymentAmount\",\"type\":\"uint256\"}],\"name\":\"deployCapitalToEoa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedCapital\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controllerAddr\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"foreignNetwork\",\"type\":\"bytes32\"},{\"internalType\":\"contract BaseProvider\",\"name\":\"xChainProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"}],\"name\":\"setProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInterface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferToMultipleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YieldReserve", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c692d583567cda0fde14cd3d6136c2623202ed68000000000000000000000000ca8d52bd76a0b09a2df5ccf49ab4fcab7611bbcc000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000f6ddd14b0233320e1d5415ccf3b9545df2335670", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://56ac68bd8631646a1cedcbcd8c8af29c2c58065061d98f575f7a368d981b67d2"}]}