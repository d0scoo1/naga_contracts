{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.5;\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n   \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint a, uint m) internal pure returns (uint r) {\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n//import the uniswap router\r\n//the contract needs to use swapExactTokensForTokens\r\n//this will allow us to import swapExactTokensForTokens into our contract\r\n\r\ninterface IUniswapV2Router {\r\n  function getAmountsOut(uint256 amountIn, address[] memory path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n  \r\n  function swapExactTokensForTokens(\r\n  \r\n    //amount of tokens we are sending in\r\n    uint256 amountIn,\r\n    //the minimum amount of tokens we want out of the trade\r\n    uint256 amountOutMin,\r\n    //list of token addresses we are going to trade in.  this is necessary to calculate amounts\r\n    address[] calldata path,\r\n    //this is the address we are going to send the output tokens to\r\n    address to,\r\n    //the last time that the trade is valid for\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  function getPair(address token0, address token1) external returns (address);\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"ERC20: sending to the zero address\");\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\ncontract sETH is Owned, ReentrancyGuard {\r\n    string public name     = \"SHIBNOBI ETH\";\r\n    string public symbol   = \"sETH\";\r\n    uint8  public decimals = 18;\r\n    \r\n     using SafeMath for uint256;\r\n\r\n    event  Approval(address indexed src, address indexed guy, uint256 wad);\r\n    event  Transfer(address indexed src, address indexed dst, uint256 wad);\r\n    event  Deposit(address indexed dst, uint256 wad);\r\n    event  Withdrawal(address indexed src, uint256 wad);\r\n\r\n    mapping (address => uint256)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint256))  public  allowance;\r\n    \r\n    address public Oogway = 0x9859045b1821cc19c1df6CbfA367959e349131DF;\r\n    address public Dev   = 0x05071Cd7D2EcFd235380B7424B2E418098336886;\r\n    address public Market = 0xb8F9d14060e7e73eed1e98c23a732BE11345a2dB;\r\n\r\n    uint256 private tax = 990; //for 1% set it 990\r\n    uint256 private Oogwaytax = 500; //\r\n    uint256 private Devtax = 25; // Oogway tax, dev tax, burn tax and markettax sum must be 1000\r\n    uint256 private Markettax = 225; //\r\n    uint256 private Burntax = 250; //\r\n    \r\n    uint256 public adminVal = 0; // mantaining count of total fees taken\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address private constant SHINJA = 0xab167E816E4d76089119900e941BEfdfA37d6b32;\r\n    \r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function setAllTax(uint256 _admintax, uint256 _devtax, uint256 _Markettax, uint256 _Burntax) external onlyOwner {\r\n        Oogwaytax = _admintax;\r\n        Devtax = _devtax;\r\n        Markettax = _Markettax;\r\n        Burntax = _Burntax;\r\n    }\r\n    //-------------------------------\r\n\r\n    function setTax(uint256 _tax) external onlyOwner {\r\n        require(_tax > 0, \"Error: Please Set a positve value\");\r\n        tax = _tax;\r\n    }\r\n    \r\n    function getTax() public view returns(uint256) {\r\n        return tax;\r\n    }\r\n\r\n    //----------------------------------\r\n    \r\n    function setBurnTax(uint256 _tax) external onlyOwner {\r\n        require(_tax > 0, \"Error: Please Set a positve value\");\r\n        Burntax = _tax;\r\n    }\r\n    \r\n    function getBurnTax() public view returns(uint256) {\r\n        return Burntax;\r\n    }\r\n    \r\n    \r\n    function setOogwayAddress(address _Oogway) external onlyOwner {\r\n        require(_Oogway != address(0), \"Error: Please Set valid address\");\r\n        Oogway = _Oogway;\r\n    }\r\n\r\n    //----------------------------------\r\n    \r\n    function setDevTax(uint256 _tax) external onlyOwner {\r\n        require(_tax > 0, \"Error: Please Set a positve value\");\r\n        Devtax = _tax;\r\n    }\r\n    \r\n    function getDevTax() public view returns(uint256) {\r\n        return Devtax;\r\n    }\r\n    \r\n    \r\n    function setDevAddress(address _Oogway) external onlyOwner {\r\n        require(_Oogway != address(0), \"Error: Please Set valid address\");\r\n        Dev = _Oogway;\r\n    }\r\n    \r\n\r\n    //-------------------------------\r\n\r\n    function setMarketTax(uint256 _tax) external onlyOwner {\r\n        require(_tax > 0, \"Error: Please Set a positve value\");\r\n        Markettax = _tax;\r\n    }\r\n    \r\n    function getMarketTax() public view returns(uint256) {\r\n        return Markettax;\r\n    }\r\n    \r\n    \r\n    function setMarketAddress(address _Oogway) external onlyOwner {\r\n        require(_Oogway != address(0), \"Error: Please Set valid address\");\r\n        Market = _Oogway;\r\n    }\r\n    \r\n     //-------------------------------\r\n\r\n    function setOogwayTax(uint256 _tax) external onlyOwner {\r\n        require(_tax > 0, \"Error: Please Set a positve value\");\r\n        Oogwaytax = _tax;\r\n    }\r\n    \r\n    function getOogwayTax() public view returns(uint256) {\r\n        return Oogwaytax;\r\n    }\r\n    \r\n    \r\n\r\n    //-------------------------------------------\r\n\r\n    function deposit() public nonReentrant payable {\r\n        uint256 value = msg.value;\r\n        uint256 final_value = value.mul(tax).div(1000);\r\n        \r\n        uint256 totalTax = (value - final_value);\r\n        \r\n        uint256 adminPart = totalTax.mul(Oogwaytax).div(1000);\r\n        uint256 Dev_value = totalTax.mul(Devtax).div(1000);\r\n        uint256 Market_value = totalTax.mul(Markettax).div(1000);\r\n        uint256 burn_value = totalTax.mul(Burntax).div(1000);\r\n\r\n        balanceOf[Dev] += Dev_value;\r\n        balanceOf[Market] += Market_value;\r\n\r\n        adminVal += (totalTax);\r\n\r\n        balanceOf[Oogway] += adminPart;\r\n\r\n        /// burn start here\r\n\r\n         //IWETH(WETH).deposit{value: burn_value}();\r\n         if(burn_value > 0){\r\n         swap(WETH, SHINJA, burn_value, address(0x000000000000000000000000000000000000dEaD));\r\n         }\r\n        ///-------------------------\r\n\r\n        balanceOf[msg.sender] += final_value;\r\n        emit Deposit(msg.sender, value);\r\n    }\r\n\r\n    function withdraw(uint256 wad) public nonReentrant {\r\n        require(balanceOf[msg.sender] >= wad, \"ERROR: Insufficient BALANCE\");\r\n        \r\n        uint256 final_value = wad.mul(tax).div(1000); //98\r\n        \r\n        uint256 totalTax = (wad - final_value); //2\r\n\r\n        uint256 adminPart = totalTax.mul(Oogwaytax).div(1000);\r\n        uint256 Dev_value = totalTax.mul(Devtax).div(1000);\r\n        uint256 Market_value = totalTax.mul(Markettax).div(1000);\r\n        uint256 burn_value = totalTax.mul(Burntax).div(1000);\r\n\r\n\r\n        balanceOf[Dev] += Dev_value;\r\n        balanceOf[Market] += Market_value;\r\n\r\n        adminVal += totalTax;\r\n        \r\n        balanceOf[Oogway] += adminPart;\r\n\r\n        /// burn start here\r\n\r\n         //IWETH(WETH).deposit{value: burn_value}();\r\n         if(burn_value > 0){\r\n         swap(WETH, SHINJA, burn_value, address(0x000000000000000000000000000000000000dEaD));\r\n         }\r\n        ///-------------------------\r\n        \r\n        balanceOf[msg.sender] -= wad;\r\n        payable(msg.sender).transfer(final_value);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function approve(address guy, uint256 wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint256 wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint256 wad)\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(balanceOf[src] >= wad);\r\n\r\n        if (src != msg.sender && allowance[src][msg.sender] != uint256(-1)) {\r\n            require(allowance[src][msg.sender] >= wad);\r\n            allowance[src][msg.sender] -= wad;\r\n        }\r\n\r\n        balanceOf[src] -= wad;\r\n        balanceOf[dst] += wad;\r\n\r\n        Transfer(src, dst, wad);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n        //address of the uniswap v2 router\r\n    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    \r\n    //address of WETH token.  This is needed because some times it is better to trade through WETH.  \r\n    //you might get a better price using WETH.  \r\n    //example trading from token A to WETH then WETH to token B might result in a better price\r\n    \r\n\r\n    //this swap function is used to trade from one token to another\r\n    //the inputs are self explainatory\r\n    //token in = the token address you want to trade out of\r\n    //token out = the token address you want as the output of this trade\r\n    //amount in = the amount of tokens you are sending in\r\n    //amount out Min = the minimum amount of tokens you want out of the trade\r\n    //to = the address you want the tokens to be sent to\r\n    \r\n   function swap(address _tokenIn, address _tokenOut, uint256 _amountIn, address _to) internal {\r\n      //function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    //first we need to transfer the amount in tokens from the msg.sender to this contract\r\n    //this contract will have the amount of in tokens\r\n        //IERC20(_tokenIn).transferFrom(msg.sender, address(this), _amountIn*1000000000000);\r\n        \r\n        //next we need to allow the uniswapv2 router to spend the token we just sent to this contract\r\n        //by calling IERC20 approve you allow the uniswap contract to spend the tokens in this contract \r\n        IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn*1000000000000);\r\n\r\n        //path is an array of addresses.\r\n        //this path array will have 3 addresses [tokenIn, WETH, tokenOut]\r\n        //the if statement below takes into account if token in or token out is WETH.  then the path is only 2 addresses\r\n        address[] memory path;\r\n        if (_tokenIn == WETH || _tokenOut == WETH) {\r\n        path = new address[](2);\r\n        path[0] = _tokenIn;\r\n        path[1] = _tokenOut;\r\n        } else {\r\n        path = new address[](3);\r\n        path[0] = _tokenIn;\r\n        path[1] = WETH;\r\n        path[2] = _tokenOut;\r\n        }\r\n        //then we will call swapExactTokensForTokens\r\n        //for the deadline we will pass in block.timestamp\r\n        //the deadline is the latest time the trade is valid for\r\n        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactETHForTokens{value: _amountIn}(1, path, _to, block.timestamp + 777777777);\r\n    }\r\n    \r\n    \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Oogway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOogwayTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_admintax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devtax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Markettax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Burntax\",\"type\":\"uint256\"}],\"name\":\"setAllTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setBurnTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Oogway\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setDevTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Oogway\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setMarketTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Oogway\",\"type\":\"address\"}],\"name\":\"setOogwayAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setOogwayTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "sETH", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c9a0196016d10255bc9de15a1ac0cf883814398b65eb2839c89b2c58c9b5436"}]}