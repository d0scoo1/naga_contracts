{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\ncontract BalanceQuery {\r\n    function getBalances(address[] calldata accounts, address[] calldata tokens)\r\n        external\r\n        view\r\n        returns (uint256[][] memory balances, uint256[] memory decimals)\r\n    {\r\n        // Allocate memory\r\n        balances = new uint256[][](accounts.length);\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            balances[i] = new uint256[](tokens.length + 1);\r\n        }\r\n\r\n        decimals = new uint256[](tokens.length + 1);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            for (uint256 j = 0; j < tokens.length; j++) {\r\n                if (isContract(tokens[j])) {\r\n                    try IERC20(tokens[j]).balanceOf(accounts[i]) returns (uint256 balance) {\r\n                        balances[i][j] = balance;\r\n                    } catch (bytes memory) {\r\n                        balances[i][j] = 0;\r\n                    }\r\n                } else {\r\n                    balances[i][j] = 0;\r\n                }\r\n            }\r\n            balances[i][tokens.length] = accounts[i].balance;\r\n        }\r\n\r\n        for (uint256 j = 0; j < tokens.length; j++) {\r\n            if (isContract(tokens[j])) {\r\n                try IERC20(tokens[j]).decimals() returns (uint256 decimals_) {\r\n                    decimals[j] = decimals_;\r\n                } catch (bytes memory) {\r\n                    decimals[j] = 0;\r\n                }\r\n            } else {\r\n                decimals[j] = 0;\r\n            }\r\n        }\r\n        decimals[tokens.length] = 18; // Ethereum is 18 decimals\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"balances\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BalanceQuery", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1600", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://705f8a6e693705b57b9e76a2b1e3aaf664322b87cd6d7e79766664315f03c107"}]}