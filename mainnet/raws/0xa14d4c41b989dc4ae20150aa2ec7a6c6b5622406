{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/dependencies/openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/dependencies/openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/bloq/ISwapManager.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/* solhint-disable func-name-mixedcase */\r\n// Partial interface of IUniswapV2Router02\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface ISwapManager {\r\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\r\n\r\n    function N_DEX() external view returns (uint256);\r\n\r\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\r\n\r\n    function bestOutputFixedInput(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory path,\r\n            uint256 amountOut,\r\n            uint256 rIdx\r\n        );\r\n\r\n    function bestPathFixedInput(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _i\r\n    ) external view returns (address[] memory path, uint256 amountOut);\r\n\r\n    function bestInputFixedOutput(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountOut\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory path,\r\n            uint256 amountIn,\r\n            uint256 rIdx\r\n        );\r\n\r\n    function bestPathFixedOutput(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountOut,\r\n        uint256 _i\r\n    ) external view returns (address[] memory path, uint256 amountIn);\r\n\r\n    function safeGetAmountsOut(\r\n        uint256 _amountIn,\r\n        address[] memory _path,\r\n        uint256 _i\r\n    ) external view returns (uint256[] memory result);\r\n\r\n    function unsafeGetAmountsOut(\r\n        uint256 _amountIn,\r\n        address[] memory _path,\r\n        uint256 _i\r\n    ) external view returns (uint256[] memory result);\r\n\r\n    function safeGetAmountsIn(\r\n        uint256 _amountOut,\r\n        address[] memory _path,\r\n        uint256 _i\r\n    ) external view returns (uint256[] memory result);\r\n\r\n    function unsafeGetAmountsIn(\r\n        uint256 _amountOut,\r\n        address[] memory _path,\r\n        uint256 _i\r\n    ) external view returns (uint256[] memory result);\r\n\r\n    function comparePathsFixedInput(\r\n        address[] memory pathA,\r\n        address[] memory pathB,\r\n        uint256 _amountIn,\r\n        uint256 _i\r\n    ) external view returns (address[] memory path, uint256 amountOut);\r\n\r\n    function comparePathsFixedOutput(\r\n        address[] memory pathA,\r\n        address[] memory pathB,\r\n        uint256 _amountOut,\r\n        uint256 _i\r\n    ) external view returns (address[] memory path, uint256 amountIn);\r\n\r\n    function ours(address a) external view returns (bool);\r\n\r\n    function oracleCount() external view returns (uint256);\r\n\r\n    function oracleAt(uint256 idx) external view returns (address);\r\n\r\n    function getOracle(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _period,\r\n        uint256 _i\r\n    ) external view returns (address);\r\n\r\n    function createOrUpdateOracle(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _period,\r\n        uint256 _i\r\n    ) external returns (address oracleAddr);\r\n\r\n    function consultForFree(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _period,\r\n        uint256 _i\r\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\r\n\r\n    /// get the data we want and pay the gas to update\r\n    function consult(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _period,\r\n        uint256 _i\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountOut,\r\n            uint256 lastUpdatedAt,\r\n            bool updated\r\n        );\r\n\r\n    function updateOracles() external returns (uint256 updated, uint256 expected);\r\n\r\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\r\n}\r\n\r\n\r\n// File contracts/interfaces/vesper/IStrategy.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IStrategy {\r\n    function rebalance() external;\r\n\r\n    function sweepERC20(address _fromToken) external;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    function feeCollector() external view returns (address);\r\n\r\n    function isReservedToken(address _token) external view returns (bool);\r\n\r\n    function keepers() external view returns (address[] memory);\r\n\r\n    function migrate(address _newStrategy) external;\r\n\r\n    function token() external view returns (address);\r\n\r\n    function totalValue() external view returns (uint256);\r\n\r\n    function totalValueCurrent() external returns (uint256);\r\n\r\n    function pool() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File contracts/interfaces/vesper/IGovernable.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @notice Governable interface\r\n */\r\ninterface IGovernable {\r\n    function governor() external view returns (address _governor);\r\n\r\n    function transferGovernorship(address _proposedGovernor) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/vesper/IPausable.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @notice Pausable interface\r\n */\r\ninterface IPausable {\r\n    function paused() external view returns (bool);\r\n\r\n    function stopEverything() external view returns (bool);\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function shutdown() external;\r\n\r\n    function open() external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/vesper/IVesperPool.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\r\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\r\n\r\n    function deposit(uint256 _share) external;\r\n\r\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\r\n\r\n    function excessDebt(address _strategy) external view returns (uint256);\r\n\r\n    function poolRewards() external view returns (address);\r\n\r\n    function reportEarning(\r\n        uint256 _profit,\r\n        uint256 _loss,\r\n        uint256 _payback\r\n    ) external;\r\n\r\n    function reportLoss(uint256 _loss) external;\r\n\r\n    function sweepERC20(address _fromToken) external;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    function keepers() external view returns (address[] memory);\r\n\r\n    function isKeeper(address _address) external view returns (bool);\r\n\r\n    function maintainers() external view returns (address[] memory);\r\n\r\n    function isMaintainer(address _address) external view returns (bool);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function strategy(address _strategy)\r\n        external\r\n        view\r\n        returns (\r\n            bool _active,\r\n            uint256 _interestFee, // Obsolete\r\n            uint256 _debtRate, // Obsolete\r\n            uint256 _lastRebalance,\r\n            uint256 _totalDebt,\r\n            uint256 _totalLoss,\r\n            uint256 _totalProfit,\r\n            uint256 _debtRatio,\r\n            uint256 _externalDepositFee\r\n        );\r\n\r\n    function token() external view returns (IERC20);\r\n\r\n    function tokensHere() external view returns (uint256);\r\n\r\n    function totalDebtOf(address _strategy) external view returns (uint256);\r\n\r\n    function totalValue() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/strategies/Strategy.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract Strategy is IStrategy, Context {\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\r\n\r\n    // solhint-disable-next-line  var-name-mixedcase\r\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IERC20 public immutable collateralToken;\r\n    address public receiptToken;\r\n    address public immutable override pool;\r\n    address public override feeCollector;\r\n    ISwapManager public swapManager;\r\n\r\n    uint256 public oraclePeriod = 3600; // 1h\r\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\r\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\r\n\r\n    EnumerableSet.AddressSet private _keepers;\r\n\r\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\r\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\r\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\r\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\r\n\r\n    constructor(\r\n        address _pool,\r\n        address _swapManager,\r\n        address _receiptToken\r\n    ) {\r\n        require(_pool != address(0), \"pool-address-is-zero\");\r\n        require(_swapManager != address(0), \"sm-address-is-zero\");\r\n        swapManager = ISwapManager(_swapManager);\r\n        pool = _pool;\r\n        collateralToken = IVesperPool(_pool).token();\r\n        receiptToken = _receiptToken;\r\n        require(_keepers.add(_msgSender()), \"add-keeper-failed\");\r\n    }\r\n\r\n    modifier onlyGovernor() {\r\n        require(_msgSender() == IVesperPool(pool).governor(), \"caller-is-not-the-governor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeeper() {\r\n        require(_keepers.contains(_msgSender()), \"caller-is-not-a-keeper\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPool() {\r\n        require(_msgSender() == pool, \"caller-is-not-vesper-pool\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Add given address in keepers list.\r\n     * @param _keeperAddress keeper address to add.\r\n     */\r\n    function addKeeper(address _keeperAddress) external onlyGovernor {\r\n        require(_keepers.add(_keeperAddress), \"add-keeper-failed\");\r\n    }\r\n\r\n    /// @notice Return list of keepers\r\n    function keepers() external view override returns (address[] memory) {\r\n        return _keepers.values();\r\n    }\r\n\r\n    /**\r\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\r\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\r\n     * @param _newStrategy Address of new strategy\r\n     */\r\n    function migrate(address _newStrategy) external virtual override onlyPool {\r\n        require(_newStrategy != address(0), \"new-strategy-address-is-zero\");\r\n        require(IStrategy(_newStrategy).pool() == pool, \"not-valid-new-strategy\");\r\n        _beforeMigration(_newStrategy);\r\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\r\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Remove given address from keepers list.\r\n     * @param _keeperAddress keeper address to remove.\r\n     */\r\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\r\n        require(_keepers.remove(_keeperAddress), \"remove-keeper-failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Update fee collector\r\n     * @param _feeCollector fee collector address\r\n     */\r\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\r\n        require(_feeCollector != address(0), \"fee-collector-address-is-zero\");\r\n        require(_feeCollector != feeCollector, \"fee-collector-is-same\");\r\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\r\n        feeCollector = _feeCollector;\r\n    }\r\n\r\n    /**\r\n     * @notice Update swap manager address\r\n     * @param _swapManager swap manager address\r\n     */\r\n    function updateSwapManager(address _swapManager) external onlyGovernor {\r\n        require(_swapManager != address(0), \"sm-address-is-zero\");\r\n        require(_swapManager != address(swapManager), \"sm-is-same\");\r\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\r\n        swapManager = ISwapManager(_swapManager);\r\n    }\r\n\r\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\r\n        require(_newSwapSlippage <= 10000, \"invalid-slippage-value\");\r\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\r\n        swapSlippage = _newSwapSlippage;\r\n    }\r\n\r\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\r\n        require(_newRouterIdx < swapManager.N_DEX(), \"invalid-router-index\");\r\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\r\n        require(_newPeriod > 59, \"invalid-oracle-period\");\r\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\r\n        oraclePeriod = _newPeriod;\r\n        oracleRouterIdx = _newRouterIdx;\r\n    }\r\n\r\n    /// @dev Approve all required tokens\r\n    function approveToken() external onlyKeeper {\r\n        _approveToken(0);\r\n        _approveToken(MAX_UINT_VALUE);\r\n    }\r\n\r\n    function setupOracles() external onlyKeeper {\r\n        _setupOracles();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw collateral token from lending pool.\r\n     * @param _amount Amount of collateral token\r\n     */\r\n    function withdraw(uint256 _amount) external override onlyPool {\r\n        _withdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Rebalance profit, loss and investment of this strategy\r\n     */\r\n    function rebalance() external virtual override onlyKeeper {\r\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\r\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\r\n        _reinvest();\r\n    }\r\n\r\n    /**\r\n     * @dev sweep given token to feeCollector of strategy\r\n     * @param _fromToken token address to sweep\r\n     */\r\n    function sweepERC20(address _fromToken) external override onlyKeeper {\r\n        require(feeCollector != address(0), \"fee-collector-not-set\");\r\n        require(_fromToken != address(collateralToken), \"not-allowed-to-sweep-collateral\");\r\n        require(!isReservedToken(_fromToken), \"not-allowed-to-sweep\");\r\n        if (_fromToken == ETH) {\r\n            Address.sendValue(payable(feeCollector), address(this).balance);\r\n        } else {\r\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\r\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Returns address of token correspond to collateral token\r\n    function token() external view override returns (address) {\r\n        return receiptToken;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate total value of asset under management\r\n     * @dev Report total value in collateral token\r\n     */\r\n    function totalValue() public view virtual override returns (uint256 _value);\r\n\r\n    /**\r\n     * @notice Calculate total value of asset under management (in real-time)\r\n     * @dev Report total value in collateral token\r\n     */\r\n    function totalValueCurrent() external virtual override returns (uint256) {\r\n        return totalValue();\r\n    }\r\n\r\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\r\n    function isReservedToken(address _token) public view virtual override returns (bool);\r\n\r\n    /**\r\n     * @notice some strategy may want to prepare before doing migration.\r\n        Example In Maker old strategy want to give vault ownership to new strategy\r\n     * @param _newStrategy .\r\n     */\r\n    function _beforeMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\r\n     * excess debt, if any.\r\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\r\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\r\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\r\n     */\r\n    function _generateReport()\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _payback\r\n        )\r\n    {\r\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\r\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\r\n        _profit = _realizeProfit(_totalDebt);\r\n        _loss = _realizeLoss(_totalDebt);\r\n        _payback = _liquidate(_excessDebt);\r\n    }\r\n\r\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\r\n        return (_amount * (10000 - _slippage)) / (10000);\r\n    }\r\n\r\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\r\n        if (_from == WETH || _to == WETH) {\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = WETH;\r\n            path[2] = _to;\r\n        }\r\n    }\r\n\r\n    function _consultOracle(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amt\r\n    ) internal returns (uint256, bool) {\r\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\r\n            (bool _success, bytes memory _returnData) =\r\n                // solhint-disable-next-line avoid-low-level-calls\r\n                address(swapManager).call(\r\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\r\n                );\r\n            if (_success) {\r\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\r\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\r\n                return (0, false);\r\n            }\r\n        }\r\n        return (0, false);\r\n    }\r\n\r\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\r\n        require(path.length > 1, \"invalid-oracle-path\");\r\n        amountOut = _amountIn;\r\n        bool isValid;\r\n        for (uint256 i = 0; i < path.length - 1; i++) {\r\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\r\n            require(isValid, \"invalid-oracle-rate\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\r\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\r\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\r\n     * however, this method will throw minAmountOut is not met\r\n     * @param _from address of from token\r\n     * @param _to address of to token\r\n     * @param _amountIn Amount to be swapped\r\n     * @param _minAmountOut minimum amount out\r\n     */\r\n    function _safeSwap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _minAmountOut\r\n    ) internal {\r\n        if (_from == _to) {\r\n            return;\r\n        }\r\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\r\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\r\n        if (_minAmountOut == 0) _minAmountOut = 1;\r\n        if (amountOut != 0) {\r\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\r\n                _amountIn,\r\n                _minAmountOut,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    // These methods can be implemented by the inheriting strategy.\r\n    /* solhint-disable no-empty-blocks */\r\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\r\n\r\n    /**\r\n     * @notice Set up any oracles that are needed for this strategy.\r\n     */\r\n    function _setupOracles() internal virtual {}\r\n\r\n    /* solhint-enable */\r\n\r\n    // These methods must be implemented by the inheriting strategy\r\n    function _withdraw(uint256 _amount) internal virtual;\r\n\r\n    function _approveToken(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @notice Withdraw collateral to payback excess debt in pool.\r\n     * @param _excessDebt Excess debt of strategy in collateral token\r\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\r\n     */\r\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\r\n\r\n    /**\r\n     * @notice Calculate earning and withdraw/convert it into collateral token.\r\n     * @param _totalDebt Total collateral debt of this strategy\r\n     * @return _profit Profit in collateral token\r\n     */\r\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\r\n\r\n    /**\r\n     * @notice Calculate loss\r\n     * @param _totalDebt Total collateral debt of this strategy\r\n     * @return _loss Realized loss in collateral token\r\n     */\r\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\r\n\r\n    /**\r\n     * @notice Reinvest collateral.\r\n     * @dev Once we file report back in pool, we might have some collateral in hand\r\n     * which we want to reinvest aka deposit in lender/provider.\r\n     */\r\n    function _reinvest() internal virtual;\r\n}\r\n\r\n\r\n// File contracts/interfaces/aave/IAave.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface AaveLendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n\r\n    function getAddress(bytes32 id) external view returns (address);\r\n\r\n    function getPriceOracle() external view returns (address);\r\n}\r\n\r\ninterface AaveOracle {\r\n    function getAssetPrice(address _asset) external view returns (uint256);\r\n}\r\n\r\ninterface AToken is IERC20 {\r\n    /**\r\n     * @dev Returns the address of the incentives controller contract\r\n     **/\r\n    function getIncentivesController() external view returns (address);\r\n\r\n    function mint(\r\n        address user,\r\n        uint256 amount,\r\n        uint256 index\r\n    ) external returns (bool);\r\n\r\n    function burn(\r\n        address user,\r\n        address receiverOfUnderlying,\r\n        uint256 amount,\r\n        uint256 index\r\n    ) external;\r\n}\r\n\r\ninterface AaveIncentivesController {\r\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\r\n\r\n    function claimRewards(\r\n        address[] calldata assets,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface AaveLendingPool {\r\n    function deposit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    function withdraw(\r\n        address asset,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    function flashLoan(\r\n        address receiverAddress,\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata modes,\r\n        address onBehalfOf,\r\n        bytes calldata params,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    function borrow(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 interestRateMode,\r\n        uint16 referralCode,\r\n        address onBehalfOf\r\n    ) external;\r\n\r\n    function repay(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 rateMode,\r\n        address onBehalfOf\r\n    ) external;\r\n\r\n    function getUserAccountData(address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalCollateralETH,\r\n            uint256 totalDebtETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n}\r\n\r\ninterface AaveProtocolDataProvider {\r\n    function getReserveTokensAddresses(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            address aTokenAddress,\r\n            address stableDebtTokenAddress,\r\n            address variableDebtTokenAddress\r\n        );\r\n\r\n    function getReserveData(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 availableLiquidity,\r\n            uint256 totalStableDebt,\r\n            uint256 totalVariableDebt,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 stableBorrowRate,\r\n            uint256 averageStableBorrowRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            uint40 lastUpdateTimestamp\r\n        );\r\n\r\n    function getReserveConfigurationData(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 decimals,\r\n            uint256 ltv,\r\n            uint256 liquidationThreshold,\r\n            uint256 liquidationBonus,\r\n            uint256 reserveFactor,\r\n            bool usageAsCollateralEnabled,\r\n            bool borrowingEnabled,\r\n            bool stableBorrowRateEnabled,\r\n            bool isActive,\r\n            bool isFrozen\r\n        );\r\n}\r\n\r\n//solhint-disable func-name-mixedcase\r\ninterface StakedAave is IERC20 {\r\n    function claimRewards(address to, uint256 amount) external;\r\n\r\n    function cooldown() external;\r\n\r\n    function stake(address onBehalfOf, uint256 amount) external;\r\n\r\n    function redeem(address to, uint256 amount) external;\r\n\r\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\r\n\r\n    function stakersCooldowns(address staker) external view returns (uint256);\r\n\r\n    function COOLDOWN_SECONDS() external view returns (uint256);\r\n\r\n    function UNSTAKE_WINDOW() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/oracle/IUniswapV3Oracle.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n// Interface to use 3rd party Uniswap V3 oracle utility contract deployed at https://etherscan.io/address/0x0f1f5a87f99f0918e6c81f16e59f3518698221ff#code\r\n\r\n/// @title UniswapV3 oracle with ability to query across an intermediate liquidity pool\r\ninterface IUniswapV3Oracle {\r\n    function assetToEth(\r\n        address _tokenIn,\r\n        uint256 _amountIn,\r\n        uint32 _twapPeriod\r\n    ) external view returns (uint256 ethAmountOut);\r\n\r\n    function ethToAsset(\r\n        uint256 _ethAmountIn,\r\n        address _tokenOut,\r\n        uint32 _twapPeriod\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function assetToAsset(\r\n        address _tokenIn,\r\n        uint256 _amountIn,\r\n        address _tokenOut,\r\n        uint32 _twapPeriod\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function assetToAssetThruRoute(\r\n        address _tokenIn,\r\n        uint256 _amountIn,\r\n        address _tokenOut,\r\n        uint32 _twapPeriod,\r\n        address _routeThruToken,\r\n        uint24[2] memory _poolFees\r\n    ) external view returns (uint256 amountOut);\r\n}\r\n\r\n\r\n// File contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Errors.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n/// @title Errors library\r\nlibrary Errors {\r\n    string public constant INVALID_COLLATERAL_AMOUNT = \"1\"; // Collateral must be greater than 0 or > defined limit\r\n    string public constant INVALID_SHARE_AMOUNT = \"2\"; // Share must be greater than 0\r\n    string public constant INVALID_INPUT_LENGTH = \"3\"; // Input array length must be greater than 0\r\n    string public constant INPUT_LENGTH_MISMATCH = \"4\"; // Input array length mismatch with another array length\r\n    string public constant NOT_WHITELISTED_ADDRESS = \"5\"; // Caller is not whitelisted to withdraw without fee\r\n    string public constant MULTI_TRANSFER_FAILED = \"6\"; // Multi transfer of tokens has failed\r\n    string public constant FEE_COLLECTOR_NOT_SET = \"7\"; // Fee Collector is not set\r\n    string public constant NOT_ALLOWED_TO_SWEEP = \"8\"; // Token is not allowed to sweep\r\n    string public constant INSUFFICIENT_BALANCE = \"9\"; // Insufficient balance to performs operations to follow\r\n    string public constant INPUT_ADDRESS_IS_ZERO = \"10\"; // Input address is zero\r\n    string public constant FEE_LIMIT_REACHED = \"11\"; // Fee must be less than MAX_BPS\r\n    string public constant ALREADY_INITIALIZED = \"12\"; // Data structure, contract, or logic already initialized and can not be called again\r\n    string public constant ADD_IN_LIST_FAILED = \"13\"; // Cannot add address in address list\r\n    string public constant REMOVE_FROM_LIST_FAILED = \"14\"; // Cannot remove address from address list\r\n    string public constant STRATEGY_IS_ACTIVE = \"15\"; // Strategy is already active, an inactive strategy is required\r\n    string public constant STRATEGY_IS_NOT_ACTIVE = \"16\"; // Strategy is not active, an active strategy is required\r\n    string public constant INVALID_STRATEGY = \"17\"; // Given strategy is not a strategy of this pool\r\n    string public constant DEBT_RATIO_LIMIT_REACHED = \"18\"; // Debt ratio limit reached. It must be less than MAX_BPS\r\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \"19\"; // Strategy total debt must be 0\r\n    string public constant LOSS_TOO_HIGH = \"20\"; // Strategy reported loss must be less than current debt\r\n    string public constant INVALID_MAX_BORROW_LIMIT = \"21\"; // Max borrow limit is beyond range.\r\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \"22\"; // Max limit should be greater than min limit.\r\n    string public constant INVALID_SLIPPAGE = \"23\"; // Slippage should be less than MAX_BPS\r\n    string public constant WRONG_RECEIPT_TOKEN = \"24\"; // Wrong receipt token address\r\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \"25\"; // aave flash loan is not active\r\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \"26\"; // DYDX flash loan is not active\r\n    string public constant INVALID_FLASH_LOAN = \"27\"; // invalid-flash-loan\r\n    string public constant INVALID_INITIATOR = \"28\"; // \"invalid-initiator\"\r\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \"29\"; // withdrawn amount is not correct\r\n    string public constant NO_MARKET_ID_FOUND = \"30\"; // dydx flash loan no marketId found for token\r\n    string public constant SAME_AS_PREVIOUS = \"31\"; // Input should not be same as previous value.\r\n    string public constant INVALID_INPUT = \"32\"; // Generic invalid input error code\r\n}\r\n\r\n\r\n// File contracts/strategies/aave/AaveCore.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n/// @title This contract provide core operations for Aave\r\nabstract contract AaveCore {\r\n    //solhint-disable-next-line const-name-snakecase\r\n    StakedAave public constant stkAAVE = StakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\r\n    address public constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\r\n\r\n    AaveLendingPool public immutable aaveLendingPool;\r\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\r\n    AaveIncentivesController public immutable aaveIncentivesController;\r\n    AaveLendingPoolAddressesProvider internal immutable aaveAddressesProvider_;\r\n\r\n    AToken internal immutable aToken;\r\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    constructor(address _receiptToken) {\r\n        require(_receiptToken != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\r\n        aToken = AToken(_receiptToken);\r\n        // If there is no AAVE incentive then below call will fail\r\n        try AToken(_receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\r\n            aaveIncentivesController = AaveIncentivesController(_aaveIncentivesController);\r\n        } catch {} //solhint-disable no-empty-blocks\r\n        aaveAddressesProvider_ = AaveLendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\r\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider_.getLendingPool());\r\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider_.getAddress(AAVE_PROVIDER_ID));\r\n    }\r\n\r\n    ///////////////////////// External access functions /////////////////////////\r\n\r\n    /**\r\n     * @notice Initiate cooldown to unstake aave.\r\n     * @dev We only want to call this function when cooldown is expired and\r\n     * that's the reason we have 'if' condition.\r\n     * @dev Child contract should expose this function as external and onlyKeeper\r\n     */\r\n    function _startCooldown() internal returns (bool) {\r\n        if (canStartCooldown()) {\r\n            stkAAVE.cooldown();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Unstake Aave from stakedAave contract\r\n     * @dev We want to unstake as soon as favorable condition exit\r\n     * @dev No guarding condition thus this call can fail, if we can't unstake.\r\n     * @dev Child contract should expose this function as external and onlyKeeper\r\n     */\r\n    function _unstakeAave() internal {\r\n        stkAAVE.redeem(address(this), type(uint256).max);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    /// @notice Returns true if Aave can be unstaked\r\n    function canUnstake() external view returns (bool) {\r\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\r\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\r\n    }\r\n\r\n    /// @notice Returns true if we should start cooldown\r\n    function canStartCooldown() public view returns (bool) {\r\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\r\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\r\n    }\r\n\r\n    /// @notice Return cooldown related timestamps\r\n    function cooldownData()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _cooldownStart,\r\n            uint256 _cooldownEnd,\r\n            uint256 _unstakeEnd\r\n        )\r\n    {\r\n        _cooldownStart = stkAAVE.stakersCooldowns(address(this));\r\n        _cooldownEnd = _cooldownStart + stkAAVE.COOLDOWN_SECONDS();\r\n        _unstakeEnd = _cooldownEnd + stkAAVE.UNSTAKE_WINDOW();\r\n    }\r\n\r\n    /**\r\n     * @notice Claim Aave. Also unstake all Aave if favorable condition exits or start cooldown.\r\n     * @dev If we unstake all Aave, we can't start cooldown because it requires StakedAave balance.\r\n     * @dev DO NOT convert 'if else' to 2 'if's as we are reading cooldown state once to save gas.\r\n     * @dev Not all collateral token has aave incentive\r\n     */\r\n    function _claimAave() internal returns (uint256) {\r\n        if (address(aaveIncentivesController) == address(0)) {\r\n            return 0;\r\n        }\r\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\r\n        if (_cooldownStart == 0 || block.timestamp > _unstakeEnd) {\r\n            // claim stkAave when its first rebalance or unstake period passed.\r\n            aaveIncentivesController.claimRewards(getAssets(), type(uint256).max, address(this));\r\n        }\r\n        // Fetch and check again for next action.\r\n        (_cooldownStart, _cooldownEnd, _unstakeEnd) = cooldownData();\r\n        if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\r\n            stkAAVE.redeem(address(this), type(uint256).max);\r\n        } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\r\n            stkAAVE.cooldown();\r\n        }\r\n\r\n        stkAAVE.claimRewards(address(this), type(uint256).max);\r\n        return IERC20(AAVE).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Deposit asset into Aave\r\n    function _deposit(address _asset, uint256 _amount) internal {\r\n        if (_amount != 0) {\r\n            aaveLendingPool.deposit(_asset, _amount, address(this), 0);\r\n        }\r\n    }\r\n\r\n    function getAssets() internal view returns (address[] memory) {\r\n        address[] memory _assets = new address[](1);\r\n        _assets[0] = address(aToken);\r\n        return _assets;\r\n    }\r\n\r\n    /**\r\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\r\n     * @dev Check we have enough aToken and liquidity to support this withdraw\r\n     * @param _asset Address of asset to withdraw\r\n     * @param _to Address that will receive collateral token.\r\n     * @param _amount Amount of collateral to withdraw.\r\n     * @return Actual collateral withdrawn\r\n     */\r\n    function _safeWithdraw(\r\n        address _asset,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\r\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\r\n        // In this case we might have more aToken compare to available liquidity in Aave and any\r\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\r\n        // _amount against available liquidity.\r\n        (uint256 _availableLiquidity, , , , , , , , , ) = aaveProtocolDataProvider.getReserveData(_asset);\r\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\r\n        return _withdraw(_asset, _to, Math.min(_amount, Math.min(_aTokenBalance, _availableLiquidity)));\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw given amount of collateral from Aave to given address\r\n     * @param _asset Address of asset to withdraw\r\n     * @param _to Address that will receive collateral token.\r\n     * @param _amount Amount of collateral to withdraw.\r\n     * @return Actual collateral withdrawn\r\n     */\r\n    function _withdraw(\r\n        address _asset,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        if (_amount != 0) {\r\n            require(aaveLendingPool.withdraw(_asset, _amount, _to) == _amount, Errors.INCORRECT_WITHDRAW_AMOUNT);\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Return true, only if we have StakedAave balance and either cooldown expired or cooldown is zero\r\n     * @dev If we are in cooldown period we cannot unstake Aave. But our cooldown is still valid so we do\r\n     * not want to reset/start cooldown.\r\n     */\r\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\r\n        return stkAAVE.balanceOf(address(this)) != 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\r\n    }\r\n\r\n    /// @dev Return true, if cooldown is over and we are in unstake window.\r\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\r\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\r\n    }\r\n\r\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\r\n    function _isReservedToken(address _token) internal view returns (bool) {\r\n        return _token == address(aToken) || _token == AAVE || _token == address(stkAAVE);\r\n    }\r\n\r\n    /**\r\n     * @notice Return total AAVE incentive allocated to this address\r\n     * @dev Aave and StakedAave are 1:1\r\n     * @dev Not all collateral token has aave incentive\r\n     */\r\n    function _totalAave() internal view returns (uint256) {\r\n        if (address(aaveIncentivesController) == address(0)) {\r\n            return 0;\r\n        }\r\n        // TotalAave = Get current StakedAave rewards from controller +\r\n        //             StakedAave balance here +\r\n        //             Aave rewards by staking Aave in StakedAave contract\r\n        return\r\n            aaveIncentivesController.getRewardsBalance(getAssets(), address(this)) +\r\n            stkAAVE.balanceOf(address(this)) +\r\n            stkAAVE.getTotalRewardsBalance(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/vesper/IPoolRewards.sol\r\n\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IPoolRewards {\r\n    /// Emitted after reward added\r\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\r\n    /// Emitted whenever any user claim rewards\r\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\r\n    /// Emitted after adding new rewards token into rewardTokens array\r\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\r\n\r\n    function claimReward(address) external;\r\n\r\n    function notifyRewardAmount(\r\n        address _rewardToken,\r\n        uint256 _rewardAmount,\r\n        uint256 _rewardDuration\r\n    ) external;\r\n\r\n    function notifyRewardAmount(\r\n        address[] memory _rewardTokens,\r\n        uint256[] memory _rewardAmounts,\r\n        uint256[] memory _rewardDurations\r\n    ) external;\r\n\r\n    function updateReward(address) external;\r\n\r\n    function claimable(address _account)\r\n        external\r\n        view\r\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\r\n\r\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\r\n\r\n    function rewardForDuration()\r\n        external\r\n        view\r\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\r\n\r\n    function rewardPerToken()\r\n        external\r\n        view\r\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\r\n}\r\n\r\n\r\n// File contracts/strategies/aave/AaveXYStrategy.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n// solhint-disable no-empty-blocks\r\n\r\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\r\ncontract AaveXYStrategy is Strategy, AaveCore {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    string public NAME;\r\n    string public constant VERSION = \"4.0.0\";\r\n\r\n    uint256 internal constant MAX_BPS = 10_000; //100%\r\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\r\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\r\n\r\n    IUniswapV3Oracle internal constant ORACLE = IUniswapV3Oracle(0x0F1f5A87f99f0918e6C81F16E59F3518698221Ff);\r\n    uint32 internal constant TWAP_PERIOD = 3600;\r\n    address public rewardToken;\r\n    address public borrowToken;\r\n    AToken public vdToken; // Variable Debt Token\r\n\r\n    event UpdatedBorrowLimit(\r\n        uint256 previousMinBorrowLimit,\r\n        uint256 newMinBorrowLimit,\r\n        uint256 previousMaxBorrowLimit,\r\n        uint256 newMaxBorrowLimit\r\n    );\r\n\r\n    constructor(\r\n        address _pool,\r\n        address _swapManager,\r\n        address _rewardToken,\r\n        address _receiptToken,\r\n        address _borrowToken,\r\n        string memory _name\r\n    ) Strategy(_pool, _swapManager, _receiptToken) AaveCore(_receiptToken) {\r\n        NAME = _name;\r\n        rewardToken = _rewardToken;\r\n        (, , address _vdToken) = aaveProtocolDataProvider.getReserveTokensAddresses(_borrowToken);\r\n        vdToken = AToken(_vdToken);\r\n        borrowToken = _borrowToken;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate current position using claimed rewardToken and current borrow.\r\n     */\r\n    function isLossMaking() external view returns (bool) {\r\n        // It's loss making if _totalValue < totalDebt\r\n        return totalValue() < IVesperPool(pool).totalDebtOf(address(this));\r\n    }\r\n\r\n    function isReservedToken(address _token) public view virtual override returns (bool) {\r\n        return _isReservedToken(_token) || address(vdToken) == _token || borrowToken == _token;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate total value using rewardToken accrued, supply and borrow position\r\n     */\r\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\r\n        uint256 _aaveRewardAccrued = _totalAave();\r\n        uint256 _aaveAsCollateral;\r\n        if (_aaveRewardAccrued > 0) {\r\n            (, _aaveAsCollateral, ) = swapManager.bestOutputFixedInput(\r\n                rewardToken,\r\n                address(collateralToken),\r\n                _aaveRewardAccrued\r\n            );\r\n        }\r\n\r\n        uint256 _supply = aToken.balanceOf(address(this));\r\n        uint256 _borrowInAave = vdToken.balanceOf(address(this));\r\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\r\n\r\n        uint256 _collateralNeededForRepay;\r\n        if (_borrowInAave > _investedBorrowBalance) {\r\n            (, _collateralNeededForRepay, ) = swapManager.bestInputFixedOutput(\r\n                address(collateralToken),\r\n                borrowToken,\r\n                _borrowInAave - _investedBorrowBalance\r\n            );\r\n        }\r\n        _totalValue =\r\n            _aaveAsCollateral +\r\n            collateralToken.balanceOf(address(this)) +\r\n            _supply -\r\n            _collateralNeededForRepay;\r\n    }\r\n\r\n    /// @notice After borrowing Y Hook\r\n    function _afterBorrowY(uint256 _amount) internal virtual {}\r\n\r\n    /// @notice Approve all required tokens\r\n    function _approveToken(uint256 _amount) internal virtual override {\r\n        collateralToken.safeApprove(pool, _amount);\r\n        collateralToken.safeApprove(address(aToken), _amount);\r\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\r\n        IERC20(borrowToken).safeApprove(address(aaveLendingPool), _amount);\r\n\r\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\r\n            IERC20(collateralToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\r\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\r\n            IERC20(borrowToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Claim rewardToken and transfer to new strategy\r\n     * @param _newStrategy Address of new strategy.\r\n     */\r\n    function _beforeMigration(address _newStrategy) internal virtual override {\r\n        require(IStrategy(_newStrategy).token() == address(aToken), \"wrong-receipt-token\");\r\n        _repayY(vdToken.balanceOf(address(this)));\r\n    }\r\n\r\n    /// @notice Before repaying Y Hook\r\n    function _beforeRepayY(uint256 _amount) internal virtual returns (uint256 _withdrawnAmount) {\r\n        return _amount;\r\n    }\r\n\r\n    function _borrowY(uint256 _amount) internal virtual {\r\n        if (_amount > 0) {\r\n            // 2 for variable rate borrow, 0 for referralCode\r\n            aaveLendingPool.borrow(borrowToken, _amount, 2, 0, address(this));\r\n            _afterBorrowY(_amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\r\n     * @param _depositAmount deposit amount\r\n     * @param _withdrawAmount withdraw amount\r\n     * @return _borrowAmount borrow more amount\r\n     * @return _repayAmount repay amount to keep ltv within limit\r\n     */\r\n    function _calculateBorrowPosition(uint256 _depositAmount, uint256 _withdrawAmount)\r\n        internal\r\n        view\r\n        returns (uint256 _borrowAmount, uint256 _repayAmount)\r\n    {\r\n        require(_depositAmount == 0 || _withdrawAmount == 0, \"all-input-gt-zero\");\r\n        uint256 _borrowed = vdToken.balanceOf(address(this));\r\n        // If maximum borrow limit set to 0 then repay borrow\r\n        if (maxBorrowLimit == 0) {\r\n            return (0, _borrowed);\r\n        }\r\n        uint256 _collateral = aToken.balanceOf(address(this));\r\n        // In case of withdraw, _amount can be greater than _supply\r\n        uint256 _hypotheticalCollateral =\r\n            _depositAmount > 0 ? _collateral + _depositAmount : _collateral > _withdrawAmount\r\n                ? _collateral - _withdrawAmount\r\n                : 0;\r\n        if (_hypotheticalCollateral == 0) {\r\n            return (0, _borrowed);\r\n        }\r\n        AaveOracle _aaveOracle = AaveOracle(aaveAddressesProvider_.getPriceOracle());\r\n        // Oracle prices are in 18 decimal\r\n        uint256 _borrowTokenPrice = _aaveOracle.getAssetPrice(borrowToken);\r\n        uint256 _collateralTokenPrice = _aaveOracle.getAssetPrice(address(collateralToken));\r\n        if (_borrowTokenPrice == 0 || _collateralTokenPrice == 0) {\r\n            // Oracle problem. Lets payback all\r\n            return (0, _borrowed);\r\n        }\r\n        // _collateralFactor in 4 decimal. 10_000 = 100%\r\n        (, uint256 _collateralFactor, , , , , , , , ) =\r\n            aaveProtocolDataProvider.getReserveConfigurationData(address(collateralToken));\r\n\r\n        // Collateral in base currency based on oracle price and cf;\r\n        uint256 _actualCollateralForBorrow =\r\n            (_hypotheticalCollateral * _collateralFactor * _collateralTokenPrice) /\r\n                (MAX_BPS * (10**IERC20Metadata(address(collateralToken)).decimals()));\r\n        // Calculate max borrow possible in borrow token number\r\n        uint256 _maxBorrowPossible =\r\n            (_actualCollateralForBorrow * (10**IERC20Metadata(address(borrowToken)).decimals())) / _borrowTokenPrice;\r\n        if (_maxBorrowPossible == 0) {\r\n            return (0, _borrowed);\r\n        }\r\n        // Safe buffer to avoid liquidation due to price variations.\r\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\r\n\r\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\r\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\r\n\r\n        // If current borrow is greater than max borrow, then repay to achieve safe position.\r\n        if (_borrowed > _borrowUpperBound) {\r\n            // If borrow > upperBound then it is greater than lowerBound too.\r\n            _repayAmount = _borrowed - _borrowLowerBound;\r\n        } else if (_borrowLowerBound > _borrowed) {\r\n            _borrowAmount = _borrowLowerBound - _borrowed;\r\n        }\r\n    }\r\n\r\n    /// @notice Claim Aave and VSP rewards and convert to _toToken.\r\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\r\n        uint256 _aaveAmount = _claimAave();\r\n        if (_aaveAmount > 0) {\r\n            _safeSwap(rewardToken, _toToken, _aaveAmount, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\r\n     * @dev Claim rewardToken and convert to collateral.\r\n     */\r\n    function _generateReport()\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _payback\r\n        )\r\n    {\r\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\r\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\r\n\r\n        // Claim rewardToken and convert to collateral token\r\n        _claimRewardsAndConvertTo(address(collateralToken));\r\n\r\n        uint256 _supply = aToken.balanceOf(address(this));\r\n        uint256 _borrow = vdToken.balanceOf(address(this));\r\n\r\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\r\n\r\n        if (_investedBorrowBalance > _borrow) {\r\n            _rebalanceBorrow(_investedBorrowBalance - _borrow);\r\n        } else {\r\n            _swapToBorrowToken(_borrow - _investedBorrowBalance);\r\n        }\r\n\r\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\r\n        uint256 _totalCollateral = _supply + _collateralHere;\r\n\r\n        if (_totalCollateral > _totalDebt) {\r\n            _profit = _totalCollateral - _totalDebt;\r\n        } else {\r\n            _loss = _totalDebt - _totalCollateral;\r\n        }\r\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\r\n        if (_collateralHere < _profitAndExcessDebt) {\r\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _supply);\r\n            if (_totalAmountToWithdraw > 0) {\r\n                _withdrawHere(_totalAmountToWithdraw);\r\n                _collateralHere = collateralToken.balanceOf(address(this));\r\n            }\r\n        }\r\n\r\n        if (_excessDebt > 0) {\r\n            _payback = Math.min(_collateralHere, _excessDebt);\r\n        }\r\n    }\r\n\r\n    /// @notice Borrowed Y balance deposited here or elsewhere hook\r\n    function _getInvestedBorrowBalance() internal view virtual returns (uint256) {\r\n        return IERC20(borrowToken).balanceOf(address(this));\r\n    }\r\n\r\n    // @solhint-disable-next-line no-empty-blocks\r\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\r\n\r\n    /**\r\n     * @dev Aave support WETH as collateral.\r\n     */\r\n    function _mint(uint256 _amount) internal virtual {\r\n        _deposit(address(collateralToken), _amount);\r\n    }\r\n\r\n    // @solhint-disable-next-line no-empty-blocks\r\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {}\r\n\r\n    // @solhint-disable-next-line no-empty-blocks\r\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {}\r\n\r\n    /// @notice Swap excess borrow for more collateral hook\r\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\r\n\r\n    function _redeemX(uint256 _amount) internal virtual {\r\n        _withdraw(address(collateralToken), address(this), _amount);\r\n    }\r\n\r\n    /// @notice Deposit collateral in Aave and adjust borrow position\r\n    function _reinvest() internal virtual override {\r\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\r\n\r\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\r\n\r\n        if (_repayAmount > 0) {\r\n            // Repay _borrowAmount to maintain safe position\r\n            _repayY(_repayAmount);\r\n            _mint(collateralToken.balanceOf(address(this)));\r\n        } else {\r\n            // Happy path, mint more borrow more\r\n            _mint(_collateralBalance);\r\n            _borrowY(_borrowAmount);\r\n        }\r\n    }\r\n\r\n    function _repayY(uint256 _amount) internal virtual {\r\n        uint256 _repayAmount = _beforeRepayY(_amount);\r\n        if (_repayAmount > 0) aaveLendingPool.repay(borrowToken, _repayAmount, 2, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev If swap slippage is defined then use oracle to get amountOut and calculate minAmountOut\r\n     */\r\n    function _safeSwap(\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _amountIn\r\n    ) internal virtual {\r\n        uint256 _minAmountOut =\r\n            swapSlippage != 10000\r\n                ? _calcAmtOutAfterSlippage(\r\n                    ORACLE.assetToAsset(_tokenIn, _amountIn, _tokenOut, TWAP_PERIOD),\r\n                    swapSlippage\r\n                )\r\n                : 1;\r\n        _safeSwap(_tokenIn, _tokenOut, _amountIn, _minAmountOut);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap given token to borrowToken\r\n     * @param _shortOnBorrow Expected output of this swap\r\n     */\r\n    function _swapToBorrowToken(uint256 _shortOnBorrow) internal {\r\n        // Looking for _amountIn using fixed output amount\r\n        (address[] memory _path, uint256 _amountIn, uint256 _rIdx) =\r\n            swapManager.bestInputFixedOutput(address(collateralToken), borrowToken, _shortOnBorrow);\r\n        if (_amountIn > 0) {\r\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\r\n            // If we do not have enough _from token to get expected output, either get\r\n            // some _from token or adjust expected output.\r\n            if (_amountIn > _collateralHere) {\r\n                // Redeem some collateral, so that we have enough collateral to get expected output\r\n                _redeemX(_amountIn - _collateralHere);\r\n            }\r\n            swapManager.ROUTERS(_rIdx).swapTokensForExactTokens(\r\n                _shortOnBorrow,\r\n                _amountIn,\r\n                _path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Withdraw collateral and transfer it to pool\r\n    function _withdraw(uint256 _amount) internal override {\r\n        collateralToken.safeTransfer(pool, _withdrawHere(_amount));\r\n    }\r\n\r\n    /// @dev Withdraw collateral here. Do not transfer to pool\r\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\r\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _amount);\r\n        if (_repayAmount > 0) {\r\n            _repayY(_repayAmount);\r\n        }\r\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\r\n\r\n        _redeemX(_amount);\r\n\r\n        return collateralToken.balanceOf(address(this)) - _collateralBefore;\r\n    }\r\n\r\n    /**\r\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\r\n     * @dev It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\r\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\r\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\r\n     */\r\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\r\n        require(_maxBorrowLimit < MAX_BPS, \"invalid-max-borrow-limit\");\r\n        // set _maxBorrowLimit and _minBorrowLimit to disable borrow;\r\n        require(\r\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\r\n            \"max-should-be-higher-than-min\"\r\n        );\r\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\r\n        minBorrowLimit = _minBorrowLimit;\r\n        maxBorrowLimit = _maxBorrowLimit;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/strategies/aave/VesperAaveXYStrategy.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\r\ncontract VesperAaveXYStrategy is AaveXYStrategy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Destination Grow Pool for borrowed Token\r\n    address public immutable vPool;\r\n    // VSP token address\r\n    address public immutable vsp;\r\n\r\n    constructor(\r\n        address _pool,\r\n        address _swapManager,\r\n        address _rewardToken,\r\n        address _receiptToken,\r\n        address _borrowToken,\r\n        address _vPool,\r\n        address _vspAddress,\r\n        string memory _name\r\n    ) AaveXYStrategy(_pool, _swapManager, _rewardToken, _receiptToken, _borrowToken, _name) {\r\n        require(_vspAddress != address(0), \"invalid-vsp-address\");\r\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \"invalid-grow-pool\");\r\n        vPool = _vPool;\r\n        vsp = _vspAddress;\r\n    }\r\n\r\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\r\n        uint256 _vspAsCollateral;\r\n        address _poolRewards = IVesperPool(vPool).poolRewards();\r\n        if (_poolRewards != address(0)) {\r\n            (, uint256[] memory _claimableAmount) = IPoolRewards(_poolRewards).claimable(address(this));\r\n            uint256 _vspRewardAccrued = _claimableAmount[0];\r\n            if (_vspRewardAccrued != 0) {\r\n                (, _vspAsCollateral, ) = swapManager.bestOutputFixedInput(\r\n                    vsp,\r\n                    address(collateralToken),\r\n                    _vspRewardAccrued\r\n                );\r\n            }\r\n        }\r\n        _totalValue = super.totalValue() + _vspAsCollateral;\r\n    }\r\n\r\n    /// @notice After borrowing Y, deposit to Vesper Pool\r\n    function _afterBorrowY(uint256 _amount) internal virtual override {\r\n        IVesperPool(vPool).deposit(_amount);\r\n    }\r\n\r\n    /// @notice Approve all required tokens\r\n    function _approveToken(uint256 _amount) internal virtual override {\r\n        super._approveToken(_amount);\r\n        IERC20(borrowToken).safeApprove(vPool, _amount);\r\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\r\n            IERC20(vsp).safeApprove(address(swapManager.ROUTERS(i)), _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\r\n    function _beforeRepayY(uint256 _amount) internal virtual override returns (uint256 _withdrawnAmount) {\r\n        _withdrawFromVesperPool(_amount);\r\n        _withdrawnAmount = IERC20(borrowToken).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Claim Aave and VSP rewards and convert to _toToken.\r\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\r\n        super._claimRewardsAndConvertTo(_toToken);\r\n        address _poolRewards = IVesperPool(vPool).poolRewards();\r\n        if (_poolRewards != address(0)) {\r\n            IPoolRewards(_poolRewards).claimReward(address(this));\r\n            uint256 _vspAmount = IERC20(vsp).balanceOf(address(this));\r\n            if (_vspAmount != 0) {\r\n                _safeSwap(vsp, _toToken, _vspAmount, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Borrowed Y balance deposited in Vesper Pool\r\n    function _getInvestedBorrowBalance() internal view virtual override returns (uint256) {\r\n        return\r\n            IERC20(borrowToken).balanceOf(address(this)) +\r\n            ((IVesperPool(vPool).pricePerShare() * IVesperPool(vPool).balanceOf(address(this))) / 1e18);\r\n    }\r\n\r\n    /// @notice Swap excess borrow for more collateral when underlying VSP pool is making profits\r\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual override {\r\n        if (_excessBorrow != 0) {\r\n            _withdrawFromVesperPool(_excessBorrow);\r\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this));\r\n            if (_borrowedHere != 0) {\r\n                _safeSwap(borrowToken, address(collateralToken), _borrowedHere);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\r\n    function _withdrawFromVesperPool(uint256 _amount) internal {\r\n        if (_amount > 0) {\r\n            uint256 _pricePerShare = IVesperPool(vPool).pricePerShare();\r\n            uint256 _shares = (_amount * 1e18) / _pricePerShare;\r\n            _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\r\n\r\n            uint256 _maxShares = IERC20(vPool).balanceOf(address(this));\r\n\r\n            IVesperPool(vPool).withdraw((_shares > _maxShares || _shares == 0) ? _maxShares : _shares);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vspAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveIncentivesController\",\"outputs\":[{\"internalType\":\"contract AaveIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"contract AaveLendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProtocolDataProvider\",\"outputs\":[{\"internalType\":\"contract AaveProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canStartCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLossMaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkAAVE\",\"outputs\":[{\"internalType\":\"contract StakedAave\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vdToken\",\"outputs\":[{\"internalType\":\"contract AToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VesperAaveXYStrategy", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000d1c117319b3595fbc39b471ab1fd485629eb05f2000000000000000000000000e382d9f2394a359b01006faa8a1864b8a60d27100000000000000000000000007fc66500c84a76ad7e9c93437bfc5ac33e2ddae9000000000000000000000000030ba81f1c18d280636f32af80b9aad02cf0854e000000000000000000000000956f47f50a910163d8bf957cf5846d573e7f87ca0000000000000000000000002b6c40ef15db0d78d08a7d1b4e12d57e88a3e3240000000000000000000000001b40183efb4dd766f11bda7a7c3ad8982e9984210000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001b56657370657241617665585953747261746567794554485f4645490000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ae3c0066df0a9989595b7728521c7c35c39084a219942c4cbeba200362eebcc8"}]}