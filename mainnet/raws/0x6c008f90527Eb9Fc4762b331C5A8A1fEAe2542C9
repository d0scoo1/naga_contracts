{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"lib.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\n\\npragma solidity \\u003e=0.5.12;\\n\\ncontract LibNote {\\n    event LogNote(\\n        bytes4   indexed  sig,\\n        address  indexed  usr,\\n        bytes32  indexed  arg1,\\n        bytes32  indexed  arg2,\\n        bytes             data\\n    ) anonymous;\\n\\n    modifier note {\\n        _;\\n        assembly {\\n            // log an \\u0027anonymous\\u0027 event with a constant 6 words of calldata\\n            // and four indexed topics: selector, caller, arg1 and arg2\\n            let mark := msize()                       // end of memory ensures zero\\n            mstore(0x40, add(mark, 288))              // update free memory pointer\\n            mstore(mark, 0x20)                        // bytes type data offset\\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\\n            log4(mark, 288,                           // calldata\\n                 shl(224, shr(224, calldataload(0))), // msg.sig\\n                 caller(),                            // msg.sender\\n                 calldataload(4),                     // arg1\\n                 calldataload(36)                     // arg2\\n                )\\n        }\\n    }\\n}\\n\"},\"spot.sol\":{\"content\":\"/// spot.sol -- Spotter\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n\\npragma solidity \\u003e=0.5.12;\\n\\nimport \\\"lib.sol\\\";\\n\\ninterface VatLike {\\n    function file(bytes32, bytes32, uint) external;\\n}\\n\\ninterface PipLike {\\n    function peek() external returns (bytes32, bool);\\n}\\n\\ncontract Spotter is LibNote {\\n    // --- Auth ---\\n    mapping (address =\\u003e uint) public wards;\\n    function rely(address guy) external note auth { wards[guy] = 1;  }\\n    function deny(address guy) external note auth { wards[guy] = 0; }\\n    modifier auth {\\n        require(wards[msg.sender] == 1, \\\"Spotter/not-authorized\\\");\\n        _;\\n    }\\n\\n    // --- Data ---\\n    struct Ilk {\\n        PipLike pip;  // Price Feed\\n        uint256 mat;  // Liquidation ratio [ray]\\n    }\\n\\n    mapping (bytes32 =\\u003e Ilk) public ilks;\\n\\n    VatLike public vat;  // CDP Engine\\n    uint256 public par;  // ref per dai [ray]\\n\\n    uint256 public live;\\n\\n    // --- Events ---\\n    event Poke(\\n      bytes32 ilk,\\n      bytes32 val,  // [wad]\\n      uint256 spot  // [ray]\\n    );\\n\\n    // --- Init ---\\n    constructor(address vat_) public {\\n        wards[msg.sender] = 1;\\n        vat = VatLike(vat_);\\n        par = ONE;\\n        live = 1;\\n    }\\n\\n    // --- Math ---\\n    uint constant ONE = 10 ** 27;\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x);\\n    }\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = mul(x, ONE) / y;\\n    }\\n\\n    // --- Administration ---\\n    function file(bytes32 ilk, bytes32 what, address pip_) external note auth {\\n        require(live == 1, \\\"Spotter/not-live\\\");\\n        if (what == \\\"pip\\\") ilks[ilk].pip = PipLike(pip_);\\n        else revert(\\\"Spotter/file-unrecognized-param\\\");\\n    }\\n    function file(bytes32 what, uint data) external note auth {\\n        require(live == 1, \\\"Spotter/not-live\\\");\\n        if (what == \\\"par\\\") par = data;\\n        else revert(\\\"Spotter/file-unrecognized-param\\\");\\n    }\\n    function file(bytes32 ilk, bytes32 what, uint data) external note auth {\\n        require(live == 1, \\\"Spotter/not-live\\\");\\n        if (what == \\\"mat\\\") ilks[ilk].mat = data;\\n        else revert(\\\"Spotter/file-unrecognized-param\\\");\\n    }\\n\\n    // --- Update value ---\\n    function poke(bytes32 ilk) external {\\n        (bytes32 val, bool has) = ilks[ilk].pip.peek();\\n        uint256 spot = has ? rdiv(rdiv(mul(uint(val), 10 ** 9), par), ilks[ilk].mat) : 0;\\n        vat.file(ilk, \\\"spot\\\", spot);\\n        emit Poke(ilk, val, spot);\\n    }\\n\\n    function cage() external note auth {\\n        live = 0;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg1\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"arg2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spot\",\"type\":\"uint256\"}],\"name\":\"Poke\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"cage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"pip_\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ilks\",\"outputs\":[{\"internalType\":\"contract PipLike\",\"name\":\"pip\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mat\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"par\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"}],\"name\":\"poke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Spotter", "CompilerVersion": "v0.5.12+commit.7709ece9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008b2b0c101adb9c3654b226a3273e256a74688e57", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e88987ee501801bf41e2554bbeabfcb2d9dad4b44ab520bc04c08009d4d0632b"}]}