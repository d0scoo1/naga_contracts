{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Configuration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./DataTypes.sol\\\";\\n\\nlibrary Configuration {\\n    uint8 public constant BORROW_MASK = 0x0E;\\n    uint8 public constant REPAY_MASK = 0x0D;\\n    uint8 public constant WITHDRAW_MASK = 0x0B;\\n    uint8 public constant LIQUIDATE_MASK = 0x07;\\n\\n    uint8 constant IS_BORROW_START_BIT_POSITION = 0;\\n    uint8 constant IS_REPAY_START_BIT_POSITION = 1;\\n    uint8 constant IS_WITHDRAW_START_BIT_POSITION = 2;\\n    uint8 constant IS_LIQUIDATE_START_BIT_POSITION = 3;\\n\\n    function setBorrow(DataTypes.NFT storage self, bool active) internal {\\n        self.marks =\\n            (self.marks & BORROW_MASK) |\\n            (uint8(active ? 1 : 0) << IS_BORROW_START_BIT_POSITION);\\n    }\\n\\n    function setRepay(DataTypes.NFT storage self, bool active) internal {\\n        self.marks =\\n            (self.marks & REPAY_MASK) |\\n            (uint8(active ? 1 : 0) << IS_REPAY_START_BIT_POSITION);\\n    }\\n\\n    function setWithdraw(DataTypes.NFT storage self, bool active) internal {\\n        self.marks =\\n            (self.marks & WITHDRAW_MASK) |\\n            (uint8(active ? 1 : 0) << IS_WITHDRAW_START_BIT_POSITION);\\n    }\\n\\n    function setLiquidate(DataTypes.NFT storage self, bool active) internal {\\n        self.marks =\\n            (self.marks & LIQUIDATE_MASK) |\\n            (uint8(active ? 1 : 0) << IS_LIQUIDATE_START_BIT_POSITION);\\n    }\\n\\n    function getBorrow(DataTypes.NFT storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.marks & ~BORROW_MASK != 0;\\n    }\\n\\n    function getRepay(DataTypes.NFT storage self) internal view returns (bool) {\\n        return self.marks & ~REPAY_MASK != 0;\\n    }\\n\\n    function getWithdraw(DataTypes.NFT storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.marks & ~WITHDRAW_MASK != 0;\\n    }\\n\\n    function getLiquidate(DataTypes.NFT storage self)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return self.marks & ~LIQUIDATE_MASK != 0;\\n    }\\n\\n    function getState(DataTypes.NFT storage self)\\n        internal\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            bool,\\n            bool\\n        )\\n    {\\n        return (\\n            self.marks & ~BORROW_MASK != 0,\\n            self.marks & ~REPAY_MASK != 0,\\n            self.marks & ~WITHDRAW_MASK != 0,\\n            self.marks & ~LIQUIDATE_MASK != 0\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nlibrary DataTypes {\\n    struct COLLATERAL {\\n        uint256 apy;\\n        uint256 price;\\n        uint256 period;\\n        uint256 buffering;\\n        address erc20Token;\\n        string description;\\n    }\\n\\n    struct OFFER {\\n        uint256 apy;\\n        uint256 price;\\n        uint256 period;\\n        uint256 buffering;\\n        address erc20Token;\\n        bool accept;\\n        bool cancel;\\n        uint256 offerId; //final sold offerId\\n        uint256 lTokenId; //lTokenId, the token's id given to the lender\\n        address user; //the person who given this offer\\n        uint256 fee;// The fee when the user adds an offer\\n    }\\n\\n    struct NFT {\\n        address holder;\\n        address lender;\\n        uint256 nftId; // nft tokenId\\n        address nftAdr; // nft address\\n        uint256 depositId; // depositId\\n        uint256 lTokenId; // ltoken id\\n        uint256 borrowTimestamp; // borrow timestamp\\n        uint256 emergencyTimestamp; // emergency timestamp\\n        uint256 repayAmount; // repayAmount\\n        //bit 0: borrow\\n        //bit 1: repay\\n        //bit 2: withdraw\\n        //bit 3: liquidate\\n        uint8 marks;\\n        COLLATERAL collateral;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"BORROW_MASK\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATE_MASK\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPAY_MASK\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_MASK\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Configuration", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}