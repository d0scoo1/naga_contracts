{"status": "1", "message": "OK", "result": [{"SourceCode": "// hevm: flattened sources of src/DssSpell.sol\r\npragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\r\n\r\n////// lib/dss-exec-lib/src/DssExecLib.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity ^0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\nlibrary DssExecLib {\r\n    function vat()        public view returns (address) {}\r\n    function cat()        public view returns (address) {}\r\n    function pot()        public view returns (address) {}\r\n    function vow()        public view returns (address) {}\r\n    function end()        public view returns (address) {}\r\n    function reg()        public view returns (address) {}\r\n    function spotter()    public view returns (address) {}\r\n    function flipperMom() public view returns (address) {}\r\n    function flip(bytes32) public view returns (address) {}\r\n    function getChangelogAddress(bytes32) public view returns (address) {}\r\n    function setChangelogAddress(bytes32, address) public {}\r\n    function setChangelogVersion(string memory) public {}\r\n    function authorize(address, address) public {}\r\n    function deauthorize(address, address) public {}\r\n    function canCast(uint40, bool) public pure returns (bool) {}\r\n    function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}\r\n    function setContract(address, bytes32, address) public {}\r\n    function setContract(address, bytes32, bytes32, address) public {}\r\n    function setIlkStabilityFee(bytes32, uint256, bool) public {}\r\n    function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}\r\n    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\r\n    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\r\n    function addReaderToOSMWhitelist(address, address) public {}\r\n    function removeReaderFromOSMWhitelist(address, address) public {}\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssAction.sol\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\n/* import { DssExecLib } from \"./DssExecLib.sol\"; */\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Modifier used to limit execution time when office hours is enabled\r\n    modifier limited {\r\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Returns the next available cast time\r\n    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\r\n        require(eta <= uint40(-1));\r\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\r\n    }\r\n}\r\n\r\n////// lib/dss-exec-lib/src/DssExec.sol\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n    function nextCastTime(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)\"\r\n    string                  public description;\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        return SpellAction(action).nextCastTime(eta);\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        description = _description;\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/ClipAbstract.sol\r\n\r\n/// ClipAbstract.sol -- Clip Interface\r\n\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.5.12; */\r\n\r\ninterface ClipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilk() external view returns (bytes32);\r\n    function vat() external view returns (address);\r\n    function dog() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function spotter() external view returns (address);\r\n    function calc() external view returns (address);\r\n    function buf() external view returns (uint256);\r\n    function tail() external view returns (uint256);\r\n    function cusp() external view returns (uint256);\r\n    function chip() external view returns (uint64);\r\n    function tip() external view returns (uint192);\r\n    function chost() external view returns (uint256);\r\n    function kicks() external view returns (uint256);\r\n    function active(uint256) external view returns (uint256);\r\n    function sales(uint256) external view returns (uint256,uint256,uint256,address,uint96,uint256);\r\n    function stopped() external view returns (uint256);\r\n    function file(bytes32,uint256) external;\r\n    function file(bytes32,address) external;\r\n    function kick(uint256,uint256,address,address) external returns (uint256);\r\n    function redo(uint256,address) external;\r\n    function take(uint256,uint256,uint256,address,bytes calldata) external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (uint256[] memory);\r\n    function getStatus(uint256) external view returns (bool,uint256,uint256,uint256);\r\n    function upchost() external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/ClipperMomAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/Clipper-mom/blob/master/src/ClipperMom.sol\r\ninterface ClipperMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function locked(address) external view returns (uint256);\r\n    function tolerance(address) external view returns (uint256);\r\n    function spotter() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setPriceTolerance(address, uint256) external;\r\n    function setBreaker(address, uint256, uint256) external;\r\n    function tripBreaker(address) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/DogAbstract.sol\r\n\r\n/// DogAbstract.sol -- Dog Interface\r\n\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.5.12; */\r\n\r\ninterface DogAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilks(bytes32) external view returns (address,uint256,uint256,uint256);\r\n    function vow() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function Hole() external view returns (uint256);\r\n    function Dirt() external view returns (uint256);\r\n    function file(bytes32,address) external;\r\n    function file(bytes32,uint256) external;\r\n    function file(bytes32,bytes32,uint256) external;\r\n    function file(bytes32,bytes32,address) external;\r\n    function chop(bytes32) external view returns (uint256);\r\n    function bark(bytes32,address,address) external returns (uint256);\r\n    function digs(bytes32,uint256) external;\r\n    function cage() external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/ESMAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/esm/blob/master/src/ESM.sol\r\ninterface ESMAbstract {\r\n    function gem() external view returns (address);\r\n    function end() external view returns (address);\r\n    function proxy() external view returns (address);\r\n    function min() external view returns (uint256);\r\n    function sum(address) external view returns (address);\r\n    function Sum() external view returns (uint256);\r\n    function revokesGovernanceAccess() external view returns (bool);\r\n    function fire() external;\r\n    function deny(address) external;\r\n    function join(uint256) external;\r\n    function burn() external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/EndAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/end.sol\r\ninterface EndAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function dog() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function pot() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function when() external view returns (uint256);\r\n    function wait() external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function tag(bytes32) external view returns (uint256);\r\n    function gap(bytes32) external view returns (uint256);\r\n    function Art(bytes32) external view returns (uint256);\r\n    function fix(bytes32) external view returns (uint256);\r\n    function bag(address) external view returns (uint256);\r\n    function out(bytes32, address) external view returns (uint256);\r\n    function WAD() external view returns (uint256);\r\n    function RAY() external view returns (uint256);\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function cage() external;\r\n    function cage(bytes32) external;\r\n    function skip(bytes32, uint256) external;\r\n    function snip(bytes32, uint256) external;\r\n    function skim(bytes32, address) external;\r\n    function free(bytes32) external;\r\n    function thaw() external;\r\n    function flow(bytes32) external;\r\n    function pack(uint256) external;\r\n    function cash(bytes32, uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/ilk-registry\r\ninterface IlkRegistryAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function dog() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function ilkData(bytes32) external view returns (\r\n        uint96, address, address, uint8, uint96, address, address, string memory, string memory\r\n    );\r\n    function ilks() external view returns (bytes32[] memory);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function add(address) external;\r\n    function remove(bytes32) external;\r\n    function update(bytes32) external;\r\n    function removeAuth(bytes32) external;\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, string calldata) external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (bytes32[] memory);\r\n    function list(uint256, uint256) external view returns (bytes32[] memory);\r\n    function get(uint256) external view returns (bytes32);\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, uint256, address, address, address, address\r\n    );\r\n    function pos(bytes32) external view returns (uint256);\r\n    function class(bytes32) external view returns (uint256);\r\n    function gem(bytes32) external view returns (address);\r\n    function pip(bytes32) external view returns (address);\r\n    function join(bytes32) external view returns (address);\r\n    function xlip(bytes32) external view returns (address);\r\n    function dec(bytes32) external view returns (uint256);\r\n    function symbol(bytes32) external view returns (string memory);\r\n    function name(bytes32) external view returns (string memory);\r\n    function put(bytes32, address, address, uint256, uint256, address, address, string calldata, string calldata) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/VowAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vow.sol\r\ninterface VowAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function vat() external view returns (address);\r\n    function flapper() external view returns (address);\r\n    function flopper() external view returns (address);\r\n    function sin(uint256) external view returns (uint256);\r\n    function Sin() external view returns (uint256);\r\n    function Ash() external view returns (uint256);\r\n    function wait() external view returns (uint256);\r\n    function dump() external view returns (uint256);\r\n    function sump() external view returns (uint256);\r\n    function bump() external view returns (uint256);\r\n    function hump() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function fess(uint256) external;\r\n    function flog(uint256) external;\r\n    function heal(uint256) external;\r\n    function kiss(uint256) external;\r\n    function flop() external returns (uint256);\r\n    function flap() external returns (uint256);\r\n    function cage() external;\r\n}\r\n\r\n////// src/DssSpell.sol\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity 0.6.12; */\r\n\r\n/* import {Fileable, ChainlogLike} from \"dss-exec-lib/DssExecLib.sol\"; */\r\n/* import \"dss-exec-lib/DssExec.sol\"; */\r\n/* import \"dss-exec-lib/DssAction.sol\"; */\r\n/* import \"dss-interfaces/dss/IlkRegistryAbstract.sol\"; */\r\n/* import \"dss-interfaces/dss/VowAbstract.sol\"; */\r\n/* import \"dss-interfaces/dss/DogAbstract.sol\"; */\r\n/* import \"dss-interfaces/dss/ClipAbstract.sol\"; */\r\n/* import \"dss-interfaces/dss/ClipperMomAbstract.sol\"; */\r\n/* import \"dss-interfaces/dss/EndAbstract.sol\"; */\r\n/* import \"dss-interfaces/dss/ESMAbstract.sol\"; */\r\n\r\ninterface LerpFabLike_1 {\r\n    function newLerp(bytes32, address, bytes32, uint256, uint256, uint256, uint256) external returns (address);\r\n}\r\n\r\ncontract DssSpellAction is DssAction {\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://raw.githubusercontent.com/makerdao/community/57f8d6d1f2a7882879901ca52aaf65c0c4f0a916/governance/votes/Executive%20vote%20-%20April%2023%2C%202021.md -q -O - 2>/dev/null)\"\r\n    string public constant description =\r\n        \"2021-04-23 MakerDAO Executive Spell | Hash: 0x43eaf55ab4d67c46081871b142f37e85e36c72476dd31b0422e79e9520450d63\";\r\n\r\n    // New addresses\r\n    address constant MCD_CLIP_YFI_A      = 0x9daCc11dcD0aa13386D295eAeeBBd38130897E6f;\r\n    address constant MCD_CLIP_CALC_YFI_A = 0x1f206d7916Fd3B1b5B0Ce53d5Cab11FCebc124DA;\r\n    address constant LERP_FAB            = 0x00B416da876fe42dd02813da435Cc030F0d72434;\r\n\r\n    // Units used\r\n    uint256 constant MILLION    = 10**6;\r\n    uint256 constant WAD        = 10**18;\r\n    uint256 constant RAY        = 10**27;\r\n    uint256 constant RAD        = 10**45;\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant ZERO_PCT           = 1000000000000000000000000000;\r\n    uint256 constant ONE_PCT            = 1000000000315522921573372069;\r\n    uint256 constant TWO_PCT            = 1000000000627937192491029810;\r\n    uint256 constant THREE_PCT          = 1000000000937303470807876289;\r\n    uint256 constant THREE_PT_FIVE_PCT  = 1000000001090862085746321732;\r\n    uint256 constant FOUR_PCT           = 1000000001243680656318820312;\r\n    uint256 constant FOUR_PT_FIVE_PCT   = 1000000001395766281313196627;\r\n    uint256 constant FIVE_PCT           = 1000000001547125957863212448;\r\n    uint256 constant TEN_PCT            = 1000000003022265980097387650;\r\n\r\n    function actions() public override {\r\n        // ------------- Get all the needed addresses from Chainlog -------------\r\n\r\n        address MCD_VAT        = DssExecLib.vat();\r\n        address MCD_CAT        = DssExecLib.cat();\r\n        address MCD_DOG        = DssExecLib.getChangelogAddress(\"MCD_DOG\");\r\n        address MCD_VOW        = DssExecLib.vow();\r\n        address MCD_SPOT       = DssExecLib.spotter();\r\n        address MCD_END        = DssExecLib.end();\r\n        address MCD_ESM        = DssExecLib.getChangelogAddress(\"MCD_ESM\");\r\n        address FLIPPER_MOM    = DssExecLib.flipperMom();\r\n        address CLIPPER_MOM    = DssExecLib.getChangelogAddress(\"CLIPPER_MOM\");\r\n        address ILK_REGISTRY   = DssExecLib.getChangelogAddress(\"ILK_REGISTRY\");\r\n        address PIP_YFI        = DssExecLib.getChangelogAddress(\"PIP_YFI\");\r\n        address MCD_FLIP_YFI_A = DssExecLib.getChangelogAddress(\"MCD_FLIP_YFI_A\");\r\n        address CHANGELOG      = DssExecLib.getChangelogAddress(\"CHANGELOG\");\r\n\r\n        // ------------- Increase the System Surplus Buffer And Add Burn Percentage -------------\r\n\r\n        address lerp = LerpFabLike_1(LERP_FAB).newLerp(\"20210423_VOW_HUMP1\", MCD_VOW, \"hump\", 1619773200, 30 * MILLION * RAD, 60 * MILLION * RAD, 99 days);\r\n        VowAbstract(MCD_VOW).rely(lerp);\r\n        DssExecLib.setChangelogAddress(\"LERP_FAB\", LERP_FAB);\r\n\r\n        // ------------- Add YFI-A to Liquidations 2.0 Framework -------------\r\n\r\n        // Check constructor values of Clipper\r\n        require(ClipAbstract(MCD_CLIP_YFI_A).vat() == MCD_VAT, \"DssSpell/clip-wrong-vat\");\r\n        require(ClipAbstract(MCD_CLIP_YFI_A).spotter() == MCD_SPOT, \"DssSpell/clip-wrong-spotter\");\r\n        require(ClipAbstract(MCD_CLIP_YFI_A).dog() == MCD_DOG, \"DssSpell/clip-wrong-dog\");\r\n        require(ClipAbstract(MCD_CLIP_YFI_A).ilk() == \"YFI-A\", \"DssSpell/clip-wrong-ilk\");\r\n\r\n        // Set CLIP for YFI-A in the DOG\r\n        DssExecLib.setContract(MCD_DOG, \"YFI-A\", \"clip\", MCD_CLIP_YFI_A);\r\n\r\n        // Set VOW in the YFI-A CLIP\r\n        DssExecLib.setContract(MCD_CLIP_YFI_A, \"vow\", MCD_VOW);\r\n\r\n        // Set CALC in the YFI-A CLIP\r\n        DssExecLib.setContract(MCD_CLIP_YFI_A, \"calc\", MCD_CLIP_CALC_YFI_A);\r\n\r\n        // Authorize CLIP can access to VAT\r\n        DssExecLib.authorize(MCD_VAT, MCD_CLIP_YFI_A);\r\n\r\n        // Authorize CLIP can access to DOG\r\n        DssExecLib.authorize(MCD_DOG, MCD_CLIP_YFI_A);\r\n\r\n        // Authorize DOG can kick auctions on CLIP\r\n        DssExecLib.authorize(MCD_CLIP_YFI_A, MCD_DOG);\r\n\r\n        // Authorize the new END to access the YFI CLIP\r\n        DssExecLib.authorize(MCD_CLIP_YFI_A, MCD_END);\r\n\r\n        // Authorize CLIPPERMOM can set the stopped flag in CLIP\r\n        DssExecLib.authorize(MCD_CLIP_YFI_A, CLIPPER_MOM);\r\n\r\n        // Authorize new ESM to execute in YFI-A Clipper\r\n        DssExecLib.authorize(MCD_CLIP_YFI_A, MCD_ESM);\r\n\r\n        // Whitelist CLIP in the YFI osm\r\n        DssExecLib.addReaderToOSMWhitelist(PIP_YFI, MCD_CLIP_YFI_A);\r\n\r\n        // Whitelist CLIPPER_MOM in the YFI osm\r\n        DssExecLib.addReaderToOSMWhitelist(PIP_YFI, CLIPPER_MOM);\r\n\r\n        // No more auctions kicked via the CAT:\r\n        DssExecLib.deauthorize(MCD_FLIP_YFI_A, MCD_CAT);\r\n\r\n        // No more circuit breaker for the FLIP in YFI-A:\r\n        DssExecLib.deauthorize(MCD_FLIP_YFI_A, FLIPPER_MOM);\r\n\r\n        Fileable(MCD_DOG).file(\"YFI-A\", \"hole\", 5 * MILLION * RAD);\r\n        Fileable(MCD_DOG).file(\"YFI-A\", \"chop\", 113 * WAD / 100);\r\n        Fileable(MCD_CLIP_YFI_A).file(\"buf\", 130 * RAY / 100);\r\n        Fileable(MCD_CLIP_YFI_A).file(\"tail\", 140 minutes);\r\n        Fileable(MCD_CLIP_YFI_A).file(\"cusp\", 40 * RAY / 100);\r\n        Fileable(MCD_CLIP_YFI_A).file(\"chip\", 1 * WAD / 1000);\r\n        Fileable(MCD_CLIP_YFI_A).file(\"tip\", 0);\r\n        Fileable(MCD_CLIP_CALC_YFI_A).file(\"cut\", 99 * RAY / 100); // 1% cut\r\n        Fileable(MCD_CLIP_CALC_YFI_A).file(\"step\", 90 seconds);\r\n\r\n        //  Tolerance currently set to 50%.\r\n        //   n.b. 600000000000000000000000000 == 40% acceptable drop\r\n        ClipperMomAbstract(CLIPPER_MOM).setPriceTolerance(MCD_CLIP_YFI_A, 50 * RAY / 100);\r\n\r\n        ClipAbstract(MCD_CLIP_YFI_A).upchost();\r\n\r\n        // Replace flip to clip in the ilk registry\r\n        DssExecLib.setContract(ILK_REGISTRY, \"YFI-A\", \"xlip\", MCD_CLIP_YFI_A);\r\n        Fileable(ILK_REGISTRY).file(\"YFI-A\", \"class\", 1);\r\n\r\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_YFI_A\", MCD_CLIP_YFI_A);\r\n        DssExecLib.setChangelogAddress(\"MCD_CLIP_CALC_YFI_A\", MCD_CLIP_CALC_YFI_A);\r\n        ChainlogLike(CHANGELOG).removeAddress(\"MCD_FLIP_YFI_A\");\r\n\r\n        // ------------- Stability fees -------------\r\n        DssExecLib.setIlkStabilityFee(\"LINK-A\", FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"ETH-B\", TEN_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"ZRX-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"LRC-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2DAIETH-A\", THREE_PT_FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2USDCETH-A\", FOUR_PT_FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"AAVE-A\", THREE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"BAT-A\", FIVE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"MANA-A\", THREE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"BAL-A\", TWO_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2DAIUSDC-A\", ONE_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2LINKETH-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2WBTCDAI-A\", ZERO_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2AAVEETH-A\", FOUR_PCT, true);\r\n        DssExecLib.setIlkStabilityFee(\"UNIV2DAIUSDT-A\", THREE_PCT, true);\r\n\r\n        // ------------- Regular debt ceilings -------------\r\n\r\n        DssExecLib.decreaseIlkDebtCeiling(\"USDT-A\", 25 * MILLION / 10, true);\r\n\r\n        // ------------- Auto line max ceiling changes -------------\r\n\r\n        DssExecLib.setIlkAutoLineDebtCeiling(\"YFI-A\", 90 * MILLION);\r\n        // DssExecLib.setIlkAutoLineDebtCeiling(\"AAVE-A\", 50 * MILLION);\r\n        DssExecLib.setIlkAutoLineDebtCeiling(\"BAT-A\", 7 * MILLION);\r\n        // DssExecLib.setIlkAutoLineDebtCeiling(\"RENBTC-A\", 10 * MILLION);\r\n        // DssExecLib.setIlkAutoLineDebtCeiling(\"MANA-A\", 5 * MILLION);\r\n        // DssExecLib.setIlkAutoLineDebtCeiling(\"BAL-A\", 30 * MILLION);\r\n        DssExecLib.setIlkAutoLineDebtCeiling(\"UNIV2DAIETH-A\", 50 * MILLION);\r\n        // DssExecLib.setIlkAutoLineDebtCeiling(\"LRC-A\", 5 * MILLION);\r\n\r\n        // ------------- Auto line gap changes -------------\r\n\r\n        DssExecLib.setIlkAutoLineParameters(\"AAVE-A\", 50 * MILLION, 5 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"RENBTC-A\", 10 * MILLION, 1 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"MANA-A\", 5 * MILLION, 1 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"BAL-A\", 30 * MILLION, 3 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"LRC-A\", 5 * MILLION, 1 * MILLION, 12 hours);\r\n\r\n        // ------------- Auto line new ilks -------------\r\n\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2WBTCETH-A\", 20 * MILLION, 3 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2UNIETH-A\", 20 * MILLION, 3 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2LINKETH-A\", 20 * MILLION, 2 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2AAVEETH-A\", 20 * MILLION, 2 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2ETHUSDT-A\", 10 * MILLION, 2 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2DAIUSDT-A\", 10 * MILLION, 2 * MILLION, 12 hours);\r\n        DssExecLib.setIlkAutoLineParameters(\"UNIV2WBTCDAI-A\", 20 * MILLION, 3 * MILLION, 12 hours);\r\n\r\n        // ------------- Chainlog version -------------\r\n\r\n        DssExecLib.setChangelogVersion(\"1.4.0\");\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    DssSpellAction internal action_ = new DssSpellAction();\r\n    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract Changelog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract PauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssSpell", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "DssExecLib:c061edfc9c38912e0ad4f3922aa84ee11fb03347", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c036c8debb2353dd27be60dcc2c3ee7d1e2af70b744b05b1cdd5ccfe652e1e9b"}]}