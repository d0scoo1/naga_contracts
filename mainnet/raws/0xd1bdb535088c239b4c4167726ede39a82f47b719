{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: Unlicensed\r\npragma solidity >=0.8.7;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface UniswapRouter {\r\n    function WETH() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    }\r\n\r\ncontract FeeChecker {\r\n    address public immutable router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    function feeCheck(address token) external payable virtual returns (uint buyFee, uint sellFee){\r\n        IWETH(UniswapRouter(router).WETH()).deposit{value: msg.value}();\r\n        address[] memory buyPath;\r\n        address weth = UniswapRouter(router).WETH();\r\n        buyPath = new address[](2);\r\n        buyPath[0] = weth;\r\n        buyPath[1] = token;\r\n        uint ethBalance = IERC20(weth).balanceOf(address(this));\r\n        require(ethBalance != 0, \"0 ETH balance\");\r\n        uint shouldBe = UniswapRouter(router).getAmountsOut(ethBalance, buyPath)[1];\r\n        uint balanceBefore = IERC20(token).balanceOf(address(this));\r\n        IERC20(weth).approve(router, ~uint(0));\r\n        UniswapRouter(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(ethBalance, 0, buyPath, address(this), block.timestamp);\r\n        uint tokenBalance = IERC20(token).balanceOf(address(this));\r\n        require(tokenBalance != 0, \"100% buy fee\");\r\n        buyFee = 100 - ((tokenBalance - balanceBefore) * 100 / shouldBe);\r\n        address[] memory sellPath;\r\n        sellPath = new address[](2);\r\n        sellPath[0] = token;\r\n        sellPath[1] = weth;\r\n        shouldBe = UniswapRouter(router).getAmountsOut(tokenBalance, sellPath)[1];\r\n        balanceBefore = IERC20(weth).balanceOf(address(this));\r\n        IERC20(token).approve(router, ~uint(0));\r\n        UniswapRouter(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenBalance, 0, sellPath, address(this), block.timestamp);\r\n        sellFee = 100 - ((IERC20(weth).balanceOf(address(this)) - balanceBefore) * 100 / shouldBe);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"feeCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FeeChecker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://964ced5e8ec29fff68aeb204a4df550102b73d76a203d733e8315dbe443923b2"}]}