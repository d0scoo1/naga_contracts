{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: CC-BY-ND-4.0\r\n\r\npragma solidity ^0.8.14;\r\n\r\ncontract protected {\r\n    mapping (address => bool) is_auth;\r\n    function authorized(address addy) public view returns(bool) {\r\n        return is_auth[addy];\r\n    }\r\n    function set_authorized(address addy, bool booly) public onlyAuth {\r\n        is_auth[addy] = booly;\r\n    }\r\n    modifier onlyAuth() {\r\n        require( is_auth[msg.sender] || msg.sender==owner, \"not owner\");\r\n        _;\r\n    }\r\n    address owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender==owner, \"not owner\");\r\n        _;\r\n    }\r\n    bool locked;\r\n    modifier safe() {\r\n        require(!locked, \"reentrant\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n    function change_owner(address new_owner) public onlyAuth {\r\n        owner = new_owner;\r\n    }\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}\r\n\r\ncontract MAGA_USERS is protected {\r\n\r\n    // Database prototype\r\n    struct USER {\r\n        string username;\r\n        bool is_associated;\r\n        string password;\r\n        uint lastlogin;\r\n    }\r\n\r\n    // On chain logins\r\n    bool password_on_chain = false;\r\n\r\n    // Database object\r\n    mapping(address => USER) private user;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        is_auth[msg.sender] = true;\r\n    }\r\n\r\n    function set_auth(address addy, bool booly) public onlyAuth {\r\n        is_auth[addy] = booly;\r\n    }\r\n\r\n    function harakiri() public onlyAuth {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n\r\n    /****************************************************************\r\n                                 SETTERS\r\n    ****************************************************************/\r\n\r\n    // Binding an username to an address, if not taken and authenticated\r\n    function bind_username(address addy, string memory username)\r\n                            public safe returns(bool success) {\r\n        require(!password_on_chain, \"Authentication on chain needed\");\r\n        require(msg.sender == addy, \"Login failed\");\r\n        require(!(user[addy].is_associated), \"Address already associated\");\r\n        user[addy].username = username;\r\n        user[addy].is_associated = true;\r\n        return true;\r\n    }\r\n\r\n    function bind_username_with_onchain_authentication(address addy, string memory username, string memory password)\r\n                                                       public safe returns(bool success) {\r\n        require(password_on_chain, \"Authentication off chain needed\");\r\n        string memory user_password = user[msg.sender].password;\r\n        require(keccak256(abi.encode(password)) == keccak256(abi.encode(user_password)), \"Login failed on chain\");\r\n        require(msg.sender == addy, \"Login failed\");\r\n        require(!(user[addy].is_associated), \"Address already associated\");\r\n        user[addy].username = username;\r\n        user[addy].is_associated = true;\r\n        return true;                                      \r\n    }\r\n\r\n    function set_password(string memory password) public safe returns(bool success) {\r\n        require(password_on_chain, \"Password is not meant to be on chain\");\r\n        user[msg.sender].password = password;\r\n        return true;\r\n    }\r\n\r\n    function set_on_chain_authentication(bool booly) public onlyAuth {\r\n        password_on_chain = booly;\r\n    }\r\n\r\n    /****************************************************************\r\n                                GETTERS\r\n    ****************************************************************/\r\n\r\n    function get_association(address addy) \r\n                             public view returns(string memory username_){\r\n        require(!password_on_chain, \"Authentication on chain needed\");\r\n        // First check association\r\n        if(user[addy].is_associated) {\r\n            // Check signature value\r\n            require(msg.sender==addy, \"Not authorized on getting association for address\");\r\n            // If is all ok, return the value\r\n            return(user[addy].username);\r\n        } else {\r\n            revert(\"No association\");\r\n        }\r\n    }\r\n\r\n    function get_association_with_onchain_authentication(address addy, string memory password) \r\n                                                            public view returns(string memory username_) {\r\n        require(password_on_chain, \"Authentication off chain needed\");\r\n        string memory user_password = user[msg.sender].password;\r\n        require(keccak256(abi.encode(password)) == keccak256(abi.encode(user_password)), \"Login failed on chain\");\r\n        // First check association\r\n        if(user[addy].is_associated) {\r\n            // Check signature value\r\n            require(msg.sender==addy, \"Not authorized on getting association for address\");\r\n            // If is all ok, return the value\r\n            return(user[addy].username);\r\n        } else {\r\n            revert(\"No association\");\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"bind_username\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"bind_username_with_onchain_authentication\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"change_owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"get_association\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"get_association_with_onchain_authentication\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"username_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harakiri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"set_auth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"set_authorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"set_on_chain_authentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"set_password\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MAGA_USERS", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://427ec6b768d5c89b4970eb52281e8e44bcb1eababc8f04b010cc3a759f411a8f"}]}