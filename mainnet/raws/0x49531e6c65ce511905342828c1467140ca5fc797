{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-11-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-03-30\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IComp {\r\n    function delegate(address delegatee) external;\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address dst, uint rawAmount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\r\n}\r\n\r\ninterface IGovernorBravo {\r\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\r\n    function castVote(uint proposalId, uint8 support) external;\r\n}\r\n\r\ncontract CrowdProposal {\r\n    /// @notice The crowd proposal author\r\n    address payable public immutable author;\r\n\r\n    /// @notice Governance proposal data\r\n    address[] public targets;\r\n    uint[] public values;\r\n    string[] public signatures;\r\n    bytes[] public calldatas;\r\n    string public description;\r\n\r\n    /// @notice COMP token contract address\r\n    address public immutable comp;\r\n    /// @notice Compound protocol `GovernorBravo` contract address\r\n    address public immutable governor;\r\n\r\n    /// @notice Governance proposal id\r\n    uint public govProposalId;\r\n    /// @notice Terminate flag\r\n    bool public terminated;\r\n\r\n    /// @notice An event emitted when the governance proposal is created\r\n    event CrowdProposalProposed(address indexed proposal, address indexed author, uint proposalId);\r\n    /// @notice An event emitted when the crowd proposal is terminated\r\n    event CrowdProposalTerminated(address indexed proposal, address indexed author);\r\n     /// @notice An event emitted when delegated votes are transfered to the governance proposal\r\n    event CrowdProposalVoted(address indexed proposal, uint proposalId);\r\n\r\n    /**\r\n    * @notice Construct crowd proposal\r\n    * @param author_ The crowd proposal author\r\n    * @param targets_ The ordered list of target addresses for calls to be made\r\n    * @param values_ The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures_ The ordered list of function signatures to be called\r\n    * @param calldatas_ The ordered list of calldata to be passed to each call\r\n    * @param description_ The block at which voting begins: holders must delegate their votes prior to this block\r\n    * @param comp_ `COMP` token contract address\r\n    * @param governor_ Compound protocol `GovernorBravo` contract address\r\n    */\r\n    constructor(address payable author_,\r\n                address[] memory targets_,\r\n                uint[] memory values_,\r\n                string[] memory signatures_,\r\n                bytes[] memory calldatas_,\r\n                string memory description_,\r\n                address comp_,\r\n                address governor_) public {\r\n        author = author_;\r\n\r\n        // Save proposal data\r\n        targets = targets_;\r\n        values = values_;\r\n        signatures = signatures_;\r\n        calldatas = calldatas_;\r\n        description = description_;\r\n\r\n        // Save Compound contracts data\r\n        comp = comp_;\r\n        governor = governor_;\r\n\r\n        terminated = false;\r\n\r\n        // Delegate votes to the crowd proposal\r\n        IComp(comp_).delegate(address(this));\r\n    }\r\n\r\n    /// @notice Create governance proposal\r\n    function propose() external returns (uint) {\r\n        require(govProposalId == 0, 'CrowdProposal::propose: gov proposal already exists');\r\n        require(!terminated, 'CrowdProposal::propose: proposal has been terminated');\r\n\r\n        // Create governance proposal and save proposal id\r\n        govProposalId = IGovernorBravo(governor).propose(targets, values, signatures, calldatas, description);\r\n        emit CrowdProposalProposed(address(this), author, govProposalId);\r\n\r\n        return govProposalId;\r\n    }\r\n\r\n    /// @notice Terminate the crowd proposal, send back staked COMP tokens\r\n    function terminate() external {\r\n        require(msg.sender == author, 'CrowdProposal::terminate: only author can terminate');\r\n        require(!terminated, 'CrowdProposal::terminate: proposal has been already terminated');\r\n\r\n        terminated = true;\r\n\r\n        // Transfer staked COMP tokens from the crowd proposal contract back to the author\r\n        IComp(comp).transfer(author, IComp(comp).balanceOf(address(this)));\r\n\r\n        emit CrowdProposalTerminated(address(this), author);\r\n    }\r\n\r\n    /// @notice Vote for the governance proposal with all delegated votes\r\n    function vote() external {\r\n        require(govProposalId > 0, 'CrowdProposal::vote: gov proposal has not been created yet');\r\n        // Support the proposal, vote value = 1\r\n        IGovernorBravo(governor).castVote(govProposalId, 1);\r\n\r\n        emit CrowdProposalVoted(address(this), govProposalId);\r\n    }\r\n}\r\n\r\ncontract CrowdProposalFactory {\r\n    /// @notice `COMP` token contract address\r\n    address public immutable comp;\r\n    /// @notice Compound protocol `GovernorBravo` contract address\r\n    address public immutable governor;\r\n    /// @notice Minimum Comp tokens required to create a crowd proposal\r\n    uint public immutable compStakeAmount;\r\n\r\n    /// @notice An event emitted when a crowd proposal is created\r\n    event CrowdProposalCreated(address indexed proposal, address indexed author, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, string description);\r\n\r\n     /**\r\n     * @notice Construct a proposal factory for crowd proposals\r\n     * @param comp_ `COMP` token contract address\r\n     * @param governor_ Compound protocol `GovernorBravo` contract address\r\n     * @param compStakeAmount_ The minimum amount of Comp tokes required for creation of a crowd proposal\r\n     */\r\n    constructor(address comp_,\r\n                address governor_,\r\n                uint compStakeAmount_) public {\r\n        comp = comp_;\r\n        governor = governor_;\r\n        compStakeAmount = compStakeAmount_;\r\n    }\r\n\r\n    /**\r\n    * @notice Create a new crowd proposal\r\n    * @notice Call `Comp.approve(factory_address, compStakeAmount)` before calling this method\r\n    * @param targets The ordered list of target addresses for calls to be made\r\n    * @param values The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures The ordered list of function signatures to be called\r\n    * @param calldatas The ordered list of calldata to be passed to each call\r\n    * @param description The block at which voting begins: holders must delegate their votes prior to this block\r\n    */\r\n    function createCrowdProposal(address[] memory targets,\r\n                                 uint[] memory values,\r\n                                 string[] memory signatures,\r\n                                 bytes[] memory calldatas,\r\n                                 string memory description) external {\r\n        CrowdProposal proposal = new CrowdProposal(msg.sender, targets, values, signatures, calldatas, description, comp, governor);\r\n        emit CrowdProposalCreated(address(proposal), msg.sender, targets, values, signatures, calldatas, description);\r\n\r\n        // Stake COMP and force proposal to delegate votes to itself\r\n        IComp(comp).transferFrom(msg.sender, address(proposal), compStakeAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"author_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values_\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"comp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"CrowdProposalTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calldatas\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrowdProposal", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008c64c3d24c4df13b451d5bc9292b75e5dba2e02a000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000c0da02939e1441f497fd74f78ce7decb17b665290000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c00e94cb662c3520282e6f5717214004a7f26888000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000197472616e7366657228616464726573732c75696e743235362900000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000a37de9731806a75d2a4e178762da5cc743c73709000000000000000000000000000000000000000000000a66956d0c4775f000000000000000000000000000000000000000000000000000000000000000000bb5232050524f504f53414c3a2053686f756c6420436f6d706f756e6420676f7665726e616e636520636f6e747269627574652066756e64696e6720746f20746865204e6f6d696320466f756e646174696f6e3f0a2323202a2a53756d6d6172792a2a0a2d204e6f6d6963204c6162732c20746865207465616d20626568696e6420486172646861742c20686173206265636f6d6520746865204e6f6d696320466f756e646174696f6e2c2061206e6f6e2d70726f666974206f7267616e697a6174696f6e2064656469636174656420746f20457468657265756d2e204f7572206d697373696f6e20697320746f20656d706f77657220646576656c6f7065727320746f20646563656e7472616c697a652074686520776f726c642e0a2d20546865204e6f6d696320466f756e646174696f6ee280997320776f726b2077696c6c20626520666f6375736564206f6e20457468657265756de280997320646576656c6f70657220706c6174666f726d207769746820746865206f626a656374697665206f6620616368696576696e67206120776f726c642d636c61737320646576656c6f70657220657870657269656e63652c20616e642067656e6572616c6c7920696d70726f76696e6720457468657265756de2809973207075626c696320676f6f647320737570706f727420737472756374757265732e0a2d205b486172646861745d2868747470733a2f2f686172646861742e6f72672f292069732074686520646520666163746f207374616e6461726420646576656c6f70657220746f6f6c207573656420746f206275696c6420457468657265756d20736f6674776172652c2077697468206d6f7265207468616e20323330303020476974687562207265706f7369746f72696573207573696e6720697420616e642074656e73206f662074686f7573616e6473206f66206163746976652075736572732e2050726f6d696e656e74207465616d732072656c79696e67206f6e20697420696e636c75646520454e532c20556e69737761702c204f7074696d69736d2c204f70656e5a657070656c696e2c20416176652c2042616c616e6365722c20436861696e6c696e6b2c2053796e7468657469782c20616e64206d616e79206d6f7265206c656164696e67207465616d732e0a2d20546865206e657720666f756e646174696f6e2077696c6c20657870616e64207468652048617264686174207375697465206f6620746f6f6c7320616e642c206d6f737420696d706f7274616e746c792c206275696c64206c6f6e672d7465726d20696e66726173747275637475726520746f20636174616c797a65206f7267616e69632067726f77746820696e2074686520457468657265756d20746f6f6c696e672065636f73797374656d2c2064656372656173696e6720457468657265756de280997320646570656e64656e6365206f6e20616e79206f6e65206f7267616e697a6174696f6e20746f206275696c6420616e64206d61696e7461696e20636f726520646576656c6f706d656e7420706c6174666f726d20636f6d706f6e656e74732e0a2d205365656b696e67202433306d20696e20746f74616c2066756e64696e672066726f6d207468652065636f73797374656d2e20446f6e6174696f6e73206f66202431354d20616c726561647920736563757265642062792074686520457468657265756d20466f756e646174696f6e2c20566974616c696b204275746572696e2c20436f696e626173652c206131367a2c205468652047726170682c20506f6c79676f6e2c20436861696e6c696e6b2c206131367a2c20616e64204b61737a656b2056656e74757265732e0a2d202a2a5765e2809972652070726f706f73696e6720746f20436f6d706f756e6420476f7665726e616e636520746f206d616b65206120636f6e747269627574696f6e206f662024356d20746f20746865204e6f6d696320466f756e646174696f6e20746f20737570706f727420697473206d697373696f6e2e2a2a0a0a2323202a2a46756e64696e672a2a0a546865204e6f6d696320466f756e646174696f6e2061696d7320746f2062656e656669742074686520656e7469726520457468657265756d2065636f73797374656d2c20776869636820697320776879207765e2809972652066756e6472616973696e67206163726f7373206d756c7469706c65206f7267616e697a6174696f6e7320616e6420696e646976696475616c732077697468696e2069742e0a54686520457468657265756d20466f756e646174696f6e206973206c656164696e67207468697320726f756e64206f6620636f6e747269627574696f6e7320776974682024384d2c20616c6f6e677369646520636f6e747269627574696f6e732066726f6d20566974616c696b204275746572696e2c20436f696e626173652c20436f6e73656e7379732c205468652047726170682c20506f6c79676f6e2c20436861696e6c696e6b2c20476e6f7369732c206131367a2c20615f6361706974616c2c20616e64204b61737a656b2056656e74757265732e20546865736520646f6e6f7273206d616b65207570202431354d2c20616e64207765e2809972652061696d696e6720746f207261697365202431354d206d6f72652e0a0a2323202a2a57687920436f6d706f756e643f2a2a0a47656e6572616c6c792c207765207468696e6b207468617420616c6c6f636174696e67206361706974616c20746f20746865204e6f6d696320466f756e646174696f6e206d616b6573207374726174656769632073656e736520666f7220616e792070726f746f636f6c207472656173757279207468617420697320616c69676e6564206c6f6e67207465726d2077697468207468652067726f777468206f6620457468657265756d2c20616e64207765e28099766520617070726f616368656420616e642077696c6c20636f6e74696e756520617070726f616368696e67207365766572616c2070726f746f636f6c732e0a5468652070726f6a65637473207468617420746865204e6f6d696320466f756e646174696f6e2077696c6c2064656c697665722077696c6c206372656174652076616c756520666f722074686520656e746972652065636f73797374656d2c20696e636c7564696e6720436f6d706f756e642e205765e280996c6c2070726f7669646520736572766963657320746f2074686520457468657265756d20636f6d6d756e69747920746861742077696c6c3a0a312e20436f6e74696e756520746865206d61696e74656e616e6365206f6620637269746963616c20696e667261737472756374757265207573656420746f206275696c64206d6f73742070726f746f636f6c73202848617264686174292e0a322e20496e63726561736520646576656c6f7065722070726f64756374697669747920666f72206576657279207465616d20696e207468652065636f73797374656d2e0a332e20416363656c657261746520646576656c6f706572206f6e626f617264696e6720746f20457468657265756d2c20696e6372656173696e67207468652073697a65206f662074686520657870657269656e63656420656e67696e656572696e6720686972696e6720706f6f6c20616e64206d616b696e672074696d652d746f2d70726f6475637469766974792073686f7274657220666f72206e65772068697265732e0a342e20416363656c6572617465207468652070616365206f6620696e6e6f766174696f6e20616e6420746865206e756d626572206f662070726f6475637473206265696e67206275696c742e0a352e20496e637265617365206d61726b657420766f6c756d652064726976656e206279206e657720757365727320616e64206e65772070726f64756374732e0a57652062656c6965766520746869732067726f777320746865206d61726b657420666f722065766572796f6e652c20696e636c7564696e6720436f6d706f756e642c20616e64207765e2809964206c6f766520746f20686176652074686520436f6d706f756e642044414f20636f6e747269627574652024356d20696e2066756e64696e6720746f207468697320636f6d6d756e697479206566666f72742e0000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d93e6fc21ed5511ad90cbb71917ffbbeef987f1f5ef12dfe5a3f9c2dcf9c8656"}]}