{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/exchange/ExchangeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ncontract ExchangeRegistry {\\r\\n    address owner; // Address of exchange Registry owner.\\r\\n    mapping(address => mapping(address => address)) swapContracts; // Mapping to store the exchange contract address for From Token to To Token, From Token -> To Token -> Exchange contract.\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only owner allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to get exchange contract address for From Token to To Token.\\r\\n    /// @param _from Address of From Token.\\r\\n    /// @param _to Address of To Token.\\r\\n    function getSwapContract(address _from, address _to)\\r\\n        public\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        require(\\r\\n            swapContracts[_from][_to] != address(0),\\r\\n            \\\"No swap contract available!\\\"\\r\\n        );\\r\\n        return swapContracts[_from][_to];\\r\\n    }\\r\\n\\r\\n    /// @dev Function to set address of Owner.\\r\\n    /// @param _owner Address of new owner.\\r\\n    function setOwner(address _owner) external onlyOwner {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to add exchange contract address for From Token to To Token.\\r\\n    /// @param _from Address of From Token.\\r\\n    /// @param _to Address of To Token.\\r\\n    /// @param _contract Address of exchange contract.\\r\\n    function addOrChangeSwapContract(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        address _contract\\r\\n    ) external onlyOwner {\\r\\n        require(_contract != address(0), \\\"contract address should not be zero\\\");\\r\\n        swapContracts[_from][_to] = _contract;\\r\\n    }\\r\\n\\r\\n    /// @dev Function to remove exchange contract address for From Token to To Token.\\r\\n    /// @param _from Address of From Token.\\r\\n    /// @param _to Address of To Token.\\r\\n    function removeSwapContract(address _from, address _to) external onlyOwner {\\r\\n        delete swapContracts[_from][_to];\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"petersburg\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addOrChangeSwapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getSwapContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"removeSwapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExchangeRegistry", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "petersburg", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}