{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/facets/DiamondClone/BaseDiamondCloneFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {DiamondCloneCutFacet} from \\\"./DiamondCloneCutFacet.sol\\\";\\nimport {DiamondCloneLoupeFacet} from \\\"./DiamondCloneLoupeFacet.sol\\\";\\nimport {BasicAccessControlFacet} from \\\"../AccessControl/BasicAccessControlFacet.sol\\\";\\nimport {PausableFacet} from \\\"../Pausable/PausableFacet.sol\\\";\\n\\ncontract BaseDiamondCloneFacet is\\n    DiamondCloneCutFacet,\\n    DiamondCloneLoupeFacet,\\n    BasicAccessControlFacet,\\n    PausableFacet\\n{}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondClone/DiamondCloneCutFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {DiamondCloneLib, IDiamondCut} from \\\"./DiamondCloneLib.sol\\\";\\nimport {AccessControlModifiers} from \\\"../AccessControl/AccessControlModifiers.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\ncontract DiamondCloneCutFacet is IDiamondCut, AccessControlModifiers {\\n    // NOTE: ownership must be set already so this is impossible\\n    // to call on the implementation instance\\n    //\\n    // NOTE: can only be called once\\n    // (enforced in the library via saw Address)\\n    function initializeDiamondClone(\\n        address diamondSawAddress,\\n        address[] calldata facetAddresses\\n    ) external onlyOwner {\\n        DiamondCloneLib.initializeDiamondClone(\\n            diamondSawAddress,\\n            facetAddresses\\n        );\\n    }\\n\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override onlyOwner {\\n        require(\\n            !DiamondCloneLib.isImmutable(),\\n            \\\"Cannot cut the diamond while immutable\\\"\\n        );\\n        DiamondCloneLib.cutWithDiamondSaw(_diamondCut, _init, _calldata);\\n    }\\n\\n    function setGasCacheForSelector(bytes4 selector) external onlyOperator {\\n        DiamondCloneLib.setGasCacheForSelector(selector);\\n    }\\n\\n    function gasCacheForSelector(bytes4 selector)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return DiamondCloneLib.diamondCloneStorage().selectorGasCache[selector];\\n    }\\n\\n    function setImmutableUntilBlock(uint256 blockNumber) external onlyOwner {\\n        require(\\n            !DiamondCloneLib.isImmutable(),\\n            \\\"Cannot set immutable block while immutable\\\"\\n        );\\n        DiamondCloneLib.setImmutableUntilBlock(blockNumber);\\n    }\\n\\n    function immutableUntilBlock() external view returns (uint256) {\\n        return DiamondCloneLib.immutableUntilBlock();\\n    }\\n\\n    // to prevent this function from being called\\n    // use the immutability window\\n    function upgradeDiamondSaw(\\n        address _upgradeSaw,\\n        address[] calldata _oldFacetAddresses,\\n        address[] calldata _newFacetAddresses,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external onlyOwner {\\n        DiamondCloneLib.upgradeDiamondSaw(\\n            _upgradeSaw,\\n            _oldFacetAddresses,\\n            _newFacetAddresses,\\n            _init,\\n            _calldata\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondClone/DiamondCloneLoupeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {DiamondCloneLib} from \\\"./DiamondCloneLib.sol\\\";\\nimport {IDiamondLoupe} from \\\"./IDiamondLoupe.sol\\\";\\nimport {IERC165} from \\\"../../interfaces/IERC165.sol\\\";\\nimport {DiamondSaw} from \\\"../../DiamondSaw.sol\\\";\\n\\n// The functions in DiamondLoupeFacet MUST be added to a diamond.\\n// The EIP-2535 Diamond standard requires these functions.\\n\\ncontract DiamondCloneLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    //\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    //  Finds the subset of all facets used in this facet clone\\n    function facets() external view override returns (Facet[] memory facets_) {\\n        facets_ = DiamondCloneLib.facets();\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view override returns (bytes4[] memory facetFunctionSelectors_) {\\n        DiamondCloneLib.DiamondCloneStorage storage ds = DiamondCloneLib.diamondCloneStorage();\\n        facetFunctionSelectors_ = DiamondSaw(ds.diamondSawAddress).functionSelectorsForFacetAddress(_facet);\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view override returns (address[] memory facetAddresses_) {\\n        facetAddresses_ = DiamondCloneLib.facetAddresses();\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view override returns (address facetAddress_) {\\n        DiamondCloneLib.DiamondCloneStorage storage ds = DiamondCloneLib.diamondCloneStorage();\\n        facetAddress_ = DiamondSaw(ds.diamondSawAddress).facetAddressForSelector(_functionSelector);\\n    }\\n\\n    // This implements ERC-165.\\n    // DiamondSaw maintains a map of which facet addresses implement which interfaces\\n    // All the clone has to do is query the facet address and check if the clone implements it\\n    function supportsInterface(bytes4 _interfaceId) external view override returns (bool) {\\n        DiamondCloneLib.DiamondCloneStorage storage ds = DiamondCloneLib.diamondCloneStorage();\\n        address facetAddressForInterface = DiamondSaw(ds.diamondSawAddress).facetAddressForInterface(_interfaceId);\\n\\n        return ds.facetAddresses[facetAddressForInterface];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/AccessControl/BasicAccessControlFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./AccessControlLib.sol\\\";\\nimport {PausableLib} from \\\"../Pausable/PausableLib.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract BasicAccessControlFacet is Context {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return AccessControlLib.accessControlStorage()._owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual {\\n        PausableLib.enforceUnpaused();\\n        AccessControlLib._enforceOwner();\\n        AccessControlLib._transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual {\\n        PausableLib.enforceUnpaused();\\n        AccessControlLib._enforceOwner();\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        AccessControlLib._transferOwnership(newOwner);\\n    }\\n\\n    function grantOperator(address _operator) public virtual {\\n        PausableLib.enforceUnpaused();\\n        AccessControlLib._enforceOwner();\\n\\n        AccessControlLib.grantRole(AccessControlLib.OPERATOR_ROLE, _operator);\\n    }\\n\\n    function revokeOperator(address _operator) public virtual {\\n        PausableLib.enforceUnpaused();\\n        AccessControlLib._enforceOwner();\\n        AccessControlLib.revokeRole(AccessControlLib.OPERATOR_ROLE, _operator);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/Pausable/PausableFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlModifiers} from \\\"../AccessControl/AccessControlModifiers.sol\\\";\\nimport {PausableLib} from \\\"./PausableLib.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableFacet is AccessControlModifiers {\\n    function pause() public onlyOwner {\\n        PausableLib._pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        PausableLib._unpause();\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return PausableLib._paused();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondClone/DiamondCloneLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {DiamondSaw} from \\\"../../DiamondSaw.sol\\\";\\nimport {IDiamondLoupe} from \\\"./IDiamondLoupe.sol\\\";\\nimport {IDiamondCut} from \\\"./IDiamondCut.sol\\\";\\n\\nlibrary DiamondCloneLib {\\n    bytes32 constant DIAMOND_CLONE_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.clone.storage\\\");\\n\\n    bytes32 constant ERC721A_STORAGE_POSITION =\\n        keccak256(\\\"erc721a.facet.storage\\\");\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    struct DiamondCloneStorage {\\n        // address of the diamond saw contract\\n        address diamondSawAddress;\\n        // mapping to all the facets this diamond implements.\\n        mapping(address => bool) facetAddresses;\\n        // number of facets supported\\n        uint256 numFacets;\\n        // optional gas cache for highly trafficked write selectors\\n        mapping(bytes4 => address) selectorGasCache;\\n        // immutability window\\n        uint256 immutableUntilBlock;\\n    }\\n\\n    // minimal copy  of ERC721AStorage for initialization\\n    struct ERC721AStorage {\\n        // The tokenId of the next token to be minted.\\n        uint256 _currentIndex;\\n    }\\n\\n    function diamondCloneStorage()\\n        internal\\n        pure\\n        returns (DiamondCloneStorage storage s)\\n    {\\n        bytes32 position = DIAMOND_CLONE_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    // calls externally to the saw to find the appropriate facet to delegate to\\n    function _getFacetAddressForCall() internal view returns (address addr) {\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        addr = s.selectorGasCache[msg.sig];\\n        if (addr != address(0)) {\\n            return addr;\\n        }\\n\\n        (bool success, bytes memory res) = s.diamondSawAddress.staticcall(\\n            abi.encodeWithSelector(0x14bc7560, msg.sig)\\n        );\\n        require(success, \\\"Failed to fetch facet address for call\\\");\\n\\n        assembly {\\n            addr := mload(add(res, 32))\\n        }\\n\\n        return s.facetAddresses[addr] ? addr : address(0);\\n    }\\n\\n    function initNFT() internal {\\n        ERC721AStorage storage es;\\n        bytes32 position = ERC721A_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n\\n        es._currentIndex = 1;\\n    }\\n\\n    function initializeDiamondClone(\\n        address diamondSawAddress,\\n        address[] calldata _facetAddresses\\n    ) internal {\\n        DiamondCloneLib.DiamondCloneStorage storage s = DiamondCloneLib\\n            .diamondCloneStorage();\\n\\n        require(diamondSawAddress != address(0), \\\"Must set saw addy\\\");\\n        require(s.diamondSawAddress == address(0), \\\"Already inited\\\");\\n\\n        initNFT();\\n\\n        s.diamondSawAddress = diamondSawAddress;\\n        IDiamondCut.FacetCut[] memory cuts = new IDiamondCut.FacetCut[](\\n            _facetAddresses.length\\n        );\\n\\n        // emit the diamond cut event\\n        for (uint256 i; i < _facetAddresses.length; i++) {\\n            address facetAddress = _facetAddresses[i];\\n            bytes4[] memory selectors = DiamondSaw(diamondSawAddress)\\n                .functionSelectorsForFacetAddress(facetAddress);\\n            require(selectors.length > 0, \\\"Facet is not supported by the saw\\\");\\n            cuts[i].facetAddress = _facetAddresses[i];\\n            cuts[i].functionSelectors = selectors;\\n            s.facetAddresses[facetAddress] = true;\\n        }\\n\\n        emit DiamondCut(cuts, address(0), \\\"\\\");\\n\\n        s.numFacets = _facetAddresses.length;\\n    }\\n\\n    function _purgeGasCache(bytes4[] memory selectors) internal {\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        for (uint256 i; i < selectors.length; i++) {\\n            if (s.selectorGasCache[selectors[i]] != address(0)) {\\n                delete s.selectorGasCache[selectors[i]];\\n            }\\n        }\\n    }\\n\\n    function cutWithDiamondSaw(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) internal {\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        uint256 newNumFacets = s.numFacets;\\n\\n        // emit the diamond cut event\\n        for (uint256 i; i < _diamondCut.length; i++) {\\n            IDiamondCut.FacetCut memory cut = _diamondCut[i];\\n            bytes4[] memory selectors = DiamondSaw(s.diamondSawAddress)\\n                .functionSelectorsForFacetAddress(cut.facetAddress);\\n\\n            require(selectors.length > 0, \\\"Facet is not supported by the saw\\\");\\n            require(\\n                selectors.length == cut.functionSelectors.length,\\n                \\\"You can only modify all selectors at once with diamond saw\\\"\\n            );\\n\\n            // NOTE we override the passed selectors after validating the length matches\\n            // With diamond saw we can only add / remove all selectors for a given facet\\n            cut.functionSelectors = selectors;\\n\\n            // if the address is already in the facet map\\n            // remove it and remove all the selectors\\n            // otherwise add the selectors\\n            if (s.facetAddresses[cut.facetAddress]) {\\n                require(\\n                    cut.action == IDiamondCut.FacetCutAction.Remove,\\n                    \\\"Can only remove existing facet selectors\\\"\\n                );\\n                delete s.facetAddresses[cut.facetAddress];\\n                _purgeGasCache(selectors);\\n                newNumFacets -= 1;\\n            } else {\\n                require(\\n                    cut.action == IDiamondCut.FacetCutAction.Add,\\n                    \\\"Can only add non-existing facet selectors\\\"\\n                );\\n                s.facetAddresses[cut.facetAddress] = true;\\n                newNumFacets += 1;\\n            }\\n        }\\n\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n\\n        // call the init function\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"DiamondCloneLib: _init function reverted\\\");\\n            }\\n        }\\n\\n        s.numFacets = newNumFacets;\\n    }\\n\\n    function upgradeDiamondSaw(\\n        address _upgradeSawAddress,\\n        address[] calldata _oldFacetAddresses,\\n        address[] calldata _newFacetAddresses,\\n        address _init,\\n        bytes calldata _calldata\\n    ) internal {\\n        require(\\n            !isImmutable(),\\n            \\\"Cannot upgrade saw during immutability window\\\"\\n        );\\n        require(\\n            _upgradeSawAddress != address(0),\\n            \\\"Cannot set saw to zero address\\\"\\n        );\\n\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        require(\\n            _oldFacetAddresses.length == s.numFacets,\\n            \\\"Must remove all facets to upgrade saw\\\"\\n        );\\n\\n        DiamondSaw oldSawInstance = DiamondSaw(s.diamondSawAddress);\\n\\n        require(\\n            oldSawInstance.isUpgradeSawSupported(_upgradeSawAddress),\\n            \\\"Upgrade saw is not supported\\\"\\n        );\\n        DiamondSaw newSawInstance = DiamondSaw(_upgradeSawAddress);\\n\\n        IDiamondCut.FacetCut[] memory cuts = new IDiamondCut.FacetCut[](\\n            _oldFacetAddresses.length + _newFacetAddresses.length\\n        );\\n\\n        for (\\n            uint256 i;\\n            i < _oldFacetAddresses.length + _newFacetAddresses.length;\\n            i++\\n        ) {\\n            if (i < _oldFacetAddresses.length) {\\n                address facetAddress = _oldFacetAddresses[i];\\n                require(\\n                    s.facetAddresses[facetAddress],\\n                    \\\"Cannot remove facet that is not supported\\\"\\n                );\\n                bytes4[] memory selectors = oldSawInstance\\n                    .functionSelectorsForFacetAddress(facetAddress);\\n                require(\\n                    selectors.length > 0,\\n                    \\\"Facet is not supported by the saw\\\"\\n                );\\n\\n                cuts[i].action = IDiamondCut.FacetCutAction.Remove;\\n                cuts[i].facetAddress = facetAddress;\\n                cuts[i].functionSelectors = selectors;\\n\\n                _purgeGasCache(selectors);\\n                delete s.facetAddresses[facetAddress];\\n            } else {\\n                address facetAddress = _newFacetAddresses[\\n                    i - _oldFacetAddresses.length\\n                ];\\n                bytes4[] memory selectors = newSawInstance\\n                    .functionSelectorsForFacetAddress(facetAddress);\\n                require(\\n                    selectors.length > 0,\\n                    \\\"Facet is not supported by the new saw\\\"\\n                );\\n\\n                cuts[i].action = IDiamondCut.FacetCutAction.Add;\\n                cuts[i].facetAddress = facetAddress;\\n                cuts[i].functionSelectors = selectors;\\n\\n                s.facetAddresses[facetAddress] = true;\\n            }\\n        }\\n\\n        emit DiamondCut(cuts, _init, _calldata);\\n\\n        // actually update the diamond saw address\\n        s.numFacets = _newFacetAddresses.length;\\n        s.diamondSawAddress = _upgradeSawAddress;\\n\\n        // call the init function\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up the error\\n                revert(string(error));\\n            } else {\\n                revert(\\\"DiamondCloneLib: _init function reverted\\\");\\n            }\\n        }\\n    }\\n\\n    function setGasCacheForSelector(bytes4 selector) internal {\\n        DiamondCloneStorage storage s = diamondCloneStorage();\\n\\n        address facetAddress = DiamondSaw(s.diamondSawAddress)\\n            .facetAddressForSelector(selector);\\n        require(facetAddress != address(0), \\\"Facet not supported\\\");\\n        require(s.facetAddresses[facetAddress], \\\"Facet not included in clone\\\");\\n\\n        s.selectorGasCache[selector] = facetAddress;\\n    }\\n\\n    function setImmutableUntilBlock(uint256 blockNum) internal {\\n        diamondCloneStorage().immutableUntilBlock = blockNum;\\n    }\\n\\n    function isImmutable() internal view returns (bool) {\\n        return block.number < diamondCloneStorage().immutableUntilBlock;\\n    }\\n\\n    function immutableUntilBlock() internal view returns (uint256) {\\n        return diamondCloneStorage().immutableUntilBlock;\\n    }\\n\\n    /**\\n     * LOUPE FUNCTIONALITY BELOW\\n     */\\n\\n    function facets()\\n        internal\\n        view\\n        returns (IDiamondLoupe.Facet[] memory facets_)\\n    {\\n        DiamondCloneLib.DiamondCloneStorage storage ds = DiamondCloneLib\\n            .diamondCloneStorage();\\n        IDiamondLoupe.Facet[] memory allSawFacets = DiamondSaw(\\n            ds.diamondSawAddress\\n        ).allFacetsWithSelectors();\\n\\n        uint256 copyIndex = 0;\\n\\n        facets_ = new IDiamondLoupe.Facet[](ds.numFacets);\\n\\n        for (uint256 i; i < allSawFacets.length; i++) {\\n            if (ds.facetAddresses[allSawFacets[i].facetAddress]) {\\n                facets_[copyIndex] = allSawFacets[i];\\n                copyIndex++;\\n            }\\n        }\\n    }\\n\\n    function facetAddresses()\\n        internal\\n        view\\n        returns (address[] memory facetAddresses_)\\n    {\\n        DiamondCloneLib.DiamondCloneStorage storage ds = DiamondCloneLib\\n            .diamondCloneStorage();\\n\\n        address[] memory allSawFacetAddresses = DiamondSaw(ds.diamondSawAddress)\\n            .allFacetAddresses();\\n        facetAddresses_ = new address[](ds.numFacets);\\n\\n        uint256 copyIndex = 0;\\n\\n        for (uint256 i; i < allSawFacetAddresses.length; i++) {\\n            if (ds.facetAddresses[allSawFacetAddresses[i]]) {\\n                facetAddresses_[copyIndex] = allSawFacetAddresses[i];\\n                copyIndex++;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/AccessControl/AccessControlModifiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlLib.sol\\\";\\n\\nabstract contract AccessControlModifiers {\\n    modifier onlyOperator() {\\n        AccessControlLib._checkRole(AccessControlLib.OPERATOR_ROLE, msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        AccessControlLib._enforceOwner();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DiamondSaw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IDiamondCut} from \\\"./facets/DiamondClone/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"./facets/DiamondClone/IDiamondLoupe.sol\\\";\\nimport {DiamondSawLib} from \\\"./libraries/DiamondSawLib.sol\\\";\\nimport {BasicAccessControlFacet} from \\\"./facets/AccessControl/BasicAccessControlFacet.sol\\\";\\nimport {AccessControlModifiers} from \\\"./facets/AccessControl/AccessControlModifiers.sol\\\";\\nimport {AccessControlLib} from \\\"./facets/AccessControl/AccessControlLib.sol\\\";\\nimport {PausableFacet} from \\\"./facets/Pausable/PausableFacet.sol\\\";\\nimport {PausableModifiers} from \\\"./facets/Pausable/PausableModifiers.sol\\\";\\n\\n/**\\n * DiamondSaw is meant to be used as a\\n * Singleton to \\\"cut\\\" many minimal diamond clones\\n * In a gas efficient manner for deployments.\\n *\\n * This is accomplished by handling the storage intensive\\n * selector mappings in one contract, \\\"the saw\\\" instead of in each diamond.\\n *\\n * Adding a new facet to the saw enables new diamond \\\"patterns\\\"\\n *\\n * This should be used if you\\n *\\n * 1. Need cheap deployments of many similar cloned diamonds that\\n * utilize the same pre-deployed facets\\n *\\n * 2. Are okay with gas overhead on write txn to the diamonds\\n * to communicate with the singleton (saw) to fetch selectors\\n *\\n */\\ncontract DiamondSaw is\\n    BasicAccessControlFacet,\\n    AccessControlModifiers,\\n    PausableFacet,\\n    PausableModifiers\\n{\\n    constructor() {\\n        AccessControlLib._transferOwnership(msg.sender);\\n    }\\n\\n    function addFacetPattern(\\n        IDiamondCut.FacetCut[] calldata _facetAdds,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external onlyOwner whenNotPaused {\\n        DiamondSawLib.diamondCutAddOnly(_facetAdds, _init, _calldata);\\n    }\\n\\n    // if a facet has no selectors, it is not supported\\n    function checkFacetSupported(address _facetAddress) external view {\\n        DiamondSawLib.checkFacetSupported(_facetAddress);\\n    }\\n\\n    function facetAddressForSelector(bytes4 selector)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return\\n            DiamondSawLib\\n                .diamondSawStorage()\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n    }\\n\\n    function functionSelectorsForFacetAddress(address facetAddress)\\n        external\\n        view\\n        returns (bytes4[] memory)\\n    {\\n        return\\n            DiamondSawLib\\n                .diamondSawStorage()\\n                .facetFunctionSelectors[facetAddress]\\n                .functionSelectors;\\n    }\\n\\n    function allFacetAddresses() external view returns (address[] memory) {\\n        return DiamondSawLib.diamondSawStorage().facetAddresses;\\n    }\\n\\n    function allFacetsWithSelectors()\\n        external\\n        view\\n        returns (IDiamondLoupe.Facet[] memory _facetsWithSelectors)\\n    {\\n        DiamondSawLib.DiamondSawStorage storage ds = DiamondSawLib\\n            .diamondSawStorage();\\n\\n        uint256 numFacets = ds.facetAddresses.length;\\n        _facetsWithSelectors = new IDiamondLoupe.Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = ds.facetAddresses[i];\\n            _facetsWithSelectors[i].facetAddress = facetAddress_;\\n            _facetsWithSelectors[i].functionSelectors = ds\\n                .facetFunctionSelectors[facetAddress_]\\n                .functionSelectors;\\n        }\\n    }\\n\\n    function facetAddressForInterface(bytes4 _interface)\\n        external\\n        view\\n        returns (address)\\n    {\\n        DiamondSawLib.DiamondSawStorage storage ds = DiamondSawLib\\n            .diamondSawStorage();\\n        return ds.interfaceToFacet[_interface];\\n    }\\n\\n    function setFacetForERC165Interface(bytes4 _interface, address _facet)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        DiamondSawLib.checkFacetSupported(_facet);\\n        require(\\n            DiamondSawLib.diamondSawStorage().interfaceToFacet[_interface] ==\\n                address(0),\\n            \\\"Only one facet can implement an interface\\\"\\n        );\\n        DiamondSawLib.diamondSawStorage().interfaceToFacet[_interface] = _facet;\\n    }\\n\\n    function approveTransferHookSelector(bytes4 selector)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        DiamondSawLib.approveTransferHookSelector(selector);\\n    }\\n\\n    function approveTokenURISelector(bytes4 selector)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        DiamondSawLib.approveTokenURISelector(selector);\\n    }\\n\\n    function isTokenURISelectorApproved(bytes4 selector)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            DiamondSawLib.diamondSawStorage().approvedTokenURIFunctionSelectors[\\n                selector\\n            ];\\n    }\\n\\n    function isTransferHookSelectorApproved(bytes4 selector)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            DiamondSawLib\\n                .diamondSawStorage()\\n                .approvedTransferHookFunctionSelectors[selector];\\n    }\\n\\n    function setUpgradeSawAddress(address _upgradeSaw)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        DiamondSawLib.setUpgradeSawAddress(_upgradeSaw);\\n    }\\n\\n    function isUpgradeSawSupported(address _upgradeSaw)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            DiamondSawLib.diamondSawStorage().supportedSawAddresses[\\n                _upgradeSaw\\n            ];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondClone/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"contracts/facets/DiamondClone/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DiamondSawLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDiamondCut} from \\\"../facets/DiamondClone/IDiamondCut.sol\\\";\\n\\nlibrary DiamondSawLib {\\n    bytes32 constant DIAMOND_SAW_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.saw.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondSawStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a facet implements a given interface\\n        // Note: this works because no interface can be implemented by\\n        // two different facets with diamond saw because no\\n        // selector overlap is permitted!!\\n        mapping(bytes4 => address) interfaceToFacet;\\n        // for transfer hooks, selectors must be approved in the saw\\n        mapping(bytes4 => bool) approvedTransferHookFunctionSelectors;\\n        // for tokenURI overrides, selectors must be approved in the saw\\n        mapping(bytes4 => bool) approvedTokenURIFunctionSelectors;\\n        // Saw contracts which clients can upgrade to\\n        mapping(address => bool) supportedSawAddresses;\\n    }\\n\\n    function diamondSawStorage()\\n        internal\\n        pure\\n        returns (DiamondSawStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_SAW_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    // only supports adding new selectors\\n    function diamondCutAddOnly(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            require(\\n                _diamondCut[facetIndex].action ==\\n                    IDiamondCut.FacetCutAction.Add,\\n                \\\"Only add action supported in saw\\\"\\n            );\\n            require(\\n                !isFacetSupported(_diamondCut[facetIndex].facetAddress),\\n                \\\"Facet already exists in saw\\\"\\n            );\\n            addFunctions(\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondSawStorage storage ds = diamondSawStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"Cannot add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function addFacet(DiamondSawStorage storage ds, address _facetAddress)\\n        internal\\n    {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\\n            .facetAddresses\\n            .length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondSawStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    function setFacetSupportsInterface(bytes4 _interface, address _facetAddress)\\n        internal\\n    {\\n        checkFacetSupported(_facetAddress);\\n        DiamondSawStorage storage ds = diamondSawStorage();\\n        ds.interfaceToFacet[_interface] = _facetAddress;\\n    }\\n\\n    function isFacetSupported(address _facetAddress)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            diamondSawStorage()\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors\\n                .length > 0;\\n    }\\n\\n    function checkFacetSupported(address _facetAddress) internal view {\\n        require(isFacetSupported(_facetAddress), \\\"Facet not supported\\\");\\n    }\\n\\n    function approveTransferHookSelector(bytes4 transferHookSelector) internal {\\n        DiamondSawStorage storage s = diamondSawStorage();\\n        address facetImplementation = s\\n            .selectorToFacetAndPosition[transferHookSelector]\\n            .facetAddress;\\n\\n        require(\\n            facetImplementation != address(0),\\n            \\\"Cannot set transfer hook to unsupported selector\\\"\\n        );\\n\\n        s.approvedTransferHookFunctionSelectors[transferHookSelector] = true;\\n    }\\n\\n    function approveTokenURISelector(bytes4 tokenURISelector) internal {\\n        DiamondSawStorage storage s = diamondSawStorage();\\n        address facetImplementation = s\\n            .selectorToFacetAndPosition[tokenURISelector]\\n            .facetAddress;\\n        require(\\n            facetImplementation != address(0),\\n            \\\"Cannot set token uri override to unsupported selector\\\"\\n        );\\n        s.approvedTokenURIFunctionSelectors[tokenURISelector] = true;\\n    }\\n\\n    function setUpgradeSawAddress(address _upgradeSaw) internal {\\n        diamondSawStorage().supportedSawAddresses[_upgradeSaw] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/AccessControl/AccessControlLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AccessControlLib {\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 constant OPERATOR_ROLE = keccak256(\\\"operator.role\\\");\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct AccessControlStorage {\\n        address _owner;\\n        mapping(bytes32 => RoleData) _roles;\\n    }\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_POSITION =\\n        keccak256(\\\"Access.Control.library.storage\\\");\\n\\n    function accessControlStorage()\\n        internal\\n        pure\\n        returns (AccessControlStorage storage s)\\n    {\\n        bytes32 position = ACCESS_CONTROL_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    function _isOwner() internal view returns (bool) {\\n        return accessControlStorage()._owner == msg.sender;\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return accessControlStorage()._owner;\\n    }\\n\\n    function _enforceOwner() internal view {\\n        require(_isOwner(), \\\"Caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        address oldOwner = accessControlStorage()._owner;\\n        accessControlStorage()._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return accessControlStorage()._roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * NOTE: Modified to always pass if the account is the owner\\n     * and to always fail if ownership is revoked!\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        address ownerAddress = accessControlStorage()._owner;\\n        require(ownerAddress != address(0), \\\"Admin functionality revoked\\\");\\n        if (!hasRole(role, account) && account != ownerAddress) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n        return accessControlStorage()._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account)\\n        internal\\n        onlyRole(getRoleAdmin(role))\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        internal\\n        onlyRole(getRoleAdmin(role))\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) internal {\\n        require(\\n            account == msg.sender,\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        accessControlStorage()._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            accessControlStorage()._roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            accessControlStorage()._roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/Pausable/PausableModifiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PausableLib} from \\\"./PausableLib.sol\\\";\\n\\nabstract contract PausableModifiers {\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        PausableLib.enforceUnpaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        PausableLib.enforcePaused();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/Pausable/PausableLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nerror ContractPaused();\\nerror ContractUnpaused();\\n\\nlibrary PausableLib {\\n    bytes32 constant PAUSABLE_STORAGE_POSITION =\\n        keccak256(\\\"pausable.facet.storage\\\");\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    function pausableStorage()\\n        internal\\n        pure\\n        returns (PausableStorage storage s)\\n    {\\n        bytes32 position = PAUSABLE_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function _paused() internal view returns (bool) {\\n        return pausableStorage()._paused;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal {\\n        PausableStorage storage s = pausableStorage();\\n        if (s._paused) revert ContractPaused();\\n        s._paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal {\\n        PausableStorage storage s = pausableStorage();\\n        if (!s._paused) revert ContractUnpaused();\\n        s._paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n\\n    function enforceUnpaused() internal view {\\n        if (pausableStorage()._paused) revert ContractPaused();\\n    }\\n\\n    function enforcePaused() internal view {\\n        if (!pausableStorage()._paused) revert ContractUnpaused();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractUnpaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"gasCacheForSelector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immutableUntilBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"diamondSawAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"facetAddresses\",\"type\":\"address[]\"}],\"name\":\"initializeDiamondClone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"setGasCacheForSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"setImmutableUntilBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upgradeSaw\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_oldFacetAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_newFacetAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"upgradeDiamondSaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BaseDiamondCloneFacet", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}