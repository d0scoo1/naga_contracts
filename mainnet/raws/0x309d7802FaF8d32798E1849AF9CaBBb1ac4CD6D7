{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/erc20/IERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts/ystream/IYieldStream.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract IYieldStream{\r\n\r\n  string public name;\r\n\r\n  function target_token() public view returns(address);\r\n\r\n  function getVirtualPrice() public view returns(uint256);\r\n\r\n  function getDecimal() public pure returns(uint256);\r\n\r\n  function getPriceDecimal() public pure returns(uint256);\r\n}\r\n\r\n// File: contracts/ystream/sSpellStream.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract sSpellInterface is IERC20{\r\n  IERC20 public token;\r\n}\r\n\r\ncontract sSpellStream is IYieldStream{\r\n  using SafeMath for uint256;\r\n  sSpellInterface public sSpell;\r\n\r\n  constructor() public{\r\n    name = \"sSpell yield stream\";\r\n    sSpell = sSpellInterface(address(0x26FA3fFFB6EfE8c1E69103aCb4044C26B9A106a9));\r\n  }\r\n\r\n\r\n  function target_token() public view returns(address){\r\n    return address(sSpell);\r\n  }\r\n\r\n  function getVirtualPrice() public view returns(uint256){\r\n    if(sSpell.totalSupply() == 0){\r\n      return 0;\r\n    }\r\n\r\n    return sSpell.token().balanceOf(address(sSpell)).safeMul(1e18).safeDiv(sSpell.totalSupply());\r\n  }\r\n\r\n  function getDecimal() public pure returns(uint256){\r\n    return 1e18;\r\n  }\r\n\r\n  function getPriceDecimal() public pure returns(uint256){\r\n    return 1e18;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceDecimal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sSpell\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "sSpellStream", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "SafeMath:071108ad85d7a766b41e0f5e5195537a8fc8e74d", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://88cd4d96d19f5726fe23dbecb389f5b0c18606e76c5660db34662c59b0b33d56"}]}