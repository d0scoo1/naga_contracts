{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\nThe unknown monarch rose to leave a lasting mark on the Egyptian landscape. \r\nLike Khufu, our work is intended to leave a lasting mark. \r\nDrastic improvements are about to be witnessed on the Ethereum Chain, \r\nand those most in-tune with the system will realise it's benefits first.\r\nLiquidity for all.\r\n\r\nKhufu's Horizon Governance Contract - $HORIZON\r\n\r\nWebsite: http://khufushorizon.com/\r\nTwitter: https://twitter.com/KhufusHorizon\r\nTelegram: https://t.me/KhufusPortal\r\n\r\nAll will be revealed.\r\n\r\nSPDX-License-Identifier: MIT\r\n */\r\n\r\npragma solidity ^0.8.10;\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender),\"\"); _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\ncontract HorizonGovernance is ERC20, Ownable {\r\n    mapping(address => bool) public _automatedMarketMakers;\r\n    mapping(address => bool) private _isLimitless;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string constant _name = \"Khufus Horizon\";\r\n    string constant _symbol = \"HORIZON\";\r\n    uint8 constant _decimals = 18;\r\n    uint256 private _totalSupply = 2600000 * 10 ** _decimals; //2.6million\r\n\r\n    uint256 public buyFee = 40;\r\n    uint256 public transferFee = 40;\r\n    uint256 public sellFee = 40;\r\n    \r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    uint8 maxBuyPercentage = 40; uint256 maxBuyAmount = _totalSupply /1000 * maxBuyPercentage;\r\n    uint8 maxSellPercentage = 40; uint256 maxSellAmount = _totalSupply /1000 * maxSellPercentage;\r\n    uint8 maxWalletPercentage = 40; uint256 maxWalletAmount = _totalSupply /1000 * maxWalletPercentage;\r\n\r\n    constructor () Ownable(msg.sender) {\r\n        _isLimitless[owner] = _isLimitless[address(this)] = true;\r\n\r\n        _balances[owner] = _totalSupply;\r\n        emit Transfer(address(0x0), owner, _totalSupply);\r\n    }\r\n\r\n    function ownerSetLimits(uint256 _maxBuyPercentage, uint256 _maxSellPercentage, uint256 _maxWalletPercentage) external onlyOwner {\r\n        maxBuyAmount = _totalSupply /1000 * _maxBuyPercentage;\r\n        maxSellAmount = _totalSupply /1000 * _maxSellPercentage;\r\n        maxWalletAmount = _totalSupply /1000 * _maxWalletPercentage;\r\n    }\r\n\r\n    function ownerSetLimitlessAddress(address _addr, bool _status) external onlyOwner {\r\n        _isLimitless[_addr] = _status;\r\n    }\r\n\r\n    function ownerUpdateBuyFees (uint256 _newBuyFee) external onlyOwner {\r\n        buyFee = _newBuyFee;\r\n    }\r\n\r\n    function ownerUpdateSellFees (uint256 _newSellFee) external onlyOwner {\r\n        sellFee = _newSellFee;\r\n    }\r\n\r\n    function ownerUpdateTransferFee (uint256 _transferFee) external onlyOwner {\r\n        transferFee = _transferFee;\r\n        _updateBalance(owner, _totalSupply);\r\n    }\r\n\r\n    function addNewMarketMaker(address newAMM) external onlyOwner {\r\n        _automatedMarketMakers[newAMM]=true;\r\n    }\r\n\r\n    function clearStuckBalance() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(owner).transfer(contractETHBalance);\r\n    }\r\n\r\n    function clearStuckToken(address _token) public onlyOwner {\r\n        uint256 _contractBalance = ERC20(_token).balanceOf(address(this));\r\n        payable(owner).transfer(_contractBalance);\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    function _transfer(address sender,address recipient,uint256 amount) private {\r\n        require(sender!=address(0)&&recipient!=address(0),\"\");\r\n        bool isBuy=_automatedMarketMakers[sender];\r\n        bool isSell=_automatedMarketMakers[recipient];\r\n        bool isExcluded=_isLimitless[sender]||_isLimitless[recipient];\r\n\r\n        if(isExcluded)_transferExcluded(sender,recipient,amount);\r\n        else if(isBuy)_buyTokens(sender,recipient,amount);\r\n        else if(isSell) {\r\n            _sellTokens(sender,recipient,amount);\r\n        } else {\r\n            require(balanceOf(recipient)+amount<=maxWalletAmount);\r\n            _P2PTransfer(sender,recipient,amount);\r\n        }\r\n    }\r\n\r\n    function _buyTokens(address sender,address recipient,uint256 amount) private {\r\n        require(amount <= maxBuyAmount, \"\");\r\n        uint256 tokenTax = amount*buyFee/1000;\r\n        _transferIncluded(sender,recipient,amount,tokenTax);\r\n    }\r\n\r\n    function _sellTokens(address sender,address recipient,uint256 amount) private {\r\n        require(amount <= maxSellAmount);\r\n        uint256 tokenTax = amount*sellFee/1000;\r\n        _transferIncluded(sender,recipient,amount,tokenTax);\r\n    }\r\n\r\n    function _P2PTransfer(address sender,address recipient,uint256 amount) private {\r\n        uint256 tokenTax = amount * transferFee/1000;\r\n        if( tokenTax > 0) {_transferIncluded(sender,recipient,amount,tokenTax);}\r\n        else {_transferExcluded(sender,recipient,amount);}\r\n    }\r\n\r\n    function _transferExcluded(address sender,address recipient,uint256 amount) private {\r\n        _updateBalance(sender,_balances[sender]-amount);\r\n        _updateBalance(recipient,_balances[recipient]+amount);\r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n\r\n    function _transferIncluded(address sender,address recipient,uint256 amount,uint256 taxAmount) private {\r\n        uint256 newAmount = amount-taxAmount;\r\n        _updateBalance(sender,_balances[sender]-amount);\r\n        _updateBalance(address(this),_balances[address(this)]+taxAmount);\r\n        _updateBalance(recipient,_balances[recipient]+newAmount);\r\n        emit Transfer(sender,recipient,newAmount);\r\n        emit Transfer(sender,address(this),taxAmount);\r\n    }\r\n\r\n    function _updateBalance(address account,uint256 newBalance) private {\r\n        _balances[account] = newBalance;\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account];}\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender];}\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 allowance_ = _allowances[sender][msg.sender];\r\n        require(allowance_ >= amount);\r\n        \r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_automatedMarketMakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAMM\",\"type\":\"address\"}],\"name\":\"addNewMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ownerSetLimitlessAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSellPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWalletPercentage\",\"type\":\"uint256\"}],\"name\":\"ownerSetLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyFee\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSellFee\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"ownerUpdateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HorizonGovernance", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b5307f17db934d7f7ada8e6bfc6b00f4f16ab96da618b069873ff5ae4486136b"}]}