{"status": "1", "message": "OK", "result": [{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-05-12\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IMNFT721 {\r\n   function tokenURI(uint256 tokenId) external view returns(string memory);\r\n\r\n   function ownerOf(uint256 tokenId) external view returns (address owner_);\r\n\r\n   function mintNFT(string[] memory tokenURIs_, address owner_) external;\r\n\r\n   function owner() external view returns(address);\r\n}\r\n\r\ncontract GetInfo {\r\n   struct NFTInfo {\r\n      uint256 tokenID;\r\n      address tokenOwner;\r\n      string tokenURI;\r\n   }\r\n\r\n   function getNFTInfo(\r\n      address tokenAddress_,\r\n      uint256 point_,\r\n      uint256 length_\r\n   ) external view returns(NFTInfo[] memory) {\r\n      (\r\n         uint256 cnt,\r\n         NFTInfo[] memory tmpInfos\r\n      ) = _getExistsTokenIDCount(tokenAddress_, point_, length_);\r\n      \r\n      if (cnt == 0) {\r\n         return new NFTInfo[](0);\r\n      }\r\n\r\n      uint256 index = 0;\r\n      NFTInfo[] memory infos = new NFTInfo[](cnt);\r\n\r\n      for (uint256 i = 0; i < length_; i ++) {\r\n         if (tmpInfos[i].tokenID != 0) {\r\n            infos[index ++] = tmpInfos[i];\r\n         }\r\n      }\r\n\r\n      return infos;\r\n   }\r\n\r\n   function _getExistsTokenIDCount(\r\n      address tokenAddress_,\r\n      uint256 point_,\r\n      uint256 length_\r\n   ) internal view returns(uint256 cnt, NFTInfo[] memory ids) {\r\n      ids = new NFTInfo[](length_);\r\n      IMNFT721 token = IMNFT721(tokenAddress_);\r\n      for (uint256 tokenID = point_; tokenID < point_ + length_; tokenID ++) {\r\n         try token.ownerOf(tokenID) {\r\n            ids[tokenID - point_] = NFTInfo({\r\n               tokenID: tokenID ,\r\n               tokenOwner: token.ownerOf(tokenID),\r\n               tokenURI: token.tokenURI(tokenID)\r\n            });\r\n            cnt ++;\r\n         } catch Error(string memory /*reason*/) {\r\n            continue;   \r\n         } catch (bytes memory _err) {\r\n            continue;\r\n         }\r\n      }\r\n   }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"point_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length_\",\"type\":\"uint256\"}],\"name\":\"getNFTInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct GetInfo.NFTInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GetInfo", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b89c547d0716f6a43099f77dcb9b2cfe45f7763e35a10dc69ba5769b383930d1"}]}