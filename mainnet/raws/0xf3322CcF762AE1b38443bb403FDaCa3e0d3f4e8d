{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"./interfaces/IPoolMaster.sol\\\";\\nimport \\\"./interfaces/IFlashGovernor.sol\\\";\\nimport \\\"./interfaces/IMembershipStaking.sol\\\";\\nimport \\\"./libraries/Decimal.sol\\\";\\n\\ncontract PoolFactory is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using ClonesUpgradeable for address;\\n    using SafeCastUpgradeable for uint256;\\n    using Decimal for uint256;\\n\\n    /// @notice CPOOL token contract\\n    IERC20Upgradeable public cpool;\\n\\n    /// @notice MembershipStaking contract\\n    IMembershipStaking public staking;\\n\\n    /// @notice FlashGovernor contract\\n    IFlashGovernor public flashGovernor;\\n\\n    /// @notice Pool master contract\\n    address public poolMaster;\\n\\n    /// @notice Interest Rate Model contract address\\n    address public interestRateModel;\\n\\n    /// @notice Address of the auction contract\\n    address public auction;\\n\\n    /// @notice Address of the treasury\\n    address public treasury;\\n\\n    /// @notice Reserve factor as 18-digit decimal\\n    uint256 public reserveFactor;\\n\\n    /// @notice Insurance factor as 18-digit decimal\\n    uint256 public insuranceFactor;\\n\\n    /// @notice Pool utilization that leads to warning state (as 18-digit decimal)\\n    uint256 public warningUtilization;\\n\\n    /// @notice Pool utilization that leads to provisional default (as 18-digit decimal)\\n    uint256 public provisionalDefaultUtilization;\\n\\n    /// @notice Grace period for warning state before pool goes to default (in seconds)\\n    uint256 public warningGracePeriod;\\n\\n    /// @notice Max period for which pool can stay not active before it can be closed by governor (in seconds)\\n    uint256 public maxInactivePeriod;\\n\\n    /// @notice Period after default to start auction after which pool can be closed by anyone (in seconds)\\n    uint256 public periodToStartAuction;\\n\\n    /// @notice Allowance of different currencies in protocol\\n    mapping(address => bool) public currencyAllowed;\\n\\n    struct ManagerInfo {\\n        address currency;\\n        address pool;\\n        address staker;\\n        uint32 proposalId;\\n        uint256 stakedAmount;\\n        bytes32 ipfsHash;\\n        string managerSymbol;\\n    }\\n\\n    /// @notice Mapping of manager addresses to their pool info\\n    mapping(address => ManagerInfo) public managerInfo;\\n\\n    /// @notice Mapping of manager symbols to flags if they are already used\\n    mapping(string => bool) public usedManagerSymbols;\\n\\n    /// @notice Mapping of addresses to flags indicating if they are pools\\n    mapping(address => bool) public isPool;\\n\\n    // EVENTS\\n\\n    /// @notice Event emitted when new pool is proposed\\n    event PoolProposed(address indexed manager, address indexed currency);\\n\\n    /// @notice Event emitted when proposed pool is cancelled\\n    event PoolCancelled(address indexed manager, address indexed currency);\\n\\n    /// @notice Event emitted when new pool is created\\n    event PoolCreated(\\n        address indexed pool,\\n        address indexed manager,\\n        address indexed currency,\\n        bool forceCreated\\n    );\\n\\n    /// @notice Event emitted when pool is closed\\n    event PoolClosed(\\n        address indexed pool,\\n        address indexed manager,\\n        address indexed currency\\n    );\\n\\n    /// @notice Event emitted when status of the currency is set\\n    event CurrencySet(address currency, bool allowed);\\n\\n    /// @notice Event emitted when new pool master is set\\n    event PoolMasterSet(address newPoolMaster);\\n\\n    /// @notice Event emitted when new interest rate model is set\\n    event InterestRateModelSet(address newModel);\\n\\n    /// @notice Event emitted when new treasury is set\\n    event TreasurySet(address newTreasury);\\n\\n    /// @notice Event emitted when new reserve factor is set\\n    event ReserveFactorSet(uint256 factor);\\n\\n    /// @notice Event emitted when new insurance factor is set\\n    event InsuranceFactorSet(uint256 factor);\\n\\n    /// @notice Event emitted when new warning utilization is set\\n    event WarningUtilizationSet(uint256 utilization);\\n\\n    /// @notice Event emitted when new provisional default utilization is set\\n    event ProvisionalDefaultUtilizationSet(uint256 utilization);\\n\\n    /// @notice Event emitted when new warning grace period is set\\n    event WarningGracePeriodSet(uint256 period);\\n\\n    /// @notice Event emitted when new max inactive period is set\\n    event MaxInactivePeriodSet(uint256 period);\\n\\n    /// @notice Event emitted when new period to start auction is set\\n    event PeriodToStartAuctionSet(uint256 period);\\n\\n    /// @notice Event emitted when new reward per block is set for some pool\\n    event PoolRewardPerBlockSet(address indexed pool, uint256 rewardPerBlock);\\n\\n    // CONSTRUCTOR\\n\\n    /**\\n     * @notice Upgradeable contract constructor\\n     * @param cpool_ The address of the CPOOL contract\\n     * @param staking_ The address of the Staking contract\\n     * @param flashGovernor_ The address of the FlashGovernor contract\\n     * @param poolMaster_ The address of the PoolMaster contract\\n     * @param interestRateModel_ The address of the InterestRateModel contract\\n     * @param auction_ The address of the Auction contract\\n     */\\n    function initialize(\\n        IERC20Upgradeable cpool_,\\n        IMembershipStaking staking_,\\n        IFlashGovernor flashGovernor_,\\n        address poolMaster_,\\n        address interestRateModel_,\\n        address auction_\\n    ) external initializer {\\n        require(address(cpool_) != address(0), \\\"AIZ\\\");\\n        require(address(staking_) != address(0), \\\"AIZ\\\");\\n        require(address(flashGovernor_) != address(0), \\\"AIZ\\\");\\n        require(poolMaster_ != address(0), \\\"AIZ\\\");\\n        require(interestRateModel_ != address(0), \\\"AIZ\\\");\\n        require(auction_ != address(0), \\\"AIZ\\\");\\n\\n        __Ownable_init();\\n\\n        cpool = cpool_;\\n        staking = staking_;\\n        flashGovernor = flashGovernor_;\\n        poolMaster = poolMaster_;\\n        interestRateModel = interestRateModel_;\\n        auction = auction_;\\n    }\\n\\n    /* PUBLIC FUNCTIONS */\\n\\n    /**\\n     * @notice Function used to propose new pool for the first time (with manager's info)\\n     * @param currency Address of the ERC20 token that would act as currnecy in the pool\\n     * @param ipfsHash IPFS hash of the manager's info\\n     * @param managerSymbol Manager's symbol\\n     */\\n    function proposePoolInitial(\\n        address currency,\\n        bytes32 ipfsHash,\\n        string memory managerSymbol\\n    ) external {\\n        _setManager(msg.sender, ipfsHash, managerSymbol);\\n        _proposePool(currency);\\n    }\\n\\n    /**\\n     * @notice Function used to propose new pool (when manager's info already exist)\\n     * @param currency Address of the ERC20 token that would act as currnecy in the pool\\n     */\\n    function proposePool(address currency) external {\\n        require(managerInfo[msg.sender].ipfsHash != bytes32(0), \\\"MHI\\\");\\n\\n        _proposePool(currency);\\n    }\\n\\n    /**\\n     * @notice Function used to create proposed and approved pool\\n     */\\n    function createPool() external {\\n        ManagerInfo storage info = managerInfo[msg.sender];\\n        flashGovernor.execute(info.proposalId);\\n        IPoolMaster pool = IPoolMaster(poolMaster.clone());\\n        pool.initialize(msg.sender, info.currency);\\n        info.pool = address(pool);\\n        isPool[address(pool)] = true;\\n\\n        emit PoolCreated(address(pool), msg.sender, info.currency, false);\\n    }\\n\\n    /**\\n     * @notice Function used to cancel proposed but not yet created pool\\n     */\\n    function cancelPool() external {\\n        ManagerInfo storage info = managerInfo[msg.sender];\\n        require(info.proposalId != 0 && info.pool == address(0), \\\"NPP\\\");\\n\\n        emit PoolCancelled(msg.sender, info.currency);\\n\\n        info.currency = address(0);\\n        info.proposalId = 0;\\n        staking.unlockStake(info.staker, info.stakedAmount);\\n    }\\n\\n    // RESTRICTED FUNCTIONS\\n\\n    /**\\n     * @notice Function used to immedeately create new pool for some manager for the first time\\n     * @notice Skips approval, restricted to owner\\n     * @param manager Manager to create pool for\\n     * @param currency Address of the ERC20 token that would act as currnecy in the pool\\n     * @param ipfsHash IPFS hash of the manager's info\\n     * @param managerSymbol Manager's symbol\\n     */\\n    function forceCreatePoolInitial(\\n        address manager,\\n        address currency,\\n        bytes32 ipfsHash,\\n        string memory managerSymbol\\n    ) external onlyOwner {\\n        _setManager(manager, ipfsHash, managerSymbol);\\n\\n        _forceCreatePool(manager, currency);\\n    }\\n\\n    /**\\n     * @notice Function used to immediately create new pool for some manager (when info already exist)\\n     * @notice Skips approval, restricted to owner\\n     * @param manager Manager to create pool for\\n     * @param currency Address of the ERC20 token that would act as currnecy in the pool\\n     */\\n    function forceCreatePool(address manager, address currency)\\n        external\\n        onlyOwner\\n    {\\n        require(managerInfo[manager].ipfsHash != bytes32(0), \\\"MHI\\\");\\n\\n        _forceCreatePool(manager, currency);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to update currency allowance in the protocol\\n     * @param currency Address of the ERC20 token\\n     * @param allowed Should currency be allowed or forbidden\\n     */\\n    function setCurrency(address currency, bool allowed) external onlyOwner {\\n        currencyAllowed[currency] = allowed;\\n        emit CurrencySet(currency, allowed);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new PoolMaster\\n     * @param poolMaster_ Address of the new PoolMaster contract\\n     */\\n    function setPoolMaster(address poolMaster_) external onlyOwner {\\n        require(poolMaster_ != address(0), \\\"AIZ\\\");\\n        poolMaster = poolMaster_;\\n        emit PoolMasterSet(poolMaster_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new InterestRateModel\\n     * @param interestRateModel_ Address of the new InterestRateModel contract\\n     */\\n    function setInterestRateModel(address interestRateModel_)\\n        external\\n        onlyOwner\\n    {\\n        require(interestRateModel_ != address(0), \\\"AIZ\\\");\\n        interestRateModel = interestRateModel_;\\n        emit InterestRateModelSet(interestRateModel_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new treasury\\n     * @param treasury_ Address of the new treasury\\n     */\\n    function setTreasury(address treasury_) external onlyOwner {\\n        require(treasury_ != address(0), \\\"AIZ\\\");\\n        treasury = treasury_;\\n        emit TreasurySet(treasury_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new reserve factor\\n     * @param reserveFactor_ New reserve factor as 18-digit decimal\\n     */\\n    function setReserveFactor(uint256 reserveFactor_) external onlyOwner {\\n        require(reserveFactor_ <= Decimal.ONE, \\\"GTO\\\");\\n        reserveFactor = reserveFactor_;\\n        emit ReserveFactorSet(reserveFactor_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new insurance factor\\n     * @param insuranceFactor_ New reserve factor as 18-digit decimal\\n     */\\n    function setInsuranceFactor(uint256 insuranceFactor_) external onlyOwner {\\n        require(insuranceFactor_ <= Decimal.ONE, \\\"GTO\\\");\\n        insuranceFactor = insuranceFactor_;\\n        emit InsuranceFactorSet(insuranceFactor_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new warning utilization\\n     * @param warningUtilization_ New warning utilization as 18-digit decimal\\n     */\\n    function setWarningUtilization(uint256 warningUtilization_)\\n        external\\n        onlyOwner\\n    {\\n        require(warningUtilization_ <= Decimal.ONE, \\\"GTO\\\");\\n        warningUtilization = warningUtilization_;\\n        emit WarningUtilizationSet(warningUtilization_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new provisional default utilization\\n     * @param provisionalDefaultUtilization_ New provisional default utilization as 18-digit decimal\\n     */\\n    function setProvisionalDefaultUtilization(\\n        uint256 provisionalDefaultUtilization_\\n    ) external onlyOwner {\\n        require(provisionalDefaultUtilization_ <= Decimal.ONE, \\\"GTO\\\");\\n        provisionalDefaultUtilization = provisionalDefaultUtilization_;\\n        emit ProvisionalDefaultUtilizationSet(provisionalDefaultUtilization_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new warning grace period\\n     * @param warningGracePeriod_ New warning grace period in seconds\\n     */\\n    function setWarningGracePeriod(uint256 warningGracePeriod_)\\n        external\\n        onlyOwner\\n    {\\n        warningGracePeriod = warningGracePeriod_;\\n        emit WarningGracePeriodSet(warningGracePeriod_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new max inactive period\\n     * @param maxInactivePeriod_ New max inactive period in seconds\\n     */\\n    function setMaxInactivePeriod(uint256 maxInactivePeriod_)\\n        external\\n        onlyOwner\\n    {\\n        maxInactivePeriod = maxInactivePeriod_;\\n        emit MaxInactivePeriodSet(maxInactivePeriod_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new period to start auction\\n     * @param periodToStartAuction_ New period to start auction\\n     */\\n    function setPeriodToStartAuction(uint256 periodToStartAuction_)\\n        external\\n        onlyOwner\\n    {\\n        periodToStartAuction = periodToStartAuction_;\\n        emit PeriodToStartAuctionSet(periodToStartAuction_);\\n    }\\n\\n    /**\\n     * @notice Function is called by contract owner to set new CPOOl reward per block speed in some pool\\n     * @param pool Pool where to set reward\\n     * @param rewardPerBlock Reward per block value\\n     */\\n    function setPoolRewardPerBlock(address pool, uint256 rewardPerBlock)\\n        external\\n        onlyOwner\\n    {\\n        IPoolMaster(pool).setRewardPerBlock(rewardPerBlock);\\n        emit PoolRewardPerBlockSet(pool, rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice Function is called through pool at closing to unlock manager's stake\\n     */\\n    function closePool() external {\\n        require(isPool[msg.sender], \\\"SNP\\\");\\n        address manager = IPoolMaster(msg.sender).manager();\\n        ManagerInfo storage info = managerInfo[manager];\\n\\n        address currency = info.currency;\\n        info.currency = address(0);\\n        info.pool = address(0);\\n        staking.unlockStake(info.staker, info.stakedAmount);\\n\\n        emit PoolClosed(msg.sender, manager, currency);\\n    }\\n\\n    /**\\n     * @notice Function is called through pool to burn manager's stake when auction starts\\n     */\\n    function burnStake() external {\\n        require(isPool[msg.sender], \\\"SNP\\\");\\n        ManagerInfo storage info = managerInfo[\\n            IPoolMaster(msg.sender).manager()\\n        ];\\n\\n        staking.burnStake(info.staker, info.stakedAmount);\\n        info.staker = address(0);\\n        info.stakedAmount = 0;\\n    }\\n\\n    /**\\n     * @notice Function is used to withdraw CPOOL rewards from multiple pools\\n     * @param pools List of pools to withdrawm from\\n     */\\n    function withdrawReward(address[] memory pools) external {\\n        uint256 totalReward;\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            require(isPool[pools[i]], \\\"NPA\\\");\\n            totalReward += IPoolMaster(pools[i]).withdrawReward(msg.sender);\\n        }\\n\\n        if (totalReward > 0) {\\n            cpool.safeTransfer(msg.sender, totalReward);\\n        }\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /**\\n     * @notice Function returns symbol for new pool based on currency and manager\\n     * @param currency Pool's currency address\\n     * @param manager Manager's address\\n     * @return Pool symbol\\n     */\\n    function getPoolSymbol(address currency, address manager)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                bytes.concat(\\n                    bytes(\\\"cp\\\"),\\n                    bytes(managerInfo[manager].managerSymbol),\\n                    bytes(\\\"-\\\"),\\n                    bytes(IERC20MetadataUpgradeable(currency).symbol())\\n                )\\n            );\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice Internal function that proposes pool\\n     * @param currency Currency of the pool\\n     */\\n    function _proposePool(address currency) private {\\n        require(currencyAllowed[currency], \\\"CNA\\\");\\n        ManagerInfo storage info = managerInfo[msg.sender];\\n        require(info.currency == address(0), \\\"AHP\\\");\\n\\n        info.proposalId = flashGovernor.propose();\\n        info.currency = currency;\\n        info.staker = msg.sender;\\n        info.stakedAmount = staking.lockStake(msg.sender);\\n\\n        emit PoolProposed(msg.sender, currency);\\n    }\\n\\n    /**\\n     * @notice Internal function that immedeately creates pool\\n     * @param manager Manager of the pool\\n     * @param currency Currency of the pool\\n     */\\n    function _forceCreatePool(address manager, address currency) private {\\n        require(currencyAllowed[currency], \\\"CNA\\\");\\n        ManagerInfo storage info = managerInfo[manager];\\n        require(info.currency == address(0), \\\"AHP\\\");\\n\\n        IPoolMaster pool = IPoolMaster(poolMaster.clone());\\n        pool.initialize(manager, currency);\\n\\n        info.pool = address(pool);\\n        info.currency = currency;\\n        info.staker = msg.sender;\\n        info.stakedAmount = staking.lockStake(msg.sender);\\n\\n        isPool[address(pool)] = true;\\n\\n        emit PoolCreated(address(pool), manager, currency, true);\\n    }\\n\\n    /**\\n     * @notice Internal function that sets manager's info\\n     * @param manager Manager to set info for\\n     * @param info Manager's info IPFS hash\\n     * @param symbol Manager's symbol\\n     */\\n    function _setManager(\\n        address manager,\\n        bytes32 info,\\n        string memory symbol\\n    ) private {\\n        require(managerInfo[manager].ipfsHash == bytes32(0), \\\"AHI\\\");\\n        require(info != bytes32(0), \\\"CEI\\\");\\n        require(!usedManagerSymbols[symbol], \\\"SAU\\\");\\n\\n        managerInfo[manager].ipfsHash = info;\\n        managerInfo[manager].managerSymbol = symbol;\\n        usedManagerSymbols[symbol] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IPoolMaster {\\n    function manager() external view returns (address);\\n\\n    function currency() external view returns (address);\\n\\n    function borrows() external view returns (uint256);\\n\\n    function insurance() external view returns (uint256);\\n\\n    function getBorrowRate() external view returns (uint256);\\n\\n    function getSupplyRate() external view returns (uint256);\\n\\n    enum State {\\n        Active,\\n        Warning,\\n        ProvisionalDefault,\\n        Default,\\n        Closed\\n    }\\n\\n    function state() external view returns (State);\\n\\n    function initialize(address manager_, address currency_) external;\\n\\n    function setRewardPerBlock(uint256 rewardPerBlock_) external;\\n\\n    function withdrawReward(address account) external returns (uint256);\\n\\n    function transferReserves() external;\\n\\n    function processAuctionStart() external;\\n\\n    function processDebtClaim() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashGovernor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IFlashGovernor {\\n    function proposalEndBlock(uint32 proposalId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function propose() external returns (uint32);\\n\\n    function execute(uint32 proposalId) external;\\n\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Defeated,\\n        Succeeded,\\n        Executed\\n    }\\n\\n    function state(uint32 proposalId) external view returns (ProposalState);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMembershipStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IMembershipStaking {\\n    function managerMinimalStake() external view returns (uint256);\\n\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lockStake(address account) external returns (uint256);\\n\\n    function unlockStake(address account, uint256 amount) external;\\n\\n    function burnStake(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Decimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary Decimal {\\n    /// @notice Number one as 18-digit decimal\\n    uint256 internal constant ONE = 1e18;\\n\\n    /**\\n     * @notice Internal function for 10-digits decimal division\\n     * @param number Integer number\\n     * @param decimal Decimal number\\n     * @return Returns multiplied numbers\\n     */\\n    function mulDecimal(uint256 number, uint256 decimal)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (number * decimal) / ONE;\\n    }\\n\\n    /**\\n     * @notice Internal function for 10-digits decimal multiplication\\n     * @param number Integer number\\n     * @param decimal Decimal number\\n     * @return Returns integer number divided by second\\n     */\\n    function divDecimal(uint256 number, uint256 decimal)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (number * ONE) / decimal;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"CurrencySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"InsuranceFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newModel\",\"type\":\"address\"}],\"name\":\"InterestRateModelSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"MaxInactivePeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"PeriodToStartAuctionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"PoolCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"PoolClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"forceCreated\",\"type\":\"bool\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPoolMaster\",\"type\":\"address\"}],\"name\":\"PoolMasterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"PoolProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"PoolRewardPerBlockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"utilization\",\"type\":\"uint256\"}],\"name\":\"ProvisionalDefaultUtilizationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"ReserveFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"WarningGracePeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"utilization\",\"type\":\"uint256\"}],\"name\":\"WarningUtilizationSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cpool\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currencyAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashGovernor\",\"outputs\":[{\"internalType\":\"contract IFlashGovernor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"forceCreatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"managerSymbol\",\"type\":\"string\"}],\"name\":\"forceCreatePoolInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"getPoolSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"cpool_\",\"type\":\"address\"},{\"internalType\":\"contract IMembershipStaking\",\"name\":\"staking_\",\"type\":\"address\"},{\"internalType\":\"contract IFlashGovernor\",\"name\":\"flashGovernor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolMaster_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auction_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"proposalId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"managerSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInactivePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodToStartAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"proposePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ipfsHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"managerSymbol\",\"type\":\"string\"}],\"name\":\"proposePoolInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provisionalDefaultUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceFactor_\",\"type\":\"uint256\"}],\"name\":\"setInsuranceFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"interestRateModel_\",\"type\":\"address\"}],\"name\":\"setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxInactivePeriod_\",\"type\":\"uint256\"}],\"name\":\"setMaxInactivePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodToStartAuction_\",\"type\":\"uint256\"}],\"name\":\"setPeriodToStartAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolMaster_\",\"type\":\"address\"}],\"name\":\"setPoolMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setPoolRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provisionalDefaultUtilization_\",\"type\":\"uint256\"}],\"name\":\"setProvisionalDefaultUtilization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveFactor_\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"warningGracePeriod_\",\"type\":\"uint256\"}],\"name\":\"setWarningGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"warningUtilization_\",\"type\":\"uint256\"}],\"name\":\"setWarningUtilization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IMembershipStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"usedManagerSymbols\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warningGracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warningUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PoolFactory", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}