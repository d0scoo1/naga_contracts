{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISwapRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface ISwapRouter02 is ISwapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract UniswapKyberArbitrage {\r\n    address public owner;\r\n\r\n    address public wethAddress;\r\n    address public daiAddress;\r\n    address private uniswapRouterAddress;\r\n    address private kyberwapRouterAddress;\r\n\r\n    uint256 public arbitrageAmount;\r\n\r\n    enum Exchange {\r\n        UNI,\r\n        KYBER,\r\n        NONE\r\n    }\r\n\r\n    constructor(\r\n        address _uniswapRouterAddress,\r\n        address _kyberswapRouterAddress,\r\n        address _weth,\r\n        address _dai\r\n    ) {\r\n        uniswapRouterAddress = _uniswapRouterAddress;\r\n        kyberwapRouterAddress = _kyberswapRouterAddress;\r\n        owner = msg.sender;\r\n        wethAddress = _weth;\r\n        daiAddress = _dai;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner can call this\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function deposit(uint256 amount) public onlyOwner {\r\n        require(amount > 0, \"Deposit amount must be greater than 0\");\r\n        IERC20(wethAddress).transferFrom(msg.sender, address(this), amount);\r\n        arbitrageAmount += amount;\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        require(amount <= arbitrageAmount, \"Not enough amount deposited\");\r\n        IERC20(wethAddress).transferFrom(address(this), msg.sender, amount);\r\n        arbitrageAmount -= amount;\r\n    }\r\n\r\n    function makeArbitrage() public {\r\n        uint256 amountIn = arbitrageAmount;\r\n        Exchange result = _comparePrice(amountIn);\r\n        if (result == Exchange.UNI) {\r\n            // sell ETH in uniswap for DAI with high price and buy ETH from Kyberswap with lower price\r\n            uint256 amountOut = _swap(\r\n                amountIn,\r\n                uniswapRouterAddress,\r\n                wethAddress,\r\n                daiAddress\r\n            );\r\n            uint256 amountFinal = _swap(\r\n                amountOut,\r\n                kyberwapRouterAddress,\r\n                daiAddress,\r\n                wethAddress\r\n            );\r\n            arbitrageAmount = amountFinal;\r\n        } else if (result == Exchange.KYBER) {\r\n            // sell ETH in Kyberswap for DAI with high price and buy ETH from uniswap with lower price\r\n            uint256 amountOut = _swap(\r\n                amountIn,\r\n                kyberwapRouterAddress,\r\n                wethAddress,\r\n                daiAddress\r\n            );\r\n            uint256 amountFinal = _swap(\r\n                amountOut,\r\n                uniswapRouterAddress,\r\n                daiAddress,\r\n                wethAddress\r\n            );\r\n            arbitrageAmount = amountFinal;\r\n        }\r\n    }\r\n\r\n    function _swap(\r\n        uint256 amountIn,\r\n        address routerAddress,\r\n        address sell_token,\r\n        address buy_token\r\n    ) internal returns (uint256) {\r\n        IERC20(sell_token).approve(routerAddress, amountIn);\r\n\r\n        uint256 amountOutMin = (_getPrice(\r\n            routerAddress,\r\n            sell_token,\r\n            buy_token,\r\n            amountIn\r\n        ) * 95) / 100;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = sell_token;\r\n        path[1] = buy_token;\r\n\r\n        uint256 amountOut = ISwapRouter02(routerAddress)\r\n            .swapExactTokensForTokens(\r\n                amountIn,\r\n                amountOutMin,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            )[1];\r\n        return amountOut;\r\n    }\r\n\r\n    function _comparePrice(uint256 amount) internal view returns (Exchange) {\r\n        uint256 uniswapPrice = _getPrice(\r\n            uniswapRouterAddress,\r\n            wethAddress,\r\n            daiAddress,\r\n            amount\r\n        );\r\n        uint256 kyberswapPrice = _getPrice(\r\n            kyberwapRouterAddress,\r\n            wethAddress,\r\n            daiAddress,\r\n            amount\r\n        );\r\n\r\n        // we try to sell ETH with higher price and buy it back with low price to make profit\r\n        if (uniswapPrice > kyberswapPrice) {\r\n            require(\r\n                _checkIfArbitrageIsProfitable(\r\n                    amount,\r\n                    uniswapPrice,\r\n                    kyberswapPrice\r\n                ),\r\n                \"Arbitrage not profitable\"\r\n            );\r\n            return Exchange.UNI;\r\n        } else if (uniswapPrice < kyberswapPrice) {\r\n            require(\r\n                _checkIfArbitrageIsProfitable(\r\n                    amount,\r\n                    kyberswapPrice,\r\n                    uniswapPrice\r\n                ),\r\n                \"Arbitrage not profitable\"\r\n            );\r\n            return Exchange.KYBER;\r\n        } else {\r\n            return Exchange.NONE;\r\n        }\r\n    }\r\n\r\n    function _checkIfArbitrageIsProfitable(\r\n        uint256 amountIn,\r\n        uint256 higherPrice,\r\n        uint256 lowerPrice\r\n    ) internal pure returns (bool) {\r\n        // uniswap & Kyberswap have 0.3% fee for every exchange\r\n        // so gain made must be greater than 2 * 0.3% * arbitrage_amount\r\n\r\n        // difference in ETH\r\n        uint256 difference = (higherPrice - lowerPrice) / higherPrice;\r\n\r\n        uint256 payed_fee = (2 * (amountIn * 3)) / 1000;\r\n\r\n        if (difference > payed_fee) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _getPrice(\r\n        address routerAddress,\r\n        address sell_token,\r\n        address buy_token,\r\n        uint256 amount\r\n    ) internal view returns (uint256) {\r\n        address[] memory pairs = new address[](2);\r\n        pairs[0] = sell_token;\r\n        pairs[1] = buy_token;\r\n        uint256 price = ISwapRouter02(routerAddress).getAmountsOut(\r\n            amount,\r\n            pairs\r\n        )[1];\r\n        return price;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kyberswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"arbitrageAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeArbitrage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UniswapKyberArbitrage", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://54f32b6b2fb99663f1fd007b723efdfd4ad44fac2eec8b544cb48bfa8550a1a2"}]}