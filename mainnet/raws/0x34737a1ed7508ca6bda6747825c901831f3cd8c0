{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract Weko {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 public funds;\r\n    address public director;\r\n    bool public saleClosed;\r\n    bool public directorLock;\r\n    uint256 public claimAmount;\r\n    uint256 public payAmount;\r\n    uint256 public feeAmount;\r\n    uint256 public epoch;\r\n    uint256 public retentionMax;\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public buried;\r\n    mapping (address => uint256) public claimed;\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\tevent Burn(address indexed _from, uint256 _value);\r\n\tevent Bury(address indexed _target, uint256 _value);\r\n\tevent Claim(address indexed _target, address indexed _payout, address indexed _fee);\r\n\r\n     function Weko() public {\r\n        director = msg.sender;\r\n        name = \"Weko\";\r\n        symbol = \"WEKO\";\r\n        decimals = 8;\r\n        saleClosed = true;\r\n        directorLock = false;\r\n        funds = 0;\r\n        totalSupply = 0;\r\n        \r\n        totalSupply += 20000000 * 10 ** uint256(decimals);\r\n\t\tbalances[director] = totalSupply;\r\n        claimAmount = 20 * 10 ** (uint256(decimals) - 1);\r\n        payAmount = 10 * 10 ** (uint256(decimals) - 1);\r\n        feeAmount = 10 * 10 ** (uint256(decimals) - 1);\r\n        epoch = 31536000;\r\n        retentionMax = 40 * 10 ** uint256(decimals);\r\n    }\r\n    \r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    modifier onlyDirector {\r\n        require(!directorLock);\r\n        \r\n        require(msg.sender == director);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDirectorForce {\r\n        require(msg.sender == director);\r\n        _;\r\n    }\r\n    \r\n    function transferDirector(address newDirector) public onlyDirectorForce {\r\n        director = newDirector;\r\n    }\r\n    \r\n    function withdrawFunds() public onlyDirectorForce {\r\n        director.transfer(this.balance);\r\n    }\r\n    \r\n    function selfLock() public payable onlyDirector {\r\n        require(saleClosed);\r\n        \r\n        require(msg.value == 10 ether);\r\n        \r\n        directorLock = true;\r\n    }\r\n    \r\n    function amendClaim(uint8 claimAmountSet, uint8 payAmountSet, uint8 feeAmountSet, uint8 accuracy) public onlyDirector returns (bool success) {\r\n        require(claimAmountSet == (payAmountSet + feeAmountSet));\r\n        \r\n        claimAmount = claimAmountSet * 10 ** (uint256(decimals) - accuracy);\r\n        payAmount = payAmountSet * 10 ** (uint256(decimals) - accuracy);\r\n        feeAmount = feeAmountSet * 10 ** (uint256(decimals) - accuracy);\r\n        return true;\r\n    }\r\n    \r\n    function amendEpoch(uint256 epochSet) public onlyDirector returns (bool success) {\r\n        epoch = epochSet;\r\n        return true;\r\n    }\r\n    \r\n    function amendRetention(uint8 retentionSet, uint8 accuracy) public onlyDirector returns (bool success) {\r\n        retentionMax = retentionSet * 10 ** (uint256(decimals) - accuracy);\r\n        return true;\r\n    }\r\n    \r\n    function closeSale() public onlyDirector returns (bool success) {\r\n        require(!saleClosed);\r\n        \r\n        saleClosed = true;\r\n        return true;\r\n    }\r\n\r\n    function openSale() public onlyDirector returns (bool success) {\r\n        require(saleClosed);\r\n        \r\n        saleClosed = false;\r\n        return true;\r\n    }\r\n    \r\n    function bury() public returns (bool success) {\r\n        require(!buried[msg.sender]);\r\n        require(balances[msg.sender] >= claimAmount);\r\n        require(balances[msg.sender] <= retentionMax);\r\n        buried[msg.sender] = true;\r\n        claimed[msg.sender] = 1;\r\n        Bury(msg.sender, balances[msg.sender]);\r\n        return true;\r\n    }\r\n    \r\n    function claim(address _payout, address _fee) public returns (bool success) {\r\n        require(buried[msg.sender]);\r\n        require(_payout != _fee);\r\n        require(msg.sender != _payout);\r\n        require(msg.sender != _fee);\r\n        require(claimed[msg.sender] == 1 || (block.timestamp - claimed[msg.sender]) >= epoch);\r\n        require(balances[msg.sender] >= claimAmount);\r\n        claimed[msg.sender] = block.timestamp;\r\n        uint256 previousBalances = balances[msg.sender] + balances[_payout] + balances[_fee];\r\n        balances[msg.sender] -= claimAmount;\r\n        balances[_payout] += payAmount;\r\n        balances[_fee] += feeAmount;\r\n        Claim(msg.sender, _payout, _fee);\r\n        Transfer(msg.sender, _payout, payAmount);\r\n        Transfer(msg.sender, _fee, feeAmount);\r\n        assert(balances[msg.sender] + balances[_payout] + balances[_fee] == previousBalances);\r\n        return true;\r\n    }\r\n    \r\n    function () public payable {\r\n        require(!saleClosed);\r\n        require(msg.value >= 1 finney);\r\n        uint256 amount = msg.value * 20000;\r\n        require(totalSupply + amount <= (20000000 * 10 ** uint256(decimals)));\r\n        totalSupply += amount;\r\n        balances[msg.sender] += amount;\r\n        funds += msg.value;\r\n        Transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(!buried[_from]);\r\n        if (buried[_to]) {\r\n            require(balances[_to] + _value <= retentionMax);\r\n        }\r\n        require(_to != 0x0);\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to] + _value > balances[_to]);\r\n        uint256 previousBalances = balances[_from] + balances[_to];\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(!buried[msg.sender]);\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(!buried[msg.sender]);\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(!buried[_from]);\r\n        require(balances[_from] >= _value);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        balances[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payout\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"retentionMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buried\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"epochSet\",\"type\":\"uint256\"}],\"name\":\"amendEpoch\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"director\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"retentionSet\",\"type\":\"uint8\"},{\"name\":\"accuracy\",\"type\":\"uint8\"}],\"name\":\"amendRetention\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bury\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claimAmountSet\",\"type\":\"uint8\"},{\"name\":\"payAmountSet\",\"type\":\"uint8\"},{\"name\":\"feeAmountSet\",\"type\":\"uint8\"},{\"name\":\"accuracy\",\"type\":\"uint8\"}],\"name\":\"amendClaim\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfLock\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDirector\",\"type\":\"address\"}],\"name\":\"transferDirector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"directorLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Bury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_payout\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"}]", "ContractName": "Weko", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://fb6a2d6bd2116066a7e271db5fc703e6f89b1a5129b0d574f14ebf458f0fadad"}]}