{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File interfaces/actions/IAction.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IAction {\r\n    /**\r\n     * @return the total amount of ETH (in wei) required to cover gas\r\n     */\r\n    function getEthRequiredForGas(address payer) external view returns (uint256);\r\n\r\n    function addUsableToken(address token) external returns (bool);\r\n\r\n    function getUsableTokens() external view returns (address[] memory);\r\n\r\n    function isUsable(address token) external view returns (bool);\r\n\r\n    function getActionFee() external view returns (uint256);\r\n\r\n    function getFeeHandler() external view returns (address);\r\n\r\n    function executeActionFee() external returns (uint256);\r\n\r\n    function executeSwapperSlippage() external returns (uint256);\r\n\r\n    function executeFeeHandler() external returns (address);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File interfaces/IPreparable.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IPreparable {\r\n    event ConfigPreparedAddress(bytes32 indexed key, address value, uint256 delay);\r\n    event ConfigPreparedNumber(bytes32 indexed key, uint256 value, uint256 delay);\r\n\r\n    event ConfigUpdatedAddress(bytes32 indexed key, address oldValue, address newValue);\r\n    event ConfigUpdatedNumber(bytes32 indexed key, uint256 oldValue, uint256 newValue);\r\n\r\n    event ConfigReset(bytes32 indexed key);\r\n}\r\n\r\n\r\n// File interfaces/IStrategy.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IStrategy {\r\n    function name() external view returns (string memory);\r\n\r\n    function deposit() external payable returns (bool);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function harvestable() external view returns (uint256);\r\n\r\n    function harvest() external returns (uint256);\r\n\r\n    function strategist() external view returns (address);\r\n\r\n    function shutdown() external returns (bool);\r\n\r\n    function hasPendingFunds() external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IVault.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @title Interface for a Vault\r\n */\r\n\r\ninterface IVault is IPreparable {\r\n    event StrategyActivated(address indexed strategy);\r\n\r\n    event StrategyDeactivated(address indexed strategy);\r\n\r\n    /**\r\n     * @dev 'netProfit' is the profit after all fees have been deducted\r\n     */\r\n    event Harvest(uint256 indexed netProfit, uint256 indexed loss);\r\n\r\n    function initialize(\r\n        address _pool,\r\n        uint256 _debtLimit,\r\n        uint256 _targetAllocation,\r\n        uint256 _bound\r\n    ) external;\r\n\r\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function initializeStrategy(address strategy_) external returns (bool);\r\n\r\n    function withdrawAll() external;\r\n\r\n    function withdrawFromReserve(uint256 amount) external;\r\n\r\n    function getStrategy() external view returns (IStrategy);\r\n\r\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory);\r\n\r\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalUnderlying() external view returns (uint256);\r\n\r\n    function getUnderlying() external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/pool/ILiquidityPool.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\ninterface ILiquidityPool is IPreparable {\r\n    event Deposit(address indexed minter, uint256 depositAmount, uint256 mintedLpTokens);\r\n\r\n    event DepositFor(\r\n        address indexed minter,\r\n        address indexed mintee,\r\n        uint256 depositAmount,\r\n        uint256 mintedLpTokens\r\n    );\r\n\r\n    event Redeem(address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n    event LpTokenSet(address indexed lpToken);\r\n\r\n    event StakerVaultSet(address indexed stakerVault);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens, uint256 minRedeemAmount) external returns (uint256);\r\n\r\n    function calcRedeem(address account, uint256 underlyingAmount) external returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount) external payable returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount, uint256 minTokenAmount) external payable returns (uint256);\r\n\r\n    function depositAndStake(uint256 depositAmount, uint256 minTokenAmount)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function depositFor(address account, uint256 depositAmount) external payable returns (uint256);\r\n\r\n    function depositFor(\r\n        address account,\r\n        uint256 depositAmount,\r\n        uint256 minTokenAmount\r\n    ) external payable returns (uint256);\r\n\r\n    function unstakeAndRedeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function handleLpTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function executeNewVault() external returns (address);\r\n\r\n    function executeNewMaxWithdrawalFee() external returns (uint256);\r\n\r\n    function executeNewRequiredReserves() external returns (uint256);\r\n\r\n    function executeNewReserveDeviation() external returns (uint256);\r\n\r\n    function setLpToken(address _lpToken) external returns (bool);\r\n\r\n    function setStaker() external returns (bool);\r\n\r\n    function isCapped() external returns (bool);\r\n\r\n    function uncap() external returns (bool);\r\n\r\n    function updateDepositCap(uint256 _depositCap) external returns (bool);\r\n\r\n    function getUnderlying() external view returns (address);\r\n\r\n    function getLpToken() external view returns (address);\r\n\r\n    function getWithdrawalFee(address account, uint256 amount) external view returns (uint256);\r\n\r\n    function getVault() external view returns (IVault);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/IGasBank.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IGasBank {\r\n    event Deposit(address indexed account, uint256 value);\r\n    event Withdraw(address indexed account, address indexed receiver, uint256 value);\r\n\r\n    function depositFor(address account) external payable;\r\n\r\n    function withdrawUnused(address account) external;\r\n\r\n    function withdrawFrom(address account, uint256 amount) external;\r\n\r\n    function withdrawFrom(\r\n        address account,\r\n        address payable to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/oracles/IOracleProvider.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IOracleProvider {\r\n    /// @notice Quotes the USD price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the USD price of the asset\r\n    function getPriceUSD(address baseAsset) external view returns (uint256);\r\n\r\n    /// @notice Quotes the ETH price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the ETH price of the asset\r\n    function getPriceETH(address baseAsset) external view returns (uint256);\r\n}\r\n\r\n\r\n// File libraries/AddressProviderMeta.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nlibrary AddressProviderMeta {\r\n    struct Meta {\r\n        bool freezable;\r\n        bool frozen;\r\n    }\r\n\r\n    function fromUInt(uint256 value) internal pure returns (Meta memory) {\r\n        Meta memory meta;\r\n        meta.freezable = (value & 1) == 1;\r\n        meta.frozen = ((value >> 1) & 1) == 1;\r\n        return meta;\r\n    }\r\n\r\n    function toUInt(Meta memory meta) internal pure returns (uint256) {\r\n        uint256 value;\r\n        value |= meta.freezable ? 1 : 0;\r\n        value |= meta.frozen ? 1 << 1 : 0;\r\n        return value;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IAddressProvider.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IAddressProvider is IPreparable {\r\n    event KnownAddressKeyAdded(bytes32 indexed key);\r\n    event StakerVaultListed(address indexed stakerVault);\r\n    event StakerVaultDelisted(address indexed stakerVault);\r\n    event ActionListed(address indexed action);\r\n    event PoolListed(address indexed pool);\r\n    event PoolDelisted(address indexed pool);\r\n    event VaultUpdated(address indexed previousVault, address indexed newVault);\r\n\r\n    /** Key functions */\r\n    function getKnownAddressKeys() external view returns (bytes32[] memory);\r\n\r\n    function freezeAddress(bytes32 key) external;\r\n\r\n    /** Pool functions */\r\n\r\n    function allPools() external view returns (address[] memory);\r\n\r\n    function addPool(address pool) external;\r\n\r\n    function poolsCount() external view returns (uint256);\r\n\r\n    function getPoolAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isPool(address pool) external view returns (bool);\r\n\r\n    function removePool(address pool) external returns (bool);\r\n\r\n    function getPoolForToken(address token) external view returns (ILiquidityPool);\r\n\r\n    function safeGetPoolForToken(address token) external view returns (address);\r\n\r\n    /** Vault functions  */\r\n\r\n    function updateVault(address previousVault, address newVault) external;\r\n\r\n    function allVaults() external view returns (address[] memory);\r\n\r\n    function vaultsCount() external view returns (uint256);\r\n\r\n    function getVaultAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isVault(address vault) external view returns (bool);\r\n\r\n    /** Action functions */\r\n\r\n    function allActions() external view returns (address[] memory);\r\n\r\n    function addAction(address action) external returns (bool);\r\n\r\n    function isAction(address action) external view returns (bool);\r\n\r\n    /** Address functions */\r\n    function initializeAddress(\r\n        bytes32 key,\r\n        address initialAddress,\r\n        bool frezable\r\n    ) external;\r\n\r\n    function initializeAndFreezeAddress(bytes32 key, address initialAddress) external;\r\n\r\n    function getAddress(bytes32 key) external view returns (address);\r\n\r\n    function getAddress(bytes32 key, bool checkExists) external view returns (address);\r\n\r\n    function getAddressMeta(bytes32 key) external view returns (AddressProviderMeta.Meta memory);\r\n\r\n    function prepareAddress(bytes32 key, address newAddress) external returns (bool);\r\n\r\n    function executeAddress(bytes32 key) external returns (address);\r\n\r\n    function resetAddress(bytes32 key) external returns (bool);\r\n\r\n    /** Staker vault functions */\r\n    function allStakerVaults() external view returns (address[] memory);\r\n\r\n    function tryGetStakerVault(address token) external view returns (bool, address);\r\n\r\n    function getStakerVault(address token) external view returns (address);\r\n\r\n    function addStakerVault(address stakerVault) external returns (bool);\r\n\r\n    function isStakerVault(address stakerVault, address token) external view returns (bool);\r\n\r\n    function isStakerVaultRegistered(address stakerVault) external view returns (bool);\r\n\r\n    function isWhiteListedFeeHandler(address feeHandler) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IInflationManager.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IInflationManager {\r\n    event KeeperGaugeListed(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeListed(address indexed token, address indexed ammGauge);\r\n    event KeeperGaugeDelisted(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeDelisted(address indexed token, address indexed ammGauge);\r\n\r\n    /** Pool functions */\r\n\r\n    function setKeeperGauge(address pool, address _keeperGauge) external returns (bool);\r\n\r\n    function setAmmGauge(address token, address _ammGauge) external returns (bool);\r\n\r\n    function getAllAmmGauges() external view returns (address[] memory);\r\n\r\n    function getLpRateForStakerVault(address stakerVault) external view returns (uint256);\r\n\r\n    function getKeeperRateForPool(address pool) external view returns (uint256);\r\n\r\n    function getAmmRateForToken(address token) external view returns (uint256);\r\n\r\n    function getKeeperWeightForPool(address pool) external view returns (uint256);\r\n\r\n    function getAmmWeightForToken(address pool) external view returns (uint256);\r\n\r\n    function getLpPoolWeight(address pool) external view returns (uint256);\r\n\r\n    function getKeeperGaugeForPool(address pool) external view returns (address);\r\n\r\n    function getAmmGaugeForToken(address token) external view returns (address);\r\n\r\n    function isInflationWeightManager(address account) external view returns (bool);\r\n\r\n    function removeStakerVaultFromInflation(address stakerVault, address lpToken) external;\r\n\r\n    function addGaugeForVault(address lpToken) external returns (bool);\r\n\r\n    function whitelistGauge(address gauge) external;\r\n\r\n    function checkpointAllGauges() external returns (bool);\r\n\r\n    function mintRewards(address beneficiary, uint256 amount) external;\r\n\r\n    function addStrategyToDepositStakerVault(address depositStakerVault, address strategyPool)\r\n        external\r\n        returns (bool);\r\n\r\n    /** Weight setter functions **/\r\n\r\n    function prepareLpPoolWeight(address lpToken, uint256 newPoolWeight) external returns (bool);\r\n\r\n    function prepareAmmTokenWeight(address token, uint256 newTokenWeight) external returns (bool);\r\n\r\n    function prepareKeeperPoolWeight(address pool, uint256 newPoolWeight) external returns (bool);\r\n\r\n    function executeLpPoolWeight(address lpToken) external returns (uint256);\r\n\r\n    function executeAmmTokenWeight(address token) external returns (uint256);\r\n\r\n    function executeKeeperPoolWeight(address pool) external returns (uint256);\r\n\r\n    function batchPrepareLpPoolWeights(address[] calldata lpTokens, uint256[] calldata weights)\r\n        external\r\n        returns (bool);\r\n\r\n    function batchPrepareAmmTokenWeights(address[] calldata tokens, uint256[] calldata weights)\r\n        external\r\n        returns (bool);\r\n\r\n    function batchPrepareKeeperPoolWeights(address[] calldata pools, uint256[] calldata weights)\r\n        external\r\n        returns (bool);\r\n\r\n    function batchExecuteLpPoolWeights(address[] calldata lpTokens) external returns (bool);\r\n\r\n    function batchExecuteAmmTokenWeights(address[] calldata tokens) external returns (bool);\r\n\r\n    function batchExecuteKeeperPoolWeights(address[] calldata pools) external returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IController.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IController is IPreparable {\r\n    function addressProvider() external view returns (IAddressProvider);\r\n\r\n    function inflationManager() external view returns (IInflationManager);\r\n\r\n    function addStakerVault(address stakerVault) external returns (bool);\r\n\r\n    function removePool(address pool) external returns (bool);\r\n\r\n    /** Keeper functions */\r\n    function prepareKeeperRequiredStakedBKD(uint256 amount) external;\r\n\r\n    function executeKeeperRequiredStakedBKD() external;\r\n\r\n    function getKeeperRequiredStakedBKD() external view returns (uint256);\r\n\r\n    function canKeeperExecuteAction(address keeper) external view returns (bool);\r\n\r\n    /** Miscellaneous functions */\r\n\r\n    function getTotalEthRequiredForGas(address payer) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/IStakerVault.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IStakerVault {\r\n    event Staked(address indexed account, uint256 amount);\r\n    event Unstaked(address indexed account, uint256 amount);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function initialize(address _token) external;\r\n\r\n    function initializeLpGauge(address _lpGauge) external returns (bool);\r\n\r\n    function stake(uint256 amount) external returns (bool);\r\n\r\n    function stakeFor(address account, uint256 amount) external returns (bool);\r\n\r\n    function unstake(uint256 amount) external returns (bool);\r\n\r\n    function unstakeFor(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transfer(address account, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function getToken() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function stakedAndActionLockedBalanceOf(address account) external view returns (uint256);\r\n\r\n    function actionLockedBalanceOf(address account) external view returns (uint256);\r\n\r\n    function increaseActionLockedBalance(address account, uint256 amount) external returns (bool);\r\n\r\n    function decreaseActionLockedBalance(address account, uint256 amount) external returns (bool);\r\n\r\n    function getStakedByActions() external view returns (uint256);\r\n\r\n    function addStrategy(address strategy) external returns (bool);\r\n\r\n    function getPoolTotalStaked() external view returns (uint256);\r\n\r\n    function prepareLpGauge(address _lpGauge) external returns (bool);\r\n\r\n    function executeLpGauge() external returns (bool);\r\n\r\n    function getLpGauge() external view returns (address);\r\n\r\n    function poolCheckpoint() external returns (bool);\r\n\r\n    function isStrategy(address user) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IVaultReserve.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IVaultReserve {\r\n    event Deposit(address indexed vault, address indexed token, uint256 amount);\r\n    event Withdraw(address indexed vault, address indexed token, uint256 amount);\r\n    event VaultListed(address indexed vault);\r\n\r\n    function deposit(address token, uint256 amount) external payable returns (bool);\r\n\r\n    function withdraw(address token, uint256 amount) external returns (bool);\r\n\r\n    function getBalance(address vault, address token) external view returns (uint256);\r\n\r\n    function canWithdraw(address vault) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IRoleManager.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IRoleManager {\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(bytes32[] memory roles, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IBkdToken.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IBkdToken is IERC20 {\r\n    function mint(address account, uint256 amount) external;\r\n}\r\n\r\n\r\n// File libraries/AddressProviderKeys.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nlibrary AddressProviderKeys {\r\n    bytes32 internal constant _TREASURY_KEY = \"treasury\";\r\n    bytes32 internal constant _GAS_BANK_KEY = \"gasBank\";\r\n    bytes32 internal constant _VAULT_RESERVE_KEY = \"vaultReserve\";\r\n    bytes32 internal constant _SWAPPER_REGISTRY_KEY = \"swapperRegistry\";\r\n    bytes32 internal constant _ORACLE_PROVIDER_KEY = \"oracleProvider\";\r\n    bytes32 internal constant _POOL_FACTORY_KEY = \"poolFactory\";\r\n    bytes32 internal constant _CONTROLLER_KEY = \"controller\";\r\n    bytes32 internal constant _BKD_LOCKER_KEY = \"bkdLocker\";\r\n    bytes32 internal constant _ROLE_MANAGER_KEY = \"roleManager\";\r\n}\r\n\r\n\r\n// File libraries/AddressProviderHelpers.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary AddressProviderHelpers {\r\n    /**\r\n     * @return The address of the treasury.\r\n     */\r\n    function getTreasury(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._TREASURY_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return The gas bank.\r\n     */\r\n    function getGasBank(IAddressProvider provider) internal view returns (IGasBank) {\r\n        return IGasBank(provider.getAddress(AddressProviderKeys._GAS_BANK_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The address of the vault reserve.\r\n     */\r\n    function getVaultReserve(IAddressProvider provider) internal view returns (IVaultReserve) {\r\n        return IVaultReserve(provider.getAddress(AddressProviderKeys._VAULT_RESERVE_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The address of the swapperRegistry.\r\n     */\r\n    function getSwapperRegistry(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._SWAPPER_REGISTRY_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return The oracleProvider.\r\n     */\r\n    function getOracleProvider(IAddressProvider provider) internal view returns (IOracleProvider) {\r\n        return IOracleProvider(provider.getAddress(AddressProviderKeys._ORACLE_PROVIDER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the address of the BKD locker\r\n     */\r\n    function getBKDLocker(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._BKD_LOCKER_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the BKD locker\r\n     */\r\n    function getRoleManager(IAddressProvider provider) internal view returns (IRoleManager) {\r\n        return IRoleManager(provider.getAddress(AddressProviderKeys._ROLE_MANAGER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the controller\r\n     */\r\n    function getController(IAddressProvider provider) internal view returns (IController) {\r\n        return IController(provider.getAddress(AddressProviderKeys._CONTROLLER_KEY));\r\n    }\r\n}\r\n\r\n\r\n// File libraries/Errors.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Error {\r\n    string internal constant ADDRESS_WHITELISTED = \"address already whitelisted\";\r\n    string internal constant ADMIN_ALREADY_SET = \"admin has already been set once\";\r\n    string internal constant ADDRESS_NOT_WHITELISTED = \"address not whitelisted\";\r\n    string internal constant ADDRESS_NOT_FOUND = \"address not found\";\r\n    string internal constant CONTRACT_INITIALIZED = \"contract can only be initialized once\";\r\n    string internal constant CONTRACT_PAUSED = \"contract is paused\";\r\n    string internal constant INVALID_AMOUNT = \"invalid amount\";\r\n    string internal constant INVALID_INDEX = \"invalid index\";\r\n    string internal constant INVALID_VALUE = \"invalid msg.value\";\r\n    string internal constant INVALID_SENDER = \"invalid msg.sender\";\r\n    string internal constant INVALID_TOKEN = \"token address does not match pool's LP token address\";\r\n    string internal constant INVALID_DECIMALS = \"incorrect number of decimals\";\r\n    string internal constant INVALID_ARGUMENT = \"invalid argument\";\r\n    string internal constant INVALID_PARAMETER_VALUE = \"invalid parameter value attempted\";\r\n    string internal constant INVALID_IMPLEMENTATION = \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_POOL_IMPLEMENTATION =\r\n        \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_LP_TOKEN_IMPLEMENTATION =\r\n        \"invalid LP Token implementation for given coin\";\r\n    string internal constant INVALID_VAULT_IMPLEMENTATION =\r\n        \"invalid vault implementation for given coin\";\r\n    string internal constant INVALID_STAKER_VAULT_IMPLEMENTATION =\r\n        \"invalid stakerVault implementation for given coin\";\r\n    string internal constant INSUFFICIENT_BALANCE = \"insufficient balance\";\r\n    string internal constant ADDRESS_ALREADY_SET = \"Address is already set\";\r\n    string internal constant INSUFFICIENT_STRATEGY_BALANCE = \"insufficient strategy balance\";\r\n    string internal constant INSUFFICIENT_FUNDS_RECEIVED = \"insufficient funds received\";\r\n    string internal constant ADDRESS_DOES_NOT_EXIST = \"address does not exist\";\r\n    string internal constant ADDRESS_FROZEN = \"address is frozen\";\r\n    string internal constant ROLE_EXISTS = \"role already exists\";\r\n    string internal constant CANNOT_REVOKE_ROLE = \"cannot revoke role\";\r\n    string internal constant UNAUTHORIZED_ACCESS = \"unauthorized access\";\r\n    string internal constant SAME_ADDRESS_NOT_ALLOWED = \"same address not allowed\";\r\n    string internal constant SELF_TRANSFER_NOT_ALLOWED = \"self-transfer not allowed\";\r\n    string internal constant ZERO_ADDRESS_NOT_ALLOWED = \"zero address not allowed\";\r\n    string internal constant ZERO_TRANSFER_NOT_ALLOWED = \"zero transfer not allowed\";\r\n    string internal constant THRESHOLD_TOO_HIGH = \"threshold is too high, must be under 10\";\r\n    string internal constant INSUFFICIENT_THRESHOLD = \"insufficient threshold\";\r\n    string internal constant NO_POSITION_EXISTS = \"no position exists\";\r\n    string internal constant POSITION_ALREADY_EXISTS = \"position already exists\";\r\n    string internal constant PROTOCOL_NOT_FOUND = \"protocol not found\";\r\n    string internal constant TOP_UP_FAILED = \"top up failed\";\r\n    string internal constant SWAP_PATH_NOT_FOUND = \"swap path not found\";\r\n    string internal constant UNDERLYING_NOT_SUPPORTED = \"underlying token not supported\";\r\n    string internal constant NOT_ENOUGH_FUNDS_WITHDRAWN =\r\n        \"not enough funds were withdrawn from the pool\";\r\n    string internal constant FAILED_TRANSFER = \"transfer failed\";\r\n    string internal constant FAILED_MINT = \"mint failed\";\r\n    string internal constant FAILED_REPAY_BORROW = \"repay borrow failed\";\r\n    string internal constant FAILED_METHOD_CALL = \"method call failed\";\r\n    string internal constant NOTHING_TO_CLAIM = \"there is no claimable balance\";\r\n    string internal constant ERC20_BALANCE_EXCEEDED = \"ERC20: transfer amount exceeds balance\";\r\n    string internal constant INVALID_MINTER =\r\n        \"the minter address of the LP token and the pool address do not match\";\r\n    string internal constant STAKER_VAULT_EXISTS = \"a staker vault already exists for the token\";\r\n    string internal constant DEADLINE_NOT_ZERO = \"deadline must be 0\";\r\n    string internal constant DEADLINE_NOT_SET = \"deadline is 0\";\r\n    string internal constant DEADLINE_NOT_REACHED = \"deadline has not been reached yet\";\r\n    string internal constant DELAY_TOO_SHORT = \"delay be at least 3 days\";\r\n    string internal constant INSUFFICIENT_UPDATE_BALANCE =\r\n        \"insufficient funds for updating the position\";\r\n    string internal constant SAME_AS_CURRENT = \"value must be different to existing value\";\r\n    string internal constant NOT_CAPPED = \"the pool is not currently capped\";\r\n    string internal constant ALREADY_CAPPED = \"the pool is already capped\";\r\n    string internal constant EXCEEDS_DEPOSIT_CAP = \"deposit exceeds deposit cap\";\r\n    string internal constant VALUE_TOO_LOW_FOR_GAS = \"value too low to cover gas\";\r\n    string internal constant NOT_ENOUGH_FUNDS = \"not enough funds to withdraw\";\r\n    string internal constant ESTIMATED_GAS_TOO_HIGH = \"too much ETH will be used for gas\";\r\n    string internal constant DEPOSIT_FAILED = \"deposit failed\";\r\n    string internal constant GAS_TOO_HIGH = \"too much ETH used for gas\";\r\n    string internal constant GAS_BANK_BALANCE_TOO_LOW = \"not enough ETH in gas bank to cover gas\";\r\n    string internal constant INVALID_TOKEN_TO_ADD = \"Invalid token to add\";\r\n    string internal constant INVALID_TOKEN_TO_REMOVE = \"token can not be removed\";\r\n    string internal constant TIME_DELAY_NOT_EXPIRED = \"time delay not expired yet\";\r\n    string internal constant UNDERLYING_NOT_WITHDRAWABLE =\r\n        \"pool does not support additional underlying coins to be withdrawn\";\r\n    string internal constant STRATEGY_SHUT_DOWN = \"Strategy is shut down\";\r\n    string internal constant STRATEGY_DOES_NOT_EXIST = \"Strategy does not exist\";\r\n    string internal constant UNSUPPORTED_UNDERLYING = \"Underlying not supported\";\r\n    string internal constant NO_DEX_SET = \"no dex has been set for token\";\r\n    string internal constant INVALID_TOKEN_PAIR = \"invalid token pair\";\r\n    string internal constant TOKEN_NOT_USABLE = \"token not usable for the specific action\";\r\n    string internal constant ADDRESS_NOT_ACTION = \"address is not registered action\";\r\n    string internal constant INVALID_SLIPPAGE_TOLERANCE = \"Invalid slippage tolerance\";\r\n    string internal constant POOL_NOT_PAUSED = \"Pool must be paused to withdraw from reserve\";\r\n    string internal constant INTERACTION_LIMIT = \"Max of one deposit and withdraw per block\";\r\n    string internal constant GAUGE_EXISTS = \"Gauge already exists\";\r\n    string internal constant GAUGE_DOES_NOT_EXIST = \"Gauge does not exist\";\r\n    string internal constant EXCEEDS_MAX_BOOST = \"Not allowed to exceed maximum boost on Convex\";\r\n    string internal constant PREPARED_WITHDRAWAL =\r\n        \"Cannot relock funds when withdrawal is being prepared\";\r\n    string internal constant ASSET_NOT_SUPPORTED = \"Asset not supported\";\r\n    string internal constant STALE_PRICE = \"Price is stale\";\r\n    string internal constant NEGATIVE_PRICE = \"Price is negative\";\r\n    string internal constant NOT_ENOUGH_BKD_STAKED = \"Not enough BKD tokens staked\";\r\n    string internal constant RESERVE_ACCESS_EXCEEDED = \"Reserve access exceeded\";\r\n}\r\n\r\n\r\n// File contracts/utils/Preparable.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @notice Implements the base logic for a two-phase commit\r\n * @dev This does not implements any access-control so publicly exposed\r\n * callers should make sure to have the proper checks in palce\r\n */\r\ncontract Preparable is IPreparable {\r\n    uint256 private constant _MIN_DELAY = 3 days;\r\n\r\n    mapping(bytes32 => address) public pendingAddresses;\r\n    mapping(bytes32 => uint256) public pendingUInts256;\r\n\r\n    mapping(bytes32 => address) public currentAddresses;\r\n    mapping(bytes32 => uint256) public currentUInts256;\r\n\r\n    /**\r\n     * @dev Deadlines shares the same namespace regardless of the type\r\n     * of the pending variable so this needs to be enforced in the caller\r\n     */\r\n    mapping(bytes32 => uint256) public deadlines;\r\n\r\n    function _prepareDeadline(bytes32 key, uint256 delay) internal {\r\n        require(deadlines[key] == 0, Error.DEADLINE_NOT_ZERO);\r\n        require(delay >= _MIN_DELAY, Error.DELAY_TOO_SHORT);\r\n        deadlines[key] = block.timestamp + delay;\r\n    }\r\n\r\n    /**\r\n     * @notice Prepares an uint256 that should be commited to the contract\r\n     * after `_MIN_DELAY` elapsed\r\n     * @param value The value to prepare\r\n     * @return `true` if success.\r\n     */\r\n    function _prepare(\r\n        bytes32 key,\r\n        uint256 value,\r\n        uint256 delay\r\n    ) internal returns (bool) {\r\n        _prepareDeadline(key, delay);\r\n        pendingUInts256[key] = value;\r\n        emit ConfigPreparedNumber(key, value, delay);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Same as `_prepare(bytes32,uint256,uint256)` but uses a default delay\r\n     */\r\n    function _prepare(bytes32 key, uint256 value) internal returns (bool) {\r\n        return _prepare(key, value, _MIN_DELAY);\r\n    }\r\n\r\n    /**\r\n     * @notice Prepares an address that should be commited to the contract\r\n     * after `_MIN_DELAY` elapsed\r\n     * @param value The value to prepare\r\n     * @return `true` if success.\r\n     */\r\n    function _prepare(\r\n        bytes32 key,\r\n        address value,\r\n        uint256 delay\r\n    ) internal returns (bool) {\r\n        _prepareDeadline(key, delay);\r\n        pendingAddresses[key] = value;\r\n        emit ConfigPreparedAddress(key, value, delay);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Same as `_prepare(bytes32,address,uint256)` but uses a default delay\r\n     */\r\n    function _prepare(bytes32 key, address value) internal returns (bool) {\r\n        return _prepare(key, value, _MIN_DELAY);\r\n    }\r\n\r\n    /**\r\n     * @notice Reset a uint256 key\r\n     * @return `true` if success.\r\n     */\r\n    function _resetUInt256Config(bytes32 key) internal returns (bool) {\r\n        require(deadlines[key] != 0, Error.DEADLINE_NOT_ZERO);\r\n        deadlines[key] = 0;\r\n        pendingUInts256[key] = 0;\r\n        emit ConfigReset(key);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Reset an address key\r\n     * @return `true` if success.\r\n     */\r\n    function _resetAddressConfig(bytes32 key) internal returns (bool) {\r\n        require(deadlines[key] != 0, Error.DEADLINE_NOT_ZERO);\r\n        deadlines[key] = 0;\r\n        pendingAddresses[key] = address(0);\r\n        emit ConfigReset(key);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the deadline of the key and reset it\r\n     */\r\n    function _executeDeadline(bytes32 key) internal {\r\n        uint256 deadline = deadlines[key];\r\n        require(block.timestamp >= deadline, Error.DEADLINE_NOT_REACHED);\r\n        require(deadline != 0, Error.DEADLINE_NOT_SET);\r\n        deadlines[key] = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Execute uint256 config update (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\r\n     * @return New value.\r\n     */\r\n    function _executeUInt256(bytes32 key) internal returns (uint256) {\r\n        _executeDeadline(key);\r\n        uint256 newValue = pendingUInts256[key];\r\n        _setConfig(key, newValue);\r\n        return newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Execute address config update (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\r\n     * @return New value.\r\n     */\r\n    function _executeAddress(bytes32 key) internal returns (address) {\r\n        _executeDeadline(key);\r\n        address newValue = pendingAddresses[key];\r\n        _setConfig(key, newValue);\r\n        return newValue;\r\n    }\r\n\r\n    function _setConfig(bytes32 key, address value) internal returns (address) {\r\n        address oldValue = currentAddresses[key];\r\n        currentAddresses[key] = value;\r\n        pendingAddresses[key] = address(0);\r\n        deadlines[key] = 0;\r\n        emit ConfigUpdatedAddress(key, oldValue, value);\r\n        return value;\r\n    }\r\n\r\n    function _setConfig(bytes32 key, uint256 value) internal returns (uint256) {\r\n        uint256 oldValue = currentUInts256[key];\r\n        currentUInts256[key] = value;\r\n        pendingUInts256[key] = 0;\r\n        deadlines[key] = 0;\r\n        emit ConfigUpdatedNumber(key, oldValue, value);\r\n        return value;\r\n    }\r\n}\r\n\r\n\r\n// File libraries/Roles.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Roles {\r\n    bytes32 internal constant GOVERNANCE = \"governance\";\r\n    bytes32 internal constant ADDRESS_PROVIDER = \"address_provider\";\r\n    bytes32 internal constant POOL_FACTORY = \"pool_factory\";\r\n    bytes32 internal constant CONTROLLER = \"controller\";\r\n    bytes32 internal constant GAUGE_ZAP = \"gauge_zap\";\r\n    bytes32 internal constant MAINTENANCE = \"maintenance\";\r\n    bytes32 internal constant INFLATION_MANAGER = \"inflation_manager\";\r\n    bytes32 internal constant POOL = \"pool\";\r\n    bytes32 internal constant VAULT = \"vault\";\r\n}\r\n\r\n\r\n// File contracts/access/AuthorizationBase.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @notice Provides modifiers for authorization\r\n */\r\nabstract contract AuthorizationBase {\r\n    /**\r\n     * @notice Only allows a sender with `role` to perform the given action\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        require(_roleManager().hasRole(role, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with GOVERNANCE role to perform the given action\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_roleManager().hasRole(Roles.GOVERNANCE, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles2(bytes32 role1, bytes32 role2) {\r\n        require(_roleManager().hasAnyRole(role1, role2, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles3(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3\r\n    ) {\r\n        require(\r\n            _roleManager().hasAnyRole(role1, role2, role3, msg.sender),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n        _;\r\n    }\r\n\r\n    function roleManager() external view virtual returns (IRoleManager) {\r\n        return _roleManager();\r\n    }\r\n\r\n    function _roleManager() internal view virtual returns (IRoleManager);\r\n}\r\n\r\n\r\n// File contracts/access/Authorization.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ncontract Authorization is AuthorizationBase {\r\n    IRoleManager internal immutable __roleManager;\r\n\r\n    constructor(IRoleManager roleManager) {\r\n        __roleManager = roleManager;\r\n    }\r\n\r\n    function _roleManager() internal view override returns (IRoleManager) {\r\n        return __roleManager;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Controller.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Controller is IController, Authorization, Preparable {\r\n    using AddressProviderHelpers for IAddressProvider;\r\n\r\n    IAddressProvider public immutable override addressProvider;\r\n\r\n    IInflationManager public inflationManager;\r\n\r\n    bytes32 internal constant _KEEPER_REQUIRED_STAKED_BKD = \"KEEPER_REQUIRED_STAKED_BKD\";\r\n\r\n    constructor(IAddressProvider _addressProvider)\r\n        Authorization(_addressProvider.getRoleManager())\r\n    {\r\n        addressProvider = _addressProvider;\r\n    }\r\n\r\n    function setInflationManager(address _inflationManager) external onlyGovernance {\r\n        require(address(inflationManager) == address(0), Error.ADDRESS_ALREADY_SET);\r\n        require(_inflationManager != address(0), Error.INVALID_ARGUMENT);\r\n        inflationManager = IInflationManager(_inflationManager);\r\n    }\r\n\r\n    function addStakerVault(address stakerVault)\r\n        external\r\n        override\r\n        onlyRoles2(Roles.GOVERNANCE, Roles.POOL_FACTORY)\r\n        returns (bool)\r\n    {\r\n        if (!addressProvider.addStakerVault(stakerVault)) {\r\n            return false;\r\n        }\r\n        if (address(inflationManager) != address(0)) {\r\n            address lpGauge = IStakerVault(stakerVault).getLpGauge();\r\n            if (lpGauge != address(0)) {\r\n                inflationManager.whitelistGauge(lpGauge);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delists pool.\r\n     * @param pool Address of pool to delist.\r\n     * @return `true` if successful.\r\n     */\r\n    function removePool(address pool) external override onlyGovernance returns (bool) {\r\n        if (!addressProvider.removePool(pool)) {\r\n            return false;\r\n        }\r\n        address lpToken = ILiquidityPool(pool).getLpToken();\r\n\r\n        if (address(inflationManager) != address(0)) {\r\n            (bool exists, address stakerVault) = addressProvider.tryGetStakerVault(lpToken);\r\n            if (exists) {\r\n                inflationManager.removeStakerVaultFromInflation(stakerVault, lpToken);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Prepares the minimum amount of staked BKD required by a keeper\r\n     */\r\n    function prepareKeeperRequiredStakedBKD(uint256 amount) external override onlyGovernance {\r\n        require(addressProvider.getBKDLocker() != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\r\n        _prepare(_KEEPER_REQUIRED_STAKED_BKD, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the minimum amount of staked BKD required by a keeper to the prepared value\r\n     */\r\n    function executeKeeperRequiredStakedBKD() external override {\r\n        _executeUInt256(_KEEPER_REQUIRED_STAKED_BKD);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if the given keeper has enough staked BKD to execute actions\r\n     */\r\n    function canKeeperExecuteAction(address keeper) external view override returns (bool) {\r\n        uint256 requiredBKD = getKeeperRequiredStakedBKD();\r\n        return\r\n            requiredBKD == 0 ||\r\n            IERC20(addressProvider.getBKDLocker()).balanceOf(keeper) >= requiredBKD;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the minimum amount of staked BKD required by a keeper\r\n     */\r\n    function getKeeperRequiredStakedBKD() public view override returns (uint256) {\r\n        return currentUInts256[_KEEPER_REQUIRED_STAKED_BKD];\r\n    }\r\n\r\n    /**\r\n     * @return the total amount of ETH require by `payer` to cover the fees for\r\n     * positions registered in all actions\r\n     */\r\n    function getTotalEthRequiredForGas(address payer) external view override returns (uint256) {\r\n        // solhint-disable-previous-line ordering\r\n        uint256 totalEthRequired = 0;\r\n        address[] memory actions = addressProvider.allActions();\r\n        uint256 numActions = actions.length;\r\n        for (uint256 i = 0; i < numActions; i++) {\r\n            totalEthRequired += IAction(actions[i]).getEthRequiredForGas(payer);\r\n        }\r\n        return totalEthRequired;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"_addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"ConfigPreparedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"ConfigPreparedNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"ConfigReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ConfigUpdatedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ConfigUpdatedNumber\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerVault\",\"type\":\"address\"}],\"name\":\"addStakerVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"canKeeperExecuteAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentUInts256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deadlines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeKeeperRequiredStakedBKD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeeperRequiredStakedBKD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"getTotalEthRequiredForGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationManager\",\"outputs\":[{\"internalType\":\"contract IInflationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingUInts256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"prepareKeeperRequiredStakedBKD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inflationManager\",\"type\":\"address\"}],\"name\":\"setInflationManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Controller", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000139c15e21b0f6e43fc397face5de5b7d5ae6874a", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://16544efd91fdf052c3396f8f777f6fdb8d2b74222a47ffa44579aa9a2dbbef13"}]}