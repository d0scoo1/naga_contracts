{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/RoolahShopV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"./utils/SignatureVerifier.sol\\\";\\r\\nimport \\\"./interfaces/IBurnableERC721.sol\\\";\\r\\n\\r\\ncontract RoolahShopUpgradableV2 is\\r\\n    SignatureVerifier,\\r\\n    ERC721Holder,\\r\\n    ERC1155Holder,\\r\\n    Initializable,\\r\\n    OwnableUpgradeable\\r\\n{\\r\\n    // -------------------------------- EVENTS V1 --------------------------------------\\r\\n\\r\\n    event TransactionPosted(\\r\\n        bytes32 indexed listingId,\\r\\n        bytes32 indexed transactionId,\\r\\n        address indexed user,\\r\\n        uint256 quantity\\r\\n    );\\r\\n\\r\\n    // deprecated token received/sent events from V1\\r\\n\\r\\n    // -------------------------------- STORAGE V1 -------------------------------------\\r\\n\\r\\n    /**\\r\\n     * The ROOLAH contract address.\\r\\n     */\\r\\n    IERC20 public roolahContract;\\r\\n\\r\\n    /**\\r\\n     * The RooTroop NFT contract address.\\r\\n     */\\r\\n    IBurnableERC721 public rooTroopContract;\\r\\n\\r\\n    /**\\r\\n     * The recipient of all ETH sent to the contract.\\r\\n     */\\r\\n    address public etherRecipient;\\r\\n\\r\\n    /**\\r\\n     * The ROOLAH gained by burning one RooTroop NFT (RIP).\\r\\n     */\\r\\n    uint256 public rooToRoolahConversion;\\r\\n\\r\\n    /**\\r\\n     * The backend message signer's address.\\r\\n     */\\r\\n    address public messageSigner;\\r\\n\\r\\n    /**\\r\\n     A mapping of GUID listing ids to number of units sold.\\r\\n     */\\r\\n    mapping(bytes32 => uint256) public unitsSold;\\r\\n\\r\\n    /**\\r\\n     * A nested mapping of listing ids to user addresses to\\r\\n     * the number that the user has purchased.\\r\\n     */\\r\\n    mapping(bytes32 => mapping(address => uint256)) public userPurchases;\\r\\n\\r\\n    // -------------------------------- INITIALIZER V1 ---------------------------------\\r\\n\\r\\n    /**\\r\\n     * Initializes the proxy contract.\\r\\n     *\\r\\n     * @param rooTroopNFT - the address of the RooTroop NFT contract.\\r\\n     * @param roolah - the address of the ROOLAH contract.\\r\\n     * @param rooToRoolahRate - the conversion rate in ROOLAH for burning one RooTroop NFT.\\r\\n     * @param etherReceiver - the recipient of all ETH sent to the contract.\\r\\n     */\\r\\n    function initialize(\\r\\n        address rooTroopNFT,\\r\\n        address roolah,\\r\\n        uint256 rooToRoolahRate,\\r\\n        address etherReceiver,\\r\\n        address signer\\r\\n    ) public initializer {\\r\\n        __Ownable_init();\\r\\n        _updateDependencies(rooTroopNFT, roolah);\\r\\n        _setRooToRoolahConversionRate(rooToRoolahRate);\\r\\n        _setEtherReceiver(etherReceiver);\\r\\n        _setMessageSigner(signer);\\r\\n    }\\r\\n\\r\\n    // -------------------------------- PUBLIC ACCESS V1 -------------------------------\\r\\n\\r\\n    /**\\r\\n     * Submits a transaction to the contract to be logged on the blockchain.\\r\\n     *\\r\\n     * @param listingId - the GUID listingId provided by the backend.\\r\\n     * @param transactionId - the id of the transaction.\\r\\n     *                        This will allow centralized services to tie the transaction to personal details.\\r\\n     * @param quantity - the number of units to transact upon.\\r\\n     * @param maxPerUser - the listing max per user.\\r\\n     * @param supply - the listing maximum supply.\\r\\n     * @param priceETH - the listing unit price in ETH.\\r\\n     * @param priceROOLAH - the listing unit price in ROOLAH.\\r\\n     * @param requiredTokens - the listing's required held tokens to allow transacting.\\r\\n     * @param signature - the signature that will verify all of the listing data.\\r\\n     */\\r\\n    function transact(\\r\\n        bytes32 listingId,\\r\\n        bytes32 transactionId,\\r\\n        uint256 quantity,\\r\\n        uint256 maxPerUser,\\r\\n        uint256 supply,\\r\\n        uint256 priceETH,\\r\\n        uint256 priceROOLAH,\\r\\n        uint256 expires,\\r\\n        address[] calldata requiredTokens,\\r\\n        bytes memory signature\\r\\n    ) external payable {\\r\\n        require(expires > block.timestamp, \\\"Signature expired\\\");\\r\\n\\r\\n        require(\\r\\n            supply == 0 || supply >= unitsSold[listingId] + quantity,\\r\\n            \\\"Exceeds global max\\\"\\r\\n        );\\r\\n        require(\\r\\n            maxPerUser == 0 ||\\r\\n                maxPerUser >= userPurchases[listingId][msg.sender] + quantity,\\r\\n            \\\"Exceeds user max\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _verifySignature(\\r\\n                listingId,\\r\\n                transactionId,\\r\\n                maxPerUser,\\r\\n                supply,\\r\\n                priceETH,\\r\\n                priceROOLAH,\\r\\n                expires,\\r\\n                requiredTokens,\\r\\n                signature\\r\\n            ),\\r\\n            \\\"Invalid signature\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            requiredTokens.length == 0 ||\\r\\n                _holdsToken(msg.sender, requiredTokens),\\r\\n            \\\"Not a holder\\\"\\r\\n        );\\r\\n\\r\\n        if (priceETH > 0) {\\r\\n            require(msg.value == priceETH * quantity, \\\"Bad value\\\");\\r\\n            (bool success, ) = etherRecipient.call{value: priceETH * quantity}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            require(success, \\\"ETH tx failed\\\");\\r\\n        }\\r\\n\\r\\n        userPurchases[listingId][msg.sender] += quantity;\\r\\n        unitsSold[listingId] += quantity;\\r\\n\\r\\n        if (priceROOLAH > 0)\\r\\n            roolahContract.transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                priceROOLAH * quantity\\r\\n            );\\r\\n\\r\\n        emit TransactionPosted(listingId, transactionId, msg.sender, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Burns the token ids passed to the function,\\r\\n     * provided the contract is approved to access them.\\r\\n     * Then, the user is returned the conversion in ROOLAH.\\r\\n     *\\r\\n     * @param tokenIds - the token ids to pull in and burn\\r\\n     */\\r\\n    function burnRoos(uint256[] calldata tokenIds) external {\\r\\n        for (uint256 i; i < tokenIds.length; i++) {\\r\\n            rooTroopContract.transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                tokenIds[i]\\r\\n            );\\r\\n\\r\\n            // RIP, sweet prince\\r\\n            rooTroopContract.burn(tokenIds[i]);\\r\\n        }\\r\\n\\r\\n        roolahContract.transfer(\\r\\n            msg.sender,\\r\\n            tokenIds.length * rooToRoolahConversion\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Submits a transaction to the contract to be logged on the blockchain and results in the transfer of an NFT.\\r\\n     *\\r\\n     * @param listingId - the GUID listingId provided by the backend.\\r\\n     * @param transactionId - the id of the transaction.\\r\\n     *                        This will allow centralized services to tie the transaction to personal details.\\r\\n     * @param tokenAddresses - the addresses of the token contracts.\\r\\n     * @param tokenIds - the token ids to send (parallel with tokenAddresses).\\r\\n     * @param priceETH - the listing unit price in ETH.\\r\\n     * @param priceROOLAH - the listing unit price in ROOLAH.\\r\\n     * @param requiredTokens - the listing's required held tokens to allow transacting.\\r\\n     * @param signature - the signature that will verify all of the listing data.\\r\\n     */\\r\\n    function transactNFT(\\r\\n        bytes32 listingId,\\r\\n        bytes32 transactionId,\\r\\n        address[] calldata tokenAddresses,\\r\\n        uint256[] calldata tokenIds,\\r\\n        uint256 priceETH,\\r\\n        uint256 priceROOLAH,\\r\\n        uint256 expires,\\r\\n        address[] memory requiredTokens,\\r\\n        bytes memory signature\\r\\n    ) external payable {\\r\\n        require(expires > block.timestamp, \\\"Signature expired\\\");\\r\\n        require(tokenIds.length == tokenAddresses.length, \\\"Length mismatch\\\");\\r\\n\\r\\n        require(\\r\\n            _verifySignatureNFT(\\r\\n                listingId,\\r\\n                transactionId,\\r\\n                priceETH,\\r\\n                priceROOLAH,\\r\\n                expires,\\r\\n                requiredTokens,\\r\\n                tokenAddresses,\\r\\n                tokenIds,\\r\\n                signature\\r\\n            ),\\r\\n            \\\"Invalid signature\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            requiredTokens.length == 0 ||\\r\\n                _holdsToken(msg.sender, requiredTokens),\\r\\n            \\\"Not a holder\\\"\\r\\n        );\\r\\n\\r\\n        if (priceETH > 0) {\\r\\n            require(msg.value == priceETH, \\\"Bad value\\\");\\r\\n            (bool success, ) = etherRecipient.call{value: priceETH}(\\\"\\\");\\r\\n            require(success, \\\"ETH tx failed\\\");\\r\\n        }\\r\\n\\r\\n        userPurchases[listingId][msg.sender] += 1;\\r\\n        unitsSold[listingId] += 1;\\r\\n\\r\\n        if (priceROOLAH > 0)\\r\\n            roolahContract.transferFrom(msg.sender, address(this), priceROOLAH);\\r\\n\\r\\n        for (uint256 i; i < tokenIds.length; i++) {\\r\\n            IERC721(tokenAddresses[i]).safeTransferFrom(\\r\\n                address(this),\\r\\n                msg.sender,\\r\\n                tokenIds[i]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit TransactionPosted(listingId, transactionId, msg.sender, 1);\\r\\n    }\\r\\n\\r\\n    // -------------------------------- OWNER ONLY V1 ----------------------------------\\r\\n\\r\\n    /**\\r\\n     * Updates pointers to the ROOLAH contract and RooTroop NFT contract.\\r\\n     * @dev owner only.\\r\\n     *\\r\\n     * @param rooTroopNFT - the address of the RooTroop NFT contract.\\r\\n     * @param roolah - the address of the ROOLAH contract.\\r\\n     */\\r\\n    function updateDependencies(address rooTroopNFT, address roolah)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        _updateDependencies(rooTroopNFT, roolah);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Updates the conversion rate when burning a RooTroop NFT for ROOLAH.\\r\\n     * @dev owner only.\\r\\n     *\\r\\n     * @param rate - the value in ROOLAH received for burning one RooTroop NFT.\\r\\n     */\\r\\n    function setRooToRoolahConversionRate(uint256 rate) public onlyOwner {\\r\\n        _setRooToRoolahConversionRate(rate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Updates the message signer.\\r\\n     * @dev owner only.\\r\\n     *\\r\\n     * @param signer - the new backend message signer.\\r\\n     */\\r\\n    function setMessageSigner(address signer) public onlyOwner {\\r\\n        _setMessageSigner(signer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Updates the address that receives ETH transferred into the contract.\\r\\n     * @dev owner only.\\r\\n     *\\r\\n     * @param receiver - the new receiver address.\\r\\n     */\\r\\n    function setEtherReceiver(address receiver) public onlyOwner {\\r\\n        _setEtherReceiver(receiver);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Removes the given amount of ROOLAH from the contract.\\r\\n     * @dev owner only.\\r\\n     *\\r\\n     * @param to - the address to send the ROOLAH to.\\r\\n     * @param amount - the amount of ROOLAH to send.\\r\\n     */\\r\\n    function withdrawRoolah(address to, uint256 amount) public onlyOwner {\\r\\n        roolahContract.transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieves an NFT from the contract vault\\r\\n     *\\r\\n     * @param token - the token address\\r\\n     * @param tokenId - the token id\\r\\n     */\\r\\n    function retrieveNFT(\\r\\n        address token,\\r\\n        uint256 tokenId,\\r\\n        address to\\r\\n    ) public onlyOwner {\\r\\n        IERC721(token).transferFrom(address(this), to, tokenId);\\r\\n    }\\r\\n\\r\\n    // --------------------------------- INTERNAL V1 ------------------------------------\\r\\n\\r\\n    function _updateDependencies(address rooTroopNFT, address roolah) internal {\\r\\n        roolahContract = IERC20(roolah);\\r\\n        rooTroopContract = IBurnableERC721(rooTroopNFT);\\r\\n    }\\r\\n\\r\\n    function _setRooToRoolahConversionRate(uint256 rate) internal {\\r\\n        rooToRoolahConversion = rate;\\r\\n    }\\r\\n\\r\\n    function _setMessageSigner(address signer) internal {\\r\\n        messageSigner = signer;\\r\\n    }\\r\\n\\r\\n    function _setEtherReceiver(address receiver) internal {\\r\\n        etherRecipient = receiver;\\r\\n    }\\r\\n\\r\\n    function _holdsToken(address user, address[] memory tokens)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i; i < tokens.length; i++) {\\r\\n            if (IERC20(tokens[i]).balanceOf(user) > 0) return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function _verifySignature(\\r\\n        bytes32 listingId,\\r\\n        bytes32 transactionId,\\r\\n        uint256 maxPerUser,\\r\\n        uint256 supply,\\r\\n        uint256 priceETH,\\r\\n        uint256 priceROOLAH,\\r\\n        uint256 expires,\\r\\n        address[] calldata requiredTokens,\\r\\n        bytes memory signature\\r\\n    ) internal view returns (bool) {\\r\\n        bytes memory packed = abi.encodePacked(\\r\\n            listingId,\\r\\n            transactionId,\\r\\n            maxPerUser,\\r\\n            supply,\\r\\n            priceETH,\\r\\n            priceROOLAH,\\r\\n            expires\\r\\n        );\\r\\n\\r\\n        for (uint256 i; i < requiredTokens.length; i++) {\\r\\n            packed = abi.encodePacked(packed, requiredTokens[i]);\\r\\n        }\\r\\n\\r\\n        bytes32 messageHash = keccak256(packed);\\r\\n\\r\\n        return verify(messageSigner, messageHash, signature);\\r\\n    }\\r\\n\\r\\n    function _verifySignatureNFT(\\r\\n        bytes32 listingId,\\r\\n        bytes32 transactionId,\\r\\n        uint256 priceETH,\\r\\n        uint256 priceROOLAH,\\r\\n        uint256 expires,\\r\\n        address[] memory requiredTokens,\\r\\n        address[] calldata tokenAddresses,\\r\\n        uint256[] calldata tokenIds,\\r\\n        bytes memory signature\\r\\n    ) internal view returns (bool) {\\r\\n        bytes memory packed = abi.encodePacked(\\r\\n            listingId,\\r\\n            transactionId,\\r\\n            priceETH,\\r\\n            priceROOLAH,\\r\\n            expires\\r\\n        );\\r\\n\\r\\n        uint256 i;\\r\\n        for (i; i < tokenIds.length; i++) {\\r\\n            packed = abi.encodePacked(packed, tokenAddresses[i], tokenIds[i]);\\r\\n        }\\r\\n        for (i = 0; i < requiredTokens.length; i++) {\\r\\n            packed = abi.encodePacked(packed, requiredTokens[i]);\\r\\n        }\\r\\n\\r\\n        bytes32 messageHash = keccak256(packed);\\r\\n\\r\\n        return verify(messageSigner, messageHash, signature);\\r\\n    }\\r\\n\\r\\n    // ------------------------------- OWNER ONLY V2 ----------------------------------------\\r\\n\\r\\n    /**\\r\\n     * Forwards a call to a specified contract address, targeting the given function\\r\\n     * with the provided abi encoded parameters.\\r\\n     *\\r\\n     * This will allow the market to mint directly from projects, etc. (essentially, allows the contract to behave like a wallet)\\r\\n     *\\r\\n     * @param contractAt - the address of the target contract\\r\\n     * @param encodedCall - the ABI encoded function call (use web3.eth.abi.encodeFunctionCall)\\r\\n     */\\r\\n    function externalCall(address contractAt, bytes calldata encodedCall)\\r\\n        external\\r\\n        payable\\r\\n        onlyOwner\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = contractAt.call{\\r\\n            value: msg.value,\\r\\n            gas: gasleft()\\r\\n        }(encodedCall);\\r\\n\\r\\n        if (success == false) {\\r\\n            assembly {\\r\\n                let ptr := mload(0x40)\\r\\n                let size := returndatasize()\\r\\n                returndatacopy(ptr, 0, size)\\r\\n                revert(ptr, size)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Pulls in a bunch of ERC721 tokens that the contract has\\r\\n     * been approved to access. Feeds from multiple source contracts.\\r\\n     *\\r\\n     * @param from - the current holder\\r\\n     * @param tokens - the token contract addresses\\r\\n     * @param tokenIds - the token ids (parallel to addresses)\\r\\n     */\\r\\n    function importBulkERC721MultiAddress(\\r\\n        address from,\\r\\n        address[] calldata tokens,\\r\\n        uint256[] calldata tokenIds\\r\\n    ) external onlyOwner {\\r\\n        require(tokens.length == tokenIds.length, \\\"length mismatch\\\");\\r\\n\\r\\n        for (uint256 i; i < tokens.length; i++) {\\r\\n            IERC721(tokens[i]).transferFrom(from, address(this), tokenIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Pulls in a bunch of ERC721 tokens that the contract has\\r\\n     * been approved to access. Feeds from ONE source contract.\\r\\n     *\\r\\n     * @param from - the current holder\\r\\n     * @param token - the token contract address\\r\\n     * @param tokenIds - the token ids (parallel to addresses)\\r\\n     */\\r\\n    function importBulkERC721(\\r\\n        address from,\\r\\n        address token,\\r\\n        uint256[] calldata tokenIds\\r\\n    ) external onlyOwner {\\r\\n        IERC721 source = IERC721(token);\\r\\n        for (uint256 i; i < tokenIds.length; i++) {\\r\\n            source.transferFrom(from, address(this), tokenIds[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/utils/SignatureVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/* Signature Verification\\r\\n\\r\\nHow to Sign and Verify\\r\\n# Signing\\r\\n1. Create message to sign\\r\\n2. Hash the message\\r\\n3. Sign the hash (off chain, keep your private key secret)\\r\\n\\r\\n# Verify\\r\\n1. Recreate hash from the original message\\r\\n2. Recover signer from signature and hash\\r\\n3. Compare recovered signer to claimed signer\\r\\n*/\\r\\n\\r\\ncontract SignatureVerifier {\\r\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        /*\\r\\n        Signature is produced by signing a keccak256 hash with the following format:\\r\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\r\\n        */\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    signer = 0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd\\r\\n    to = 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\\r\\n    amount = 123\\r\\n    message = \\\"coffee and donuts\\\"\\r\\n    nonce = 1\\r\\n    signature =\\r\\n        0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\\r\\n    */\\r\\n    function verify(\\r\\n        address signer,\\r\\n        bytes32 messageHash,\\r\\n        bytes memory signature\\r\\n    ) public pure returns (bool) {\\r\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\r\\n\\r\\n        return recoverSigner(ethSignedMessageHash, signature) == signer;\\r\\n    }\\r\\n\\r\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\r\\n        public\\r\\n        pure\\r\\n        returns (address)\\r\\n    {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\r\\n\\r\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\r\\n    }\\r\\n\\r\\n    function splitSignature(bytes memory sig)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\r\\n\\r\\n        assembly {\\r\\n            /*\\r\\n            First 32 bytes stores the length of the signature\\r\\n\\r\\n            add(sig, 32) = pointer of sig + 32\\r\\n            effectively, skips first 32 bytes of signature\\r\\n\\r\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\r\\n            */\\r\\n\\r\\n            // first 32 bytes, after the length prefix\\r\\n            r := mload(add(sig, 32))\\r\\n            // second 32 bytes\\r\\n            s := mload(add(sig, 64))\\r\\n            // final byte (first byte of the next 32 bytes)\\r\\n            v := byte(0, mload(add(sig, 96)))\\r\\n        }\\r\\n\\r\\n        // implicitly return (r, s, v)\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IBurnableERC721.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.7;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBurnableERC721 is IERC721 {\\n    function burn(uint256 tokenId) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"TransactionPosted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnRoos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAt\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedCall\",\"type\":\"bytes\"}],\"name\":\"externalCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"importBulkERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"importBulkERC721MultiAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rooTroopNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"roolah\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rooToRoolahRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"etherReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rooToRoolahConversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rooTroopContract\",\"outputs\":[{\"internalType\":\"contract IBurnableERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roolahContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setEtherReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setMessageSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRooToRoolahConversionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceROOLAH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"requiredTokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transact\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"priceETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceROOLAH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"requiredTokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transactNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"unitsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rooTroopNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"roolah\",\"type\":\"address\"}],\"name\":\"updateDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRoolah\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RoolahShopUpgradableV2", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}