{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: LiquidityBalanceCheckers.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\nabstract contract BalanceChecker\r\n{\r\n    function balances(address[] calldata users, address[] calldata tokens) \r\n        external \r\n        view \r\n        virtual\r\n        returns (uint[] memory);\r\n}\r\n\r\ncontract LPBalanceChecker\r\n{\r\n    function getBalances(\r\n            BalanceChecker bc,\r\n            IERC20 _LPToken,\r\n            IERC20 _tokenToCount,\r\n            address[] calldata _addressesToCount)\r\n        public\r\n        view\r\n        returns (uint[] memory balances)\r\n    {\r\n        // goal:\r\n        // 1. returns the balance of the _tokenToCount that the _addressesToCount hold indirectly via _LPTokens\r\n\r\n        // logic:\r\n        // * get the balances of LPtokens for _addressesToCount\r\n        // * get the totalSupply of _LPToken\r\n        // * get the balance of _tokenToCount inside the contract _LPToken\r\n        // * returns the proportional balances * the LPTokenBalances \r\n\r\n        address[] memory LPTokens = new address[](1);\r\n        LPTokens[0] = address(_LPToken);\r\n        balances = bc.balances(_addressesToCount, LPTokens);\r\n        uint totalSupply = _LPToken.totalSupply();\r\n        uint relevantBalanceOfTargetToken = _tokenToCount.balanceOf(address(_LPToken));\r\n        for (uint i=0; i < balances.length; i++)\r\n        {\r\n            balances[i] = relevantBalanceOfTargetToken * balances[i] / totalSupply;\r\n        }\r\n    }    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract BalanceChecker\",\"name\":\"bc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_LPToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenToCount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addressesToCount\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LPBalanceChecker", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b33e20ddc163edbb4c094b6a5011a4fcb3742bac1c3cd129306ac426a3b381d8"}]}