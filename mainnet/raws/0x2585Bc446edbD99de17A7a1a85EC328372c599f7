{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/helpers/BeanstalkGetters.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @author Publius\\n * @title BeanStalkGetters provides an interface to load particular data.\\n**/\\n\\ninterface IBS {\\n    struct Bip {\\n        address proposer;\\n        uint32 start;\\n        uint32 period;\\n        bool executed;\\n        int pauseOrUnpause;\\n        uint128 timestamp;\\n        uint256 roots;\\n        uint256 endTotalRoots;\\n    }\\n\\n    struct Fundraiser {\\n        address payee;\\n        address token;\\n        uint256 total;\\n        uint256 remaining;\\n        uint256 start;\\n    }\\n\\n    function totalRoots() external view returns (uint256);\\n    function season() external view returns (uint32);\\n\\n    function numberOfBips() external view returns (uint32);\\n    function bip(uint32 bipId) external view returns (Bip memory);\\n    function voted(address account, uint32 bipId) external view returns (bool);\\n    function activeBips() external view returns (uint32[] memory);\\n\\n    function numberOfFundraisers() external view returns (uint32);\\n    function fundraiser(uint32 id) external view returns (Fundraiser memory);\\n}\\n\\ncontract BeanstalkGetters {\\n    struct Bip {\\n        address proposer;\\n        uint32 start;\\n        uint32 period;\\n        bool executed;\\n        int pauseOrUnpause;\\n        uint128 timestamp;\\n        uint256 roots;\\n        uint256 totalRoots;\\n        bool active;\\n    }\\n\\n    struct Vote {\\n        uint32 bipId;\\n        bool vote;\\n    }\\n\\n    IBS private constant beanstalk = IBS(0xC1E088fC1323b20BCBee9bd1B9fC9546db5624C5);\\n\\n    function bips() external view returns (Bip[] memory bs) {\\n        uint256 totalRoots = beanstalk.totalRoots();\\n        uint32 numBips = beanstalk.numberOfBips();\\n        bs = new Bip[](numBips);\\n        for (uint32 i = 0; i < numBips; i++) {\\n            bs[i] = convertToBip(beanstalk.bip(i), totalRoots);\\n        }\\n\\n        uint32[] memory active = beanstalk.activeBips();\\n        for (uint256 i = 0; i < active.length; i++) bs[active[i]].active = true;\\n    }\\n\\n    function getActiveVotes(address account) external view returns (Vote[] memory vs) {\\n        uint32[] memory active = beanstalk.activeBips();\\n        vs = new Vote[](active.length);\\n        for (uint256 i = 0; i < active.length; i++) {\\n            vs[i].bipId = active[i];\\n            vs[i].vote = beanstalk.voted(account, active[i]);\\n        }\\n    }\\n\\n    function fundraisers() external view returns (IBS.Fundraiser[] memory fs) {\\n        uint32 numFunds = beanstalk.numberOfFundraisers();\\n        fs = new IBS.Fundraiser[](numFunds);\\n        for (uint32 i = 0; i < numFunds; i++) {\\n            fs[i] = beanstalk.fundraiser(i);\\n        }\\n    }\\n\\n    function convertToBip(IBS.Bip memory b0, uint256 totalRoots) private pure returns (Bip memory b1) {\\n        b1.proposer = b0.proposer;\\n        b1.start = b0.start;\\n        b1.period = b0.period;\\n        b1.executed = b0.executed;\\n        b1.pauseOrUnpause = b0.pauseOrUnpause;\\n        b1.timestamp = b0.timestamp;\\n        b1.roots = b0.roots;\\n        b1.totalRoots = b0.endTotalRoots > 0 ? b0.endTotalRoots : totalRoots;\\n        b1.active = false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"bips\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"pauseOrUnpause\",\"type\":\"int256\"},{\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"roots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRoots\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct BeanstalkGetters.Bip[]\",\"name\":\"bs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundraisers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"internalType\":\"struct IBS.Fundraiser[]\",\"name\":\"fs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"bipId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"internalType\":\"struct BeanstalkGetters.Vote[]\",\"name\":\"vs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BeanstalkGetters", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}