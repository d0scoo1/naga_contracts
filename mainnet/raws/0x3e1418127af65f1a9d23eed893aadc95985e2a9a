{"status": "1", "message": "OK", "result": [{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of /nix/store/bna431n14gaiilbd4nj2wsgpa08vq265-geb-rrfm-rate-setter/dapp/geb-rrfm-rate-setter/src/PIRateSetter.sol\n\npragma solidity =0.6.7;\n\n////// /nix/store/npsy3mivgrrb261vicfv9nqb6dza0y3c-geb-treasury-reimbursement/dapp/geb-treasury-reimbursement/src/math/GebMath.sol\n/* pragma solidity 0.6.7; */\n\ncontract GebMath {\n    uint256 public constant RAY = 10 ** 27;\n    uint256 public constant WAD = 10 ** 18;\n\n    function ray(uint x) public pure returns (uint z) {\n        z = multiply(x, 10 ** 9);\n    }\n    function rad(uint x) public pure returns (uint z) {\n        z = multiply(x, 10 ** 27);\n    }\n    function minimum(uint x, uint y) public pure returns (uint z) {\n        z = (x <= y) ? x : y;\n    }\n    function addition(uint x, uint y) public pure returns (uint z) {\n        z = x + y;\n        require(z >= x, \"uint-uint-add-overflow\");\n    }\n    function subtract(uint x, uint y) public pure returns (uint z) {\n        z = x - y;\n        require(z <= x, \"uint-uint-sub-underflow\");\n    }\n    function multiply(uint x, uint y) public pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\n    }\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, y) / RAY;\n    }\n    function rdivide(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, RAY) / y;\n    }\n    function wdivide(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, WAD) / y;\n    }\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\n        z = multiply(x, y) / WAD;\n    }\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\n        assembly {\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n            default {\n                switch mod(n, 2) case 0 { z := base } default { z := x }\n                let half := div(base, 2)  // for rounding.\n                for { n := div(n, 2) } n { n := div(n,2) } {\n                    let xx := mul(x, x)\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n                    let xxRound := add(xx, half)\n                    if lt(xxRound, xx) { revert(0,0) }\n                    x := div(xxRound, base)\n                    if mod(n,2) {\n                        let zx := mul(z, x)\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n                        let zxRound := add(zx, half)\n                        if lt(zxRound, zx) { revert(0,0) }\n                        z := div(zxRound, base)\n                    }\n                }\n            }\n        }\n    }\n}\n\n////// /nix/store/bna431n14gaiilbd4nj2wsgpa08vq265-geb-rrfm-rate-setter/dapp/geb-rrfm-rate-setter/src/PIRateSetter.sol\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC, Reflexer Labs, INC.\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n/* pragma solidity 0.6.7; */\n\n/* import \"geb-treasury-reimbursement/math/GebMath.sol\"; */\n\nabstract contract OracleLike_2 {\n    function getResultWithValidity() virtual external view returns (uint256, bool);\n}\nabstract contract OracleRelayerLike_2 {\n    function redemptionPrice() virtual external returns (uint256);\n}\nabstract contract SetterRelayer_2 {\n    function relayRate(uint256, address) virtual external;\n}\nabstract contract PIDCalculator_1 {\n    function computeRate(uint256, uint256, uint256) virtual external returns (uint256);\n    function rt(uint256, uint256, uint256) virtual external view returns (uint256);\n    function pscl() virtual external view returns (uint256);\n    function tlv() virtual external view returns (uint256);\n}\n\ncontract PIRateSetter is GebMath {\n    // --- Auth ---\n    mapping (address => uint) public authorizedAccounts;\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n    /**\n    * @notice Checks whether msg.sender can call an authed function\n    **/\n    modifier isAuthorized {\n        require(authorizedAccounts[msg.sender] == 1, \"PIRateSetter/account-not-authorized\");\n        _;\n    }\n\n    // --- Variables ---\n    // When the price feed was last updated\n    uint256 public lastUpdateTime;                  // [timestamp]\n    // Enforced gap between calls\n    uint256 public updateRateDelay;                 // [seconds]\n    // Whether the leak is set to zero by default\n    uint256 public defaultLeak;                     // [0 or 1]\n\n    // --- System Dependencies ---\n    // OSM or medianizer for the system coin\n    OracleLike_2                public orcl;\n    // OracleRelayer where the redemption price is stored\n    OracleRelayerLike_2         public oracleRelayer;\n    // The contract that will pass the new redemption rate to the oracle relayer\n    SetterRelayer_2             public setterRelayer;\n    // Calculator for the redemption rate\n    PIDCalculator_1             public pidCalculator;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n    event ModifyParameters(\n      bytes32 parameter,\n      address addr\n    );\n    event ModifyParameters(\n      bytes32 parameter,\n      uint256 val\n    );\n    event UpdateRedemptionRate(\n        uint marketPrice,\n        uint redemptionPrice,\n        uint redemptionRate\n    );\n    event FailUpdateRedemptionRate(\n        uint marketPrice,\n        uint redemptionPrice,\n        uint redemptionRate,\n        bytes reason\n    );\n\n    constructor(\n      address oracleRelayer_,\n      address setterRelayer_,\n      address orcl_,\n      address pidCalculator_,\n      uint256 updateRateDelay_\n    ) public {\n        require(oracleRelayer_ != address(0), \"PIRateSetter/null-oracle-relayer\");\n        require(setterRelayer_ != address(0), \"PIRateSetter/null-setter-relayer\");\n        require(orcl_ != address(0), \"PIRateSetter/null-orcl\");\n        require(pidCalculator_ != address(0), \"PIRateSetter/null-calculator\");\n\n        authorizedAccounts[msg.sender] = 1;\n        defaultLeak                    = 1;\n\n        oracleRelayer    = OracleRelayerLike_2(oracleRelayer_);\n        setterRelayer    = SetterRelayer_2(setterRelayer_);\n        orcl             = OracleLike_2(orcl_);\n        pidCalculator    = PIDCalculator_1(pidCalculator_);\n\n        updateRateDelay  = updateRateDelay_;\n\n        emit AddAuthorization(msg.sender);\n        emit ModifyParameters(\"orcl\", orcl_);\n        emit ModifyParameters(\"oracleRelayer\", oracleRelayer_);\n        emit ModifyParameters(\"setterRelayer\", setterRelayer_);\n        emit ModifyParameters(\"pidCalculator\", pidCalculator_);\n        emit ModifyParameters(\"updateRateDelay\", updateRateDelay_);\n    }\n\n    // --- Boolean Logic ---\n    function either(bool x, bool y) internal pure returns (bool z) {\n        assembly{ z := or(x, y)}\n    }\n\n    // --- Management ---\n    /*\n    * @notify Modify the address of a contract that the setter is connected to\n    * @param parameter Contract name\n    * @param addr The new contract address\n    */\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n        require(addr != address(0), \"PIRateSetter/null-addr\");\n        if (parameter == \"orcl\") orcl = OracleLike_2(addr);\n        else if (parameter == \"oracleRelayer\") oracleRelayer = OracleRelayerLike_2(addr);\n        else if (parameter == \"setterRelayer\") setterRelayer = SetterRelayer_2(addr);\n        else if (parameter == \"pidCalculator\") {\n          pidCalculator = PIDCalculator_1(addr);\n        }\n        else revert(\"PIRateSetter/modify-unrecognized-param\");\n        emit ModifyParameters(\n          parameter,\n          addr\n        );\n    }\n    /*\n    * @notify Modify a uint256 parameter\n    * @param parameter The parameter name\n    * @param val The new parameter value\n    */\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\n        if (parameter == \"updateRateDelay\") {\n          require(val > 0, \"PIRateSetter/null-update-delay\");\n          updateRateDelay = val;\n        }\n        else if (parameter == \"defaultLeak\") {\n          require(val <= 1, \"PIRateSetter/invalid-default-leak\");\n          defaultLeak = val;\n        }\n        else revert(\"PIRateSetter/modify-unrecognized-param\");\n        emit ModifyParameters(\n          parameter,\n          val\n        );\n    }\n\n    // --- Feedback Mechanism ---\n    /**\n    * @notice Compute and set a new redemption rate\n    * @param feeReceiver The proposed address that should receive the reward for calling this function\n    *        (unless it's address(0) in which case msg.sender will get it)\n    **/\n    function updateRate(address feeReceiver) external {\n        // The fee receiver must not be null\n        require(feeReceiver != address(0), \"PIRateSetter/null-fee-receiver\");\n        // Check delay between calls\n        require(either(subtract(now, lastUpdateTime) >= updateRateDelay, lastUpdateTime == 0), \"PIRateSetter/wait-more\");\n        // Get price feed updates\n        (uint256 marketPrice, bool hasValidValue) = orcl.getResultWithValidity();\n        // If the oracle has a value\n        require(hasValidValue, \"PIRateSetter/invalid-oracle-value\");\n        // If the price is non-zero\n        require(marketPrice > 0, \"PIRateSetter/null-price\");\n        // Get the latest redemption price\n        uint redemptionPrice = oracleRelayer.redemptionPrice();\n        // Calculate the rate\n        uint256 iapcr      = (defaultLeak == 1) ? RAY : rpower(pidCalculator.pscl(), pidCalculator.tlv(), RAY);\n        uint256 calculated = pidCalculator.computeRate(\n            marketPrice,\n            redemptionPrice,\n            iapcr\n        );\n        // Store the timestamp of the update\n        lastUpdateTime = now;\n        // Update the rate using the setter relayer\n        try setterRelayer.relayRate(calculated, feeReceiver) {\n          // Emit success event\n          emit UpdateRedemptionRate(\n            ray(marketPrice),\n            redemptionPrice,\n            calculated\n          );\n        }\n        catch(bytes memory revertReason) {\n          emit FailUpdateRedemptionRate(\n            ray(marketPrice),\n            redemptionPrice,\n            calculated,\n            revertReason\n          );\n        }\n    }\n\n    // --- Getters ---\n    /**\n    * @notice Get the market price from the system coin oracle\n    **/\n    function getMarketPrice() external view returns (uint256) {\n        (uint256 marketPrice, ) = orcl.getResultWithValidity();\n        return marketPrice;\n    }\n    /**\n    * @notice Get the redemption and the market prices for the system coin\n    **/\n    function getRedemptionAndMarketPrices() external returns (uint256 marketPrice, uint256 redemptionPrice) {\n        (marketPrice, ) = orcl.getResultWithValidity();\n        redemptionPrice = oracleRelayer.redemptionPrice();\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleRelayer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setterRelayer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orcl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pidCalculator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"updateRateDelay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"FailUpdateRedemptionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"}],\"name\":\"UpdateRedemptionRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLeak\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionAndMarketPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orcl\",\"outputs\":[{\"internalType\":\"contract OracleLike_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pidCalculator\",\"outputs\":[{\"internalType\":\"contract PIDCalculator_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setterRelayer\",\"outputs\":[{\"internalType\":\"contract SetterRelayer_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "PIRateSetter", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000173d5e2395d0c20d5a3d35d5b7ec71618211f353000000000000000000000000ec116d7a187d43d4c3ee1bae242d6a5296b47a8300000000000000000000000001eabb83df3966f290508ae57127426d2a2f96830000000000000000000000006889c413618780e7f015c95f9eb021cff1107f4e0000000000000000000000000000000000000000000000000000000000003840", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}