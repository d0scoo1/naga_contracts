{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SlotieJrTicketSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Developed by KG Technologies (https://kgtechnologies.io)\\n\\npragma solidity 0.8.11;\\n\\n/**\\n   _____ _      ____ _______ _____ ______        _ _    _ _   _ _____ ____  _____     _____         _      ______ \\n  / ____| |    / __ \\\\__   __|_   _|  ____|      | | |  | | \\\\ | |_   _/ __ \\\\|  __ \\\\   / ____|  /\\\\   | |    |  ____|\\n | (___ | |   | |  | | | |    | | | |__         | | |  | |  \\\\| | | || |  | | |__) | | (___   /  \\\\  | |    | |__   \\n  \\\\___ \\\\| |   | |  | | | |    | | |  __|    _   | | |  | | . ` | | || |  | |  _  /   \\\\___ \\\\ / /\\\\ \\\\ | |    |  __|  \\n  ____) | |___| |__| | | |   _| |_| |____  | |__| | |__| | |\\\\  |_| || |__| | | \\\\ \\\\   ____) / ____ \\\\| |____| |____ \\n |_____/|______\\\\____/  |_|  |_____|______|  \\\\____/ \\\\____/|_| \\\\_|_____\\\\____/|_|  \\\\_\\\\ |_____/_/    \\\\_\\\\______|______|                                                                                                                                                                                                                                                                                                         \\n                             \\n */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @notice Represents Slotie Junior Smart Contract\\n */\\ncontract ISlotieJr {\\n    /** \\n     * @dev ERC-721 INTERFACE \\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {}\\n\\n    /** \\n     * @dev CUSTOM INTERFACE \\n     */\\n    function mintTo(uint256 amount, address _to) external {}\\n    function maxMintPerTransaction() public returns (uint256) {}\\n}\\n\\n/**\\n * @title SlotieJrTicketSale.\\n *\\n * @author KG Technologies (https://kgtechnologies.io).\\n *\\n * @notice This Smart Contract can be used to sell a fixed amount of tickets where some of them are \\n * sold to permissioned wallets and the others are sold to the general public. \\n * The tickets can then be used to mint a corresponding amount of NFTs.\\n *\\n * @dev The primary mode of verifying permissioned actions is through Merkle Proofs\\n * which are generated off-chain.\\n */\\ncontract SlotieJrTicketSale is Ownable {\\n\\n    /** \\n     * @notice The Smart Contract of the NFT being sold \\n     * @dev ERC-721 Smart Contract \\n     */\\n    ISlotieJr public immutable nft;\\n    \\n    /** \\n     * @dev MINT DATA \\n     */\\n    uint256 public maxSupplyPermissioned = 1000;\\n    uint256 public maxSupplyOpen = 3950;\\n    \\n    uint256 public boughtPermissioned = 1;\\n    \\n    uint256 public boughtOpen = 1;\\n    uint256 public limitOpen = 10;\\n    uint256 public priceOpen = 0.3 ether;\\n    bool public isPublicSale = false;\\n    \\n    mapping(address => uint256) public addressToTicketsOpen;\\n    mapping(address => mapping(uint256 => uint256)) public addressToTicketsPermissioned;\\n    mapping(address => uint256) public addressToMints;    \\n\\n    /// @dev Initial value is randomly generated from https://www.random.org/\\n    bytes32 public merkleRoot = 0xe788a23866da0e903934d723c44efe9da3f7265d053a8fed5c1036a78665f9c1;\\n\\n    /**\\n     * @dev GIVEAWAY \\n     */\\n    uint256 public maxSupplyGiveaway = 50;\\n    uint256 public giveAwayRedeemed = 1;\\n    mapping(address => uint256) public addressToGiveawayRedeemed;\\n    bytes32 public giveAwayMerkleRoot = \\\"\\\";\\n\\n    /**\\n     * @dev Events\\n     */\\n    event ReceivedEther(address indexed sender, uint256 indexed amount);\\n    event Purchase(address indexed buyer, uint256 indexed amount, bool indexed permissioned);\\n    event RedeemTickets(address indexed redeemer, uint256 amount);\\n    event RedeemGiveAway(address indexed redeemer, uint256 amount);\\n    event setMaxSupplyPermissionedEvent(uint256 indexed maxSupply);\\n    event setMaxSupplyOpenEvent(uint256 indexed maxSupply);\\n    event setLimitOpenEvent(uint256 indexed limit);\\n    event setPriceOpenEvent(uint256 indexed price);\\n    event setMerkleRootEvent(bytes32 indexed merkleRoot);\\n    event setGiveAwayMerkleRootEvent(bytes32 indexed merkleRoot);\\n    event setGiveAwayMaxSupplyEvent(uint256 indexed newSupply);\\n    event setPublicSaleStateEvent(bool indexed newState);\\n    event WithdrawAllEvent(address indexed to, uint256 amount);\\n\\n    constructor(\\n        address _nftaddress\\n    ) Ownable() {\\n        nft = ISlotieJr(_nftaddress);\\n    }\\n \\n    /**\\n     * @dev SALE\\n     */\\n\\n    /**\\n     * @notice Function to buy one or more tickets.\\n     * @dev First the Merkle Proof is verified.\\n     * Then the buy is verified with the data embedded in the Merkle Proof.\\n     * Finally the tickets are bought to the user's wallet.\\n     *\\n     * @param amount. The amount of tickets to buy.\\n     * @param buyStart. The start date of the buy.\\n     * @param buyEnd. The end date of the buy.\\n     * @param buyPrice. The buy price for the user.\\n     * @param buyMaxAmount. The max amount the user can buy.\\n     * @param phase. The permissioned sale phase.\\n     * @param proof. The Merkle Proof of the user.\\n     */\\n    function buyPermissioned(uint256 amount, uint256 buyStart, uint256 buyEnd, uint256 buyPrice, uint256 buyMaxAmount, uint256 phase, bytes32[] calldata proof) \\n        external \\n        payable {\\n\\n        /// @dev Verifies Merkle Proof submitted by user.\\n        /// @dev All mint data is embedded in the merkle proof.\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, buyStart, buyEnd, buyPrice, buyMaxAmount, phase));\\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \\\"INVALID PROOF\\\");\\n\\n        /// @dev Verifies that user can perform permissioned sale based on the provided parameters.\\n\\n        require(address(nft) != address(0), \\\"NFT SMART CONTRACT NOT SET\\\");\\n        require(merkleRoot != \\\"\\\", \\\"PERMISSIONED SALE CLOSED\\\");\\n        require(phase > 0 && phase < 4, \\\"INCORRECT PHASE SUPPLIED\\\");\\n\\n        require(block.timestamp >= buyStart, \\\"PERMISSIONED SALE HASN'T STARTED YET\\\");\\n        require(block.timestamp < buyEnd, \\\"PERMISSIONED SALE IS CLOSED\\\");\\n        require(amount > 0, \\\"HAVE TO BUY AT LEAST 1\\\");\\n\\n        require(addressToTicketsPermissioned[msg.sender][phase] + amount <= buyMaxAmount, \\\"BUY AMOUNT EXCEEDS MAX FOR USER\\\");        \\n        require(msg.value >= buyPrice * amount, \\\"ETHER SENT NOT CORRECT\\\");\\n\\n        /// @dev We incorporate whale buying during public sale in the permissioned buy function\\n\\n        if (phase < 3) {\\n            require(boughtPermissioned + amount - 1 <= maxSupplyPermissioned, \\\"BUY AMOUNT GOES OVER MAX SUPPLY\\\");\\n            boughtPermissioned += amount;\\n        }            \\n        else {\\n            require(boughtOpen + amount - 1 <= maxSupplyOpen, \\\"BUY AMOUNT GOES OVER MAX SUPPLY\\\");\\n            boughtOpen += amount;\\n        }            \\n        \\n        addressToTicketsPermissioned[msg.sender][phase] += amount;\\n        emit Purchase(msg.sender, amount, true);\\n    }\\n\\n    /**\\n     * @notice Function to buy one or more tickets.\\n     *\\n     * @param amount. The amount of tickets to buy.\\n     */\\n    function buyOpen(uint256 amount) \\n        external \\n        payable {\\n        \\n        /// @dev Verifies that user can perform open sale based on the provided parameters.\\n\\n        require(address(nft) != address(0), \\\"NFT SMART CONTRACT NOT SET\\\");\\n        require(isPublicSale, \\\"OPEN SALE CLOSED\\\");\\n\\n        require(amount > 0, \\\"HAVE TO BUY AT LEAST 1\\\");\\n\\n        require(addressToTicketsOpen[msg.sender] + amount <= limitOpen, \\\"BUY AMOUNT EXCEEDS MAX FOR USER\\\");\\n        require(boughtOpen + amount - 1 <= maxSupplyOpen, \\\"BUY AMOUNT GOES OVER MAX SUPPLY\\\");\\n        require(msg.value >= priceOpen * amount, \\\"ETHER SENT NOT CORRECT\\\");\\n\\n        /// @dev Updates contract variables and buys `amount` tickets to users wallet\\n\\n        boughtOpen += amount;\\n        addressToTicketsOpen[msg.sender] += amount;\\n\\n        emit Purchase(msg.sender, amount, false);\\n    }\\n\\n    /**\\n     * @dev MINTING \\n     */\\n\\n    /**\\n     * @notice Allows users to redeem their tickets for NFTs.\\n     *\\n     */\\n    function redeemTickets() external {\\n        uint256 ticketsOfSender = \\n            addressToTicketsPermissioned[msg.sender][1] + \\n            addressToTicketsPermissioned[msg.sender][2] + \\n            addressToTicketsPermissioned[msg.sender][3] +\\n            addressToTicketsOpen[msg.sender];\\n        uint256 mintsOfSender = addressToMints[msg.sender];\\n        uint256 mintable = ticketsOfSender - mintsOfSender;\\n\\n        require(mintable > 0, \\\"NO MINTABLE TICKETS\\\");\\n\\n        uint256 maxMintPerTx = nft.maxMintPerTransaction();\\n        uint256 toMint = mintable > maxMintPerTx ? maxMintPerTx : mintable;\\n        \\n        addressToMints[msg.sender] = addressToMints[msg.sender] + toMint;\\n\\n        nft.mintTo(toMint, msg.sender);\\n        emit RedeemTickets(msg.sender, toMint);\\n    }\\n\\n    /**\\n     * @notice Function to redeem giveaway.\\n     * @dev First the Merkle Proof is verified.\\n     * Then the redeem is verified with the data embedded in the Merkle Proof.\\n     * Finally the juniors are minted to the user's wallet.\\n     *\\n     * @param redeemStart. The start date of the redeem.\\n     * @param redeemEnd. The end date of the redeem.\\n     * @param redeemAmount. The amount to redeem.\\n     * @param proof. The Merkle Proof of the user.\\n     */\\n    function redeemGiveAway(uint256 redeemStart, uint256 redeemEnd, uint256 redeemAmount, bytes32[] calldata proof) external {\\n        /// @dev Verifies Merkle Proof submitted by user.\\n        /// @dev All giveaway data is embedded in the merkle proof.\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, redeemStart, redeemEnd, redeemAmount));\\n        require(MerkleProof.verify(proof, giveAwayMerkleRoot, leaf), \\\"INVALID PROOF\\\");\\n\\n        /// @dev Verifies that user can perform giveaway based on the provided parameters.\\n\\n        require(address(nft) != address(0), \\\"NFT SMART CONTRACT NOT SET\\\");\\n        require(giveAwayMerkleRoot != \\\"\\\", \\\"GIVEAWAY CLOSED\\\");\\n\\n        require(block.timestamp >= redeemStart, \\\"GIVEAWAY HASN'T STARTED YET\\\");\\n        require(block.timestamp < redeemEnd, \\\"GIVEAWAY IS CLOSED\\\");\\n        require(redeemAmount > 0, \\\"HAVE TO REDEEM AT LEAST 1\\\");\\n\\n        require(addressToGiveawayRedeemed[msg.sender] == 0, \\\"GIVEAWAY ALREADY REDEEMED\\\");\\n        require(giveAwayRedeemed + redeemAmount - 1 <= maxSupplyGiveaway, \\\"GIVEAWAY AMOUNT GOES OVER MAX SUPPLY\\\");\\n\\n        /// @dev Updates contract variables and mints `redeemAmount` juniors to users wallet\\n\\n        giveAwayRedeemed += redeemAmount;\\n        addressToGiveawayRedeemed[msg.sender] = 1;\\n\\n        nft.mintTo(redeemAmount, msg.sender);\\n        emit RedeemGiveAway(msg.sender, redeemAmount);\\n    }\\n\\n    /** \\n     * @dev OWNER ONLY \\n     */\\n\\n    /**\\n     * @notice Change the maximum supply of tickets that are for sale in permissioned sale.\\n     *\\n     * @param newMaxSupply. The new max supply.\\n     */\\n    function setMaxSupplyPermissioned(uint256 newMaxSupply) external onlyOwner {\\n        maxSupplyPermissioned = newMaxSupply;\\n        emit setMaxSupplyPermissionedEvent(newMaxSupply);\\n    }\\n\\n    /**\\n     * @notice Change the maximum supply of tickets that are for sale in open sale.\\n     *\\n     * @param newMaxSupply. The new max supply.\\n     */\\n    function setMaxSupplyOpen(uint256 newMaxSupply) external onlyOwner {\\n        maxSupplyOpen = newMaxSupply;\\n        emit setMaxSupplyOpenEvent(newMaxSupply);\\n    }\\n\\n    /**\\n     * @notice Change the limit of tickets per wallet in open sale.\\n     *\\n     * @param newLimitOpen. The new max supply.\\n     */\\n    function setLimitOpen(uint256 newLimitOpen) external onlyOwner {\\n        limitOpen = newLimitOpen;\\n        emit setLimitOpenEvent(newLimitOpen);\\n    }\\n\\n    /**\\n     * @notice Change the price of tickets that are for sale in open sale.\\n     *\\n     * @param newPriceOpen. The new max supply.\\n     */\\n    function setPriceOpen(uint256 newPriceOpen) external onlyOwner {\\n        priceOpen = newPriceOpen;\\n        emit setPriceOpenEvent(newPriceOpen);\\n    }\\n\\n    /**\\n     * @notice Change the merkleRoot of the sale.\\n     *\\n     * @param newRoot. The new merkleRoot.\\n     */\\n    function setMerkleRoot(bytes32 newRoot) external onlyOwner {\\n        merkleRoot = newRoot;\\n        emit setMerkleRootEvent(newRoot);\\n    }\\n\\n    /**\\n     * @notice Delete the merkleRoot of the sale.\\n     */\\n    function deleteMerkleRoot() external onlyOwner {\\n        merkleRoot = \\\"\\\";\\n        emit setMerkleRootEvent(merkleRoot);\\n    }\\n\\n    /**\\n     * @notice Change the merkleRoot of the giveaway.\\n     *\\n     * @param newRoot. The new merkleRoot.\\n     */\\n    function setGiveAwayMerkleRoot(bytes32 newRoot) external onlyOwner {\\n        giveAwayMerkleRoot = newRoot;\\n        emit setGiveAwayMerkleRootEvent(newRoot);\\n    }\\n\\n    /**\\n     * @notice Change the max supply for the giveaway.\\n     *\\n     * @param newSupply. The new giveaway max supply.\\n     */\\n    function setGiveAwayMaxSupply(uint256 newSupply) external onlyOwner {\\n        maxSupplyGiveaway = newSupply;\\n        emit setGiveAwayMaxSupplyEvent(newSupply);\\n    }\\n\\n    /**\\n     * @notice Sets the state of the public sale.\\n     *\\n     * @param newState. The new state for the public sale.\\n     */\\n    function setPublicSaleState(bool newState) external onlyOwner {\\n        isPublicSale = newState;\\n        emit setPublicSaleStateEvent(newState);\\n    }\\n\\n    /**\\n     * @dev FINANCE\\n     */\\n\\n    /**\\n     * @notice Allows owner to withdraw funds generated from sale.\\n     *\\n     * @param _to. The address to send the funds to.\\n     */\\n    function withdrawAll(address _to) external onlyOwner {\\n        require(_to != address(0), \\\"CANNOT WITHDRAW TO ZERO ADDRESS\\\");\\n\\n        uint256 contractBalance = address(this).balance;\\n\\n        require(contractBalance > 0, \\\"NO ETHER TO WITHDRAW\\\");\\n\\n        payable(_to).transfer(contractBalance);\\n\\n        emit WithdrawAllEvent(_to, contractBalance);\\n    }\\n\\n    /**\\n     * @dev Fallback function for receiving Ether\\n     */\\n    receive() external payable {\\n        emit ReceivedEther(msg.sender, msg.value);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftaddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"permissioned\",\"type\":\"bool\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemGiveAway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAllEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setGiveAwayMaxSupplyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setGiveAwayMerkleRootEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setLimitOpenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyOpenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyPermissionedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRootEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPriceOpenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"setPublicSaleStateEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToGiveawayRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTicketsOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToTicketsPermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boughtOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boughtPermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyOpen\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyPermissioned\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveAwayMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveAwayRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyGiveaway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyPermissioned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract ISlotieJr\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"redeemGiveAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setGiveAwayMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setGiveAwayMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimitOpen\",\"type\":\"uint256\"}],\"name\":\"setLimitOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupplyPermissioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPriceOpen\",\"type\":\"uint256\"}],\"name\":\"setPriceOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"setPublicSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SlotieJrTicketSale", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000097021e6453898dc8bfe90a6064a47885a3d700b6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}