{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/helpers/WhitelistChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/InteractiveNotificationReceiver.sol\\\";\\nimport \\\"../interfaces/IWhitelistRegistry.sol\\\";\\nimport \\\"../libraries/ArgumentsDecoder.sol\\\";\\n\\ncontract WhitelistChecker is InteractiveNotificationReceiver {\\n    using ArgumentsDecoder for bytes;\\n\\n    error TakerIsNotWhitelisted();\\n\\n    IWhitelistRegistry public immutable whitelistRegistry;\\n\\n    constructor(IWhitelistRegistry _whitelistRegistry) {\\n        whitelistRegistry = _whitelistRegistry;\\n    }\\n\\n    function notifyFillOrder(\\n        address taker,\\n        address makerAsset,\\n        address takerAsset,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        bytes calldata nextInteractiveData\\n    ) external override {\\n        if (whitelistRegistry.status(taker) != 1) revert TakerIsNotWhitelisted();\\n\\n        if (nextInteractiveData.length != 0) {\\n            (address interactionTarget, bytes calldata interactionData) = nextInteractiveData.decodeTargetAndData();\\n\\n            InteractiveNotificationReceiver(interactionTarget).notifyFillOrder(\\n                taker, makerAsset, takerAsset, makingAmount, takingAmount, interactionData\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/InteractiveNotificationReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Interface for interactor which acts between `maker => taker` and `taker => maker` transfers.\\ninterface InteractiveNotificationReceiver {\\n    /// @notice Callback method that gets called after taker transferred funds to maker but before\\n    /// the opposite transfer happened\\n    function notifyFillOrder(\\n        address taker,\\n        address makerAsset,\\n        address takerAsset,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        bytes memory interactiveData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWhitelistRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\ninterface IWhitelistRegistry {\\n    function status(address addr) external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ArgumentsDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Library with gas efficient alternatives to `abi.decode`\\nlibrary ArgumentsDecoder {\\n    function decodeUint256(bytes memory data) internal pure returns(uint256) {\\n        uint256 value;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            value := mload(add(data, 0x20))\\n        }\\n        return value;\\n    }\\n\\n    function decodeBool(bytes memory data) internal pure returns(bool) {\\n        bool value;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            value := eq(mload(add(data, 0x20)), 1)\\n        }\\n        return value;\\n    }\\n\\n    function decodeTargetAndCalldata(bytes memory data) internal pure returns(address, bytes memory) {\\n        address target;\\n        bytes memory args;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            target := mload(add(data, 0x14))\\n            args := add(data, 0x14)\\n            mstore(args, sub(mload(data), 0x14))\\n        }\\n        return (target, args);\\n    }\\n\\n    function decodeTargetAndData(bytes calldata data) internal pure returns(address, bytes calldata) {\\n        address target;\\n        bytes calldata args;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            target := shr(96, calldataload(data.offset))\\n        }\\n        args = data[20:];\\n        return (target, args);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWhitelistRegistry\",\"name\":\"_whitelistRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TakerIsNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nextInteractiveData\",\"type\":\"bytes\"}],\"name\":\"notifyFillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistRegistry\",\"outputs\":[{\"internalType\":\"contract IWhitelistRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WhitelistChecker", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000ac8d32a117799d58c5c10c7c23a9cd05f8ce4f35", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}