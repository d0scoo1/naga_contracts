{"status": "1", "message": "OK", "result": [{"SourceCode": "{\"IPapaya.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface IPapaya {\\r\\n    function stakerMint(address account, uint256 amount) external;\\r\\n}\"},\"IPOTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface IPOTC {\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\r\\n}\"},\"Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity \\u003e=0.8.0;\\r\\n\\r\\n/// @notice Simple single owner authorization mixin.\\r\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\\r\\nabstract contract Owned {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            OWNERSHIP STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    modifier onlyOwner() virtual {\\r\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               CONSTRUCTOR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        owner = _owner;\\r\\n\\r\\n        emit OwnerUpdated(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                             OWNERSHIP LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function setOwner(address newOwner) public virtual onlyOwner {\\r\\n        owner = newOwner;\\r\\n\\r\\n        emit OwnerUpdated(msg.sender, newOwner);\\r\\n    }\\r\\n}\"},\"POTCStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/***   \\r\\n  _____                     _                __   _   _             _____           _ _     _                 \\r\\n |  __ \\\\                   | |              / _| | | | |           / ____|         (_) |   | |                 \\r\\n | |__) |_ _ _ __ _ __ ___ | |_ ___    ___ | |_  | |_| |__   ___  | |     __ _ _ __|_| |__ | |__   ___  __ _ _ __  \\r\\n |  ___/ _` | \\u0027__| \\u0027__/ _ \\\\| __/ __|  / _ \\\\|  _| | __| \\u0027_ \\\\ / _ \\\\ | |    / _` | \\u0027__| | \\u0027_ \\\\| \\u0027_ \\\\ / _ \\\\/ _` | \\u0027_ \\\\ \\r\\n | |  | (_| | |  | | | (_) | |_\\\\__ \\\\ | (_) | |   | |_| | | |  __/ | |___| (_| | |  | | |_) | |_) |  __/ (_| | | | |\\r\\n |_|   \\\\__,_|_|  |_|  \\\\___/ \\\\__|___/  \\\\___/|_|    \\\\__|_| |_|\\\\___|  \\\\_____\\\\__,_|_|  |_|_.__/|_.__/ \\\\___|\\\\__,_|_| |_|                                                                                                                                                                                                            \\r\\n*/\\r\\n\\r\\n/// @title Parrots of the Caribbean Staking\\r\\n/// @author jackparrot\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IPOTC.sol\\\";\\r\\nimport \\\"./IPapaya.sol\\\";\\r\\n\\r\\n/// @notice Thrown when a user tries to stake without staking being live.\\r\\nerror StakingNotActive(); \\r\\n/// @notice Thrown when a user tries to unstake a parrot that doesn\\u0027t belong to them.\\r\\nerror NotOwner();\\r\\n\\r\\ncontract POTCStaking is Owned {\\r\\n\\r\\n  /// @notice Contract for $PAPAYA Utility token.\\r\\n  IPapaya public papayaContract;\\r\\n  /// @notice Contract for original POTC Collection.\\r\\n  IPOTC public immutable potcContract;\\r\\n\\r\\n  /// @notice 10 $PAPAYA per day for normal parrots.\\r\\n  uint256 private constant normalRate = (10 * 1E18) / uint256(1 days); \\r\\n  /// @notice 25 $PAPAYA per day for legendary parrots.\\r\\n  uint256 private constant legendaryRate = (25 * 1E18) / uint256(1 days); \\r\\n\\r\\n  /// @notice Returns owner for a particular ID.\\r\\n  mapping(uint256 =\\u003e address) public parrotOwner;\\r\\n  /// @notice Returns array of IDs for a particular address.\\r\\n  mapping(address =\\u003e uint256[]) public stakerToParrot; \\r\\n  /// @notice Returns how much $PAPAYA is due to a particular staker.\\r\\n  mapping(address =\\u003e uint256) public parrotOwnerRewards;\\r\\n  /// @notice Returns how many normal parrots a particular staker has staked.\\r\\n  mapping(address =\\u003e uint256) public _normalBalance;\\r\\n  /// @notice Returns how many legendary parrots a particular staker has staked.\\r\\n  mapping(address =\\u003e uint256) public _legendaryBalance;\\r\\n  /// @notice Return last time a particular staker\\u0027s rewards were updated.\\r\\n  mapping(address =\\u003e uint256) public _timeLastUpdate;\\r\\n\\r\\n  /// @notice Controls whether or not users are able to stake.\\r\\n  bool public live = false;\\r\\n\\r\\n  constructor(address _parrotContract, address _papayaContract) Owned(msg.sender) {\\r\\n    potcContract = IPOTC(_parrotContract);\\r\\n    papayaContract = IPapaya(_papayaContract);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns an array containing all the owner\\u0027s staked parrots.\\r\\n  /// @param staker The particular owner whose staked parrots we want to know.\\r\\n  function getStakedParrots(address staker) external view returns (uint256[] memory) {\\r\\n    return stakerToParrot[staker];\\r\\n  }\\r\\n\\r\\n  /// @notice Returns total outstanding $PAPAYA currently claimable by the staker.\\r\\n  /// @param staker The particular owner whose claimable $PAPAYA we want to know.\\r\\n  function outstandingPapaya(address staker) external view returns(uint256) {\\r\\n    return parrotOwnerRewards[staker] + calculatePapaya(staker);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates the $PAPAYA accrued by a staker since the last time their reward was updated.\\r\\n  /// @param ownerAddress The particular owner whose $PAPAYA we want to update.\\r\\n  function calculatePapaya(address ownerAddress) private view returns(uint256) {\\r\\n    uint256 papayaPayout = (((block.timestamp - _timeLastUpdate[ownerAddress]) * normalRate * _normalBalance[ownerAddress])\\r\\n      + ((block.timestamp - _timeLastUpdate[ownerAddress]) * legendaryRate * _legendaryBalance[ownerAddress])\\r\\n    );\\r\\n    return papayaPayout;\\r\\n  }\\r\\n\\r\\n  /// @notice States whether or not a particular ID belongs to a legendary parrot.\\r\\n  /// @dev Parrots 15-24 are considered legendary and have a different $PAPAYA yield.\\r\\n  /// @param tokenId The particular parrot we want to test for legendary status.\\r\\n  function isLegendary(uint256 tokenId) private pure returns(bool) {\\r\\n    if(tokenId \\u003e= 15 \\u0026\\u0026 tokenId \\u003c= 24){\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  } \\r\\n\\r\\n  /// @notice Modifier called whenever staking, unstaking, or withdrawing to ensure reward is up to date.\\r\\n  /// @param ownerAddress The particular owner whose assets we want to update.\\r\\n  modifier updatePapaya(address ownerAddress) {\\r\\n    uint256 papayaPayout = calculatePapaya(ownerAddress);\\r\\n    _timeLastUpdate[ownerAddress] = block.timestamp;\\r\\n    parrotOwnerRewards[ownerAddress] += papayaPayout;\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraws papaya reward for a particular user.\\r\\n  /// @dev Staking contract must be added as a verified minter in the $PAPAYA contract, as it mints tokens to the staker\\u0027s address.\\r\\n  function withdrawPapaya() external updatePapaya(msg.sender) returns(uint256) {\\r\\n    uint256 papayaPayout = parrotOwnerRewards[msg.sender];\\r\\n    parrotOwnerRewards[msg.sender] = 0;\\r\\n    papayaContract.stakerMint(msg.sender, papayaPayout);\\r\\n\\r\\n    return papayaPayout;\\r\\n  }\\r\\n  \\r\\n  /// @notice Main staking function.\\r\\n  /// @dev Normal and legendary balances cannot overflow, hence unchecked.\\r\\n  /// @dev User must first approve staking contract to spend it\\u0027s POTC balance in order to stake successfully.\\r\\n  /// @dev Must keep track of legendary and normal balances separately as they have different yields.\\r\\n  /// @param _tokenId The particular parrot being staked.\\r\\n  function stake(uint256 _tokenId) public updatePapaya(msg.sender) {\\r\\n    if (!live) revert StakingNotActive();\\r\\n\\r\\n    bool isLegend = isLegendary(_tokenId);\\r\\n\\r\\n    unchecked {\\r\\n      if(isLegend){\\r\\n        ++_legendaryBalance[msg.sender];\\r\\n      } else {\\r\\n        ++_normalBalance[msg.sender];\\r\\n      }\\r\\n    }\\r\\n    parrotOwner[_tokenId] = msg.sender;\\r\\n    stakerToParrot[msg.sender].push(_tokenId);\\r\\n    potcContract.transferFrom(msg.sender, address(this), _tokenId);\\r\\n  } \\r\\n\\r\\n  /// @notice Stakes many parrots at once.\\r\\n  /// @param tokenIds Array of all parrots to be staked.\\r\\n  function stakeMany(uint256[] calldata tokenIds) public updatePapaya(msg.sender) {\\r\\n    for(uint256 i = 0; i \\u003c tokenIds.length; i++){\\r\\n      stake(tokenIds[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Main unstaking function.\\r\\n  /// @dev Only the owner of a particular parrot can unstake that parrot.\\r\\n  /// @param _tokenId The particular parrot being unstaked.\\r\\n  function unstake(uint256 _tokenId) public updatePapaya(msg.sender) {\\r\\n    if (parrotOwner[_tokenId] != msg.sender) revert NotOwner();\\r\\n\\r\\n    bool isLegend = isLegendary(_tokenId);\\r\\n\\r\\n    unchecked {\\r\\n      if(isLegend){\\r\\n        --_legendaryBalance[msg.sender];\\r\\n      } else {\\r\\n        --_normalBalance[msg.sender];\\r\\n      }\\r\\n    }\\r\\n\\r\\n    delete parrotOwner[_tokenId];\\r\\n    removeTokenIdFromArray(stakerToParrot[msg.sender], _tokenId);\\r\\n    potcContract.transferFrom(address(this), msg.sender, _tokenId);\\r\\n  }\\r\\n\\r\\n  /// @notice Unstakes many parrots at once.\\r\\n  /// @param tokenIds Array of all parrots to be unstaked.\\r\\n  function unstakeMany(uint256[] calldata tokenIds) public updatePapaya(msg.sender) {\\r\\n    for(uint256 i = 0; i \\u003c tokenIds.length; i++) {\\r\\n      unstake(tokenIds[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Removes an Id from a particular owner\\u0027s parrot array.\\r\\n  /// @dev this must be done when unstaking a parrot\\r\\n  function removeTokenIdFromArray(uint256[] storage array, uint256 tokenId) internal {\\r\\n    uint256 length = array.length;\\r\\n    for (uint256 i = 0; i \\u003c length; i++) {\\r\\n      if (array[i] == tokenId) {\\r\\n        length--;\\r\\n        if (i \\u003c length) {\\r\\n            array[i] = array[length];\\r\\n        }\\r\\n        array.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Sets staking live.\\r\\n  function toggle() external onlyOwner {\\r\\n    live = !live;\\r\\n  }\\r\\n\\r\\n  /// @notice Sets Papaya contract. \\r\\n  function setPapayaContract(address papaya) external onlyOwner {\\r\\n    papayaContract = IPapaya(papaya);\\r\\n  } \\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parrotContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_papayaContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingNotActive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_legendaryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_normalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_timeLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakedParrots\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"outstandingPapaya\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"papayaContract\",\"outputs\":[{\"internalType\":\"contract IPapaya\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parrotOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parrotOwnerRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potcContract\",\"outputs\":[{\"internalType\":\"contract IPOTC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"papaya\",\"type\":\"address\"}],\"name\":\"setPapayaContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerToParrot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPapaya\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "POTCStaking", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002615e05181e3cf8b0816272818c6f0d0c9973d84000000000000000000000000fea1287a4aae0de51587fe2187631236f56a9fdd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://091c9065dbd27002aa7ee8e3c363b7eceb05b2aa3731351f4a5efc9299c92005"}]}