{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/IAwooClaiming.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\ninterface IAwooClaiming{\r\n    function overrideTokenAccrualBaseRate(address contractAddress, uint32 tokenId, uint256 newBaseRate) external;\r\n}\r\n// File: contracts/AwooModels.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\nstruct AccrualDetails{\r\n    address ContractAddress;\r\n    uint256[] TokenIds;\r\n    uint256[] Accruals;\r\n    uint256 TotalAccrued;\r\n}\r\n\r\nstruct ClaimDetails{\r\n    address ContractAddress;\r\n    uint32[] TokenIds;\r\n}\r\n\r\nstruct SupportedContractDetails{\r\n    address ContractAddress;\r\n    uint256 BaseRate;\r\n    bool Active;\r\n}\r\n// File: contracts/IAwooClaimingV2.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ninterface IAwooClaimingV2{\r\n    function overrideTokenAccrualBaseRate(address contractAddress, uint32 tokenId, uint256 newBaseRate) external;\r\n    function claim(address holder, ClaimDetails[] calldata requestedClaims) external;\r\n}\r\n// File: contracts/AddressChecksumStringUtil.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Derived from https://ethereum.stackexchange.com/a/63953, no license specified\r\n// Modified to remove unnecessary functionality and prepend the checksummed string address with \"0x\"\r\n\r\n/**\r\n * @dev This contract provides a set of pure functions for computing the EIP-55\r\n * checksum of an account in formats friendly to both off-chain and on-chain\r\n * callers, as well as for checking if a given string hex representation of an\r\n * address has a valid checksum. These helper functions could also be repurposed\r\n * as a library that extends the `address` type.\r\n */\r\ncontract AddressChecksumStringUtil {\r\n\r\n    function toChecksumString(address account) internal pure returns (string memory asciiString) {\r\n        // convert the account argument from address to bytes.\r\n        bytes20 data = bytes20(account);\r\n\r\n        // create an in-memory fixed-size bytes array.\r\n        bytes memory asciiBytes = new bytes(40);\r\n\r\n        // declare variable types.\r\n        uint8 b;\r\n        uint8 leftNibble;\r\n        uint8 rightNibble;\r\n        bool leftCaps;\r\n        bool rightCaps;\r\n        uint8 asciiOffset;\r\n\r\n        // get the capitalized characters in the actual checksum.\r\n        bool[40] memory caps = _toChecksumCapsFlags(account);\r\n\r\n        // iterate over bytes, processing left and right nibble in each iteration.\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            // locate the byte and extract each nibble.\r\n            b = uint8(uint160(data) / (2**(8*(19 - i))));\r\n            leftNibble = b / 16;\r\n            rightNibble = b - 16 * leftNibble;\r\n\r\n            // locate and extract each capitalization status.\r\n            leftCaps = caps[2*i];\r\n            rightCaps = caps[2*i + 1];\r\n\r\n            // get the offset from nibble value to ascii character for left nibble.\r\n            asciiOffset = _getAsciiOffset(leftNibble, leftCaps);\r\n\r\n            // add the converted character to the byte array.\r\n            asciiBytes[2 * i] = bytes1(leftNibble + asciiOffset);\r\n\r\n            // get the offset from nibble value to ascii character for right nibble.\r\n            asciiOffset = _getAsciiOffset(rightNibble, rightCaps);\r\n\r\n            // add the converted character to the byte array.\r\n            asciiBytes[2 * i + 1] = bytes1(rightNibble + asciiOffset);\r\n        }\r\n\r\n        return string(abi.encodePacked(\"0x\", string(asciiBytes)));\r\n    }\r\n\r\n    function _getAsciiOffset(uint8 nibble, bool caps) internal pure returns (uint8 offset) {\r\n        // to convert to ascii characters, add 48 to 0-9, 55 to A-F, & 87 to a-f.\r\n        if (nibble < 10) {\r\n            offset = 48;\r\n        } else if (caps) {\r\n            offset = 55;\r\n        } else {\r\n            offset = 87;\r\n        }\r\n    }\r\n\r\n    function _toChecksumCapsFlags(address account) internal pure returns (bool[40] memory characterCapitalized) {\r\n        // convert the address to bytes.\r\n        bytes20 a = bytes20(account);\r\n\r\n        // hash the address (used to calculate checksum).\r\n        bytes32 b = keccak256(abi.encodePacked(_toAsciiString(a)));\r\n\r\n        // declare variable types.\r\n        uint8 leftNibbleAddress;\r\n        uint8 rightNibbleAddress;\r\n        uint8 leftNibbleHash;\r\n        uint8 rightNibbleHash;\r\n\r\n        // iterate over bytes, processing left and right nibble in each iteration.\r\n        for (uint256 i; i < a.length; i++) {\r\n            // locate the byte and extract each nibble for the address and the hash.\r\n            rightNibbleAddress = uint8(a[i]) % 16;\r\n            leftNibbleAddress = (uint8(a[i]) - rightNibbleAddress) / 16;\r\n            rightNibbleHash = uint8(b[i]) % 16;\r\n            leftNibbleHash = (uint8(b[i]) - rightNibbleHash) / 16;\r\n\r\n            characterCapitalized[2 * i] = (leftNibbleAddress > 9 && leftNibbleHash > 7);\r\n            characterCapitalized[2 * i + 1] = (rightNibbleAddress > 9 && rightNibbleHash > 7);\r\n        }\r\n    }\r\n\r\n    // based on https://ethereum.stackexchange.com/a/56499/48410\r\n    function _toAsciiString(bytes20 data) internal pure returns (string memory asciiString) {\r\n        // create an in-memory fixed-size bytes array.\r\n        bytes memory asciiBytes = new bytes(40);\r\n\r\n        // declare variable types.\r\n        uint8 b;\r\n        uint8 leftNibble;\r\n        uint8 rightNibble;\r\n\r\n        // iterate over bytes, processing left and right nibble in each iteration.\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            // locate the byte and extract each nibble.\r\n            b = uint8(uint160(data) / (2 ** (8 * (19 - i))));\r\n            leftNibble = b / 16;\r\n            rightNibble = b - 16 * leftNibble;\r\n\r\n            // to convert to ascii characters, add 48 to 0-9 and 87 to a-f.\r\n            asciiBytes[2 * i] = bytes1(leftNibble + (leftNibble < 10 ? 48 : 87));\r\n            asciiBytes[2 * i + 1] = bytes1(rightNibble + (rightNibble < 10 ? 48 : 87));\r\n        }\r\n\r\n        return string(asciiBytes);\r\n    }\r\n}\r\n// File: @openzeppelin/contracts@4.4.1/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/utils/cryptography/ECDSA.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IAwooToken.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ninterface IAwooToken is IERC20 {\r\n    function increaseVirtualBalance(address account, uint256 amount) external;\r\n    function mint(address account, uint256 amount) external;\r\n    function balanceOfVirtual(address account) external view returns(uint256);\r\n    function spendVirtualAwoo(bytes32 hash, bytes memory sig, string calldata nonce, address account, uint256 amount) external;\r\n}\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/OwnerAdminGuard.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ncontract OwnerAdminGuard is Ownable {\r\n    address[2] private _admins;\r\n    bool private _adminsSet;\r\n\r\n    /// @notice Allows the owner to specify two addresses allowed to administer this contract\r\n    /// @param admins A 2 item array of addresses\r\n    function setAdmins(address[2] calldata admins) public {\r\n        require(admins[0] != address(0) && admins[1] != address(0), \"Invalid admin address\");\r\n        _admins = admins;\r\n        _adminsSet = true;\r\n    }\r\n\r\n    function _isOwnerOrAdmin(address addr) internal virtual view returns(bool){\r\n        return addr == owner() || (\r\n            _adminsSet && (\r\n                addr == _admins[0] || addr == _admins[1]\r\n            )\r\n        );\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(_isOwnerOrAdmin(msg.sender), \"Not an owner or admin\");\r\n        _;\r\n    }\r\n}\r\n// File: contracts/AuthorizedCallerGuard.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ncontract AuthorizedCallerGuard is OwnerAdminGuard {\r\n\r\n    /// @dev Keeps track of which contracts are explicitly allowed to interact with certain super contract functionality\r\n    mapping(address => bool) public authorizedContracts;\r\n\r\n    event AuthorizedContractAdded(address contractAddress, address addedBy);\r\n    event AuthorizedContractRemoved(address contractAddress, address removedBy);\r\n\r\n    /// @notice Allows the owner or an admin to authorize another contract to override token accruals on an individual token level\r\n    /// @param contractAddress The authorized contract address\r\n    function addAuthorizedContract(address contractAddress) public onlyOwnerOrAdmin {\r\n        require(_isContract(contractAddress), \"Invalid contractAddress\");\r\n        authorizedContracts[contractAddress] = true;\r\n        emit AuthorizedContractAdded(contractAddress, _msgSender());\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to remove an authorized contract\r\n    /// @param contractAddress The contract address which should have its authorization revoked\r\n    function removeAuthorizedContract(address contractAddress) public onlyOwnerOrAdmin {\r\n        authorizedContracts[contractAddress] = false;\r\n        emit AuthorizedContractRemoved(contractAddress, _msgSender());\r\n    }\r\n\r\n    /// @dev Derived from @openzeppelin/contracts/utils/Address.sol\r\n    function _isContract(address account) internal virtual view returns (bool) {\r\n        if(account == address(0)) return false;\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _isAuthorizedContract(address addr) internal virtual view returns(bool){\r\n        return authorizedContracts[addr];\r\n    }\r\n\r\n    modifier onlyAuthorizedCaller() {\r\n        require(_isOwnerOrAdmin(_msgSender()) || _isAuthorizedContract(_msgSender()), \"Sender is not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorizedContract() {\r\n        require(_isAuthorizedContract(_msgSender()), \"Sender is not authorized\");\r\n        _;\r\n    }\r\n\r\n}\r\n// File: contracts/AwooClaiming.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ISupportedContract {\r\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n}\r\n\r\ncontract AwooClaiming is IAwooClaiming, Ownable, ReentrancyGuard {\r\n    uint256 public accrualStart = 1646006400; //2022-02-28 00:00 UTC\r\n\tuint256 public accrualEnd;\r\n\t\r\n    bool public claimingActive;\r\n\r\n    /// @dev A collection of supported contracts. These are typically ERC-721, with the addition of the tokensOfOwner function.\r\n    /// @dev These contracts can be deactivated but cannot be re-activated.  Reactivating can be done by adding the same\r\n    /// contract through addSupportedContract\r\n    SupportedContractDetails[] public supportedContracts;\r\n\r\n    /// @dev Keeps track of the last time a claim was made for each tokenId within the supported contract collection\r\n    mapping(address => mapping(uint256 => uint256)) public lastClaims;\r\n    /// @dev Allows the base accrual rates to be overridden on a per-tokenId level to support things like upgrades\r\n    mapping(address => mapping(uint256 => uint256)) public baseRateTokenOverrides;\r\n\r\n    address[2] private _admins;    \r\n    bool private _adminsSet;\r\n    \r\n    IAwooToken private _awooContract;    \r\n\r\n    /// @dev Base accrual rates are set a per-day rate so we change them to per-minute to allow for more frequent claiming\r\n    uint64 private _baseRateDivisor = 1440;\r\n\r\n    /// @dev Faciliates the maintence and functionality related to supportedContracts\r\n    uint8 private _activeSupportedContractCount;     \r\n    mapping(address => uint8) private _supportedContractIds;\r\n    \r\n    /// @dev Keeps track of which contracts are explicitly allowed to override the base accrual rates\r\n    mapping(address => bool) private _authorizedContracts;\r\n\r\n    event TokensClaimed(address indexed claimedBy, uint256 qty);\r\n    event ClaimingStatusChanged(bool newStatus, address changedBy);\r\n    event AuthorizedContractAdded(address contractAddress, address addedBy);\r\n    event AuthorizedContractRemoved(address contractAddress, address removedBy);\r\n\r\n    constructor(uint256 accrualStartTimestamp) {\r\n        require(accrualStartTimestamp > 0, \"Invalid accrualStartTimestamp\");\r\n        accrualStart = accrualStartTimestamp;\r\n    }\r\n\r\n    /// @notice Determines the amount of accrued virtual AWOO for the specified address, based on the\r\n    /// base accural rates for each supported contract and how long has elapsed (in minutes) since the\r\n    /// last claim was made for a give supported contract tokenId\r\n    /// @param owner The address of the owner/holder of tokens for a supported contract\r\n    /// @return A collection of accrued virtual AWOO and the tokens it was accrued on for each supported contract, and the total AWOO accrued\r\n    function getTotalAccruals(address owner) public view returns (AccrualDetails[] memory, uint256) {\r\n        // Initialize the array length based on the number of _active_ supported contracts\r\n        AccrualDetails[] memory totalAccruals = new AccrualDetails[](_activeSupportedContractCount);\r\n\r\n        uint256 totalAccrued;\r\n        uint8 contractCount; // Helps us keep track of the index to use when setting the values for totalAccruals\r\n        for(uint8 i = 0; i < supportedContracts.length; i++) {\r\n            SupportedContractDetails memory contractDetails = supportedContracts[i];\r\n\r\n            if(contractDetails.Active){\r\n                contractCount++;\r\n                \r\n                // Get an array of tokenIds held by the owner for the supported contract\r\n                uint256[] memory tokenIds = ISupportedContract(contractDetails.ContractAddress).tokensOfOwner(owner);\r\n                uint256[] memory accruals = new uint256[](tokenIds.length);\r\n                \r\n                uint256 totalAccruedByContract;\r\n\r\n                for (uint16 x = 0; x < tokenIds.length; x++) {\r\n                    uint32 tokenId = uint32(tokenIds[x]);\r\n                    uint256 accrued = getContractTokenAccruals(contractDetails.ContractAddress, contractDetails.BaseRate, tokenId);\r\n\r\n                    totalAccruedByContract+=accrued;\r\n                    totalAccrued+=accrued;\r\n\r\n                    tokenIds[x] = tokenId;\r\n                    accruals[x] = accrued;\r\n                }\r\n\r\n                AccrualDetails memory accrual = AccrualDetails(contractDetails.ContractAddress, tokenIds, accruals, totalAccruedByContract);\r\n\r\n                totalAccruals[contractCount-1] = accrual;\r\n            }\r\n        }\r\n        return (totalAccruals, totalAccrued);\r\n    }\r\n\r\n    /// @notice Claims all virtual AWOO accrued by the message sender, assuming the sender holds any supported contracts tokenIds\r\n    function claimAll() external nonReentrant {\r\n        require(claimingActive, \"Claiming is inactive\");\r\n        require(isValidHolder(), \"No supported tokens held\");\r\n\r\n        (AccrualDetails[] memory accruals, uint256 totalAccrued) = getTotalAccruals(_msgSender());\r\n        require(totalAccrued > 0, \"No tokens have been accrued\");\r\n        \r\n        for(uint8 i = 0; i < accruals.length; i++){\r\n            AccrualDetails memory accrual = accruals[i];\r\n\r\n            if(accrual.TotalAccrued > 0){\r\n                for(uint16 x = 0; x < accrual.TokenIds.length;x++){\r\n                    // Update the time that this token was last claimed\r\n                    lastClaims[accrual.ContractAddress][accrual.TokenIds[x]] = block.timestamp;\r\n                }\r\n            }\r\n        }\r\n    \r\n        // A holder's virtual AWOO balance is stored in the $AWOO ERC-20 contract\r\n        _awooContract.increaseVirtualBalance(_msgSender(), totalAccrued);\r\n        emit TokensClaimed(_msgSender(), totalAccrued);\r\n    }\r\n\r\n    /// @notice Claims the accrued virtual AWOO from the specified supported contract tokenIds\r\n    /// @param requestedClaims A collection of supported contract addresses and the specific tokenIds to claim from\r\n    function claim(ClaimDetails[] calldata requestedClaims) external nonReentrant {\r\n        require(claimingActive, \"Claiming is inactive\");\r\n        require(isValidHolder(), \"No supported tokens held\");\r\n\r\n        uint256 totalClaimed;\r\n\r\n        for(uint8 i = 0; i < requestedClaims.length; i++){\r\n            ClaimDetails calldata requestedClaim = requestedClaims[i];\r\n\r\n            uint8 contractId = _supportedContractIds[requestedClaim.ContractAddress];\r\n            if(contractId == 0) revert(\"Unsupported contract\");\r\n\r\n            SupportedContractDetails memory contractDetails = supportedContracts[contractId-1];\r\n            if(!contractDetails.Active) revert(\"Inactive contract\");\r\n\r\n            for(uint16 x = 0; x < requestedClaim.TokenIds.length; x++){\r\n                uint32 tokenId = requestedClaim.TokenIds[x];\r\n\r\n                address tokenOwner = ISupportedContract(address(contractDetails.ContractAddress)).ownerOf(tokenId);\r\n                if(tokenOwner != _msgSender()) revert(\"Invalid owner claim attempt\");\r\n\r\n                uint256 claimableAmount = getContractTokenAccruals(contractDetails.ContractAddress, contractDetails.BaseRate, tokenId);\r\n\r\n                if(claimableAmount > 0){\r\n                    totalClaimed+=claimableAmount;\r\n\r\n                    // Update the time that this token was last claimed\r\n                    lastClaims[contractDetails.ContractAddress][tokenId] = block.timestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(totalClaimed > 0){\r\n            _awooContract.increaseVirtualBalance(_msgSender(), totalClaimed);\r\n            emit TokensClaimed(_msgSender(), totalClaimed);\r\n        }\r\n    }\r\n\r\n    /// @dev Calculates the accrued amount of virtual AWOO for the specified supported contract and tokenId\r\n    function getContractTokenAccruals(address contractAddress, uint256 contractBaseRate, uint32 tokenId) private view returns(uint256){\r\n        uint256 lastClaimTime = lastClaims[contractAddress][tokenId];\r\n        uint256 accruedUntil = accrualEnd == 0 || block.timestamp < accrualEnd \r\n            ? block.timestamp \r\n            : accrualEnd;\r\n        \r\n        uint256 baseRate = baseRateTokenOverrides[contractAddress][tokenId] > 0 \r\n            ? baseRateTokenOverrides[contractAddress][tokenId] \r\n            : contractBaseRate;\r\n\r\n        if (lastClaimTime > 0){\r\n            return (baseRate*(accruedUntil-lastClaimTime))/60;\r\n        } else {\r\n             return (baseRate*(accruedUntil-accrualStart))/60;\r\n        }\r\n    }\r\n\r\n    /// @notice Allows an authorized contract to increase the base accrual rate for particular NFTs\r\n    /// when, for example, upgrades for that NFT were purchased\r\n    /// @param contractAddress The address of the supported contract\r\n    /// @param tokenId The id of the token from the supported contract whose base accrual rate will be updated\r\n    /// @param newBaseRate The new accrual base rate\r\n    function overrideTokenAccrualBaseRate(address contractAddress, uint32 tokenId, uint256 newBaseRate)\r\n        external onlyAuthorizedContract isValidBaseRate(newBaseRate) {\r\n            require(tokenId > 0, \"Invalid tokenId\");\r\n\r\n            uint8 contractId = _supportedContractIds[contractAddress];\r\n            require(contractId > 0, \"Unsupported contract\");\r\n            require(supportedContracts[contractId-1].Active, \"Inactive contract\");\r\n\r\n            baseRateTokenOverrides[contractAddress][tokenId] = (newBaseRate/_baseRateDivisor);\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to set a reference to the $AWOO ERC-20 contract\r\n    /// @param awooToken An instance of IAwooToken\r\n    function setAwooTokenContract(IAwooToken awooToken) external onlyOwnerOrAdmin {\r\n        _awooContract = awooToken;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to set the date and time at which virtual AWOO accruing will stop\r\n    /// @notice This will only be used if absolutely necessary and any AWOO that accrued before the end date will still be claimable\r\n    /// @param timestamp The Epoch time at which accrual should end\r\n    function setAccrualEndTimestamp(uint256 timestamp) external onlyOwnerOrAdmin {\r\n        accrualEnd = timestamp;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to add a contract whose tokens are eligible to accrue virtual AWOO\r\n    /// @param contractAddress The contract address of the collection (typically ERC-721, with the addition of the tokensOfOwner function)\r\n    /// @param baseRate The base accrual rate in wei units\r\n    function addSupportedContract(address contractAddress, uint256 baseRate) external onlyOwnerOrAdmin isValidBaseRate(baseRate) {\r\n        require(isContract(contractAddress), \"Invalid contractAddress\");\r\n        require(_supportedContractIds[contractAddress] == 0, \"Contract already supported\");\r\n\r\n        supportedContracts.push(SupportedContractDetails(contractAddress, baseRate/_baseRateDivisor, true));\r\n        _supportedContractIds[contractAddress] = uint8(supportedContracts.length);\r\n        _activeSupportedContractCount++;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to deactivate a supported contract so it no longer accrues virtual AWOO\r\n    /// @param contractAddress The contract address that should be deactivated\r\n    function deactivateSupportedContract(address contractAddress) external onlyOwnerOrAdmin {\r\n        require(_supportedContractIds[contractAddress] > 0, \"Unsupported contract\");\r\n\r\n        supportedContracts[_supportedContractIds[contractAddress]-1].Active = false;\r\n        supportedContracts[_supportedContractIds[contractAddress]-1].BaseRate = 0;\r\n        _supportedContractIds[contractAddress] = 0;\r\n        _activeSupportedContractCount--;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to authorize another contract to override token accruals on an individual token level\r\n    /// @param contractAddress The authorized contract address\r\n    function addAuthorizedContract(address contractAddress) external onlyOwnerOrAdmin {\r\n        require(isContract(contractAddress), \"Invalid contractAddress\");\r\n        _authorizedContracts[contractAddress] = true;\r\n        emit AuthorizedContractAdded(contractAddress, _msgSender());\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to remove an authorized contract\r\n    /// @param contractAddress The contract address which should have its authorization revoked\r\n    function removeAuthorizedContract(address contractAddress) external onlyOwnerOrAdmin {\r\n        _authorizedContracts[contractAddress] = false;\r\n        emit AuthorizedContractRemoved(contractAddress, _msgSender());\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to set the base accrual rate for a support contract\r\n    /// @param contractAddress The address of the supported contract\r\n    /// @param baseRate The new base accrual rate in wei units\r\n    function setBaseRate(address contractAddress, uint256 baseRate) external onlyOwnerOrAdmin isValidBaseRate(baseRate) {\r\n        require(_supportedContractIds[contractAddress] > 0, \"Unsupported contract\");\r\n        supportedContracts[_supportedContractIds[contractAddress]-1].BaseRate = baseRate/_baseRateDivisor;\r\n    }\r\n\r\n    /// @notice Allows the owner to specify two addresses allowed to administer this contract\r\n    /// @param adminAddresses A 2 item array of addresses\r\n    function setAdmins(address[2] calldata adminAddresses) external onlyOwner {\r\n        require(adminAddresses[0] != address(0) && adminAddresses[1] != address(0), \"Invalid admin address\");\r\n\r\n        _admins = adminAddresses;\r\n        _adminsSet = true;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to activate/deactivate claiming ability\r\n    /// @param active The value specifiying whether or not claiming should be allowed\r\n    function setClaimingActive(bool active) external onlyOwnerOrAdmin {\r\n        claimingActive = active;\r\n        emit ClaimingStatusChanged(active, _msgSender());\r\n    }\r\n\r\n    /// @dev Derived from @openzeppelin/contracts/utils/Address.sol\r\n    function isContract(address account) private view returns (bool) {\r\n        if(account == address(0)) return false;\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /// @notice Determines whether or not the caller holds tokens for any of the supported contracts\r\n    function isValidHolder() private view returns(bool) {\r\n        for(uint8 i = 0; i < supportedContracts.length; i++){\r\n            SupportedContractDetails memory contractDetails = supportedContracts[i];\r\n            if(contractDetails.Active){\r\n                if(ISupportedContract(contractDetails.ContractAddress).balanceOf(_msgSender()) > 0) {\r\n                    return true; // No need to continue checking other collections if the holder has any of the supported tokens\r\n                } \r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    modifier onlyAuthorizedContract() {\r\n        require(_authorizedContracts[_msgSender()], \"Sender is not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(\r\n            _msgSender() == owner() || (\r\n                _adminsSet && (\r\n                    _msgSender() == _admins[0] || _msgSender() == _admins[1]\r\n                )\r\n            ), \"Not an owner or admin\");\r\n        _;\r\n    }\r\n\r\n    /// @dev To minimize the amount of unit conversion we have to do for comparing $AWOO (ERC-20) to virtual AWOO, we store\r\n    /// virtual AWOO with 18 implied decimal places, so this modifier prevents us from accidentally using the wrong unit\r\n    /// for base rates.  For example, if holders of FangGang NFTs accrue at a rate of 1000 AWOO per fang, pre day, then\r\n    /// the base rate should be 1000000000000000000000\r\n    modifier isValidBaseRate(uint256 baseRate) {\r\n        require(baseRate >= 1 ether, \"Base rate must be in wei units\");\r\n        _;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/AwooToken.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AwooToken is IAwooToken, ERC20, ReentrancyGuard, Ownable, AddressChecksumStringUtil {\r\n    using ECDSA for bytes32;\r\n    using Strings for uint256;\r\n\r\n    /// @dev Controls whether or not the deposit/withdraw functionality is enabled\r\n    bool public isActive = true;\r\n\r\n    /// @dev The percentage of spent virtual AWOO taken as a fee\r\n    uint256 public awooFeePercentage = 10;\r\n    /// @dev The Awoo Studios account where fees are sent\r\n    address public awooStudiosAccount;\r\n\r\n    address[2] private _admins;\r\n    bool private _adminsSet;   \r\n\r\n    /// @dev Keeps track of which contracts are explicitly allowed to add virtual AWOO to a holder's address, spend from it, or\r\n    /// in the future, mint ERC-20 tokens\r\n    mapping(address => bool) private _authorizedContracts;\r\n    /// @dev Keeps track of each holders virtual AWOO balance\r\n    mapping(address => uint256) private _virtualBalance;\r\n    /// @dev Keeps track of nonces used for spending events to prevent double spends\r\n    mapping(string => bool) private _usedNonces;\r\n\r\n    event AuthorizedContractAdded(address contractAddress, address addedBy);\r\n    event AuthorizedContractRemoved(address contractAddress, address removedBy);\r\n    event VirtualAwooSpent(address spender, uint256 amount);\r\n\r\n    constructor(address awooAccount) ERC20(\"Awoo Token\", \"AWOO\") {\r\n        require(awooAccount != address(0), \"Invalid awooAccount\");\r\n        awooStudiosAccount = awooAccount;\r\n    }\r\n\r\n    /// @notice Allows an authorized contract to mint $AWOO\r\n    /// @param account The account to receive the minted $AWOO tokens\r\n    /// @param amount The amount of $AWOO to mint\r\n    function mint(address account, uint256 amount) external nonReentrant onlyAuthorizedContract {\r\n        require(account != address(0), \"Cannot mint to the zero address\");\r\n        require(amount > 0, \"Amount cannot be zero\");\r\n        _mint(account, amount);\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to add authorized contracts\r\n    /// @param contractAddress The address of the contract to authorize\r\n    function addAuthorizedContract(address contractAddress) external onlyOwnerOrAdmin {\r\n        require(isContract(contractAddress), \"Not a contract address\");\r\n        _authorizedContracts[contractAddress] = true;\r\n        emit AuthorizedContractAdded(contractAddress, _msgSender());\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to remove authorized contracts\r\n    /// @param contractAddress The address of the contract to revoke authorization for\r\n    function removeAuthorizedContract(address contractAddress) external onlyOwnerOrAdmin {\r\n        _authorizedContracts[contractAddress] = false;\r\n        emit AuthorizedContractRemoved(contractAddress, _msgSender());\r\n    }\r\n\r\n    /// @notice Exchanges virtual AWOO for ERC-20 $AWOO\r\n    /// @param amount The amount of virtual AWOO to withdraw\r\n    function withdraw(uint256 amount) external whenActive hasBalance(amount, _virtualBalance[_msgSender()]) nonReentrant {\r\n        _mint(_msgSender(), amount);\r\n        _virtualBalance[_msgSender()] -= amount;\r\n    }\r\n\r\n    /// @notice Exchanges ERC-20 $AWOO for virtual AWOO to be used in the Awoo Studios ecosystem\r\n    /// @param amount The amount of $AWOO to deposit\r\n    function deposit(uint256 amount) external whenActive hasBalance(amount, balanceOf(_msgSender())) nonReentrant {\r\n        _burn(_msgSender(), amount);\r\n        _virtualBalance[_msgSender()] += amount;\r\n    }\r\n\r\n    /// @notice Returns the amount of virtual AWOO held by the specified address\r\n    /// @param account The holder account to check\r\n    function balanceOfVirtual(address account) external view returns(uint256) {\r\n        return _virtualBalance[account];\r\n    }\r\n\r\n    /// @notice Returns the amount of ERC-20 $AWOO held by the specified address\r\n    /// @param account The holder account to check\r\n    function totalBalanceOf(address account) external view returns(uint256) {\r\n        return _virtualBalance[account] + balanceOf(account);\r\n    }\r\n\r\n    /// @notice Allows authorized contracts to increase a holders virtual AWOO\r\n    /// @param account The account to increase\r\n    /// @param amount The amount of virtual AWOO to increase the account by\r\n    function increaseVirtualBalance(address account, uint256 amount) external onlyAuthorizedContract {\r\n        _virtualBalance[account] += amount;\r\n    }\r\n\r\n    /// @notice Allows authorized contracts to faciliate the spending of virtual AWOO, and fees to be paid to\r\n    /// Awoo Studios.\r\n    /// @notice Only amounts that have been signed and verified by the token holder can be spent\r\n    /// @param hash The hash of the message displayed to and signed by the holder\r\n    /// @param sig The signature of the messages that was signed by the holder\r\n    /// @param nonce The unique code used to prevent double spends\r\n    /// @param account The account of the holder to debit\r\n    /// @param amount The amount of virtual AWOO to debit\r\n    function spendVirtualAwoo(bytes32 hash, bytes memory sig, string calldata nonce, address account, uint256 amount)\r\n        external onlyAuthorizedContract hasBalance(amount, _virtualBalance[account]) nonReentrant {\r\n            require(_usedNonces[nonce] == false, \"Duplicate nonce\");\r\n            require(matchAddresSigner(account, hash, sig), \"Message signer mismatch\"); // Make sure that the spend request was authorized (signed) by the holder\r\n            require(hashTransaction(account, amount) == hash, \"Hash check failed\"); // Make sure that only the amount authorized by the holder can be spent\r\n        \r\n            // debit the holder's virtual AWOO account\r\n            _virtualBalance[account]-=amount;\r\n\r\n            // Mint the spending fee to the Awoo Studios account\r\n            _mint(awooStudiosAccount, ((amount * awooFeePercentage)/100));\r\n\r\n            _usedNonces[nonce] = true;\r\n\r\n            emit VirtualAwooSpent(account, amount);\r\n    }\r\n\r\n    /// @notice Allows the owner to specify two addresses allowed to administer this contract\r\n    /// @param adminAddresses A 2 item array of addresses\r\n    function setAdmins(address[2] calldata adminAddresses) external onlyOwner {\r\n        require(adminAddresses[0] != address(0) && adminAddresses[1] != address(0), \"Invalid admin address\");\r\n        _admins = adminAddresses;\r\n        _adminsSet = true;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to activate/deactivate deposit and withdraw functionality\r\n    /// @notice This will only be used to disable functionality as a worst case scenario\r\n    /// @param active The value specifiying whether or not deposits/withdraws should be allowed\r\n    function setActiveState(bool active) external onlyOwnerOrAdmin {\r\n        isActive = active;\r\n    }\r\n\r\n    /// @notice Allows the owner to change the account used for collecting spending fees\r\n    /// @param awooAccount The new account\r\n    function setAwooStudiosAccount(address awooAccount) external onlyOwner {\r\n        require(awooAccount != address(0), \"Invalid awooAccount\");\r\n        awooStudiosAccount = awooAccount;\r\n    }\r\n\r\n    /// @notice Allows the owner to change the spending fee percentage\r\n    /// @param feePercentage The new fee percentage\r\n    function setFeePercentage(uint256 feePercentage) external onlyOwner {\r\n        awooFeePercentage = feePercentage; // We're intentionally allowing the fee percentage to be set to 0%, incase no fees need to be collected\r\n    }\r\n\r\n    /// @notice Allows the owner to withdraw any Ethereum that was accidentally sent to this contract\r\n    function rescueEth() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    /// @dev Derived from @openzeppelin/contracts/utils/Address.sol\r\n    function isContract(address account) private view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /// @dev Validates the specified account against the account that signed the message\r\n    function matchAddresSigner(address account, bytes32 hash, bytes memory signature) private pure returns (bool) {\r\n        return account == hash.recover(signature);\r\n    }\r\n\r\n    /// @dev Hashes the message we expected the spender to sign so we can compare the hashes to ensure that the owner\r\n    /// of the specified address signed the same message\r\n    /// @dev fractional ether unit amounts aren't supported\r\n    function hashTransaction(address sender, uint256 amount) private pure returns (bytes32) {\r\n        require(amount == ((amount/1e18)*1e18), \"Invalid amount\");\r\n        // Virtual $AWOO, much like the ERC-20 $AWOO is stored with 18 implied decimal places.\r\n        // For user-friendliness, when prompting the user to sign the message, the amount is\r\n        // _displayed_ without the implied decimals, but it is charged with the implied decimals,\r\n        // so when validating the hash, we have to use the same value we displayed to the user.\r\n        // This only affects the display value, nothing else\r\n        amount = amount/1e18;\r\n        \r\n        string memory message = string(abi.encodePacked(\r\n            \"As the owner of Ethereum address\\r\\n\",\r\n            toChecksumString(sender),\r\n            \"\\r\\nI authorize the spending of \",\r\n            amount.toString(),\" virtual $AWOO\"\r\n        ));\r\n        uint256 messageLength = bytes(message).length;\r\n\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n\",messageLength.toString(),\r\n                message\r\n            )\r\n        );\r\n        return hash;\r\n    }\r\n    \r\n    modifier onlyAuthorizedContract() {\r\n        require(_authorizedContracts[_msgSender()], \"Sender is not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier whenActive() {\r\n        require(isActive, \"Contract is not active\");\r\n        _;\r\n    }\r\n\r\n    modifier hasBalance(uint256 amount, uint256 balance) {\r\n        require(amount > 0, \"Amount cannot be zero\");\r\n        require(balance >= amount, \"Insufficient Balance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(\r\n            _msgSender() == owner() ||\r\n                (_adminsSet &&\r\n                    (_msgSender() == _admins[0] || _msgSender() == _admins[1])),\r\n            \"Caller is not the owner or an admin\"\r\n        );\r\n        _;\r\n    }\r\n}\r\n// File: contracts/AwooClaimingV2.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AwooClaimingV2 is IAwooClaimingV2, AuthorizedCallerGuard, ReentrancyGuard {\r\n    uint256 public accrualStart;\r\n\tuint256 public accrualEnd;\r\n\t\r\n    bool public claimingActive;\r\n\r\n    /// @dev A collection of supported contracts. These are typically ERC-721, with the addition of the tokensOfOwner function.\r\n    /// @dev These contracts can be deactivated but cannot be re-activated.  Reactivating can be done by adding the same\r\n    /// contract through addSupportedContract\r\n    SupportedContractDetails[] public supportedContracts;\r\n\r\n    /// @dev Keeps track of the last time a claim was made for each tokenId within the supported contract collection\r\n    mapping(address => mapping(uint256 => uint256)) public lastClaims;\r\n    /// @dev Allows the base accrual rates to be overridden on a per-tokenId level to support things like upgrades\r\n    mapping(address => mapping(uint256 => uint256)) public baseRateTokenOverrides;\r\n\r\n    AwooClaiming public v1ClaimingContract;\r\n    AwooToken public awooContract;\r\n\r\n    /// @dev Base accrual rates are set a per-day rate so we change them to per-minute to allow for more frequent claiming\r\n    uint64 private _baseRateDivisor = 1440;\r\n\r\n    /// @dev Faciliates the maintence and functionality related to supportedContracts\r\n    uint8 private _activeSupportedContractCount;     \r\n    mapping(address => uint8) private _supportedContractIds;\r\n    \r\n    event TokensClaimed(address indexed claimedBy, uint256 qty);\r\n    event ClaimingStatusChanged(bool newStatus, address changedBy);\r\n\r\n    constructor(AwooClaiming v1Contract) {\r\n        v1ClaimingContract = v1Contract;\r\n        accrualStart = v1ClaimingContract.accrualStart();\r\n    }\r\n\r\n    /// @notice Sets the first version of the claiming contract, which has been replaced with this one\r\n    /// @param v1Contract A reference to the v1 claiming contract\r\n    function setV1ClaimingContract(AwooClaiming v1Contract) external onlyOwnerOrAdmin {\r\n        v1ClaimingContract = v1Contract;\r\n        accrualStart = v1ClaimingContract.accrualStart();\r\n    }\r\n\r\n    /// @notice Determines the amount of accrued virtual AWOO for the specified address, based on the\r\n    /// base accural rates for each supported contract and how long has elapsed (in minutes) since the\r\n    /// last claim was made for a give supported contract tokenId\r\n    /// @param owner The address of the owner/holder of tokens for a supported contract\r\n    /// @return A collection of accrued virtual AWOO and the tokens it was accrued on for each supported contract, and the total AWOO accrued\r\n    function getTotalAccruals(address owner) public view returns (AccrualDetails[] memory, uint256) {\r\n        // Initialize the array length based on the number of _active_ supported contracts\r\n        AccrualDetails[] memory totalAccruals = new AccrualDetails[](_activeSupportedContractCount);\r\n\r\n        uint256 totalAccrued;\r\n        uint8 contractCount; // Helps us keep track of the index to use when setting the values for totalAccruals\r\n        for(uint8 i = 0; i < supportedContracts.length; i++) {\r\n            SupportedContractDetails memory contractDetails = supportedContracts[i];\r\n\r\n            if(contractDetails.Active){\r\n                contractCount++;\r\n                \r\n                // Get an array of tokenIds held by the owner for the supported contract\r\n                uint256[] memory tokenIds = ISupportedContract(contractDetails.ContractAddress).tokensOfOwner(owner);\r\n                uint256[] memory accruals = new uint256[](tokenIds.length);\r\n                \r\n                uint256 totalAccruedByContract;\r\n\r\n                for (uint16 x = 0; x < tokenIds.length; x++) {\r\n                    uint32 tokenId = uint32(tokenIds[x]);\r\n                    uint256 accrued = getContractTokenAccruals(contractDetails.ContractAddress, tokenId);\r\n\r\n                    totalAccruedByContract+=accrued;\r\n                    totalAccrued+=accrued;\r\n\r\n                    tokenIds[x] = tokenId;\r\n                    accruals[x] = accrued;\r\n                }\r\n\r\n                AccrualDetails memory accrual = AccrualDetails(contractDetails.ContractAddress, tokenIds, accruals, totalAccruedByContract);\r\n\r\n                totalAccruals[contractCount-1] = accrual;\r\n            }\r\n        }\r\n        return (totalAccruals, totalAccrued);\r\n    }\r\n\r\n    /// @notice Claims all virtual AWOO accrued by the message sender, assuming the sender holds any supported contracts tokenIds\r\n    function claimAll(address holder) external nonReentrant {\r\n        require(claimingActive, \"Claiming is inactive\");\r\n        require(_isAuthorizedContract(_msgSender()) || holder == _msgSender(), \"Unauthorized claim attempt\");\r\n\r\n        (AccrualDetails[] memory accruals, uint256 totalAccrued) = getTotalAccruals(holder);\r\n        require(totalAccrued > 0, \"No tokens have been accrued\");\r\n        \r\n        for(uint8 i = 0; i < accruals.length; i++){\r\n            AccrualDetails memory accrual = accruals[i];\r\n\r\n            if(accrual.TotalAccrued > 0){\r\n                for(uint16 x = 0; x < accrual.TokenIds.length;x++){\r\n                    // Update the time that this token was last claimed\r\n                    lastClaims[accrual.ContractAddress][accrual.TokenIds[x]] = block.timestamp;\r\n                }\r\n            }\r\n        }\r\n    \r\n        // A holder's virtual AWOO balance is stored in the $AWOO ERC-20 contract\r\n        awooContract.increaseVirtualBalance(holder, totalAccrued);\r\n        emit TokensClaimed(holder, totalAccrued);\r\n    }\r\n\r\n    /// @notice Claims the accrued virtual AWOO from the specified supported contract tokenIds\r\n    /// @param requestedClaims A collection of supported contract addresses and the specific tokenIds to claim from\r\n    function claim(address holder, ClaimDetails[] calldata requestedClaims) external nonReentrant {\r\n        require(claimingActive, \"Claiming is inactive\");\r\n        require(_isAuthorizedContract(_msgSender()) || holder == _msgSender(), \"Unauthorized claim attempt\");\r\n\r\n        uint256 totalClaimed;\r\n\r\n        for(uint8 i = 0; i < requestedClaims.length; i++){\r\n            ClaimDetails calldata requestedClaim = requestedClaims[i];\r\n\r\n            uint8 contractId = _supportedContractIds[requestedClaim.ContractAddress];\r\n            if(contractId == 0) revert(\"Unsupported contract\");\r\n\r\n            SupportedContractDetails memory contractDetails = supportedContracts[contractId-1];\r\n            if(!contractDetails.Active) revert(\"Inactive contract\");\r\n\r\n            for(uint16 x = 0; x < requestedClaim.TokenIds.length; x++){\r\n                uint32 tokenId = requestedClaim.TokenIds[x];\r\n\r\n                address tokenOwner = ISupportedContract(address(contractDetails.ContractAddress)).ownerOf(tokenId);\r\n                if(tokenOwner != holder) revert(\"Invalid owner claim attempt\");\r\n\r\n                uint256 claimableAmount = getContractTokenAccruals(contractDetails.ContractAddress, tokenId);\r\n\r\n                if(claimableAmount > 0){\r\n                    totalClaimed+=claimableAmount;\r\n\r\n                    // Update the time that this token was last claimed\r\n                    lastClaims[contractDetails.ContractAddress][tokenId] = block.timestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(totalClaimed > 0){\r\n            awooContract.increaseVirtualBalance(holder, totalClaimed);\r\n            emit TokensClaimed(holder, totalClaimed);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the accrued amount of virtual AWOO for the specified supported contract and tokenId\r\n    /// @dev To save gas, we don't validate the existence of the token within the specified collection as this is done\r\n    /// within the claiming functions\r\n    /// @dev The first time a claim is made in this contract, we use the v1 contract's last claim time so we don't\r\n    /// accrue based on accruals that were claimed through the v1 contract\r\n    /// @param contractAddress The contract address of the supported collection\r\n    /// @param tokenId The id of the token/NFT\r\n    /// @return The amount of virtual AWOO accrued for the specified token and collection\r\n    function getContractTokenAccruals(address contractAddress, uint32 tokenId) public view returns(uint256){\r\n        uint8 contractId = _supportedContractIds[contractAddress];\r\n        if(contractId == 0) revert(\"Unsupported contract\");\r\n\r\n        SupportedContractDetails memory contractDetails = supportedContracts[contractId-1];\r\n        if(!contractDetails.Active) revert(\"Inactive contract\");\r\n\r\n        uint256 lastClaimTime = lastClaims[contractAddress][tokenId] > 0\r\n            ? lastClaims[contractAddress][tokenId]\r\n            : v1ClaimingContract.lastClaims(contractAddress, tokenId);\r\n\r\n        uint256 accruedUntil = accrualEnd == 0 || block.timestamp < accrualEnd \r\n            ? block.timestamp \r\n            : accrualEnd;\r\n        \r\n        uint256 baseRate = getContractTokenBaseAccrualRate(contractDetails, tokenId);\r\n\r\n        if (lastClaimTime > 0){\r\n            return (baseRate*(accruedUntil-lastClaimTime))/60;\r\n        } else {\r\n             return (baseRate*(accruedUntil-accrualStart))/60;\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the current base accrual rate for the specified token, taking overrides into account\r\n    /// @dev This is mostly to support testing\r\n    /// @param contractDetails The details of the supported contract\r\n    /// @param tokenId The id of the token/NFT\r\n    /// @return The base accrual rate\r\n    function getContractTokenBaseAccrualRate(SupportedContractDetails memory contractDetails, uint32 tokenId\r\n    ) public view returns(uint256){\r\n        return baseRateTokenOverrides[contractDetails.ContractAddress][tokenId] > 0 \r\n            ? baseRateTokenOverrides[contractDetails.ContractAddress][tokenId] \r\n            : contractDetails.BaseRate;\r\n    }\r\n\r\n    /// @notice Allows an authorized contract to increase the base accrual rate for particular NFTs\r\n    /// when, for example, upgrades for that NFT were purchased\r\n    /// @param contractAddress The address of the supported contract\r\n    /// @param tokenId The id of the token from the supported contract whose base accrual rate will be updated\r\n    /// @param newBaseRate The new accrual base rate\r\n    function overrideTokenAccrualBaseRate(address contractAddress, uint32 tokenId, uint256 newBaseRate)\r\n        external onlyAuthorizedContract isValidBaseRate(newBaseRate) {\r\n            require(tokenId > 0, \"Invalid tokenId\");\r\n\r\n            uint8 contractId = _supportedContractIds[contractAddress];\r\n            require(contractId > 0, \"Unsupported contract\");\r\n            require(supportedContracts[contractId-1].Active, \"Inactive contract\");\r\n\r\n            baseRateTokenOverrides[contractAddress][tokenId] = (newBaseRate/_baseRateDivisor);\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to set a reference to the $AWOO ERC-20 contract\r\n    /// @param awooToken An instance of IAwooToken\r\n    function setAwooTokenContract(AwooToken awooToken) external onlyOwnerOrAdmin {\r\n        awooContract = awooToken;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to set the date and time at which virtual AWOO accruing will stop\r\n    /// @notice This will only be used if absolutely necessary and any AWOO that accrued before the end date will still be claimable\r\n    /// @param timestamp The Epoch time at which accrual should end\r\n    function setAccrualEndTimestamp(uint256 timestamp) external onlyOwnerOrAdmin {\r\n        accrualEnd = timestamp;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to add a contract whose tokens are eligible to accrue virtual AWOO\r\n    /// @param contractAddress The contract address of the collection (typically ERC-721, with the addition of the tokensOfOwner function)\r\n    /// @param baseRate The base accrual rate in wei units\r\n    function addSupportedContract(address contractAddress, uint256 baseRate) public onlyOwnerOrAdmin isValidBaseRate(baseRate) {\r\n        require(_isContract(contractAddress), \"Invalid contractAddress\");\r\n        require(_supportedContractIds[contractAddress] == 0, \"Contract already supported\");\r\n\r\n        supportedContracts.push(SupportedContractDetails(contractAddress, baseRate/_baseRateDivisor, true));\r\n        _supportedContractIds[contractAddress] = uint8(supportedContracts.length);\r\n        _activeSupportedContractCount++;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to deactivate a supported contract so it no longer accrues virtual AWOO\r\n    /// @param contractAddress The contract address that should be deactivated\r\n    function deactivateSupportedContract(address contractAddress) external onlyOwnerOrAdmin {\r\n        require(_supportedContractIds[contractAddress] > 0, \"Unsupported contract\");\r\n\r\n        supportedContracts[_supportedContractIds[contractAddress]-1].Active = false;\r\n        supportedContracts[_supportedContractIds[contractAddress]-1].BaseRate = 0;\r\n        _supportedContractIds[contractAddress] = 0;\r\n        _activeSupportedContractCount--;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to set the base accrual rate for a support contract\r\n    /// @param contractAddress The address of the supported contract\r\n    /// @param baseRate The new base accrual rate in wei units\r\n    function setBaseRate(address contractAddress, uint256 baseRate) external onlyOwnerOrAdmin isValidBaseRate(baseRate) {\r\n        require(_supportedContractIds[contractAddress] > 0, \"Unsupported contract\");\r\n        supportedContracts[_supportedContractIds[contractAddress]-1].BaseRate = baseRate/_baseRateDivisor;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to activate/deactivate claiming ability\r\n    /// @param active The value specifiying whether or not claiming should be allowed\r\n    function setClaimingActive(bool active) external onlyOwnerOrAdmin {\r\n        claimingActive = active;\r\n        emit ClaimingStatusChanged(active, _msgSender());\r\n    }\r\n\r\n    /// @dev To minimize the amount of unit conversion we have to do for comparing $AWOO (ERC-20) to virtual AWOO, we store\r\n    /// virtual AWOO with 18 implied decimal places, so this modifier prevents us from accidentally using the wrong unit\r\n    /// for base rates.  For example, if holders of FangGang NFTs accrue at a rate of 1000 AWOO per fang, pre day, then\r\n    /// the base rate should be 1000000000000000000000\r\n    modifier isValidBaseRate(uint256 baseRate) {\r\n        require(baseRate >= 1 ether, \"Base rate must be in wei units\");\r\n        _;\r\n    }\r\n}\r\n// File: contracts/AwooClaimingV3.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AwooClaimingV3 is IAwooClaimingV2, AuthorizedCallerGuard, ReentrancyGuard {\r\n    uint256 public accrualStart;\r\n\tuint256 public accrualEnd;\r\n\t\r\n    bool public claimingActive = false;\r\n\r\n    /// @dev A collection of supported contracts. These are typically ERC-721, with the addition of the tokensOfOwner function.\r\n    /// @dev These contracts can be deactivated but cannot be re-activated.  Reactivating can be done by adding the same\r\n    /// contract through addSupportedContract\r\n    SupportedContractDetails[] public supportedContracts;\r\n\r\n    /// @dev Keeps track of the last time a claim was made for each tokenId within the supported contract collection\r\n    // contractAddress => (tokenId, lastClaimTimestamp)\r\n    mapping(address => mapping(uint256 => uint48)) public lastClaims;\r\n    /// @dev Allows the base accrual rates to be overridden on a per-tokenId level to support things like upgrades\r\n    mapping(address => mapping(uint256 => uint256)) public baseRateTokenOverrides;\r\n\r\n    // contractAddress => (tokenId, accruedAmount)\r\n    mapping(address => mapping(uint256 => uint256)) public unclaimedSnapshot;\r\n\r\n    AwooClaiming public v1ClaimingContract;\r\n    AwooClaimingV2 public v2ClaimingContract;\r\n    AwooToken public awooContract;\r\n\r\n    /// @dev Base accrual rates are set a per-day rate so we change them to per-minute to allow for more frequent claiming\r\n    uint64 private _baseRateDivisor = 1440;\r\n\r\n    /// @dev Faciliates the maintence and functionality related to supportedContracts\r\n    uint8 private _activeSupportedContractCount;     \r\n    mapping(address => uint8) private _supportedContractIds;\r\n    \r\n    event TokensClaimed(address indexed claimedBy, uint256 qty);\r\n    event ClaimingStatusChanged(bool newStatus, address changedBy);\r\n\r\n    constructor(AwooToken awooTokenContract, AwooClaimingV2 v2Contract, AwooClaiming v1Contract) {\r\n        awooContract = awooTokenContract;\r\n        v2ClaimingContract = v2Contract;\r\n        accrualStart = v2ClaimingContract.accrualStart();\r\n        v1ClaimingContract = v1Contract;\r\n    }\r\n\r\n    /// @notice Sets the previous versions of the claiming contracts, which have been replaced with this one\r\n    function setContracts(AwooClaimingV2 v2Contract, AwooClaiming v1Contract) external onlyOwnerOrAdmin {\r\n        v2ClaimingContract = v2Contract;\r\n        accrualStart = v2ClaimingContract.accrualStart();\r\n        v1ClaimingContract = v1Contract;\r\n    }\r\n\r\n    /// @notice Determines the amount of accrued virtual AWOO for the specified address, based on the\r\n    /// base accural rates for each supported contract and how long has elapsed (in minutes) since the\r\n    /// last claim was made for a give supported contract tokenId\r\n    /// @param owner The address of the owner/holder of tokens for a supported contract\r\n    /// @return A collection of accrued virtual AWOO and the tokens it was accrued on for each supported contract, and the total AWOO accrued\r\n    function getTotalAccruals(address owner) public view returns (AccrualDetails[] memory, uint256) {\r\n        // Initialize the array length based on the number of _active_ supported contracts\r\n        AccrualDetails[] memory totalAccruals = new AccrualDetails[](_activeSupportedContractCount);\r\n\r\n        uint256 totalAccrued;\r\n        uint8 contractCount; // Helps us keep track of the index to use when setting the values for totalAccruals\r\n        for(uint8 i = 0; i < supportedContracts.length; i++) {\r\n            SupportedContractDetails memory contractDetails = supportedContracts[i];\r\n\r\n            if(contractDetails.Active){\r\n                contractCount++;\r\n                \r\n                // Get an array of tokenIds held by the owner for the supported contract\r\n                uint256[] memory tokenIds = ISupportedContract(contractDetails.ContractAddress).tokensOfOwner(owner);\r\n                uint256[] memory accruals = new uint256[](tokenIds.length);\r\n                \r\n                uint256 totalAccruedByContract;\r\n\r\n                for (uint16 x = 0; x < tokenIds.length; x++) {\r\n                    uint256 tokenId = tokenIds[x];\r\n                    uint256 accrued = getContractTokenAccruals(contractDetails.ContractAddress, tokenId);\r\n\r\n                    totalAccruedByContract+=accrued;\r\n                    totalAccrued+=accrued;\r\n\r\n                    tokenIds[x] = tokenId;\r\n                    accruals[x] = accrued;\r\n                }\r\n\r\n                AccrualDetails memory accrual = AccrualDetails(contractDetails.ContractAddress, tokenIds, accruals, totalAccruedByContract);\r\n\r\n                totalAccruals[contractCount-1] = accrual;\r\n            }\r\n        }\r\n        return (totalAccruals, totalAccrued);\r\n    }\r\n\r\n    /// @notice Claims all virtual AWOO accrued by the message sender, assuming the sender holds any supported contracts tokenIds\r\n    function claimAll(address holder) external nonReentrant {\r\n        require(claimingActive, \"Claiming is inactive\");\r\n        require(_isAuthorizedContract(_msgSender()) || holder == _msgSender(), \"Unauthorized claim attempt\");\r\n\r\n        (AccrualDetails[] memory accruals, uint256 totalAccrued) = getTotalAccruals(holder);\r\n        require(totalAccrued > 0, \"No tokens have been accrued\");\r\n        \r\n        for(uint8 i = 0; i < accruals.length; i++){\r\n            AccrualDetails memory accrual = accruals[i];\r\n\r\n            if(accrual.TotalAccrued > 0){\r\n                for(uint16 x = 0; x < accrual.TokenIds.length;x++){\r\n                    // Update the time that this token was last claimed\r\n                    lastClaims[accrual.ContractAddress][accrual.TokenIds[x]] = uint48(block.timestamp);\r\n                    // Any amount from the unclaimed snapshot are now claimed because they were returned by getContractTokenAccruals\r\n                    // so dump it\r\n                    delete unclaimedSnapshot[accrual.ContractAddress][accrual.TokenIds[x]];\r\n                }\r\n            }\r\n        }\r\n    \r\n        // A holder's virtual AWOO balance is stored in the $AWOO ERC-20 contract\r\n        awooContract.increaseVirtualBalance(holder, totalAccrued);\r\n        emit TokensClaimed(holder, totalAccrued);\r\n    }\r\n\r\n    /// @notice Claims the accrued virtual AWOO from the specified supported contract tokenIds\r\n    /// @param requestedClaims A collection of supported contract addresses and the specific tokenIds to claim from\r\n    function claim(address holder, ClaimDetails[] calldata requestedClaims) external nonReentrant {\r\n        require(claimingActive, \"Claiming is inactive\");\r\n        require(_isAuthorizedContract(_msgSender()) || holder == _msgSender(), \"Unauthorized claim attempt\");\r\n\r\n        uint256 totalClaimed;\r\n\r\n        for(uint8 i = 0; i < requestedClaims.length; i++){\r\n            ClaimDetails calldata requestedClaim = requestedClaims[i];\r\n\r\n            uint8 contractId = _supportedContractIds[requestedClaim.ContractAddress];\r\n            if(contractId == 0) revert(\"Unsupported contract\");\r\n\r\n            SupportedContractDetails memory contractDetails = supportedContracts[contractId-1];\r\n            if(!contractDetails.Active) revert(\"Inactive contract\");\r\n\r\n            for(uint16 x = 0; x < requestedClaim.TokenIds.length; x++){\r\n                uint32 tokenId = requestedClaim.TokenIds[x];\r\n\r\n                address tokenOwner = ISupportedContract(address(contractDetails.ContractAddress)).ownerOf(tokenId);\r\n                if(tokenOwner != holder) revert(\"Invalid owner claim attempt\");\r\n\r\n                uint256 claimableAmount = getContractTokenAccruals(contractDetails.ContractAddress, tokenId);\r\n\r\n                if(claimableAmount > 0){\r\n                    totalClaimed+=claimableAmount;\r\n\r\n                    // Update the time that this token was last claimed\r\n                    lastClaims[contractDetails.ContractAddress][tokenId] = uint48(block.timestamp);\r\n                    // Any amount from the unclaimed snapshot are now claimed because they were returned by getContractTokenAccruals\r\n                    // so dump it\r\n                    delete unclaimedSnapshot[contractDetails.ContractAddress][tokenId];\r\n                }\r\n            }\r\n        }\r\n\r\n        if(totalClaimed > 0){\r\n            awooContract.increaseVirtualBalance(holder, totalClaimed);\r\n            emit TokensClaimed(holder, totalClaimed);\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the accrued amount of virtual AWOO for the specified supported contract and tokenId\r\n    /// @dev To save gas, we don't validate the existence of the token within the specified collection as this is done\r\n    /// within the claiming functions\r\n    /// @dev The first time a claim is made in this contract, we use the v1 contract's last claim time so we don't\r\n    /// accrue based on accruals that were claimed through the v1 contract\r\n    /// @param contractAddress The contract address of the supported collection\r\n    /// @param tokenId The id of the token/NFT\r\n    /// @return The amount of virtual AWOO accrued for the specified token and collection\r\n    function getContractTokenAccruals(address contractAddress, uint256 tokenId) public view returns(uint256){\r\n        uint8 contractId = _supportedContractIds[contractAddress];\r\n        if(contractId == 0) revert(\"Unsupported contract\");\r\n\r\n        SupportedContractDetails memory contractDetails = supportedContracts[contractId-1];\r\n        if(!contractDetails.Active) revert(\"Inactive contract\");\r\n\r\n        return getContractTokenAccruals(contractDetails, tokenId, uint48(block.timestamp));\r\n    }\r\n\r\n    /// @notice Calculates the accrued amount of virtual AWOO for the specified supported contract and tokenId, at the point in time specified\r\n    /// @dev To save gas, we don't validate the existence of the token within the specified collection as this is done\r\n    /// within the claiming functions\r\n    /// @dev The first time a claim is made in this contract, we use the v1 contract's last claim time so we don't\r\n    /// accrue based on accruals that were claimed through the v1 contract\r\n    /// @param contractDetails The contract details of the supported collection\r\n    /// @param tokenId The id of the token/NFT\r\n    /// @param accruedUntilTimestamp The timestamp to calculate accruals from\r\n    /// @return The amount of virtual AWOO accrued for the specified token and collection\r\n    function getContractTokenAccruals(SupportedContractDetails memory contractDetails, \r\n        uint256 tokenId, uint48 accruedUntilTimestamp\r\n    ) private view returns(uint256){\r\n        uint48 lastClaimTime = getLastClaimTime(contractDetails.ContractAddress, tokenId);\r\n\r\n        uint256 accruedUntil = accrualEnd == 0 || accruedUntilTimestamp < accrualEnd \r\n            ? accruedUntilTimestamp\r\n            : accrualEnd;\r\n        \r\n        uint256 existingSnapshotAmount = unclaimedSnapshot[contractDetails.ContractAddress][tokenId];\r\n        uint256 baseRate = getContractTokenBaseAccrualRate(contractDetails, tokenId);\r\n\r\n        if (lastClaimTime > 0){\r\n            return existingSnapshotAmount + ((baseRate*(accruedUntil-lastClaimTime))/60);\r\n        } else {\r\n            return existingSnapshotAmount + ((baseRate*(accruedUntil-accrualStart))/60);\r\n        }\r\n    }\r\n\r\n    function getLastClaimTime(address contractAddress, uint256 tokenId) public view returns(uint48){\r\n        uint48 lastClaim = lastClaims[contractAddress][tokenId];\r\n        \r\n        // If a claim has already been made through this contract, return the time of that claim\r\n        if(lastClaim > 0) {\r\n            return lastClaim;\r\n        }\r\n        \r\n        // If not claims have been made through this contract, check V2\r\n        lastClaim = uint48(v2ClaimingContract.lastClaims(contractAddress, tokenId));\r\n        if(lastClaim > 0) {\r\n            return lastClaim;\r\n        }\r\n\r\n        // If not claims have been made through the V2 contract, check the OG\r\n        return uint48(v1ClaimingContract.lastClaims(contractAddress, tokenId));\r\n    }\r\n\r\n    /// @notice Returns the current base accrual rate for the specified token, taking overrides into account\r\n    /// @dev This is mostly to support testing\r\n    /// @param contractDetails The details of the supported contract\r\n    /// @param tokenId The id of the token/NFT\r\n    /// @return The base accrual rate\r\n    function getContractTokenBaseAccrualRate(SupportedContractDetails memory contractDetails, uint256 tokenId\r\n    ) public view returns(uint256){\r\n        return baseRateTokenOverrides[contractDetails.ContractAddress][tokenId] > 0 \r\n            ? baseRateTokenOverrides[contractDetails.ContractAddress][tokenId] \r\n            : contractDetails.BaseRate;\r\n    }\r\n\r\n    /// @notice Allows an authorized contract to increase the base accrual rate for particular NFTs\r\n    /// when, for example, upgrades for that NFT were purchased\r\n    /// @param contractAddress The address of the supported contract\r\n    /// @param tokenId The id of the token from the supported contract whose base accrual rate will be updated\r\n    /// @param newBaseRate The new accrual base rate\r\n    function overrideTokenAccrualBaseRate(address contractAddress, uint32 tokenId, uint256 newBaseRate\r\n    ) external onlyAuthorizedContract isValidBaseRate(newBaseRate) {\r\n        require(tokenId > 0, \"Invalid tokenId\");\r\n\r\n        uint8 contractId = _supportedContractIds[contractAddress];\r\n        require(contractId > 0, \"Unsupported contract\");\r\n        require(supportedContracts[contractId-1].Active, \"Inactive contract\");\r\n\r\n        // Before overriding the accrual rate, take a snapshot of what the current unclaimed amount is\r\n        // so that when `claim` or `claimAll` is called, the snapshot amount will be included so \r\n        // it doesn't get lost\r\n        // @dev IMPORTANT: The snapshot must be taken _before_ baseRateTokenOverrides is set \r\n        unclaimedSnapshot[contractAddress][tokenId] = getContractTokenAccruals(contractAddress, tokenId);\r\n        lastClaims[contractAddress][tokenId] = uint48(block.timestamp);\r\n        baseRateTokenOverrides[contractAddress][tokenId] = (newBaseRate/_baseRateDivisor);\r\n    }\r\n\r\n    /// @notice Allows an authorized individual to manually create point-in-time snapshots of AWOO that\r\n    /// was accrued up until a particular point in time.  This is only necessary to correct a bug in the\r\n    /// V2 claiming contract that caused unclaimed AWOO to double when the base rates were overridden,\r\n    /// rather than accruing with the new rate from that point in time\r\n    function fixPreAccrualOverrideSnapshot(address contractAddress, uint256[] calldata tokenIds, \r\n        uint48[] calldata accruedUntilTimestamps\r\n    ) external onlyOwnerOrAdmin {\r\n        require(tokenIds.length == accruedUntilTimestamps.length, \"Array length mismatch\");\r\n\r\n        uint8 contractId = _supportedContractIds[contractAddress];\r\n        SupportedContractDetails memory contractDetails = supportedContracts[contractId-1];\r\n\r\n        for(uint16 i; i < tokenIds.length; i++) {\r\n            if(getLastClaimTime(contractAddress, tokenIds[i]) < accruedUntilTimestamps[i]) {\r\n                unclaimedSnapshot[contractAddress][tokenIds[i]] = getContractTokenAccruals(contractDetails, tokenIds[i], accruedUntilTimestamps[i]);\r\n                lastClaims[contractAddress][tokenIds[i]] = accruedUntilTimestamps[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to set a reference to the $AWOO ERC-20 contract\r\n    /// @param awooToken An instance of IAwooToken\r\n    function setAwooTokenContract(AwooToken awooToken) external onlyOwnerOrAdmin {\r\n        awooContract = awooToken;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to set the date and time at which virtual AWOO accruing will stop\r\n    /// @notice This will only be used if absolutely necessary and any AWOO that accrued before the end date will still be claimable\r\n    /// @param timestamp The Epoch time at which accrual should end\r\n    function setAccrualEndTimestamp(uint256 timestamp) external onlyOwnerOrAdmin {\r\n        accrualEnd = timestamp;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to add a contract whose tokens are eligible to accrue virtual AWOO\r\n    /// @param contractAddress The contract address of the collection (typically ERC-721, with the addition of the tokensOfOwner function)\r\n    /// @param baseRate The base accrual rate in wei units\r\n    function addSupportedContract(address contractAddress, uint256 baseRate) public onlyOwnerOrAdmin isValidBaseRate(baseRate) {\r\n        require(_isContract(contractAddress), \"Invalid contractAddress\");\r\n        require(_supportedContractIds[contractAddress] == 0, \"Contract already supported\");\r\n\r\n        supportedContracts.push(SupportedContractDetails(contractAddress, baseRate/_baseRateDivisor, true));\r\n        _supportedContractIds[contractAddress] = uint8(supportedContracts.length);\r\n        _activeSupportedContractCount++;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to deactivate a supported contract so it no longer accrues virtual AWOO\r\n    /// @param contractAddress The contract address that should be deactivated\r\n    function deactivateSupportedContract(address contractAddress) external onlyOwnerOrAdmin {\r\n        require(_supportedContractIds[contractAddress] > 0, \"Unsupported contract\");\r\n\r\n        supportedContracts[_supportedContractIds[contractAddress]-1].Active = false;\r\n        supportedContracts[_supportedContractIds[contractAddress]-1].BaseRate = 0;\r\n        _supportedContractIds[contractAddress] = 0;\r\n        _activeSupportedContractCount--;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to set the base accrual rate for a support contract\r\n    /// @param contractAddress The address of the supported contract\r\n    /// @param baseRate The new base accrual rate in wei units\r\n    function setBaseRate(address contractAddress, uint256 baseRate) external onlyOwnerOrAdmin isValidBaseRate(baseRate) {\r\n        require(_supportedContractIds[contractAddress] > 0, \"Unsupported contract\");\r\n        supportedContracts[_supportedContractIds[contractAddress]-1].BaseRate = baseRate/_baseRateDivisor;\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to activate/deactivate claiming ability\r\n    /// @param active The value specifiying whether or not claiming should be allowed\r\n    function setClaimingActive(bool active) external onlyOwnerOrAdmin {\r\n        claimingActive = active;\r\n        emit ClaimingStatusChanged(active, _msgSender());\r\n    }\r\n\r\n    /// @dev To minimize the amount of unit conversion we have to do for comparing $AWOO (ERC-20) to virtual AWOO, we store\r\n    /// virtual AWOO with 18 implied decimal places, so this modifier prevents us from accidentally using the wrong unit\r\n    /// for base rates.  For example, if holders of FangGang NFTs accrue at a rate of 1000 AWOO per fang, pre day, then\r\n    /// the base rate should be 1000000000000000000000\r\n    modifier isValidBaseRate(uint256 baseRate) {\r\n        require(baseRate >= 1 ether, \"Base rate must be in wei units\");\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract AwooToken\",\"name\":\"awooTokenContract\",\"type\":\"address\"},{\"internalType\":\"contract AwooClaimingV2\",\"name\":\"v2Contract\",\"type\":\"address\"},{\"internalType\":\"contract AwooClaiming\",\"name\":\"v1Contract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"AuthorizedContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"AuthorizedContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"ClaimingStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accrualEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"addAuthorizedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"}],\"name\":\"addSupportedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awooContract\",\"outputs\":[{\"internalType\":\"contract AwooToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseRateTokenOverrides\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"TokenIds\",\"type\":\"uint32[]\"}],\"internalType\":\"struct ClaimDetails[]\",\"name\":\"requestedClaims\",\"type\":\"tuple[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"deactivateSupportedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint48[]\",\"name\":\"accruedUntilTimestamps\",\"type\":\"uint48[]\"}],\"name\":\"fixPreAccrualOverrideSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getContractTokenAccruals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"BaseRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"}],\"internalType\":\"struct SupportedContractDetails\",\"name\":\"contractDetails\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getContractTokenBaseAccrualRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTotalAccruals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"TokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"Accruals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"TotalAccrued\",\"type\":\"uint256\"}],\"internalType\":\"struct AccrualDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastClaims\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"newBaseRate\",\"type\":\"uint256\"}],\"name\":\"overrideTokenAccrualBaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"removeAuthorizedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setAccrualEndTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"admins\",\"type\":\"address[2]\"}],\"name\":\"setAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AwooToken\",\"name\":\"awooToken\",\"type\":\"address\"}],\"name\":\"setAwooTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"}],\"name\":\"setBaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setClaimingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AwooClaimingV2\",\"name\":\"v2Contract\",\"type\":\"address\"},{\"internalType\":\"contract AwooClaiming\",\"name\":\"v1Contract\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"BaseRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1ClaimingContract\",\"outputs\":[{\"internalType\":\"contract AwooClaiming\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2ClaimingContract\",\"outputs\":[{\"internalType\":\"contract AwooClaimingV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AwooClaimingV3", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000ffe844169bfc6da1b87c9157f684e18e7f1663ad0000000000000000000000001ff94eeb38d25cc081be1b4032afb638bc810728000000000000000000000000b0612ad4a005d60869d5b8269ac7bc794e1a3bde", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef5b41da611373207167c32fd02528c419f0de3fb1678dbed1962e0be2f4e63a"}]}