{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.11;\r\n\r\ninterface IFixedForexRegistry {\r\n    function cy(address) external view returns (address);\r\n\r\n    function price(address) external view returns (uint256);\r\n}\r\n\r\ninterface IYearnAddressesProvider {\r\n    function addressById(string memory) external view returns (address);\r\n}\r\n\r\ncontract Ownable {\r\n    address public ownerAddress;\r\n\r\n    constructor() {\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddress, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwnerAddress(address _ownerAddress) public onlyOwner {\r\n        ownerAddress = _ownerAddress;\r\n    }\r\n}\r\n\r\ncontract AddressesProviderConsumer is Ownable {\r\n    address public addressesProviderAddress;\r\n\r\n    constructor(address _addressesProviderAddress) {\r\n        addressesProviderAddress = _addressesProviderAddress;\r\n    }\r\n\r\n    function setAddressesProviderAddress(address _addressesProviderAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        addressesProviderAddress = _addressesProviderAddress;\r\n    }\r\n\r\n    function addressById(string memory id) internal view returns (address) {\r\n        return\r\n            IYearnAddressesProvider(addressesProviderAddress).addressById(id);\r\n    }\r\n}\r\n\r\ncontract CalculationsFixedForex is AddressesProviderConsumer {\r\n    constructor(address _addressesProviderAddress)\r\n        AddressesProviderConsumer(_addressesProviderAddress)\r\n    {}\r\n\r\n    function isFixedForex(address tokenAddress) public view returns (bool) {\r\n        try fixedForexRegistry().cy(tokenAddress) {\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function fixedForexRegistry() public view returns (IFixedForexRegistry) {\r\n        return IFixedForexRegistry(addressById(\"FIXED_FOREX_REGISTRY\"));\r\n    }\r\n\r\n    function getPriceUsdc(address tokenAddress) public view returns (uint256) {\r\n        bool _isFixedForex = isFixedForex(tokenAddress);\r\n        require(_isFixedForex);\r\n        return fixedForexRegistry().price(tokenAddress) / 10**12;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProviderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressesProviderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedForexRegistry\",\"outputs\":[{\"internalType\":\"contract IFixedForexRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isFixedForex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProviderAddress\",\"type\":\"address\"}],\"name\":\"setAddressesProviderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"setOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CalculationsFixedForex", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009be19ee7bc4099d62737a7255f5c227fbcd6db93", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://91c4146f48c9a11bf2cca9957e9527ac186b1db3c59c3b772523a5b7b994365d"}]}