{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.5.16;\r\n\r\n\r\n// Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Math error\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, \"Math error\");\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\ninterface ERC20 {\r\n    function balanceOf(address _address) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        // (bool success,) = to.call{value:value}(new bytes(0));\r\n        (bool success,) = to.call.value(value)(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// Upgrade contract\r\ncontract Upgrade {\r\n    // \u7ba1\u7406\u5458\r\n    address public owner;\r\n    // \u7ba1\u7406\u54582; \u7528\u4e8e\u53cc\u91cd\u7b7e\u540d\u9a8c\u8bc1\r\n    address public owner2;\r\n    // \u7b7e\u540d\u7684messageHash\r\n    mapping (bytes32 => bool) public signHash;\r\n    // bhc\u5408\u7ea6\u5730\u5740\r\n    address public bhc;\r\n    // \u63a5\u53d710%\u624b\u7eed\u8d39\u7684\u5730\u5740\r\n    address public feeAddress;\r\n\r\n    // \u53c2\u65701: \u4e8c\u6b21\u7b7e\u540d\u7684\u5730\u5740\r\n    // \u53c2\u65702: bhc\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\r\n    // \u53c2\u65704: \u63a5\u53d7\u624b\u7eed\u8d39\u7684\u5730\u5740\r\n    constructor(address _owner2, address _bhc, address _feeAddress) public {\r\n        owner = msg.sender;\r\n        owner2 = _owner2;\r\n        bhc = _bhc;\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    // \u71c3\u70e7BHC\u5347\u7ea7\u4e8b\u4ef6\r\n    event BurnBhc(address indexed owner, uint256 bhcvalue, uint256 ethValue);\r\n\r\n    // \u7ba1\u7406\u5458\u4fee\u9970\u7b26\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Upgrade: You are not owner\");\r\n        _;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u65b0\u7684\u7ba1\u7406\u5458\r\n    function setOwner(address _owner) external onlyOwner {\r\n        require(_owner != address(0), \"Upgrade: Zero address error\");\r\n        owner = _owner;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u65b0\u7684\u7ba1\u7406\u54582\r\n    function setOwner2(address _owner2) external onlyOwner {\r\n        require(_owner2 != address(0), \"Upgrade: Zero address error\");\r\n        owner2 = _owner2;\r\n    }\r\n\r\n    // \u8bbe\u7f6e\u65b0\u7684\u6536\u5e01\u5730\u5740\r\n    function setFeeAddress(address _feeAddress) external onlyOwner {\r\n        require(_feeAddress != address(0), \"Upgrade: Zero address error\");\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    // \u7ba1\u7406\u5458\u53d6\u51fa\u5408\u7ea6\u91cc\u7684erc20\u4ee3\u5e01\r\n    function takeErc20(address _erc20Address) external onlyOwner {\r\n        require(_erc20Address != address(0), \"Upgrade: Zero address error\");\r\n        // \u521b\u5efausdt\u7684\u5408\u7ea6\u5bf9\u8c61\r\n        ERC20 erc20 = ERC20(_erc20Address);\r\n        // \u83b7\u53d6\u5408\u7ea6\u5730\u5740\u7684\u4f59\u989d\r\n        uint256 _value = erc20.balanceOf(address(this));\r\n        // \u4ece\u5408\u7ea6\u5730\u5740\u8f6c\u51fatoken\u5230to\u5730\u5740\r\n        TransferHelper.safeTransfer(_erc20Address, msg.sender, _value);\r\n    }\r\n\r\n    // \u7ba1\u7406\u5458\u53d6\u51fa\u5408\u7ea6\u91cc\u7684ETH\r\n    function takeETH() external onlyOwner {\r\n        uint256 _value = address(this).balance;\r\n        TransferHelper.safeTransferETH(msg.sender, _value);\r\n    }\r\n\r\n    // \u71c3\u70e7BHC\u5347\u7ea7\u4e8b\u4ef6; \u4f7f\u7528\u4e8c\u6b21\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1;\r\n    // \u53c2\u65701: \u6d88\u8017\u7684BHC\u6570\u91cf\r\n    // \u53c2\u65702: \u7528\u6237\u9700\u8981\u652f\u4ed8gas\u8d39\u7528\u768410%\u7ed9\u5230feeAddress;\r\n    // \u53c2\u65703: \u552f\u4e00\u7684\u503c(\u4f7f\u7528\u968f\u673a\u7684\u552f\u4e00\u6570\u5c31\u53ef\u4ee5)\r\n    // \u53c2\u65704: owner\u7b7e\u540d\u7684signature\u503c\r\n    function burnBhc(uint256 _bhcValue, uint256 _feeValue, uint256 _nonce, bytes memory _signature) public payable {\r\n        address _owner = msg.sender;\r\n\r\n        // \u6240\u4f7f\u7528\u7684\u6570\u636e\u6709: \u51fd\u6570\u540d, \u7528\u6237\u7684\u5730\u5740, \u6d88\u8017bhc\u6570\u91cf, 10%\u7684\u624b\u7eed\u8d39, nonce\u503c;\r\n        bytes32 hash = keccak256(abi.encodePacked(\"burnBhc\", _owner, _bhcValue, _feeValue, _nonce));\r\n        bytes32 messageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        address signer = recoverSigner(messageHash, _signature);\r\n        require(signer == owner2, \"Upgrade: Signer is not owner2\");\r\n        // \u7b7e\u540d\u7684messageHash\u5fc5\u987b\u662f\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\r\n        require(signHash[messageHash] == false, \"Upgrade: MessageHash is used\");\r\n        // \u8be5messageHash\u8bbe\u7f6e\u4e3a\u5df2\u4f7f\u7528\r\n        signHash[messageHash] = true;\r\n        // \u7528\u6237\u7ed9\u7684ETH\u5fc5\u987b\u7b49\u4e8e\u7b7e\u540d\u65f6\u5019\u4f7f\u7528\u7684feeValue\r\n        require(msg.value == _feeValue, \"Upgrade: Value unequal fee value\");\r\n\r\n        // \u6d88\u8017\u7528\u6237\u7684BHC\u7684\u7ed9\u6536\u5e01\u5730\u5740\r\n        TransferHelper.safeTransferFrom(bhc, _owner, feeAddress, _bhcValue);\r\n        // \u628aETH\u7ed9\u5230fee\u5730\u5740\r\n        TransferHelper.safeTransferETH(feeAddress, _feeValue);\r\n        // \u89e6\u53d1\u4e8b\u4ef6\r\n        emit BurnBhc(_owner, _bhcValue, _feeValue);\r\n    }\r\n\r\n    // \u63d0\u53d6\u7b7e\u540d\u4e2d\u7684\u53d1\u8d77\u65b9\u5730\u5740\r\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {\r\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    // \u5206\u79bb\u7b7e\u540d\u4fe1\u606f\u7684 v r s\r\n    function splitSignature(bytes memory sig) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        require(sig.length == 65);\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n        return (v, r, s);\r\n    }\r\n\r\n    function() payable external {}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bhc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bhcvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"name\":\"BurnBhc\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"bhc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bhcValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"burnBhc\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner2\",\"type\":\"address\"}],\"name\":\"setOwner2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"takeErc20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Upgrade", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004d16af321e8901df75b91a1b5ca15f22236c377d000000000000000000000000af4bc7927721ec88ac507889309f5f62a0c8c537000000000000000000000000aff727323ff360ae02708fb49d48147232ddbd5a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://72e5066d845c3f1c08c765fffe0a6f3e3e79f6c9b805547731d5c3de210d7044"}]}