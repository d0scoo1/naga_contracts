{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TRGrailArcane.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport './TRKeys.sol';\\n\\n/// @notice The Reliquary Grail of Arcane\\nlibrary TRGrailArcane {\\n\\n  function getElement() public pure returns (string memory) {\\n    return 'Arcane';\\n  }\\n\\n  function getPalette() public pure returns (string memory) {\\n    return 'Cosmic';\\n  }\\n\\n  function getEssence() public pure returns (string memory) {\\n    return 'Unknown';\\n  }\\n\\n  function getStyle() public pure returns (string memory) {\\n    return 'Pajamas';\\n  }\\n\\n  function getSpeed() public pure returns (string memory) {\\n    return 'Swift';\\n  }\\n\\n  function getGravity() public pure returns (string memory) {\\n    return 'Massive';\\n  }\\n\\n  function getDisplay() public pure returns (string memory) {\\n    return 'Normal';\\n  }\\n\\n  function getColorCount() public pure returns (uint256) {\\n    return 5;\\n  }\\n\\n  function getRelicType() public pure returns (string memory) {\\n    return TRKeys.RELIC_TYPE_GRAIL;\\n  }\\n\\n  function getRuneflux() public pure returns (uint256) {\\n    return 800;\\n  }\\n\\n  function getCorruption() public pure returns (uint256) {\\n    return 150;\\n  }\\n\\n  function getGlyph() public pure returns (uint256[] memory) {\\n    uint256[] memory glyph = new uint256[](64);\\n    glyph[0]  = uint256(1111111111111111111111000000000000000000000000000000);\\n    glyph[1]  = uint256(1111111111111111111111000000000000000000000000000000);\\n    glyph[2]  = uint256(111111111111111111111100000000000000000000000000000000);\\n    glyph[3]  = uint256(111111111111111111111100000000000000000000000000000000);\\n    glyph[4]  = uint256(11111111111111111111110000000000000000000000000000000000);\\n    glyph[5]  = uint256(11111111111111111111110000000000000000000000000000000000);\\n    glyph[6]  = uint256(1111111111111111111111000000000000000000000000000000000000);\\n    glyph[7]  = uint256(1111111111111111111111000000000000000000000000000000000000);\\n    glyph[8]  = uint256(111111111111111111111100000000000000000000000000000000000000);\\n    glyph[9]  = uint256(111111111111111111111100000000000000000000000000000000000000);\\n    glyph[10] = uint256(11111111111111111111119999999999999999000000000000000000000000);\\n    glyph[11] = uint256(11111111111111111111119999999999999999000000000000000000000000);\\n    glyph[12] = uint256(1111111111111111111199990000000000000000999900000000000000000000);\\n    glyph[13] = uint256(1111111111111111111199990000000000000000999900000000000000000000);\\n    glyph[14] = uint256(1111111111111111119900000000000000000000000099000000000000000000);\\n    glyph[15] = uint256(1111111111111111119900000000000000000000000099000000000000000000);\\n    glyph[16] = uint256(1111111111111111119944666666444444446666664499000000000000000000);\\n    glyph[17] = uint256(1111111111111111119944666666444444446666664499000000000000000000);\\n    glyph[18] = uint256(1111111111111188664477777755660000667777775544668800000000000000);\\n    glyph[19] = uint256(1111111111111188664477777755660000667777775544668800000000000000);\\n    glyph[20] = uint256(1111111111111188886677775555776666777755557766888800000000000000);\\n    glyph[21] = uint256(1111111111111188886677775555776666777755557766888800000000000000);\\n    glyph[22] = uint256(1111111111110000996655557777776666555577777766990000000000000000);\\n    glyph[23] = uint256(1111111111110000996655557777776666555577777766990000000000000000);\\n    glyph[24] = uint256(1111111111000000990044557777440000445577884400990000000000000000);\\n    glyph[25] = uint256(1111111111000000990044557777440000445577884400990000000000000000);\\n    glyph[26] = uint256(1111111100000000990000444444000000004444440000990000000000000000);\\n    glyph[27] = uint256(1111111100000000990000444444000000004444440000990000000000000000);\\n    glyph[28] = uint256(1111110000000000990099999999000000009999999900990000000000000000);\\n    glyph[29] = uint256(1111110000000000990099999999000000009999999900990000000000000000);\\n    glyph[30] = uint256(1111000000005599996666666666666600666666666666999955000000000000);\\n    glyph[31] = uint256(1111000000005599996666666666666600666666666666999955000000000000);\\n    glyph[32] = uint256(1100000000009933996699999999666666669999999966993399000000000000);\\n    glyph[33] = uint256(1100000000009933996699999999666666669999999966993399000000000000);\\n    glyph[34] = uint256(449933996666009900996666993399336666993399440000000000);\\n    glyph[35] = uint256(449933996666009900996666993399336666993399440000000000);\\n    glyph[36] = uint256(9933996666666666666666666666666666993399000000000000);\\n    glyph[37] = uint256(9933996666666666666666666666666666993399000000000000);\\n    glyph[38] = uint256(449933998888888888888899999999999999993399440000000000);\\n    glyph[39] = uint256(449933998888888888888899999999999999993399440000000000);\\n    glyph[40] = uint256(99998888888888889999999999999999999900000000000000);\\n    glyph[41] = uint256(99998888888888889999999999999999999900000000000000);\\n    glyph[42] = uint256(998888888888888899999999999999990000000000000000);\\n    glyph[43] = uint256(998888888888888899999999999999990000000000000000);\\n    glyph[44] = uint256(998888888888888899999999999999990000000000000011);\\n    glyph[45] = uint256(998888888888888899999999999999990000000000000011);\\n    glyph[46] = uint256(9988888888888899999999999999000000000000001111);\\n    glyph[47] = uint256(9988888888888899999999999999000000000000001111);\\n    glyph[48] = uint256(9988888888888899999999999999000000000000111111);\\n    glyph[49] = uint256(9988888888888899999999999999000000000000111111);\\n    glyph[50] = uint256(99888888888899999999999900000000000011111111);\\n    glyph[51] = uint256(99888888888899999999999900000000000011111111);\\n    glyph[52] = uint256(99998888888899999999999900000000001111111111);\\n    glyph[53] = uint256(99998888888899999999999900000000001111111111);\\n    glyph[54] = uint256(99999988888899999999999900000000111111111111);\\n    glyph[55] = uint256(99999988888899999999999900000000111111111111);\\n    glyph[56] = uint256(9999999999888899999999999999000011111111111111);\\n    glyph[57] = uint256(9999999999888899999999999999000011111111111111);\\n    glyph[58] = uint256(999999999999999999999999999999991111111111111111);\\n    glyph[59] = uint256(999999999999999999999999999999991111111111111111);\\n    glyph[60] = uint256(99999999999988888899999999999999999911111111111111);\\n    glyph[61] = uint256(99999999999988888899999999999999999911111111111111);\\n    glyph[62] = uint256(9999999999998888888899999999999999999999111111111111);\\n    glyph[63] = uint256(9999999999998888888899999999999999999999111111111111);\\n    return glyph;\\n  }\\n\\n  function getDescription() public pure returns (string memory) {\\n    return \\\"The Grail of Arcane honors the Chain Runners for building an awesome on-chain community and for their commitment to openly building great experiences around their nascent cyberpunk universe. This piece recreates Runner #6923, submitted by Tiamat.\\\";\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/TRKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport './TRUtils.sol';\\n\\n/// @notice The Reliquary Constants\\nlibrary TRKeys {\\n\\n  struct RuneCore {\\n    uint256 tokenId;\\n    uint8 level;\\n    uint32 mana;\\n    bool isDivinityQuestLoot;\\n    bool isSecretDiscovered;\\n    uint8 secretsDiscovered;\\n    uint256 runeCode;\\n    string runeHash;\\n    string transmutation;\\n    address credit;\\n    uint256[] glyph;\\n    uint24[] colors;\\n    address metadataAddress;\\n    string hiddenLeyLines;\\n  }\\n\\n  uint256 public constant FIRST_OPEN_VIBES_ID = 7778;\\n  address public constant VIBES_GENESIS = 0x6c7C97CaFf156473F6C9836522AE6e1d6448Abe7;\\n  address public constant VIBES_OPEN = 0xF3FCd0F025c21F087dbEB754516D2AD8279140Fc;\\n\\n  uint8 public constant CURIO_SUPPLY = 64;\\n  uint256 public constant CURIO_TITHE = 80000000000000000; // 0.08 ETH\\n\\n  uint32 public constant MANA_PER_YEAR = 100;\\n  uint32 public constant MANA_PER_YEAR_LV2 = 150;\\n  uint32 public constant SECONDS_PER_YEAR = 31536000;\\n  uint32 public constant MANA_FROM_REVELATION = 50;\\n  uint32 public constant MANA_FROM_DIVINATION = 50;\\n  uint32 public constant MANA_FROM_VIBRATION = 100;\\n  uint32 public constant MANA_COST_TO_UPGRADE = 150;\\n\\n  uint256 public constant RELIC_SIZE = 64;\\n  uint256 public constant RELIC_SUPPLY = 1047;\\n  uint256 public constant TOTAL_SUPPLY = CURIO_SUPPLY + RELIC_SUPPLY;\\n  uint256 public constant RELIC_TITHE = 150000000000000000; // 0.15 ETH\\n  uint256 public constant INVENTORY_CAPACITY = 10;\\n  uint256 public constant BYTES_PER_RELICHASH = 3;\\n  uint256 public constant BYTES_PER_BLOCKHASH = 32;\\n  uint256 public constant HALF_POSSIBILITY_SPACE = (16**6) / 2;\\n  bytes32 public constant RELICHASH_MASK = 0x0000000000000000000000000000000000000000000000000000000000ffffff;\\n  uint256 public constant RELIC_DISCOUNT_GENESIS = 120000000000000000; // 0.12 ETH\\n  uint256 public constant RELIC_DISCOUNT_OPEN = 50000000000000000; // 0.05 ETH\\n\\n  uint256 public constant RELIQUARY_CHAMBER_OUTSIDE = 0;\\n  uint256 public constant RELIQUARY_CHAMBER_GUARDIANS_HALL = 1;\\n  uint256 public constant RELIQUARY_CHAMBER_INNER_SANCTUM = 2;\\n  uint256 public constant RELIQUARY_CHAMBER_DIVINITYS_END = 3;\\n  uint256 public constant RELIQUARY_CHAMBER_CHAMPIONS_VAULT = 4;\\n  uint256 public constant ELEMENTAL_GUARDIAN_DNA = 88888888;\\n  uint256 public constant GRAIL_ID_NONE = 0;\\n  uint256 public constant GRAIL_ID_NATURE = 1;\\n  uint256 public constant GRAIL_ID_LIGHT = 2;\\n  uint256 public constant GRAIL_ID_WATER = 3;\\n  uint256 public constant GRAIL_ID_EARTH = 4;\\n  uint256 public constant GRAIL_ID_WIND = 5;\\n  uint256 public constant GRAIL_ID_ARCANE = 6;\\n  uint256 public constant GRAIL_ID_SHADOW = 7;\\n  uint256 public constant GRAIL_ID_FIRE = 8;\\n  uint256 public constant GRAIL_COUNT = 8;\\n  uint256 public constant GRAIL_DISTRIBUTION = 100;\\n  uint8 public constant SECRETS_OF_THE_GRAIL = 128;\\n  uint8 public constant MODE_TRANSMUTE_ELEMENT = 1;\\n  uint8 public constant MODE_CREATE_GLYPH = 2;\\n  uint8 public constant MODE_IMAGINE_COLORS = 3;\\n\\n  uint256 public constant MAX_COLOR_INTS = 10;\\n\\n  string public constant ROLL_ELEMENT = 'ELEMENT';\\n  string public constant ROLL_PALETTE = 'PALETTE';\\n  string public constant ROLL_SHUFFLE = 'SHUFFLE';\\n  string public constant ROLL_RED = 'RED';\\n  string public constant ROLL_GREEN = 'GREEN';\\n  string public constant ROLL_BLUE = 'BLUE';\\n  string public constant ROLL_REDSIGN = 'REDSIGN';\\n  string public constant ROLL_GREENSIGN = 'GREENSIGN';\\n  string public constant ROLL_BLUESIGN = 'BLUESIGN';\\n  string public constant ROLL_RANDOMCOLOR = 'RANDOMCOLOR';\\n  string public constant ROLL_RELICTYPE = 'RELICTYPE';\\n  string public constant ROLL_STYLE = 'STYLE';\\n  string public constant ROLL_COLORCOUNT = 'COLORCOUNT';\\n  string public constant ROLL_SPEED = 'SPEED';\\n  string public constant ROLL_GRAVITY = 'GRAVITY';\\n  string public constant ROLL_DISPLAY = 'DISPLAY';\\n  string public constant ROLL_GRAILS = 'GRAILS';\\n  string public constant ROLL_RUNEFLUX = 'RUNEFLUX';\\n  string public constant ROLL_CORRUPTION = 'CORRUPTION';\\n\\n  string public constant RELIC_TYPE_GRAIL = 'Grail';\\n  string public constant RELIC_TYPE_CURIO = 'Curio';\\n  string public constant RELIC_TYPE_FOCUS = 'Focus';\\n  string public constant RELIC_TYPE_AMULET = 'Amulet';\\n  string public constant RELIC_TYPE_TALISMAN = 'Talisman';\\n  string public constant RELIC_TYPE_TRINKET = 'Trinket';\\n\\n  string public constant GLYPH_TYPE_GRAIL = 'Origin';\\n  string public constant GLYPH_TYPE_CUSTOM = 'Divine';\\n  string public constant GLYPH_TYPE_NONE = 'None';\\n\\n  string public constant ELEM_NATURE = 'Nature';\\n  string public constant ELEM_LIGHT = 'Light';\\n  string public constant ELEM_WATER = 'Water';\\n  string public constant ELEM_EARTH = 'Earth';\\n  string public constant ELEM_WIND = 'Wind';\\n  string public constant ELEM_ARCANE = 'Arcane';\\n  string public constant ELEM_SHADOW = 'Shadow';\\n  string public constant ELEM_FIRE = 'Fire';\\n\\n  string public constant ANY_PAL_CUSTOM = 'Divine';\\n\\n  string public constant NAT_PAL_JUNGLE = 'Jungle';\\n  string public constant NAT_PAL_CAMOUFLAGE = 'Camouflage';\\n  string public constant NAT_PAL_BIOLUMINESCENCE = 'Bioluminescence';\\n\\n  string public constant NAT_ESS_FOREST = 'Forest';\\n  string public constant NAT_ESS_LIFE = 'Life';\\n  string public constant NAT_ESS_SWAMP = 'Swamp';\\n  string public constant NAT_ESS_WILDBLOOD = 'Wildblood';\\n  string public constant NAT_ESS_SOUL = 'Soul';\\n\\n  string public constant LIG_PAL_PASTEL = 'Pastel';\\n  string public constant LIG_PAL_INFRARED = 'Infrared';\\n  string public constant LIG_PAL_ULTRAVIOLET = 'Ultraviolet';\\n\\n  string public constant LIG_ESS_HEAVENLY = 'Heavenly';\\n  string public constant LIG_ESS_FAE = 'Fae';\\n  string public constant LIG_ESS_PRISMATIC = 'Prismatic';\\n  string public constant LIG_ESS_RADIANT = 'Radiant';\\n  string public constant LIG_ESS_PHOTONIC = 'Photonic';\\n\\n  string public constant WAT_PAL_FROZEN = 'Frozen';\\n  string public constant WAT_PAL_DAWN = 'Dawn';\\n  string public constant WAT_PAL_OPALESCENT = 'Opalescent';\\n\\n  string public constant WAT_ESS_TIDAL = 'Tidal';\\n  string public constant WAT_ESS_ARCTIC = 'Arctic';\\n  string public constant WAT_ESS_STORM = 'Storm';\\n  string public constant WAT_ESS_ILLUVIAL = 'Illuvial';\\n  string public constant WAT_ESS_UNDINE = 'Undine';\\n\\n  string public constant EAR_PAL_COAL = 'Coal';\\n  string public constant EAR_PAL_SILVER = 'Silver';\\n  string public constant EAR_PAL_GOLD = 'Gold';\\n\\n  string public constant EAR_ESS_MINERAL = 'Mineral';\\n  string public constant EAR_ESS_CRAGGY = 'Craggy';\\n  string public constant EAR_ESS_DWARVEN = 'Dwarven';\\n  string public constant EAR_ESS_GNOMIC = 'Gnomic';\\n  string public constant EAR_ESS_CRYSTAL = 'Crystal';\\n\\n  string public constant WIN_PAL_BERRY = 'Berry';\\n  string public constant WIN_PAL_THUNDER = 'Thunder';\\n  string public constant WIN_PAL_AERO = 'Aero';\\n\\n  string public constant WIN_ESS_SYLPHIC = 'Sylphic';\\n  string public constant WIN_ESS_VISCERAL = 'Visceral';\\n  string public constant WIN_ESS_FROSTED = 'Frosted';\\n  string public constant WIN_ESS_ELECTRIC = 'Electric';\\n  string public constant WIN_ESS_MAGNETIC = 'Magnetic';\\n\\n  string public constant ARC_PAL_FROSTFIRE = 'Frostfire';\\n  string public constant ARC_PAL_COSMIC = 'Cosmic';\\n  string public constant ARC_PAL_COLORLESS = 'Colorless';\\n\\n  string public constant ARC_ESS_MAGIC = 'Magic';\\n  string public constant ARC_ESS_ASTRAL = 'Astral';\\n  string public constant ARC_ESS_FORBIDDEN = 'Forbidden';\\n  string public constant ARC_ESS_RUNIC = 'Runic';\\n  string public constant ARC_ESS_UNKNOWN = 'Unknown';\\n\\n  string public constant SHA_PAL_DARKNESS = 'Darkness';\\n  string public constant SHA_PAL_VOID = 'Void';\\n  string public constant SHA_PAL_UNDEAD = 'Undead';\\n\\n  string public constant SHA_ESS_NIGHT = 'Night';\\n  string public constant SHA_ESS_FORGOTTEN = 'Forgotten';\\n  string public constant SHA_ESS_ABYSSAL = 'Abyssal';\\n  string public constant SHA_ESS_EVIL = 'Evil';\\n  string public constant SHA_ESS_LOST = 'Lost';\\n\\n  string public constant FIR_PAL_HEAT = 'Heat';\\n  string public constant FIR_PAL_EMBER = 'Ember';\\n  string public constant FIR_PAL_CORRUPTED = 'Corrupted';\\n\\n  string public constant FIR_ESS_INFERNAL = 'Infernal';\\n  string public constant FIR_ESS_MOLTEN = 'Molten';\\n  string public constant FIR_ESS_ASHEN = 'Ashen';\\n  string public constant FIR_ESS_DRACONIC = 'Draconic';\\n  string public constant FIR_ESS_CELESTIAL = 'Celestial';\\n\\n  string public constant STYLE_SMOOTH = 'Smooth';\\n  string public constant STYLE_PAJAMAS = 'Pajamas';\\n  string public constant STYLE_SILK = 'Silk';\\n  string public constant STYLE_SKETCH = 'Sketch';\\n\\n  string public constant SPEED_ZEN = 'Zen';\\n  string public constant SPEED_TRANQUIL = 'Tranquil';\\n  string public constant SPEED_NORMAL = 'Normal';\\n  string public constant SPEED_FAST = 'Fast';\\n  string public constant SPEED_SWIFT = 'Swift';\\n  string public constant SPEED_HYPER = 'Hyper';\\n\\n  string public constant GRAV_LUNAR = 'Lunar';\\n  string public constant GRAV_ATMOSPHERIC = 'Atmospheric';\\n  string public constant GRAV_LOW = 'Low';\\n  string public constant GRAV_NORMAL = 'Normal';\\n  string public constant GRAV_HIGH = 'High';\\n  string public constant GRAV_MASSIVE = 'Massive';\\n  string public constant GRAV_STELLAR = 'Stellar';\\n  string public constant GRAV_GALACTIC = 'Galactic';\\n\\n  string public constant DISPLAY_NORMAL = 'Normal';\\n  string public constant DISPLAY_MIRRORED = 'Mirrored';\\n  string public constant DISPLAY_UPSIDEDOWN = 'UpsideDown';\\n  string public constant DISPLAY_MIRROREDUPSIDEDOWN = 'MirroredUpsideDown';\\n\\n}\\n\"\r\n    },\r\n    \"contracts/TRUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\n/// @notice The Reliquary Utility Methods\\nlibrary TRUtils {\\n\\n  function random(string memory input) public pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function getColorCode(uint256 color) public pure returns (string memory) {\\n    bytes16 hexChars = '0123456789abcdef';\\n    uint256 r1 = (color >> uint256(20)) & uint256(15);\\n    uint256 r2 = (color >> uint256(16)) & uint256(15);\\n    uint256 g1 = (color >> uint256(12)) & uint256(15);\\n    uint256 g2 = (color >> uint256(8)) & uint256(15);\\n    uint256 b1 = (color >> uint256(4)) & uint256(15);\\n    uint256 b2 = color & uint256(15);\\n    bytes memory code = new bytes(6);\\n    code[0] = hexChars[r1];\\n    code[1] = hexChars[r2];\\n    code[2] = hexChars[g1];\\n    code[3] = hexChars[g2];\\n    code[4] = hexChars[b1];\\n    code[5] = hexChars[b2];\\n    return string(code);\\n  }\\n\\n  function compare(string memory a, string memory b) public pure returns (bool) {\\n    if (bytes(a).length != bytes(b).length) {\\n      return false;\\n    } else {\\n      return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n  }\\n\\n  function toString(uint256 value) public pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return '0';\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  // https://ethereum.stackexchange.com/a/8447\\n  function toAsciiString(address x) public pure returns (string memory) {\\n    bytes memory s = new bytes(40);\\n    for (uint i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2*i] = char(hi);\\n      s[2*i+1] = char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function char(bytes1 b) internal pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  // https://stackoverflow.com/a/69302348/424107\\n  function toCapsHexString(uint256 i) internal pure returns (string memory) {\\n    if (i == 0) return '0';\\n    uint j = i;\\n    uint length;\\n    while (j != 0) {\\n      length++;\\n      j = j >> 4;\\n    }\\n    uint mask = 15;\\n    bytes memory bstr = new bytes(length);\\n    uint k = length;\\n    while (i != 0) {\\n      uint curr = (i & mask);\\n      bstr[--k] = curr > 9 ?\\n        bytes1(uint8(55 + curr)) :\\n        bytes1(uint8(48 + curr)); // 55 = 65 - 10\\n      i = i >> 4;\\n    }\\n    return string(bstr);\\n  }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"getColorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCorruption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisplay\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getElement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEssence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlyph\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGravity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelicType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRuneflux\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpeed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStyle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "TRGrailArcane", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}