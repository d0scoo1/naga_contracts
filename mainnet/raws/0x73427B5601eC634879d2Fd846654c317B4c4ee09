{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.8.12;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFeeDB {\r\n    event UpdateFeeAndRecipient(uint256 newFee, address newRecipient);\r\n    event UpdatePaysFeeWhenSending(bool newType);\r\n    event UpdateNFTDiscountRate(address nft, uint256 discountRate);\r\n    event UpdateUserDiscountRate(address user, uint256 discountRate);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function protocolFeeRecipient() external view returns (address);\r\n\r\n    function paysFeeWhenSending() external view returns (bool);\r\n\r\n    function userDiscountRate(address user) external view returns (uint256);\r\n\r\n    function nftDiscountRate(address nft) external view returns (uint256);\r\n\r\n    function getFeeDataForSend(address user, bytes calldata data)\r\n        external\r\n        view\r\n        returns (\r\n            bool _paysFeeWhenSending,\r\n            address _recipient,\r\n            uint256 _protocolFee,\r\n            uint256 _discountRate\r\n        );\r\n\r\n    function getFeeDataForReceive(address user, bytes calldata data)\r\n        external\r\n        view\r\n        returns (address _recipient, uint256 _discountRate);\r\n}\r\n\r\ninterface IAPMReservoir {\r\n    function token() external returns (address);\r\n\r\n    event AddSigner(address signer);\r\n    event RemoveSigner(address signer);\r\n    event UpdateFeeDB(IFeeDB newFeeDB);\r\n    event UpdateQuorum(uint256 newQuorum);\r\n    event SendToken(\r\n        address indexed sender,\r\n        uint256 indexed toChainId,\r\n        address indexed receiver,\r\n        uint256 amount,\r\n        uint256 sendingId,\r\n        bool isFeePayed,\r\n        uint256 protocolFee,\r\n        uint256 senderDiscountRate\r\n    );\r\n    event ReceiveToken(\r\n        address indexed sender,\r\n        uint256 indexed fromChainId,\r\n        address indexed receiver,\r\n        uint256 amount,\r\n        uint256 sendingId\r\n    );\r\n    event SetChainValidity(uint256 indexed chainId, bool status);\r\n    event Migrate(address newReservoir);\r\n    event TransferFee(address user, address feeRecipient, uint256 amount);\r\n\r\n    function getSigners() external view returns (address[] memory);\r\n\r\n    function signingNonce() external view returns (uint256);\r\n\r\n    function quorum() external view returns (uint256);\r\n\r\n    function feeDB() external view returns (IFeeDB);\r\n\r\n    function signersLength() external view returns (uint256);\r\n\r\n    function isSigner(address signer) external view returns (bool);\r\n\r\n    function isValidChain(uint256 toChainId) external view returns (bool);\r\n\r\n    function sendingData(\r\n        address sender,\r\n        uint256 toChainId,\r\n        address receiver,\r\n        uint256 sendingId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 atBlock,\r\n            bool isFeePayed,\r\n            uint256 protocolFee,\r\n            uint256 senderDiscountRate\r\n        );\r\n\r\n    function isTokenReceived(\r\n        address sender,\r\n        uint256 fromChainId,\r\n        address receiver,\r\n        uint256 sendingId\r\n    ) external view returns (bool);\r\n\r\n    function sendingCounts(\r\n        address sender,\r\n        uint256 toChainId,\r\n        address receiver\r\n    ) external view returns (uint256);\r\n\r\n    function sendToken(\r\n        uint256 toChainId,\r\n        address receiver,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256 sendingId);\r\n\r\n    function receiveToken(\r\n        address sender,\r\n        uint256 fromChainId,\r\n        address receiver,\r\n        uint256 amount,\r\n        uint256 sendingId,\r\n        bool isFeePayed,\r\n        uint256 protocolFee,\r\n        uint256 senderDiscountRate,\r\n        bytes calldata data,\r\n        uint8[] calldata vs,\r\n        bytes32[] calldata rs,\r\n        bytes32[] calldata ss\r\n    ) external;\r\n}\r\n\r\nlibrary Signature {\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address signer) {\r\n        require(\r\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\r\n            \"invalid signature 's' value\"\r\n        );\r\n        require(v == 27 || v == 28, \"invalid signature 'v' value\");\r\n\r\n        signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"invalid signature\");\r\n    }\r\n}\r\n\r\ncontract APMReservoir is IAPMReservoir {\r\n    address[] private signers;\r\n    mapping(address => uint256) private signerIndex;\r\n    uint256 public signingNonce;\r\n    uint256 public quorum;\r\n\r\n    IFeeDB public feeDB;\r\n    address public immutable token;\r\n\r\n    constructor(\r\n        address _token,\r\n        uint256 _quorum,\r\n        IFeeDB _feeDB,\r\n        address[] memory _signers\r\n    ) {\r\n        require(_token != address(0), \"invalid token address\");\r\n        token = _token;\r\n\r\n        require(_quorum > 0, \"invalid quorum\");\r\n        quorum = _quorum;\r\n        emit UpdateQuorum(_quorum);\r\n\r\n        require(_signers.length > _quorum, \"signers should be more than quorum\");\r\n        signers = _signers;\r\n\r\n        for (uint256 i = 0; i < _signers.length; i++) {\r\n            address signer = _signers[i];\r\n            require(signer != address(0), \"invalid signer\");\r\n            require(signerIndex[signer] == 0, \"already added\");\r\n\r\n            signerIndex[signer] = i + 1;\r\n            emit AddSigner(signer);\r\n        }\r\n\r\n        require(address(_feeDB) != address(0), \"invalid feeDB address\");\r\n        feeDB = _feeDB;\r\n        emit UpdateFeeDB(_feeDB);\r\n\r\n        isValidChain[8217] = true;\r\n        emit SetChainValidity(8217, true);\r\n    }\r\n\r\n    function signersLength() external view returns (uint256) {\r\n        return signers.length;\r\n    }\r\n\r\n    function isSigner(address signer) external view returns (bool) {\r\n        return signerIndex[signer] != 0;\r\n    }\r\n\r\n    function getSigners() external view returns (address[] memory) {\r\n        return signers;\r\n    }\r\n\r\n    function _checkSigners(\r\n        bytes32 message,\r\n        uint8[] memory vs,\r\n        bytes32[] memory rs,\r\n        bytes32[] memory ss\r\n    ) private view {\r\n        uint256 length = vs.length;\r\n        require(length == rs.length && length == ss.length, \"length is not equal\");\r\n        require(length >= quorum, \"signatures should be quorum or more\");\r\n\r\n        address lastSigner;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address signer = Signature.recover(message, vs[i], rs[i], ss[i]);\r\n            require(lastSigner < signer && signerIndex[signer] != 0, \"invalid signer\");\r\n            lastSigner = signer;\r\n        }\r\n    }\r\n\r\n    function addSigner(\r\n        address signer,\r\n        uint8[] calldata vs,\r\n        bytes32[] calldata rs,\r\n        bytes32[] calldata ss\r\n    ) external {\r\n        require(signer != address(0), \"invalid signer parameter\");\r\n        require(signerIndex[signer] == 0, \"already added\");\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(\"addSigner\", block.chainid, address(this), signer, signingNonce++));\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        signers.push(signer);\r\n        signerIndex[signer] = signers.length;\r\n        emit AddSigner(signer);\r\n    }\r\n\r\n    function removeSigner(\r\n        address signer,\r\n        uint8[] calldata vs,\r\n        bytes32[] calldata rs,\r\n        bytes32[] calldata ss\r\n    ) external {\r\n        require(signer != address(0), \"invalid signer parameter\");\r\n        require(signerIndex[signer] != 0, \"not added\");\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(\"removeSigner\", block.chainid, address(this), signer, signingNonce++));\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        uint256 lastIndex = signers.length - 1;\r\n        require(lastIndex > quorum, \"signers should be more than quorum\");\r\n\r\n        uint256 _signerIndex = signerIndex[signer];\r\n        uint256 targetIndex = _signerIndex - 1;\r\n        if (targetIndex != lastIndex) {\r\n            address lastSigner = signers[lastIndex];\r\n            signers[targetIndex] = lastSigner;\r\n            signerIndex[lastSigner] = _signerIndex;\r\n        }\r\n\r\n        signers.pop();\r\n        delete signerIndex[signer];\r\n\r\n        emit RemoveSigner(signer);\r\n    }\r\n\r\n    function updateQuorum(\r\n        uint256 newQuorum,\r\n        uint8[] calldata vs,\r\n        bytes32[] calldata rs,\r\n        bytes32[] calldata ss\r\n    ) external {\r\n        require(newQuorum > 0 && newQuorum < signers.length, \"invalid newQuorum parameter\");\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(\"updateQuorum\", block.chainid, address(this), newQuorum, signingNonce++));\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        quorum = newQuorum;\r\n        emit UpdateQuorum(newQuorum);\r\n    }\r\n\r\n    function updateFeeDB(\r\n        IFeeDB newDB,\r\n        uint8[] calldata vs,\r\n        bytes32[] calldata rs,\r\n        bytes32[] calldata ss\r\n    ) external {\r\n        require(address(newDB) != address(0), \"invalid newDB parameter\");\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(\"updateFeeDB\", block.chainid, address(this), newDB, signingNonce++));\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        feeDB = newDB;\r\n        emit UpdateFeeDB(newDB);\r\n    }\r\n\r\n    struct SendingData {\r\n        uint256 amount;\r\n        uint256 atBlock;\r\n        bool isFeePayed;\r\n        uint256 protocolFee;\r\n        uint256 senderDiscountRate;\r\n    }\r\n    mapping(address => mapping(uint256 => mapping(address => SendingData[]))) public sendingData;\r\n    mapping(address => mapping(uint256 => mapping(address => mapping(uint256 => bool)))) public isTokenReceived;\r\n    mapping(uint256 => bool) public isValidChain;\r\n\r\n    function setChainValidity(\r\n        uint256 chainId,\r\n        bool isValid,\r\n        uint8[] calldata vs,\r\n        bytes32[] calldata rs,\r\n        bytes32[] calldata ss\r\n    ) external {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\"setChainValidity\", block.chainid, address(this), chainId, isValid, signingNonce++)\r\n        );\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        isValidChain[chainId] = isValid;\r\n        emit SetChainValidity(chainId, isValid);\r\n    }\r\n\r\n    function sendingCounts(\r\n        address sender,\r\n        uint256 toChainId,\r\n        address receiver\r\n    ) external view returns (uint256) {\r\n        return sendingData[sender][toChainId][receiver].length;\r\n    }\r\n\r\n    function sendToken(\r\n        uint256 toChainId,\r\n        address receiver,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256 sendingId) {\r\n        require(isValidChain[toChainId], \"invalid toChainId parameter\");\r\n        require(receiver != address(0), \"invalid receiver parameter\");\r\n        require(amount != 0, \"invalid amount parameter\");\r\n\r\n        (bool paysFee, address feeRecipient, uint256 protocolFee, uint256 senderDiscountRate) = feeDB.getFeeDataForSend(\r\n            msg.sender,\r\n            data\r\n        );\r\n\r\n        sendingId = sendingData[msg.sender][toChainId][receiver].length;\r\n        sendingData[msg.sender][toChainId][receiver].push(\r\n            SendingData({\r\n                amount: amount,\r\n                atBlock: block.number,\r\n                isFeePayed: paysFee,\r\n                protocolFee: protocolFee,\r\n                senderDiscountRate: senderDiscountRate\r\n            })\r\n        );\r\n        _takeAmount(paysFee, feeRecipient, protocolFee, senderDiscountRate, amount);\r\n        emit SendToken(msg.sender, toChainId, receiver, amount, sendingId, paysFee, protocolFee, senderDiscountRate);\r\n    }\r\n\r\n    function receiveToken(\r\n        address sender,\r\n        uint256 fromChainId,\r\n        address receiver,\r\n        uint256 amount,\r\n        uint256 sendingId,\r\n        bool isFeePayed,\r\n        uint256 protocolFee,\r\n        uint256 senderDiscountRate,\r\n        bytes memory data,\r\n        uint8[] memory vs,\r\n        bytes32[] memory rs,\r\n        bytes32[] memory ss\r\n    ) public {\r\n        require(!isTokenReceived[sender][fromChainId][receiver][sendingId], \"already received\");\r\n        {\r\n            bytes32 hash = keccak256(\r\n                abi.encodePacked(\r\n                    address(this),\r\n                    fromChainId,\r\n                    sender,\r\n                    block.chainid,\r\n                    receiver,\r\n                    amount,\r\n                    sendingId,\r\n                    isFeePayed,\r\n                    protocolFee,\r\n                    senderDiscountRate\r\n                )\r\n            );\r\n            bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n            _checkSigners(message, vs, rs, ss);\r\n        }\r\n        isTokenReceived[sender][fromChainId][receiver][sendingId] = true;\r\n        _giveAmount(receiver, amount, isFeePayed, protocolFee, senderDiscountRate, data);\r\n\r\n        emit ReceiveToken(sender, fromChainId, receiver, amount, sendingId);\r\n    }\r\n\r\n    function _takeAmount(\r\n        bool paysFee,\r\n        address feeRecipient,\r\n        uint256 protocolFee,\r\n        uint256 discountRate,\r\n        uint256 amount\r\n    ) private {\r\n        require(protocolFee < 100 && discountRate <= 10000, \"invalid feeData\");\r\n        if (paysFee && feeRecipient != address(0)) {\r\n            uint256 feeAmount = (amount * ((protocolFee * (10000 - discountRate)) / 10000)) / 10000;\r\n            if (feeAmount != 0) {\r\n                IERC20(token).transferFrom(msg.sender, feeRecipient, feeAmount);\r\n                emit TransferFee(msg.sender, feeRecipient, feeAmount);\r\n            }\r\n        }\r\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function _giveAmount(\r\n        address receiver,\r\n        uint256 amount,\r\n        bool isFeePayed,\r\n        uint256 protocolFee,\r\n        uint256 senderDiscountRate,\r\n        bytes memory data\r\n    ) private {\r\n        uint256 feeAmount;\r\n        require(protocolFee < 100 && senderDiscountRate <= 10000, \"invalid feeDate\");\r\n        if (!isFeePayed && protocolFee != 0 && senderDiscountRate != 10000) {\r\n            (address feeRecipient, uint256 receiverDiscountRate) = feeDB.getFeeDataForReceive(receiver, data);\r\n\r\n            if (feeRecipient != address(0) && receiverDiscountRate != 10000) {\r\n                uint256 maxDiscountRate = senderDiscountRate > receiverDiscountRate\r\n                    ? senderDiscountRate\r\n                    : receiverDiscountRate;\r\n                feeAmount = (amount * ((protocolFee * (10000 - maxDiscountRate)) / 10000)) / 10000;\r\n\r\n                if (feeAmount != 0) {\r\n                    IERC20(token).transfer(feeRecipient, feeAmount);\r\n                    emit TransferFee(receiver, feeRecipient, feeAmount);\r\n                }\r\n            }\r\n        }\r\n        IERC20(token).transfer(receiver, amount - feeAmount);\r\n    }\r\n\r\n    function migrate(\r\n        address newReservoir,\r\n        uint8[] calldata vs,\r\n        bytes32[] calldata rs,\r\n        bytes32[] calldata ss\r\n    ) external {\r\n        require(newReservoir != address(0), \"invalid newReservoir parameter\");\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(\"migrate\", block.chainid, address(this), newReservoir, signingNonce++));\r\n        bytes32 message = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n        _checkSigners(message, vs, rs, ss);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            (bool success, ) = payable(newReservoir).call{value: ethBalance}(\"\");\r\n            require(success, \"eth transfer failure\");\r\n        }\r\n\r\n        uint256 ApmBalance = IERC20(token).balanceOf(address(this));\r\n        if (ApmBalance > 0) IERC20(token).transfer(newReservoir, ApmBalance);\r\n\r\n        emit Migrate(newReservoir);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quorum\",\"type\":\"uint256\"},{\"internalType\":\"contract IFeeDB\",\"name\":\"_feeDB\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"AddSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReservoir\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"}],\"name\":\"ReceiveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"RemoveSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFeePayed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderDiscountRate\",\"type\":\"uint256\"}],\"name\":\"SendToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetChainValidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFeeDB\",\"name\":\"newFeeDB\",\"type\":\"address\"}],\"name\":\"UpdateFeeDB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"}],\"name\":\"UpdateQuorum\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDB\",\"outputs\":[{\"internalType\":\"contract IFeeDB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTokenReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isValidChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReservoir\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeePayed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderDiscountRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"receiveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sendingId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendingCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sendingData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"atBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFeePayed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderDiscountRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"setChainValidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signingNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeDB\",\"name\":\"newDB\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"updateFeeDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"updateQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "APMReservoir", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8c424b91d8ce0137bab4b832b7f7d154156ba6c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000008e9066e83390fe46256044392ee1a930a0a1937300000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003000000000000000000000000280a9f28712ff819cf05294020726c9ffcbdf81800000000000000000000000089631716e7a8d056b608ac09dea021f73c3f661300000000000000000000000079b766fcee2f79739492caeb92ab8ed70955a169", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa11accfd37c141cd6fb9cb5db579493a2f4167fc533550f93d17a8b7688458f"}]}