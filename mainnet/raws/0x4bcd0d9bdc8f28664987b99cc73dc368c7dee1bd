{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\ninterface erc20 {\r\n    function approve(address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n}\r\n\r\ninterface synthetix {\r\n    function exchangeWithTracking(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint amountReceived);\r\n}\r\n\r\ninterface resolver {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface curve {\r\n    function get_dy(int128, int128, uint) external view returns (uint);\r\n    function exchange(int128, int128, uint, uint, address) external returns (uint);\r\n}\r\n\r\ninterface fee_dist {\r\n    function checkpoint_token() external;\r\n    function checkpoint_total_supply() external;\r\n    function commit_admin(address) external;\r\n    function apply_admin() external;\r\n}\r\n\r\ncontract ib_burner {\r\n    resolver constant addresses = resolver(0x823bE81bbF96BEc0e25CA13170F5AaCb5B79ba83);\r\n    synthetix public snx;\r\n\r\n    curve constant curve_eur = curve(0x19b080FE1ffA0553469D20Ca36219F17Fcf03859);\r\n    curve constant curve_aud = curve(0x3F1B0278A9ee595635B61817630cC19DE792f506);\r\n    curve constant curve_chf = curve(0x9c2C8910F113181783c249d8F6Aa41b51Cde0f0c);\r\n    curve constant curve_gbp = curve(0xD6Ac1CB9019137a896343Da59dDE6d097F710538);\r\n    curve constant curve_jpy = curve(0x8818a9bb44Fbf33502bE7c15c500d0C783B73067);\r\n    curve constant curve_krw = curve(0x8461A004b50d321CB22B7d034969cE6803911899);\r\n\r\n    address constant ib_eur = address(0x96E61422b6A9bA0e068B6c5ADd4fFaBC6a4aae27);\r\n    address constant ib_aud = address(0xFAFdF0C4c1CB09d430Bf88c75D88BB46DAe09967);\r\n    address constant ib_chf = address(0x1CC481cE2BD2EC7Bf67d1Be64d4878b16078F309);\r\n    address constant ib_gbp = address(0x69681f8fde45345C3870BCD5eaf4A05a60E7D227);\r\n    address constant ib_jpy = address(0x5555f75e3d5278082200Fb451D1b6bA946D8e13b);\r\n    address constant ib_krw = address(0x95dFDC8161832e4fF7816aC4B6367CE201538253);\r\n\r\n    address constant s_eur = address(0xD71eCFF9342A5Ced620049e616c5035F1dB98620);\r\n    address constant s_aud = address(0xF48e200EAF9906362BB1442fca31e0835773b8B4);\r\n    address constant s_chf = address(0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d);\r\n    address constant s_gbp = address(0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F);\r\n    address constant s_jpy = address(0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d);\r\n    address constant s_krw = address(0x269895a3dF4D73b077Fc823dD6dA1B95f72Aaf9B);\r\n\r\n    address constant msig = address(0x0D5Dc686d0a2ABBfDaFDFb4D0533E886517d4E83);\r\n    fee_dist constant dist = fee_dist(0xB9d18ab94cf61bB2Bcebe6aC8Ba8c19fF0CDB0cA);\r\n\r\n    function commit_admin(address _addr) external {\r\n        require(msg.sender == msig);\r\n        dist.commit_admin(_addr);\r\n    }\r\n\r\n    function apply_admin() external {\r\n        require(msg.sender == msig);\r\n        dist.apply_admin();\r\n    }\r\n\r\n    constructor() {\r\n        erc20(ib_aud).approve(address(curve_aud), type(uint).max);\r\n        erc20(ib_chf).approve(address(curve_chf), type(uint).max);\r\n        erc20(ib_gbp).approve(address(curve_gbp), type(uint).max);\r\n        erc20(ib_jpy).approve(address(curve_jpy), type(uint).max);\r\n        erc20(ib_krw).approve(address(curve_krw), type(uint).max);\r\n\r\n        snx = synthetix(addresses.getAddress(\"Synthetix\"));\r\n\r\n        erc20(s_aud).approve(address(snx), type(uint).max);\r\n        erc20(s_chf).approve(address(snx), type(uint).max);\r\n        erc20(s_gbp).approve(address(snx), type(uint).max);\r\n        erc20(s_jpy).approve(address(snx), type(uint).max);\r\n        erc20(s_krw).approve(address(snx), type(uint).max);\r\n\r\n        erc20(s_eur).approve(address(curve_eur), type(uint).max);\r\n    }\r\n\r\n    function update_snx() external {\r\n        snx = synthetix(addresses.getAddress(\"Synthetix\"));\r\n\r\n        erc20(s_aud).approve(address(snx), type(uint).max);\r\n        erc20(s_chf).approve(address(snx), type(uint).max);\r\n        erc20(s_gbp).approve(address(snx), type(uint).max);\r\n        erc20(s_jpy).approve(address(snx), type(uint).max);\r\n        erc20(s_krw).approve(address(snx), type(uint).max);\r\n    }\r\n\r\n    // converts all profits from non eur based tokens to sEUR\r\n    function exchanger() external {\r\n        _exchange(ib_aud, \"sAUD\", curve_aud);\r\n        _exchange(ib_chf, \"sCHF\", curve_chf);\r\n        _exchange(ib_gbp, \"sGBP\", curve_gbp);\r\n        _exchange(ib_jpy, \"sJPY\", curve_jpy);\r\n        _exchange(ib_krw, \"sKRW\", curve_krw);\r\n    }\r\n\r\n    // convert sEUR to ibEUR and distribute\r\n    function distribute_no_checkpoint() external {\r\n        uint amount = erc20(s_eur).balanceOf(address(this));\r\n        if (amount > 0) {\r\n            curve_eur.exchange(1, 0, amount, 0, address(this));\r\n        }\r\n        erc20(ib_eur).transfer(address(dist), erc20(ib_eur).balanceOf(address(this)));\r\n    }\r\n\r\n    // convert sEUR to ibEUR and distribute\r\n    function distribute() external {\r\n        uint amount = erc20(s_eur).balanceOf(address(this));\r\n        if (amount > 0) {\r\n            curve_eur.exchange(1, 0, amount, 0, address(this));\r\n        }\r\n        erc20(ib_eur).transfer(address(dist), erc20(ib_eur).balanceOf(address(this)));\r\n        dist.checkpoint_token();\r\n        dist.checkpoint_total_supply();\r\n    }\r\n\r\n    function _exchange(address ib, bytes32 s, curve c) internal {\r\n        uint amount = erc20(ib).balanceOf(address(this));\r\n        if (amount > 0) {\r\n            uint amountReceived = c.exchange(0, 1, amount, 0, address(this));\r\n            if (amountReceived > 0) {\r\n                snx.exchangeWithTracking(s, amountReceived, \"sEUR\", address(this), \"ibAMM\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function clawback(address token) external {\r\n        require(msg.sender == msig);\r\n        _safeTransfer(token, msig, erc20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"apply_admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"commit_admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute_no_checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snx\",\"outputs\":[{\"internalType\":\"contract synthetix\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update_snx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ib_burner", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0e7454203629c1e970d57e71db6fe2329c79065ee7ccd1eededbe6b3bd8abf9b"}]}