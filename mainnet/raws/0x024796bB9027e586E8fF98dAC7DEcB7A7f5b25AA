{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed currentOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"Ownable : Function called by unauthorized user.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function owner() external view returns (address ownerAddress) {\r\n        ownerAddress = _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable/transferOwnership : cannot transfer ownership to zero address\"\r\n        );\r\n        success = _transferOwnership(newOwner);\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner returns (bool success) {\r\n        success = _transferOwnership(address(0));\r\n    }\r\n\r\n    function _transferOwnership(address newOwner)\r\n        internal\r\n        returns (bool success)\r\n    {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n        success = true;\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev  Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev  Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev  Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor() internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev  Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev  Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev  Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length > index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev  Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev  Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev  Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev  Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev  Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev  Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\nlibrary EnumerableMap {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev  Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(\r\n        Map storage map,\r\n        bytes32 key,\r\n        bytes32 value\r\n    ) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) {\r\n            // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({_key: key, _value: value}));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev  Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) {\r\n            // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the key-value pair stored at position `index` in the map. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of entries inside the\r\n     * array, and it may change when more entries are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Map storage map, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32, bytes32)\r\n    {\r\n        require(\r\n            map._entries.length > index,\r\n            \"EnumerableMap: index out of bounds\"\r\n        );\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev  Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function _tryGet(Map storage map, bytes32 key)\r\n        private\r\n        view\r\n        returns (bool, bytes32)\r\n    {\r\n        uint256 keyIndex = map._indexes[key];\r\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\r\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    /**\r\n     * @dev  Same as {_get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\r\n     */\r\n    function _get(\r\n        Map storage map,\r\n        bytes32 key,\r\n        string memory errorMessage\r\n    ) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev  Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(\r\n        UintToAddressMap storage map,\r\n        uint256 key,\r\n        address value\r\n    ) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev  Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the element stored at position `index` in the set. O(1).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintToAddressMap storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256, address)\r\n    {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev  Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryGet(UintToAddressMap storage map, uint256 key)\r\n        internal\r\n        view\r\n        returns (bool, address)\r\n    {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\r\n        return (success, address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\r\n    }\r\n\r\n    /**\r\n     * @dev  Same as {get}, with a custom error message when `key` is not in the map.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryGet}.\r\n     */\r\n    function get(\r\n        UintToAddressMap storage map,\r\n        uint256 key,\r\n        string memory errorMessage\r\n    ) internal view returns (address) {\r\n        return\r\n            address(\r\n                uint160(uint256(_get(map._inner, bytes32(key), errorMessage)))\r\n            );\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    /**\r\n     * @dev  Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nabstract contract ERC721Pausable is Context, Ownable {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\nabstract contract ERC721Fees is Context, Ownable {\r\n    event FeePaused();\r\n    event FeeUnPaused();\r\n\r\n    event CancelFeePaused();\r\n    event CancelFeeUnPaused();\r\n\r\n    event SetFee(uint256 feeRate);\r\n    event SetCancelFee(uint256 feeRate);\r\n\r\n    uint256 private _feeRate;\r\n    uint256 private _cancelFeeRate;\r\n\r\n    bool private _feePaused;\r\n    bool private _cancelFeePaused;\r\n\r\n    constructor(uint256 feeRate_, uint256 cancelFeeRate_) {\r\n        _feeRate = feeRate_;\r\n        _cancelFeeRate = cancelFeeRate_;\r\n\r\n        _feePaused = false;\r\n        _cancelFeePaused = false;\r\n    }\r\n\r\n    function feeRate() public view virtual returns (uint256) {\r\n        if (feePaused() == true) {\r\n            return 0;\r\n        }\r\n\r\n        return _feeRate;\r\n    }\r\n\r\n    function cancelFeeRate() public view virtual returns (uint256) {\r\n        if (cancelFeePaused() == true) {\r\n            return 0;\r\n        }\r\n\r\n        return _cancelFeeRate;\r\n    }\r\n\r\n    function feePaused() public view virtual returns (bool) {\r\n        return _feePaused;\r\n    }\r\n\r\n    function cancelFeePaused() public view virtual returns (bool) {\r\n        return _cancelFeePaused;\r\n    }\r\n\r\n    modifier whenNotFeePaused() {\r\n        require(!feePaused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenFeePaused() {\r\n        require(feePaused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotCancelFeePaused() {\r\n        require(!cancelFeePaused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenCancelFeePaused() {\r\n        require(cancelFeePaused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function feePause() public onlyOwner whenNotFeePaused {\r\n        _feePaused = true;\r\n        emit FeePaused();\r\n    }\r\n\r\n    function feeUnPause() public onlyOwner whenFeePaused {\r\n        _feePaused = false;\r\n        emit FeeUnPaused();\r\n    }\r\n\r\n    function cancelFeePause() public onlyOwner whenNotCancelFeePaused {\r\n        _cancelFeePaused = true;\r\n        emit CancelFeePaused();\r\n    }\r\n\r\n    function cancelFeeUnPause() public onlyOwner whenCancelFeePaused {\r\n        _cancelFeePaused = false;\r\n        emit CancelFeeUnPaused();\r\n    }\r\n\r\n    function setFee(uint256 feeRate_) public onlyOwner {\r\n        require(feeRate_ <= 100, \"Up to 100 commission\");\r\n\r\n        _feeRate = feeRate_;\r\n        emit SetFee(feeRate_);\r\n    }\r\n\r\n    function setCancelFee(uint256 feeRate_) public onlyOwner {\r\n        require(feeRate_ <= 100, \"Up to 100 commission\");\r\n\r\n        _cancelFeeRate = feeRate_;\r\n        emit SetCancelFee(feeRate_);\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\nabstract contract ERC20Payment is Ownable {\r\n    //\ud5c8\uc6a9\ub41c \ud1a0\ud070 \uc8fc\uc18c\r\n    mapping(address => bool) public acceptedTokens;\r\n    bool public allAcceptedTokens;\r\n\r\n    //\uc218\ub77d\ud560 \ud1a0\ud070 \ucd94\uac00\r\n    function tokenAccepted(address tokenAddress)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        acceptedTokens[tokenAddress] = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    //\uc218\ub77d\ub41c \ud1a0\ud070 \uc81c\uac70\r\n    function tokenDenial(address tokenAddress) public onlyOwner returns (bool) {\r\n        acceptedTokens[tokenAddress] = false;\r\n        return true;\r\n    }\r\n\r\n    //\uc804\uccb4 \uc218\ub77d \uc124\uc815\r\n    function setAllAcceptedTokens(bool _allAcceptedTokens)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        allAcceptedTokens = _allAcceptedTokens;\r\n        return true;\r\n    }\r\n\r\n    modifier onlyAcceptedToken(address tokenAddress) {\r\n        if (allAcceptedTokens == false) {\r\n            require(\r\n                tokenAddress == address(0) ||\r\n                    acceptedTokens[tokenAddress] == true,\r\n                \"ERC20Payment : Disallowed token\"\r\n            );\r\n        }\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract ERC721 is\r\n    Context,\r\n    ERC165,\r\n    IERC721,\r\n    IERC721Metadata,\r\n    IERC721Enumerable,\r\n    ERC721Pausable,\r\n    ERC721Fees,\r\n    ERC20Payment\r\n{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using Strings for uint256;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n\r\n    EnumerableMap.UintToAddressMap internal _tokenOwners;\r\n\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    mapping(address => EnumerableSet.UintSet) internal _holderTokens;\r\n\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\r\n\r\n    mapping(uint256 => string) internal _tokenURIs;\r\n\r\n    string internal _baseURI;\r\n\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    constructor(string memory name_, string memory symbol_) ERC721Fees(1, 1) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\r\n        return _tokenOwners.get(tokenId);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data));\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        require(_exists(tokenId));\r\n        address owner = _ownerOf(tokenId);\r\n        return (spender == owner ||\r\n            getApproved(tokenId) == spender ||\r\n            _operatorApprovals[owner][spender]);\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data));\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0));\r\n        require(!_exists(tokenId));\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = _ownerOf(tokenId); // internal owner\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        _approve(address(0), tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n\r\n        _holderTokens[owner].remove(tokenId);\r\n\r\n        _tokenOwners.remove(tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(_ownerOf(tokenId) == from);\r\n        require(to != address(0));\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\r\n        internal\r\n        virtual\r\n    {\r\n        require(_exists(tokenId));\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    function _setBaseURI(string memory baseURI_) internal virtual {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to.functionCall(\r\n            abi.encodeWithSelector(\r\n                IERC721Receiver(to).onERC721Received.selector,\r\n                _msgSender(),\r\n                from,\r\n                tokenId,\r\n                _data\r\n            ),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(_ownerOf(tokenId), to, tokenId); // internal owner\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(!paused());\r\n    }\r\n\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        require(_exists(tokenId));\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function balanceOf(address owner)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(owner != address(0));\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI_) public virtual onlyOwner {\r\n        _setBaseURI(baseURI_);\r\n    }\r\n\r\n    function baseURI() public view virtual returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId));\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n        return string(abi.encodePacked(base, tokenId.toString()));\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    function tokenByIndex(uint256 index)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        return _ownerOf(tokenId);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner);\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()));\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev  See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        virtual\r\n        override\r\n    {\r\n        require(operator != _msgSender());\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev  See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev  See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev  See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev  See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n}\r\n\r\ncontract AuctionMarket is ERC721 {\r\n    address payable public _contractOwner;\r\n    uint256 maxRoyaltyFee; // Base 1000\r\n    bool canUpdateRoyaltyMember;\r\n\r\n    struct Offer {\r\n        bool isForSale;\r\n        address seller;\r\n        uint256 minValue;\r\n        uint256 endTime;\r\n        address tokenAddress;\r\n    }\r\n\r\n    struct Bid {\r\n        bool hasBid;\r\n        address bidder;\r\n        uint256 value;\r\n    }\r\n\r\n    struct RoyaltyMember {\r\n        address member;\r\n        uint256 royalty;\r\n    }\r\n\r\n    mapping(uint256 => Offer) public offers;\r\n    mapping(uint256 => Bid) public bids;\r\n    mapping(uint256 => uint256) public price;\r\n    mapping(uint256 => bool) public listedMap;\r\n    mapping(uint256 => address) public saleTokenAddresses;\r\n    mapping(uint256 => address) public creators; // TokenId => Owner's address\r\n    mapping(uint256 => RoyaltyMember[]) public royaltyMembers;\r\n\r\n    event CreateAuction(\r\n        address indexed owner,\r\n        uint256 _tokenId,\r\n        uint256 _minValue,\r\n        uint256 _endTime\r\n    );\r\n\r\n    event CancelAuction(uint256 indexed _tokenId, uint256 timestamp);\r\n    event EndAuction(uint256 indexed _tokenId, uint256 price, uint256 timestamp);\r\n    event Bidding(uint256 indexed _tokenId, address actor, uint256 value, uint256 timestamp);\r\n    event CancelBid(uint256 indexed _tokenId, address actor, uint256 timestamp);\r\n    event NewCreator(uint256 indexed _tokenId, address owner , uint256 timestamp);\r\n\r\n    event Purchase(\r\n        address indexed previousOwner,\r\n        address indexed newOwner,\r\n        uint256 price,\r\n        uint256 nftID,\r\n        string uri\r\n    );\r\n\r\n    event Minted(\r\n        address indexed minter,\r\n        uint256 price,\r\n        uint256 nftID,\r\n        string uri\r\n    );\r\n\r\n    event PriceUpdate(\r\n        address indexed owner,\r\n        uint256 oldPrice,\r\n        uint256 newPrice,\r\n        uint256 nftID\r\n    );\r\n\r\n    event NftListStatus(address indexed owner, uint256 nftID, bool isListed);\r\n\r\n    constructor() ERC721(\"Snailhouse\", \"Snailhouse\") {\r\n        maxRoyaltyFee = 300; // 30%\r\n        canUpdateRoyaltyMember = false;\r\n    }\r\n\r\n    function setMaxRoyaltyFee(uint256 _maxRoyaltyFee) public onlyOwner {\r\n        maxRoyaltyFee = _maxRoyaltyFee;\r\n    }\r\n\r\n    function hasAuction(uint256 _tokenId) public view virtual returns (bool) {\r\n        Offer storage offer = offers[_tokenId];\r\n\r\n        if (offer.isForSale != true) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function validateRoyaltyFee(RoyaltyMember[] memory members) public view {\r\n        uint256 totalRoyalty = 0;\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            totalRoyalty += members[i].royalty;\r\n        }\r\n\r\n        require(totalRoyalty <= maxRoyaltyFee, \"Total Royalty is gt Max\");\r\n    }\r\n\r\n    function saveRoyaltyMember(RoyaltyMember[] memory members, uint256 _id)\r\n        internal\r\n    {\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            royaltyMembers[_id].push(members[i]);\r\n        }\r\n    }\r\n\r\n    function updateRoyaltyMembers(\r\n        RoyaltyMember[] memory members,\r\n        uint256 _tokenId\r\n    ) public {\r\n        require(canUpdateRoyaltyMember, \"Update royalty member is disabled\");\r\n        require(creators[_tokenId] == msg.sender, \"Not creator\");\r\n        saveRoyaltyMember(members, _tokenId);\r\n    }\r\n\r\n    function auctionMint(\r\n        address _tokenAddress,\r\n        string memory _tokenURI,\r\n        address _toAddress,\r\n        uint256 _minValue,\r\n        uint256 _auctionTime,\r\n        RoyaltyMember[] memory members\r\n    ) public onlyAcceptedToken(_tokenAddress) returns (uint256) {\r\n        validateRoyaltyFee(members);\r\n        uint256 _tokenId = totalSupply() + 1;\r\n        price[_tokenId] = _minValue;\r\n\r\n        _safeMint(_toAddress, _tokenId);\r\n        _setTokenURI(_tokenId, _tokenURI);\r\n        creators[_tokenId] = _toAddress;\r\n        if (members.length > 0) {\r\n            saveRoyaltyMember(members, _tokenId);\r\n        }\r\n\r\n        emit NewCreator(_tokenId,msg.sender, block.timestamp );\r\n        emit Minted(_toAddress, _minValue, _tokenId, _tokenURI);\r\n\r\n        _createAuction(_tokenAddress, _tokenId, _minValue, _auctionTime);\r\n        return _tokenId;\r\n    }\r\n\r\n    function mint(\r\n        address _tokenAddress,\r\n        string memory _tokenURI,\r\n        address _toAddress,\r\n        uint256 _price,\r\n        RoyaltyMember[] memory members\r\n    ) public onlyAcceptedToken(_tokenAddress) returns (uint256) {\r\n        validateRoyaltyFee(members);\r\n        uint256 _tokenId = totalSupply() + 1;\r\n        price[_tokenId] = _price;\r\n        saleTokenAddresses[_tokenId] = _tokenAddress;\r\n        listedMap[_tokenId] = true;\r\n\r\n        _safeMint(_toAddress, _tokenId);\r\n        _setTokenURI(_tokenId, _tokenURI);\r\n        creators[_tokenId] = _toAddress;\r\n        if (members.length > 0) {\r\n            saveRoyaltyMember(members, _tokenId);\r\n        }\r\n\r\n        emit NewCreator(_tokenId,msg.sender, block.timestamp);\r\n        emit Minted(_toAddress, _price, _tokenId, _tokenURI);\r\n\r\n        return _tokenId;\r\n    }\r\n\r\n    function buy(uint256 _id) external payable {\r\n        _validate(_id);\r\n\r\n        address _previousOwner = ownerOf(_id);\r\n        address _newOwner = msg.sender;\r\n\r\n        _trade(_id);\r\n\r\n        emit Purchase(\r\n            _previousOwner,\r\n            _newOwner,\r\n            price[_id],\r\n            _id,\r\n            tokenURI(_id)\r\n        );\r\n    }\r\n\r\n    function _validate(uint256 _id) internal view {\r\n        bool isItemListed = listedMap[_id];\r\n        require(_exists(_id));\r\n        require(isItemListed);\r\n        require(msg.sender != ownerOf(_id));\r\n    }\r\n\r\n    function calculateRoyaltyValue(uint256 _id) public view returns (uint256) {\r\n        uint256 royaltyValue = 0;\r\n        RoyaltyMember[] storage members = royaltyMembers[_id];\r\n\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            uint256 royalty = members[i].royalty;\r\n            uint256 memberRoyalty = (royalty * price[_id]) / 1000;\r\n            royaltyValue += memberRoyalty;\r\n        }\r\n\r\n        return royaltyValue;\r\n    }\r\n\r\n    function transferNativeRoyaltyValue(uint256 _id) internal {\r\n        RoyaltyMember[] storage members = royaltyMembers[_id];\r\n\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            address member = members[i].member;\r\n            uint256 royalty = members[i].royalty;\r\n            uint256 memberRoyalty = (royalty * price[_id]) / 1000;\r\n\r\n            payable(member).transfer(memberRoyalty);\r\n        }\r\n    }\r\n\r\n    function transferTokenRoyaltyValue(uint256 _id) internal {\r\n        RoyaltyMember[] storage members = royaltyMembers[_id];\r\n\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            address member = members[i].member;\r\n            uint256 royalty = members[i].royalty;\r\n            uint256 memberRoyalty = (royalty * price[_id]) / 1000;\r\n\r\n            TransferHelper.safeTransferFrom(\r\n                saleTokenAddresses[_id],\r\n                msg.sender,\r\n                payable(member),\r\n                memberRoyalty\r\n            );\r\n        }\r\n    }\r\n\r\n    function _trade(uint256 _id) internal {\r\n        address payable contractOwner = payable(_owner);\r\n        address payable _buyer = payable(msg.sender);\r\n        address payable _owner = payable(ownerOf(_id));\r\n\r\n        _transfer(_owner, _buyer, _id);\r\n\r\n        // Commission for market\r\n        uint256 _commissionValue = (price[_id] * feeRate()) / 1000;\r\n\r\n        // Commission for creator\r\n        uint256 royaltyValue = calculateRoyaltyValue(_id);\r\n\r\n        // Net value seller receive\r\n        uint256 _sellerValue = price[_id] - _commissionValue - royaltyValue;\r\n\r\n        if (saleTokenAddresses[_id] == address(0)) {\r\n            require(msg.value >= price[_id]);\r\n\r\n            // Send to owner\r\n            _owner.transfer(_sellerValue);\r\n\r\n            // Send to market owner\r\n            contractOwner.transfer(_commissionValue);\r\n\r\n            // Send royalty\r\n            if (royaltyValue > 0) {\r\n                transferNativeRoyaltyValue(_id);\r\n            }\r\n\r\n            // If buyer sent more than price, we send them back their rest of funds\r\n            if (msg.value > price[_id]) {\r\n                _buyer.transfer(msg.value - price[_id]);\r\n            }\r\n        } else {\r\n            TransferHelper.safeTransferFrom(\r\n                saleTokenAddresses[_id],\r\n                msg.sender,\r\n                _owner,\r\n                _sellerValue\r\n            );\r\n\r\n            TransferHelper.safeTransferFrom(\r\n                saleTokenAddresses[_id],\r\n                msg.sender,\r\n                contractOwner,\r\n                _commissionValue\r\n            );\r\n            if (royaltyValue > 0) {\r\n                transferTokenRoyaltyValue(_id);\r\n            }\r\n        }\r\n\r\n        listedMap[_id] = false;\r\n    }\r\n\r\n    function updatePrice(uint256 _tokenId, uint256 _price)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(hasAuction(_tokenId) == false);\r\n        uint256 oldPrice = price[_tokenId];\r\n        require(msg.sender == ownerOf(_tokenId));\r\n        price[_tokenId] = _price;\r\n\r\n        emit PriceUpdate(msg.sender, oldPrice, _price, _tokenId);\r\n        return true;\r\n    }\r\n\r\n    function updateListingStatus(uint256 _tokenId, bool shouldBeListed)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(msg.sender == ownerOf(_tokenId));\r\n        require(hasAuction(_tokenId) == false);\r\n\r\n        listedMap[_tokenId] = shouldBeListed;\r\n\r\n        emit NftListStatus(msg.sender, _tokenId, shouldBeListed);\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateSale(\r\n        address _tokenAddress,\r\n        uint256 _tokenId,\r\n        uint256 _price\r\n    ) public onlyAcceptedToken(_tokenAddress) returns (bool) {\r\n        require(hasAuction(_tokenId) == false);\r\n        uint256 oldPrice = price[_tokenId];\r\n        require(msg.sender == ownerOf(_tokenId));\r\n\r\n        price[_tokenId] = _price;\r\n        saleTokenAddresses[_tokenId] = _tokenAddress;\r\n        emit NftListStatus(msg.sender, _tokenId, true);\r\n\r\n        if (listedMap[_tokenId] != true) {\r\n            listedMap[_tokenId] = true;\r\n            emit PriceUpdate(msg.sender, oldPrice, _price, _tokenId);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _createAuction(\r\n        address _tokenAddress,\r\n        uint256 _tokenId,\r\n        uint256 _minValue,\r\n        uint256 _auctionTime\r\n    ) internal virtual onlyAcceptedToken(_tokenAddress) {\r\n        require(_ownerOf(_tokenId) == msg.sender); //\ud1a0\ud070 \uc18c\uc720\uc790\uc778\uc9c0 \ud655\uc778\r\n\r\n        Offer storage offer = offers[_tokenId];\r\n        require(offer.isForSale != true); //\ud604\uc7ac \ud310\ub9e4\uc911\uc778\uc9c0 \ud655\uc778\r\n\r\n        offers[_tokenId] = Offer(\r\n            true,\r\n            msg.sender,\r\n            _minValue,\r\n            block.timestamp + _auctionTime,\r\n            _tokenAddress\r\n        );\r\n        emit CreateAuction(\r\n            msg.sender,\r\n            _tokenId,\r\n            _minValue,\r\n            block.timestamp + _auctionTime\r\n        );\r\n    }\r\n\r\n    function createAuction(\r\n        address _tokenAddress,\r\n        uint256 _tokenId,\r\n        uint256 _minValue,\r\n        uint256 _auctionTime\r\n    ) public virtual onlyAcceptedToken(_tokenAddress) {\r\n        require(listedMap[_tokenId] == false);\r\n\r\n        _createAuction(_tokenAddress, _tokenId, _minValue, _auctionTime);\r\n    }\r\n\r\n    function _cancelAuction(uint256 _tokenId) internal virtual {\r\n        require(_ownerOf(_tokenId) == msg.sender); //\ud1a0\ud070 \uc18c\uc720\uc790\uc778\uc9c0 \uccb4\ud06c\r\n\r\n        Offer storage offer = offers[_tokenId];\r\n        require(offer.isForSale == true); //\ud604\uc7ac \uacbd\ub9e4\uc911\uc778\uc9c0 \uccb4\ud06c\r\n\r\n        Bid storage bid = bids[_tokenId];\r\n        require(bid.hasBid != true); //\uc785\ucc30\uc790\uac00 \uc788\uc744\uacbd\uc6b0 \uacbd\ub9e4 \ucde8\uc18c \ubd88\uac00\ub2a5\r\n\r\n        offers[_tokenId] = Offer(false, msg.sender, 0, 0, address(0));\r\n\r\n        emit CancelAuction(_tokenId, block.timestamp);\r\n    }\r\n\r\n    function cancelAuction(uint256 _tokenId) public virtual {\r\n        _cancelAuction(_tokenId);\r\n    }\r\n\r\n    function _bid(uint256 _tokenId, uint256 _value) internal virtual {\r\n        require(_ownerOf(_tokenId) != msg.sender); //\ud1a0\ud070 \ubcf4\uc720\uc790\r\n\r\n        Offer storage offer = offers[_tokenId];\r\n        require(block.timestamp < offer.endTime); //\uacbd\ub9e4\uac00 \uc885\ub8cc\ub418\uc5c8\uc744 \uacbd\uc6b0\r\n\r\n        Bid storage existing = bids[_tokenId];\r\n\r\n        if (offer.tokenAddress == address(0)) {\r\n            require(msg.value >= offer.minValue); //\uc785\ucc30 \uae08\uc561\uc774 \ucd5c\uc18c \uc785\ucc30\uc561\ubcf4\ub2e4 \uc791\uc740\uc9c0 \uccb4\ud06c\r\n            require(msg.value > existing.value); //\uc785\ucc30\uae08\uc561\uc774 \uc774\uc804 \uc785\ucc30\uae08\uc561\ubcf4\ub2e4 \uc801\uc744\uacbd\uc6b0 \ud2b8\ub79c\uc7ad\uc158 \ucde8\uc18c\r\n            if (existing.value > 0) {\r\n                //\uc774\uc804 \uc785\ucc30\uc790\uc5d0\uac8c \uc774\ub354\ub9ac\uc6c0\uc744 \ub3cc\ub824\uc90c\r\n                address payable bidder = payable(existing.bidder);\r\n                bidder.transfer(existing.value);\r\n            }\r\n\r\n            bids[_tokenId] = Bid(true, msg.sender, msg.value);\r\n        } else {\r\n            require(_value >= offer.minValue); //\uc785\ucc30 \uae08\uc561\uc774 \ucd5c\uc18c \uc785\ucc30\uc561\ubcf4\ub2e4 \uc791\uc740\uc9c0 \uccb4\ud06c\r\n            require(_value > existing.value); //\uc785\ucc30\uae08\uc561\uc774 \uc774\uc804 \uc785\ucc30\uae08\uc561\ubcf4\ub2e4 \uc801\uc744\uacbd\uc6b0 \ud2b8\ub79c\uc7ad\uc158 \ucde8\uc18c\r\n            if (existing.value > 0) {\r\n                TransferHelper.safeTransfer(\r\n                    offer.tokenAddress,\r\n                    existing.bidder,\r\n                    existing.value\r\n                );\r\n            }\r\n\r\n            TransferHelper.safeTransferFrom(\r\n                offer.tokenAddress,\r\n                msg.sender,\r\n                address(this),\r\n                _value\r\n            );\r\n\r\n            bids[_tokenId] = Bid(true, msg.sender, _value);\r\n        }\r\n\r\n        emit Bidding(_tokenId, msg.sender,msg.value, block.timestamp);\r\n    }\r\n\r\n    function placeBid(uint256 _tokenId, uint256 _value) external payable {\r\n        _bid(_tokenId, _value);\r\n    }\r\n\r\n    function _cancelBid(uint256 _tokenId) internal virtual {\r\n        Offer storage offer = offers[_tokenId];\r\n        require(offer.isForSale == true);\r\n        require(block.timestamp < offer.endTime);\r\n\r\n        Bid storage bid = bids[_tokenId];\r\n        require(bid.hasBid == true);\r\n        require(bid.bidder == msg.sender);\r\n\r\n        uint256 cancelFee = (bid.value * cancelFeeRate()) / 1000;\r\n        if (offer.tokenAddress == address(0)) {\r\n            address payable bidder = payable(bid.bidder);\r\n            address payable seller = payable(offer.seller);\r\n\r\n            bidder.transfer(bid.value - cancelFee);\r\n            seller.transfer(cancelFee);\r\n        } else {\r\n            TransferHelper.safeTransfer(\r\n                offer.tokenAddress,\r\n                bid.bidder,\r\n                bid.value - cancelFee\r\n            );\r\n            TransferHelper.safeTransfer(\r\n                offer.tokenAddress,\r\n                offer.seller,\r\n                cancelFee\r\n            );\r\n        }\r\n\r\n        bids[_tokenId] = Bid(false, address(0), 0);\r\n\r\n        emit CancelBid(_tokenId, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function _resetAuction(uint256 _tokenId) internal virtual {\r\n        offers[_tokenId] = Offer(false, address(0), 0, 0, address(0));\r\n        bids[_tokenId] = Bid(false, address(0), 0);\r\n    }\r\n\r\n    function cancelBid(uint256 _tokenId) external payable {\r\n        _cancelBid(_tokenId);\r\n    }\r\n\r\n    function _endAuction(uint256 _tokenId) internal virtual {\r\n        Offer storage offer = offers[_tokenId];\r\n        require(block.timestamp >= offer.endTime);\r\n        require(offer.isForSale == true);\r\n\r\n        address payable seller = payable(_ownerOf(_tokenId));\r\n\r\n        Bid storage bid = bids[_tokenId];\r\n        _transfer(offer.seller, bid.bidder, _tokenId);\r\n\r\n        // Commission for market\r\n        uint256 _commissionValue = (bid.value * feeRate()) / 1000;\r\n\r\n        // Commission for creator\r\n        uint256 royaltyValue = calculateRoyaltyValue(_tokenId);\r\n\r\n        // Net value seller receive\r\n        uint256 _sellerValue = bid.value - _commissionValue - royaltyValue;\r\n\r\n        if (offer.tokenAddress == address(0)) {\r\n            // Send to owner\r\n            seller.transfer(_sellerValue);\r\n\r\n            // Send to market owner\r\n            address payable contractOwner = payable(_owner);\r\n            contractOwner.transfer(_commissionValue);\r\n\r\n            // Send royalty\r\n            if (royaltyValue > 0) {\r\n                transferNativeRoyaltyValue(_tokenId);\r\n            }\r\n        } else {\r\n            TransferHelper.safeTransfer(\r\n                offer.tokenAddress,\r\n                offer.seller,\r\n                _sellerValue\r\n            );\r\n\r\n            TransferHelper.safeTransfer(\r\n                offer.tokenAddress,\r\n                _owner,\r\n                _commissionValue\r\n            );\r\n\r\n            if (royaltyValue > 0) {\r\n                transferTokenRoyaltyValue(_tokenId);\r\n            }\r\n        }\r\n\r\n        emit EndAuction(_tokenId, bid.value, block.timestamp);\r\n        _resetAuction(_tokenId);\r\n    }\r\n\r\n    function endAuction(uint256 _tokenId) external payable {\r\n        _endAuction(_tokenId);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override(ERC721) {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId));\r\n        require(hasAuction(tokenId) == false);\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev  See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override(ERC721) {\r\n        require(hasAuction(tokenId) == false);\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId));\r\n\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev  See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override(ERC721) {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId));\r\n        require(hasAuction(tokenId) == false);\r\n\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function burn(uint256 _tokenId) external payable {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), _tokenId) ||\r\n                _owner == _msgSender(),\r\n            \"ERC721Burnable: caller is not owner nor approved\"\r\n        );\r\n\r\n        Offer storage offer = offers[_tokenId];\r\n        if (offer.isForSale == true) {\r\n            Bid storage bid = bids[_tokenId];\r\n            if (bid.hasBid == true) {\r\n                address payable bidder = payable(bid.bidder);\r\n                bidder.transfer(bid.value);\r\n            }\r\n\r\n            _resetAuction(_tokenId);\r\n        }\r\n\r\n        _burn(_tokenId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Bidding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CancelFeePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CancelFeeUnPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"CreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EndAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeeUnPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewCreator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"name\":\"NftListStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"SetCancelFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_contractOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAcceptedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionMarket.RoyaltyMember[]\",\"name\":\"members\",\"type\":\"tuple[]\"}],\"name\":\"auctionMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"calculateRoyaltyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelFeePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelFeePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelFeeUnPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionTime\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeUnPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hasAuction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listedMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionMarket.RoyaltyMember[]\",\"name\":\"members\",\"type\":\"tuple[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allAcceptedTokens\",\"type\":\"bool\"}],\"name\":\"setAllAcceptedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRate_\",\"type\":\"uint256\"}],\"name\":\"setCancelFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRate_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRoyaltyFee\",\"type\":\"uint256\"}],\"name\":\"setMaxRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenDenial\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldBeListed\",\"type\":\"bool\"}],\"name\":\"updateListingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionMarket.RoyaltyMember[]\",\"name\":\"members\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionMarket.RoyaltyMember[]\",\"name\":\"members\",\"type\":\"tuple[]\"}],\"name\":\"validateRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AuctionMarket", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a7633a23953c7f933c489fdfd03a5a3f5d7429dfead9de65a260d04120560cc8"}]}