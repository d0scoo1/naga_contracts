{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TheHappyChemicalClub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./packages/Bundle.sol\\\";\\n\\n/**\\n * @title The Happy Chemical Club\\n */\\ncontract TheHappyChemicalClub is Bundle {\\n    receive() external payable {}\\n    fallback() external payable {}\\n\\n    event Withdraw(address operator, address receiver, uint256 value);\\n\\n    mapping(address => uint256) private _mintLimit;\\n\\n    uint256 private _limit;\\n    uint256 private _price;\\n    uint256 private _freeTokensLimit;\\n\\n    bool private _locked;\\n    bool private _mintPause;\\n\\n    constructor(uint256 _freeTokens) {\\n        _limit = 5;\\n        _price = 10000000000000000;\\n        _locked = false;\\n        _mintPause = true;\\n        _freeTokensLimit = _freeTokens;\\n    }\\n\\n    modifier gate() {\\n        require(_locked == false, \\\"TheHappyChemicalClub: reentrancy denied\\\");\\n        _locked = true;\\n        _;\\n        _locked = false;\\n    }\\n\\n    function mintPrice(uint256 _quantity) public view returns (uint256) {\\n        if (_currentTokenId() < _freeTokensLimit) {\\n            return 0;\\n        } else {\\n            return (_price * _quantity);\\n        }\\n    }\\n\\n    function setPrice(uint256 _value) public ownership {\\n        _price = _value;\\n    }\\n\\n    function unpause() public ownership {\\n        _mintPause = false;\\n    }\\n\\n    function pause() public ownership {\\n        _mintPause = true;\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _mintPause;\\n    }\\n\\n    function setRevealURI(string memory _cid, bool _isExtension) public ownership {\\n        _setRevealURI(_cid, _isExtension);\\n    }\\n\\n    function checkURI(uint256 _tokenId) public view returns (string memory) {\\n        return _checkURI(_tokenId);\\n    }\\n\\n    function reveal() public ownership {\\n        _reveal();\\n    }\\n\\n    function setMintLimit(uint256 _amount) public ownership {\\n        _limit = _amount;\\n    }\\n\\n    function mintLimit() public view returns (uint256) {\\n        if (_currentTokenId() < _freeTokensLimit) {\\n            return 1;\\n        } else {\\n            return _limit;\\n        }\\n    }\\n\\n    function mint(uint256 _quantity) public payable gate {\\n        require(msg.value >= mintPrice(_quantity), \\\"TheHappyChemicalClub: not enough funds provided\\\");\\n        require(_quantity + totalSupply() <= 4200, \\\"TheHappyChemicalClub: maximum tokens minted\\\");\\n        require(_quantity <= mintLimit(), \\\"TheHappyChemicalClub: tokens exceed mint limit\\\");\\n        require(_quantity + _mintLimit[msg.sender] <= mintLimit(), \\\"TheHappyChemicalClub: tokens exceed mint limit\\\");\\n        require(_mintPause != true, \\\"TheHappyChemicalClub: minting is paused\\\");\\n        _mintLimit[msg.sender] += _quantity;\\n        for (uint256 i=0; i < _quantity; i++) {\\n            _mint(msg.sender);\\n        }\\n    }\\n\\n    function airdropBatch(address[] memory _to) public ownership {\\n        require(_to.length + totalSupply() <= 4200, \\\"TheHappyChemicalClub: maximum tokens minted\\\");\\n        for (uint256 i = 0; i < _to.length; i++) {\\n            _mint(_to[i]);\\n        }\\n    }\\n\\n    function airdrop(address _to, uint256 _quantity) public ownership {\\n        require(_quantity + totalSupply() <= 4200, \\\"TheHappyChemicalClub: maximum tokens minted\\\");\\n        for (uint256 i=0; i < _quantity; i++) {\\n            _mint(_to);\\n        }\\n    }\\n\\n    function withdraw(address _account) public ownership {\\n        uint256 balance = address(this).balance;\\n        (bool success, ) = payable(_account).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"TheHappyChemicalClub: ether transfer failed\\\");\\n\\n        emit Withdraw(msg.sender, _account, balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/packages/Bundle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../erc/165/ERC165.sol\\\";\\nimport \\\"./Package_ERC173.sol\\\";\\nimport \\\"./Package_ERC721Metadata.sol\\\";\\n\\n/**\\n * @dev Supports interface bundle\\n */\\ncontract Bundle is Package_ERC721Metadata, Package_ERC173, ERC165 {\\n    constructor() Package_ERC721Metadata(\\\"The Happy Chemical Club\\\", \\\"THC\\\", \\\"bafybeif42ii3tgqjjou6ozzs6zc6kdj6ihybijvvnzznpzda7i5aulhjgy/prereveal.json\\\") Package_ERC173(msg.sender) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override(ERC165) returns (bool) {\\n        return\\n            interfaceId == type(ERC165).interfaceId ||\\n            interfaceId == type(ERC173).interfaceId ||\\n            interfaceId == type(ERC721).interfaceId ||\\n            interfaceId == type(ERC721Metadata).interfaceId ||\\n            interfaceId == type(ERC721Receiver).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc/165/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 standard\\n */\\ninterface ERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/packages/Package_ERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../erc/173/ERC173.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC173\\n */\\ncontract Package_ERC173 is ERC173 {\\n    address private _owner;\\n\\n    modifier ownership() {\\n        require(owner() == msg.sender, \\\"ERC173: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor(address owner_) {\\n        _transferOwnership(owner_);\\n    }\\n\\n\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    function transferOwnership(address _newOwner) public override ownership {\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    function _transferOwnership(address _newOwner) internal {\\n        address previousOwner = _owner;\\n        _owner = _newOwner;\\n    \\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/packages/Package_ERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Package_ERC721.sol\\\";\\nimport \\\"../erc/721/extensions/ERC721Metadata.sol\\\";\\nimport \\\"../library/utils.sol\\\";\\n\\n/**\\n * @dev Implementation of ERC721Metadata\\n */\\ncontract Package_ERC721Metadata is Package_ERC721, ERC721Metadata {\\n    mapping(uint256 => string) private _tokenCid;\\n    mapping(uint256 => bool) private _overrideCid;\\n\\n    string private _metadata;\\n    string private _contractName;\\n    string private _contractSymbol;\\n    string private _fallbackCid;\\n\\n    bool private _isRevealed;\\n    bool private _setURI;\\n    bool private _jsonExtension;\\n\\n    constructor(string memory name_, string memory symbol_, string memory fallbackCid_) {\\n        _contractName = name_;\\n        _contractSymbol = symbol_;\\n        _fallbackCid = fallbackCid_;\\n        _isRevealed = false;\\n        _setURI = false;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _contractName;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _contractSymbol;\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        if (_tokenId == 0 || _tokenId > _currentTokenId()) {\\n            return \\\"Token ID out of range\\\";\\n        } else if (_overrideCid[_tokenId] == true) {\\n            return string(abi.encodePacked(_ipfs(), _tokenCid[_tokenId]));\\n        } else {\\n            if (_isRevealed == true) {\\n                return _revealURI(_tokenId);\\n            } else {\\n                return string(abi.encodePacked(_ipfs(), _fallbackCid));\\n            }\\n        }\\n    }\\n\\n    function _revealURI(uint256 _tokenId) internal view returns (string memory) {\\n        if (_jsonExtension == true) {\\n            return string(abi.encodePacked(_ipfs(), _metadata, \\\"/\\\", utils.toString(_tokenId), \\\".json\\\"));\\n        } else {\\n            return string(abi.encodePacked(_ipfs(), _metadata, \\\"/\\\", utils.toString(_tokenId)));\\n        }\\n    }\\n\\n    function _ipfs() internal pure returns (string memory) {\\n        return \\\"ipfs://\\\";\\n    }\\n\\n    function _overrideTokenURI(uint256 _tokenId, string memory _cid) internal {\\n        _tokenCid[_tokenId] = _cid;\\n        _overrideCid[_tokenId] = true;\\n    }\\n\\n    function _setRevealURI(string memory _cid, bool _isExtension) internal {\\n        require(_isRevealed == false, \\\"ERC721: reveal has already occured\\\");\\n        _metadata = _cid;\\n        _jsonExtension = _isExtension;\\n        _setURI = true;\\n    }\\n\\n    function _checkURI(uint256 _tokenId) internal view returns (string memory) {\\n        if (_tokenId == 0 || _tokenId > _currentTokenId()) {\\n            return \\\"Token ID out of range\\\";\\n        } else if (_revealed() == true) {\\n            return \\\"Tokens have been revealed\\\";\\n        } else {\\n            return _revealURI(_tokenId);\\n        }\\n    }\\n\\n    function _reveal() internal {\\n        require(_setURI == true, \\\"ERC721: reveal URI not set\\\");\\n\\n        _isRevealed = true;\\n    }\\n\\n    function _revealed() internal view returns (bool) {\\n        return _isRevealed;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc/173/ERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC173 standard\\n */\\ninterface ERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() view external returns (address);\\n\\n    function transferOwnership(address _newOwner) external;\\n}\"\r\n    },\r\n    \"contracts/packages/Package_ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../erc/721/ERC721.sol\\\";\\nimport \\\"../erc/721/receiver/ERC721Receiver.sol\\\";\\nimport \\\"../library/utils.sol\\\";\\n\\n/**\\n * @dev Implementation of ERC721\\n */\\ncontract Package_ERC721 is ERC721 {\\n    mapping(uint256 => address) private _tokenOwner;\\n    mapping(address => uint256) private _ownerBalance;\\n    mapping(uint256 => address) private _tokenApproval;\\n    mapping(address => mapping(address => bool)) private _operatorApproval;\\n\\n    uint256 private _currentId = 0;\\n    uint256 private _totalSupply = 0;\\n\\n    function _mint(address _to) internal {\\n        require(_to != address(0), \\\"ERC721: cannot mint to the zero address\\\");\\n\\n        _currentId += 1;\\n        _totalSupply += 1;\\n        _tokenOwner[_currentId] = _to;\\n        _ownerBalance[_to] += 1;\\n\\n        emit Transfer(address(0), _to, _currentId);\\n    }\\n\\n    function _currentTokenId() internal view returns (uint256) {\\n        return _currentId;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n    \\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return _ownerBalance[_owner];\\n    }\\n\\n    function ownerOf(uint256 _tokenId) public view override returns (address) {\\n        return _tokenOwner[_tokenId];\\n    }\\n\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public override {\\n        safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public override {\\n        _transfer(_from, _to, _tokenId);\\n        _onERC721Received(_from, _to, _tokenId, _data);\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _tokenId) public override {\\n        _transfer(_from, _to, _tokenId);\\n    }\\n\\n    function approve(address _approved, uint256 _tokenId) public override {\\n        require(_tokenOwner[_tokenId] == msg.sender);\\n\\n        _tokenApproval[_tokenId] = _approved;\\n\\n        emit Approval(msg.sender, _approved, _tokenId);\\n    }\\n\\n    function setApprovalForAll(address _operator, bool _approved) public override {\\n        require(msg.sender != _operator, \\\"ERC721: cannot approve the owner\\\");\\n\\n        _operatorApproval[msg.sender][_operator] = _approved;\\n    \\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    function getApproved(uint256 _tokenId) public view override returns (address) {\\n        return _tokenApproval[_tokenId];\\n    }\\n\\n    function isApprovedForAll(address _owner, address _operator) public view override returns (bool) {\\n        return _operatorApproval[_owner][_operator];\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\\n        require(ownerOf(_tokenId) == _from, \\\"ERC721: from address is not owner of token\\\");\\n        require(_tokenOwner[_tokenId] == msg.sender || _tokenApproval[_tokenId] == msg.sender || _operatorApproval[_from][msg.sender] == true, \\\"ERC721: unauthorized transfer\\\");\\n        require(_to != address(0), \\\"ERC721: cannot transfer to the zero address\\\");\\n\\n        _ownerBalance[_from] -= 1;\\n        _tokenOwner[_tokenId] = _to;\\n        _tokenApproval[_tokenId] = address(0);\\n        _ownerBalance[_to] += 1;\\n\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    function _onERC721Received(address _from, address _to, uint256 _tokenId, bytes memory _data) private {\\n        uint256 size;\\n        assembly {size := extcodesize(_to)}\\n        if (size > 0) {\\n            try ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) returns (bytes4 response) {\\n                if (response != ERC721Receiver.onERC721Received.selector) {\\n                    revert(\\\"ERC721: ERC721Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc/721/extensions/ERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721Metadata standard\\n */\\ninterface ERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/library/utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary utils {\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\"\r\n    },\r\n    \"contracts/erc/721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 standard\\n */\\ninterface ERC721 {\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;\\n\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n    function approve(address _approved, uint256 _tokenId) external;\\n\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/erc/721/receiver/ERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721Receiver standard\\n */\\ninterface ERC721Receiver {\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freeTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"airdropBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMintLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isExtension\",\"type\":\"bool\"}],\"name\":\"setRevealURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TheHappyChemicalClub", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000208", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}