{"status": "1", "message": "OK", "result": [{"SourceCode": "// __ __ ____ _ _ _____ ____ _____ _____\t\t\t\t\t\t\t\t\t\t\r\n\t// | \\/ |/ __ \\| \\ | | __ \\ / __ \\_ _| __ \\\t\t\t\t\t\t\t\t\t\r\n\t// | \\ / | | | | \\| | | | | | | || | | |__) |\t\t\t\t\t\t\t\t\t\r\n\t// | |\\/| | | | | . ` | | | | | | || | | _ /\t\t\t\t\t\t\t\t\t\r\n\t// | | | | |__| | |\\ | |__| | |__| || |_| | \\ \\\t\t\t\t\t\t\t\t\t\r\n\t// |_| |_|\\____/|_| \\_|_____/ \\____/_____|_| \\_\\\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// SPDX-License-Identifier: MIT\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Interface of the ERC165 standard, as defined in the\t\t\t\t\t\t\t\t\t\r\n\t* https://eips.ethereum.org/EIPS/eip-165[EIP].\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Implementers can declare support of contract interfaces, which can then be\t\t\t\t\t\t\t\t\t\r\n\t* queried by others ({ERC165Checker}).\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* For an implementation, see {ERC165}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tinterface IERC165 {\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns true if this contract implements the interface defined by\t\t\t\t\t\t\t\t\t\r\n\t* `interfaceId`. See the corresponding\t\t\t\t\t\t\t\t\t\r\n\t* https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\t\t\t\t\t\t\t\t\t\r\n\t* to learn more about how these ids are created.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* This function call must use less than 30 000 gas.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Required interface of an ERC721 compliant contract.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tinterface IERC721 is IERC165 {\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Emitted when `tokenId` token is transferred from `from` to `to`.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns the number of tokens in ``owner``'s account.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns the owner of the `tokenId` token.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` must exist.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\t\t\t\t\t\t\t\t\t\r\n\t* are aware of the ERC721 protocol to prevent tokens from being forever locked.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `from` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `to` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` token must exist and be owned by `from`.\t\t\t\t\t\t\t\t\t\r\n\t* - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\t\t\t\t\t\t\t\t\t\r\n\t* - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Transfer} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction safeTransferFrom(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId\t\t\t\t\t\t\t\t\t\r\n\t) external;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Transfers `tokenId` token from `from` to `to`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `from` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `to` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` token must be owned by `from`.\t\t\t\t\t\t\t\t\t\r\n\t* - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Transfer} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction transferFrom(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId\t\t\t\t\t\t\t\t\t\r\n\t) external;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Gives permission to `to` to transfer `tokenId` token to another account.\t\t\t\t\t\t\t\t\t\r\n\t* The approval is cleared when the token is transferred.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Only a single account can be approved at a time, so approving the zero address clears previous approvals.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - The caller must own the token or be an approved operator.\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` must exist.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits an {Approval} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction approve(address to, uint256 tokenId) external;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns the account approved for `tokenId` token.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` must exist.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Approve or remove `operator` as an operator for the caller.\t\t\t\t\t\t\t\t\t\r\n\t* Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - The `operator` cannot be the caller.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits an {ApprovalForAll} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* See {setApprovalForAll}\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Safely transfers `tokenId` token from `from` to `to`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `from` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `to` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` token must exist and be owned by `from`.\t\t\t\t\t\t\t\t\t\r\n\t* - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\t\t\t\t\t\t\t\t\t\r\n\t* - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Transfer} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction safeTransferFrom(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId,\t\t\t\t\t\t\t\t\t\r\n\tbytes calldata data\t\t\t\t\t\t\t\t\t\r\n\t) external;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @title ERC721 token receiver interface\t\t\t\t\t\t\t\t\t\r\n\t* @dev Interface for any contract that wants to support safeTransfers\t\t\t\t\t\t\t\t\t\r\n\t* from ERC721 asset contracts.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tinterface IERC721Receiver {\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\t\t\t\t\t\t\t\t\t\r\n\t* by `operator` from `from`, this function is called.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* It must return its Solidity selector to confirm the token transfer.\t\t\t\t\t\t\t\t\t\r\n\t* If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction onERC721Received(\t\t\t\t\t\t\t\t\t\r\n\taddress operator,\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId,\t\t\t\t\t\t\t\t\t\r\n\tbytes calldata data\t\t\t\t\t\t\t\t\t\r\n\t) external returns (bytes4);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\t\t\t\t\t\t\t\t\t\r\n\t* @dev See https://eips.ethereum.org/EIPS/eip-721\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tinterface IERC721Metadata is IERC721 {\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns the token collection name.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction name() external view returns (string memory);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns the token collection symbol.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction symbol() external view returns (string memory);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/utils/Address.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Collection of functions related to the address type\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tlibrary Address {\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns true if `account` is a contract.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* [IMPORTANT]\t\t\t\t\t\t\t\t\t\r\n\t* ====\t\t\t\t\t\t\t\t\t\r\n\t* It is unsafe to assume that an address for which this function returns\t\t\t\t\t\t\t\t\t\r\n\t* false is an externally-owned account (EOA) and not a contract.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Among others, `isContract` will return false for the following\t\t\t\t\t\t\t\t\t\r\n\t* types of addresses:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - an externally-owned account\t\t\t\t\t\t\t\t\t\r\n\t* - a contract in construction\t\t\t\t\t\t\t\t\t\r\n\t* - an address where a contract will be created\t\t\t\t\t\t\t\t\t\r\n\t* - an address where a contract lived, but was destroyed\t\t\t\t\t\t\t\t\t\r\n\t* ====\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction isContract(address account) internal view returns (bool) {\t\t\t\t\t\t\t\t\t\r\n\t// This method relies on extcodesize, which returns 0 for contracts in\t\t\t\t\t\t\t\t\t\r\n\t// construction, since the code is only stored at the end of the\t\t\t\t\t\t\t\t\t\r\n\t// constructor execution.\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tuint256 size;\t\t\t\t\t\t\t\t\t\r\n\tassembly {\t\t\t\t\t\t\t\t\t\r\n\tsize := extcodesize(account)\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\treturn size > 0;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Replacement for Solidity's `transfer`: sends `amount` wei to\t\t\t\t\t\t\t\t\t\r\n\t* `recipient`, forwarding all available gas and reverting on errors.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\t\t\t\t\t\t\t\t\t\r\n\t* of certain opcodes, possibly making contracts go over the 2300 gas limit\t\t\t\t\t\t\t\t\t\r\n\t* imposed by `transfer`, making them unable to receive funds via\t\t\t\t\t\t\t\t\t\r\n\t* `transfer`. {sendValue} removes this limitation.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* IMPORTANT: because control is transferred to `recipient`, care must be\t\t\t\t\t\t\t\t\t\r\n\t* taken to not create reentrancy vulnerabilities. Consider using\t\t\t\t\t\t\t\t\t\r\n\t* {ReentrancyGuard} or the\t\t\t\t\t\t\t\t\t\r\n\t* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\t\t\t\t\t\t\t\t\t\r\n\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t(bool success, ) = recipient.call{value: amount}(\"\");\t\t\t\t\t\t\t\t\t\r\n\trequire(success, \"Address: unable to send value, recipient may have reverted\");\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Performs a Solidity function call using a low level `call`. A\t\t\t\t\t\t\t\t\t\r\n\t* plain `call` is an unsafe replacement for a function call: use this\t\t\t\t\t\t\t\t\t\r\n\t* function instead.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* If `target` reverts with a revert reason, it is bubbled up by this\t\t\t\t\t\t\t\t\t\r\n\t* function (like regular Solidity function calls).\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Returns the raw returned data. To convert to the expected return value,\t\t\t\t\t\t\t\t\t\r\n\t* use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `target` must be a contract.\t\t\t\t\t\t\t\t\t\r\n\t* - calling `target` with `data` must not revert.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* _Available since v3.1._\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\t\t\t\t\t\t\t\t\t\r\n\treturn functionCall(target, data, \"Address: low-level call failed\");\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\t\t\t\t\t\t\t\t\t\r\n\t* `errorMessage` as a fallback revert reason when `target` reverts.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* _Available since v3.1._\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction functionCall(\t\t\t\t\t\t\t\t\t\r\n\taddress target,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory data,\t\t\t\t\t\t\t\t\t\r\n\tstring memory errorMessage\t\t\t\t\t\t\t\t\t\r\n\t) internal returns (bytes memory) {\t\t\t\t\t\t\t\t\t\r\n\treturn functionCallWithValue(target, data, 0, errorMessage);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\t\t\t\t\t\t\t\t\t\r\n\t* but also transferring `value` wei to `target`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - the calling contract must have an ETH balance of at least `value`.\t\t\t\t\t\t\t\t\t\r\n\t* - the called Solidity function must be `payable`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* _Available since v3.1._\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction functionCallWithValue(\t\t\t\t\t\t\t\t\t\r\n\taddress target,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory data,\t\t\t\t\t\t\t\t\t\r\n\tuint256 value\t\t\t\t\t\t\t\t\t\r\n\t) internal returns (bytes memory) {\t\t\t\t\t\t\t\t\t\r\n\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\t\t\t\t\t\t\t\t\t\r\n\t* with `errorMessage` as a fallback revert reason when `target` reverts.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* _Available since v3.1._\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction functionCallWithValue(\t\t\t\t\t\t\t\t\t\r\n\taddress target,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory data,\t\t\t\t\t\t\t\t\t\r\n\tuint256 value,\t\t\t\t\t\t\t\t\t\r\n\tstring memory errorMessage\t\t\t\t\t\t\t\t\t\r\n\t) internal returns (bytes memory) {\t\t\t\t\t\t\t\t\t\r\n\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\t\t\t\t\t\t\t\t\t\r\n\trequire(isContract(target), \"Address: call to non-contract\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t(bool success, bytes memory returndata) = target.call{value: value}(data);\t\t\t\t\t\t\t\t\t\r\n\treturn verifyCallResult(success, returndata, errorMessage);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\t\t\t\t\t\t\t\t\t\r\n\t* but performing a static call.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* _Available since v3.3._\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\t\t\t\t\t\t\t\t\t\r\n\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\t\t\t\t\t\t\t\t\t\r\n\t* but performing a static call.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* _Available since v3.3._\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction functionStaticCall(\t\t\t\t\t\t\t\t\t\r\n\taddress target,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory data,\t\t\t\t\t\t\t\t\t\r\n\tstring memory errorMessage\t\t\t\t\t\t\t\t\t\r\n\t) internal view returns (bytes memory) {\t\t\t\t\t\t\t\t\t\r\n\trequire(isContract(target), \"Address: static call to non-contract\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t(bool success, bytes memory returndata) = target.staticcall(data);\t\t\t\t\t\t\t\t\t\r\n\treturn verifyCallResult(success, returndata, errorMessage);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\t\t\t\t\t\t\t\t\t\r\n\t* but performing a delegate call.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* _Available since v3.4._\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\t\t\t\t\t\t\t\t\t\r\n\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\t\t\t\t\t\t\t\t\t\r\n\t* but performing a delegate call.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* _Available since v3.4._\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction functionDelegateCall(\t\t\t\t\t\t\t\t\t\r\n\taddress target,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory data,\t\t\t\t\t\t\t\t\t\r\n\tstring memory errorMessage\t\t\t\t\t\t\t\t\t\r\n\t) internal returns (bytes memory) {\t\t\t\t\t\t\t\t\t\r\n\trequire(isContract(target), \"Address: delegate call to non-contract\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t(bool success, bytes memory returndata) = target.delegatecall(data);\t\t\t\t\t\t\t\t\t\r\n\treturn verifyCallResult(success, returndata, errorMessage);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\t\t\t\t\t\t\t\t\t\r\n\t* revert reason using the provided one.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* _Available since v4.3._\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction verifyCallResult(\t\t\t\t\t\t\t\t\t\r\n\tbool success,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory returndata,\t\t\t\t\t\t\t\t\t\r\n\tstring memory errorMessage\t\t\t\t\t\t\t\t\t\r\n\t) internal pure returns (bytes memory) {\t\t\t\t\t\t\t\t\t\r\n\tif (success) {\t\t\t\t\t\t\t\t\t\r\n\treturn returndata;\t\t\t\t\t\t\t\t\t\r\n\t} else {\t\t\t\t\t\t\t\t\t\r\n\t// Look for revert reason and bubble it up if present\t\t\t\t\t\t\t\t\t\r\n\tif (returndata.length > 0) {\t\t\t\t\t\t\t\t\t\r\n\t// The easiest way to bubble the revert reason is using memory via assembly\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tassembly {\t\t\t\t\t\t\t\t\t\r\n\tlet returndata_size := mload(returndata)\t\t\t\t\t\t\t\t\t\r\n\trevert(add(32, returndata), returndata_size)\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t} else {\t\t\t\t\t\t\t\t\t\r\n\trevert(errorMessage);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/utils/Context.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Provides information about the current execution context, including the\t\t\t\t\t\t\t\t\t\r\n\t* sender of the transaction and its data. While these are generally available\t\t\t\t\t\t\t\t\t\r\n\t* via msg.sender and msg.data, they should not be accessed in such a direct\t\t\t\t\t\t\t\t\t\r\n\t* manner, since when dealing with meta-transactions the account sending and\t\t\t\t\t\t\t\t\t\r\n\t* paying for execution may not be the actual sender (as far as an application\t\t\t\t\t\t\t\t\t\r\n\t* is concerned).\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* This contract is only required for intermediate, library-like contracts.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tabstract contract Context {\t\t\t\t\t\t\t\t\t\r\n\tfunction _msgSender() internal view virtual returns (address) {\t\t\t\t\t\t\t\t\t\r\n\treturn msg.sender;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\t\t\t\t\t\t\t\t\t\r\n\treturn msg.data;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/utils/Strings.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev String operations.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tlibrary Strings {\t\t\t\t\t\t\t\t\t\r\n\tbytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Converts a `uint256` to its ASCII `string` decimal representation.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\t// Inspired by OraclizeAPI's implementation - MIT licence\t\t\t\t\t\t\t\t\t\r\n\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tif (value == 0) {\t\t\t\t\t\t\t\t\t\r\n\treturn \"0\";\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\tuint256 temp = value;\t\t\t\t\t\t\t\t\t\r\n\tuint256 digits;\t\t\t\t\t\t\t\t\t\r\n\twhile (temp != 0) {\t\t\t\t\t\t\t\t\t\r\n\tdigits++;\t\t\t\t\t\t\t\t\t\r\n\ttemp /= 10;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\tbytes memory buffer = new bytes(digits);\t\t\t\t\t\t\t\t\t\r\n\twhile (value != 0) {\t\t\t\t\t\t\t\t\t\r\n\tdigits -= 1;\t\t\t\t\t\t\t\t\t\r\n\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\t\t\t\t\t\t\t\t\t\r\n\tvalue /= 10;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\treturn string(buffer);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction toHexString(uint256 value) internal pure returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\tif (value == 0) {\t\t\t\t\t\t\t\t\t\r\n\treturn \"0x00\";\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\tuint256 temp = value;\t\t\t\t\t\t\t\t\t\r\n\tuint256 length = 0;\t\t\t\t\t\t\t\t\t\r\n\twhile (temp != 0) {\t\t\t\t\t\t\t\t\t\r\n\tlength++;\t\t\t\t\t\t\t\t\t\r\n\ttemp >>= 8;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\treturn toHexString(value, length);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\tbytes memory buffer = new bytes(2 * length + 2);\t\t\t\t\t\t\t\t\t\r\n\tbuffer[0] = \"0\";\t\t\t\t\t\t\t\t\t\r\n\tbuffer[1] = \"x\";\t\t\t\t\t\t\t\t\t\r\n\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\t\t\t\t\t\t\t\t\t\r\n\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\t\t\t\t\t\t\t\t\t\r\n\tvalue >>= 4;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\trequire(value == 0, \"Strings: hex length insufficient\");\t\t\t\t\t\t\t\t\t\r\n\treturn string(buffer);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Implementation of the {IERC165} interface.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\t\t\t\t\t\t\t\t\t\r\n\t* for the additional interface id that will be supported. For example:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* ```solidity\t\t\t\t\t\t\t\t\t\r\n\t* function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\t\t\t\t\t\t\t\t\t\r\n\t* return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\t\t\t\t\t\t\t\t\t\r\n\t* }\t\t\t\t\t\t\t\t\t\r\n\t* ```\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tabstract contract ERC165 is IERC165 {\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC165-supportsInterface}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\t\t\t\t\t\t\t\t\t\r\n\treturn interfaceId == type(IERC165).interfaceId;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\t\t\t\t\t\t\t\t\t\r\n\t* the Metadata extension, but not including the Enumerable extension, which is available separately as\t\t\t\t\t\t\t\t\t\r\n\t* {ERC721Enumerable}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tcontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\t\t\t\t\t\t\t\t\t\r\n\tusing Address for address;\t\t\t\t\t\t\t\t\t\r\n\tusing Strings for uint256;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Token name\t\t\t\t\t\t\t\t\t\r\n\tstring private _name;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Token symbol\t\t\t\t\t\t\t\t\t\r\n\tstring private _symbol;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Mapping from token ID to owner address\t\t\t\t\t\t\t\t\t\r\n\tmapping(uint256 => address) private _owners;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Mapping owner address to token count\t\t\t\t\t\t\t\t\t\r\n\tmapping(address => uint256) private _balances;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Mapping from token ID to approved address\t\t\t\t\t\t\t\t\t\r\n\tmapping(uint256 => address) private _tokenApprovals;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Mapping from owner to operator approvals\t\t\t\t\t\t\t\t\t\r\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tconstructor(string memory name_, string memory symbol_) {\t\t\t\t\t\t\t\t\t\r\n\t_name = name_;\t\t\t\t\t\t\t\t\t\r\n\t_symbol = symbol_;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC165-supportsInterface}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\t\t\t\t\t\t\t\t\t\r\n\treturn\t\t\t\t\t\t\t\t\t\r\n\tinterfaceId == type(IERC721).interfaceId ||\t\t\t\t\t\t\t\t\t\r\n\tinterfaceId == type(IERC721Metadata).interfaceId ||\t\t\t\t\t\t\t\t\t\r\n\tsuper.supportsInterface(interfaceId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721-balanceOf}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction balanceOf(address owner) public view virtual override returns (uint256) {\t\t\t\t\t\t\t\t\t\r\n\trequire(owner != address(0), \"ERC721: balance query for the zero address\");\t\t\t\t\t\t\t\t\t\r\n\treturn _balances[owner];\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721-ownerOf}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\t\t\t\t\t\t\t\t\t\r\n\taddress owner = _owners[tokenId];\t\t\t\t\t\t\t\t\t\r\n\trequire(owner != address(0), \"ERC721: owner query for nonexistent token\");\t\t\t\t\t\t\t\t\t\r\n\treturn owner;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721Metadata-name}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction name() public view virtual override returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\treturn _name;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721Metadata-symbol}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction symbol() public view virtual override returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\treturn _symbol;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721Metadata-tokenURI}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tstring memory baseURI = _baseURI();\t\t\t\t\t\t\t\t\t\r\n\treturn bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\t\t\t\t\t\t\t\t\t\r\n\t* token will be the concatenation of the `baseURI` and the `tokenId`. Empty\t\t\t\t\t\t\t\t\t\r\n\t* by default, can be overriden in child contracts.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _baseURI() internal view virtual returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\treturn \"\";\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721-approve}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction approve(address to, uint256 tokenId) public virtual override {\t\t\t\t\t\t\t\t\t\r\n\taddress owner = ERC721.ownerOf(tokenId);\t\t\t\t\t\t\t\t\t\r\n\trequire(to != owner, \"ERC721: approval to current owner\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\trequire(\t\t\t\t\t\t\t\t\t\r\n\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\t\t\t\t\t\t\t\t\t\r\n\t\"ERC721: approve caller is not owner nor approved for all\"\t\t\t\t\t\t\t\t\t\r\n\t);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_approve(to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721-getApproved}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction getApproved(uint256 tokenId) public view virtual override returns (address) {\t\t\t\t\t\t\t\t\t\r\n\trequire(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\treturn _tokenApprovals[tokenId];\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721-setApprovalForAll}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\t\t\t\t\t\t\t\t\t\r\n\trequire(operator != _msgSender(), \"ERC721: approve to caller\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_operatorApprovals[_msgSender()][operator] = approved;\t\t\t\t\t\t\t\t\t\r\n\temit ApprovalForAll(_msgSender(), operator, approved);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721-isApprovedForAll}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\t\t\t\t\t\t\t\t\t\r\n\treturn _operatorApprovals[owner][operator];\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721-transferFrom}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction transferFrom(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId\t\t\t\t\t\t\t\t\t\r\n\t) public virtual override {\t\t\t\t\t\t\t\t\t\r\n\t//solhint-disable-next-line max-line-length\t\t\t\t\t\t\t\t\t\r\n\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_transfer(from, to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721-safeTransferFrom}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction safeTransferFrom(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId\t\t\t\t\t\t\t\t\t\r\n\t) public virtual override {\t\t\t\t\t\t\t\t\t\r\n\tsafeTransferFrom(from, to, tokenId, \"\");\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721-safeTransferFrom}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction safeTransferFrom(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory _data\t\t\t\t\t\t\t\t\t\r\n\t) public virtual override {\t\t\t\t\t\t\t\t\t\r\n\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\t\t\t\t\t\t\t\t\t\r\n\t_safeTransfer(from, to, tokenId, _data);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\t\t\t\t\t\t\t\t\t\r\n\t* are aware of the ERC721 protocol to prevent tokens from being forever locked.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* `_data` is additional data, it has no specified format and it is sent in call to `to`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\t\t\t\t\t\t\t\t\t\r\n\t* implement alternative mechanisms to perform token transfer, such as signature-based.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `from` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `to` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` token must exist and be owned by `from`.\t\t\t\t\t\t\t\t\t\r\n\t* - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Transfer} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _safeTransfer(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory _data\t\t\t\t\t\t\t\t\t\r\n\t) internal virtual {\t\t\t\t\t\t\t\t\t\r\n\t_transfer(from, to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\trequire(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns whether `tokenId` exists.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Tokens start existing when they are minted (`_mint`),\t\t\t\t\t\t\t\t\t\r\n\t* and stop existing when they are burned (`_burn`).\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\t\t\t\t\t\t\t\t\t\r\n\treturn _owners[tokenId] != address(0);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns whether `spender` is allowed to manage `tokenId`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` must exist.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\t\t\t\t\t\t\t\t\t\r\n\trequire(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\t\t\t\t\t\t\t\t\t\r\n\taddress owner = ERC721.ownerOf(tokenId);\t\t\t\t\t\t\t\t\t\r\n\treturn (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Safely mints `tokenId` and transfers it to `to`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` must not exist.\t\t\t\t\t\t\t\t\t\r\n\t* - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Transfer} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\t\t\t\t\t\t\t\t\t\r\n\t_safeMint(to, tokenId, \"\");\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\t\t\t\t\t\t\t\t\t\r\n\t* forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _safeMint(\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory _data\t\t\t\t\t\t\t\t\t\r\n\t) internal virtual {\t\t\t\t\t\t\t\t\t\r\n\t_mint(to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\trequire(\t\t\t\t\t\t\t\t\t\r\n\t_checkOnERC721Received(address(0), to, tokenId, _data),\t\t\t\t\t\t\t\t\t\r\n\t\"ERC721: transfer to non ERC721Receiver implementer\"\t\t\t\t\t\t\t\t\t\r\n\t);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Mints `tokenId` and transfers it to `to`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` must not exist.\t\t\t\t\t\t\t\t\t\r\n\t* - `to` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Transfer} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _mint(address to, uint256 tokenId) internal virtual {\t\t\t\t\t\t\t\t\t\r\n\trequire(to != address(0), \"ERC721: mint to the zero address\");\t\t\t\t\t\t\t\t\t\r\n\trequire(!_exists(tokenId), \"ERC721: token already minted\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_beforeTokenTransfer(address(0), to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_balances[to] += 1;\t\t\t\t\t\t\t\t\t\r\n\t_owners[tokenId] = to;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\temit Transfer(address(0), to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Destroys `tokenId`.\t\t\t\t\t\t\t\t\t\r\n\t* The approval is cleared when the token is burned.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` must exist.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Transfer} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _burn(uint256 tokenId) internal virtual {\t\t\t\t\t\t\t\t\t\r\n\taddress owner = ERC721.ownerOf(tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_beforeTokenTransfer(owner, address(0), tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Clear approvals\t\t\t\t\t\t\t\t\t\r\n\t_approve(address(0), tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_balances[owner] -= 1;\t\t\t\t\t\t\t\t\t\r\n\tdelete _owners[tokenId];\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\temit Transfer(owner, address(0), tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Transfers `tokenId` from `from` to `to`.\t\t\t\t\t\t\t\t\t\r\n\t* As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `to` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` token must be owned by `from`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Transfer} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _transfer(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId\t\t\t\t\t\t\t\t\t\r\n\t) internal virtual {\t\t\t\t\t\t\t\t\t\r\n\trequire(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\t\t\t\t\t\t\t\t\t\r\n\trequire(to != address(0), \"ERC721: transfer to the zero address\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_beforeTokenTransfer(from, to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Clear approvals from the previous owner\t\t\t\t\t\t\t\t\t\r\n\t_approve(address(0), tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_balances[from] -= 1;\t\t\t\t\t\t\t\t\t\r\n\t_balances[to] += 1;\t\t\t\t\t\t\t\t\t\r\n\t_owners[tokenId] = to;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\temit Transfer(from, to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Approve `to` to operate on `tokenId`\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Approval} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _approve(address to, uint256 tokenId) internal virtual {\t\t\t\t\t\t\t\t\t\r\n\t_tokenApprovals[tokenId] = to;\t\t\t\t\t\t\t\t\t\r\n\temit Approval(ERC721.ownerOf(tokenId), to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\t\t\t\t\t\t\t\t\t\r\n\t* The call is not executed if the target address is not a contract.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* @param from address representing the previous owner of the given token ID\t\t\t\t\t\t\t\t\t\r\n\t* @param to target address that will receive the tokens\t\t\t\t\t\t\t\t\t\r\n\t* @param tokenId uint256 ID of the token to be transferred\t\t\t\t\t\t\t\t\t\r\n\t* @param _data bytes optional data to send along with the call\t\t\t\t\t\t\t\t\t\r\n\t* @return bool whether the call correctly returned the expected magic value\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _checkOnERC721Received(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId,\t\t\t\t\t\t\t\t\t\r\n\tbytes memory _data\t\t\t\t\t\t\t\t\t\r\n\t) private returns (bool) {\t\t\t\t\t\t\t\t\t\r\n\tif (to.isContract()) {\t\t\t\t\t\t\t\t\t\r\n\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\t\t\t\t\t\t\t\t\t\r\n\treturn retval == IERC721Receiver.onERC721Received.selector;\t\t\t\t\t\t\t\t\t\r\n\t} catch (bytes memory reason) {\t\t\t\t\t\t\t\t\t\r\n\tif (reason.length == 0) {\t\t\t\t\t\t\t\t\t\r\n\trevert(\"ERC721: transfer to non ERC721Receiver implementer\");\t\t\t\t\t\t\t\t\t\r\n\t} else {\t\t\t\t\t\t\t\t\t\r\n\tassembly {\t\t\t\t\t\t\t\t\t\r\n\trevert(add(32, reason), mload(reason))\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t} else {\t\t\t\t\t\t\t\t\t\r\n\treturn true;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Hook that is called before any token transfer. This includes minting\t\t\t\t\t\t\t\t\t\r\n\t* and burning.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Calling conditions:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\t\t\t\t\t\t\t\t\t\r\n\t* transferred to `to`.\t\t\t\t\t\t\t\t\t\r\n\t* - When `from` is zero, `tokenId` will be minted for `to`.\t\t\t\t\t\t\t\t\t\r\n\t* - When `to` is zero, ``from``'s `tokenId` will be burned.\t\t\t\t\t\t\t\t\t\r\n\t* - `from` and `to` are never both zero.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _beforeTokenTransfer(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId\t\t\t\t\t\t\t\t\t\r\n\t) internal virtual {}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\t\t\t\t\t\t\t\t\t\r\n\t* @dev See https://eips.ethereum.org/EIPS/eip-721\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tinterface IERC721Enumerable is IERC721 {\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns the total amount of tokens stored by the contract.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction totalSupply() external view returns (uint256);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns a token ID owned by `owner` at a given `index` of its token list.\t\t\t\t\t\t\t\t\t\r\n\t* Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\t\t\t\t\t\t\t\t\t\r\n\t* Use along with {totalSupply} to enumerate all tokens.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction tokenByIndex(uint256 index) external view returns (uint256);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev This implements an optional extension of {ERC721} defined in the EIP that adds\t\t\t\t\t\t\t\t\t\r\n\t* enumerability of all the token ids in the contract as well as all token ids owned by each\t\t\t\t\t\t\t\t\t\r\n\t* account.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\t\t\t\t\t\t\t\t\t\r\n\t// Mapping from owner to list of owned token IDs\t\t\t\t\t\t\t\t\t\r\n\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Mapping from token ID to index of the owner tokens list\t\t\t\t\t\t\t\t\t\r\n\tmapping(uint256 => uint256) private _ownedTokensIndex;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Array with all token ids, used for enumeration\t\t\t\t\t\t\t\t\t\r\n\tuint256[] private _allTokens;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Mapping from token id to position in the allTokens array\t\t\t\t\t\t\t\t\t\r\n\tmapping(uint256 => uint256) private _allTokensIndex;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC165-supportsInterface}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\t\t\t\t\t\t\t\t\t\r\n\treturn interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\t\t\t\t\t\t\t\t\t\r\n\trequire(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\t\t\t\t\t\t\t\t\t\r\n\treturn _ownedTokens[owner][index];\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721Enumerable-totalSupply}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\t\t\t\t\t\t\t\t\t\r\n\treturn _allTokens.length;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721Enumerable-tokenByIndex}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction tokenByIndex(uint256 index) public view virtual override returns (uint256) {\t\t\t\t\t\t\t\t\t\r\n\trequire(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\t\t\t\t\t\t\t\t\t\r\n\treturn _allTokens[index];\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Hook that is called before any token transfer. This includes minting\t\t\t\t\t\t\t\t\t\r\n\t* and burning.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Calling conditions:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\t\t\t\t\t\t\t\t\t\r\n\t* transferred to `to`.\t\t\t\t\t\t\t\t\t\r\n\t* - When `from` is zero, `tokenId` will be minted for `to`.\t\t\t\t\t\t\t\t\t\r\n\t* - When `to` is zero, ``from``'s `tokenId` will be burned.\t\t\t\t\t\t\t\t\t\r\n\t* - `from` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t* - `to` cannot be the zero address.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _beforeTokenTransfer(\t\t\t\t\t\t\t\t\t\r\n\taddress from,\t\t\t\t\t\t\t\t\t\r\n\taddress to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenId\t\t\t\t\t\t\t\t\t\r\n\t) internal virtual override {\t\t\t\t\t\t\t\t\t\r\n\tsuper._beforeTokenTransfer(from, to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tif (from == address(0)) {\t\t\t\t\t\t\t\t\t\r\n\t_addTokenToAllTokensEnumeration(tokenId);\t\t\t\t\t\t\t\t\t\r\n\t} else if (from != to) {\t\t\t\t\t\t\t\t\t\r\n\t_removeTokenFromOwnerEnumeration(from, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\tif (to == address(0)) {\t\t\t\t\t\t\t\t\t\r\n\t_removeTokenFromAllTokensEnumeration(tokenId);\t\t\t\t\t\t\t\t\t\r\n\t} else if (to != from) {\t\t\t\t\t\t\t\t\t\r\n\t_addTokenToOwnerEnumeration(to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Private function to add a token to this extension's ownership-tracking data structures.\t\t\t\t\t\t\t\t\t\r\n\t* @param to address representing the new owner of the given token ID\t\t\t\t\t\t\t\t\t\r\n\t* @param tokenId uint256 ID of the token to be added to the tokens list of the given address\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\t\t\t\t\t\t\t\t\t\r\n\tuint256 length = ERC721.balanceOf(to);\t\t\t\t\t\t\t\t\t\r\n\t_ownedTokens[to][length] = tokenId;\t\t\t\t\t\t\t\t\t\r\n\t_ownedTokensIndex[tokenId] = length;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Private function to add a token to this extension's token tracking data structures.\t\t\t\t\t\t\t\t\t\r\n\t* @param tokenId uint256 ID of the token to be added to the tokens list\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\t\t\t\t\t\t\t\t\t\r\n\t_allTokensIndex[tokenId] = _allTokens.length;\t\t\t\t\t\t\t\t\t\r\n\t_allTokens.push(tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\t\t\t\t\t\t\t\t\t\r\n\t* while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\t\t\t\t\t\t\t\t\t\r\n\t* gas optimizations e.g. when performing a transfer operation (avoiding double writes).\t\t\t\t\t\t\t\t\t\r\n\t* This has O(1) time complexity, but alters the order of the _ownedTokens array.\t\t\t\t\t\t\t\t\t\r\n\t* @param from address representing the previous owner of the given token ID\t\t\t\t\t\t\t\t\t\r\n\t* @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\t\t\t\t\t\t\t\t\t\r\n\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\t\t\t\t\t\t\t\t\t\r\n\t// then delete the last slot (swap and pop).\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tuint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// When the token to delete is the last token, the swap operation is unnecessary\t\t\t\t\t\t\t\t\t\r\n\tif (tokenIndex != lastTokenIndex) {\t\t\t\t\t\t\t\t\t\r\n\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\t\t\t\t\t\t\t\t\t\r\n\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// This also deletes the contents at the last position of the array\t\t\t\t\t\t\t\t\t\r\n\tdelete _ownedTokensIndex[tokenId];\t\t\t\t\t\t\t\t\t\r\n\tdelete _ownedTokens[from][lastTokenIndex];\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Private function to remove a token from this extension's token tracking data structures.\t\t\t\t\t\t\t\t\t\r\n\t* This has O(1) time complexity, but alters the order of the _allTokens array.\t\t\t\t\t\t\t\t\t\r\n\t* @param tokenId uint256 ID of the token to be removed from the tokens list\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\t\t\t\t\t\t\t\t\t\r\n\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\t\t\t\t\t\t\t\t\t\r\n\t// then delete the last slot (swap and pop).\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tuint256 lastTokenIndex = _allTokens.length - 1;\t\t\t\t\t\t\t\t\t\r\n\tuint256 tokenIndex = _allTokensIndex[tokenId];\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\t\t\t\t\t\t\t\t\t\r\n\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\t\t\t\t\t\t\t\t\t\r\n\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\t\t\t\t\t\t\t\t\t\r\n\tuint256 lastTokenId = _allTokens[lastTokenIndex];\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\t\t\t\t\t\t\t\t\t\r\n\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// This also deletes the contents at the last position of the array\t\t\t\t\t\t\t\t\t\r\n\tdelete _allTokensIndex[tokenId];\t\t\t\t\t\t\t\t\t\r\n\t_allTokens.pop();\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev ERC721 token with storage based token URI management.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tabstract contract ERC721URIStorage is ERC721 {\t\t\t\t\t\t\t\t\t\r\n\tusing Strings for uint256;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Optional mapping for token URIs\t\t\t\t\t\t\t\t\t\r\n\tmapping(uint256 => string) private _tokenURIs;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev See {IERC721Metadata-tokenURI}.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\trequire(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tstring memory _tokenURI = _tokenURIs[tokenId];\t\t\t\t\t\t\t\t\t\r\n\tstring memory base = _baseURI();\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// If there is no base URI, return the token URI.\t\t\t\t\t\t\t\t\t\r\n\tif (bytes(base).length == 0) {\t\t\t\t\t\t\t\t\t\r\n\treturn _tokenURI;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t// If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\t\t\t\t\t\t\t\t\t\r\n\tif (bytes(_tokenURI).length > 0) {\t\t\t\t\t\t\t\t\t\r\n\treturn string(abi.encodePacked(base, _tokenURI));\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\treturn super.tokenURI(tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` must exist.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\t\t\t\t\t\t\t\t\t\r\n\trequire(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\t\t\t\t\t\t\t\t\t\r\n\t_tokenURIs[tokenId] = _tokenURI;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Destroys `tokenId`.\t\t\t\t\t\t\t\t\t\r\n\t* The approval is cleared when the token is burned.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - `tokenId` must exist.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Emits a {Transfer} event.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction _burn(uint256 tokenId) internal virtual override {\t\t\t\t\t\t\t\t\t\r\n\tsuper._burn(tokenId);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tif (bytes(_tokenURIs[tokenId]).length != 0) {\t\t\t\t\t\t\t\t\t\r\n\tdelete _tokenURIs[tokenId];\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @title ERC721 Burnable Token\t\t\t\t\t\t\t\t\t\r\n\t* @dev ERC721 Token that can be irreversibly burned (destroyed).\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tabstract contract ERC721Burnable is Context, ERC721 {\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Burns `tokenId`. See {ERC721-_burn}.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* Requirements:\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* - The caller must own `tokenId` or be an approved operator.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction burn(uint256 tokenId) public virtual {\t\t\t\t\t\t\t\t\t\r\n\t//solhint-disable-next-line max-line-length\t\t\t\t\t\t\t\t\t\r\n\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\t\t\t\t\t\t\t\t\t\r\n\t_burn(tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File @openzeppelin/contracts/access/Ownable.sol@v4.3.1\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.0;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Contract module which provides a basic access control mechanism, where\t\t\t\t\t\t\t\t\t\r\n\t* there is an account (an owner) that can be granted exclusive access to\t\t\t\t\t\t\t\t\t\r\n\t* specific functions.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* By default, the owner account will be the one that deploys the contract. This\t\t\t\t\t\t\t\t\t\r\n\t* can later be changed with {transferOwnership}.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* This module is used through inheritance. It will make available the modifier\t\t\t\t\t\t\t\t\t\r\n\t* `onlyOwner`, which can be applied to your functions to restrict their use to\t\t\t\t\t\t\t\t\t\r\n\t* the owner.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tabstract contract Ownable is Context {\t\t\t\t\t\t\t\t\t\r\n\taddress private _owner;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Initializes the contract setting the deployer as the initial owner.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tconstructor() {\t\t\t\t\t\t\t\t\t\r\n\t_setOwner(_msgSender());\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Returns the address of the current owner.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction owner() public view virtual returns (address) {\t\t\t\t\t\t\t\t\t\r\n\treturn _owner;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Throws if called by any account other than the owner.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tmodifier onlyOwner() {\t\t\t\t\t\t\t\t\t\r\n\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\t\t\t\t\t\t\t\t\t\r\n\t_;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Leaves the contract without owner. It will not be possible to call\t\t\t\t\t\t\t\t\t\r\n\t* `onlyOwner` functions anymore. Can only be called by the current owner.\t\t\t\t\t\t\t\t\t\r\n\t*\t\t\t\t\t\t\t\t\t\r\n\t* NOTE: Renouncing ownership will leave the contract without an owner,\t\t\t\t\t\t\t\t\t\r\n\t* thereby removing any functionality that is only available to the owner.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction renounceOwnership() public virtual onlyOwner {\t\t\t\t\t\t\t\t\t\r\n\t_setOwner(address(0));\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t/**\t\t\t\t\t\t\t\t\t\r\n\t* @dev Transfers ownership of the contract to a new account (`newOwner`).\t\t\t\t\t\t\t\t\t\r\n\t* Can only be called by the current owner.\t\t\t\t\t\t\t\t\t\r\n\t*/\t\t\t\t\t\t\t\t\t\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\t\t\t\t\t\t\t\t\t\r\n\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\t\t\t\t\t\t\t\t\t\r\n\t_setOwner(newOwner);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tfunction _setOwner(address newOwner) private {\t\t\t\t\t\t\t\t\t\r\n\taddress oldOwner = _owner;\t\t\t\t\t\t\t\t\t\r\n\t_owner = newOwner;\t\t\t\t\t\t\t\t\t\r\n\temit OwnershipTransferred(oldOwner, newOwner);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// File contracts/MondoIR.sol\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tpragma solidity ^0.8.2;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tcontract SantaAndCrew is ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Burnable, Ownable {\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tusing Strings for uint256;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Optional mapping for token URIs\t\t\t\t\t\t\t\t\t\r\n\tmapping (uint256 => string) private _tokenURIs;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// Base URI\t\t\t\t\t\t\t\t\t\r\n\tstring private _baseURIextended;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tconstructor() ERC721(\"Santa And Crew\", \"SAC\") {}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tfunction setBaseURI(string memory baseURI_) external onlyOwner() {\t\t\t\t\t\t\t\t\t\r\n\t_baseURIextended = baseURI_;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal override(ERC721URIStorage) virtual {\t\t\t\t\t\t\t\t\t\r\n\trequire(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\t\t\t\t\t\t\t\t\t\r\n\t_tokenURIs[tokenId] = _tokenURI;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tfunction _baseURI() internal view virtual override returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\treturn _baseURIextended;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tfunction tokenURI(uint256 tokenId) public view virtual override(ERC721, ERC721URIStorage) returns (string memory) {\t\t\t\t\t\t\t\t\t\r\n\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tstring memory _tokenURI = _tokenURIs[tokenId];\t\t\t\t\t\t\t\t\t\r\n\tstring memory base = _baseURI();\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t// If there is no base URI, return the token URI.\t\t\t\t\t\t\t\t\t\r\n\tif (bytes(base).length == 0) {\t\t\t\t\t\t\t\t\t\r\n\treturn _tokenURI;\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t// If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\t\t\t\t\t\t\t\t\t\r\n\tif (bytes(_tokenURI).length > 0) {\t\t\t\t\t\t\t\t\t\r\n\treturn string(abi.encodePacked(base, _tokenURI));\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t// If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\t\t\t\t\t\t\t\t\t\r\n\treturn string(abi.encodePacked(base, tokenId.toString()));\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tfunction mint(\t\t\t\t\t\t\t\t\t\r\n\taddress _to,\t\t\t\t\t\t\t\t\t\r\n\tuint256 _tokenId,\t\t\t\t\t\t\t\t\t\r\n\tstring memory tokenURI_\t\t\t\t\t\t\t\t\t\r\n\t) external onlyOwner() {\t\t\t\t\t\t\t\t\t\r\n\t_mint(_to, _tokenId);\t\t\t\t\t\t\t\t\t\r\n\t_setTokenURI(_tokenId, tokenURI_);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t// The following functions are overrides required by Solidity.\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId)\t\t\t\t\t\t\t\t\t\r\n\tinternal\t\t\t\t\t\t\t\t\t\r\n\toverride(ERC721, ERC721Enumerable)\t\t\t\t\t\t\t\t\t\r\n\t{\t\t\t\t\t\t\t\t\t\r\n\tsuper._beforeTokenTransfer(from, to, tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\tfunction _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\t\t\t\t\t\t\t\t\t\r\n\tsuper._burn(tokenId);\t\t\t\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\tfunction supportsInterface(bytes4 interfaceId)\t\t\t\t\t\t\t\t\t\r\n\tpublic\t\t\t\t\t\t\t\t\t\r\n\tview\t\t\t\t\t\t\t\t\t\r\n\toverride(ERC721, ERC721Enumerable)\t\t\t\t\t\t\t\t\t\r\n\treturns (bool)\t\t\t\t\t\t\t\t\t\r\n\t{\t\t\t\t\t\t\t\t\t\r\n\treturn super.supportsInterface(interfaceId);\t\t\t\t\t\t\r\n\t}\t\t\t\t\t\t\t\t\t\r\n\t}", "ABI": "[]", "ContractName": "Address", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a38fdbdf5e806a4671ef632cecfb56830c2418b0e43cd9ef0d4a70f1fe27ed6"}]}