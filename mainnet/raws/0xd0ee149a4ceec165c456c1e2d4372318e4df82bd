{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/hyphen/LiquidityPool.sol\": {\r\n      \"content\": \"// $$\\\\   $$\\\\                     $$\\\\                                 $$$$$$$\\\\                      $$\\\\\\n// $$ |  $$ |                    $$ |                                $$  __$$\\\\                     $$ |\\n// $$ |  $$ |$$\\\\   $$\\\\  $$$$$$\\\\  $$$$$$$\\\\   $$$$$$\\\\  $$$$$$$\\\\        $$ |  $$ | $$$$$$\\\\   $$$$$$\\\\  $$ |\\n// $$$$$$$$ |$$ |  $$ |$$  __$$\\\\ $$  __$$\\\\ $$  __$$\\\\ $$  __$$\\\\       $$$$$$$  |$$  __$$\\\\ $$  __$$\\\\ $$ |\\n// $$  __$$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |$$$$$$$$ |$$ |  $$ |      $$  ____/ $$ /  $$ |$$ /  $$ |$$ |\\n// $$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |      $$ |      $$ |  $$ |$$ |  $$ |$$ |\\n// $$ |  $$ |\\\\$$$$$$$ |$$$$$$$  |$$ |  $$ |\\\\$$$$$$$\\\\ $$ |  $$ |      $$ |      \\\\$$$$$$  |\\\\$$$$$$  |$$ |\\n// \\\\__|  \\\\__| \\\\____$$ |$$  ____/ \\\\__|  \\\\__| \\\\_______|\\\\__|  \\\\__|      \\\\__|       \\\\______/  \\\\______/ \\\\__|\\n//           $$\\\\   $$ |$$ |\\n//           \\\\$$$$$$  |$$ |\\n//            \\\\______/ \\\\__|\\n//\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport \\\"../security/Pausable.sol\\\";\\nimport \\\"./structures/TokenConfig.sol\\\";\\nimport \\\"./interfaces/IExecutorManager.sol\\\";\\nimport \\\"./interfaces/ILiquidityProviders.sol\\\";\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\nimport \\\"./interfaces/ITokenManager.sol\\\";\\n\\ncontract LiquidityPool is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    Pausable,\\n    OwnableUpgradeable,\\n    ERC2771ContextUpgradeable\\n{\\n    address private constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 private constant BASE_DIVISOR = 10000000000; // Basis Points * 100 for better accuracy\\n\\n    uint256 public baseGas;\\n\\n    IExecutorManager private executorManager;\\n    ITokenManager public tokenManager;\\n    ILiquidityProviders public liquidityProviders;\\n\\n    struct PermitRequest {\\n        uint256 nonce;\\n        uint256 expiry;\\n        bool allowed;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    mapping(bytes32 => bool) public processedHash;\\n    mapping(address => uint256) public gasFeeAccumulatedByToken;\\n\\n    // Gas fee accumulated by token address => executor address\\n    mapping(address => mapping(address => uint256)) public gasFeeAccumulated;\\n\\n    // Incentive Pool amount per token address\\n    mapping(address => uint256) public incentivePool;\\n\\n    event AssetSent(\\n        address indexed asset,\\n        uint256 indexed amount,\\n        uint256 indexed transferredAmount,\\n        address target,\\n        bytes depositHash,\\n        uint256 fromChainId,\\n        uint256 lpFee,\\n        uint256 transferFee,\\n        uint256 gasFee\\n    );\\n    event Received(address indexed from, uint256 indexed amount);\\n    event Deposit(\\n        address indexed from,\\n        address indexed tokenAddress,\\n        address indexed receiver,\\n        uint256 toChainId,\\n        uint256 amount,\\n        uint256 reward,\\n        string tag\\n    );\\n    event GasFeeWithdraw(address indexed tokenAddress, address indexed owner, uint256 indexed amount);\\n    event TrustedForwarderChanged(address indexed forwarderAddress);\\n    event LiquidityProvidersChanged(address indexed liquidityProvidersAddress);\\n    event TokenManagerChanged(address indexed tokenManagerAddress);\\n    event EthReceived(address, uint256);\\n\\n    // MODIFIERS\\n    modifier onlyExecutor() {\\n        require(executorManager.getExecutorStatus(_msgSender()), \\\"Only executor is allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidityProviders() {\\n        require(_msgSender() == address(liquidityProviders), \\\"Only liquidityProviders is allowed\\\");\\n        _;\\n    }\\n\\n    modifier tokenChecks(address tokenAddress) {\\n        (, bool supportedToken, , , ) = tokenManager.tokensInfo(tokenAddress);\\n        require(supportedToken, \\\"Token not supported\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _executorManagerAddress,\\n        address _pauser,\\n        address _trustedForwarder,\\n        address _tokenManager,\\n        address _liquidityProviders\\n    ) public initializer {\\n        require(_executorManagerAddress != address(0), \\\"ExecutorManager cannot be 0x0\\\");\\n        require(_trustedForwarder != address(0), \\\"TrustedForwarder cannot be 0x0\\\");\\n        require(_liquidityProviders != address(0), \\\"LiquidityProviders cannot be 0x0\\\");\\n        __ERC2771Context_init(_trustedForwarder);\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        __Pausable_init(_pauser);\\n        executorManager = IExecutorManager(_executorManagerAddress);\\n        tokenManager = ITokenManager(_tokenManager);\\n        liquidityProviders = ILiquidityProviders(_liquidityProviders);\\n        baseGas = 21000;\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder) external onlyOwner {\\n        require(trustedForwarder != address(0), \\\"TrustedForwarder can't be 0\\\");\\n        _trustedForwarder = trustedForwarder;\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    function setLiquidityProviders(address _liquidityProviders) external onlyOwner {\\n        require(_liquidityProviders != address(0), \\\"LiquidityProviders can't be 0\\\");\\n        liquidityProviders = ILiquidityProviders(_liquidityProviders);\\n        emit LiquidityProvidersChanged(_liquidityProviders);\\n    }\\n\\n    function setTokenManager(address _tokenManager) external onlyOwner {\\n        require(_tokenManager != address(0), \\\"TokenManager can't be 0\\\");\\n        tokenManager = ITokenManager(_tokenManager);\\n        emit TokenManagerChanged(_tokenManager);\\n    }\\n\\n    function setBaseGas(uint128 gas) external onlyOwner {\\n        baseGas = gas;\\n    }\\n\\n    function getExecutorManager() external view returns (address) {\\n        return address(executorManager);\\n    }\\n\\n    function setExecutorManager(address _executorManagerAddress) external onlyOwner {\\n        require(_executorManagerAddress != address(0), \\\"Executor Manager cannot be 0\\\");\\n        executorManager = IExecutorManager(_executorManagerAddress);\\n    }\\n\\n    function getCurrentLiquidity(address tokenAddress) public view returns (uint256 currentLiquidity) {\\n        uint256 liquidityPoolBalance = liquidityProviders.getCurrentLiquidity(tokenAddress);\\n\\n        currentLiquidity =\\n            liquidityPoolBalance -\\n            liquidityProviders.totalLPFees(tokenAddress) -\\n            gasFeeAccumulatedByToken[tokenAddress] -\\n            incentivePool[tokenAddress];\\n    }\\n\\n    /**\\n     * @dev Function used to deposit tokens into pool to initiate a cross chain token transfer.\\n     * @param toChainId Chain id where funds needs to be transfered\\n     * @param tokenAddress ERC20 Token address that needs to be transfered\\n     * @param receiver Address on toChainId where tokens needs to be transfered\\n     * @param amount Amount of token being transfered\\n     */\\n    function depositErc20(\\n        uint256 toChainId,\\n        address tokenAddress,\\n        address receiver,\\n        uint256 amount,\\n        string calldata tag\\n    ) public tokenChecks(tokenAddress) whenNotPaused nonReentrant {\\n        TokenConfig memory config = tokenManager.getDepositConfig(toChainId, tokenAddress);\\n\\n        require(config.min <= amount && config.max >= amount, \\\"Deposit amount not in Cap limit\\\");\\n        require(receiver != address(0), \\\"Receiver address cannot be 0\\\");\\n        require(amount != 0, \\\"Amount cannot be 0\\\");\\n        address sender = _msgSender();\\n\\n        uint256 rewardAmount = getRewardAmount(amount, tokenAddress);\\n        if (rewardAmount != 0) {\\n            incentivePool[tokenAddress] = incentivePool[tokenAddress] - rewardAmount;\\n        }\\n        liquidityProviders.increaseCurrentLiquidity(tokenAddress, amount);\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(tokenAddress), sender, address(this), amount);\\n        // Emit (amount + reward amount) in event\\n        emit Deposit(sender, tokenAddress, receiver, toChainId, amount + rewardAmount, rewardAmount, tag);\\n    }\\n\\n    function getRewardAmount(uint256 amount, address tokenAddress) public view returns (uint256 rewardAmount) {\\n        uint256 currentLiquidity = getCurrentLiquidity(tokenAddress);\\n        uint256 providedLiquidity = liquidityProviders.getSuppliedLiquidityByToken(tokenAddress);\\n        if (currentLiquidity < providedLiquidity) {\\n            uint256 liquidityDifference = providedLiquidity - currentLiquidity;\\n            if (amount >= liquidityDifference) {\\n                rewardAmount = incentivePool[tokenAddress];\\n            } else {\\n                // Multiply by 10000000000 to avoid 0 reward amount for small amount and liquidity difference\\n                rewardAmount = (amount * incentivePool[tokenAddress] * 10000000000) / liquidityDifference;\\n                rewardAmount = rewardAmount / 10000000000;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * DAI permit and Deposit.\\n     */\\n    function permitAndDepositErc20(\\n        address tokenAddress,\\n        address receiver,\\n        uint256 amount,\\n        uint256 toChainId,\\n        PermitRequest calldata permitOptions,\\n        string calldata tag\\n    ) external {\\n        IERC20Permit(tokenAddress).permit(\\n            _msgSender(),\\n            address(this),\\n            permitOptions.nonce,\\n            permitOptions.expiry,\\n            permitOptions.allowed,\\n            permitOptions.v,\\n            permitOptions.r,\\n            permitOptions.s\\n        );\\n        depositErc20(toChainId, tokenAddress, receiver, amount, tag);\\n    }\\n\\n    /**\\n     * EIP2612 and Deposit.\\n     */\\n    function permitEIP2612AndDepositErc20(\\n        address tokenAddress,\\n        address receiver,\\n        uint256 amount,\\n        uint256 toChainId,\\n        PermitRequest calldata permitOptions,\\n        string calldata tag\\n    ) external {\\n        IERC20Permit(tokenAddress).permit(\\n            _msgSender(),\\n            address(this),\\n            amount,\\n            permitOptions.expiry,\\n            permitOptions.v,\\n            permitOptions.r,\\n            permitOptions.s\\n        );\\n        depositErc20(toChainId, tokenAddress, receiver, amount, tag);\\n    }\\n\\n    /**\\n     * @dev Function used to deposit native token into pool to initiate a cross chain token transfer.\\n     * @param receiver Address on toChainId where tokens needs to be transfered\\n     * @param toChainId Chain id where funds needs to be transfered\\n     */\\n    function depositNative(\\n        address receiver,\\n        uint256 toChainId,\\n        string calldata tag\\n    ) external payable whenNotPaused nonReentrant {\\n        require(\\n            tokenManager.getDepositConfig(toChainId, NATIVE).min <= msg.value &&\\n                tokenManager.getDepositConfig(toChainId, NATIVE).max >= msg.value,\\n            \\\"Deposit amount not in Cap limit\\\"\\n        );\\n        require(receiver != address(0), \\\"Receiver address cannot be 0\\\");\\n        require(msg.value != 0, \\\"Amount cannot be 0\\\");\\n\\n        uint256 rewardAmount = getRewardAmount(msg.value, NATIVE);\\n        if (rewardAmount != 0) {\\n            incentivePool[NATIVE] = incentivePool[NATIVE] - rewardAmount;\\n        }\\n        liquidityProviders.increaseCurrentLiquidity(NATIVE, msg.value);\\n        emit Deposit(_msgSender(), NATIVE, receiver, toChainId, msg.value + rewardAmount, rewardAmount, tag);\\n    }\\n\\n    function sendFundsToUser(\\n        address tokenAddress,\\n        uint256 amount,\\n        address payable receiver,\\n        bytes calldata depositHash,\\n        uint256 tokenGasPrice,\\n        uint256 fromChainId\\n    ) external nonReentrant onlyExecutor whenNotPaused {\\n        uint256 initialGas = gasleft();\\n        TokenConfig memory config = tokenManager.getTransferConfig(tokenAddress);\\n        require(config.min <= amount && config.max >= amount, \\\"Withdraw amount not in Cap limit\\\");\\n        require(receiver != address(0), \\\"Bad receiver address\\\");\\n\\n        (bytes32 hashSendTransaction, bool status) = checkHashStatus(tokenAddress, amount, receiver, depositHash);\\n\\n        require(!status, \\\"Already Processed\\\");\\n        processedHash[hashSendTransaction] = true;\\n\\n        // uint256 amountToTransfer, uint256 lpFee, uint256 transferFeeAmount, uint256 gasFee\\n        uint256[4] memory transferDetails = getAmountToTransfer(initialGas, tokenAddress, amount, tokenGasPrice);\\n\\n        liquidityProviders.decreaseCurrentLiquidity(tokenAddress, transferDetails[0]);\\n\\n        if (tokenAddress == NATIVE) {\\n            (bool success, ) = receiver.call{value: transferDetails[0]}(\\\"\\\");\\n            require(success, \\\"Native Transfer Failed\\\");\\n        } else {\\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(tokenAddress), receiver, transferDetails[0]);\\n        }\\n\\n        emit AssetSent(\\n            tokenAddress,\\n            amount,\\n            transferDetails[0],\\n            receiver,\\n            depositHash,\\n            fromChainId,\\n            transferDetails[1],\\n            transferDetails[2],\\n            transferDetails[3]\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to calculate amount of token that needs to be transfered afetr deducting all required fees.\\n     * Fee to be deducted includes gas fee, lp fee and incentive pool amount if needed.\\n     * @param initialGas Gas provided initially before any calculations began\\n     * @param tokenAddress Token address for which calculation needs to be done\\n     * @param amount Amount of token to be transfered before deducting the fee\\n     * @param tokenGasPrice Gas price in the token being transfered to be used to calculate gas fee\\n     * @return [ amountToTransfer, lpFee, transferFeeAmount, gasFee ]\\n     */\\n    function getAmountToTransfer(\\n        uint256 initialGas,\\n        address tokenAddress,\\n        uint256 amount,\\n        uint256 tokenGasPrice\\n    ) internal returns (uint256[4] memory) {\\n        TokenInfo memory tokenInfo = tokenManager.getTokensInfo(tokenAddress);\\n        uint256 transferFeePerc = _getTransferFee(tokenAddress, amount, tokenInfo);\\n        uint256 lpFee;\\n        if (transferFeePerc > tokenInfo.equilibriumFee) {\\n            // Here add some fee to incentive pool also\\n            lpFee = (amount * tokenInfo.equilibriumFee) / BASE_DIVISOR;\\n            unchecked {\\n                incentivePool[tokenAddress] += (amount * (transferFeePerc - tokenInfo.equilibriumFee)) / BASE_DIVISOR;\\n            }\\n        } else {\\n            lpFee = (amount * transferFeePerc) / BASE_DIVISOR;\\n        }\\n        uint256 transferFeeAmount = (amount * transferFeePerc) / BASE_DIVISOR;\\n\\n        liquidityProviders.addLPFee(tokenAddress, lpFee);\\n\\n        uint256 totalGasUsed = initialGas + tokenInfo.transferOverhead + baseGas - gasleft();\\n\\n        uint256 gasFee = totalGasUsed * tokenGasPrice;\\n        gasFeeAccumulatedByToken[tokenAddress] += gasFee;\\n        gasFeeAccumulated[tokenAddress][_msgSender()] += gasFee;\\n        uint256 amountToTransfer = amount - (transferFeeAmount + gasFee);\\n        return [amountToTransfer, lpFee, transferFeeAmount, gasFee];\\n    }\\n\\n    function _getTransferFee(\\n        address tokenAddress,\\n        uint256 amount,\\n        TokenInfo memory tokenInfo\\n    ) private view returns (uint256 fee) {\\n        uint256 currentLiquidity = getCurrentLiquidity(tokenAddress);\\n        uint256 providedLiquidity = liquidityProviders.getSuppliedLiquidityByToken(tokenAddress);\\n\\n        uint256 resultingLiquidity = currentLiquidity - amount;\\n\\n        // Fee is represented in basis points * 10 for better accuracy\\n        uint256 numerator = providedLiquidity * tokenInfo.equilibriumFee * tokenInfo.maxFee; // F(max) * F(e) * L(e)\\n        uint256 denominator = tokenInfo.equilibriumFee *\\n            providedLiquidity +\\n            (tokenInfo.maxFee - tokenInfo.equilibriumFee) *\\n            resultingLiquidity; // F(e) * L(e) + (F(max) - F(e)) * L(r)\\n\\n        if (denominator == 0) {\\n            fee = 0;\\n        } else {\\n            fee = numerator / denominator;\\n        }\\n    }\\n\\n    function getTransferFee(address tokenAddress, uint256 amount) external view returns (uint256) {\\n        return _getTransferFee(tokenAddress, amount, tokenManager.getTokensInfo(tokenAddress));\\n    }\\n\\n    function checkHashStatus(\\n        address tokenAddress,\\n        uint256 amount,\\n        address payable receiver,\\n        bytes calldata depositHash\\n    ) public view returns (bytes32 hashSendTransaction, bool status) {\\n        hashSendTransaction = keccak256(abi.encode(tokenAddress, amount, receiver, keccak256(depositHash)));\\n\\n        status = processedHash[hashSendTransaction];\\n    }\\n\\n    function withdrawErc20GasFee(address tokenAddress) external onlyExecutor whenNotPaused nonReentrant {\\n        require(tokenAddress != NATIVE, \\\"Can't withdraw native token fee\\\");\\n        // uint256 gasFeeAccumulated = gasFeeAccumulatedByToken[tokenAddress];\\n        uint256 _gasFeeAccumulated = gasFeeAccumulated[tokenAddress][_msgSender()];\\n        require(_gasFeeAccumulated != 0, \\\"Gas Fee earned is 0\\\");\\n        gasFeeAccumulatedByToken[tokenAddress] = gasFeeAccumulatedByToken[tokenAddress] - _gasFeeAccumulated;\\n        gasFeeAccumulated[tokenAddress][_msgSender()] = 0;\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(tokenAddress), _msgSender(), _gasFeeAccumulated);\\n        emit GasFeeWithdraw(tokenAddress, _msgSender(), _gasFeeAccumulated);\\n    }\\n\\n    function withdrawNativeGasFee() external onlyExecutor whenNotPaused nonReentrant {\\n        uint256 _gasFeeAccumulated = gasFeeAccumulated[NATIVE][_msgSender()];\\n        require(_gasFeeAccumulated != 0, \\\"Gas Fee earned is 0\\\");\\n        gasFeeAccumulatedByToken[NATIVE] = gasFeeAccumulatedByToken[NATIVE] - _gasFeeAccumulated;\\n        gasFeeAccumulated[NATIVE][_msgSender()] = 0;\\n        (bool success, ) = payable(_msgSender()).call{value: _gasFeeAccumulated}(\\\"\\\");\\n        require(success, \\\"Native Transfer Failed\\\");\\n\\n        emit GasFeeWithdraw(address(this), _msgSender(), _gasFeeAccumulated);\\n    }\\n\\n    function transfer(\\n        address _tokenAddress,\\n        address receiver,\\n        uint256 _tokenAmount\\n    ) external whenNotPaused onlyLiquidityProviders nonReentrant {\\n        require(receiver != address(0), \\\"Invalid receiver\\\");\\n        if (_tokenAddress == NATIVE) {\\n            require(address(this).balance >= _tokenAmount, \\\"ERR__INSUFFICIENT_BALANCE\\\");\\n            (bool success, ) = receiver.call{value: _tokenAmount}(\\\"\\\");\\n            require(success, \\\"ERR__NATIVE_TRANSFER_FAILED\\\");\\n        } else {\\n            IERC20Upgradeable baseToken = IERC20Upgradeable(_tokenAddress);\\n            require(baseToken.balanceOf(address(this)) >= _tokenAmount, \\\"ERR__INSUFFICIENT_BALANCE\\\");\\n            SafeERC20Upgradeable.safeTransfer(baseToken, receiver, _tokenAmount);\\n        }\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n\\n    receive() external payable {\\n        emit EthReceived(_msgSender(), msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support. \\n * Here _trustedForwarder is made internal instead of private\\n * so it can be changed via Child contracts with a setter method.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Context_init(address trustedForwarder) internal initializer {\\n        __Context_init_unchained();\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address trustedForwarder) internal initializer {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Initializable, PausableUpgradeable {\\n    address private _pauser;\\n\\n    event PauserChanged(address indexed previousPauser, address indexed newPauser);\\n\\n    /**\\n     * @dev The pausable constructor sets the original `pauser` of the contract to the sender\\n     * account & Initializes the contract in unpaused state..\\n     */\\n    function __Pausable_init(address pauser) internal initializer {\\n        require(pauser != address(0), \\\"Pauser Address cannot be 0\\\");\\n        __Pausable_init();\\n        _pauser = pauser;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isPauser(address pauser) public view returns (bool) {\\n        return pauser == _pauser;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the pauser.\\n     */\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Only pauser is allowed to perform this operation\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current pauser to transfer control of the contract to a newPauser.\\n     * @param newPauser The address to transfer pauserShip to.\\n     */\\n    function changePauser(address newPauser) public onlyPauser {\\n        _changePauser(newPauser);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newPauser.\\n     * @param newPauser The address to transfer ownership to.\\n     */\\n    function _changePauser(address newPauser) internal {\\n        require(newPauser != address(0));\\n        emit PauserChanged(_pauser, newPauser);\\n        _pauser = newPauser;\\n    }\\n\\n    function renouncePauser() external virtual onlyPauser {\\n        emit PauserChanged(_pauser, address(0));\\n        _pauser = address(0);\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/structures/TokenConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nstruct TokenInfo {\\n    uint256 transferOverhead;\\n    bool supportedToken;\\n    uint256 equilibriumFee; // Percentage fee Represented in basis points\\n    uint256 maxFee; // Percentage fee Represented in basis points\\n    TokenConfig tokenConfig;\\n}\\n\\nstruct TokenConfig {\\n    uint256 min;\\n    uint256 max;\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/interfaces/IExecutorManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IExecutorManager {\\n    function getExecutorStatus(address executor) external view returns (bool status);\\n\\n    function getAllExecutors() external view returns (address[] memory);\\n\\n    //Register new Executors\\n    function addExecutors(address[] calldata executorArray) external;\\n\\n    // Register single executor\\n    function addExecutor(address executorAddress) external;\\n\\n    //Remove registered Executors\\n    function removeExecutors(address[] calldata executorArray) external;\\n\\n    // Remove Register single executor\\n    function removeExecutor(address executorAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/hyphen/interfaces/ILiquidityProviders.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface ILiquidityProviders {\\n    function BASE_DIVISOR() external view returns (uint256);\\n\\n    function initialize(address _trustedForwarder, address _lpToken) external;\\n\\n    function addLPFee(address _token, uint256 _amount) external;\\n\\n    function addNativeLiquidity() external;\\n\\n    function addTokenLiquidity(address _token, uint256 _amount) external;\\n\\n    function claimFee(uint256 _nftId) external;\\n\\n    function getFeeAccumulatedOnNft(uint256 _nftId) external view returns (uint256);\\n\\n    function getSuppliedLiquidityByToken(address tokenAddress) external view returns (uint256);\\n\\n    function getTokenPriceInLPShares(address _baseToken) external view returns (uint256);\\n\\n    function getTotalLPFeeByToken(address tokenAddress) external view returns (uint256);\\n\\n    function getTotalReserveByToken(address tokenAddress) external view returns (uint256);\\n\\n    function getSuppliedLiquidity(uint256 _nftId) external view returns (uint256);\\n\\n    function increaseNativeLiquidity(uint256 _nftId) external;\\n\\n    function increaseTokenLiquidity(uint256 _nftId, uint256 _amount) external;\\n\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function paused() external view returns (bool);\\n\\n    function removeLiquidity(uint256 _nftId, uint256 amount) external;\\n\\n    function renounceOwnership() external;\\n\\n    function setLiquidityPool(address _liquidityPool) external;\\n\\n    function setLpToken(address _lpToken) external;\\n\\n    function setWhiteListPeriodManager(address _whiteListPeriodManager) external;\\n\\n    function sharesToTokenAmount(uint256 _shares, address _tokenAddress) external view returns (uint256);\\n\\n    function totalLPFees(address) external view returns (uint256);\\n\\n    function totalLiquidity(address) external view returns (uint256);\\n\\n    function totalReserve(address) external view returns (uint256);\\n\\n    function totalSharesMinted(address) external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function whiteListPeriodManager() external view returns (address);\\n\\n    function increaseCurrentLiquidity(address tokenAddress, uint256 amount) external;\\n\\n    function decreaseCurrentLiquidity(address tokenAddress, uint256 amount) external;\\n\\n    function getCurrentLiquidity(address tokenAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20Detailed is IERC20Upgradeable {\\n  function name() external view returns(string memory);\\n  function decimals() external view returns(uint256);\\n}\\n\\ninterface IERC20Nonces is IERC20Detailed {\\n  function nonces(address holder) external view returns(uint);\\n}\\n\\ninterface IERC20Permit is IERC20Nonces {\\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry,\\n                  bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  function permit(address holder, address spender, uint256 value, uint256 expiry,\\n                  uint8 v, bytes32 r, bytes32 s) external;\\n}\"\r\n    },\r\n    \"contracts/hyphen/interfaces/ITokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"../structures/TokenConfig.sol\\\";\\n\\ninterface ITokenManager {\\n    function getEquilibriumFee(address tokenAddress) external view returns (uint256);\\n\\n    function getMaxFee(address tokenAddress) external view returns (uint256);\\n\\n    function changeFee(\\n        address tokenAddress,\\n        uint256 _equilibriumFee,\\n        uint256 _maxFee\\n    ) external;\\n\\n    function tokensInfo(address tokenAddress)\\n        external\\n        view\\n        returns (\\n            uint256 transferOverhead,\\n            bool supportedToken,\\n            uint256 equilibriumFee,\\n            uint256 maxFee,\\n            TokenConfig memory config\\n        );\\n\\n    function getTokensInfo(address tokenAddress) external view returns (TokenInfo memory);\\n\\n    function getDepositConfig(uint256 toChainId, address tokenAddress) external view returns (TokenConfig memory);\\n\\n    function getTransferConfig(address tokenAddress) external view returns (TokenConfig memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transferredAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"depositHash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"}],\"name\":\"AssetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"EthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasFeeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvidersAddress\",\"type\":\"address\"}],\"name\":\"LiquidityProvidersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenManagerAddress\",\"type\":\"address\"}],\"name\":\"TokenManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"changePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositHash\",\"type\":\"bytes\"}],\"name\":\"checkHashStatus\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashSendTransaction\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"name\":\"depositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gasFeeAccumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gasFeeAccumulatedByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getCurrentLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecutorManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incentivePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executorManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityProviders\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityProviders\",\"outputs\":[{\"internalType\":\"contract ILiquidityProviders\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LiquidityPool.PermitRequest\",\"name\":\"permitOptions\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"name\":\"permitAndDepositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LiquidityPool.PermitRequest\",\"name\":\"permitOptions\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"name\":\"permitEIP2612AndDepositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositHash\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"}],\"name\":\"sendFundsToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"gas\",\"type\":\"uint128\"}],\"name\":\"setBaseGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executorManagerAddress\",\"type\":\"address\"}],\"name\":\"setExecutorManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityProviders\",\"type\":\"address\"}],\"name\":\"setLiquidityProviders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"contract ITokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawErc20GasFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNativeGasFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LiquidityPool", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}