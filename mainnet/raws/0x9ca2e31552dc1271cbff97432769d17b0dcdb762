{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/JAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * Created on 2021-02-11\\n * @summary: Jibrel Aave Tranche Protocol\\n * @author: Jibrel Team\\n */\\npragma solidity 0.8.8;\\n// pragma experimental ABIEncoderV2; // needed for getAllAtokens and getAllReservesTokens\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IAaveProtocolDataProvider.sol\\\";\\nimport \\\"./interfaces/ILendingPool.sol\\\";\\nimport \\\"./interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"./TransferETHHelper.sol\\\";\\nimport \\\"./interfaces/IJAdminTools.sol\\\";\\nimport \\\"./interfaces/IJTrancheTokens.sol\\\";\\nimport \\\"./interfaces/IJTranchesDeployer.sol\\\";\\nimport \\\"./JAaveStorage.sol\\\";\\nimport \\\"./interfaces/IJAave.sol\\\";\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./interfaces/IWETHGateway.sol\\\";\\nimport \\\"./interfaces/IAaveIncentivesController.sol\\\";\\nimport \\\"./interfaces/IIncentivesController.sol\\\";\\n\\n\\ncontract JAave is OwnableUpgradeable, ReentrancyGuardUpgradeable, JAaveStorageV2, IJAave {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _adminTools price oracle address\\n     * @param _feesCollector fees collector contract address\\n     * @param _tranchesDepl tranches deployer contract address\\n     * @param _aaveIncentiveController Aave incentive controller address (mainnet: 0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5)\\n     * @param _wethAddress weth / wmatic / wavax contract address\\n     * @param _blocksPerYear blocks / year or seconds in a year\\n     */\\n    function initialize(address _adminTools, \\n            address _feesCollector, \\n            address _tranchesDepl,\\n            address _aaveIncentiveController,\\n            address _wethAddress,\\n            uint256 _blocksPerYear) external initializer() {\\n        OwnableUpgradeable.__Ownable_init();\\n        adminToolsAddress = _adminTools;\\n        feesCollectorAddress = _feesCollector;\\n        tranchesDeployerAddress = _tranchesDepl;\\n        aaveIncentiveControllerAddress = _aaveIncentiveController;\\n        redeemTimeout = 3; //default\\n        wrappedEthAddress = _wethAddress;\\n        totalBlocksPerYear = _blocksPerYear;\\n    }\\n\\n    /**\\n     * @dev admins modifiers\\n     */\\n    modifier onlyAdmins() {\\n        require(IJAdminTools(adminToolsAddress).isAdmin(msg.sender), \\\"JAave: not an Admin\\\");\\n        _;\\n    }\\n\\n    fallback() external payable {}\\n    receive() external payable {}\\n\\n    /**\\n     * @dev set new addresses for price oracle, fees collector and tranche deployer \\n     * @param _adminTools price oracle address\\n     * @param _feesCollector fees collector contract address\\n     * @param _tranchesDepl tranches deployer contract address\\n     * @param _aaveIncentiveController Aave incentive controller address\\n     * @param _wethAddress weth / wmatic / wavax contract address\\n     */\\n    function setNewEnvironment(address _adminTools, \\n            address _feesCollector, \\n            address _tranchesDepl,\\n            address _aaveIncentiveController,\\n            address _wethAddress) external onlyOwner{\\n        require((_adminTools != address(0)) && (_feesCollector != address(0)) && (_tranchesDepl != address(0)), \\\"JAave: check addresses\\\");\\n        adminToolsAddress = _adminTools;\\n        feesCollectorAddress = _feesCollector;\\n        tranchesDeployerAddress = _tranchesDepl;\\n        aaveIncentiveControllerAddress = _aaveIncentiveController;\\n        wrappedEthAddress = _wethAddress;\\n    }\\n\\n    /**\\n     * @dev set incentive rewards address\\n     * @param _incentivesController incentives controller contract address\\n     */\\n    function setIncentivesControllerAddress(address _incentivesController) external override onlyAdmins {\\n        incentivesControllerAddress = _incentivesController;\\n    }\\n\\n    /**\\n     * @dev get incentive rewards address\\n     */\\n    function getIncentivesControllerAddress() external view override returns (address) {\\n        return incentivesControllerAddress;\\n    }\\n\\n    /**\\n     * @dev set how many blocks will be produced per year on the blockchain \\n     * @param _newValue new value\\n     */\\n    function setBlocksPerYear(uint256 _newValue) external onlyAdmins {\\n        require(_newValue > 0, \\\"JAave: new value not allowed\\\");\\n        totalBlocksPerYear = _newValue;\\n    }\\n\\n    /**\\n     * @dev set Aave Pool Address Provider\\n     * @param _addressProviderContract aave lending pool address provider contract address\\n     */\\n    function setAavePoolAddressProvider(address _addressProviderContract) external onlyAdmins {\\n        lendingPoolAddressProvider = _addressProviderContract;\\n    }\\n\\n    /**\\n     * @dev set Aave Pool Address Provider\\n     * @param _aaveIncentiveController aave incentive controller address\\n     */\\n    function setAaveIncentiveControllerAddress(address _aaveIncentiveController) external onlyAdmins {\\n        aaveIncentiveControllerAddress = _aaveIncentiveController;\\n    }\\n\\n    /**\\n     * @dev get Aave Pool Address Provider starting from lending pool address provider\\n     */\\n    function getDataProvider() public view returns(IAaveProtocolDataProvider) {\\n        require(lendingPoolAddressProvider != address(0), \\\"JAave: set lending pool address provider\\\");\\n        return IAaveProtocolDataProvider(ILendingPoolAddressesProvider(lendingPoolAddressProvider)\\n                    .getAddress(0x0100000000000000000000000000000000000000000000000000000000000000));\\n    }\\n\\n    /**\\n     * @dev get Aave all tokens\\n     */\\n    function getAllATokens() external view returns(IAaveProtocolDataProvider.TokenData[] memory) {\\n        require(lendingPoolAddressProvider != address(0), \\\"JAave: set lending pool address provider\\\");\\n        IAaveProtocolDataProvider aaveProtocolDataProvider = getDataProvider();\\n        return aaveProtocolDataProvider.getAllATokens();\\n    }\\n\\n    /**\\n     * @dev get Aave all reserved tokens\\n     */\\n    function getAllReservesTokens() external view returns(IAaveProtocolDataProvider.TokenData[] memory) {\\n        require(lendingPoolAddressProvider != address(0), \\\"JAave: set lending pool address provider\\\");\\n        IAaveProtocolDataProvider aaveProtocolDataProvider = getDataProvider();\\n        return aaveProtocolDataProvider.getAllReservesTokens();\\n    }\\n\\n    /**\\n     * @dev get Aave reserve Data for an asset\\n     * liquidityRate is the return percentage for that asset (multiply by 10^27)\\n     */\\n    function getAaveReserveData(uint256 _trancheNum) external view returns(uint256 availableLiquidity, uint256 totalStableDebt,\\n            uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp) {\\n        require(lendingPoolAddressProvider != address(0), \\\"JAave: set lending pool address provider\\\");\\n        IAaveProtocolDataProvider aaveProtocolDataProvider = getDataProvider();\\n        address asset = trancheAddresses[_trancheNum].buyerCoinAddress;\\n        if (asset == ETH_ADDR)\\n            asset = wrappedEthAddress;\\n        return aaveProtocolDataProvider.getReserveData(asset);\\n    }\\n\\n    function getLendingPool() external view returns (address) {\\n        return ILendingPoolAddressesProvider(lendingPoolAddressProvider).getLendingPool();\\n    }\\n\\n    function changeToWeth(address _token) private view returns(address) {\\n        if (_token == ETH_ADDR) {\\n            return wrappedEthAddress;\\n        }\\n        return _token;\\n    }\\n\\n    /**\\n     * @dev set Weth Gateway contract address\\n     * @param _wethGatewayAddress weth gateway contract address\\n     */\\n    function setWETHGatewayAddress(address _wethGatewayAddress) external onlyAdmins {\\n        wethGatewayAddress = _wethGatewayAddress;\\n    }\\n\\n    /** \\n     * @dev User withdraws tokens from the Aave protocol\\n     * @param _tokenAddr The address of the token to be withdrawn\\n     * @param _amount Amount of tokens to be withdrawn\\n     * @param _to receiver address\\n     */ \\n    function aaveWithdraw(address _tokenAddr, uint256 _amount, address _to) internal {\\n        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressProvider).getLendingPool();\\n        _tokenAddr = changeToWeth(_tokenAddr);\\n\\n        uint256 oldBalance;\\n        uint256 newBalance;\\n        if (_tokenAddr == wrappedEthAddress) {\\n            // get eth balance\\n            oldBalance = getEthBalance();\\n            // if weth, pull to proxy and return ETH to user\\n            ILendingPool(lendingPool).withdraw(_tokenAddr, _amount, address(this));\\n            // from Weth to Eth, all the Weth balance --> no Weth in contract\\n            uint256 wethBal = IERC20Upgradeable(wrappedEthAddress).balanceOf(address(this));\\n            SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(wrappedEthAddress), wethGatewayAddress, wethBal);\\n            IWETHGateway(wethGatewayAddress).withdrawETH(wethBal);\\n            // get new eth balance\\n            newBalance = getEthBalance();\\n            if (newBalance > oldBalance)\\n                TransferETHHelper.safeTransferETH(_to, _amount);\\n        } else {\\n            // if not eth send directly to user\\n            ILendingPool(lendingPool).withdraw(_tokenAddr, _amount, _to);\\n        }\\n    }\\n\\n    /**\\n     * @dev set decimals on the underlying token of a tranche\\n     * @param _trancheNum tranche number\\n     * @param _underlyingDec underlying token decimals\\n     */\\n    function setDecimals(uint256 _trancheNum, uint8 _underlyingDec) external onlyAdmins {\\n        require(_underlyingDec <= 18, \\\"JAave: too many decimals\\\");\\n        trancheParameters[_trancheNum].underlyingDecimals = _underlyingDec;\\n    }\\n\\n    /**\\n     * @dev set tranche redemption percentage\\n     * @param _trancheNum tranche number\\n     * @param _redeemPercent user redemption percent\\n     */\\n    function setTrancheRedemptionPercentage(uint256 _trancheNum, uint16 _redeemPercent) external onlyAdmins {\\n        trancheParameters[_trancheNum].redemptionPercentage = _redeemPercent;\\n    }\\n\\n    /**\\n     * @dev set redemption timeout\\n     * @param _blockNum timeout (in block numbers)\\n     */\\n    function setRedemptionTimeout(uint32 _blockNum) external onlyAdmins {\\n        redeemTimeout = _blockNum;\\n    }\\n\\n    /**\\n     * @dev set tranche redemption percentage scaled by 1e18\\n     * @param _trancheNum tranche number\\n     * @param _newTrAPercentage new tranche A RPB\\n     */\\n    function setTrancheAFixedPercentage(uint256 _trancheNum, uint256 _newTrAPercentage) external onlyAdmins {\\n        trancheParameters[_trancheNum].trancheAFixedPercentage = _newTrAPercentage;\\n        trancheParameters[_trancheNum].storedTrancheAPrice = setTrancheAExchangeRate(_trancheNum);\\n    }\\n\\n    function addTrancheToProtocol(address _buyerCoinAddress, \\n            address _aTokenAddress, \\n            string memory _nameA, \\n            string memory _symbolA, \\n            string memory _nameB, \\n            string memory _symbolB, \\n            uint256 _fixedRpb, \\n            uint8 _underlyingDec) external onlyAdmins nonReentrant {\\n        require(tranchesDeployerAddress != address(0), \\\"JAave: set tranche eth deployer\\\");\\n        require(lendingPoolAddressProvider != address(0), \\\"JAave: set lending pool address provider\\\");\\n\\n        trancheAddresses[tranchePairsCounter].buyerCoinAddress = _buyerCoinAddress;\\n        trancheAddresses[tranchePairsCounter].aTokenAddress = _aTokenAddress;\\n        trancheAddresses[tranchePairsCounter].ATrancheAddress = \\n                IJTranchesDeployer(tranchesDeployerAddress).deployNewTrancheATokens(_nameA, _symbolA, tranchePairsCounter);\\n        trancheAddresses[tranchePairsCounter].BTrancheAddress = \\n                IJTranchesDeployer(tranchesDeployerAddress).deployNewTrancheBTokens(_nameB, _symbolB, tranchePairsCounter); \\n        \\n        trancheParameters[tranchePairsCounter].underlyingDecimals = _underlyingDec;\\n        trancheParameters[tranchePairsCounter].trancheAFixedPercentage = _fixedRpb;\\n        trancheParameters[tranchePairsCounter].trancheALastActionBlock = block.timestamp;\\n        // if we would like to have always 18 decimals\\n        trancheParameters[tranchePairsCounter].storedTrancheAPrice = uint256(1e18);\\n\\n        trancheParameters[tranchePairsCounter].redemptionPercentage = 10000;  //default value 100%, no fees\\n\\n        calcRPBFromPercentage(tranchePairsCounter); // initialize tranche A RPB\\n\\n        emit TrancheAddedToProtocol(tranchePairsCounter, trancheAddresses[tranchePairsCounter].ATrancheAddress, trancheAddresses[tranchePairsCounter].BTrancheAddress);\\n\\n        tranchePairsCounter = tranchePairsCounter.add(1);\\n    } \\n\\n    /**\\n     * @dev enables or disables tranche deposit (default: disabled)\\n     * @param _trancheNum tranche number\\n     * @param _enable true or false\\n     */\\n    function setTrancheDeposit(uint256 _trancheNum, bool _enable) external onlyAdmins {\\n        trancheDepositEnabled[_trancheNum] = _enable;\\n    }\\n    \\n    /**\\n     * @dev set Tranche A exchange rate\\n     * @param _trancheNum tranche number\\n     * @return tranche A token current price\\n     */\\n    function setTrancheAExchangeRate(uint256 _trancheNum) internal returns (uint256) {\\n        calcRPBFromPercentage(_trancheNum);\\n        // uint256 deltaBlocks = (block.number).sub(trancheParameters[_trancheNum].trancheALastActionBlock);\\n        uint256 deltaTime = (block.timestamp).sub(trancheParameters[_trancheNum].trancheALastActionBlock);\\n        // uint256 deltaPrice = (trancheParameters[_trancheNum].trancheACurrentRPB).mul(deltaBlocks);\\n        uint256 deltaPrice = (trancheParameters[_trancheNum].trancheACurrentRPB).mul(deltaTime);\\n        trancheParameters[_trancheNum].storedTrancheAPrice = (trancheParameters[_trancheNum].storedTrancheAPrice).add(deltaPrice);\\n        // trancheParameters[_trancheNum].trancheALastActionBlock = block.number;\\n        trancheParameters[_trancheNum].trancheALastActionBlock = block.timestamp;\\n        return trancheParameters[_trancheNum].storedTrancheAPrice;\\n    }\\n\\n    /**\\n     * @dev get Tranche A exchange rate\\n     * @param _trancheNum tranche number\\n     * @return tranche A token current price\\n     */\\n    function getTrancheAExchangeRate(uint256 _trancheNum) public view returns (uint256) {\\n        return trancheParameters[_trancheNum].storedTrancheAPrice;\\n    }\\n\\n    /**\\n     * @dev get RPB for a given percentage (expressed in 1e18)\\n     * @param _trancheNum tranche number\\n     * @return RPB for a fixed percentage\\n     */\\n    function getTrancheACurrentRPB(uint256 _trancheNum) external view returns (uint256) {\\n        return trancheParameters[_trancheNum].trancheACurrentRPB;\\n    }\\n\\n    /**\\n     * @dev get Tranche A exchange rate (tokens with 18 decimals)\\n     * @param _trancheNum tranche number\\n     * @return tranche A token current price\\n     */\\n    function calcRPBFromPercentage(uint256 _trancheNum) public returns (uint256) {\\n        // if normalized price in tranche A price, everything should be scaled to 1e18 \\n        trancheParameters[_trancheNum].trancheACurrentRPB = trancheParameters[_trancheNum].storedTrancheAPrice\\n                        .mul(trancheParameters[_trancheNum].trancheAFixedPercentage).div(totalBlocksPerYear).div(1e18);\\n        return trancheParameters[_trancheNum].trancheACurrentRPB;\\n    }\\n\\n    /**\\n     * @dev get Tranche A value in underlying tokens\\n     * @param _trancheNum tranche number\\n     * @return trANormValue tranche A value in underlying tokens\\n     */\\n    function getTrAValue(uint256 _trancheNum) public view returns (uint256 trANormValue) {\\n        uint256 totASupply = IERC20Upgradeable(trancheAddresses[_trancheNum].ATrancheAddress).totalSupply();\\n        uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\\n        // if (diffDec > 0)\\n            trANormValue = totASupply.mul(getTrancheAExchangeRate(_trancheNum)).div(1e18).div(10 ** diffDec);\\n        // else    \\n        //     trANormValue = totASupply.mul(getTrancheAExchangeRate(_trancheNum)).div(1e18);\\n        return trANormValue;\\n    }\\n\\n    /**\\n     * @dev get Tranche B value in underlying tokens\\n     * @param _trancheNum tranche number\\n     * @return tranche B value in underlying tokens\\n     */\\n    function getTrBValue(uint256 _trancheNum) public view returns (uint256) {\\n        uint256 totProtValue = getTotalValue(_trancheNum);\\n        uint256 totTrAValue = getTrAValue(_trancheNum);\\n        if (totProtValue > totTrAValue) {\\n            return totProtValue.sub(totTrAValue);\\n        } else\\n            return 0;\\n    }\\n\\n    /**\\n     * @dev get Tranche total value in underlying tokens\\n     * @param _trancheNum tranche number\\n     * @return tranche total value in underlying tokens\\n     */\\n    function getTotalValue(uint256 _trancheNum) public view returns (uint256) {\\n        return getTokenBalance(trancheAddresses[_trancheNum].aTokenAddress);\\n    }\\n\\n    /**\\n     * @dev get Tranche B exchange rate\\n     * @param _trancheNum tranche number\\n     * @param _newAmount new amount entering tranche B (underlying token decimals)\\n     * @return tbPrice tranche B token current price\\n     */\\n    function getTrancheBExchangeRate(uint256 _trancheNum, uint256 _newAmount) public view returns (uint256 tbPrice) {\\n        // set amount of tokens to be minted via taToken price\\n        // Current tbDai price = ((aDai-(aSupply X taPrice)) / bSupply)\\n        // where: aDai = How much aDai we hold in the protocol\\n        // aSupply = Total number of taDai in protocol\\n        // taPrice = taDai / Dai price\\n        // bSupply = Total number of tbDai in protocol\\n        uint256 totTrBValue;\\n\\n        uint256 totBSupply = IERC20Upgradeable(trancheAddresses[_trancheNum].BTrancheAddress).totalSupply(); // 18 decimals\\n        // if normalized price in tranche A price, everything should be scaled to 1e18 \\n        uint256 underlyingDec = uint256(trancheParameters[_trancheNum].underlyingDecimals);\\n        uint256 normAmount = _newAmount;\\n        if (underlyingDec < 18)\\n            normAmount = _newAmount.mul(10 ** uint256(18).sub(underlyingDec));\\n        uint256 newBSupply = totBSupply.add(normAmount); // 18 decimals\\n\\n        uint256 totProtValue = getTotalValue(_trancheNum).add(_newAmount); //underlying token decimals\\n        uint256 totTrAValue = getTrAValue(_trancheNum); //underlying token decimals\\n        if (totProtValue >= totTrAValue)\\n            totTrBValue = totProtValue.sub(totTrAValue); //underlying token decimals\\n        else\\n            totTrBValue = 0;\\n        // if normalized price in tranche A price, everything should be scaled to 1e18 \\n        if (underlyingDec < 18 && totTrBValue > 0) {\\n            totTrBValue = totTrBValue.mul(10 ** (uint256(18).sub(underlyingDec)));\\n        }\\n\\n        if (totTrBValue > 0 && newBSupply > 0) {\\n            // if normalized price in tranche A price, everything should be scaled to 1e18 \\n            tbPrice = totTrBValue.mul(1e18).div(newBSupply);\\n        } else\\n            // if normalized price in tranche A price, everything should be scaled to 1e18 \\n            tbPrice = uint256(1e18);\\n\\n        return tbPrice;\\n    }\\n \\n    /**\\n     * @dev set staking details for tranche A holders, with number, amount and time\\n     * @param _trancheNum tranche number\\n     * @param _account user's account\\n     * @param _stkNum staking detail counter\\n     * @param _amount amount of tranche A tokens\\n     * @param _time time to be considered the deposit\\n     */\\n    function setTrAStakingDetails(uint256 _trancheNum, address _account, uint256 _stkNum, uint256 _amount, uint256 _time) external override onlyAdmins {\\n        stakeCounterTrA[_account][_trancheNum] = _stkNum;\\n        StakingDetails storage details = stakingDetailsTrancheA[_account][_trancheNum][_stkNum];\\n        details.startTime = _time;\\n        details.amount = _amount;\\n    }\\n\\n    /**\\n     * @dev when redemption occurs on tranche A, removing tranche A tokens from staking information (FIFO logic)\\n     * @param _trancheNum tranche number\\n     * @param _amount amount of redeemed tokens\\n     */\\n    function decreaseTrancheATokenFromStake(uint256 _trancheNum, uint256 _amount) internal {\\n        uint256 senderCounter = stakeCounterTrA[msg.sender][_trancheNum];\\n        uint256 tmpAmount = _amount;\\n        for (uint i = 1; i <= senderCounter; i++) {\\n            StakingDetails storage details = stakingDetailsTrancheA[msg.sender][_trancheNum][i];\\n            if (details.amount > 0) {\\n                if (details.amount <= tmpAmount) {\\n                    tmpAmount = tmpAmount.sub(details.amount);\\n                    details.amount = 0;\\n                    // delete stakingDetailsTrancheA[msg.sender][_trancheNum][i];\\n                    // update details number\\n                    // stakeCounterTrA[msg.sender][_trancheNum] = stakeCounterTrA[msg.sender][_trancheNum].sub(1);\\n                } else {\\n                    details.amount = details.amount.sub(tmpAmount);\\n                    tmpAmount = 0;\\n                }\\n            }\\n            if (tmpAmount == 0)\\n                break;\\n        }\\n    }\\n\\n    function getSingleTrancheUserStakeCounterTrA(address _user, uint256 _trancheNum) external view override returns (uint256) {\\n        return stakeCounterTrA[_user][_trancheNum];\\n    }\\n\\n    function getSingleTrancheUserSingleStakeDetailsTrA(address _user, uint256 _trancheNum, uint256 _num) external view override returns (uint256, uint256) {\\n        return (stakingDetailsTrancheA[_user][_trancheNum][_num].startTime, stakingDetailsTrancheA[_user][_trancheNum][_num].amount);\\n    }\\n\\n    /**\\n     * @dev set staking details for tranche B holders, with number, amount and time\\n     * @param _trancheNum tranche number\\n     * @param _account user's account\\n     * @param _stkNum staking detail counter\\n     * @param _amount amount of tranche B tokens\\n     * @param _time time to be considered the deposit\\n     */\\n    function setTrBStakingDetails(uint256 _trancheNum, address _account, uint256 _stkNum, uint256 _amount, uint256 _time) external override onlyAdmins {\\n        stakeCounterTrB[_account][_trancheNum] = _stkNum;\\n        StakingDetails storage details = stakingDetailsTrancheB[_account][_trancheNum][_stkNum];\\n        details.startTime = _time;\\n        details.amount = _amount; \\n    }\\n    \\n    /**\\n     * @dev when redemption occurs on tranche B, removing tranche B tokens from staking information (FIFO logic)\\n     * @param _trancheNum tranche number\\n     * @param _amount amount of redeemed tokens\\n     */\\n    function decreaseTrancheBTokenFromStake(uint256 _trancheNum, uint256 _amount) internal {\\n        uint256 senderCounter = stakeCounterTrB[msg.sender][_trancheNum];\\n        uint256 tmpAmount = _amount;\\n        for (uint i = 1; i <= senderCounter; i++) {\\n            StakingDetails storage details = stakingDetailsTrancheB[msg.sender][_trancheNum][i];\\n            if (details.amount > 0) {\\n                if (details.amount <= tmpAmount) {\\n                    tmpAmount = tmpAmount.sub(details.amount);\\n                    details.amount = 0;\\n                    // delete stakingDetailsTrancheB[msg.sender][_trancheNum][i];\\n                    // update details number\\n                    // stakeCounterTrB[msg.sender][_trancheNum] = stakeCounterTrB[msg.sender][_trancheNum].sub(1);\\n                } else {\\n                    details.amount = details.amount.sub(tmpAmount);\\n                    tmpAmount = 0;\\n                }\\n            }\\n            if (tmpAmount == 0)\\n                break;\\n        }\\n    }\\n\\n    function getSingleTrancheUserStakeCounterTrB(address _user, uint256 _trancheNum) external view override returns (uint256) {\\n        return stakeCounterTrB[_user][_trancheNum];\\n    }\\n\\n    function getSingleTrancheUserSingleStakeDetailsTrB(address _user, uint256 _trancheNum, uint256 _num) external view override returns (uint256, uint256) {\\n        return (stakingDetailsTrancheB[_user][_trancheNum][_num].startTime, stakingDetailsTrancheB[_user][_trancheNum][_num].amount);\\n    }\\n\\n    /**\\n     * @dev buy Tranche A Tokens\\n     * @param _trancheNum tranche number\\n     * @param _amount amount of stable coins sent by buyer\\n     */\\n    function buyTrancheAToken(uint256 _trancheNum, uint256 _amount) external payable nonReentrant {\\n        require(trancheDepositEnabled[_trancheNum], \\\"JAave: tranche deposit disabled\\\");\\n        uint256 prevAaveTokenBalance = getTokenBalance(trancheAddresses[_trancheNum].aTokenAddress);\\n        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressProvider).getLendingPool();\\n        address _tokenAddr = trancheAddresses[_trancheNum].buyerCoinAddress;\\n        if (_tokenAddr == ETH_ADDR) {\\n            require(msg.value == _amount, \\\"JAave: msg.value not equal to amount\\\");\\n            IWETHGateway(wethGatewayAddress).depositETH{value: msg.value}();\\n            _tokenAddr = wrappedEthAddress;\\n        } else {\\n            // check approve\\n            require(IERC20Upgradeable(_tokenAddr).allowance(msg.sender, address(this)) >= _amount, \\\"JAave: allowance failed buying tranche A\\\");\\n            SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_tokenAddr), msg.sender, address(this), _amount);\\n        }\\n\\n        SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_tokenAddr), lendingPool, _amount);\\n        ILendingPool(lendingPool).deposit(_tokenAddr, _amount, address(this), AAVE_REFERRAL_CODE);\\n        \\n        uint256 newAaveTokenBalance = getTokenBalance(trancheAddresses[_trancheNum].aTokenAddress);\\n        setTrancheAExchangeRate(_trancheNum);\\n        uint256 taAmount;\\n        if (newAaveTokenBalance > prevAaveTokenBalance) {\\n            // set amount of tokens to be minted calculate taToken amount via taToken price\\n            // if normalized price in tranche A price, everything should be scaled to 1e18 \\n            uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\\n            uint256 normAmount = _amount.mul(10 ** diffDec);\\n            taAmount = normAmount.mul(1e18).div(trancheParameters[_trancheNum].storedTrancheAPrice);\\n            //Mint trancheA tokens and send them to msg.sender and notify to incentive controller BEFORE totalSupply updates\\n            IIncentivesController(incentivesControllerAddress).trancheANewEnter(msg.sender, trancheAddresses[_trancheNum].ATrancheAddress);\\n            IJTrancheTokens(trancheAddresses[_trancheNum].ATrancheAddress).mint(msg.sender, taAmount);\\n        }\\n\\n        stakeCounterTrA[msg.sender][_trancheNum] = stakeCounterTrA[msg.sender][_trancheNum].add(1);\\n        StakingDetails storage details = stakingDetailsTrancheA[msg.sender][_trancheNum][stakeCounterTrA[msg.sender][_trancheNum]];\\n        details.startTime = block.timestamp;\\n        details.amount = taAmount;\\n\\n        lastActivity[msg.sender] = block.number;\\n        emit TrancheATokenMinted(_trancheNum, msg.sender, _amount, taAmount);\\n    }\\n\\n    /**\\n     * @dev redeem Tranche A Tokens\\n     * @param _trancheNum tranche number\\n     * @param _amount amount of stable coins sent by buyer\\n     */\\n    function redeemTrancheAToken(uint256 _trancheNum, uint256 _amount) external nonReentrant {\\n        require((block.number).sub(lastActivity[msg.sender]) >= redeemTimeout, \\\"JAave: redeem timeout not expired on tranche A\\\");\\n        // check approve\\n        require(IERC20Upgradeable(trancheAddresses[_trancheNum].ATrancheAddress).allowance(msg.sender, address(this)) >= _amount, \\\"JAave: allowance failed redeeming tranche A\\\");\\n        //Transfer DAI from msg.sender to protocol;\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(trancheAddresses[_trancheNum].ATrancheAddress), msg.sender, address(this), _amount);\\n\\n        setTrancheAExchangeRate(_trancheNum);\\n\\n        uint256 taAmount = _amount.mul(trancheParameters[_trancheNum].storedTrancheAPrice).div(1e18);\\n        // if normalized price in tranche A price, everything should be scaled to 1e18 \\n        uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\\n        uint256 normAmount = taAmount.div(10 ** diffDec);\\n        // not sure about this, but it should be checked\\n        uint256 taTotAmount = getTrAValue(_trancheNum);\\n        if (normAmount > taTotAmount)\\n            normAmount = taTotAmount;\\n\\n        uint256 userAmount = normAmount.mul(trancheParameters[_trancheNum].redemptionPercentage).div(PERCENT_DIVIDER);\\n        aaveWithdraw(trancheAddresses[_trancheNum].buyerCoinAddress, userAmount, msg.sender);\\n        uint256 feesAmount = normAmount.sub(userAmount);\\n        if (feesAmount > 0)\\n            aaveWithdraw(trancheAddresses[_trancheNum].buyerCoinAddress, feesAmount, feesCollectorAddress);\\n        \\n        // claim and transfer rewards to msg.sender. Be sure to wait for this function to be completed! \\n        bool rewClaimCompleted = IIncentivesController(incentivesControllerAddress).claimRewardsAllMarkets(msg.sender);\\n\\n        // decrease tokens after claiming rewards\\n        if (rewClaimCompleted && _amount > 0)\\n            decreaseTrancheATokenFromStake(_trancheNum, _amount);\\n\\n        IJTrancheTokens(trancheAddresses[_trancheNum].ATrancheAddress).burn(_amount);\\n        lastActivity[msg.sender] = block.number;\\n        emit TrancheATokenRedemption(_trancheNum, msg.sender, _amount, userAmount, feesAmount);\\n    }\\n\\n    /**\\n     * @dev buy Tranche B Tokens\\n     * @param _trancheNum tranche number\\n     * @param _amount amount of stable coins sent by buyer\\n     */\\n    function buyTrancheBToken(uint256 _trancheNum, uint256 _amount) external payable nonReentrant {\\n        require(trancheDepositEnabled[_trancheNum], \\\"JAave: tranche deposit disabled\\\");\\n        // refresh value for tranche A\\n        setTrancheAExchangeRate(_trancheNum);\\n        // get tranche B exchange rate\\n        // if normalized price in tranche B price, everything should be scaled to 1e18 \\n        uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\\n        uint256 normAmount = _amount.mul(10 ** diffDec);\\n        uint256 tbAmount = normAmount.mul(1e18).div(getTrancheBExchangeRate(_trancheNum, _amount));\\n        uint256 prevAaveTokenBalance = getTokenBalance(trancheAddresses[_trancheNum].aTokenAddress);\\n        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressProvider).getLendingPool();\\n        address _tokenAddr = trancheAddresses[_trancheNum].buyerCoinAddress;\\n        if (_tokenAddr == ETH_ADDR) {\\n            require(msg.value == _amount, \\\"JAave: msg.value not equal to amount\\\");\\n            IWETHGateway(wethGatewayAddress).depositETH{value: msg.value}();\\n            _tokenAddr = wrappedEthAddress;\\n        } else {\\n            // check approve\\n            require(IERC20Upgradeable(_tokenAddr).allowance(msg.sender, address(this)) >= _amount, \\\"JAave: allowance failed buying tranche B\\\");\\n            SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_tokenAddr), msg.sender, address(this), _amount);\\n        }\\n\\n        SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_tokenAddr), lendingPool, _amount);\\n        ILendingPool(lendingPool).deposit(_tokenAddr, _amount, address(this), AAVE_REFERRAL_CODE);\\n\\n        uint256 newAaveTokenBalance = getTokenBalance(trancheAddresses[_trancheNum].aTokenAddress);\\n        if (newAaveTokenBalance > prevAaveTokenBalance) {\\n            //Mint trancheB tokens and send them to msg.sender and notify to incentive controller BEFORE totalSupply updates\\n            IIncentivesController(incentivesControllerAddress).trancheBNewEnter(msg.sender, trancheAddresses[_trancheNum].BTrancheAddress);\\n            IJTrancheTokens(trancheAddresses[_trancheNum].BTrancheAddress).mint(msg.sender, tbAmount);\\n        } else \\n            tbAmount = 0;\\n\\n        stakeCounterTrB[msg.sender][_trancheNum] = stakeCounterTrB[msg.sender][_trancheNum].add(1);\\n        StakingDetails storage details = stakingDetailsTrancheB[msg.sender][_trancheNum][stakeCounterTrB[msg.sender][_trancheNum]];\\n        details.startTime = block.timestamp;\\n        details.amount = tbAmount; \\n\\n        lastActivity[msg.sender] = block.number;\\n        emit TrancheBTokenMinted(_trancheNum, msg.sender, _amount, tbAmount);\\n    }\\n\\n    /**\\n     * @dev redeem Tranche B Tokens\\n     * @param _trancheNum tranche number\\n     * @param _amount amount of stable coins sent by buyer\\n     */\\n    function redeemTrancheBToken(uint256 _trancheNum, uint256 _amount) external nonReentrant {\\n        require((block.number).sub(lastActivity[msg.sender]) >= redeemTimeout, \\\"JAave: redeem timeout not expired on tranche B\\\");\\n        // check approve\\n        require(IERC20Upgradeable(trancheAddresses[_trancheNum].BTrancheAddress).allowance(msg.sender, address(this)) >= _amount, \\\"JAave: allowance failed redeeming tranche B\\\");\\n        //Transfer DAI from msg.sender to protocol;\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(trancheAddresses[_trancheNum].BTrancheAddress), msg.sender, address(this), _amount);\\n\\n        // update tranche A price\\n        setTrancheAExchangeRate(_trancheNum);\\n        // get tranche B exchange rate\\n        uint256 tbAmount = _amount.mul(getTrancheBExchangeRate(_trancheNum, 0)).div(1e18);\\n        uint256 diffDec = uint256(18).sub(uint256(trancheParameters[_trancheNum].underlyingDecimals));\\n        uint256 normAmount = tbAmount.div(10 ** diffDec);\\n        // not sure about this, but it should be checked\\n        uint256 tbTotAmount = getTrBValue(_trancheNum);\\n        if (normAmount > tbTotAmount)\\n            normAmount = tbTotAmount;\\n\\n        uint256 userAmount = normAmount.mul(trancheParameters[_trancheNum].redemptionPercentage).div(PERCENT_DIVIDER);\\n        aaveWithdraw(trancheAddresses[_trancheNum].buyerCoinAddress, userAmount, msg.sender);\\n        uint256 feesAmount = normAmount.sub(userAmount);\\n        if (feesAmount > 0)\\n            aaveWithdraw(trancheAddresses[_trancheNum].buyerCoinAddress, feesAmount, feesCollectorAddress);\\n\\n        // claim and transfer rewards to msg.sender. Be sure to wait for this function to be completed! \\n        bool rewClaimCompleted = IIncentivesController(incentivesControllerAddress).claimRewardsAllMarkets(msg.sender);\\n\\n        // decrease tokens after claiming rewards\\n        if (rewClaimCompleted && _amount > 0)\\n            decreaseTrancheBTokenFromStake(_trancheNum, _amount);\\n\\n        IJTrancheTokens(trancheAddresses[_trancheNum].BTrancheAddress).burn(_amount);\\n        lastActivity[msg.sender] = block.number;\\n        emit TrancheBTokenRedemption(_trancheNum, msg.sender, _amount, userAmount, feesAmount);\\n    }\\n\\n    /**\\n     * @dev get every token balance in this contract\\n     * @param _tokenContract token contract address\\n     */\\n    function getTokenBalance(address _tokenContract) public view returns (uint256) {\\n        return IERC20Upgradeable(_tokenContract).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev get eth balance on this contract\\n     */\\n    function getEthBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev transfer tokens in this contract to fees collector contract\\n     * @param _tokenContract token contract address\\n     * @param _amount token amount to be transferred \\n     */\\n    function transferTokenToFeesCollector(address _tokenContract, uint256 _amount) external onlyAdmins {\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_tokenContract), feesCollectorAddress, _amount);\\n    }\\n\\n    /**\\n     * @dev transfer ethers in this contract to fees collector contract\\n     * @param _amount ethers amount to be transferred \\n     */\\n    function withdrawEthToFeesCollector(uint256 _amount) external onlyAdmins {\\n        TransferETHHelper.safeTransferETH(feesCollectorAddress, _amount);\\n    }\\n\\n    /**\\n     * @dev get token rewards amount\\n     * @return amount of unclaimed tokens\\n     */\\n    function getAaveUnclaimedRewards() public view returns(uint256) {\\n        return IAaveIncentivesController(aaveIncentiveControllerAddress).getUserUnclaimedRewards(address(this));\\n    }\\n\\n    /**\\n     * @dev claim token rewards from all assets in protocol and transfer them to fees collector\\n     */\\n    function claimAaveRewards(/*address _rewardToken, uint256 _amount*/) external {\\n        address[] memory assets = new address[](tranchePairsCounter);\\n        for (uint256 i = 0; i < tranchePairsCounter; i++) {\\n            assets[i] = trancheAddresses[i].aTokenAddress;\\n        }\\n\\n        uint256 claimableRewards = getAaveUnclaimedRewards();\\n        if (claimableRewards > 0)\\n            IAaveIncentivesController(aaveIncentiveControllerAddress).claimRewards(assets, claimableRewards, feesCollectorAddress);\\n    }\\n\\n    /**\\n     * @dev claim token rewards from a single assets (aToken) and transfer them to fees collector\\n     * @param _assetToken asset token address (aToken)\\n     * @param _amount amount of rewards token to claim \\n     */\\n    function claimAaveRewardsSingleAsset(address _assetToken, uint256 _amount) external {\\n        address[] memory assets = new address[](1);\\n        assets[0] = _assetToken;\\n        if (_amount > 0)\\n            IAaveIncentivesController(aaveIncentiveControllerAddress).claimRewards(assets, _amount, feesCollectorAddress);\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/IWETHGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\ninterface IWETHGateway {\\n  function depositETH() external payable;\\n  function withdrawETH(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n// pragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\n//import {ILendingPoolAddressesProvider} from '../aaveContracts/interfaces/ILendingPoolAddressesProvider.sol';\\nimport {DataTypes} from './DataTypes.sol';\\n//import {DataTypes} from '../aaveContracts/protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/IJTranchesDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * Created on 2021-01-15\\n * @summary: JProtocol Interface\\n * @author: Jibrel Team\\n */\\npragma solidity 0.8.8;\\n\\ninterface IJTranchesDeployer {\\n    function deployNewTrancheATokens(string memory _nameA, string memory _symbolA, uint256 _trNum) external returns (address);\\n    function deployNewTrancheBTokens(string memory _nameB, string memory _symbolB, uint256 _trNum) external returns (address);\\n}\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/IJTrancheTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * Created on 2021-01-16\\n * @summary: JTranches Interface\\n * @author: Jibrel Team\\n */\\npragma solidity 0.8.8;\\n\\ninterface IJTrancheTokens {\\n    function mint(address account, uint256 value) external;\\n    function burn(uint256 value) external;\\n}\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/IJAdminTools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * Created on 2021-05-16\\n * @summary: Admin Tools Interface\\n * @author: Jibrel Team\\n */\\npragma solidity 0.8.8;\\n\\ninterface IJAdminTools {\\n    function isAdmin(address account) external view returns (bool);\\n    function addAdmin(address account) external;\\n    function removeAdmin(address account) external;\\n    function renounceAdmin() external;\\n\\n    event AdminAdded(address account);\\n    event AdminRemoved(address account);\\n}\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/IJAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\ninterface IJAave {\\n    event TrancheAddedToProtocol(uint256 trancheNum, address trancheA, address trancheB);\\n    event TrancheATokenMinted(uint256 trancheNum, address buyer, uint256 amount, uint256 taAmount);\\n    event TrancheBTokenMinted(uint256 trancheNum, address buyer, uint256 amount, uint256 tbAmount);\\n    event TrancheATokenRedemption(uint256 trancheNum, address burner, uint256 amount, uint256 userAmount, uint256 feesAmount);\\n    event TrancheBTokenRedemption(uint256 trancheNum, address burner, uint256 amount, uint256 userAmount, uint256 feesAmount);\\n\\n    function getSingleTrancheUserStakeCounterTrA(address _user, uint256 _trancheNum) external view returns (uint256);\\n    function getSingleTrancheUserStakeCounterTrB(address _user, uint256 _trancheNum) external view returns (uint256);\\n    function getSingleTrancheUserSingleStakeDetailsTrA(address _user, uint256 _trancheNum, uint256 _num) external view returns (uint256, uint256);\\n    function getSingleTrancheUserSingleStakeDetailsTrB(address _user, uint256 _trancheNum, uint256 _num) external view returns (uint256, uint256);\\n    function getIncentivesControllerAddress() external view returns (address);\\n    function setIncentivesControllerAddress(address _incentivesController) external;\\n    function setTrAStakingDetails(uint256 _trancheNum, address _account, uint256 _stkNum, uint256 _amount, uint256 _time) external;\\n    function setTrBStakingDetails(uint256 _trancheNum, address _account, uint256 _stkNum, uint256 _amount, uint256 _time) external;\\n}\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/IIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * Created on 2021-06-18\\n * @summary: Markets Interface\\n * @author: Jibrel Team\\n */\\npragma solidity 0.8.8;\\n\\ninterface IIncentivesController {\\n    function trancheANewEnter(address account, address trancheA) external;\\n    function trancheBNewEnter(address account, address trancheA) external;\\n\\n    function claimRewardsAllMarkets(address _account) external returns (bool);\\n    function claimRewardSingleMarketTrA(uint256 _idxMarket, uint256 _distCount, address _account) external;\\n    function claimRewardSingleMarketTrB(uint256 _idxMarket, uint256 _distCount, address _account) external;\\n}\\n\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/IAaveProtocolDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.8;\\n// pragma experimental ABIEncoderV2;\\n\\nabstract contract IAaveProtocolDataProvider {\\n\\n  struct TokenData {\\n    string symbol;\\n    address tokenAddress;\\n  }\\n\\n  function getAllReservesTokens() external virtual view returns (TokenData[] memory);\\n\\n  function getAllATokens() external virtual view returns (TokenData[] memory);\\n\\n  function getReserveConfigurationData(address asset)\\n    external virtual\\n    view\\n    returns (\\n      uint256 decimals,\\n      uint256 ltv,\\n      uint256 liquidationThreshold,\\n      uint256 liquidationBonus,\\n      uint256 reserveFactor,\\n      bool usageAsCollateralEnabled,\\n      bool borrowingEnabled,\\n      bool stableBorrowRateEnabled,\\n      bool isActive,\\n      bool isFrozen\\n    );\\n\\n  function getReserveData(address asset)\\n    external virtual\\n    view\\n    returns (\\n      uint256 availableLiquidity,\\n      uint256 totalStableDebt,\\n      uint256 totalVariableDebt,\\n      uint256 liquidityRate,\\n      uint256 variableBorrowRate,\\n      uint256 stableBorrowRate,\\n      uint256 averageStableBorrowRate,\\n      uint256 liquidityIndex,\\n      uint256 variableBorrowIndex,\\n      uint40 lastUpdateTimestamp\\n    );\\n\\n  function getUserReserveData(address asset, address user)\\n    external virtual\\n    view\\n    returns (\\n      uint256 currentATokenBalance,\\n      uint256 currentStableDebt,\\n      uint256 currentVariableDebt,\\n      uint256 principalStableDebt,\\n      uint256 scaledVariableDebt,\\n      uint256 stableBorrowRate,\\n      uint256 liquidityRate,\\n      uint40 stableRateLastUpdated,\\n      bool usageAsCollateralEnabled\\n    );\\n\\n  function getReserveTokensAddresses(address asset)\\n    external virtual\\n    view\\n    returns (\\n      address aTokenAddress,\\n      address stableDebtTokenAddress,\\n      address variableDebtTokenAddress\\n    );\\n}\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n// pragma experimental ABIEncoderV2;\\n\\nimport {IAaveDistributionManager} from './IAaveDistributionManager.sol';\\n\\ninterface IAaveIncentivesController is IAaveDistributionManager {\\n  \\n  event RewardsAccrued(address indexed user, uint256 amount);\\n  \\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n  * @dev for backward compatibility with previous implementation of the Incentives controller\\n  */\\n  function REWARD_TOKEN() external view returns (address);\\n}\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/IAaveDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.8;\\n// pragma experimental ABIEncoderV2;\\n\\nimport {DistributionTypes} from './DistributionTypes.sol';\\n\\ninterface IAaveDistributionManager {\\n  \\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n  event DistributionEndUpdated(uint256 newDistributionEnd);\\n\\n  /**\\n  * @dev Sets the end date for the distribution\\n  * @param distributionEnd The end date timestamp\\n  **/\\n  function setDistributionEnd(uint256 distributionEnd) external;\\n\\n  /**\\n  * @dev Gets the end date for the distribution\\n  * @return The end of the distribution\\n  **/\\n  function getDistributionEnd() external view returns (uint256);\\n\\n  /**\\n  * @dev for backwards compatibility with the previous DistributionManager used\\n  * @return The end of the distribution\\n  **/\\n  function DISTRIBUTION_END() external view returns(uint256);\\n\\n   /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n   function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n   /**\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n   function getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n}\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/DistributionTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.8;\\n// pragma experimental ABIEncoderV2;\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint104 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/interfaces/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/TransferETHHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferETHHelper {\\n    function safeTransferETH(address _to, uint256 _value) internal {\\n        (bool success,) = _to.call{value:_value}(new bytes(0));\\n        require(success, 'TH ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/TokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\nabstract contract TokenInterface {\\n    function deposit() external virtual payable;\\n    function withdraw(uint256) external virtual;\\n}\\n\"\r\n    },\r\n    \"/Users/himanshugoyal/Documents/DeFi/tranche-aave-protocol/contracts/JAaveStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * Created on 2021-01-16\\n * @summary: Jibrel Aave Tranches Protocol Storage\\n * @author: Jibrel Team\\n */\\npragma solidity 0.8.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract JAaveStorage is OwnableUpgradeable {\\n/* WARNING: NEVER RE-ORDER VARIABLES! Always double-check that new variables are added APPEND-ONLY. Re-ordering variables can permanently BREAK the deployed proxy contract.*/\\n    //address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // mainnet\\n    //address public constant WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C; // kovan\\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint16 public constant AAVE_REFERRAL_CODE = 0;\\n\\n    uint256 public constant PERCENT_DIVIDER = 10000;  // percentage divider\\n\\n    struct TrancheAddresses {\\n        address buyerCoinAddress;       // ETH (ETH_ADDR) or DAI or other supported tokens\\n        address aTokenAddress;          // aETH or aDAI or other aToken\\n        address ATrancheAddress;\\n        address BTrancheAddress;\\n    }\\n\\n    struct TrancheParameters {\\n        uint256 trancheAFixedPercentage;    // fixed percentage (i.e. 4% = 0.04 * 10^18 = 40000000000000000)\\n        uint256 trancheALastActionBlock;\\n        uint256 storedTrancheAPrice;\\n        uint256 trancheACurrentRPB;\\n        uint16 redemptionPercentage;        // percentage with 2 decimals (divided by 10000, i.e. 95% is 9500)\\n        uint8 underlyingDecimals;\\n    }\\n\\n    address public adminToolsAddress;\\n    address public feesCollectorAddress;\\n    address public tranchesDeployerAddress;\\n    address public lendingPoolAddressProvider;\\n    address public wethGatewayAddress;\\n    address public aaveIncentiveControllerAddress;\\n    address public wrappedEthAddress;\\n\\n    uint256 public tranchePairsCounter;\\n    uint256 public totalBlocksPerYear; \\n    uint32 public redeemTimeout;\\n\\n    mapping(uint256 => TrancheAddresses) public trancheAddresses;\\n    mapping(uint256 => TrancheParameters) public trancheParameters;\\n    // last block number where the user withdrew/deposited tokens\\n    mapping(address => uint256) public lastActivity;\\n    // enabling / disabling tranches for fund deposit\\n    mapping(uint256 => bool) public trancheDepositEnabled;\\n    address public rewardsToken;  // slice rewards\\n}\\n\\n\\ncontract JAaveStorageV2 is JAaveStorage {\\n    struct StakingDetails {\\n        uint256 startTime;\\n        uint256 amount;\\n    }\\n\\n    address public incentivesControllerAddress;\\n\\n    // user => trancheNum => counter\\n    mapping (address => mapping(uint256 => uint256)) public stakeCounterTrA;\\n    mapping (address => mapping(uint256 => uint256)) public stakeCounterTrB;\\n    // user => trancheNum => stakeCounter => struct\\n    mapping (address => mapping (uint256 => mapping (uint256 => StakingDetails))) public stakingDetailsTrancheA;\\n    mapping (address => mapping (uint256 => mapping (uint256 => StakingDetails))) public stakingDetailsTrancheB;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheATokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheATokenRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trancheA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trancheB\",\"type\":\"address\"}],\"name\":\"TrancheAddedToProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tbAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheBTokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trancheNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesAmount\",\"type\":\"uint256\"}],\"name\":\"TrancheBTokenRedemption\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"AAVE_REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveIncentiveControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_nameA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbolA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nameB\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbolB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fixedRpb\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_underlyingDec\",\"type\":\"uint8\"}],\"name\":\"addTrancheToProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminToolsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTrancheAToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTrancheBToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"calcRPBFromPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAaveRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimAaveRewardsSingleAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollectorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getAaveReserveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAaveUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllATokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct IAaveProtocolDataProvider.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllReservesTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct IAaveProtocolDataProvider.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataProvider\",\"outputs\":[{\"internalType\":\"contract IAaveProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivesControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getSingleTrancheUserSingleStakeDetailsTrA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getSingleTrancheUserSingleStakeDetailsTrB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getSingleTrancheUserStakeCounterTrA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getSingleTrancheUserStakeCounterTrB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTrAValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trANormValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTrBValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTrancheACurrentRPB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"}],\"name\":\"getTrancheAExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"getTrancheBExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tbPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminTools\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tranchesDepl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveIncentiveController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksPerYear\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPoolAddressProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemTrancheAToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemTrancheBToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aaveIncentiveController\",\"type\":\"address\"}],\"name\":\"setAaveIncentiveControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressProviderContract\",\"type\":\"address\"}],\"name\":\"setAavePoolAddressProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setBlocksPerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_underlyingDec\",\"type\":\"uint8\"}],\"name\":\"setDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incentivesController\",\"type\":\"address\"}],\"name\":\"setIncentivesControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminTools\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tranchesDepl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveIncentiveController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"name\":\"setNewEnvironment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_blockNum\",\"type\":\"uint32\"}],\"name\":\"setRedemptionTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stkNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTrAStakingDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stkNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTrBStakingDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTrAPercentage\",\"type\":\"uint256\"}],\"name\":\"setTrancheAFixedPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setTrancheDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trancheNum\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_redeemPercent\",\"type\":\"uint16\"}],\"name\":\"setTrancheRedemptionPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethGatewayAddress\",\"type\":\"address\"}],\"name\":\"setWETHGatewayAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeCounterTrA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeCounterTrB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingDetailsTrancheA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingDetailsTrancheB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyerCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ATrancheAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BTrancheAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheDepositEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tranchePairsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trancheAFixedPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trancheALastActionBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storedTrancheAPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trancheACurrentRPB\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"redemptionPercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tranchesDeployerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenToFeesCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethGatewayAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEthToFeesCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedEthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JAave", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}