{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SherBuy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './interfaces/ISherClaim.sol';\\nimport './interfaces/ISherlock.sol';\\n\\n/// @title Buy SHER tokens by staking USDC and paying USDC\\n/// @author Evert Kors\\n/// @dev The goal is to get TVL in Sherlock.sol and raise funds with `receiver`\\n/// @dev Bought SHER tokens are moved to a timelock contract (SherClaim)\\n/// @dev Admin should send factor of 0.01 SHER tokens to the contract, otherwise logic will break.\\ncontract SherBuy is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  error InvalidSender();\\n  error InvalidAmount();\\n  error ZeroArgument();\\n  error InvalidState();\\n  error SoldOut();\\n\\n  /// @notice Emitted when SHER purchase is executed\\n  /// @param buyer Account that bought SHER tokens\\n  /// @param amount How much SHER tokens are bought\\n  /// @param staked How much USDC is staked\\n  /// @param paid How much USDC is paid\\n  event Purchase(address indexed buyer, uint256 amount, uint256 staked, uint256 paid);\\n\\n  // The staking period used for the staking USDC\\n  uint256 public constant PERIOD = 26 weeks;\\n  // Allows purchases in steps of 0.01 SHER\\n  uint256 internal constant SHER_STEPS = 10**16;\\n  // Allows stakeRate and buyRate with steps of 0.01 USDC\\n  uint256 internal constant RATE_STEPS = 10**4;\\n  // SHER has 18 decimals\\n  uint256 internal constant SHER_DECIMALS = 10**18;\\n\\n  // SHER token address (18 decimals)\\n  IERC20 public immutable sher;\\n  // USDC token address (6 decimals)\\n  IERC20 public immutable usdc;\\n\\n  // 10**6 means for every 1 SHER token you want to buy, you will stake 1 USDC (10**7 means 1 SHER for 10 USDC)\\n  uint256 public immutable stakeRate;\\n  // 10**6 means for every 1 SHER token you want to buy, you will pay 1 USDC (10**7 means 1 SHER for 10 USDC)\\n  uint256 public immutable buyRate;\\n  // The `Sherlock.sol` contract that is a ERC721\\n  ISherlock public immutable sherlockPosition;\\n  // Address receiving the USDC payments\\n  address public immutable receiver;\\n  // Contract to claim SHER at\\n  ISherClaim public immutable sherClaim;\\n\\n  /// @notice Construct BuySher contract\\n  /// @param _sher ERC20 contract for SHER token\\n  /// @param _usdc ERC20 contract for USDC token\\n  /// @param _stakeRate Rate at which SHER tokens translate to the amount of USDC needed to be staked\\n  /// @param _buyRate Rate at which SHER tokens translate to the amount of USDC needed to be paid\\n  /// @param _sherlockPosition ERC721 contract of Sherlock positions\\n  /// @param _receiver Address that receives USDC from purchases\\n  /// @param _sherClaim Contract that keeps the SHER timelocked\\n  constructor(\\n    IERC20 _sher,\\n    IERC20 _usdc,\\n    uint256 _stakeRate,\\n    uint256 _buyRate,\\n    ISherlock _sherlockPosition,\\n    address _receiver,\\n    ISherClaim _sherClaim\\n  ) {\\n    if (address(_sher) == address(0)) revert ZeroArgument();\\n    if (address(_usdc) == address(0)) revert ZeroArgument();\\n    if (_stakeRate == 0) revert ZeroArgument();\\n    if (_stakeRate % RATE_STEPS != 0) revert InvalidState();\\n    if (_buyRate == 0) revert ZeroArgument();\\n    if (_buyRate % RATE_STEPS != 0) revert InvalidState();\\n    if (address(_sherlockPosition) == address(0)) revert ZeroArgument();\\n    if (_receiver == address(0)) revert ZeroArgument();\\n    if (address(_sherClaim) == address(0)) revert ZeroArgument();\\n\\n    // Verify if PERIOD is active\\n    // Theoretically this period can be disabled during the lifetime of this contract, which will cause issues\\n    if (_sherlockPosition.stakingPeriods(PERIOD) == false) revert InvalidState();\\n\\n    sher = _sher;\\n    usdc = _usdc;\\n    stakeRate = _stakeRate;\\n    buyRate = _buyRate;\\n    sherlockPosition = _sherlockPosition;\\n    receiver = _receiver;\\n    sherClaim = _sherClaim;\\n\\n    // Do max approve in constructor as this contract will not hold any USDC\\n    usdc.safeIncreaseAllowance(address(sherlockPosition), type(uint256).max);\\n  }\\n\\n  /// @notice Check if the liquidity event is active\\n  /// @dev SHER tokens can run out while event is active\\n  /// @return True if the liquidity event is active\\n  function active() public view returns (bool) {\\n    // The claim contract will become active once the liquidity event is inactive\\n    return block.timestamp < sherClaim.newEntryDeadline();\\n  }\\n\\n  /// @notice View the capital requirements needed to buy up until `_sherAmountWant`\\n  /// @dev Will adjust to remaining SHER if `_sherAmountWant` exceeds that\\n  /// @return sherAmount Will adjust to remining SHER if `_sherAmountWant` exceeds that\\n  /// @return stake How much USDC needs to be staked for `PERIOD` of time to buy `sherAmount` SHER\\n  /// @return price How much USDC needs to be paid to buy `sherAmount` SHER\\n  function viewCapitalRequirements(uint256 _sherAmountWant)\\n    public\\n    view\\n    returns (\\n      uint256 sherAmount,\\n      uint256 stake,\\n      uint256 price\\n    )\\n  {\\n    // Only allow if liquidity event is active\\n    if (active() == false) revert InvalidState();\\n    // Zero isn't allowed\\n    if (_sherAmountWant == 0) revert ZeroArgument();\\n\\n    // View how much SHER is still available to be sold\\n    uint256 available = sher.balanceOf(address(this));\\n    // If remaining SHER is 0 it's sold out\\n    if (available == 0) revert SoldOut();\\n\\n    // Use remaining SHER if it's less then `_sherAmountWant`, otherwise go for `_sherAmountWant`\\n    // Remaining SHER will only be assigned on the last sale of this contract, `SoldOut()` error will be thrown after\\n    // sherAmount is not able to be zero as both 'available' and '_sherAmountWant' will be bigger than 0\\n    sherAmount = available < _sherAmountWant ? available : _sherAmountWant;\\n    // Only allows SHER amounts with certain precision steps\\n    // To ensure there is no rounding error at loss for the contract in stake / price calculation\\n    // Theoretically, if `available` is used, the function can fail if '% SHER_STEPS != 0' will be true\\n    // This can be caused by a griefer sending a small amount of SHER to the contract\\n    // Realistically, no SHER tokens will be on the market when this function is active\\n    // So it can only be caused if the admin sends too small amounts (documented at top of file with @dev)\\n    if (sherAmount % SHER_STEPS != 0) revert InvalidAmount();\\n\\n    // Calculate how much USDC needs to be staked to buy `sherAmount`\\n    stake = (sherAmount * stakeRate) / SHER_DECIMALS;\\n    // Calculate how much USDC needs to be paid to buy `sherAmount`\\n    price = (sherAmount * buyRate) / SHER_DECIMALS;\\n  }\\n\\n  /// @notice Buy up until `_sherAmountWant`\\n  /// @param _sherAmountWant The maximum amount of SHER the user wants to buy\\n  /// @dev Bought SHER tokens are moved to a timelock contract (SherClaim)\\n  /// @dev Will revert if liquidity event is inactive because of the viewCapitalRequirements call\\n  function execute(uint256 _sherAmountWant) external nonReentrant {\\n    // Calculate the capital requirements\\n    // Check how much SHER can actually be bought\\n    (uint256 sherAmount, uint256 stake, uint256 price) = viewCapitalRequirements(_sherAmountWant);\\n\\n    // Transfer usdc from user to this, for staking (max is approved in constructor)\\n    usdc.safeTransferFrom(msg.sender, address(this), stake);\\n    // Transfer usdc from user to receiver, for payment of the SHER\\n    usdc.safeTransferFrom(msg.sender, receiver, price);\\n\\n    // Stake usdc and send NFT to user\\n    sherlockPosition.initialStake(stake, PERIOD, msg.sender);\\n    // Increase allowance for SherClaim by the amount of SHER tokens bought\\n    sher.safeIncreaseAllowance(address(sherClaim), sherAmount);\\n    // Add bought SHER tokens to timelock for user\\n    sherClaim.add(msg.sender, sherAmount);\\n\\n    // Emit event about the purchase\\n    emit Purchase(msg.sender, sherAmount, stake, price);\\n  }\\n\\n  /// @notice Rescue remaining ERC20 tokens when liquidity event is inactive\\n  /// @param _tokens Array of ERC20 tokens to rescue\\n  /// @dev Can only be called by `receiver`\\n  function sweepTokens(IERC20[] memory _tokens) external {\\n    if (msg.sender != receiver) revert InvalidSender();\\n    if (active()) revert InvalidState();\\n\\n    // Loops through the extra tokens (ERC20) provided and sends all of them to the sender address\\n    for (uint256 i; i < _tokens.length; i++) {\\n      IERC20 token = _tokens[i];\\n      token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\ninterface ISherClaim {\\n  error InvalidAmount();\\n  error ZeroArgument();\\n  error InvalidState();\\n\\n  // Event emitted when tokens have been added to the timelock\\n  event Add(address indexed sender, address indexed account, uint256 amount);\\n  // Event emitted when tokens have been claimed\\n  event Claim(address indexed account, uint256 amount);\\n\\n  function add(address _user, uint256 _amount) external;\\n\\n  function newEntryDeadline() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport './ISherlockStake.sol';\\nimport './ISherlockGov.sol';\\nimport './ISherlockPayout.sol';\\nimport './ISherlockStrategy.sol';\\n\\ninterface ISherlock is ISherlockStake, ISherlockGov, ISherlockPayout, ISherlockStrategy, IERC721 {\\n  // msg.sender is not authorized to call this function\\n  error Unauthorized();\\n\\n  // An address or other value passed in is equal to zero (and shouldn't be)\\n  error ZeroArgument();\\n\\n  // Occurs when a value already holds the desired property, or is not whitelisted\\n  error InvalidArgument();\\n\\n  // Required conditions are not true/met\\n  error InvalidConditions();\\n\\n  // If the SHER tokens held in a contract are not the value they are supposed to be\\n  error InvalidSherAmount(uint256 expected, uint256 actual);\\n\\n  // Checks the ERC-721 functions _exists() to see if an NFT ID actually exists and errors if not\\n  error NonExistent();\\n\\n  event ArbRestaked(uint256 indexed tokenID, uint256 reward);\\n\\n  event Restaked(uint256 indexed tokenID);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\n/// @title Sherlock core interface for stakers\\n/// @author Evert Kors\\ninterface ISherlockStake {\\n  /// @notice View the current lockup end timestamp of `_tokenID`\\n  /// @return Timestamp when NFT position unlocks\\n  function lockupEnd(uint256 _tokenID) external view returns (uint256);\\n\\n  /// @notice View the current SHER reward of `_tokenID`\\n  /// @return Amount of SHER rewarded to owner upon reaching the end of the lockup\\n  function sherRewards(uint256 _tokenID) external view returns (uint256);\\n\\n  /// @notice View the current token balance claimable upon reaching end of the lockup\\n  /// @return Amount of tokens assigned to owner when unstaking position\\n  function tokenBalanceOf(uint256 _tokenID) external view returns (uint256);\\n\\n  /// @notice View the current TVL for all stakers\\n  /// @return Total amount of tokens staked\\n  /// @dev Adds principal + strategy + premiums\\n  /// @dev Will calculate the most up to date value for each piece\\n  function totalTokenBalanceStakers() external view returns (uint256);\\n\\n  /// @notice Stakes `_amount` of tokens and locks up for `_period` seconds, `_receiver` will receive the NFT receipt\\n  /// @param _amount Amount of tokens to stake\\n  /// @param _period Period of time, in seconds, to lockup your funds\\n  /// @param _receiver Address that will receive the NFT representing the position\\n  /// @return _id ID of the position\\n  /// @return _sher Amount of SHER tokens to be released to this ID after `_period` ends\\n  /// @dev `_period` needs to be whitelisted\\n  function initialStake(\\n    uint256 _amount,\\n    uint256 _period,\\n    address _receiver\\n  ) external returns (uint256 _id, uint256 _sher);\\n\\n  /// @notice Redeem NFT `_id` and receive `_amount` of tokens\\n  /// @param _id TokenID of the position\\n  /// @return _amount Amount of tokens (USDC) owed to NFT ID\\n  /// @dev Only the owner of `_id` will be able to redeem their position\\n  /// @dev The SHER rewards are sent to the NFT owner\\n  /// @dev Can only be called after lockup `_period` has ended\\n  function redeemNFT(uint256 _id) external returns (uint256 _amount);\\n\\n  /// @notice Owner restakes position with ID: `_id` for `_period` seconds\\n  /// @param _id ID of the position\\n  /// @param _period Period of time, in seconds, to lockup your funds\\n  /// @return _sher Amount of SHER tokens to be released to owner address after `_period` ends\\n  /// @dev Only the owner of `_id` will be able to restake their position using this call\\n  /// @dev `_period` needs to be whitelisted\\n  /// @dev Can only be called after lockup `_period` has ended\\n  function ownerRestake(uint256 _id, uint256 _period) external returns (uint256 _sher);\\n\\n  /// @notice Allows someone who doesn't own the position (an arbitrager) to restake the position for 26 weeks (ARB_RESTAKE_PERIOD)\\n  /// @param _id ID of the position\\n  /// @return _sher Amount of SHER tokens to be released to position owner on expiry of the 26 weeks lockup\\n  /// @return _arbReward Amount of tokens (USDC) sent to caller (the arbitrager) in return for calling the function\\n  /// @dev Can only be called after lockup `_period` is more than 2 weeks in the past (assuming ARB_RESTAKE_WAIT_TIME is 2 weeks)\\n  /// @dev Max 20% (ARB_RESTAKE_MAX_PERCENTAGE) of tokens associated with a position are used to incentivize arbs (x)\\n  /// @dev During a 2 week period the reward ratio will move from 0% to 100% (* x)\\n  function arbRestake(uint256 _id) external returns (uint256 _sher, uint256 _arbReward);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './managers/ISherDistributionManager.sol';\\nimport './managers/ISherlockProtocolManager.sol';\\nimport './managers/ISherlockClaimManager.sol';\\nimport './managers/IStrategyManager.sol';\\n\\n/// @title Sherlock core interface for governance\\n/// @author Evert Kors\\ninterface ISherlockGov {\\n  event ClaimPayout(address receiver, uint256 amount);\\n  event YieldStrategyUpdateWithdrawAllError(bytes error);\\n  event YieldStrategyUpdated(IStrategyManager previous, IStrategyManager current);\\n  event ProtocolManagerUpdated(ISherlockProtocolManager previous, ISherlockProtocolManager current);\\n  event ClaimManagerUpdated(ISherlockClaimManager previous, ISherlockClaimManager current);\\n  event NonStakerAddressUpdated(address previous, address current);\\n  event SherDistributionManagerUpdated(\\n    ISherDistributionManager previous,\\n    ISherDistributionManager current\\n  );\\n\\n  event StakingPeriodEnabled(uint256 period);\\n\\n  event StakingPeriodDisabled(uint256 period);\\n\\n  /// @notice Allows stakers to stake for `_period` of time\\n  /// @param _period Period of time, in seconds,\\n  /// @dev should revert if already enabled\\n  function enableStakingPeriod(uint256 _period) external;\\n\\n  /// @notice Disallow stakers to stake for `_period` of time\\n  /// @param _period Period of time, in seconds,\\n  /// @dev should revert if already disabled\\n  function disableStakingPeriod(uint256 _period) external;\\n\\n  /// @notice View if `_period` is a valid period\\n  /// @return Boolean indicating if period is valid\\n  function stakingPeriods(uint256 _period) external view returns (bool);\\n\\n  /// @notice Update SHER distribution manager contract\\n  /// @param _sherDistributionManager New adddress of the manager\\n  function updateSherDistributionManager(ISherDistributionManager _sherDistributionManager)\\n    external;\\n\\n  /// @notice Deletes the SHER distribution manager altogether (if Sherlock decides to no longer pay out SHER rewards)\\n  function removeSherDistributionManager() external;\\n\\n  /// @notice Read SHER distribution manager\\n  /// @return Address of current SHER distribution manager\\n  function sherDistributionManager() external view returns (ISherDistributionManager);\\n\\n  /// @notice Update address eligible for non staker rewards from protocol premiums\\n  /// @param _nonStakers Address eligible for non staker rewards\\n  function updateNonStakersAddress(address _nonStakers) external;\\n\\n  /// @notice View current non stakers address\\n  /// @return Current non staker address\\n  /// @dev Is able to pull funds out of the contract\\n  function nonStakersAddress() external view returns (address);\\n\\n  /// @notice View current address able to manage protocols\\n  /// @return Protocol manager implemenation\\n  function sherlockProtocolManager() external view returns (ISherlockProtocolManager);\\n\\n  /// @notice Transfer protocol manager implementation address\\n  /// @param _protocolManager new implementation address\\n  function updateSherlockProtocolManager(ISherlockProtocolManager _protocolManager) external;\\n\\n  /// @notice View current address able to pull payouts\\n  /// @return Address able to pull payouts\\n  function sherlockClaimManager() external view returns (ISherlockClaimManager);\\n\\n  /// @notice Transfer claim manager role to different address\\n  /// @param _claimManager New address of claim manager\\n  function updateSherlockClaimManager(ISherlockClaimManager _claimManager) external;\\n\\n  /// @notice Update yield strategy\\n  /// @param _yieldStrategy New address of the strategy\\n  /// @dev try a yieldStrategyWithdrawAll() on old, ignore failure\\n  function updateYieldStrategy(IStrategyManager _yieldStrategy) external;\\n\\n  /// @notice Update yield strategy ignoring current state\\n  /// @param _yieldStrategy New address of the strategy\\n  /// @dev tries a yieldStrategyWithdrawAll() on old strategy, ignore failure\\n  function updateYieldStrategyForce(IStrategyManager _yieldStrategy) external;\\n\\n  /// @notice Read current strategy\\n  /// @return Address of current strategy\\n  /// @dev can never be address(0)\\n  function yieldStrategy() external view returns (IStrategyManager);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockPayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\n/// @title Sherlock interface for payout manager\\n/// @author Evert Kors\\ninterface ISherlockPayout {\\n  /// @notice Initiate a payout of `_amount` to `_receiver`\\n  /// @param _receiver Receiver of payout\\n  /// @param _amount Amount to send\\n  /// @dev only payout manager should call this\\n  /// @dev should pull money out of strategy\\n  function payoutClaim(address _receiver, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './managers/IStrategyManager.sol';\\n\\n/// @title Sherlock core interface for yield strategy\\n/// @author Evert Kors\\ninterface ISherlockStrategy {\\n  /// @notice Deposit `_amount` into active strategy\\n  /// @param _amount Amount of tokens\\n  /// @dev gov only\\n  function yieldStrategyDeposit(uint256 _amount) external;\\n\\n  /// @notice Withdraw `_amount` from active strategy\\n  /// @param _amount Amount of tokens\\n  /// @dev gov only\\n  function yieldStrategyWithdraw(uint256 _amount) external;\\n\\n  /// @notice Withdraw all funds from active strategy\\n  /// @dev gov only\\n  function yieldStrategyWithdrawAll() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/ISherDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IManager.sol';\\n\\ninterface ISherDistributionManager is IManager {\\n  // anyone can just send token to this contract to fund rewards\\n\\n  event Initialized(uint256 maxRewardsEndTVL, uint256 zeroRewardsStartTVL, uint256 maxRewardRate);\\n\\n  /// @notice Caller will receive `_sher` SHER tokens based on `_amount` and `_period`\\n  /// @param _amount Amount of tokens (in USDC) staked\\n  /// @param _period Period of time for stake, in seconds\\n  /// @param _id ID for this NFT position\\n  /// @param _receiver Address that will be linked to this position\\n  /// @return _sher Amount of SHER tokens sent to Sherlock core contract\\n  /// @dev Calling contract will depend on before + after balance diff and return value\\n  /// @dev INCLUDES stake in calculation, function expects the `_amount` to be deposited already\\n  /// @dev If tvl=50 and amount=50, this means it is calculating SHER rewards for the first 50 tokens going in\\n  function pullReward(\\n    uint256 _amount,\\n    uint256 _period,\\n    uint256 _id,\\n    address _receiver\\n  ) external returns (uint256 _sher);\\n\\n  /// @notice Calculates how many `_sher` SHER tokens are owed to a stake position based on `_amount` and `_period`\\n  /// @param _tvl TVL to use for reward calculation (pre-stake TVL)\\n  /// @param _amount Amount of tokens (USDC) staked\\n  /// @param _period Stake period (in seconds)\\n  /// @return _sher Amount of SHER tokens owed to this stake position\\n  /// @dev EXCLUDES `_amount` of stake, this will be added on top of TVL (_tvl is excluding _amount)\\n  /// @dev If tvl=0 and amount=50, it would calculate for the first 50 tokens going in (different from pullReward())\\n  function calcReward(\\n    uint256 _tvl,\\n    uint256 _amount,\\n    uint256 _period\\n  ) external view returns (uint256 _sher);\\n\\n  /// @notice Function used to check if this is the current active distribution manager\\n  /// @return Boolean indicating it's active\\n  /// @dev If inactive the owner can pull all ERC20s and ETH\\n  /// @dev Will be checked by calling the sherlock contract\\n  function isActive() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/ISherlockProtocolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './IManager.sol';\\n\\n/// @title Sherlock core interface for protocols\\n/// @author Evert Kors\\ninterface ISherlockProtocolManager is IManager {\\n  // msg.sender is not authorized to call this function\\n  error Unauthorized();\\n\\n  // If a protocol was never instantiated or was removed and the claim deadline has passed, this error is returned\\n  error ProtocolNotExists(bytes32 protocol);\\n\\n  // When comparing two arrays and the lengths are not equal (but are supposed to be equal)\\n  error UnequalArrayLength();\\n\\n  // If there is not enough balance in the contract for the amount requested (after any requirements are met), this is returned\\n  error InsufficientBalance(bytes32 protocol);\\n\\n  event MinBalance(uint256 previous, uint256 current);\\n\\n  event AccountingError(bytes32 indexed protocol, uint256 amount, uint256 insufficientTokens);\\n\\n  event ProtocolAdded(bytes32 indexed protocol);\\n\\n  event ProtocolRemovedByArb(bytes32 indexed protocol, address arb, uint256 profit);\\n\\n  event ProtocolRemoved(bytes32 indexed protocol);\\n\\n  event ProtocolUpdated(\\n    bytes32 indexed protocol,\\n    bytes32 coverage,\\n    uint256 nonStakers,\\n    uint256 coverageAmount\\n  );\\n\\n  event ProtocolAgentTransfer(bytes32 indexed protocol, address from, address to);\\n\\n  event ProtocolBalanceDeposited(bytes32 indexed protocol, uint256 amount);\\n\\n  event ProtocolBalanceWithdrawn(bytes32 indexed protocol, uint256 amount);\\n\\n  event ProtocolPremiumChanged(bytes32 indexed protocol, uint256 oldPremium, uint256 newPremium);\\n\\n  /// @notice View current amount of all premiums that are owed to stakers\\n  /// @return Premiums claimable\\n  /// @dev Will increase every block\\n  /// @dev base + (now - last_settled) * ps\\n  function claimablePremiums() external view returns (uint256);\\n\\n  /// @notice Transfer current claimable premiums (for stakers) to core Sherlock address\\n  /// @dev Callable by everyone\\n  /// @dev Funds will be transferred to Sherlock core contract\\n  function claimPremiumsForStakers() external;\\n\\n  /// @notice View current protocolAgent of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @return Address able to submit claims\\n  function protocolAgent(bytes32 _protocol) external view returns (address);\\n\\n  /// @notice View current premium of protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Amount of premium `_protocol` pays per second\\n  function premium(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice View current active balance of covered protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Active balance\\n  /// @dev Accrued debt is subtracted from the stored active balance\\n  function activeBalance(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice View seconds of coverage left for `_protocol` before it runs out of active balance\\n  /// @param _protocol Protocol identifier\\n  /// @return Seconds of coverage left\\n  function secondsOfCoverageLeft(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice Add a new protocol to Sherlock\\n  /// @param _protocol Protocol identifier\\n  /// @param _protocolAgent Address able to submit a claim on behalf of the protocol\\n  /// @param _coverage Hash referencing the active coverage agreement\\n  /// @param _nonStakers Percentage of premium payments to nonstakers, scaled by 10**18\\n  /// @param _coverageAmount Max amount claimable by this protocol\\n  /// @dev Adding a protocol allows the `_protocolAgent` to submit a claim\\n  /// @dev Coverage is not started yet as the protocol doesn't pay a premium at this point\\n  /// @dev `_nonStakers` is scaled by 10**18\\n  /// @dev Only callable by governance\\n  function protocolAdd(\\n    bytes32 _protocol,\\n    address _protocolAgent,\\n    bytes32 _coverage,\\n    uint256 _nonStakers,\\n    uint256 _coverageAmount\\n  ) external;\\n\\n  /// @notice Update info regarding a protocol\\n  /// @param _protocol Protocol identifier\\n  /// @param _coverage Hash referencing the active coverage agreement\\n  /// @param _nonStakers Percentage of premium payments to nonstakers, scaled by 10**18\\n  /// @param _coverageAmount Max amount claimable by this protocol\\n  /// @dev Only callable by governance\\n  function protocolUpdate(\\n    bytes32 _protocol,\\n    bytes32 _coverage,\\n    uint256 _nonStakers,\\n    uint256 _coverageAmount\\n  ) external;\\n\\n  /// @notice Remove a protocol from coverage\\n  /// @param _protocol Protocol identifier\\n  /// @dev Before removing a protocol the premium must be 0\\n  /// @dev Removing a protocol basically stops the `_protocolAgent` from being active (can still submit claims until claim deadline though)\\n  /// @dev Pays off debt + sends remaining balance to protocol agent\\n  /// @dev This call should be subject to a timelock\\n  /// @dev Only callable by governance\\n  function protocolRemove(bytes32 _protocol) external;\\n\\n  /// @notice Remove a protocol with insufficient active balance\\n  /// @param _protocol Protocol identifier\\n  function forceRemoveByActiveBalance(bytes32 _protocol) external;\\n\\n  /// @notice Removes a protocol with insufficent seconds of coverage left\\n  /// @param _protocol Protocol identifier\\n  function forceRemoveBySecondsOfCoverage(bytes32 _protocol) external;\\n\\n  /// @notice View minimal balance needed before liquidation can start\\n  /// @return Minimal balance needed\\n  function minActiveBalance() external view returns (uint256);\\n\\n  /// @notice Sets the minimum active balance before an arb can remove a protocol\\n  /// @param _minActiveBalance Minimum balance needed (in USDC)\\n  /// @dev Only gov\\n  function setMinActiveBalance(uint256 _minActiveBalance) external;\\n\\n  /// @notice Set premium of `_protocol` to `_premium`\\n  /// @param _protocol Protocol identifier\\n  /// @param _premium Amount of premium `_protocol` pays per second\\n  /// @dev The value 0 would mean inactive coverage\\n  /// @dev Only callable by governance\\n  function setProtocolPremium(bytes32 _protocol, uint256 _premium) external;\\n\\n  /// @notice Set premium of multiple protocols\\n  /// @param _protocol Array of protocol identifiers\\n  /// @param _premium Array of premium amounts protocols pay per second\\n  /// @dev The value 0 would mean inactive coverage\\n  /// @dev Only callable by governance\\n  function setProtocolPremiums(bytes32[] calldata _protocol, uint256[] calldata _premium) external;\\n\\n  /// @notice Deposits `_amount` of token to the active balance of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens to deposit\\n  /// @dev Approval should be made before calling\\n  function depositToActiveBalance(bytes32 _protocol, uint256 _amount) external;\\n\\n  /// @notice Withdraws `_amount` of token from the active balance of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens to withdraw\\n  /// @dev Only protocol agent is able to withdraw\\n  /// @dev Balance can be withdrawn up until 7 days worth of active balance\\n  function withdrawActiveBalance(bytes32 _protocol, uint256 _amount) external;\\n\\n  /// @notice Transfer protocol agent role\\n  /// @param _protocol Protocol identifier\\n  /// @param _protocolAgent Account able to submit a claim on behalf of the protocol\\n  /// @dev Only the active protocolAgent is able to transfer the role\\n  function transferProtocolAgent(bytes32 _protocol, address _protocolAgent) external;\\n\\n  /// @notice View the amount nonstakers can claim from this protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Amount of tokens claimable by nonstakers\\n  /// @dev this reads from a storage variable + (now-lastsettled) * premiums\\n  function nonStakersClaimable(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice Choose an `_amount` of tokens that nonstakers (`_receiver` address) will receive from `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens\\n  /// @param _receiver Address to receive tokens\\n  /// @dev Only callable by nonstakers role\\n  function nonStakersClaim(\\n    bytes32 _protocol,\\n    uint256 _amount,\\n    address _receiver\\n  ) external;\\n\\n  /// @param _protocol Protocol identifier\\n  /// @return current and previous are the current and previous coverage amounts for this protocol\\n  function coverageAmounts(bytes32 _protocol)\\n    external\\n    view\\n    returns (uint256 current, uint256 previous);\\n\\n  /// @notice Function used to check if this is the current active protocol manager\\n  /// @return Boolean indicating it's active\\n  /// @dev If inactive the owner can pull all ERC20s and ETH\\n  /// @dev Will be checked by calling the sherlock contract\\n  function isActive() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/ISherlockClaimManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './callbacks/ISherlockClaimManagerCallbackReceiver.sol';\\nimport '../UMAprotocol/OptimisticRequester.sol';\\nimport './IManager.sol';\\n\\ninterface ISherlockClaimManager is IManager, OptimisticRequester {\\n  // Doesn't allow a new claim to be submitted by a protocol agent if a claim is already active for that protocol\\n  error ClaimActive();\\n\\n  // If the current state of a claim does not match the expected state, this error is thrown\\n  error InvalidState();\\n\\n  event ClaimCreated(\\n    uint256 claimID,\\n    bytes32 indexed protocol,\\n    uint256 amount,\\n    address receiver,\\n    bool previousCoverageUsed\\n  );\\n\\n  event CallbackAdded(ISherlockClaimManagerCallbackReceiver callback);\\n\\n  event CallbackRemoved(ISherlockClaimManagerCallbackReceiver callback);\\n\\n  event ClaimStatusChanged(uint256 indexed claimID, State previousState, State currentState);\\n\\n  event ClaimPayout(uint256 claimID, address receiver, uint256 amount);\\n\\n  event ClaimHalted(uint256 claimID);\\n\\n  event UMAHORenounced();\\n\\n  enum State {\\n    NonExistent, // Claim doesn't exist (this is the default state on creation)\\n    SpccPending, // Claim is created, SPCC is able to set state to valid\\n    SpccApproved, // Final state, claim is valid\\n    SpccDenied, // Claim denied by SPCC, claim can be escalated within 4 weeks\\n    UmaPriceProposed, // Price is proposed but not escalated\\n    ReadyToProposeUmaDispute, // Price is proposed, callback received, ready to submit dispute\\n    UmaDisputeProposed, // Escalation is done, waiting for confirmation\\n    UmaPending, // Claim is escalated, in case Spcc denied or didn't act within 7 days.\\n    UmaApproved, // Final state, claim is valid, claim can be enacted after 1 day, umaHaltOperator has 1 day to change to denied\\n    UmaDenied, // Final state, claim is invalid\\n    Halted, // UMAHO can halt claim if state is UmaApproved\\n    Cleaned // Claim is removed by protocol agent\\n  }\\n\\n  struct Claim {\\n    uint256 created;\\n    uint256 updated;\\n    address initiator;\\n    bytes32 protocol;\\n    uint256 amount;\\n    address receiver;\\n    uint32 timestamp;\\n    State state;\\n    bytes ancillaryData;\\n  }\\n\\n  // requestAndProposePriceFor() --> proposer = sherlockCore (address to receive BOND if UMA denies claim)\\n  // disputePriceFor() --> disputer = protocolAgent\\n  // priceSettled will be the the callback that contains the main data\\n\\n  // Assume BOND = 9600, UMA's final fee = 1500.\\n  // Claim initiator (Sherlock) has to pay 22.2k to dispute a claim,\\n  // so we will execute a safeTransferFrom(claimInitiator, address(this), 22.2k).\\n  // We need to approve the contract 22.2k as it will be transferred from address(this).\\n\\n  // The 22.2k consists of 2 * (BOND + final fee charged by UMA), as follows:\\n  // 1. On requestAndProposePriceFor(), the fee will be 10k: 9600 BOND + 1500 UMA's final fee;\\n  // 2. On disputePriceFor(), the fee will be the same 10k.\\n  // note that half of the BOND (4800) + UMA's final fee (1500) is \\\"burnt\\\" and sent to UMA\\n\\n  // UMA's final fee can be changed in the future, which may result in lower or higher required staked amounts for escalating a claim.\\n\\n  // On settle, either the protocolAgent (dispute success) or sherlockCore (dispute failure)\\n  // will receive 9600 + 4800 + 1500 = 15900. In addition, the protocolAgent will be entitled to\\n  // the claimAmount if the dispute is successful/\\n\\n  // lastClaimID <-- starts with 0, so initial id = 1\\n  // have claim counter, easy to identify certain claims by their number\\n  // but use hash(callback.request.propose + callback.timestamp) as the internal UUID to handle the callbacks\\n\\n  // So SPCC and UMAHO are hardcoded (UMAHO can be renounced)\\n  // In case these need to be updated, deploy different contract and upgrade it on the sherlock gov side.\\n\\n  // On price proposed callback --> call disputePriceFor with callbackdata + sherlock.strategyManager() and address(this)\\n\\n  /// @notice `SHERLOCK_CLAIM` in utf8\\n  function UMA_IDENTIFIER() external view returns (bytes32);\\n\\n  function sherlockProtocolClaimsCommittee() external view returns (address);\\n\\n  /// @notice operator is able to deny approved UMA claims\\n  function umaHaltOperator() external view returns (address);\\n\\n  /// @notice gov is able to renounce the role\\n  function renounceUmaHaltOperator() external;\\n\\n  function claim(uint256 _claimID) external view returns (Claim memory);\\n\\n  /// @notice Initiate a claim for a specific protocol as the protocol agent\\n  /// @param _protocol protocol ID (different from the internal or public claim ID fields)\\n  /// @param _amount amount of USDC which is being claimed by the protocol\\n  /// @param _receiver address to receive the amount of USDC being claimed\\n  /// @param _timestamp timestamp at which the exploit first occurred\\n  /// @param ancillaryData other data associated with the claim, such as the coverage agreement\\n  /// @dev The protocol agent that starts a claim will be the protocol agent during the claims lifecycle\\n  /// @dev Even if the protocol agent role is tranferred during the lifecycle\\n  function startClaim(\\n    bytes32 _protocol,\\n    uint256 _amount,\\n    address _receiver,\\n    uint32 _timestamp,\\n    bytes memory ancillaryData\\n  ) external;\\n\\n  function spccApprove(uint256 _claimID) external;\\n\\n  function spccRefuse(uint256 _claimID) external;\\n\\n  /// @notice Callable by protocol agent\\n  /// @param _claimID Public claim ID\\n  /// @param _amount Bond amount sent by protocol agent\\n  /// @dev Use hardcoded USDC address\\n  /// @dev Use hardcoded bond amount\\n  /// @dev Use hardcoded liveness 7200 (2 hours)\\n  /// @dev proposedPrice = _amount\\n  function escalate(uint256 _claimID, uint256 _amount) external;\\n\\n  /// @notice Execute claim, storage will be removed after\\n  /// @param _claimID Public ID of the claim\\n  /// @dev Needs to be SpccApproved or UmaApproved && >UMAHO_TIME\\n  /// @dev Funds will be pulled from core\\n  function payoutClaim(uint256 _claimID) external;\\n\\n  /// @notice UMAHO is able to execute a halt if the state is UmaApproved and state was updated less than UMAHO_TIME ago\\n  function executeHalt(uint256 _claimID) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/IStrategyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './IManager.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStrategyManager is IManager {\\n  /// @return Returns the token type being deposited into a strategy\\n  function want() external view returns (IERC20);\\n\\n  /// @notice Withdraws all USDC from the strategy back into the Sherlock core contract\\n  /// @dev Only callable by the Sherlock core contract\\n  /// @return The final amount withdrawn\\n  function withdrawAll() external returns (uint256);\\n\\n  /// @notice Withdraws a specific amount of USDC from the strategy back into the Sherlock core contract\\n  /// @param _amount Amount of USDC to withdraw\\n  function withdraw(uint256 _amount) external;\\n\\n  /// @notice Deposits all USDC held in this contract into the strategy\\n  function deposit() external;\\n\\n  /// @return Returns the USDC balance in this contract\\n  function balanceOf() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '../ISherlock.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IManager {\\n  // An address or other value passed in is equal to zero (and shouldn't be)\\n  error ZeroArgument();\\n\\n  // Occurs when a value already holds the desired property, or is not whitelisted\\n  error InvalidArgument();\\n\\n  // If a required condition for executing the function is not met, it reverts and throws this error\\n  error InvalidConditions();\\n\\n  // Throws if the msg.sender is not the required address\\n  error InvalidSender();\\n\\n  event SherlockCoreSet(ISherlock sherlock);\\n\\n  /// @notice Set sherlock core address where premiums should be send too\\n  /// @param _sherlock Current core contract\\n  /// @dev Only deployer is able to set core address on all chains except Hardhat network\\n  /// @dev One time function, will revert once `sherlock` != address(0)\\n  /// @dev This contract will be deployed first, passed on as argument in core constuctor\\n  /// @dev ^ that's needed for tvl accounting, once core is deployed this function is called\\n  /// @dev emits `SherlockCoreSet`\\n  function setSherlockCoreAddress(ISherlock _sherlock) external;\\n\\n  /// @notice Pause external functions in contract\\n  function pause() external;\\n\\n  /// @notice Unpause external functions in contract\\n  function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/callbacks/ISherlockClaimManagerCallbackReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\ninterface ISherlockClaimManagerCallbackReceiver {\\n  /// @notice Calls this function on approved contracts and passes args\\n  /// @param _protocol The protocol that is receiving the payout\\n  /// @param _claimID The claim ID that is receiving the payout\\n  /// @param _amount The amount of USDC being paid out for this claim\\n  function PreCorePayoutCallback(\\n    bytes32 _protocol,\\n    uint256 _claimID,\\n    uint256 _amount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UMAprotocol/OptimisticRequester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport './SkinnyOptimisticOracleInterface.sol';\\n\\n/**\\n * @title Optimistic Requester.\\n * @notice Optional interface that requesters can implement to receive callbacks.\\n * @dev This contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\\n * money themselves).\\n */\\ninterface OptimisticRequester {\\n  /**\\n   * @notice Callback for proposals.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request request params after proposal.\\n   */\\n  function priceProposed(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request memory request\\n  ) external;\\n\\n  /**\\n   * @notice Callback for disputes.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request request params after dispute.\\n   */\\n  function priceDisputed(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request memory request\\n  ) external;\\n\\n  /**\\n   * @notice Callback for settlement.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request request params after settlement.\\n   */\\n  function priceSettled(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request memory request\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UMAprotocol/SkinnyOptimisticOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './OptimisticOracleInterface.sol';\\n\\n/**\\n * @title Interface for the gas-cost-reduced version of the OptimisticOracle.\\n * @notice Differences from normal OptimisticOracle:\\n * - refundOnDispute: flag is removed, by default there are no refunds on disputes.\\n * - customizing request parameters: In the OptimisticOracle, parameters like `bond` and `customLiveness` can be reset\\n *   after a request is already made via `requestPrice`. In the SkinnyOptimisticOracle, these parameters can only be\\n *   set in `requestPrice`, which has an expanded input set.\\n * - settleAndGetPrice: Replaced by `settle`, which can only be called once per settleable request. The resolved price\\n *   can be fetched via the `Settle` event or the return value of `settle`.\\n * - general changes to interface: Functions that interact with existing requests all require the parameters of the\\n *   request to modify to be passed as input. These parameters must match with the existing request parameters or the\\n *   function will revert. This change reflects the internal refactor to store hashed request parameters instead of the\\n *   full request struct.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract SkinnyOptimisticOracleInterface {\\n  event RequestPrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  event ProposePrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  event DisputePrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  event Settle(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  // Struct representing a price request. Note that this differs from the OptimisticOracleInterface's Request struct\\n  // in that refundOnDispute is removed.\\n  struct Request {\\n    address proposer; // Address of the proposer.\\n    address disputer; // Address of the disputer.\\n    IERC20 currency; // ERC20 token used to pay rewards and fees.\\n    bool settled; // True if the request is settled.\\n    int256 proposedPrice; // Price that the proposer submitted.\\n    int256 resolvedPrice; // Price resolved once the request is settled.\\n    uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n    uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n    uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n    uint256 customLiveness; // Custom liveness value set by the requester.\\n  }\\n\\n  // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n  // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n  // to accept a price request made with ancillary data length over a certain size.\\n  uint256 public constant ancillaryBytesLimit = 8192;\\n\\n  /**\\n   * @notice Requests a new price.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\\n   * @param customLiveness custom proposal liveness to set for request.\\n   * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\\n   */\\n  function requestPrice(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward,\\n    uint256 bond,\\n    uint256 customLiveness\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n   * from this proposal. However, any bonds are pulled from the caller.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * propose a price for.\\n   * @param proposer address to set as the proposer.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePriceFor(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    address proposer,\\n    int256 proposedPrice\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value where caller is the proposer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * propose a price for.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\\n   * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\\n   * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\\n   * @dev The caller is the requester, but the proposer can be customized.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\\n   * @param customLiveness custom proposal liveness to set for request.\\n   * @param proposer address to set as the proposer.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function requestAndProposePriceFor(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward,\\n    uint256 bond,\\n    uint256 customLiveness,\\n    address proposer,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n   * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * dispute.\\n   * @param disputer address to set as the disputer.\\n   * @param requester sender of the initial price request.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePriceFor(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    address disputer,\\n    address requester\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal where caller is the disputer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * dispute.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * settle.\\n   * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n   * the returned bonds as well as additional rewards.\\n   * @return resolvedPrice the price that the request settled to.\\n   */\\n  function settle(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (uint256 payout, int256 resolvedPrice);\\n\\n  /**\\n   * @notice Computes the current state of a price request. See the State enum for more details.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters.\\n   * @return the State.\\n   */\\n  function getState(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (OptimisticOracleInterface.State);\\n\\n  /**\\n   * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters. The hash of these parameters must match with the request hash that is\\n   * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\\n   * will revert.\\n   * @return boolean indicating true if price exists and false if not.\\n   */\\n  function hasPrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) public virtual returns (bool);\\n\\n  /**\\n   * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param requester sender of the initial price request.\\n   * @return the stamped ancillary bytes.\\n   */\\n  function stampAncillaryData(bytes memory ancillaryData, address requester)\\n    public\\n    pure\\n    virtual\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UMAprotocol/OptimisticOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleInterface {\\n  // Struct representing the state of a price request.\\n  enum State {\\n    Invalid, // Never requested.\\n    Requested, // Requested, no other actions taken.\\n    Proposed, // Proposed, but not expired or disputed yet.\\n    Expired, // Proposed, not disputed, past liveness.\\n    Disputed, // Disputed, but no DVM price returned yet.\\n    Resolved, // Disputed and DVM price is available.\\n    Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n  }\\n\\n  // Struct representing a price request.\\n  struct Request {\\n    address proposer; // Address of the proposer.\\n    address disputer; // Address of the disputer.\\n    IERC20 currency; // ERC20 token used to pay rewards and fees.\\n    bool settled; // True if the request is settled.\\n    bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n    int256 proposedPrice; // Price that the proposer submitted.\\n    int256 resolvedPrice; // Price resolved once the request is settled.\\n    uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n    uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n    uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n    uint256 customLiveness; // Custom liveness value set by the requester.\\n  }\\n\\n  // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n  // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n  // to accept a price request made with ancillary data length over a certain size.\\n  uint256 public constant ancillaryBytesLimit = 8192;\\n\\n  /**\\n   * @notice Requests a new price.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n   * This can be changed with a subsequent call to setBond().\\n   */\\n  function requestPrice(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Set the proposal bond associated with a price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param bond custom bond amount to set.\\n   * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n   * changed again with a subsequent call to setBond().\\n   */\\n  function setBond(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    uint256 bond\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n   * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n   * bond, so there is still profit to be made even if the reward is refunded.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   */\\n  function setRefundOnDispute(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual;\\n\\n  /**\\n   * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n   * being auto-resolved.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param customLiveness new custom liveness.\\n   */\\n  function setCustomLiveness(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    uint256 customLiveness\\n  ) external virtual;\\n\\n  /**\\n   * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n   * from this proposal. However, any bonds are pulled from the caller.\\n   * @param proposer address to set as the proposer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePriceFor(\\n    address proposer,\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    int256 proposedPrice\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value for an existing price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n   * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n   * @param disputer address to set as the disputer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was value (the proposal was incorrect).\\n   */\\n  function disputePriceFor(\\n    address disputer,\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price value for an existing price request with an active proposal.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n   * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n   * hasn't been settled.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return resolved price.\\n   */\\n  function settleAndGetPrice(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (int256);\\n\\n  /**\\n   * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n   * the returned bonds as well as additional rewards.\\n   */\\n  function settle(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (uint256 payout);\\n\\n  /**\\n   * @notice Gets the current data structure containing all information about a price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return the Request data structure.\\n   */\\n  function getRequest(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (Request memory);\\n\\n  /**\\n   * @notice Returns the state of a price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return the State enum value.\\n   */\\n  function getState(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (State);\\n\\n  /**\\n   * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return true if price has resolved or settled, false otherwise.\\n   */\\n  function hasPrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (bool);\\n\\n  function stampAncillaryData(bytes memory ancillaryData, address requester)\\n    public\\n    view\\n    virtual\\n    returns (bytes memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sher\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyRate\",\"type\":\"uint256\"},{\"internalType\":\"contract ISherlock\",\"name\":\"_sherlockPosition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"contract ISherClaim\",\"name\":\"_sherClaim\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoldOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroArgument\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sherAmountWant\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sher\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sherClaim\",\"outputs\":[{\"internalType\":\"contract ISherClaim\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sherlockPosition\",\"outputs\":[{\"internalType\":\"contract ISherlock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sherAmountWant\",\"type\":\"uint256\"}],\"name\":\"viewCapitalRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sherAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SherBuy", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "00000000000000000000000046d2a90153cd8f09464ca3a5605b6bbec9c2ff01000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000089544000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000865a889183039689034da55c1fd12af5083eabf000000000000000000000000666b8ebfbf4d5f0ce56962a25635cff563f131610000000000000000000000007289c61c75dcdb8fe4df0b937c08c9c40902bdd3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}