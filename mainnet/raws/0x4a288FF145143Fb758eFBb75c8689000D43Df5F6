{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BalanceChecker.sol\": {\r\n      \"content\": \"// Built off of https://github.com/DeltaBalances/DeltaBalances.github.io/blob/master/smart_contract/deltabalances.sol\\npragma solidity ^0.6.0;\\n\\n// ERC20 contract interface\\nabstract contract Token {\\n    function balanceOf(address) external view virtual returns (uint256);\\n\\n    function blockedBalanceOf(address) external view virtual returns (uint256);\\n}\\n\\ncontract BalanceChecker {\\n    /*\\n    Check the token balance of a wallet in a token contract\\n\\n    Returns the balance of the token for user. Avoids possible errors:\\n      - return 0 on non-contract address \\n      - returns 0 if the contract doesn't implement balanceOf\\n  */\\n    function tokenBalance(address user, address token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // check if token is actually a contract\\n        uint256 tokenCode;\\n        assembly {\\n            tokenCode := extcodesize(token)\\n        } // contract code size\\n\\n        // is it a contract and does it implement balanceOf\\n        (bool success, ) = token.staticcall(\\n            abi.encodeWithSignature(\\\"balanceOf(address)\\\", user)\\n        );\\n        if (tokenCode > 0 && success) {\\n            return Token(token).balanceOf(user);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /*\\n    Check the blocked token balance of a wallet in a token contract\\n\\n    Returns the blocked balance of the token for user. Avoids possible errors:\\n      - return 0 on non-contract address \\n      - returns 0 if the contract doesn't implement blockedBalanceOf\\n  */\\n    function tokenBlockedBalance(address user, address token)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // check if token is actually a contract\\n        uint256 tokenCode;\\n        assembly {\\n            tokenCode := extcodesize(token)\\n        } // contract code size\\n\\n        // is it a contract and does it implement balanceOf\\n        (bool success, ) = token.staticcall(\\n            abi.encodeWithSignature(\\\"blockedBalanceOf(address)\\\", user)\\n        );\\n        if (tokenCode > 0 && success) {\\n            return Token(token).blockedBalanceOf(user);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /*\\n    Check the token balances of a wallet for multiple tokens.\\n    Pass 0x0 as a \\\"token\\\" address to get ETH balance.\\n\\n    Possible error throws:\\n      - extremely large arrays for user and or tokens (gas cost too high) \\n          \\n    Returns a one-dimensional that's user.length * tokens.length long. The\\n    array is ordered by all of the 0th users token balances, then the 1th\\n    user, and so on.\\n  */\\n    function balances(address[] calldata users, address[] calldata tokens)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory addrBalances = new uint256[](\\n            tokens.length * users.length\\n        );\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            for (uint256 j = 0; j < tokens.length; j++) {\\n                uint256 addrIdx = j + tokens.length * i;\\n                if (tokens[j] != address(0x0)) {\\n                    addrBalances[addrIdx] = tokenBalance(users[i], tokens[j]);\\n                } else {\\n                    addrBalances[addrIdx] = users[i].balance; // ETH balance\\n                }\\n            }\\n        }\\n\\n        return addrBalances;\\n    }\\n\\n    /*\\n    Check the blocked token balances of a wallet for multiple tokens.\\n    Pass 0x0 as a \\\"token\\\" address to get ETH blocked balance.\\n\\n    Possible error throws:\\n      - extremely large arrays for user and or tokens (gas cost too high) \\n          \\n    Returns a one-dimensional that's user.length * tokens.length long. The\\n    array is ordered by all of the 0th users blocked token balances, then the 1th\\n    user, and so on.\\n  */\\n\\n    function blockedBalances(\\n        address[] calldata users,\\n        address[] calldata tokens\\n    ) external view returns (uint256[] memory) {\\n        uint256[] memory addrBalances = new uint256[](\\n            tokens.length * users.length\\n        );\\n\\n        for (uint256 i = 0; i < users.length; i++) {\\n            for (uint256 j = 0; j < tokens.length; j++) {\\n                uint256 addrIdx = j + tokens.length * i;\\n                if (tokens[j] != address(0x0)) {\\n                    addrBalances[addrIdx] = tokenBlockedBalance(\\n                        users[i],\\n                        tokens[j]\\n                    );\\n                } else {\\n                    addrBalances[addrIdx] = users[i].balance; // ETH balance\\n                }\\n            }\\n        }\\n\\n        return addrBalances;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"blockedBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BalanceChecker", "CompilerVersion": "v0.6.0+commit.26b70077", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}