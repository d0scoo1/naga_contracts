{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/integration/wrap/RgtMigrationWrapAdapter.sol\": {\r\n      \"content\": \"/*\\n    Copyright 2021 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\n/**\\n  * @title RgtMigrationWrapAdater\\n  * @author FlattestWhite\\n  *\\n  * Wrap adapter for one time token migration that returns data for wrapping RGT into TRIBE. \\n  * Note: RGT can not be unwrapped into TRIBE, because migration can not be reversed.\\n */\\ncontract RgtMigrationWrapAdapter {\\n\\n    /* ============ State Variables ============ */\\n\\n    address public immutable pegExchanger;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables\\n     *\\n     * @param _pegExchanger                       Address of PegExchanger contract\\n     */\\n    constructor(\\n        address _pegExchanger\\n    )\\n        public\\n    {\\n        pegExchanger = _pegExchanger;\\n    } \\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Generates the calldata to migrate RGT tokens to TRIBE tokens.\\n     *\\n     * @param _underlyingUnits      Total quantity of underlying units to wrap\\n     *\\n     * @return address              Target contract address\\n     * @return uint256              Total quantity of underlying units (if underlying is ETH)\\n     * @return bytes                Wrap calldata\\n     */\\n    function getWrapCallData(\\n        address /* _underlyingToken */,\\n        address /* _wrappedToken */,\\n        uint256 _underlyingUnits\\n    )\\n        external\\n        view\\n        returns (address, uint256, bytes memory)\\n    {\\n        // exchange(uint256 amount)\\n        bytes memory callData = abi.encodeWithSignature(\\\"exchange(uint256)\\\", _underlyingUnits);\\n\\n        return (pegExchanger, 0, callData);\\n    }\\n\\n    /**\\n     * This function will revert, since migration cannot be reversed.\\n     */\\n    function getUnwrapCallData(\\n        address /* _underlyingToken */,\\n        address /* _wrappedToken */,\\n        uint256 /* _wrappedTokenUnits */\\n    )\\n        external\\n        pure\\n        returns (address, uint256, bytes memory)\\n    {\\n        revert(\\\"RGT migration cannot be reversed\\\");\\n    }\\n\\n    /**\\n     * Returns the address to approve source tokens for wrapping.\\n     *\\n     * @return address        Address of the contract to approve tokens to\\n     */\\n    function getSpenderAddress(address /* _underlyingToken */, address /* _wrappedToken */) external view returns(address) {\\n        return pegExchanger;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pegExchanger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSpenderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getUnwrapCallData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingUnits\",\"type\":\"uint256\"}],\"name\":\"getWrapCallData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegExchanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RgtMigrationWrapAdapter", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c09bb5ecf865e6f69fe62a43c27f036a426909f7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}