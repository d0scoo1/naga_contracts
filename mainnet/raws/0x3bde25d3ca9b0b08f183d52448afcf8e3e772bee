{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/confirmations/ConfirmationsV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.14;\\n\\n//\\n//                                 (((((((((((()                                 \\n//                              (((((((((((((((((((                              \\n//                            ((((((           ((((((                            \\n//                           (((((               (((((                           \\n//                         (((((/                 ((((((                         \\n//                        (((((                     (((((                        \\n//                      ((((((                       ((((()                      \\n//                     (((((                           (((((                     \\n//                   ((((((                             (((((                    \\n//                  (((((                                                        \\n//                ((((((                        (((((((((((((((                  \\n//               (((((                       (((((((((((((((((((((               \\n//             ((((((                      ((((((             (((((.             \\n//            (((((                      ((((((.               ((((((            \\n//          ((((((                     ((((((((                  (((((           \\n//         (((((                      (((((((((                   ((((((         \\n//        (((((                     ((((((.(((((                    (((((        \\n//       (((((                     ((((((   (((((                    (((((       \\n//      (((((                    ((((((      ((((((                   (((((      \\n//      ((((.                  ((((((          (((((                  (((((      \\n//      (((((                .((((((            ((((((                (((((      \\n//       ((((()            (((((((                (((((             ((((((       \\n//        .(((((((      (((((((.                   ((((((((     ((((((((         \\n//           ((((((((((((((((                         ((((((((((((((((           \\n//                .((((.                                    (((()         \\n//                                  \\n//                               attrace.com\\n//\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./types.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n// import \\\"../interfaces/IERC20.sol\\\";\\n// import \\\"../support/DevRescuableOnTestnets.sol\\\";\\n\\nstruct ConfirmationInfo {\\n  uint128 number;\\n  uint64 timestamp;\\n}\\n\\n// Contract which represents the oracles their confirmations.\\ncontract ConfirmationsV1 is Ownable, ConfirmationsResolver {\\n  // Hash of the last confirmation\\n  bytes32 private head;\\n\\n  // Address of the oracle gate which is allowed to finalize confirmations\\n  address private oracleGate;\\n\\n  // Amount of blocks the blockchain has evolved before another finalization is accepted.\\n  uint32 private finalizeBlockDiffMin;\\n\\n  // Block height of the last finalization we received, parsed from the request, checked against current block height.\\n  uint64 private lastFinalizeAtBlockHeight;\\n\\n  // Mapping of confirmations which are finalized\\n  mapping(bytes32 => ConfirmationInfo) private confirmations;\\n\\n  // Emitted whenever the config has been changed\\n  event ConfigChanged(address indexed oracleGate, uint32 finalizeBlockDiffMin);\\n\\n  // Emitted whenever a confirmation is finalized (claims work from finalization)\\n  event ConfirmationFinalized (\\n    bytes32 indexed confirmationHash,\\n    uint128 indexed number,\\n    bytes32 stateRoot,\\n    bytes32 parentHash,\\n    uint64 timestamp,\\n    bytes32 bundleHash,\\n    bytes32 indexed closerHash,\\n    uint32 blockCount,\\n    bytes32 blockHash,\\n    uint64 confirmChainBlockNr\\n  );\\n\\n  function finalize(\\n    bytes32 confirmationHash,\\n    uint128 number,\\n    bytes32 stateRoot,\\n    bytes32 parentHash,\\n    uint64 timestamp,\\n    bytes32 bundleHash,\\n    bytes32 closerHash,\\n    uint32 blockCount,\\n    bytes32 blockHash,\\n    uint64 confirmChainBlockNr\\n  ) external onlyOracleGate {\\n    require(\\n      // Ensure this finalization has not yet been done before\\n      confirmations[confirmationHash].number == 0 \\n      // Verify that the confirmations form a clean chain\\n      && number == confirmations[head].number + 1 \\n      && (number > 1 ? head == parentHash : true)\\n      // Verify that there is sufficient blocks in between the finalization requests.\\n      // In a deployment which behaves periodically and is synced, this will enforce 24hr delay between tip of the confirmation chain finalizations.\\n      && (confirmChainBlockNr < block.number && (lastFinalizeAtBlockHeight + finalizeBlockDiffMin) <= confirmChainBlockNr)\\n      , \\\"400: nochain\\\");\\n\\n    confirmations[confirmationHash] = ConfirmationInfo(number, timestamp);\\n    head = confirmationHash;\\n\\n    // Store new block finalization offset\\n    lastFinalizeAtBlockHeight = confirmChainBlockNr;\\n\\n    emit ConfirmationFinalized(confirmationHash, number, stateRoot, parentHash, timestamp, bundleHash, closerHash, blockCount, blockHash, confirmChainBlockNr);\\n  }\\n\\n  function getHead() external view override returns (bytes32) {\\n    return head;\\n  }\\n\\n  function getConfirmation(bytes32 confirmationHash) external view override returns(uint128 number, uint64 timestamp) {\\n    return (confirmations[confirmationHash].number, confirmations[confirmationHash].timestamp);\\n  }\\n\\n  function getOracleGate() external view returns (address) {\\n    return oracleGate;\\n  }\\n\\n  function configure(address oracleGate_, uint32 finalizeBlockDiffMin_) external onlyOwner {\\n    require(oracleGate_ != address(0) && finalizeBlockDiffMin_ > 0, \\\"400\\\");\\n    oracleGate = oracleGate_;\\n    finalizeBlockDiffMin = finalizeBlockDiffMin_;\\n    emit ConfigChanged(oracleGate_, finalizeBlockDiffMin_);\\n  }\\n\\n  // -- MODIFIERS\\n  modifier onlyOracleGate {\\n    require(oracleGate == msg.sender, \\\"401\\\");\\n    _;\\n  }\\n  \\n  // -- don't accept raw ether\\n  receive() external payable {\\n    revert('unsupported');\\n  }\\n\\n  // -- reject any other function\\n  fallback() external payable {\\n    revert('unsupported');\\n  }\\n}\"\r\n    },\r\n    \"./contracts/confirmations/types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.14;\\n\\ninterface ConfirmationsResolver {\\n  function getHead() external view returns(bytes32);\\n  function getConfirmation(bytes32 confirmationHash) external view returns (uint128 number, uint64 timestamp);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleGate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"finalizeBlockDiffMin\",\"type\":\"uint32\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"confirmationHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"number\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bundleHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"closerHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmChainBlockNr\",\"type\":\"uint64\"}],\"name\":\"ConfirmationFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleGate_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"finalizeBlockDiffMin_\",\"type\":\"uint32\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"confirmationHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"number\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"bundleHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"closerHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blockCount\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"confirmChainBlockNr\",\"type\":\"uint64\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"confirmationHash\",\"type\":\"bytes32\"}],\"name\":\"getConfirmation\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"number\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleGate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ConfirmationsV1", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://58d00cc0666d0d64d861cc23427934a2719596fb1c7b04eae3fbd0bc9855f563"}]}