{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFT/NFTBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/ICallProxy.sol\\\";\\r\\nimport \\\"../interfaces/IDeBridgeGate.sol\\\";\\r\\nimport \\\"./interfaces/IDeNFT.sol\\\";\\r\\nimport \\\"./interfaces/INFTBridge.sol\\\";\\r\\nimport \\\"../transfers/DeBridgeGate.sol\\\";\\r\\nimport \\\"./DeBridgeNFTDeployer.sol\\\";\\r\\nimport \\\"../libraries/Flags.sol\\\";\\r\\n\\r\\ncontract NFTBridge is\\r\\n    Initializable,\\r\\n    AccessControlUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    IERC721ReceiverUpgradeable,\\r\\n    INFTBridge\\r\\n{\\r\\n    using AddressUpgradeable for address payable;\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    uint256 public constant TOKEN_BURNABLE_TYPE = 1;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @dev Maps debridgeId => nft bridge-specific information.\\r\\n    mapping(bytes32 => BridgeNFTInfo) public getBridgeNFTInfo;\\r\\n    /// @dev Returns native token info by token address\\r\\n    mapping(address => NativeNFTInfo) public getNativeInfo;\\r\\n    /// @dev Returns brdige address in another chain\\r\\n    mapping(uint256 => ChainInfo) public getChainInfo;\\r\\n\\r\\n    /// @dev DeBridgeGate address\\r\\n    DeBridgeGate public deBridgeGate;\\r\\n    /// @dev Address of nft deployer\\r\\n    DeBridgeNFTDeployer public deBridgeNFTDeployer;\\r\\n\\r\\n    /// @dev outgoing submissions count\\r\\n    uint256 public nonce;\\r\\n\\r\\n    /// @dev nft's created by platform\\r\\n    mapping(address => uint256) public createdTokens;\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCrossBridgeAddress() {\\r\\n        ICallProxy callProxy = ICallProxy(deBridgeGate.callProxy());\\r\\n        if (address(callProxy) != msg.sender) {\\r\\n            revert CallProxyBadRole();\\r\\n        }\\r\\n\\r\\n        bytes memory nativeSender = callProxy.submissionNativeSender();\\r\\n        uint256 chainIdFrom = callProxy.submissionChainIdFrom();\\r\\n\\r\\n        if (keccak256(getChainInfo[chainIdFrom].nftBridgeAddress) != keccak256(nativeSender)) {\\r\\n            revert NativeSenderBadRole(nativeSender, chainIdFrom);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== CONSTRUCTOR  ========== */\\r\\n\\r\\n    function initialize(DeBridgeGate _deBridgeGate) public initializer {\\r\\n        deBridgeGate = _deBridgeGate;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    /* ========== send, claim ========== */\\r\\n\\r\\n    /// @dev This method is used for the transfer of assets [from the native chain](https://docs.debridge.finance/the-core-protocol/transfers#transfer-from-native-chain).\\r\\n    /// It locks an asset in the smart contract in the native chain and enables minting of nft on the secondary chain.\\r\\n    /// @param _tokenAddress nft Asset identifier.\\r\\n    /// @param _tokenId Token Id to be transfered\\r\\n    /// @param _chainIdTo Chain id of the target chain.\\r\\n    /// @param _receiver Receiver address in target chain who will receive nft.\\r\\n    /// @param _executionFee  Fee paid to the transaction executor in target chain.\\r\\n    /// @param _referralCode Referral code\\r\\n    function send(\\r\\n        address _tokenAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _permitDeadline,\\r\\n        bytes memory _permitSignature,\\r\\n        uint256 _chainIdTo,\\r\\n        address _receiver,\\r\\n        uint256 _executionFee,\\r\\n        uint32 _referralCode\\r\\n    ) external payable nonReentrant whenNotPaused {\\r\\n        if (!getChainInfo[_chainIdTo].isSupported) {\\r\\n            revert ChainToIsNotSupported();\\r\\n        }\\r\\n\\r\\n        // run permit first\\r\\n        if (_permitSignature.length > 0) {\\r\\n            IERC4494(_tokenAddress).permit(\\r\\n                address(this),\\r\\n                _tokenId,\\r\\n                _permitDeadline,\\r\\n                _permitSignature\\r\\n            );\\r\\n        }\\r\\n\\r\\n        bool isNativeToken;\\r\\n        bytes memory targetData;\\r\\n        {\\r\\n            NativeNFTInfo storage nativeTokenInfo = getNativeInfo[_tokenAddress];\\r\\n            isNativeToken = nativeTokenInfo.chainId == 0\\r\\n                ? true // token not in mapping\\r\\n                : nativeTokenInfo.chainId == getChainId(); // token native chain id the same\\r\\n\\r\\n            // encode function that will be called in target chain\\r\\n            string memory tokenURI = IERC721MetadataUpgradeable(_tokenAddress).tokenURI(_tokenId);\\r\\n            if (isNativeToken) {\\r\\n                if (createdTokens[_tokenAddress] == TOKEN_BURNABLE_TYPE) {\\r\\n                    _checkAddAsset(_tokenAddress);\\r\\n                    IDeNFT(_tokenAddress).burn(_tokenId);\\r\\n                } else {\\r\\n                    _receiveNativeNFT(_tokenAddress, _tokenId);\\r\\n                }\\r\\n            } else {\\r\\n                IDeNFT(_tokenAddress).burn(_tokenId);\\r\\n            }\\r\\n\\r\\n            // encode function that will be called in target chain\\r\\n            targetData = nativeTokenInfo.chainId == _chainIdTo &&\\r\\n                nativeTokenInfo.tokenType != TOKEN_BURNABLE_TYPE // is sending to native chain\\r\\n                ? _encodeClaim(\\r\\n                    _decodeAddressFromBytes(nativeTokenInfo.tokenAddress), // _decodeAddressFromBytes support only emv tokens now\\r\\n                    _tokenId,\\r\\n                    _receiver\\r\\n                )\\r\\n                : _encodeMint(\\r\\n                    _tokenAddress,\\r\\n                    _tokenId,\\r\\n                    _receiver,\\r\\n                    tokenURI,\\r\\n                    nativeTokenInfo.tokenType\\r\\n                );\\r\\n        }\\r\\n\\r\\n        {\\r\\n            deBridgeGate.send{value: msg.value}(\\r\\n                address(0), // _tokenAddress\\r\\n                msg.value, // _amount\\r\\n                _chainIdTo, // _chainIdTo\\r\\n                abi.encodePacked(getChainInfo[_chainIdTo].nftBridgeAddress), // _receiver\\r\\n                \\\"\\\", // _permit\\r\\n                false, // _useAssetFee\\r\\n                _referralCode, // _referralCode\\r\\n                _encodeAutoParamsTo(targetData, _executionFee) // _autoParams\\r\\n            );\\r\\n        }\\r\\n        emit NFTSent(_tokenAddress, _tokenId, abi.encodePacked(_receiver), _chainIdTo, nonce);\\r\\n        nonce++;\\r\\n    }\\r\\n\\r\\n    /// @dev Unlock the asset on the current chain and transfer to receiver.\\r\\n    /// @param _tokenAddress nft Asset identifier.\\r\\n    /// @param _tokenId Token Id to be transfered\\r\\n    /// @param _receiver Receiver address.\\r\\n    function claim(\\r\\n        address _tokenAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _receiver\\r\\n    )\\r\\n        external\\r\\n        onlyCrossBridgeAddress\\r\\n        whenNotPaused\\r\\n    {\\r\\n        _safeTransferFrom(_tokenAddress, address(this), _receiver, _tokenId);\\r\\n\\r\\n        emit NFTClaimed(\\r\\n            _tokenAddress,\\r\\n            _tokenId,\\r\\n            _receiver\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Mint nft to receiver.\\r\\n    /// @param _nativeTokenAddress nft native asset identifier.\\r\\n    /// @param _nativeChainId nft native chainId.\\r\\n    /// @param _tokenId Token Id to be transfered\\r\\n    /// @param _receiver Receiver address.\\r\\n    /// @param _nativeName nft name.\\r\\n    /// @param _nativeSymbol nft symbol.\\r\\n    /// @param _tokenUri uri for current token Id.\\r\\n    function mint(\\r\\n        bytes memory _nativeTokenAddress,\\r\\n        uint256 _nativeChainId,\\r\\n        uint256 _tokenId,\\r\\n        address _receiver,\\r\\n        string memory _nativeName,\\r\\n        string memory _nativeSymbol,\\r\\n        string memory _tokenUri,\\r\\n        uint256 _tokenType\\r\\n    )\\r\\n        external\\r\\n        onlyCrossBridgeAddress\\r\\n        whenNotPaused\\r\\n    {\\r\\n        bytes32 debridgeId = getDebridgeId(_nativeChainId, _nativeTokenAddress);\\r\\n\\r\\n        if (!getBridgeNFTInfo[debridgeId].exist) {\\r\\n            address currentNFTAddress = deBridgeNFTDeployer.deployAsset(\\r\\n                debridgeId,\\r\\n                _nativeName,\\r\\n                _nativeSymbol\\r\\n            );\\r\\n            _addAsset(\\r\\n                debridgeId,\\r\\n                currentNFTAddress,\\r\\n                _nativeTokenAddress,\\r\\n                _nativeChainId,\\r\\n                _nativeName,\\r\\n                _nativeSymbol,\\r\\n                _tokenType\\r\\n            );\\r\\n        }\\r\\n\\r\\n        address tokenAddress = getBridgeNFTInfo[debridgeId].tokenAddress;\\r\\n        IDeNFT(tokenAddress).mint(_receiver, _tokenId, _tokenUri);\\r\\n\\r\\n        emit NFTMinted(\\r\\n            tokenAddress,\\r\\n            _tokenId,\\r\\n            _receiver,\\r\\n            _tokenUri\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Create NFT\\r\\n    /// @param _name Asset name\\r\\n    /// @param _symbol Asset symbol\\r\\n    function createNFT(\\r\\n        address _minter,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _baseUri\\r\\n    ) external whenNotPaused {\\r\\n        address currentNFTAddress = deBridgeNFTDeployer.createNFT(\\r\\n            _minter,\\r\\n            _name,\\r\\n            _symbol,\\r\\n            _baseUri\\r\\n        );\\r\\n        createdTokens[currentNFTAddress] = TOKEN_BURNABLE_TYPE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {\\r\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    // ============ ADMIN METHODS ============\\r\\n\\r\\n    function setNFTDeployer(DeBridgeNFTDeployer _deBridgeNFTDeployer) external onlyAdmin {\\r\\n        deBridgeNFTDeployer = _deBridgeNFTDeployer;\\r\\n    }\\r\\n\\r\\n    function setDeBridgeGate(DeBridgeGate _deBridgeGate) external onlyAdmin {\\r\\n        deBridgeGate = _deBridgeGate;\\r\\n    }\\r\\n\\r\\n    /// @param _bridgeAddress Bridge address, set to 0 to disable a chain\\r\\n    /// @param _chainId Chain id\\r\\n    function addChainSupport(bytes calldata _bridgeAddress, uint256 _chainId) external onlyAdmin {\\r\\n        if (_chainId == 0 || _chainId == getChainId()) {\\r\\n            revert WrongArgument();\\r\\n        }\\r\\n        getChainInfo[_chainId].nftBridgeAddress = _bridgeAddress;\\r\\n        getChainInfo[_chainId].isSupported = true;\\r\\n\\r\\n        emit AddedChainSupport(_bridgeAddress, _chainId);\\r\\n    }\\r\\n\\r\\n    function removeChainSupport(uint256 _chainId) external onlyAdmin {\\r\\n        delete getChainInfo[_chainId];\\r\\n        emit RemovedChainSupport(_chainId);\\r\\n    }\\r\\n\\r\\n    /// @dev Stop all transfers.\\r\\n    function pause() external onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @dev Allow transfers.\\r\\n    function unpause() external onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    // ============ Private methods ============\\r\\n\\r\\n    /// @dev Add support for the asset.\\r\\n    /// @param _debridgeId Asset identifier.\\r\\n    /// @param _tokenAddress Address of the asset on the current chain.\\r\\n    /// @param _nativeAddress Address of the asset on the native chain.\\r\\n    /// @param _nativeChainId Native chain id.\\r\\n    function _addAsset(\\r\\n        bytes32 _debridgeId,\\r\\n        address _tokenAddress,\\r\\n        bytes memory _nativeAddress,\\r\\n        uint256 _nativeChainId,\\r\\n        string memory _nativeName,\\r\\n        string memory _nativeSymbol,\\r\\n        uint256 _tokenType\\r\\n    ) internal {\\r\\n        BridgeNFTInfo storage bridgeInfo = getBridgeNFTInfo[_debridgeId];\\r\\n\\r\\n        if (bridgeInfo.exist) revert AssetAlreadyExist();\\r\\n        if (_tokenAddress == address(0)) revert ZeroAddress();\\r\\n\\r\\n        bridgeInfo.exist = true;\\r\\n        bridgeInfo.tokenAddress = _tokenAddress;\\r\\n        bridgeInfo.nativeChainId = _nativeChainId;\\r\\n\\r\\n        NativeNFTInfo storage nativeTokenInfo = getNativeInfo[_tokenAddress];\\r\\n        nativeTokenInfo.chainId = _nativeChainId;\\r\\n        nativeTokenInfo.tokenAddress = _nativeAddress;\\r\\n        nativeTokenInfo.name = _nativeName;\\r\\n        nativeTokenInfo.symbol = _nativeSymbol;\\r\\n        nativeTokenInfo.tokenType = _tokenType;\\r\\n\\r\\n        emit NFTContractAdded(\\r\\n            _debridgeId,\\r\\n            _tokenAddress,\\r\\n            abi.encodePacked(_nativeAddress),\\r\\n            _nativeChainId,\\r\\n            _nativeName,\\r\\n            _nativeSymbol,\\r\\n            _tokenType\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _decodeAddressFromBytes(bytes memory _bytes) internal pure returns (address addr) {\\r\\n        // See https://ethereum.stackexchange.com/a/50528\\r\\n        assembly {\\r\\n            addr := mload(add(_bytes, 20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _receiveNativeNFT(address _tokenAddress, uint256 _tokenId)\\r\\n        internal\\r\\n    {\\r\\n        _checkAddAsset(_tokenAddress);\\r\\n        _safeTransferFrom(_tokenAddress, msg.sender, address(this), _tokenId);\\r\\n    }\\r\\n\\r\\n    function _checkAddAsset(address _tokenAddress) internal returns (bytes32 debridgeId) {\\r\\n        debridgeId = getDebridgeId(getChainId(), _tokenAddress);\\r\\n        if (!getBridgeNFTInfo[debridgeId].exist) {\\r\\n            _addAsset(\\r\\n                debridgeId,\\r\\n                _tokenAddress,\\r\\n                abi.encodePacked(_tokenAddress),\\r\\n                getChainId(),\\r\\n                IERC721MetadataUpgradeable(_tokenAddress).name(),\\r\\n                IERC721MetadataUpgradeable(_tokenAddress).symbol(),\\r\\n                createdTokens[_tokenAddress]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that `to` became the owner of the 'tokenId'\\r\\n     *\\r\\n     */\\r\\n    function _safeTransferFrom(\\r\\n        address _tokenAddress,\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal {\\r\\n        IERC721Upgradeable(_tokenAddress).safeTransferFrom(_from, _to, _tokenId);\\r\\n        // check that address to received nft\\r\\n        if (IERC721Upgradeable(_tokenAddress).ownerOf(_tokenId) != _to) revert NotReceivedERC721();\\r\\n    }\\r\\n\\r\\n    function _encodeClaim(\\r\\n        address _nativeTokenAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _receiver\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encodeWithSelector(\\r\\n                this.claim.selector,\\r\\n                _nativeTokenAddress,\\r\\n                _tokenId,\\r\\n                _receiver\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Encode mint method with arguments\\r\\n    /// @param _tokenAddress Address of the asset on the current chain.\\r\\n    /// @param _tokenId token id that will be minted\\r\\n    /// @param _receiver receiver in target chain\\r\\n    function _encodeMint(\\r\\n        address _tokenAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _receiver,\\r\\n        string memory _tokenURI,\\r\\n        uint256 _tokenType\\r\\n    ) internal view returns (bytes memory) {\\r\\n        NativeNFTInfo memory nativeTokenInfo = getNativeInfo[_tokenAddress];\\r\\n\\r\\n        return\\r\\n            abi.encodeWithSelector(\\r\\n                this.mint.selector,\\r\\n                nativeTokenInfo.tokenAddress, //_nativeTokenAddress\\r\\n                nativeTokenInfo.chainId, //_nativeChainId\\r\\n                _tokenId,\\r\\n                _receiver,\\r\\n                nativeTokenInfo.name, //_nativeSymbol\\r\\n                nativeTokenInfo.symbol, //_nativeSymbol\\r\\n                _tokenURI,\\r\\n                _tokenType\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _encodeAutoParamsTo(bytes memory _data, uint256 _executionFee)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        IDeBridgeGate.SubmissionAutoParamsTo memory autoParams;\\r\\n        autoParams.flags = Flags.setFlag(autoParams.flags, Flags.REVERT_IF_EXTERNAL_FAIL, true);\\r\\n        autoParams.flags = Flags.setFlag(autoParams.flags, Flags.PROXY_WITH_SENDER, true);\\r\\n\\r\\n        // fallbackAddress can be used to transfer NFT with deAssets\\r\\n        autoParams.fallbackAddress = abi.encodePacked(msg.sender);\\r\\n        autoParams.data = _data;\\r\\n        autoParams.executionFee = _executionFee;\\r\\n        return abi.encode(autoParams);\\r\\n    }\\r\\n\\r\\n    // ============ VIEWS ============\\r\\n\\r\\n    /// @dev Calculates asset identifier.\\r\\n    /// @param _chainId Current chain id.\\r\\n    /// @param _tokenAddress Address of the asset on the other chain.\\r\\n    function getDebridgeId(uint256 _chainId, address _tokenAddress) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\\r\\n    }\\r\\n\\r\\n    /// @dev Calculates asset identifier.\\r\\n    /// @param _chainId Current chain id.\\r\\n    /// @param _tokenAddress Address of the asset on the other chain.\\r\\n    function getDebridgeId(uint256 _chainId, bytes memory _tokenAddress)\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\\r\\n    }\\r\\n\\r\\n    /// @dev Get current chain id\\r\\n    function getChainId() public view virtual returns (uint256 cid) {\\r\\n        assembly {\\r\\n            cid := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Version Control ============\\r\\n    function version() external pure returns (uint256) {\\r\\n        return 100; // 1.0.0\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICallProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface ICallProxy {\\r\\n\\r\\n    /// @dev Chain from which the current submission is received\\r\\n    function submissionChainIdFrom() external returns (uint256);\\r\\n    /// @dev Native sender of the current submission\\r\\n    function submissionNativeSender() external returns (bytes memory);\\r\\n\\r\\n    /// @dev Used for calls where native asset transfer is involved.\\r\\n    /// @param _reserveAddress Receiver of the tokens if the call to _receiver fails\\r\\n    /// @param _receiver Contract to be called\\r\\n    /// @param _data Call data\\r\\n    /// @param _flags Flags to change certain behavior of this function, see Flags library for more details\\r\\n    /// @param _nativeSender Native sender\\r\\n    /// @param _chainIdFrom Id of a chain that originated the request\\r\\n    function call(\\r\\n        address _reserveAddress,\\r\\n        address _receiver,\\r\\n        bytes memory _data,\\r\\n        uint256 _flags,\\r\\n        bytes memory _nativeSender,\\r\\n        uint256 _chainIdFrom\\r\\n    ) external payable returns (bool);\\r\\n\\r\\n    /// @dev Used for calls where ERC20 transfer is involved.\\r\\n    /// @param _token Asset address\\r\\n    /// @param _reserveAddress Receiver of the tokens if the call to _receiver fails\\r\\n    /// @param _receiver Contract to be called\\r\\n    /// @param _data Call data\\r\\n    /// @param _flags Flags to change certain behavior of this function, see Flags library for more details\\r\\n    /// @param _nativeSender Native sender\\r\\n    /// @param _chainIdFrom Id of a chain that originated the request\\r\\n    function callERC20(\\r\\n        address _token,\\r\\n        address _reserveAddress,\\r\\n        address _receiver,\\r\\n        bytes memory _data,\\r\\n        uint256 _flags,\\r\\n        bytes memory _nativeSender,\\r\\n        uint256 _chainIdFrom\\r\\n    ) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDeBridgeGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IDeBridgeGate {\\r\\n    /* ========== STRUCTS ========== */\\r\\n\\r\\n    struct TokenInfo {\\r\\n        uint256 nativeChainId;\\r\\n        bytes nativeAddress;\\r\\n    }\\r\\n\\r\\n    struct DebridgeInfo {\\r\\n        uint256 chainId; // native chain id\\r\\n        uint256 maxAmount; // maximum amount to transfer\\r\\n        uint256 balance; // total locked assets\\r\\n        uint256 lockedInStrategies; // total locked assets in strategy (AAVE, Compound, etc)\\r\\n        address tokenAddress; // asset address on the current chain\\r\\n        uint16 minReservesBps; // minimal hot reserves in basis points (1/10000)\\r\\n        bool exist;\\r\\n    }\\r\\n\\r\\n    struct DebridgeFeeInfo {\\r\\n        uint256 collectedFees; // total collected fees\\r\\n        uint256 withdrawnFees; // fees that already withdrawn\\r\\n        mapping(uint256 => uint256) getChainFee; // whether the chain for the asset is supported\\r\\n    }\\r\\n\\r\\n    struct ChainSupportInfo {\\r\\n        uint256 fixedNativeFee; // transfer fixed fee\\r\\n        bool isSupported; // whether the chain for the asset is supported\\r\\n        uint16 transferFeeBps; // transfer fee rate nominated in basis points (1/10000) of transferred amount\\r\\n    }\\r\\n\\r\\n    struct DiscountInfo {\\r\\n        uint16 discountFixBps; // fix discount in BPS\\r\\n        uint16 discountTransferBps; // transfer % discount in BPS\\r\\n    }\\r\\n\\r\\n    /// @param executionFee Fee paid to the transaction executor.\\r\\n    /// @param fallbackAddress Receiver of the tokens if the call fails.\\r\\n    struct SubmissionAutoParamsTo {\\r\\n        uint256 executionFee;\\r\\n        uint256 flags;\\r\\n        bytes fallbackAddress;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    /// @param executionFee Fee paid to the transaction executor.\\r\\n    /// @param fallbackAddress Receiver of the tokens if the call fails.\\r\\n    struct SubmissionAutoParamsFrom {\\r\\n        uint256 executionFee;\\r\\n        uint256 flags;\\r\\n        address fallbackAddress;\\r\\n        bytes data;\\r\\n        bytes nativeSender;\\r\\n    }\\r\\n\\r\\n    struct FeeParams {\\r\\n        uint256 receivedAmount;\\r\\n        uint256 fixFee;\\r\\n        uint256 transferFee;\\r\\n        bool useAssetFee;\\r\\n        bool isNativeToken;\\r\\n    }\\r\\n\\r\\n    /* ========== PUBLIC VARS GETTERS ========== */\\r\\n\\r\\n    /// @dev Returns whether the transfer with the submissionId was claimed.\\r\\n    /// submissionId is generated in getSubmissionIdFrom\\r\\n    function isSubmissionUsed(bytes32 submissionId) external returns (bool);\\r\\n\\r\\n    /// @dev Returns native token info by wrapped token address\\r\\n    function getNativeInfo(address token) external returns (\\r\\n        uint256 nativeChainId,\\r\\n        bytes memory nativeAddress);\\r\\n\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n\\r\\n    /// @dev This method is used for the transfer of assets [from the native chain](https://docs.debridge.finance/the-core-protocol/transfers#transfer-from-native-chain).\\r\\n    /// It locks an asset in the smart contract in the native chain and enables minting of deAsset on the secondary chain.\\r\\n    /// @param _tokenAddress Asset identifier.\\r\\n    /// @param _amount Amount to be transferred (note: the fee can be applied).\\r\\n    /// @param _chainIdTo Chain id of the target chain.\\r\\n    /// @param _receiver Receiver address.\\r\\n    /// @param _permit deadline + signature for approving the spender by signature.\\r\\n    /// @param _useAssetFee use assets fee for pay protocol fix (work only for specials token)\\r\\n    /// @param _referralCode Referral code\\r\\n    /// @param _autoParams Auto params for external call in target network\\r\\n    function send(\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _chainIdTo,\\r\\n        bytes memory _receiver,\\r\\n        bytes memory _permit,\\r\\n        bool _useAssetFee,\\r\\n        uint32 _referralCode,\\r\\n        bytes calldata _autoParams\\r\\n    ) external payable;\\r\\n\\r\\n    /// @dev Is used for transfers [into the native chain](https://docs.debridge.finance/the-core-protocol/transfers#transfer-from-secondary-chain-to-native-chain)\\r\\n    /// to unlock the designated amount of asset from collateral and transfer it to the receiver.\\r\\n    /// @param _debridgeId Asset identifier.\\r\\n    /// @param _amount Amount of the transferred asset (note: the fee can be applied).\\r\\n    /// @param _chainIdFrom Chain where submission was sent\\r\\n    /// @param _receiver Receiver address.\\r\\n    /// @param _nonce Submission id.\\r\\n    /// @param _signatures Validators signatures to confirm\\r\\n    /// @param _autoParams Auto params for external call\\r\\n    function claim(\\r\\n        bytes32 _debridgeId,\\r\\n        uint256 _amount,\\r\\n        uint256 _chainIdFrom,\\r\\n        address _receiver,\\r\\n        uint256 _nonce,\\r\\n        bytes calldata _signatures,\\r\\n        bytes calldata _autoParams\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Get a flash loan, msg.sender must implement IFlashCallback\\r\\n    /// @param _tokenAddress An asset to loan\\r\\n    /// @param _receiver Where funds should be sent\\r\\n    /// @param _amount Amount to loan\\r\\n    /// @param _data Data to pass to sender's flashCallback function\\r\\n    function flash(\\r\\n        address _tokenAddress,\\r\\n        address _receiver,\\r\\n        uint256 _amount,\\r\\n        bytes memory _data\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Get reserves of a token available to use in defi\\r\\n    /// @param _tokenAddress Token address\\r\\n    function getDefiAvaliableReserves(address _tokenAddress) external view returns (uint256);\\r\\n\\r\\n    /// @dev Request the assets to be used in DeFi protocol.\\r\\n    /// @param _tokenAddress Asset address.\\r\\n    /// @param _amount Amount of tokens to request.\\r\\n    function requestReserves(address _tokenAddress, uint256 _amount) external;\\r\\n\\r\\n    /// @dev Return the assets that were used in DeFi  protocol.\\r\\n    /// @param _tokenAddress Asset address.\\r\\n    /// @param _amount Amount of tokens to claim.\\r\\n    function returnReserves(address _tokenAddress, uint256 _amount) external;\\r\\n\\r\\n    /// @dev Withdraw collected fees to feeProxy\\r\\n    /// @param _debridgeId Asset identifier.\\r\\n    function withdrawFee(bytes32 _debridgeId) external;\\r\\n\\r\\n    /// @dev Returns asset fixed fee value for specified debridge and chainId.\\r\\n    /// @param _debridgeId Asset identifier.\\r\\n    /// @param _chainId Chain id.\\r\\n    function getDebridgeChainAssetFixedFee(\\r\\n        bytes32 _debridgeId,\\r\\n        uint256 _chainId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /// @dev Emitted once the tokens are sent from the original(native) chain to the other chain; the transfer tokens\\r\\n    /// are expected to be claimed by the users.\\r\\n    event Sent(\\r\\n        bytes32 submissionId,\\r\\n        bytes32 indexed debridgeId,\\r\\n        uint256 amount,\\r\\n        bytes receiver,\\r\\n        uint256 nonce,\\r\\n        uint256 indexed chainIdTo,\\r\\n        uint32 referralCode,\\r\\n        FeeParams feeParams,\\r\\n        bytes autoParams,\\r\\n        address nativeSender\\r\\n        // bool isNativeToken //added to feeParams\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted once the tokens are transferred and withdrawn on a target chain\\r\\n    event Claimed(\\r\\n        bytes32 submissionId,\\r\\n        bytes32 indexed debridgeId,\\r\\n        uint256 amount,\\r\\n        address indexed receiver,\\r\\n        uint256 nonce,\\r\\n        uint256 indexed chainIdFrom,\\r\\n        bytes autoParams,\\r\\n        bool isNativeToken\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when new asset support is added.\\r\\n    event PairAdded(\\r\\n        bytes32 debridgeId,\\r\\n        address tokenAddress,\\r\\n        bytes nativeAddress,\\r\\n        uint256 indexed nativeChainId,\\r\\n        uint256 maxAmount,\\r\\n        uint16 minReservesBps\\r\\n    );\\r\\n\\r\\n    event MonitoringSendEvent(\\r\\n        bytes32 submissionId,\\r\\n        uint256 nonce,\\r\\n        uint256 lockedOrMintedAmount,\\r\\n        uint256 totalSupply\\r\\n    );\\r\\n\\r\\n    event MonitoringClaimEvent(\\r\\n        bytes32 submissionId,\\r\\n        uint256 lockedOrMintedAmount,\\r\\n        uint256 totalSupply\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when the asset is allowed/disallowed to be transferred to the chain.\\r\\n    event ChainSupportUpdated(uint256 chainId, bool isSupported, bool isChainFrom);\\r\\n    /// @dev Emitted when the supported chains are updated.\\r\\n    event ChainsSupportUpdated(\\r\\n        uint256 chainIds,\\r\\n        ChainSupportInfo chainSupportInfo,\\r\\n        bool isChainFrom);\\r\\n\\r\\n    /// @dev Emitted when the new call proxy is set.\\r\\n    event CallProxyUpdated(address callProxy);\\r\\n    /// @dev Emitted when the transfer request is executed.\\r\\n    event AutoRequestExecuted(\\r\\n        bytes32 submissionId,\\r\\n        bool indexed success,\\r\\n        address callProxy\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when a submission is blocked.\\r\\n    event Blocked(bytes32 submissionId);\\r\\n    /// @dev Emitted when a submission is unblocked.\\r\\n    event Unblocked(bytes32 submissionId);\\r\\n\\r\\n    /// @dev Emitted when a flash loan is successfully returned.\\r\\n    event Flash(\\r\\n        address sender,\\r\\n        address indexed tokenAddress,\\r\\n        address indexed receiver,\\r\\n        uint256 amount,\\r\\n        uint256 paid\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when fee is withdrawn.\\r\\n    event WithdrawnFee(bytes32 debridgeId, uint256 fee);\\r\\n\\r\\n    /// @dev Emitted when globalFixedNativeFee and globalTransferFeeBps are updated.\\r\\n    event FixedNativeFeeUpdated(\\r\\n        uint256 globalFixedNativeFee,\\r\\n        uint256 globalTransferFeeBps);\\r\\n\\r\\n    /// @dev Emitted when globalFixedNativeFee is updated by feeContractUpdater\\r\\n    event FixedNativeFeeAutoUpdated(uint256 globalFixedNativeFee);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/NFT/interfaces/IDeNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\nimport './IERC4494.sol';\\r\\n\\r\\ninterface IDeNFT is IERC721Upgradeable, IERC4494 {\\r\\n    /// @dev Issues a new object\\r\\n    /// @param _to new Token's owner\\r\\n    /// @param _tokenId new Token's id\\r\\n    /// @param _tokenUri new Token's id\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _tokenId,\\r\\n        string memory _tokenUri\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Destroys the existing object\\r\\n    /// @param _tokenId Id of token\\r\\n    function burn(uint256 _tokenId) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/NFT/interfaces/INFTBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface INFTBridge {\\r\\n    /* ========== STRUCT ========== */\\r\\n\\r\\n    struct ChainInfo {\\r\\n        bool isSupported;\\r\\n        bytes nftBridgeAddress;\\r\\n    }\\r\\n\\r\\n    struct BridgeNFTInfo {\\r\\n        uint256 nativeChainId;\\r\\n        address tokenAddress; // asset address on the current chain\\r\\n        bool exist;\\r\\n    }\\r\\n\\r\\n    struct NativeNFTInfo {\\r\\n        uint256 chainId; // native chainId\\r\\n        bytes tokenAddress; //native token address\\r\\n        uint256 tokenType;\\r\\n        string name;\\r\\n        string symbol;\\r\\n    }\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    error AdminBadRole();\\r\\n    error CallProxyBadRole();\\r\\n    error NativeSenderBadRole(bytes nativeSender, uint256 chainIdFrom);\\r\\n\\r\\n    error WrongArgument();\\r\\n    error ZeroAddress();\\r\\n    error ChainToIsNotSupported();\\r\\n    error AssetAlreadyExist();\\r\\n\\r\\n    error DebridgeTokenInfoNotFound();\\r\\n    error MessageValueDoesNotMatchRequiredFee();\\r\\n    error TokenMustImplementIERC721Metadata();\\r\\n\\r\\n    error NotReceivedERC721();\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event AddedChainSupport(bytes bridgeAddress, uint256 chainId);\\r\\n    event RemovedChainSupport(uint256 chainId);\\r\\n\\r\\n    event NFTContractAdded(\\r\\n        bytes32 debridgeId,\\r\\n        address tokenAddress,\\r\\n        bytes nativeAddress,\\r\\n        uint256 nativeChainId,\\r\\n        string name,\\r\\n        string sybmol,\\r\\n        uint256 tokenType\\r\\n    );\\r\\n\\r\\n    event NFTSent(\\r\\n        address tokenAddress, // token address in the current chain\\r\\n        uint256 tokenId,\\r\\n        bytes receiver,\\r\\n        uint256 chainIdTo,\\r\\n        uint256 nonce\\r\\n    );\\r\\n\\r\\n    event NFTClaimed(\\r\\n        address tokenAddress, // native token address in the current chain\\r\\n        uint256 tokenId,\\r\\n        address receiver\\r\\n    );\\r\\n\\r\\n    event NFTMinted(\\r\\n        address tokenAddress, // token address in the current chain\\r\\n        uint256 tokenId,\\r\\n        address receiver,\\r\\n        string tokenUri\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/transfers/DeBridgeGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\r\\nimport \\\"../interfaces/IDeBridgeToken.sol\\\";\\r\\nimport \\\"../interfaces/IDeBridgeTokenDeployer.sol\\\";\\r\\nimport \\\"../interfaces/ISignatureVerifier.sol\\\";\\r\\nimport \\\"../interfaces/IWETH.sol\\\";\\r\\nimport \\\"../interfaces/IDeBridgeGate.sol\\\";\\r\\nimport \\\"../interfaces/ICallProxy.sol\\\";\\r\\nimport \\\"../interfaces/IFlashCallback.sol\\\";\\r\\nimport \\\"../libraries/SignatureUtil.sol\\\";\\r\\nimport \\\"../libraries/Flags.sol\\\";\\r\\nimport \\\"../interfaces/IWethGate.sol\\\";\\r\\n\\r\\n/// @dev Contract for assets transfers. The user can transfer the asset to any of the approved chains.\\r\\n/// The admin manages the assets, fees and other important protocol parameters.\\r\\ncontract DeBridgeGate is\\r\\n    Initializable,\\r\\n    AccessControlUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    IDeBridgeGate\\r\\n{\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using SignatureUtil for bytes;\\r\\n    using Flags for uint256;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @dev Basis points or bps, set to 10 000 (equal to 1/10000). Used to express relative values (fees)\\r\\n    uint256 public constant BPS_DENOMINATOR = 10000;\\r\\n    /// @dev Role allowed to stop transfers\\r\\n    bytes32 public constant GOVMONITORING_ROLE = keccak256(\\\"GOVMONITORING_ROLE\\\");\\r\\n\\r\\n    /// @dev prefix to calculation submissionId\\r\\n    uint256 public constant SUBMISSION_PREFIX = 1;\\r\\n    /// @dev prefix to calculation deployId\\r\\n    uint256 public constant DEPLOY_PREFIX = 2;\\r\\n\\r\\n    /// @dev Address of IDeBridgeTokenDeployer contract\\r\\n    address public deBridgeTokenDeployer;\\r\\n    /// @dev Current signature verifier address to verify signatures.\\r\\n    address public signatureVerifier;\\r\\n    /// @dev Minimal required confirmations in case sent amount is big, have no effect if less than SignatureVerifier.minConfirmations\\r\\n    uint8 public excessConfirmations;\\r\\n    /// @dev Flash loan fee in basis points (1/10000)\\r\\n    uint256 public flashFeeBps;\\r\\n    /// @dev outgoing submissions count\\r\\n    uint256 public nonce;\\r\\n\\r\\n    /// @dev Maps debridgeId (see getDebridgeId) => bridge-specific information.\\r\\n    mapping(bytes32 => DebridgeInfo) public getDebridge;\\r\\n    /// @dev Maps debridgeId (see getDebridgeId) => fee information\\r\\n    mapping(bytes32 => DebridgeFeeInfo) public getDebridgeFeeInfo;\\r\\n    /// @dev Returns whether the transfer with the submissionId was claimed.\\r\\n    /// submissionId is generated in getSubmissionIdFrom\\r\\n    mapping(bytes32 => bool) public override isSubmissionUsed;\\r\\n    /// @dev Returns whether the transfer with the submissionId is blocked.\\r\\n    mapping(bytes32 => bool) public isBlockedSubmission;\\r\\n    /// @dev Maps debridgeId (see getDebridgeId) to threshold amount after which\\r\\n    /// Math.max(excessConfirmations,SignatureVerifier.minConfirmations) is used instead of\\r\\n    /// SignatureVerifier.minConfirmations\\r\\n    mapping(bytes32 => uint256) public getAmountThreshold;\\r\\n    /// @dev Whether the chain for the asset is supported to send\\r\\n    mapping(uint256 => ChainSupportInfo) public getChainToConfig;\\r\\n    /// @dev Whether the chain for the asset is supported to claim\\r\\n    mapping(uint256 => ChainSupportInfo) public getChainFromConfig;\\r\\n    /// @dev Fee discount for address\\r\\n    mapping(address => DiscountInfo) public feeDiscount;\\r\\n    /// @dev Returns native token info by wrapped token address\\r\\n    mapping(address => TokenInfo) public override getNativeInfo;\\r\\n\\r\\n    /// @dev Return DefiController that can supply liquidity to staking strategies (AAVE, Compound, etc.)\\r\\n    address public defiController;\\r\\n    /// @dev Returns proxy to convert the collected fees and transfer to Ethereum network to treasury\\r\\n    address public feeProxy;\\r\\n    /// @dev Returns address of the proxy to execute user's calls.\\r\\n    address public callProxy;\\r\\n    /// @dev Returns contract for wrapped native token.\\r\\n    IWETH public weth;\\r\\n\\r\\n    /// @dev Contract address that can override globalFixedNativeFee\\r\\n    address public feeContractUpdater;\\r\\n\\r\\n    /// @dev Fallback fixed fee in native asset, used if a chain fixed fee is set to 0\\r\\n    uint256 public globalFixedNativeFee;\\r\\n    /// @dev Fallback transfer fee in BPS, used if a chain transfer fee is set to 0\\r\\n    uint16 public globalTransferFeeBps;\\r\\n\\r\\n    /// @dev WethGate contract, that is used for weth withdraws affected by EIP1884\\r\\n    IWethGate public wethGate;\\r\\n    /// @dev Locker for claim method\\r\\n    uint256 public lockedClaim;\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    error FeeProxyBadRole();\\r\\n    error DefiControllerBadRole();\\r\\n    error FeeContractUpdaterBadRole();\\r\\n    error AdminBadRole();\\r\\n    error GovMonitoringBadRole();\\r\\n    error DebridgeNotFound();\\r\\n\\r\\n    error WrongChainTo();\\r\\n    error WrongChainFrom();\\r\\n    error WrongArgument();\\r\\n    error WrongAutoArgument();\\r\\n\\r\\n    error TransferAmountTooHigh();\\r\\n\\r\\n    error NotSupportedFixedFee();\\r\\n    error TransferAmountNotCoverFees();\\r\\n    error InvalidTokenToSend();\\r\\n\\r\\n    error SubmissionUsed();\\r\\n    error SubmissionBlocked();\\r\\n\\r\\n    error AssetAlreadyExist();\\r\\n    error ZeroAddress();\\r\\n\\r\\n    error ProposedFeeTooHigh();\\r\\n    error FlashFeeNotPaid();\\r\\n\\r\\n    error NotEnoughReserves();\\r\\n    error EthTransferFailed();\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyFeeProxy() {\\r\\n        if (feeProxy != msg.sender) revert FeeProxyBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDefiController() {\\r\\n        if (defiController != msg.sender) revert DefiControllerBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyFeeContractUpdater() {\\r\\n        if (feeContractUpdater != msg.sender) revert FeeContractUpdaterBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovMonitoring() {\\r\\n        if (!hasRole(GOVMONITORING_ROLE, msg.sender)) revert GovMonitoringBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== CONSTRUCTOR  ========== */\\r\\n\\r\\n    /// @dev Constructor that initializes the most important configurations.\\r\\n    /// @param _excessConfirmations minimal required confirmations in case of too many confirmations\\r\\n    /// @param _weth wrapped native token contract\\r\\n    function initialize(\\r\\n        uint8 _excessConfirmations,\\r\\n        IWETH _weth\\r\\n    ) public initializer {\\r\\n        excessConfirmations = _excessConfirmations;\\r\\n        weth = _weth;\\r\\n\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        __ReentrancyGuard_init();\\r\\n    }\\r\\n\\r\\n    /* ========== send, claim ========== */\\r\\n\\r\\n    /// @inheritdoc IDeBridgeGate\\r\\n    function send(\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _chainIdTo,\\r\\n        bytes memory _receiver,\\r\\n        bytes memory _permit,\\r\\n        bool _useAssetFee,\\r\\n        uint32 _referralCode,\\r\\n        bytes calldata _autoParams\\r\\n    ) external payable override nonReentrant whenNotPaused {\\r\\n        bytes32 debridgeId;\\r\\n        FeeParams memory feeParams;\\r\\n        uint256 amountAfterFee;\\r\\n        // the amount will be reduced by the protocol fee\\r\\n        (amountAfterFee, debridgeId, feeParams) = _send(\\r\\n            _permit,\\r\\n            _tokenAddress,\\r\\n            _amount,\\r\\n            _chainIdTo,\\r\\n            _useAssetFee\\r\\n        );\\r\\n\\r\\n        SubmissionAutoParamsTo memory autoParams;\\r\\n\\r\\n        // Validate Auto Params\\r\\n        if (_autoParams.length > 0) {\\r\\n            autoParams = abi.decode(_autoParams, (SubmissionAutoParamsTo));\\r\\n            autoParams.executionFee = _normalizeTokenAmount(_tokenAddress, autoParams.executionFee);\\r\\n            if (autoParams.executionFee > _amount) revert ProposedFeeTooHigh();\\r\\n            if (autoParams.data.length > 0 && autoParams.fallbackAddress.length == 0 ) revert WrongAutoArgument();\\r\\n        }\\r\\n\\r\\n        amountAfterFee -= autoParams.executionFee;\\r\\n\\r\\n        // round down amount in order not to bridge dust\\r\\n        amountAfterFee = _normalizeTokenAmount(_tokenAddress, amountAfterFee);\\r\\n\\r\\n        _publishSubmission(\\r\\n            debridgeId,\\r\\n            _chainIdTo,\\r\\n            amountAfterFee,\\r\\n            _receiver,\\r\\n            feeParams,\\r\\n            _referralCode,\\r\\n            autoParams,\\r\\n            _autoParams.length > 0\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDeBridgeGate\\r\\n    function claim(\\r\\n        bytes32 _debridgeId,\\r\\n        uint256 _amount,\\r\\n        uint256 _chainIdFrom,\\r\\n        address _receiver,\\r\\n        uint256 _nonce,\\r\\n        bytes calldata _signatures,\\r\\n        bytes calldata _autoParams\\r\\n    ) external override whenNotPaused {\\r\\n        if (!getChainFromConfig[_chainIdFrom].isSupported) revert WrongChainFrom();\\r\\n\\r\\n        SubmissionAutoParamsFrom memory autoParams;\\r\\n        if (_autoParams.length > 0) {\\r\\n            autoParams = abi.decode(_autoParams, (SubmissionAutoParamsFrom));\\r\\n        }\\r\\n\\r\\n        bytes32 submissionId = getSubmissionIdFrom(\\r\\n            _debridgeId,\\r\\n            _chainIdFrom,\\r\\n            _amount,\\r\\n            _receiver,\\r\\n            _nonce,\\r\\n            autoParams,\\r\\n            _autoParams.length > 0,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        // check if submission already claimed\\r\\n        if (isSubmissionUsed[submissionId]) revert SubmissionUsed();\\r\\n        isSubmissionUsed[submissionId] = true;\\r\\n\\r\\n        _checkConfirmations(submissionId, _debridgeId, _amount, _signatures);\\r\\n\\r\\n        bool isNativeToken =_claim(\\r\\n            submissionId,\\r\\n            _debridgeId,\\r\\n            _receiver,\\r\\n            _amount,\\r\\n            _chainIdFrom,\\r\\n            autoParams\\r\\n        );\\r\\n\\r\\n        emit Claimed(\\r\\n            submissionId,\\r\\n            _debridgeId,\\r\\n            _amount,\\r\\n            _receiver,\\r\\n            _nonce,\\r\\n            _chainIdFrom,\\r\\n            _autoParams,\\r\\n            isNativeToken\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDeBridgeGate\\r\\n    function flash(\\r\\n        address _tokenAddress,\\r\\n        address _receiver,\\r\\n        uint256 _amount,\\r\\n        bytes memory _data\\r\\n    ) external override nonReentrant whenNotPaused\\r\\n    {\\r\\n        bytes32 debridgeId = getDebridgeId(getChainId(), _tokenAddress);\\r\\n        if (!getDebridge[debridgeId].exist) revert DebridgeNotFound();\\r\\n        uint256 currentFlashFee = (_amount * flashFeeBps) / BPS_DENOMINATOR;\\r\\n        uint256 balanceBefore = IERC20Upgradeable(_tokenAddress).balanceOf(address(this));\\r\\n\\r\\n        IERC20Upgradeable(_tokenAddress).safeTransfer(_receiver, _amount);\\r\\n        IFlashCallback(msg.sender).flashCallback(currentFlashFee, _data);\\r\\n\\r\\n        uint256 balanceAfter = IERC20Upgradeable(_tokenAddress).balanceOf(address(this));\\r\\n        if (balanceBefore + currentFlashFee > balanceAfter) revert FlashFeeNotPaid();\\r\\n\\r\\n        uint256 paid = balanceAfter - balanceBefore;\\r\\n        getDebridgeFeeInfo[debridgeId].collectedFees += paid;\\r\\n        emit Flash(msg.sender, _tokenAddress, _receiver, _amount, paid);\\r\\n    }\\r\\n\\r\\n    /// @dev Deploy a deToken(DeBridgeTokenProxy) for an asset\\r\\n    /// @param _nativeTokenAddress A token address on a native chain\\r\\n    /// @param _nativeChainId The token native chain's id\\r\\n    /// @param _name The token's name\\r\\n    /// @param _symbol The token's symbol\\r\\n    /// @param _decimals The token's decimals\\r\\n    /// @param _signatures Validators' signatures\\r\\n    function deployNewAsset(\\r\\n        bytes memory _nativeTokenAddress,\\r\\n        uint256 _nativeChainId,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimals,\\r\\n        bytes memory _signatures\\r\\n    ) external nonReentrant whenNotPaused{\\r\\n        bytes32 debridgeId = getbDebridgeId(_nativeChainId, _nativeTokenAddress);\\r\\n\\r\\n        if (getDebridge[debridgeId].exist) revert AssetAlreadyExist();\\r\\n\\r\\n        bytes32 deployId = getDeployId(debridgeId, _name, _symbol, _decimals);\\r\\n\\r\\n        // verify signatures\\r\\n        ISignatureVerifier(signatureVerifier).submit(deployId, _signatures, excessConfirmations);\\r\\n\\r\\n        address deBridgeTokenAddress = IDeBridgeTokenDeployer(deBridgeTokenDeployer)\\r\\n            .deployAsset(debridgeId, _name, _symbol, _decimals);\\r\\n\\r\\n        _addAsset(debridgeId, deBridgeTokenAddress, _nativeTokenAddress, _nativeChainId);\\r\\n    }\\r\\n\\r\\n    /// @dev Update native fix fee. Called by our fee update contract\\r\\n    /// @param _globalFixedNativeFee  new value\\r\\n    function autoUpdateFixedNativeFee(\\r\\n        uint256 _globalFixedNativeFee\\r\\n    ) external onlyFeeContractUpdater {\\r\\n        globalFixedNativeFee = _globalFixedNativeFee;\\r\\n        emit FixedNativeFeeAutoUpdated(_globalFixedNativeFee);\\r\\n    }\\r\\n\\r\\n    /* ========== ADMIN ========== */\\r\\n\\r\\n    /// @dev Update asset's fees.\\r\\n    /// @param _chainIds Chain identifiers.\\r\\n    /// @param _chainSupportInfo Chain support info.\\r\\n    /// @param _isChainFrom is true for editing getChainFromConfig.\\r\\n    function updateChainSupport(\\r\\n        uint256[] memory _chainIds,\\r\\n        ChainSupportInfo[] memory _chainSupportInfo,\\r\\n        bool _isChainFrom\\r\\n    ) external onlyAdmin {\\r\\n        if (_chainIds.length != _chainSupportInfo.length) revert WrongArgument();\\r\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\r\\n            if(_isChainFrom){\\r\\n                getChainFromConfig[_chainIds[i]] = _chainSupportInfo[i];\\r\\n            }\\r\\n            else {\\r\\n                getChainToConfig[_chainIds[i]] = _chainSupportInfo[i];\\r\\n            }\\r\\n            emit ChainsSupportUpdated(_chainIds[i], _chainSupportInfo[i], _isChainFrom);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Update fallbacks for fixed fee in native asset and transfer fee\\r\\n    /// @param _globalFixedNativeFee Fallback fixed fee in native asset, used if a chain fixed fee is set to 0\\r\\n    /// @param _globalTransferFeeBps Fallback transfer fee in BPS, used if a chain transfer fee is set to 0\\r\\n    function updateGlobalFee(\\r\\n        uint256 _globalFixedNativeFee,\\r\\n        uint16 _globalTransferFeeBps\\r\\n    ) external onlyAdmin {\\r\\n        globalFixedNativeFee = _globalFixedNativeFee;\\r\\n        globalTransferFeeBps = _globalTransferFeeBps;\\r\\n        emit FixedNativeFeeUpdated(_globalFixedNativeFee, _globalTransferFeeBps);\\r\\n    }\\r\\n\\r\\n    /// @dev Update asset's fees.\\r\\n    /// @param _debridgeId Asset identifier.\\r\\n    /// @param _supportedChainIds Chain identifiers.\\r\\n    /// @param _assetFeesInfo Chain support info.\\r\\n    function updateAssetFixedFees(\\r\\n        bytes32 _debridgeId,\\r\\n        uint256[] memory _supportedChainIds,\\r\\n        uint256[] memory _assetFeesInfo\\r\\n    ) external onlyAdmin {\\r\\n        if (_supportedChainIds.length != _assetFeesInfo.length) revert WrongArgument();\\r\\n        DebridgeFeeInfo storage debridgeFee = getDebridgeFeeInfo[_debridgeId];\\r\\n        for (uint256 i = 0; i < _supportedChainIds.length; i++) {\\r\\n            debridgeFee.getChainFee[_supportedChainIds[i]] = _assetFeesInfo[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Update minimal amount of required signatures, must be > SignatureVerifier.minConfirmations to have an effect\\r\\n    /// @param _excessConfirmations Minimal amount of required signatures\\r\\n    function updateExcessConfirmations(uint8 _excessConfirmations) external onlyAdmin {\\r\\n        if (_excessConfirmations == 0) revert WrongArgument();\\r\\n        excessConfirmations = _excessConfirmations;\\r\\n    }\\r\\n\\r\\n    /// @dev Set support for the chains where the token can be transferred.\\r\\n    /// @param _chainId Chain id where tokens are sent.\\r\\n    /// @param _isSupported Whether the token is transferable to the other chain.\\r\\n    /// @param _isChainFrom is true for editing getChainFromConfig.\\r\\n    function setChainSupport(uint256 _chainId, bool _isSupported, bool _isChainFrom) external onlyAdmin {\\r\\n        if (_isChainFrom) {\\r\\n            getChainFromConfig[_chainId].isSupported = _isSupported;\\r\\n        }\\r\\n        else {\\r\\n            getChainToConfig[_chainId].isSupported = _isSupported;\\r\\n        }\\r\\n        emit ChainSupportUpdated(_chainId, _isSupported, _isChainFrom);\\r\\n    }\\r\\n\\r\\n    /// @dev Set address of the call proxy.\\r\\n    /// @param _callProxy Address of the proxy that executes external calls.\\r\\n    function setCallProxy(address _callProxy) external onlyAdmin {\\r\\n        callProxy = _callProxy;\\r\\n        emit CallProxyUpdated(_callProxy);\\r\\n    }\\r\\n\\r\\n    /// @dev Update specific asset's bridge parameters.\\r\\n    /// @param _debridgeId Asset identifier.\\r\\n    /// @param _maxAmount Maximum amount of current chain token to be wrapped.\\r\\n    /// @param _minReservesBps Minimal reserve ration in BPS.\\r\\n    /// @param _amountThreshold Threshold amount after which Math.max(excessConfirmations,SignatureVerifier.minConfirmations) is used instead of SignatureVerifier.minConfirmations\\r\\n    function updateAsset(\\r\\n        bytes32 _debridgeId,\\r\\n        uint256 _maxAmount,\\r\\n        uint16 _minReservesBps,\\r\\n        uint256 _amountThreshold\\r\\n    ) external onlyAdmin {\\r\\n        if (_minReservesBps > BPS_DENOMINATOR) revert WrongArgument();\\r\\n        DebridgeInfo storage debridge = getDebridge[_debridgeId];\\r\\n        // don't check existence of debridge - it allows to setup asset before first transfer\\r\\n        debridge.maxAmount = _maxAmount;\\r\\n        debridge.minReservesBps = _minReservesBps;\\r\\n        getAmountThreshold[_debridgeId] = _amountThreshold;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev Set signature verifier address.\\r\\n    /// @param _verifier Signature verifier address.\\r\\n    function setSignatureVerifier(address _verifier) external onlyAdmin {\\r\\n        signatureVerifier = _verifier;\\r\\n    }\\r\\n\\r\\n    /// @dev Set asset deployer address.\\r\\n    /// @param _deBridgeTokenDeployer Asset deployer address.\\r\\n    function setDeBridgeTokenDeployer(address _deBridgeTokenDeployer) external onlyAdmin {\\r\\n        deBridgeTokenDeployer = _deBridgeTokenDeployer;\\r\\n    }\\r\\n\\r\\n    /// @dev Set defi controller.\\r\\n    /// @param _defiController Defi controller address.\\r\\n    function setDefiController(address _defiController) external onlyAdmin {\\r\\n        defiController = _defiController;\\r\\n    }\\r\\n\\r\\n    /// @dev Set fee contract updater, that can update fix native fee\\r\\n    /// @param _value new contract address.\\r\\n    function setFeeContractUpdater(address _value) external onlyAdmin {\\r\\n        feeContractUpdater = _value;\\r\\n    }\\r\\n\\r\\n    /// @dev Set wethGate contract, that uses for weth withdraws affected by EIP1884\\r\\n    /// @param _wethGate address of new wethGate contract.\\r\\n    function setWethGate(IWethGate _wethGate) external onlyAdmin {\\r\\n        wethGate = _wethGate;\\r\\n    }\\r\\n\\r\\n    /// @dev Stop all transfers.\\r\\n    function pause() external onlyGovMonitoring {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @dev Allow transfers.\\r\\n    function unpause() external onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDeBridgeGate\\r\\n    function withdrawFee(bytes32 _debridgeId) external override nonReentrant onlyFeeProxy {\\r\\n        DebridgeFeeInfo storage debridgeFee = getDebridgeFeeInfo[_debridgeId];\\r\\n        // Amount for transfer to treasury\\r\\n        uint256 amount = debridgeFee.collectedFees - debridgeFee.withdrawnFees;\\r\\n\\r\\n        if (amount == 0) revert NotEnoughReserves();\\r\\n\\r\\n        debridgeFee.withdrawnFees += amount;\\r\\n\\r\\n        if (_debridgeId == getDebridgeId(getChainId(), address(0))) {\\r\\n            _safeTransferETH(feeProxy, amount);\\r\\n        } else {\\r\\n            // don't need this check as we check that amount is not zero\\r\\n            // if (!getDebridge[_debridgeId].exist) revert DebridgeNotFound();\\r\\n            IERC20Upgradeable(getDebridge[_debridgeId].tokenAddress).safeTransfer(feeProxy, amount);\\r\\n        }\\r\\n        emit WithdrawnFee(_debridgeId, amount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDeBridgeGate\\r\\n    function requestReserves(address _tokenAddress, uint256 _amount)\\r\\n        external\\r\\n        override\\r\\n        onlyDefiController\\r\\n        nonReentrant\\r\\n    {\\r\\n        bytes32 debridgeId = getDebridgeId(getChainId(), _tokenAddress);\\r\\n        DebridgeInfo storage debridge = getDebridge[debridgeId];\\r\\n        if (!debridge.exist) revert DebridgeNotFound();\\r\\n        uint256 minReserves = (debridge.balance * debridge.minReservesBps) / BPS_DENOMINATOR;\\r\\n\\r\\n        if (minReserves + _amount > IERC20Upgradeable(_tokenAddress).balanceOf(address(this)))\\r\\n            revert NotEnoughReserves();\\r\\n\\r\\n        debridge.lockedInStrategies += _amount;\\r\\n        IERC20Upgradeable(_tokenAddress).safeTransfer(defiController, _amount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDeBridgeGate\\r\\n    function returnReserves(address _tokenAddress, uint256 _amount)\\r\\n        external\\r\\n        override\\r\\n        onlyDefiController\\r\\n        nonReentrant\\r\\n    {\\r\\n        bytes32 debridgeId = getDebridgeId(getChainId(), _tokenAddress);\\r\\n        DebridgeInfo storage debridge = getDebridge[debridgeId];\\r\\n        if (!debridge.exist) revert DebridgeNotFound();\\r\\n        debridge.lockedInStrategies -= _amount;\\r\\n        IERC20Upgradeable(debridge.tokenAddress).safeTransferFrom(\\r\\n            defiController,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Set fee converter proxy.\\r\\n    /// @param _feeProxy Fee proxy address.\\r\\n    function setFeeProxy(address _feeProxy) external onlyAdmin {\\r\\n        feeProxy = _feeProxy;\\r\\n    }\\r\\n\\r\\n    /// @dev Block or unblock a list of submissions\\r\\n    /// @param _submissionIds Ids of submissions to block/unblock\\r\\n    /// @param isBlocked True to block, false to unblock\\r\\n    function blockSubmission(bytes32[] memory _submissionIds, bool isBlocked) external onlyAdmin {\\r\\n        for (uint256 i = 0; i < _submissionIds.length; i++) {\\r\\n            isBlockedSubmission[_submissionIds[i]] = isBlocked;\\r\\n            if (isBlocked) {\\r\\n                emit Blocked(_submissionIds[i]);\\r\\n            } else {\\r\\n                emit Unblocked(_submissionIds[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Update flash fees.\\r\\n    /// @param _flashFeeBps new fee in BPS\\r\\n    function updateFlashFee(uint256 _flashFeeBps) external onlyAdmin {\\r\\n        if (_flashFeeBps > BPS_DENOMINATOR) revert WrongArgument();\\r\\n        flashFeeBps = _flashFeeBps;\\r\\n    }\\r\\n\\r\\n    /// @dev Update discount.\\r\\n    /// @param _address customer address\\r\\n    /// @param _discountFixBps  fix discount in BPS\\r\\n    /// @param _discountTransferBps transfer % discount in BPS\\r\\n    function updateFeeDiscount(\\r\\n        address _address,\\r\\n        uint16 _discountFixBps,\\r\\n        uint16 _discountTransferBps\\r\\n    ) external onlyAdmin {\\r\\n        if (_address == address(0) ||\\r\\n            _discountFixBps > BPS_DENOMINATOR ||\\r\\n            _discountTransferBps > BPS_DENOMINATOR\\r\\n        ) revert WrongArgument();\\r\\n        DiscountInfo storage discountInfo = feeDiscount[_address];\\r\\n        discountInfo.discountFixBps = _discountFixBps;\\r\\n        discountInfo.discountTransferBps = _discountTransferBps;\\r\\n    }\\r\\n\\r\\n    // we need to accept ETH sends to unwrap WETH\\r\\n    receive() external payable {\\r\\n        // assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL ========== */\\r\\n\\r\\n    function _checkConfirmations(\\r\\n        bytes32 _submissionId,\\r\\n        bytes32 _debridgeId,\\r\\n        uint256 _amount,\\r\\n        bytes calldata _signatures\\r\\n    ) internal {\\r\\n        if (isBlockedSubmission[_submissionId]) revert SubmissionBlocked();\\r\\n        // inside check is confirmed\\r\\n        ISignatureVerifier(signatureVerifier).submit(\\r\\n            _submissionId,\\r\\n            _signatures,\\r\\n            _amount >= getAmountThreshold[_debridgeId] ? excessConfirmations : 0\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Add support for the asset.\\r\\n    /// @param _debridgeId Asset identifier.\\r\\n    /// @param _tokenAddress Address of the asset on the current chain.\\r\\n    /// @param _nativeAddress Address of the asset on the native chain.\\r\\n    /// @param _nativeChainId Native chain id.\\r\\n    function _addAsset(\\r\\n        bytes32 _debridgeId,\\r\\n        address _tokenAddress,\\r\\n        bytes memory _nativeAddress,\\r\\n        uint256 _nativeChainId\\r\\n    ) internal {\\r\\n        DebridgeInfo storage debridge = getDebridge[_debridgeId];\\r\\n\\r\\n        if (debridge.exist) revert AssetAlreadyExist();\\r\\n        if (_tokenAddress == address(0)) revert ZeroAddress();\\r\\n\\r\\n        debridge.exist = true;\\r\\n        debridge.tokenAddress = _tokenAddress;\\r\\n        debridge.chainId = _nativeChainId;\\r\\n        // Don't override if the admin already set maxAmount in updateAsset method before\\r\\n        if (debridge.maxAmount == 0) {\\r\\n            debridge.maxAmount = type(uint256).max;\\r\\n        }\\r\\n        // set minReservesBps to 100% to prevent using new asset by DeFiController by default\\r\\n        debridge.minReservesBps = uint16(BPS_DENOMINATOR);\\r\\n        if (getAmountThreshold[_debridgeId] == 0) {\\r\\n            getAmountThreshold[_debridgeId] = type(uint256).max;\\r\\n        }\\r\\n\\r\\n        TokenInfo storage tokenInfo = getNativeInfo[_tokenAddress];\\r\\n        tokenInfo.nativeChainId = _nativeChainId;\\r\\n        tokenInfo.nativeAddress = _nativeAddress;\\r\\n\\r\\n        emit PairAdded(\\r\\n            _debridgeId,\\r\\n            _tokenAddress,\\r\\n            _nativeAddress,\\r\\n            _nativeChainId,\\r\\n            debridge.maxAmount,\\r\\n            debridge.minReservesBps\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Locks asset on the chain and enables minting on the other chain.\\r\\n    /// @param _amount Amount to be transferred (note: the fee can be applied).\\r\\n    /// @param _chainIdTo Chain id of the target chain.\\r\\n    /// @param _permit deadline + signature for approving the spender by signature.\\r\\n    function _send(\\r\\n        bytes memory _permit,\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount,\\r\\n        uint256 _chainIdTo,\\r\\n        bool _useAssetFee\\r\\n    ) internal returns (\\r\\n        uint256 amountAfterFee,\\r\\n        bytes32 debridgeId,\\r\\n        FeeParams memory feeParams\\r\\n    ) {\\r\\n        _validateToken(_tokenAddress);\\r\\n\\r\\n        // Run _permit first. Avoid Stack too deep\\r\\n        if (_permit.length > 0) {\\r\\n            // call permit before transferring token\\r\\n            uint256 deadline = _permit.toUint256(0);\\r\\n            (bytes32 r, bytes32 s, uint8 v) = _permit.parseSignature(32);\\r\\n            IERC20Permit(_tokenAddress).permit(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amount,\\r\\n                deadline,\\r\\n                v,\\r\\n                r,\\r\\n                s);\\r\\n        }\\r\\n\\r\\n        TokenInfo memory nativeTokenInfo = getNativeInfo[_tokenAddress];\\r\\n        bool isNativeToken = nativeTokenInfo.nativeChainId  == 0\\r\\n            ? true // token not in mapping\\r\\n            : nativeTokenInfo.nativeChainId == getChainId(); // token native chain id the same\\r\\n\\r\\n        if (isNativeToken) {\\r\\n            //We use WETH debridgeId for transfer ETH\\r\\n            debridgeId = getDebridgeId(\\r\\n                getChainId(),\\r\\n                _tokenAddress == address(0) ? address(weth) : _tokenAddress\\r\\n            );\\r\\n        }\\r\\n        else {\\r\\n            debridgeId = getbDebridgeId(\\r\\n                nativeTokenInfo.nativeChainId,\\r\\n                nativeTokenInfo.nativeAddress\\r\\n            );\\r\\n        }\\r\\n\\r\\n        DebridgeInfo storage debridge = getDebridge[debridgeId];\\r\\n        if (!debridge.exist) {\\r\\n            if (isNativeToken) {\\r\\n                // Use WETH as a token address for native tokens\\r\\n                address assetAddress = _tokenAddress == address(0) ? address(weth) : _tokenAddress;\\r\\n                _addAsset(\\r\\n                    debridgeId,\\r\\n                    assetAddress,\\r\\n                    abi.encodePacked(assetAddress),\\r\\n                    getChainId()\\r\\n                );\\r\\n            } else revert DebridgeNotFound();\\r\\n        }\\r\\n\\r\\n        ChainSupportInfo memory chainFees = getChainToConfig[_chainIdTo];\\r\\n        if (!chainFees.isSupported) revert WrongChainTo();\\r\\n\\r\\n        if (_tokenAddress == address(0)) {\\r\\n            // use msg.value as amount for native tokens\\r\\n            _amount = msg.value;\\r\\n            weth.deposit{value: _amount}();\\r\\n            _useAssetFee = true;\\r\\n        } else {\\r\\n            IERC20Upgradeable token = IERC20Upgradeable(_tokenAddress);\\r\\n            uint256 balanceBefore = token.balanceOf(address(this));\\r\\n            token.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            // Received real amount\\r\\n            _amount = token.balanceOf(address(this)) - balanceBefore;\\r\\n        }\\r\\n\\r\\n        if (_amount > debridge.maxAmount) revert TransferAmountTooHigh();\\r\\n\\r\\n        //_processFeeForTransfer\\r\\n        {\\r\\n            DiscountInfo memory discountInfo = feeDiscount[msg.sender];\\r\\n            DebridgeFeeInfo storage debridgeFee = getDebridgeFeeInfo[debridgeId];\\r\\n\\r\\n            // calculate fixed fee\\r\\n            uint256 assetsFixedFee;\\r\\n            if (_useAssetFee) {\\r\\n                if (_tokenAddress == address(0)) {\\r\\n                    // collect asset fixed fee (in weth) for native token transfers\\r\\n                    assetsFixedFee = chainFees.fixedNativeFee == 0 ? globalFixedNativeFee : chainFees.fixedNativeFee;\\r\\n                } else {\\r\\n                    // collect asset fixed fee for non native token transfers\\r\\n                    assetsFixedFee = debridgeFee.getChainFee[_chainIdTo];\\r\\n                    if (assetsFixedFee == 0) revert NotSupportedFixedFee();\\r\\n                }\\r\\n                // Apply discount for a asset fixed fee\\r\\n                assetsFixedFee = _applyDiscount(assetsFixedFee, discountInfo.discountFixBps);\\r\\n                if (_amount < assetsFixedFee) revert TransferAmountNotCoverFees();\\r\\n                feeParams.fixFee = assetsFixedFee;\\r\\n            } else {\\r\\n                // collect fixed native fee for non native token transfers\\r\\n\\r\\n                // use globalFixedNativeFee if value for chain is not set\\r\\n                uint256 nativeFee = chainFees.fixedNativeFee == 0 ? globalFixedNativeFee : chainFees.fixedNativeFee;\\r\\n                // Apply discount for a native fixed fee\\r\\n                nativeFee = _applyDiscount(nativeFee, discountInfo.discountFixBps);\\r\\n\\r\\n                if (msg.value < nativeFee) revert TransferAmountNotCoverFees();\\r\\n                else if (msg.value > nativeFee) {\\r\\n                    // refund extra fee eth\\r\\n                     _safeTransferETH(msg.sender, msg.value - nativeFee);\\r\\n                }\\r\\n                bytes32 nativeDebridgeId = getDebridgeId(getChainId(), address(0));\\r\\n                getDebridgeFeeInfo[nativeDebridgeId].collectedFees += nativeFee;\\r\\n                feeParams.fixFee = nativeFee;\\r\\n            }\\r\\n\\r\\n            // Calculate transfer fee\\r\\n            // use globalTransferFeeBps if value for chain is not set\\r\\n            uint256 transferFee = (chainFees.transferFeeBps == 0\\r\\n                ? globalTransferFeeBps : chainFees.transferFeeBps)\\r\\n                * (_amount - assetsFixedFee) / BPS_DENOMINATOR;\\r\\n            // apply discount for a transfer fee\\r\\n            transferFee = _applyDiscount(transferFee, discountInfo.discountTransferBps);\\r\\n\\r\\n            uint256 totalFee = transferFee + assetsFixedFee;\\r\\n            if (_amount < totalFee) revert TransferAmountNotCoverFees();\\r\\n            debridgeFee.collectedFees += totalFee;\\r\\n            amountAfterFee = _amount - totalFee;\\r\\n\\r\\n            // initialize feeParams\\r\\n            feeParams.transferFee = transferFee;\\r\\n            feeParams.useAssetFee = _useAssetFee;\\r\\n            feeParams.receivedAmount = _amount;\\r\\n            feeParams.isNativeToken = isNativeToken;\\r\\n        }\\r\\n\\r\\n        if (isNativeToken) {\\r\\n            debridge.balance += amountAfterFee;\\r\\n        }\\r\\n        else {\\r\\n            debridge.balance -= amountAfterFee;\\r\\n            IDeBridgeToken(debridge.tokenAddress).burn(amountAfterFee);\\r\\n        }\\r\\n        return (amountAfterFee, debridgeId, feeParams);\\r\\n    }\\r\\n\\r\\n    function _publishSubmission(\\r\\n        bytes32 _debridgeId,\\r\\n        uint256 _chainIdTo,\\r\\n        uint256 _amount,\\r\\n        bytes memory _receiver,\\r\\n        FeeParams memory feeParams,\\r\\n        uint32 _referralCode,\\r\\n        SubmissionAutoParamsTo memory autoParams,\\r\\n        bool hasAutoParams\\r\\n    ) internal {\\r\\n        bytes32 submissionId;\\r\\n        bytes memory packedSubmission = abi.encodePacked(\\r\\n            SUBMISSION_PREFIX,\\r\\n            _debridgeId,\\r\\n            getChainId(),\\r\\n            _chainIdTo,\\r\\n            _amount,\\r\\n            _receiver,\\r\\n            nonce\\r\\n        );\\r\\n        if (hasAutoParams) {\\r\\n            bool isHashedData = autoParams.flags.getFlag(Flags.SEND_HASHED_DATA);\\r\\n            if (isHashedData && autoParams.data.length != 32) revert WrongAutoArgument();\\r\\n            // auto submission\\r\\n            submissionId = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    packedSubmission,\\r\\n                    autoParams.executionFee,\\r\\n                    autoParams.flags,\\r\\n                    keccak256(autoParams.fallbackAddress),\\r\\n                    isHashedData ? autoParams.data : abi.encodePacked(keccak256(autoParams.data)),\\r\\n                    keccak256(abi.encodePacked(msg.sender))\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        // regular submission\\r\\n        else {\\r\\n            submissionId = keccak256(packedSubmission);\\r\\n        }\\r\\n\\r\\n        emit Sent(\\r\\n            submissionId,\\r\\n            _debridgeId,\\r\\n            _amount,\\r\\n            _receiver,\\r\\n            nonce,\\r\\n            _chainIdTo,\\r\\n            _referralCode,\\r\\n            feeParams,\\r\\n            hasAutoParams ? abi.encode(autoParams): bytes(\\\"\\\"),\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        {\\r\\n            emit MonitoringSendEvent(\\r\\n                submissionId,\\r\\n                nonce,\\r\\n                getDebridge[_debridgeId].balance,\\r\\n                IERC20Upgradeable(getDebridge[_debridgeId].tokenAddress).totalSupply()\\r\\n            );\\r\\n        }\\r\\n\\r\\n        nonce++;\\r\\n    }\\r\\n\\r\\n    function _applyDiscount(\\r\\n        uint256 amount,\\r\\n        uint16 discountBps\\r\\n    ) internal pure returns (uint256) {\\r\\n        return amount - amount * discountBps / BPS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    function _validateToken(address _token) internal {\\r\\n        if (_token == address(0)) {\\r\\n            // no validation for native tokens\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // check existence of decimals method\\r\\n        (bool success, ) = _token.call(abi.encodeWithSignature(\\\"decimals()\\\"));\\r\\n        if (!success) revert InvalidTokenToSend();\\r\\n\\r\\n        // check existence of symbol method\\r\\n        (success, ) = _token.call(abi.encodeWithSignature(\\\"symbol()\\\"));\\r\\n        if (!success) revert InvalidTokenToSend();\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev Unlock the asset on the current chain and transfer to receiver.\\r\\n    /// @param _debridgeId Asset identifier.\\r\\n    /// @param _receiver Receiver address.\\r\\n    /// @param _amount Amount of the transfered asset (note: the fee can be applyed).\\r\\n    function _claim(\\r\\n        bytes32 _submissionId,\\r\\n        bytes32 _debridgeId,\\r\\n        address _receiver,\\r\\n        uint256 _amount,\\r\\n        uint256 _chainIdFrom,\\r\\n        SubmissionAutoParamsFrom memory _autoParams\\r\\n    ) internal returns (bool isNativeToken) {\\r\\n        DebridgeInfo storage debridge = getDebridge[_debridgeId];\\r\\n        if (!debridge.exist) revert DebridgeNotFound();\\r\\n        isNativeToken = debridge.chainId == getChainId();\\r\\n\\r\\n        if (isNativeToken) {\\r\\n            debridge.balance -= _amount + _autoParams.executionFee;\\r\\n        } else {\\r\\n            debridge.balance += _amount + _autoParams.executionFee;\\r\\n        }\\r\\n\\r\\n        address _token = debridge.tokenAddress;\\r\\n        bool unwrapETH = isNativeToken\\r\\n            && _autoParams.flags.getFlag(Flags.UNWRAP_ETH)\\r\\n            && _token == address(weth);\\r\\n\\r\\n        if (_autoParams.executionFee > 0) {\\r\\n            _mintOrTransfer(_token, msg.sender, _autoParams.executionFee, isNativeToken);\\r\\n        }\\r\\n        if (_autoParams.data.length > 0) {\\r\\n            // use local variable to reduce gas usage\\r\\n            address _callProxy = callProxy;\\r\\n            bool status;\\r\\n            if (unwrapETH) {\\r\\n                // withdraw weth to callProxy directly\\r\\n                _withdrawWeth(_callProxy, _amount);\\r\\n                status = ICallProxy(_callProxy).call(\\r\\n                    _autoParams.fallbackAddress,\\r\\n                    _receiver,\\r\\n                    _autoParams.data,\\r\\n                    _autoParams.flags,\\r\\n                    _autoParams.nativeSender,\\r\\n                    _chainIdFrom\\r\\n                );\\r\\n            }\\r\\n            else {\\r\\n                _mintOrTransfer(_token, _callProxy, _amount, isNativeToken);\\r\\n\\r\\n                status = ICallProxy(_callProxy).callERC20(\\r\\n                    _token,\\r\\n                    _autoParams.fallbackAddress,\\r\\n                    _receiver,\\r\\n                    _autoParams.data,\\r\\n                    _autoParams.flags,\\r\\n                    _autoParams.nativeSender,\\r\\n                    _chainIdFrom\\r\\n                );\\r\\n            }\\r\\n            emit AutoRequestExecuted(_submissionId, status, _callProxy);\\r\\n        } else if (unwrapETH) {\\r\\n            // transferring WETH with unwrap flag\\r\\n            _withdrawWeth(_receiver, _amount);\\r\\n        } else {\\r\\n            _mintOrTransfer(_token, _receiver, _amount, isNativeToken);\\r\\n        }\\r\\n\\r\\n        emit MonitoringClaimEvent(\\r\\n            _submissionId,\\r\\n            debridge.balance,\\r\\n            IERC20Upgradeable(debridge.tokenAddress).totalSupply()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mintOrTransfer(\\r\\n        address _token,\\r\\n        address _receiver,\\r\\n        uint256 _amount,\\r\\n        bool isNativeToken\\r\\n    ) internal {\\r\\n        if (_amount > 0) {\\r\\n            if (isNativeToken) {\\r\\n                IERC20Upgradeable(_token).safeTransfer(_receiver, _amount);\\r\\n            } else {\\r\\n                IDeBridgeToken(_token).mint(_receiver, _amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @dev transfer ETH to an address, revert if it fails.\\r\\n    * @param to recipient of the transfer\\r\\n    * @param value the amount to send\\r\\n    */\\r\\n    function _safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        if (!success) revert EthTransferFailed();\\r\\n    }\\r\\n\\r\\n\\r\\n    function _withdrawWeth(address _receiver, uint _amount) internal {\\r\\n        if (address(wethGate) == address(0)) {\\r\\n            // dealing with weth withdraw affected by EIP1884\\r\\n            weth.withdraw(_amount);\\r\\n            _safeTransferETH(_receiver, _amount);\\r\\n        }\\r\\n        else {\\r\\n            IERC20Upgradeable(address(weth)).safeTransfer(address(wethGate), _amount);\\r\\n            wethGate.withdraw(_receiver, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * @dev round down token amount\\r\\n    * @param _token address of token, zero for native tokens\\r\\n    * @param __amount amount for rounding\\r\\n    */\\r\\n    function _normalizeTokenAmount(\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 decimals = _token == address(0)\\r\\n            ? 18\\r\\n            : IERC20Metadata(_token).decimals();\\r\\n        uint256 maxDecimals = 8;\\r\\n        if (decimals > maxDecimals) {\\r\\n            uint256 multiplier = 10 ** (decimals - maxDecimals);\\r\\n            _amount = _amount / multiplier * multiplier;\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /* VIEW */\\r\\n\\r\\n    /// @inheritdoc IDeBridgeGate\\r\\n    function getDefiAvaliableReserves(address _tokenAddress)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        DebridgeInfo storage debridge = getDebridge[getDebridgeId(getChainId(), _tokenAddress)];\\r\\n        return (debridge.balance * (BPS_DENOMINATOR - debridge.minReservesBps)) / BPS_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    /// @dev Calculates asset identifier.\\r\\n    /// @param _chainId Current chain id.\\r\\n    /// @param _tokenAddress Address of the asset on the other chain.\\r\\n    function getDebridgeId(uint256 _chainId, address _tokenAddress) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\\r\\n    }\\r\\n\\r\\n    /// @dev Calculates asset identifier.\\r\\n    /// @param _chainId Current chain id.\\r\\n    /// @param _tokenAddress Address of the asset on the other chain.\\r\\n    function getbDebridgeId(uint256 _chainId, bytes memory _tokenAddress) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDeBridgeGate\\r\\n    function getDebridgeChainAssetFixedFee(\\r\\n        bytes32 _debridgeId,\\r\\n        uint256 _chainId\\r\\n    ) external view override returns (uint256) {\\r\\n        // if (!getDebridge[_debridgeId].exist) revert DebridgeNotFound();\\r\\n        return getDebridgeFeeInfo[_debridgeId].getChainFee[_chainId];\\r\\n    }\\r\\n\\r\\n    /// @dev Calculate submission id for auto claimable transfer.\\r\\n    /// @param _debridgeId Asset identifier.\\r\\n    /// @param _chainIdFrom Chain identifier of the chain where tokens are sent from.\\r\\n    /// @param _amount Amount of the transferred asset (note: the fee can be applied).\\r\\n    /// @param _receiver Receiver address.\\r\\n    /// @param _nonce Submission id.\\r\\n    /// @param _autoParams Auto params for external call\\r\\n    /// @param _hasAutoParams True if auto params are provided\\r\\n    /// @param _sender Address that will call claim\\r\\n    function getSubmissionIdFrom(\\r\\n        bytes32 _debridgeId,\\r\\n        uint256 _chainIdFrom,\\r\\n        uint256 _amount,\\r\\n        address _receiver,\\r\\n        uint256 _nonce,\\r\\n        SubmissionAutoParamsFrom memory _autoParams,\\r\\n        bool _hasAutoParams,\\r\\n        address _sender\\r\\n    ) public view returns (bytes32) {\\r\\n        bytes memory packedSubmission = abi.encodePacked(\\r\\n            SUBMISSION_PREFIX,\\r\\n            _debridgeId,\\r\\n            _chainIdFrom,\\r\\n            getChainId(),\\r\\n            _amount,\\r\\n            _receiver,\\r\\n            _nonce\\r\\n        );\\r\\n        if (_hasAutoParams) {\\r\\n            // Needed to let fallback address claim tokens in case user lost call data and can't restore its' hash\\r\\n            bool isHashedData = _autoParams.flags.getFlag(Flags.SEND_HASHED_DATA)\\r\\n                             && _sender == _autoParams.fallbackAddress\\r\\n                             && _autoParams.data.length == 32;\\r\\n\\r\\n            // auto submission\\r\\n            return keccak256(\\r\\n                abi.encodePacked(\\r\\n                    packedSubmission,\\r\\n                    _autoParams.executionFee,\\r\\n                    _autoParams.flags,\\r\\n                    keccak256(abi.encodePacked(_autoParams.fallbackAddress)),\\r\\n                    isHashedData ? _autoParams.data : abi.encodePacked(keccak256(_autoParams.data)),\\r\\n                    keccak256(_autoParams.nativeSender)\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n        // regular submission\\r\\n        return keccak256(packedSubmission);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /// @dev Calculates asset identifier for deployment.\\r\\n    /// @param _debridgeId Id of an asset, see getDebridgeId.\\r\\n    /// @param _name Asset's name.\\r\\n    /// @param _symbol Asset's symbol.\\r\\n    /// @param _decimals Asset's decimals.\\r\\n    function getDeployId(\\r\\n        bytes32 _debridgeId,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimals\\r\\n    ) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\r\\n            DEPLOY_PREFIX,\\r\\n            _debridgeId,\\r\\n            keccak256(abi.encodePacked(_name)),\\r\\n            keccak256(abi.encodePacked(_symbol)),\\r\\n            _decimals));\\r\\n    }\\r\\n\\r\\n    /// @dev Get current chain id\\r\\n    function getChainId() public view virtual returns (uint256 cid) {\\r\\n        assembly {\\r\\n            cid := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Version Control ============\\r\\n    /// @dev Get this contract's version\\r\\n    function version() external pure returns (uint256) {\\r\\n        return 410; // 4.1.0\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/NFT/DeBridgeNFTDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./DeNFT.sol\\\";\\r\\nimport \\\"../periphery/DeBridgeTokenProxy.sol\\\";\\r\\n\\r\\ncontract DeBridgeNFTDeployer is Initializable, AccessControlUpgradeable {\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    /// @dev Address of deNFT beacon\\r\\n    address public beacon;\\r\\n    /// @dev Debridge gate address\\r\\n    address public nftBridgeAddress;\\r\\n    /// @dev Maps debridge id to deBridgeToken address\\r\\n    mapping(bytes32 => address) public deployedAssetAddresses;\\r\\n\\r\\n    /// @dev Count of deployed NFT's\\r\\n    uint256 nonce;\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    error WrongArgument();\\r\\n    error DeployedAlready();\\r\\n\\r\\n    error AdminBadRole();\\r\\n    error NFTBridgeBadRole();\\r\\n    error DuplicateDebrdigeId();\\r\\n\\r\\n    error ZeroAddress();\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNFTBridge() {\\r\\n        if (msg.sender != nftBridgeAddress) revert NFTBridgeBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event NFTDeployed(address asset, string name, string symbol, string baseUri, uint256 nonce);\\r\\n\\r\\n    /* ========== CONSTRUCTOR  ========== */\\r\\n\\r\\n    /// @dev Constructor that initializes the most important configurations.\\r\\n    /// @param _beacon Address of token beacon\\r\\n    /// @param _nftBridgeAddress NFT gate address.\\r\\n    function initialize(address _beacon, address _nftBridgeAddress) public initializer {\\r\\n        if (_beacon == address(0) || _nftBridgeAddress == address(0)) revert ZeroAddress();\\r\\n\\r\\n        beacon = _beacon;\\r\\n        nftBridgeAddress = _nftBridgeAddress;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @dev Deploy a deToken for an asset\\r\\n    /// @param _debridgeId Asset identifier\\r\\n    /// @param _name Asset name\\r\\n    /// @param _symbol Asset symbol\\r\\n    function deployAsset(\\r\\n        bytes32 _debridgeId,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) external onlyNFTBridge returns (address deBridgeTokenAddress) {\\r\\n        if (deployedAssetAddresses[_debridgeId] != address(0)) revert DeployedAlready();\\r\\n\\r\\n        deBridgeTokenAddress = _createNewAssets(nftBridgeAddress, _name, _symbol, \\\"\\\", _debridgeId);\\r\\n\\r\\n        deployedAssetAddresses[_debridgeId] = deBridgeTokenAddress;\\r\\n    }\\r\\n\\r\\n    /// @dev Create NFT\\r\\n    /// @param _name Asset name\\r\\n    /// @param _symbol Asset symbol\\r\\n    function createNFT(address _minter, string memory _name, string memory _symbol, string memory _baseUri)\\r\\n        external\\r\\n        onlyNFTBridge\\r\\n        returns (address deBridgeTokenAddress)\\r\\n    {\\r\\n        deBridgeTokenAddress = _createNewAssets(\\r\\n            _minter,\\r\\n            _name,\\r\\n            _symbol,\\r\\n            _baseUri,\\r\\n            keccak256(abi.encodePacked(nonce))\\r\\n        );\\r\\n        bytes32 debridgeId = getDebridgeId(getChainId(), deBridgeTokenAddress);\\r\\n        if (deployedAssetAddresses[debridgeId] != address(0)) revert DuplicateDebrdigeId();\\r\\n        deployedAssetAddresses[debridgeId] = deBridgeTokenAddress;\\r\\n    }\\r\\n\\r\\n    /* ========== ADMIN ========== */\\r\\n\\r\\n    /// @dev Sets core debridge contract address.\\r\\n    /// @param _nftBridgeAddress Debridge address.\\r\\n    function setNftBridgeAddress(address _nftBridgeAddress) external onlyAdmin {\\r\\n        if (_nftBridgeAddress == address(0)) revert WrongArgument();\\r\\n        nftBridgeAddress = _nftBridgeAddress;\\r\\n    }\\r\\n\\r\\n    // ============ Private methods ============\\r\\n\\r\\n    function _createNewAssets(\\r\\n        address minter,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        string memory _baseUri,\\r\\n        bytes32 salt\\r\\n    ) internal returns (address deBridgeTokenAddress) {\\r\\n        // Initialize args\\r\\n        bytes memory initializationArgs = abi.encodeWithSelector(\\r\\n            DeNFT.initialize.selector,\\r\\n            _name,\\r\\n            _symbol,\\r\\n            _baseUri,\\r\\n            minter,\\r\\n            nftBridgeAddress\\r\\n        );\\r\\n\\r\\n        // initialize Proxy\\r\\n        bytes memory constructorArgs = abi.encode(beacon, initializationArgs);\\r\\n\\r\\n        // deployment code\\r\\n        bytes memory bytecode = abi.encodePacked(\\r\\n            type(DeBridgeTokenProxy).creationCode,\\r\\n            constructorArgs\\r\\n        );\\r\\n\\r\\n        assembly {\\r\\n            // debridgeId is a salt\\r\\n            deBridgeTokenAddress := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\r\\n\\r\\n            if iszero(extcodesize(deBridgeTokenAddress)) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit NFTDeployed(deBridgeTokenAddress, _name, _symbol, _baseUri, nonce);\\r\\n        nonce++;\\r\\n    }\\r\\n\\r\\n    // ============ VIEWS ============\\r\\n\\r\\n    /// @dev Calculates asset identifier.\\r\\n    /// @param _chainId Current chain id.\\r\\n    /// @param _tokenAddress Address of the asset on the other chain.\\r\\n    function getDebridgeId(uint256 _chainId, address _tokenAddress) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\\r\\n    }\\r\\n\\r\\n    /// @dev Get current chain id\\r\\n    function getChainId() public view virtual returns (uint256 cid) {\\r\\n        assembly {\\r\\n            cid := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ============ Version Control ============\\r\\n\\r\\n    /// @dev Get this contract's version\\r\\n    function version() external pure returns (uint256) {\\r\\n        return 100; // 1.0.0\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Flags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nlibrary Flags {\\r\\n\\r\\n    /* ========== FLAGS ========== */\\r\\n\\r\\n    /// @dev Flag to unwrap ETH\\r\\n    uint256 public constant UNWRAP_ETH = 0;\\r\\n    /// @dev Flag to revert if external call fails\\r\\n    uint256 public constant REVERT_IF_EXTERNAL_FAIL = 1;\\r\\n    /// @dev Flag to call proxy with a sender contract\\r\\n    uint256 public constant PROXY_WITH_SENDER = 2;\\r\\n    /// @dev Data is hash in DeBridgeGate send method\\r\\n    uint256 public constant SEND_HASHED_DATA = 3;\\r\\n    /// @dev First 24 bytes from data is gas limit for external call\\r\\n    uint256 public constant SEND_EXTERNAL_CALL_GAS_LIMIT = 4;\\r\\n\\r\\n    /// @dev Get flag\\r\\n    /// @param _packedFlags Flags packed to uint256\\r\\n    /// @param _flag Flag to check\\r\\n    function getFlag(\\r\\n        uint256 _packedFlags,\\r\\n        uint256 _flag\\r\\n    ) internal pure returns (bool) {\\r\\n        uint256 flag = (_packedFlags >> _flag) & uint256(1);\\r\\n        return flag == 1;\\r\\n    }\\r\\n    \\r\\n    /// @dev Set flag\\r\\n    /// @param _packedFlags Flags packed to uint256\\r\\n    /// @param _flag Flag to set\\r\\n    /// @param _value Is set or not set\\r\\n     function setFlag(\\r\\n         uint256 _packedFlags,\\r\\n         uint256 _flag,\\r\\n         bool _value\\r\\n     ) internal pure returns (uint256) {\\r\\n         if (_value)\\r\\n             return _packedFlags | uint256(1) << _flag;\\r\\n         else\\r\\n             return _packedFlags & ~(uint256(1) << _flag);\\r\\n     }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/interfaces/IERC4494.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/// @title IERC721WithPermit\\r\\n/// @author Simon Fremaux (@dievardump) & William Schwab\\r\\n/// @notice Required interface\\r\\ninterface IERC4494 {\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    /// @notice Allows to retrieve current nonce for token\\r\\n    /// @param tokenId token id\\r\\n    /// @return current token nonce\\r\\n    function nonces(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n    /// @notice function to be called by anyone to approve `spender` using a Permit signature\\r\\n    /// @dev Anyone can call this to approve `spender`, even a third-party\\r\\n    /// @param spender the actor to approve\\r\\n    /// @param tokenId the token id\\r\\n    /// @param deadline the deadline for the permit to be used\\r\\n    /// @param signature permit\\r\\n    function permit(\\r\\n        address spender,\\r\\n        uint256 tokenId,\\r\\n        uint256 deadline,\\r\\n        bytes memory signature\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDeBridgeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IERC20Permit.sol\\\";\\r\\n\\r\\ninterface IDeBridgeToken is IERC20Upgradeable, IERC20Permit {\\r\\n    /// @dev Issues new tokens.\\r\\n    /// @param _receiver Token's receiver.\\r\\n    /// @param _amount Amount to be minted.\\r\\n    function mint(address _receiver, uint256 _amount) external;\\r\\n\\r\\n    /// @dev Destroys existing tokens.\\r\\n    /// @param _amount Amount to be burnt.\\r\\n    function burn(uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDeBridgeTokenDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IDeBridgeTokenDeployer {\\r\\n\\r\\n    /// @dev Deploy a deToken(DeBridgeTokenProxy) for an asset\\r\\n    /// @param _debridgeId Asset id, see DeBridgeGate.getDebridgeId\\r\\n    /// @param _name The asset's name\\r\\n    /// @param _symbol The asset's symbol\\r\\n    /// @param _decimals The asset's decimals\\r\\n    function deployAsset(\\r\\n        bytes32 _debridgeId,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimals\\r\\n    ) external returns (address deTokenAddress);\\r\\n\\r\\n    /// @dev Emitted when a deToken(DeBridgeTokenProxy) is deployed using this contract\\r\\n    event DeBridgeTokenDeployed(\\r\\n        address asset,\\r\\n        string name,\\r\\n        string symbol,\\r\\n        uint8 decimals\\r\\n    );\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISignatureVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface ISignatureVerifier {\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /// @dev Emitted once the submission is confirmed by one oracle.\\r\\n    event Confirmed(bytes32 submissionId, address operator);\\r\\n    /// @dev Emitted once the submission is confirmed by min required amount of oracles.\\r\\n    event DeployConfirmed(bytes32 deployId, address operator);\\r\\n\\r\\n    /* ========== FUNCTIONS ========== */\\r\\n\\r\\n    /// @dev Check confirmation (validate signatures) for the transfer request.\\r\\n    /// @param _submissionId Submission identifier.\\r\\n    /// @param _signatures Array of signatures by oracles.\\r\\n    /// @param _excessConfirmations override min confirmations count\\r\\n    function submit(\\r\\n        bytes32 _submissionId,\\r\\n        bytes memory _signatures,\\r\\n        uint8 _excessConfirmations\\r\\n    ) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlashCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/// @title Callback for IDeBridgeGate#flash\\r\\n/// @notice Any contract that calls IDeBridgeGate#flash must implement this interface\\r\\ninterface IFlashCallback {\\r\\n    /// @param fee The fee amount in token due to the pool by the end of the flash\\r\\n    /// @param data Any data passed through by the caller via the IDeBridgeGate#flash call\\r\\n    function flashCallback(uint256 fee, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SignatureUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nlibrary SignatureUtil {\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    error WrongArgumentLength();\\r\\n    error SignatureInvalidLength();\\r\\n    error SignatureInvalidV();\\r\\n\\r\\n    /// @dev Prepares raw msg that was signed by the oracle.\\r\\n    /// @param _submissionId Submission identifier.\\r\\n    function getUnsignedMsg(bytes32 _submissionId) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _submissionId));\\r\\n    }\\r\\n\\r\\n    /// @dev Splits signature bytes to r,s,v components.\\r\\n    /// @param _signature Signature bytes in format r+s+v.\\r\\n    function splitSignature(bytes memory _signature)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        if (_signature.length != 65) revert SignatureInvalidLength();\\r\\n        return parseSignature(_signature, 0);\\r\\n    }\\r\\n\\r\\n    function parseSignature(bytes memory _signatures, uint256 offset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        assembly {\\r\\n            r := mload(add(_signatures, add(32, offset)))\\r\\n            s := mload(add(_signatures, add(64, offset)))\\r\\n            v := and(mload(add(_signatures, add(65, offset))), 0xff)\\r\\n        }\\r\\n\\r\\n        if (v < 27) v += 27;\\r\\n        if (v != 27 && v != 28) revert SignatureInvalidV();\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _offset)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        if (_bytes.length < _offset + 32) revert WrongArgumentLength();\\r\\n\\r\\n        assembly {\\r\\n            result := mload(add(add(_bytes, 0x20), _offset))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IWethGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IWethGate {\\r\\n    /// @dev Transfer assets to a receiver.\\r\\n    /// @param receiver This address will receive a transfer.\\r\\n    /// @param wad Amount in wei\\r\\n    function withdraw(address receiver, uint wad) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/DeNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./ERC721WithPermitUpgradable.sol\\\";\\r\\nimport \\\"./interfaces/IDeNFT.sol\\\";\\r\\n\\r\\ncontract DeNFT is ERC721WithPermitUpgradable, IDeNFT {\\r\\n    using StringsUpgradeable for uint256;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n\\r\\n    string private _baseURIValue;\\r\\n\\r\\n    address minter;\\r\\n    address deNFTBridge;\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    error MinterBadRole();\\r\\n    error ZeroAddress();\\r\\n    error WrongLengthOfArguments();\\r\\n\\r\\n    /* ========== MODIFIER ========== */\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        if (minter != msg.sender) revert MinterBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event MinterTransferred(address indexed previousMinter, address indexed newMinter);\\r\\n\\r\\n    /* ========== CONSTRUCTOR  ========== */\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        string memory baseURI_,\\r\\n        address minter_,\\r\\n        address deNFTBridge_\\r\\n    ) public initializer {\\r\\n        if (deNFTBridge_ == address(0) || minter_ == address(0)) revert ZeroAddress();\\r\\n        __DeNFT_init(name_, symbol_, baseURI_, minter_, deNFTBridge_);\\r\\n    }\\r\\n\\r\\n    function __DeNFT_init(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        string memory baseURI_,\\r\\n        address minter_,\\r\\n        address deNFTBridge_\\r\\n    ) internal initializer {\\r\\n        __ERC721WithPermitUpgradable_init(name_, symbol_);\\r\\n        __ERC721WithPermitUpgradable_init_unchained(baseURI_, minter_, deNFTBridge_);\\r\\n    }\\r\\n\\r\\n    function __ERC721WithPermitUpgradable_init_unchained(\\r\\n        string memory baseURI_,\\r\\n        address minter_,\\r\\n        address deNFTBridge_\\r\\n    ) internal initializer {\\r\\n        minter = minter_;\\r\\n        _baseURIValue = baseURI_;\\r\\n        deNFTBridge = deNFTBridge_;\\r\\n    }\\r\\n\\r\\n    /* ========== PUBLIC METHODS  ========== */\\r\\n\\r\\n    /// @dev Issues a new token\\r\\n    /// @param _to new Token's owner\\r\\n    /// @param _tokenId new Token's id\\r\\n    /// @param _tokenUri new Token's id\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _tokenId,\\r\\n        string memory _tokenUri\\r\\n    ) external override onlyMinter {\\r\\n        _tokenURIs[_tokenId] = _tokenUri;\\r\\n        _safeMint(_to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /// @dev Issues multiple objects at once, taking each object's ID and URI\\r\\n    /// @dev from the given arrays, and transfers each object to the sender\\r\\n    function mintMany(\\r\\n         uint[] memory _tokenIds, string[] memory _tokenUris\\r\\n    ) external  onlyMinter {\\r\\n        mintMany(msg.sender, _tokenIds, _tokenUris);\\r\\n    }\\r\\n\\r\\n    /// @dev Issues multiple objects at once, taking each object's ID and URI\\r\\n    /// @dev from the given arrays, and transfers each object to the given recipient\\r\\n    function mintMany(\\r\\n        address _to,\\r\\n        uint256[] memory _tokenIds,\\r\\n        string[] memory _tokenUris\\r\\n    ) public onlyMinter {\\r\\n        if (_tokenIds.length != _tokenUris.length) revert WrongLengthOfArguments();\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\r\\n            uint256 tokenId = _tokenIds[i];\\r\\n            _tokenURIs[tokenId] = _tokenUris[i];\\r\\n            _safeMint(_to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Issues multiple objects at once, taking each object's ID, URI and\\r\\n    /// @dev desirable recipient @dev from the given arrays\\r\\n    function mintMany(\\r\\n        address[] memory _to,\\r\\n        uint256[] memory _tokenIds,\\r\\n        string[] memory _tokenUris\\r\\n    ) external onlyMinter {\\r\\n        if (_tokenIds.length != _to.length || _tokenIds.length != _tokenUris.length)\\r\\n            revert WrongLengthOfArguments();\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\r\\n            uint256 tokenId = _tokenIds[i];\\r\\n            _tokenURIs[tokenId] = _tokenUris[i];\\r\\n            _safeMint(_to[i], tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferMinter(address nextMinter) external onlyMinter {\\r\\n        emit MinterTransferred(minter, nextMinter);\\r\\n        minter = nextMinter;\\r\\n    }\\r\\n\\r\\n    /// @dev Gives away minter rights to the deBridge NFT gate\\r\\n    /// @dev to make this collection's NFT objects natively transferrable to\\r\\n    /// @dev and from chains supported by deBridge.\\r\\n    function giveawayToDeNFTBridge() external onlyMinter {\\r\\n        emit MinterTransferred(minter, deNFTBridge);\\r\\n        minter = deNFTBridge;\\r\\n    }\\r\\n\\r\\n    /// @dev Destroys the existing token\\r\\n    /// @param _tokenId Id of token\\r\\n    function burn(uint256 _tokenId) public virtual override {\\r\\n        // code from @openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), _tokenId),\\r\\n            \\\"ERC721Burnable: caller is not owner nor approved\\\"\\r\\n        );\\r\\n\\r\\n        _burn(_tokenId);\\r\\n\\r\\n        // code from @openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\r\\n        if (bytes(_tokenURIs[_tokenId]).length != 0) {\\r\\n            delete _tokenURIs[_tokenId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS  ========== */\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _baseURIValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Actual implementation taken from openzeppelin's /contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = _baseURI();\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(base, _tokenURI));\\r\\n        }\\r\\n\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/periphery/DeBridgeTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\r\\n\\r\\n/// @dev This contract implements a proxy that gets the implementation address for each call\\r\\n/// from DeBridgeTokenDeployer. It's deployed by DeBridgeTokenDeployer.\\r\\n/// Implementation is DeBridgeToken.\\r\\ncontract DeBridgeTokenProxy is BeaconProxy {\\r\\n    constructor(address beacon, bytes memory data) BeaconProxy(beacon, data) {\\r\\n\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/NFT/ERC721WithPermitUpgradable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport '@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol';\\r\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\r\\n\\r\\nimport './interfaces/IERC4494.sol';\\r\\n\\r\\n// Based on the reference implementation of the EIP-4494\\r\\n// implemented by Simon Fremaux (@dievardump) & William Schwab (@wschwab)\\r\\n// See https://github.com/dievardump/erc721-with-permits and https://eips.ethereum.org/EIPS/eip-4494\\r\\nabstract contract ERC721WithPermitUpgradable is ERC721Upgradeable, IERC4494 {\\r\\n    bytes32 public constant PERMIT_TYPEHASH =\\r\\n        keccak256(\\r\\n            'Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)'\\r\\n        );\\r\\n\\r\\n    mapping(uint256 => uint256) private _nonces;\\r\\n\\r\\n    // the chainId is also saved to be able to recompute domainSeparator\\r\\n    // in the case of a fork\\r\\n    bytes32 private _domainSeparator;\\r\\n    uint256 private _domainChainId;\\r\\n\\r\\n    function __ERC721WithPermitUpgradable_init(string memory name_, string memory symbol_) internal initializer {\\r\\n        __ERC721_init(name_, symbol_);\\r\\n        __ERC721WithPermitUpgradable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ERC721WithPermitUpgradable_init_unchained() internal initializer {\\r\\n        uint256 chainId;\\r\\n        //solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n\\r\\n        _domainChainId = chainId;\\r\\n        _domainSeparator = _calculateDomainSeparator(chainId);\\r\\n    }\\r\\n\\r\\n    /// @notice Builds the DOMAIN_SEPARATOR (eip712) at time of use\\r\\n    /// @dev This is not set as a constant, to ensure that the chainId will change in the event of a chain fork\\r\\n    /// @return the DOMAIN_SEPARATOR of eip712\\r\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\r\\n        uint256 chainId;\\r\\n        //solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n\\r\\n        return\\r\\n            (chainId == _domainChainId)\\r\\n                ? _domainSeparator\\r\\n                : _calculateDomainSeparator(chainId);\\r\\n    }\\r\\n\\r\\n    function _calculateDomainSeparator(uint256 chainId)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    keccak256(\\r\\n                        'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\r\\n                    ),\\r\\n                    keccak256(bytes(name())),\\r\\n                    keccak256(bytes('1')),\\r\\n                    chainId,\\r\\n                    address(this)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Allows to retrieve current nonce for token\\r\\n    /// @param tokenId token id\\r\\n    /// @return current token nonce\\r\\n    function nonces(uint256 tokenId) public view override returns (uint256) {\\r\\n        require(_exists(tokenId), '!UNKNOWN_TOKEN!');\\r\\n        return _nonces[tokenId];\\r\\n    }\\r\\n\\r\\n    /// @notice function to be called by anyone to approve `spender` using a Permit signature\\r\\n    /// @dev Anyone can call this to approve `spender`, even a third-party\\r\\n    /* /// @param owner the owner of the token */\\r\\n    /// @param spender the actor to approve\\r\\n    /// @param tokenId the token id\\r\\n    /// @param deadline the deadline for the permit to be used\\r\\n    /// @param signature permit\\r\\n    function permit(\\r\\n        address spender,\\r\\n        uint256 tokenId,\\r\\n        uint256 deadline,\\r\\n        bytes memory signature\\r\\n    ) external override {\\r\\n        require(deadline >= block.timestamp, 'permit expired');\\r\\n\\r\\n        bytes32 digest = _buildDigest(\\r\\n            spender,\\r\\n            tokenId,\\r\\n            _nonces[tokenId],\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        (address recoveredAddress, ) = ECDSA.tryRecover(digest, signature);\\r\\n        require(\\r\\n            // verify if the recovered address is owner or approved on tokenId\\r\\n            // and make sure recoveredAddress is not address(0), else getApproved(tokenId) might match\\r\\n            (recoveredAddress != address(0) &&\\r\\n                _isApprovedOrOwner(recoveredAddress, tokenId)) ||\\r\\n                // else try to recover signature using SignatureChecker, which also allows to recover signature made by contracts\\r\\n                SignatureChecker.isValidSignatureNow(\\r\\n                    ownerOf(tokenId),\\r\\n                    digest,\\r\\n                    signature\\r\\n                ),\\r\\n            'permit is invalid'\\r\\n        );\\r\\n\\r\\n        _approve(spender, tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Builds the permit digest to sign\\r\\n    /// @param spender the token spender\\r\\n    /// @param tokenId the tokenId\\r\\n    /// @param nonce the nonce to make a permit for\\r\\n    /// @param deadline the deadline before when the permit can be used\\r\\n    /// @return the digest (following eip712) to sign\\r\\n    function _buildDigest(\\r\\n        address spender,\\r\\n        uint256 tokenId,\\r\\n        uint256 nonce,\\r\\n        uint256 deadline\\r\\n    ) public view returns (bytes32) {\\r\\n        return\\r\\n            ECDSA.toTypedDataHash(\\r\\n                DOMAIN_SEPARATOR(),\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        PERMIT_TYPEHASH,\\r\\n                        spender,\\r\\n                        tokenId,\\r\\n                        nonce,\\r\\n                        deadline\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev helper to easily increment a nonce for a given tokenId\\r\\n    /// @param tokenId the tokenId to increment the nonce for\\r\\n    function _incrementNonce(uint256 tokenId) internal {\\r\\n        _nonces[tokenId]++;\\r\\n    }\\r\\n\\r\\n    /// @dev _transfer override to be able to increment the nonce\\r\\n    /// @inheritdoc ERC721Upgradeable\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override {\\r\\n        // increment the nonce to be sure it can't be reused\\r\\n        _incrementNonce(tokenId);\\r\\n\\r\\n        // do normal transfer\\r\\n        super._transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /// @notice Query if a contract implements an interface\\r\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\r\\n    /// @dev Overriden from ERC721 here in order to include the interface of this EIP\\r\\n    /// @return `true` if the contract implements `interfaceID` and\\r\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC4494).interfaceId\\r\\n            || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // Reserved storage space to allow for layout changes in the future.\\r\\n    // solhint-disable-next-line ordering\\r\\n    uint256[47] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\\n * ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with\\n * smart contract wallets such as Argent and Gnosis.\\n *\\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\\n * through time. It could return true at block N and false at block N+1 (or the opposite).\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AdminBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallProxyBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainToIsNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebridgeTokenInfoNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageValueDoesNotMatchRequiredFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nativeSender\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"chainIdFrom\",\"type\":\"uint256\"}],\"name\":\"NativeSenderBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotReceivedERC721\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMustImplementIERC721Metadata\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"AddedChainSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"NFTClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"debridgeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"nativeAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sybmol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"NFTContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"NFTSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RemovedChainSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_BURNABLE_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bridgeAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"addChainSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"}],\"name\":\"createNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createdTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deBridgeGate\",\"outputs\":[{\"internalType\":\"contract DeBridgeGate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deBridgeNFTDeployer\",\"outputs\":[{\"internalType\":\"contract DeBridgeNFTDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getBridgeNFTInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getChainInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"nftBridgeAddress\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_tokenAddress\",\"type\":\"bytes\"}],\"name\":\"getDebridgeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getDebridgeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getNativeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"tokenAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DeBridgeGate\",\"name\":\"_deBridgeGate\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_nativeTokenAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nativeChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_nativeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nativeSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"removeChainSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_permitSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_chainIdTo\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_referralCode\",\"type\":\"uint32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DeBridgeGate\",\"name\":\"_deBridgeGate\",\"type\":\"address\"}],\"name\":\"setDeBridgeGate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DeBridgeNFTDeployer\",\"name\":\"_deBridgeNFTDeployer\",\"type\":\"address\"}],\"name\":\"setNFTDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "NFTBridge", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}