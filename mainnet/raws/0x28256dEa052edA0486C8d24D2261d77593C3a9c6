{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/IERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ystream/IYieldStream.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract IYieldStream{\r\n\r\n  string public name;\r\n\r\n  function target_token() public view returns(address);\r\n\r\n  function getVirtualPrice() public view returns(uint256);\r\n\r\n  function getDecimal() public pure returns(uint256);\r\n\r\n  function getPriceDecimal() public pure returns(uint256);\r\n}\r\n\r\n// File: contracts/utils/SafeMath.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a, \"add\");\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a, \"sub\");\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"mul\");\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0, \"div\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// File: contracts/core/HEnv.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\ncontract HEnv is Ownable{\r\n\r\n  address public token_addr;\r\n\r\n  address public fee_pool_addr;\r\n\r\n  uint256 public ratio_base;\r\n  uint256 public withdraw_fee_ratio;\r\n  uint256 public cancel_fee_ratio;\r\n\r\n  constructor(address _target_token) public{\r\n    token_addr = _target_token;\r\n    ratio_base = 100000000;\r\n  }\r\n\r\n  function changeFeePoolAddr(address _new) public onlyOwner{\r\n    fee_pool_addr = _new;\r\n  }\r\n\r\n  function changeWithdrawFeeRatio(uint256 _ratio) public onlyOwner{\r\n    require(_ratio < ratio_base, \"ratio too large\");\r\n    withdraw_fee_ratio = _ratio;\r\n  }\r\n\r\n  function changeCancelFeeRatio(uint256 _ratio) public onlyOwner{\r\n    require(_ratio < ratio_base, \"ratio too large\");\r\n    cancel_fee_ratio = _ratio;\r\n  }\r\n}\r\n\r\n\r\ncontract HEnvFactory{\r\n  event NewHEnv(address addr);\r\n  function createHEnv(address _target_token) public returns (address){\r\n    HEnv env = new HEnv(_target_token);\r\n    env.transferOwnership(msg.sender);\r\n    emit NewHEnv(address(env));\r\n    return address(env);\r\n  }\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: contracts/erc20/SafeERC20.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/utils/AddressArray.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] memory self, address addr) public pure returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] memory self, address addr) public pure returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/erc20/ERC20Impl.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes memory _data\r\n    ) public;\r\n}\r\ncontract TransferEventCallBack{\r\n  function onTransfer(address _from, address _to, uint256 _amount) public;\r\n}\r\n\r\ncontract ERC20Base {\r\n    string public name;                //The Token's name: e.g. GTToken\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = \"GTT_0.1\"; //An arbitrary versioning scheme\r\n\r\n    using AddressArray for address[];\r\n    address[] public transferListeners;\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n    event NewTransferListener(address _addr);\r\n    event RemoveTransferListener(address _addr);\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct Checkpoint {\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    ERC20Base public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a ERC20Base\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    constructor(\r\n        ERC20Base _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        bool _transfersEnabled\r\n    )  public\r\n    {\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = _parentToken;\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // The standard ERC 20 transferFrom functionality\r\n        if (allowed[_from][msg.sender] < _amount)\r\n            return false;\r\n        allowed[_from][msg.sender] -= _amount;\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\r\n        if (_amount == 0) {\r\n            return true;\r\n        }\r\n        require(parentSnapShotBlock < block.number);\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n        require((_to != address(0)) && (_to != address(this)));\r\n        // If the amount being transfered is more than the balance of the\r\n        //  account the transfer returns false\r\n        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n        if (previousBalanceFrom < _amount) {\r\n            return false;\r\n        }\r\n        // First update the balance array with the new value for the address\r\n        //  sending the tokens\r\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n        // Then update the balance array with the new value for the address\r\n        //  receiving the tokens\r\n        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n        // An event to make the transfer easy to find on the blockchain\r\n        \r\n        emit Transfer(_from, _to, _amount);\r\n        onTransferDone(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes memory _extraData) public returns (bool success) {\r\n        require(approve(address(_spender), _amount));\r\n\r\n        _spender.receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            address(this),\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public view returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != address(0)) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function _generateTokens(address _owner, uint _amount) internal returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        emit Transfer(address(0), _owner, _amount);\r\n        onTransferDone(address(0), _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function _destroyTokens(address _owner, uint _amount) internal returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        emit Transfer(_owner, address(0), _amount);\r\n        onTransferDone(_owner, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function _enableTransfers(bool _transfersEnabled) internal {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\r\n        if (checkpoints.length == 0)\r\n            return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock)\r\n            return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n\r\n    function onTransferDone(address _from, address _to, uint256 _amount) internal {\r\n      for(uint i = 0; i < transferListeners.length; i++){\r\n        TransferEventCallBack t = TransferEventCallBack(transferListeners[i]);\r\n        t.onTransfer(_from, _to, _amount);\r\n      }\r\n    }\r\n\r\n    function _addTransferListener(address _addr) internal {\r\n      transferListeners.push(_addr);\r\n      emit NewTransferListener(_addr);\r\n    }\r\n    function _removeTransferListener(address _addr) internal{\r\n      transferListeners.remove(_addr);\r\n      emit RemoveTransferListener(_addr);\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    //function () external payable {\r\n        //require(false, \"cannot transfer ether to this contract\");\r\n    //}\r\n}\r\n\r\n// File: contracts/TrustListTools.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\ncontract TrustListInterface{\r\n  function is_trusted(address addr) public returns(bool);\r\n}\r\ncontract TrustListTools is Ownable{\r\n  TrustListInterface public trustlist;\r\n\r\n  modifier is_trusted(address addr){\r\n    require(trustlist != TrustListInterface(0x0), \"trustlist is 0x0\");\r\n    require(trustlist.is_trusted(addr), \"not a trusted issuer\");\r\n    _;\r\n  }\r\n\r\n  event ChangeTrustList(address _old, address _new);\r\n  function changeTrustList(address _addr) public onlyOwner{\r\n    address old = address(trustlist);\r\n    trustlist = TrustListInterface(_addr);\r\n    emit ChangeTrustList(old, _addr);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/core/HToken.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HToken is ERC20Base, Ownable{\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n\r\n  address public target;\r\n  uint256 public ratio_to_target;\r\n  //uint256 public types; // 1 for in,2 for out, 3 for long term\r\n  mapping (bytes32 => uint256) public extra;//record extra information of the token, including the round, type and ratio\r\n\r\n  constructor(string memory _name, string memory _symbol, bool _transfersEnabled)\r\n  ERC20Base(ERC20Base(address(0x0)), 0, _name, 18, _symbol, _transfersEnabled) public{}\r\n\r\n  function reconstruct(string memory _name, string memory _symbol, bool _transfersEnabled) public onlyOwner{\r\n    name = _name;\r\n    symbol = _symbol;\r\n    transfersEnabled = _transfersEnabled;\r\n  }\r\n\r\n  function mint(address addr, uint256 amount) onlyOwner public{\r\n    _generateTokens(addr, amount);\r\n  }\r\n  function burnFrom(address addr, uint256 amount) onlyOwner public{\r\n    _destroyTokens(addr, amount);\r\n  }\r\n\r\n  function set_extra(bytes32 _target, uint256 _value) onlyOwner public{\r\n    extra[_target] = _value;\r\n  }\r\n\r\n  function set_target(address _target) onlyOwner public{\r\n    target = _target;\r\n  }\r\n\r\n  function addTransferListener(address _addr) public onlyOwner{\r\n    _addTransferListener(_addr);\r\n  }\r\n  function removeTransferListener(address _addr) public onlyOwner{\r\n    _removeTransferListener(_addr);\r\n  }\r\n\r\n  event HTokenSetRatioToTarget(uint256 ratio_to);\r\n  function set_ratio_to_target(uint256 _ratio_to) onlyOwner public{\r\n    ratio_to_target = _ratio_to;\r\n    emit HTokenSetRatioToTarget(_ratio_to);\r\n  }\r\n}\r\n\r\ncontract HTokenFactoryInterface{\r\n  function createHToken(string memory _name, string memory _symbol, bool _transfersEnabled) public returns(address);\r\n  function destroyHToken(address addr) public;\r\n}\r\n\r\ncontract HTokenFactory is HTokenFactoryInterface{\r\n  event NewHToken(address addr);\r\n  event DestroyHToken(address addr);\r\n  function createHToken(string memory _name, string memory _symbol, bool _transfersEnabled) public returns(address){\r\n    HToken pt = new HToken(_name, _symbol, _transfersEnabled);\r\n    pt.transferOwnership(msg.sender);\r\n    emit NewHToken(address(pt));\r\n    return address(pt);\r\n  }\r\n  function destroyHToken(address addr) public{\r\n    //TODO, we choose do nothing here\r\n    emit DestroyHToken(addr);\r\n  }\r\n}\r\n\r\n// File: contracts/core/HInterfaces.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\ncontract HLongTermInterface{\r\n  function isRoundEnd(uint256 _period) public returns(bool);\r\n  function getCurrentRound() public returns(uint256);\r\n  function getRoundLength(uint256 _round) public view returns(uint256);\r\n  function updatePeriodStatus() public returns(bool);\r\n}\r\ncontract HTokenInterfaceGK{\r\n  function mint(address addr, uint256 amount) public;\r\n  function burnFrom(address addr, uint256 amount) public;\r\n  function set_ratio_to_target(uint256 _balance) public;\r\n  function set_extra(bytes32 _target, uint256 _value) public;\r\n  function set_target(address _target) public;\r\n  mapping (bytes32 => uint256) public extra;\r\n  uint256 public ratio_to_target;\r\n  function transferOwnership(address addr) public;\r\n  function addTransferListener(address _addr) public;\r\n  function removeTransferListener(address _addr) public;\r\n}\r\ncontract HTokenAggregatorInterface{\r\n  function mint(address gk, uint256 round, uint256 ratio, uint256 _type, uint256 amount, address recv) public;\r\n  function burn(address gk, uint256 round, uint256 ratio, uint256 _type, uint256 amount, address recv) public;\r\n  function balanceOf(address gk, uint256 round, uint256 ratio, uint256 _type, address recv) public view returns(uint256);\r\n  function totalSupply(address gk, uint256 round, uint256 ratio, uint256 _type) public view returns(uint256);\r\n  function getRatioTo(address gk, uint256 round, uint256 ratio, uint256 _type) public view returns(uint256);\r\n  function setRatioTo(address gk, uint256 round, uint256 ratio, uint256 _type, uint256 ratio_to) public;\r\n\r\n}\r\ncontract HDispatcherInterface{\r\n  function getYieldStream(address _token_addr) public view returns (IYieldStream);\r\n}\r\ncontract MinterInterfaceGK{\r\n  function handle_bid_ratio(address addr, uint256 amount, uint256 ratio, uint256 round) public;\r\n  function handle_withdraw(address addr, uint256 amount, uint256 ratio, uint256 round) public;\r\n  function handle_cancel_withdraw(address addr, uint256 amount, uint256 ratio, uint256 round) public;\r\n  function loop_prepare(uint256 fix_supply, uint256 float_supply, uint256 length, uint256 start_price, uint256 end_price) public;\r\n  function handle_settle_round(uint256 ratio, uint256 ratio_to, uint256 intoken_ratio, uint256 lt_amount_in_ratio, uint256 nt) public;\r\n  function handle_cancel_bid(address addr, uint256 amount, uint256 ratio, uint256 round) public;\r\n}\r\n\r\n// File: contracts/core/HGateKeeperParam.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\nlibrary HGateKeeperParam{\r\n  struct round_price_info{\r\n    uint256 start_price;\r\n    uint256 end_price;\r\n  } //the start/end price of target token in a round.\r\n\r\n  struct settle_round_param_info{\r\n                      uint256 _round;\r\n                       HDispatcherInterface dispatcher;\r\n                       address target_token;\r\n                       MinterInterfaceGK minter;\r\n                       HLongTermInterface long_term;\r\n                       HTokenAggregatorInterface aggr;\r\n                       uint256[] sratios;\r\n                       uint256 env_ratio_base;\r\n                       address float_longterm_token;\r\n                       address yield_interest_pool;\r\n                       uint256 start_price;\r\n                       uint256 end_price;\r\n                       uint256 total_target_token;\r\n                       uint256 total_target_token_next_round;\r\n                       uint256 left;\r\n\r\n  }\r\n}\r\n\r\n// File: contracts/core/HGateKeeperHelper.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary HGateKeeperHelper{\r\n\r\n  using SafeMath for uint;\r\n  using SafeERC20 for IERC20;\r\n  event ThrowError(address gatekeeper, uint256 round, uint256 ratio);\r\n\r\n  function _settle_round_for_one_ratio(HGateKeeperParam.settle_round_param_info storage info,\r\n                        //mapping (uint256 => uint256) storage total_target_token_in_round,\r\n                        mapping (bytes32 => uint256) storage target_token_amount_in_round_and_ratio,\r\n                        mapping (bytes32 => uint256) storage long_term_token_amount_in_round_and_ratio,\r\n                        uint256 i\r\n      ) internal returns(uint256 s){\r\n      // \"hashs\" and \"hasht\" corresponds to the index (hash) of the pair (_round, sratios[i]) and (_round + 1, sratios[i]),\r\n      // the i-th ratio with current round, and the i-th ratio with the next round respectively.\r\n      bytes32 hashs = keccak256(abi.encodePacked(info._round, info.sratios[i]));\r\n      // \"t\" is actual amount of target token, invested for i-th ratio and current round,\r\n      // including the value of longterm tokens and intokens.\r\n      uint256 t = target_token_amount_in_round_and_ratio[hashs];\r\n      // nt is the required interest for tokens invested for i-th ratio.\r\n      // For example, if the i-th ratio is 5% and target token amount for this ratio is 10000,\r\n      // start_price is 1e18, then nt = 500*1e18.\r\n      uint256 nt = t.safeMul(info.start_price).safeMul(info.sratios[i]).safeDiv(info.env_ratio_base);\r\n      /// require(info.long_term.get_long_term_token_with_ratio(info.sratios[i]) != address(0x0), \"GK:Long term token not set\");\r\n      // simulate the distribution of total interest.\r\n      // If the remaining interest can afford the required interest for i-th ratio,\r\n      // then \"nt\" sets to be the require interest\r\n      // Otherwise \"nt\" set to be the remain interest\r\n      // So, \"nt\" is the actual received interest for i-th ratio.\r\n      // The ramain interest (\"left\") decreases by \"nt\".\r\n      if(nt > info.left){\r\n        nt = info.left;\r\n      }\r\n      info.left = info.left.safeSub(nt);\r\n      // now, set \"t\" to be the amount of target token (normalized to 1e18) distributed to i-th ratio and current round,\r\n      // after the price of target token changing and the interests being distributed.\r\n      // \"t\" times start price is the total price before,\r\n      // then add \"nt\" is the total price after obtaining the distributed interest,\r\n      // then div \"end_price\" to change the total price into the amount of target token, of new price\r\n      t = t.safeMul(info.start_price).safeAdd(nt).safeDiv(info.end_price);\r\n\r\n      // \"ratio_to\" computes the ratio of longterm token to target token, united in 1e18,\r\n      // \"long_term_token_amount_in_round_and_ratio[hashs]\" records the amount of longterm tokens in i-th ratio and current round,\r\n      // including all unexchanged intokens.\r\n      // The default ratio is 1e18 if there is no longterm token.\r\n      // \"ratio_to\" is a significant variable for updating all maintained values in \"_updata_values()\"\r\n      uint256 ratio_to;\r\n      if (long_term_token_amount_in_round_and_ratio[hashs] == 0){\r\n        ratio_to = 1e18;\r\n      }\r\n      else{\r\n        ratio_to = t.safeMul(1e18).safeDiv(long_term_token_amount_in_round_and_ratio[hashs]);\r\n        if (ratio_to == 0) {ratio_to = 1e18; emit ThrowError(address(this), info._round, info.sratios[i]);}\r\n      }\r\n      //s = s.safeAdd(t);\r\n      s = t;\r\n      t = info.aggr.getRatioTo(address(this), 0, info.sratios[i], 3);\r\n\r\n      //update minter info for this round\r\n      \r\n      if (info.minter != MinterInterfaceGK(0x0)){\r\n        info.minter.handle_settle_round(\r\n          info.sratios[i],\r\n          t,\r\n          uint256(1e36).safeDiv(ratio_to),\r\n          long_term_token_amount_in_round_and_ratio[hashs],\r\n          nt\r\n        );\r\n      }  \r\n      \r\n      // update the maintained values\r\n      update_values(info, target_token_amount_in_round_and_ratio, long_term_token_amount_in_round_and_ratio, ratio_to, info.sratios[i]);\r\n  }\r\n\r\n  function _settle_round_for_tail(HGateKeeperParam.settle_round_param_info storage info,\r\n                        //mapping (uint256 => uint256) storage total_target_token_in_round,\r\n                        mapping (bytes32 => uint256) storage target_token_amount_in_round_and_ratio,\r\n                        mapping (bytes32 => uint256) storage long_term_token_amount_in_round_and_ratio,\r\n                        uint256 nt\r\n                                 ) internal returns(uint256 s){\r\n\r\n    //uint256 nt = left;\r\n    // \"left\" now is the amount of target token should be allocated to floating.\r\n    //left = total_target_token_in_round[info._round].safeSub(s);\r\n    // handle for floating, similar to before.\r\n    bytes32 hashs = keccak256(abi.encodePacked(info._round, uint256(0)));\r\n    uint256 ratio_to;\r\n    s = 0;\r\n    if (long_term_token_amount_in_round_and_ratio[hashs] == 0){\r\n      ratio_to = 1e18;\r\n    }\r\n    else{\r\n      ratio_to = nt.safeMul(1e18).safeDiv(long_term_token_amount_in_round_and_ratio[hashs]);\r\n      s = nt;\r\n      if (ratio_to == 0) {ratio_to = 1e18; emit ThrowError(address(this), info._round, 0);}\r\n      //s = s.safeAdd(left);\r\n    }\r\n    if (info.minter != MinterInterfaceGK(0x0)){\r\n      info.minter.handle_settle_round(\r\n        0,\r\n        HTokenInterfaceGK(info.float_longterm_token).ratio_to_target(),\r\n        uint256(1e36).safeDiv(ratio_to),\r\n        long_term_token_amount_in_round_and_ratio[hashs],\r\n        info.left\r\n      );\r\n    }\r\n    update_values(info, target_token_amount_in_round_and_ratio, long_term_token_amount_in_round_and_ratio, ratio_to, 0);\r\n}\r\n\r\n  /// @dev This function is executed when the round (indexed by _round) is end.\r\n  /// It does the settlement for current round with respect to the following things:\r\n  /// 1.\tIt updates the value of all longterm tokens in target token, according to the price from yield stream in current round.\r\n  /// It also sets the value of intokens and outtokens in the next round.\r\n  /// 2.\tIt maintains the amount of longterm tokens (including unexchanged intokens) and target tokens in the next round.\r\n  function settle_round(HGateKeeperParam.settle_round_param_info storage info,\r\n                        //mapping (uint256 => uint256) storage total_target_token_in_round,\r\n                        mapping (bytes32 => uint256) storage target_token_amount_in_round_and_ratio,\r\n                        mapping (bytes32 => uint256) storage long_term_token_amount_in_round_and_ratio\r\n                       ) public returns(uint256 settled_round){\r\n    // get the price of target token from the yield stream. The unit is 1e18.\r\n    if(info.end_price == 0){\r\n      info.end_price = info.dispatcher.getYieldStream(info.target_token).getVirtualPrice();\r\n    }\r\n    /// \"left\" records the remaining interest in current round. The unit is 1e18.\r\n    /// At the begining, it equals to the actual interest of all target tokens in current round.\r\n    /// It then distributes to tokens invested for different ratio,\r\n    // and decreases accordingly when it is consumed to fulfill interests.\r\n    info.left = info.total_target_token.safeMul(info.end_price.safeSub(info.start_price));\r\n    if (info.minter != MinterInterfaceGK(0x0)){\r\n      info.minter.loop_prepare(\r\n        info.total_target_token.safeSub(target_token_amount_in_round_and_ratio[keccak256(abi.encodePacked(info._round, uint256(0)))]),\r\n        target_token_amount_in_round_and_ratio[keccak256(abi.encodePacked(info._round, uint256(0)))],\r\n        info.long_term.getRoundLength(info._round),\r\n        info.start_price,\r\n        info.end_price\r\n      );\r\n    }\r\n    uint256 s = 0;\r\n\r\n    // The following FOR loop updates the value of all longterm tokens, for ratios from small to large.\r\n    // It finally updates the value for floating.\r\n    for(uint256 i = 0; i < info.sratios.length; i++){\r\n      // \"s\" records the total amount of distributed target tokens.\r\n      s = s.safeAdd(_settle_round_for_one_ratio(info, target_token_amount_in_round_and_ratio, long_term_token_amount_in_round_and_ratio, i));\r\n    }\r\n    {\r\n      s = s.safeAdd(_settle_round_for_tail(info, target_token_amount_in_round_and_ratio, long_term_token_amount_in_round_and_ratio, info.total_target_token.safeSub(s)));\r\n    }\r\n    // for the case where there is no floating token,\r\n    // the unallocated target tokens (if any) are transferred to our pool.\r\n    if(s < info.total_target_token){\r\n      s = info.total_target_token.safeSub(s);\r\n      require(info.yield_interest_pool != address(0x0), \"invalid yield interest pool\");\r\n      if (IERC20(info.target_token).balanceOf(address(this)) >= s){\r\n        IERC20(info.target_token).safeTransfer(info.yield_interest_pool, s);\r\n      }\r\n      info.total_target_token_next_round = info.total_target_token_next_round.safeSub(s);\r\n      //total_target_token_in_round[info._round + 1] =  total_target_token_in_round[info._round + 1].safeSub(s);\r\n    }\r\n    // update the variable \"settled_round\", means that \"_round\" is settled and \"_round\" + 1 should begin\r\n    settled_round = info._round;\r\n  }\r\n  /// @dev the necessary update for maintained variables\r\n  /// @param ratio the value of the i-th ratio (sratios[i])\r\n  function update_values(\r\n    HGateKeeperParam.settle_round_param_info storage info,\r\n                        mapping (bytes32 => uint256) storage target_token_amount_in_round_and_ratio,\r\n                        mapping (bytes32 => uint256) storage long_term_token_amount_in_round_and_ratio,\r\n                        uint256 ratio_to, uint256 ratio) internal {\r\n      uint256 in_target_amount;//how many newly-come target tokens for the next round.\r\n      uint256 out_target_amount;//how many target tokens leave before the next round.\r\n      uint256 in_long_term_amount;//how many newly-come longterm tokens for the next round.\r\n      uint256 out_long_term_amount;//how many target tokens leave before the next round.\r\n\r\n      //\"hashs\" and \"hasht\" are indexes the same as before\r\n      bytes32 hashs = keccak256(abi.encodePacked(info._round, ratio));\r\n      bytes32 hasht = keccak256(abi.encodePacked(info._round + 1, ratio));\r\n\r\n      //set the ratio of the longterm token to target token.\r\n      //recall that it is the definition of \"ratio_to\".\r\n      //lt.set_ratio_to_target(ratio_to);\r\n      if (ratio == 0){\r\n        HTokenInterfaceGK(info.float_longterm_token).set_ratio_to_target(ratio_to);\r\n      }\r\n      else{\r\n        info.aggr.setRatioTo(address(this), 0, ratio, 3, ratio_to);\r\n      }\r\n      \r\n      //set the value of intoken in the next round, the ratio to longterm token.\r\n      //since when the intoken is generated, its amount is 1:1 bind to target token,\r\n      //so, the ratio of intoken to longterm token should be set to the reciprocal of \"ratio_to\".\r\n      //HTokenInterfaceGK(info.long_term.hintokenAtPeriodWithRatio(info._round + 1, ratio)).set_ratio_to_target(uint256(1e36).safeDiv(ratio_to));\r\n      in_target_amount = uint256(1e36).safeDiv(ratio_to);//temporarily use\r\n      info.aggr.setRatioTo(address(this), info._round + 1, ratio, 1, in_target_amount);\r\n      //since the amount of intoken is 1:1 to the target token,\r\n      //the amount of newly-come target token equals to the total amount of intoken in the next round.\r\n      //in_target_amount = info.long_term.totalInAtPeriodWithRatio(info._round + 1, ratio);\r\n      in_target_amount = info.aggr.totalSupply(address(this), info._round + 1, ratio, 1);\r\n      //compute the corresponding amount of newly-come longterm token.\r\n      //since the ratio of intoken to longterm token has been set, compute it directly.\r\n      //in_long_term_amount = info.long_term.totalInAtPeriodWithRatio(info._round + 1, ratio).safeMul(HTokenInterfaceGK(info.long_term.hintokenAtPeriodWithRatio(info._round + 1, ratio)).ratio_to_target()).safeDiv(1e18);\r\n      in_long_term_amount = in_target_amount.safeMul(1e18).safeDiv(ratio_to); \r\n \r\n      //set the value of outtoken in the next round, the ratio to target token.\r\n      //since when the outtoken is generated, its amount is 1:1 bind to long_term token at first,\r\n      //the ratio of outtoken to target token should be set to \"ratio_to\".\r\n      //HTokenInterfaceGK(info.long_term.houttokenAtPeriodWithRatio(info._round + 1, ratio)).set_ratio_to_target(ratio_to);\r\n      info.aggr.setRatioTo(address(this), info._round + 1, ratio, 2, ratio_to);\r\n      //compute the amount of target token that leaves. \r\n      //since the ratio of outtoken to target token has been set, compute it directly.\r\n      out_target_amount = info.aggr.totalSupply(address(this), info._round + 1, ratio, 2).safeMul(ratio_to).safeDiv(1e18);\r\n      //since the amount of outtoken is 1:1 to the longterm token at first,\r\n      //the amount of longterm token that leaves equals to the total amount of intoken in the next round.\r\n      out_long_term_amount = info.aggr.totalSupply(address(this), info._round + 1, ratio, 2);\r\n   \r\n      //update the amount of target token and long term token in the new round\r\n\r\n      //compute the target token amount in i-th ratio for next round,\r\n      //which means that this amount of target token joins in the game in i-th ratio and the next round.\r\n      //It first computes the value of longterm token in target token after the price changing,\r\n      //since the ratio_to is given.\r\n      //It then adds the newly-come amount and subs the leave amount.\r\n      target_token_amount_in_round_and_ratio[hasht] = long_term_token_amount_in_round_and_ratio[hashs].safeMul(ratio_to).safeDiv(1e18).safeAdd(in_target_amount).safeSub(out_target_amount);\r\n      //The amount of total target token in the next round (to all ratios)\r\n      //initially set to be the total target token amount in current round.\r\n      if (ratio == info.sratios[0]) {\r\n        //total_target_token_in_round[_round + 1] = total_target_token_in_round[_round];\r\n        info.total_target_token_next_round = info.total_target_token;\r\n      }\r\n      //update the total target token amount in the next round,\r\n      //by adding increment and subbing decrement for each ratio.\r\n      info.total_target_token_next_round = info.total_target_token_next_round.safeAdd(in_target_amount).safeSub(out_target_amount);\r\n      //total_target_token_in_round[_round + 1] =  total_target_token_in_round[_round + 1].safeAdd(in_target_amount).safeSub(out_target_amount);\r\n      //update the longterm token amount in i-th ratio and the next round,\r\n      //by taking the longterm token amount in i-th ratio and current round, and adding increment and subbing decrement.\r\n      long_term_token_amount_in_round_and_ratio[hasht] = long_term_token_amount_in_round_and_ratio[hashs].safeAdd(in_long_term_amount).safeSub(out_long_term_amount);\r\n      //Additional check: after update,\r\n      //the amount of target token in i-th ratio and the next round,\r\n      //should equal to the amount of longterm token in i-th ratio and the next round times ratio_to.\r\n      //Due to the accuracy issue, we let the difference less than 10000(in 1e18).\r\n      //(This should never happen)\r\n      _abs_check(target_token_amount_in_round_and_ratio[hasht].safeMul(1e18), long_term_token_amount_in_round_and_ratio[hasht].safeMul(ratio_to));\r\n  }\r\n\r\n  function _abs_check(uint256 a, uint256 b) public pure{\r\n    if (a >= b) {require (a.safeSub(b) <= 1e22, \"GK: double check\");}\r\n    else {require (b.safeSub(a) <= 1e22, \"GK: double check\");}\r\n  }\r\n}\r\n\r\n// File: contracts/core/HGateKeeper.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n//import \"../utils/SafeMath.sol\";\r\n//import \"../erc20/SafeERC20.sol\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @notice Gatekeeper contains all user interfaces and updating values of tokens\r\ncontract HGateKeeper is Ownable{\r\n  using SafeERC20 for IERC20;\r\n  using SafeMath for uint256;\r\n  using HGateKeeperHelper for HGateKeeperParam.settle_round_param_info;// mapping(uint256=>uint256) ;\r\n\r\n  HDispatcherInterface public dispatcher;//the contracts to get the yield strem\r\n  address public target_token;//the target token, e.g. yycurve\r\n  HEnv public env;//the contract of environment variables, mainly the fee ratios\r\n\r\n  HLongTermInterface public long_term;//the contract that maintain the period and generate/destroy all tokens.\r\n  address public yield_interest_pool;//the pool that additional target tokens.\r\n  HTokenAggregatorInterface public aggr;\r\n\r\n  address public float_longterm_token;\r\n\r\n  MinterInterfaceGK public minter;\r\n\r\n  uint256 public settled_round;//the index of the round that has been settled\r\n  uint256 public max_amount;//the max amount that a wallet allowd to bid.\r\n\r\n\r\n  mapping (uint256 => HGateKeeperParam.round_price_info) public round_prices;//price info of all rounds\r\n\r\n  mapping (bytes32 => uint256) target_token_amount_in_round_and_ratio;//amount of target token invested in a given round and ratio\r\n  mapping (bytes32 => uint256) long_term_token_amount_in_round_and_ratio;//amount of longterm token in a given round and ratio\r\n  mapping (uint256 => uint256) total_target_token_in_round;//amount of total target token invested in a round\r\n\r\n  /// @dev Constructor to create a gatekeeper\r\n  /// @param _token_addr Address of the target token, such as yUSD or yvUSDC\r\n  /// @param _env Address of env, to get fee ratios\r\n  /// @param _dispatcher Address of the dispatcher, to get yield stream\r\n  /// @param _long_term Address of the Hlongterm contract, to generate/destroy in/out-tokens.\r\n  constructor(address _token_addr, address _env, address _dispatcher, address _long_term, address _float_token, address _aggr) public{\r\n    target_token = _token_addr;\r\n    env = HEnv(_env);\r\n    dispatcher = HDispatcherInterface(_dispatcher);\r\n    long_term = HLongTermInterface(_long_term);\r\n    settled_round = 0;\r\n    aggr = HTokenAggregatorInterface(_aggr);\r\n    float_longterm_token = _float_token;\r\n  }\r\n\r\n  event ChangeMaxAmount(uint256 old, uint256 _new);\r\n  function set_max_amount(uint _amount) public onlyOwner{\r\n    uint256 old = max_amount;\r\n    max_amount = _amount;\r\n    emit ChangeMaxAmount(old, max_amount);\r\n  }\r\n\r\n  event HorizonBid(address from, uint256 amount, uint256 share, uint256 round, uint256 ratio);\r\n  /// @dev User invests terget tokens to the contract to take part in the game in the next round and further rounds.\r\n  /// User gets intokens with respect to the next round.\r\n  /// @param _amount The amount of target token that the user invests\r\n  /// @param _ratio The ratio that the user chooses.\r\n  function bidRatio(uint256 _amount, uint256 _ratio) public{\r\n    require(_ratio == 0 || isSupportRatio(_ratio), \"not support ratio\");    \r\n    _check_round();\r\n\r\n    require(IERC20(target_token).allowance(msg.sender, address(this)) >= _amount, \"not enough allowance\");\r\n    uint _before = IERC20(target_token).balanceOf(address(this));\r\n    IERC20(target_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n    uint256 _after = IERC20(target_token).balanceOf(address(this));\r\n    _amount = _after.safeSub(_before); // Additional check for deflationary tokens\r\n\r\n    uint256 decimal = dispatcher.getYieldStream(target_token).getDecimal();\r\n    require(decimal <= 1e18, \"decimal too large\");\r\n    uint256 shares = _amount.safeMul(1e18).safeDiv(decimal);//turn into 1e18 decimal\r\n\r\n    if(max_amount > 0){\r\n      require(shares <= max_amount, \"too large amount\");\r\n      require(aggr.balanceOf(address(this), settled_round + 2, _ratio, 1, msg.sender).safeAdd(shares) <= max_amount, \"Please use another wallet\");\r\n    }\r\n    aggr.mint(address(this), settled_round + 2, _ratio, 1, shares, msg.sender);\r\n    //HTokenInterfaceGK(in_addr).mint(msg.sender, shares);\r\n\r\n    if (minter != MinterInterfaceGK(0x0)){\r\n      MinterInterfaceGK(minter).handle_bid_ratio(msg.sender, shares, _ratio, settled_round + 2);\r\n    }\r\n    emit HorizonBid(msg.sender, _amount, shares, settled_round + 2, _ratio);\r\n  }\r\n\r\n  function bidFloating(uint256 _amount) public{\r\n    bidRatio(_amount, 0);\r\n  }\r\n  event CancelBid(address from, uint256 amount, uint256 fee, uint256 round, uint256 ratio);\r\n  function cancelBid(uint256 amount, uint256 _ratio) public{\r\n    //user can only cancel bid for the next round (during the current round period)\r\n    require(_ratio == 0 || isSupportRatio(_ratio), \"not support ratio\");\r\n    _check_round();\r\n\r\n    //HTokenInterfaceGK(_in_token_addr).burnFrom(msg.sender, amount);\r\n    aggr.burn(address(this), settled_round + 2, _ratio, 1, amount, msg.sender);\r\n    \r\n    uint256 decimal = dispatcher.getYieldStream(target_token).getDecimal();\r\n\r\n    uint256 target_amount = amount.safeMul(decimal).safeDiv(1e18);\r\n\r\n    if (minter != MinterInterfaceGK(0x0)){\r\n      MinterInterfaceGK(minter).handle_cancel_bid(msg.sender, amount, _ratio, settled_round + 2);\r\n    }\r\n\r\n    if(env.cancel_fee_ratio() != 0 && env.fee_pool_addr() != address(0x0)){\r\n      uint256 fee = target_amount.safeMul(env.cancel_fee_ratio()).safeDiv(env.ratio_base());\r\n      uint256 recv = target_amount.safeSub(fee);\r\n      IERC20(target_token).safeTransfer(msg.sender, recv);\r\n      IERC20(target_token).safeTransfer(env.fee_pool_addr(), fee);\r\n      emit CancelBid(msg.sender, recv, fee, settled_round + 2, _ratio);\r\n    }else{\r\n      IERC20(target_token).safeTransfer(msg.sender, target_amount);\r\n      emit CancelBid(msg.sender, target_amount, 0, settled_round + 2, _ratio);\r\n    }\r\n  }\r\n   /*\r\n  function changeBid(address _in_token_addr, uint256 _new_amount, uint256 _new_ratio) public{\r\n    cancelBid(_in_token_addr);\r\n    bidRatio(_new_amount, _new_ratio);\r\n  }*/\r\n\r\n  event HorizonWithdrawLongTermToken(address from, uint256 amount, uint256 round, uint256 ratio);\r\n  /// @dev User changes longterm tokens to outtokens with respect to the next round,\r\n  /// meaning that he quits the game by the next round.\r\n  /// @param _amount The amount of longterm token that the user wants to withdraw.\r\n  function withdrawLongTerm(uint256 ratio, uint256 _amount) public{\r\n    _check_round();\r\n    uint256 total_amount;\r\n    if (ratio == 0){\r\n      require(IERC20(float_longterm_token).balanceOf(msg.sender) >= _amount, \"GK:not enough balance\");\r\n      HTokenInterfaceGK(float_longterm_token).burnFrom(msg.sender, _amount);\r\n    }\r\n    else{\r\n      total_amount = aggr.balanceOf(address(this), 0, ratio, 3, msg.sender);\r\n      aggr.burn(address(this), 0, ratio, 3, _amount, msg.sender);\r\n    }\r\n    aggr.mint(address(this), settled_round + 2, ratio, 2, _amount, msg.sender);\r\n    //HTokenInterfaceGK(out_addr).mint(msg.sender, _amount);\r\n    if (minter != MinterInterfaceGK(0x0)){\r\n      MinterInterfaceGK(minter).handle_withdraw(msg.sender, _amount, ratio, settled_round + 2);\r\n    }\r\n\r\n    emit HorizonWithdrawLongTermToken(msg.sender, _amount, settled_round + 2, ratio);\r\n  }\r\n\r\n\r\n  function withdrawInToken(uint256 ratio, uint256 round, uint256 _amount) public{\r\n    require(ratio == 0 || isSupportRatio(ratio), \"not support ratio\");\r\n    _check_round();\r\n    require(settled_round + 1 >= round, \"GK: round not sealed\");\r\n\r\n    uint256 amount = aggr.balanceOf(address(this), round, ratio, 1, msg.sender);\r\n\r\n    require(_amount <= amount, \"GK: not enough intoken balance\");\r\n    aggr.burn(address(this), round, ratio, 1, _amount, msg.sender);\r\n\r\n    uint256 ratio_to = aggr.getRatioTo(address(this), round, ratio, 1);\r\n    uint256 lt_amount = _amount.safeMul(ratio_to).safeDiv(1e18);\r\n\r\n    emit HorizonExchangeToLongTermToken(msg.sender, _amount, lt_amount, round, ratio);\r\n\r\n    aggr.mint(address(this), settled_round + 2, ratio, 2, lt_amount, msg.sender);    \r\n    if (minter != MinterInterfaceGK(0x0)){\r\n      MinterInterfaceGK(minter).handle_withdraw(msg.sender, lt_amount, ratio, settled_round + 2);\r\n    }\r\n\r\n    emit HorizonWithdrawLongTermToken(msg.sender, lt_amount, settled_round + 2, ratio);\r\n  }\r\n  event HorizonCancelWithdraw(address from, uint256 amount, uint256 ratio, uint256 round);\r\n  /// @dev User cancel his/her withdraw operation,\r\n  /// changing all outtokens back to longterm token.\r\n  function cancelWithdraw(uint256 _ratio, uint256 _amount) public{\r\n    require(_ratio == 0 || isSupportRatio(_ratio), \"not support ratio\");\r\n    _check_round();\r\n    aggr.burn(address(this), settled_round + 2, _ratio, 2, _amount, msg.sender);\r\n    \r\n    if (_ratio == 0){\r\n      HTokenInterfaceGK(float_longterm_token).mint(msg.sender, _amount);\r\n    }\r\n    else\r\n    {\r\n      aggr.mint(address(this), 0, _ratio, 3, _amount, msg.sender);\r\n    }\r\n    if (minter != MinterInterfaceGK(0x0)){\r\n      MinterInterfaceGK(minter).handle_cancel_withdraw(msg.sender, _amount, _ratio, settled_round + 2);\r\n    }\r\n\r\n    emit HorizonCancelWithdraw(msg.sender, _amount, _ratio, settled_round + 2);\r\n  }\r\n\r\n  event HorizonClaim(address from, uint256 out_amount, uint256 amount, uint256 fee, uint256 round, uint256 ratio);\r\n  /// @dev User withdraws outtokens to get target tokens.\r\n  /// @param _amount The amount of outtoken.\r\n  function claim(uint256 round, uint256 ratio, uint256 _amount) public {\r\n    require(ratio == 0 || isSupportRatio(ratio), \"not support ratio\");\r\n    _check_round();\r\n\r\n    require(settled_round + 1 >= round, \"GK: period not end\");\r\n\r\n    uint256 decimal = dispatcher.getYieldStream(target_token).getDecimal();\r\n    uint256 ratio_to = aggr.getRatioTo(address(this), round, ratio, 2);\r\n    uint256 t = _amount.safeMul(ratio_to).safeMul(decimal).safeDiv(1e36);//turn into target decimal\r\n\r\n    aggr.burn(address(this), round, ratio, 2, _amount, msg.sender);\r\n\r\n    if(env.withdraw_fee_ratio() != 0 && env.fee_pool_addr() != address(0x0)){\r\n      uint256 fee = t.safeMul(env.withdraw_fee_ratio()).safeDiv(env.ratio_base());\r\n      uint256 recv = t.safeSub(fee);\r\n      IERC20(target_token).safeTransfer(msg.sender, recv);\r\n      IERC20(target_token).safeTransfer(env.fee_pool_addr(), fee);\r\n      emit HorizonClaim(msg.sender, _amount, recv, fee, round, ratio);\r\n    }else{\r\n      IERC20(target_token).safeTransfer(msg.sender, t);\r\n      emit HorizonClaim(msg.sender, _amount, t, 0, round, ratio);\r\n    }\r\n  }\r\n\r\n  event HorizonExchangeToLongTermToken(address from, uint256 amount_in, uint256 amount_long, uint256 round, uint256 ratio);\r\n  /// @dev User changes all intokens to long-term tokens,\r\n  /// so that the user can withdraw to outtoken or transfer in secondary markets.\r\n  function exchangeToLongTermToken(uint256 round, uint256 ratio) public{\r\n    //require(ratio == 0 || isSupportRatio(ratio), \"not support ratio\");\r\n    require(ratio == 0, \"not support ratio\");\r\n    _check_round();\r\n    require(settled_round + 1 >= round, \"GK: round not sealed\");\r\n\r\n    uint256 amount = aggr.balanceOf(address(this), round, ratio, 1, msg.sender);\r\n    require(amount > 0, \"GK: no in token balance\");\r\n\r\n    aggr.burn(address(this), round, ratio, 1, amount, msg.sender);\r\n\r\n    uint256 ratio_to = aggr.getRatioTo(address(this), round, ratio, 1);\r\n\r\n    uint256 rec = amount.safeMul(ratio_to).safeDiv(1e18);\r\n    \r\n    if (ratio == 0){\r\n      HTokenInterfaceGK(float_longterm_token).mint(msg.sender, rec);\r\n    }\r\n    else{\r\n      aggr.mint(address(this), 0, ratio, 3, rec, msg.sender);\r\n    }\r\n    emit HorizonExchangeToLongTermToken(msg.sender, amount, rec, round, ratio);\r\n  }\r\n\r\n  /// @dev To check whether the current round should end.\r\n  /// If so, do settlement for the current round and begin a new round.\r\n  HGateKeeperParam.settle_round_param_info info;\r\n  function _check_round() internal{\r\n    long_term.updatePeriodStatus();\r\n    uint256 new_period = long_term.getCurrentRound();\r\n    if(round_prices[new_period].start_price == 0){\r\n      round_prices[new_period].start_price = dispatcher.getYieldStream(target_token).getVirtualPrice();\r\n    }\r\n    if(long_term.isRoundEnd(settled_round + 1)){\r\n      /*HGateKeeperParam.settle_round_param_info memory info*/ info = HGateKeeperParam.settle_round_param_info({\r\n                      _round:settled_round+1,\r\n                       dispatcher:dispatcher,\r\n                       target_token:target_token,\r\n                       minter:minter,\r\n                       long_term:long_term,\r\n                       aggr:aggr,\r\n                       sratios:sratios,\r\n                       env_ratio_base:env.ratio_base(),\r\n                       float_longterm_token:float_longterm_token,\r\n                       yield_interest_pool:yield_interest_pool,\r\n                       start_price:round_prices[settled_round+1].start_price,\r\n                       end_price:round_prices[settled_round+1].end_price,\r\n                       total_target_token:total_target_token_in_round[settled_round+1],\r\n                       total_target_token_next_round:total_target_token_in_round[settled_round+2],\r\n                       left: 0\r\n      });\r\n      settled_round =\r\n        info.settle_round(target_token_amount_in_round_and_ratio, long_term_token_amount_in_round_and_ratio);\r\n      total_target_token_in_round[settled_round + 1] = total_target_token_in_round[settled_round + 1].safeAdd(info.total_target_token_next_round);\r\n    }\r\n  }\r\n\r\n  mapping (uint256 => bool) public support_ratios;\r\n  uint256[] public sratios;\r\n\r\n  event SupportRatiosChanged(uint256[] rs);\r\n  function resetSupportRatios(uint256[] memory rs) public onlyOwner{\r\n    for(uint i = 0; i < sratios.length; i++){\r\n      delete support_ratios[sratios[i]];\r\n    }\r\n    delete sratios;\r\n    for(uint i = 0; i < rs.length; i++){\r\n      if(i > 0){\r\n        require(rs[i] > rs[i-1], \"should be ascend\");\r\n      }\r\n      sratios.push(rs[i]);\r\n      support_ratios[rs[i]] = true;\r\n    }\r\n    emit SupportRatiosChanged(sratios);\r\n  }\r\n\r\n  function isSupportRatio(uint256 r) public view returns(bool){\r\n    for(uint i = 0; i < sratios.length; i++){\r\n      if(sratios[i] == r){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  function updatePeriodStatus() public{\r\n    _check_round();\r\n  }\r\n\r\n\r\n  event ChangeYieldInterestPool(address old, address _new);\r\n  function changeYieldPool(address _pool) onlyOwner public{\r\n    require(_pool != address(0x0), \"invalid pool\");\r\n    address old = yield_interest_pool;\r\n    yield_interest_pool = _pool;\r\n    emit ChangeYieldInterestPool(old, _pool);\r\n  }\r\n  event SetMinter(address addr);\r\n  function set_minter(address addr) onlyOwner public{\r\n    minter = MinterInterfaceGK(addr);\r\n    emit SetMinter(addr);\r\n  }\r\n  \r\n  function add_transfer_listener_to(address _listener) onlyOwner public{\r\n    HTokenInterfaceGK(float_longterm_token).addTransferListener(_listener);\r\n  }\r\n  function remove_transfer_listener_to(address _listener) onlyOwner public{\r\n    HTokenInterfaceGK(float_longterm_token).removeTransferListener(_listener);\r\n  }\r\n}\r\n\r\ncontract HGateKeeperFactory is Ownable{\r\n  event NewGateKeeper(address addr);\r\n\r\n  function createGateKeeperForPeriod(address _env_addr, address _dispatcher, address _long_term, address _float_token, address _aggr) public returns(address){\r\n    HEnv e = HEnv(_env_addr);\r\n    HGateKeeper gk = new HGateKeeper(e.token_addr(), _env_addr, _dispatcher, _long_term, _float_token, _aggr);\r\n    gk.transferOwnership(msg.sender);\r\n    emit NewGateKeeper(address(gk));\r\n    return address(gk);\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_ratio\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cancelWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set_minter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updatePeriodStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_listener\",\"type\":\"address\"}],\"name\":\"add_transfer_listener_to\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"isSupportRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aggr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rs\",\"type\":\"uint256[]\"}],\"name\":\"resetSupportRatios\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ratio\",\"type\":\"uint256\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ratio\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLongTerm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"float_longterm_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"set_max_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"long_term\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"env\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yield_interest_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sratios\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bidFloating\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"support_ratios\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settled_round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"exchangeToLongTermToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_listener\",\"type\":\"address\"}],\"name\":\"remove_transfer_listener_to\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dispatcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"changeYieldPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"bidRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_prices\",\"outputs\":[{\"name\":\"start_price\",\"type\":\"uint256\"},{\"name\":\"end_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token_addr\",\"type\":\"address\"},{\"name\":\"_env\",\"type\":\"address\"},{\"name\":\"_dispatcher\",\"type\":\"address\"},{\"name\":\"_long_term\",\"type\":\"address\"},{\"name\":\"_float_token\",\"type\":\"address\"},{\"name\":\"_aggr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"ChangeMaxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"HorizonBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"CancelBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"HorizonWithdrawLongTermToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratio\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"HorizonCancelWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"out_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"HorizonClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount_in\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount_long\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"HorizonExchangeToLongTermToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rs\",\"type\":\"uint256[]\"}],\"name\":\"SupportRatiosChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ChangeYieldInterestPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "HGateKeeper", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a354f35829ae975e850e23e9615b11da1b3dc4de000000000000000000000000c0e9155c8423043fbda389bd6e37e5a17d8d68120000000000000000000000004775d2b1a3f582b3153e8b78a5c5337036d35f5400000000000000000000000085e8579f37fa63e2899e0c5975b399552465cf390000000000000000000000008ac3a102bdbbaef20d56fa85fb6a2ffc4ad91c57000000000000000000000000890c899cd0812f54f33269a41efa6c041da35cf3", "EVMVersion": "Default", "Library": "SafeMath:071108ad85d7a766b41e0f5e5195537a8fc8e74d;HGateKeeperHelper:f2b5c22cc5e777c92533f3afc197d3e8b8ea4d50", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d218e0983d8b35ee20d7c459ccb059b5512a2d3ff12c3ed6a2fe8a88d5000aba"}]}