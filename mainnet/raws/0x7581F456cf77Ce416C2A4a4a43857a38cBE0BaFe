{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.6.8 https://hardhat.org\r\n\r\n// File contracts/PriceOracle.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract PriceOracle {\r\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\r\n    bool public constant isPriceOracle = true;\r\n\r\n    /**\r\n      * @notice Get the price of a token\r\n      * @param token The token to get the price of\r\n      * @return The asset price mantissa (scaled by 1e18).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n    function getTokenPrice(address token) external virtual view returns (uint);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20Extended.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Extended {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/ConnextPriceOracle.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n    function description() external view returns (string memory);\r\n    function version() external view returns (uint256);\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(uint80 _roundId) external view returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n\r\n    function latestRoundData() external view returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n}\r\n\r\ncontract ConnextPriceOracle is PriceOracle {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20Extended;\r\n    address public admin;\r\n\r\n    address public wrapped;\r\n\r\n    /// @notice Chainlink Aggregators\r\n    mapping(address => AggregatorV3Interface) public aggregators;    \r\n\r\n    struct PriceInfo {\r\n        address token;              // Address of token contract, TOKEN\r\n        address baseToken;          // Address of base token contract, BASETOKEN\r\n        address lpToken;            // Address of TOKEN-BASETOKEN pair contract\r\n        bool active;                // Active status of price record 0 \r\n    }\r\n\r\n    mapping(address => PriceInfo) public priceRecords;\r\n    mapping(address => uint256) public assetPrices;\r\n    \r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event PriceRecordUpdated(address token, address baseToken, address lpToken, bool _active);\r\n    event DirectPriceUpdated(address token, uint256 oldPrice, uint256 newPrice);\r\n    event AggregatorUpdated(address tokenAddress, address source);\r\n\r\n    constructor(address _wrapped) {\r\n        wrapped = _wrapped;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function getTokenPrice(address _tokenAddress) public view override returns (uint256) {\r\n        address tokenAddress = _tokenAddress;\r\n        if (_tokenAddress == address(0)) {\r\n            tokenAddress = wrapped;\r\n        }\r\n        uint256 tokenPrice = assetPrices[tokenAddress];\r\n        if (tokenPrice == 0) {\r\n            tokenPrice = getPriceFromOracle(tokenAddress);\r\n        }\r\n        if (tokenPrice == 0) {\r\n            tokenPrice = getPriceFromDex(tokenAddress);\r\n        } \r\n        return tokenPrice;\r\n    }\r\n\r\n    function getPriceFromDex(address _tokenAddress) public view returns (uint256) {\r\n        PriceInfo storage priceInfo = priceRecords[_tokenAddress];\r\n        if (priceInfo.active) {\r\n            uint256 rawTokenAmount = IERC20Extended(priceInfo.token).balanceOf(priceInfo.lpToken);\r\n            uint256 tokenDecimalDelta = 18-uint256(IERC20Extended(priceInfo.token).decimals());\r\n            uint256 tokenAmount = rawTokenAmount.mul(10**tokenDecimalDelta);\r\n            uint256 rawBaseTokenAmount = IERC20Extended(priceInfo.baseToken).balanceOf(priceInfo.lpToken);\r\n            uint256 baseTokenDecimalDelta = 18-uint256(IERC20Extended(priceInfo.baseToken).decimals());\r\n            uint256 baseTokenAmount = rawBaseTokenAmount.mul(10**baseTokenDecimalDelta);\r\n            uint256 baseTokenPrice = getPriceFromOracle(priceInfo.baseToken);\r\n            uint256 tokenPrice = baseTokenPrice.mul(baseTokenAmount).div(tokenAmount);\r\n\r\n            return tokenPrice;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getPriceFromOracle(address _tokenAddress) public view returns (uint256) {\r\n        uint256 chainLinkPrice = getPriceFromChainlink(_tokenAddress);\r\n        return chainLinkPrice;\r\n    }\r\n\r\n    function getPriceFromChainlink(address _tokenAddress) public view returns (uint256) {\r\n        AggregatorV3Interface aggregator = aggregators[_tokenAddress];\r\n        if (address(aggregator) != address(0)) {\r\n            ( , int answer, , , ) = aggregator.latestRoundData();\r\n\r\n            // It's fine for price to be 0. We have two price feeds.\r\n            if (answer == 0) {\r\n                return 0;\r\n            }\r\n\r\n            // Extend the decimals to 1e18.\r\n            uint retVal = uint(answer);\r\n            uint price = retVal.mul(10**(18 - uint(aggregator.decimals())));\r\n\r\n            return price;            \r\n        }\r\n        return 0;        \r\n    }\r\n\r\n    function setDexPriceInfo(address _token, address _baseToken, address _lpToken, bool _active) external {\r\n        require(msg.sender == admin, \"only admin can set DEX price\");\r\n        PriceInfo storage priceInfo = priceRecords[_token];\r\n        uint256 baseTokenPrice = getPriceFromOracle(_baseToken);\r\n        require(baseTokenPrice > 0, \"invalid base token\");\r\n        priceInfo.token = _token;\r\n        priceInfo.baseToken = _baseToken;\r\n        priceInfo.lpToken = _lpToken;\r\n        priceInfo.active = _active;\r\n        emit PriceRecordUpdated(_token, _baseToken, _lpToken, _active);\r\n    }\r\n\r\n    function setDirectPrice(address _token, uint256 _price) external {\r\n        require(msg.sender == admin, \"only admin can set direct price\");\r\n        emit DirectPriceUpdated(_token, assetPrices[_token], _price);\r\n        assetPrices[_token] = _price;\r\n    }\r\n\r\n    function setAdmin(address newAdmin) external {\r\n        require(msg.sender == admin, \"only admin can set new admin\");\r\n        address oldAdmin = admin;\r\n        admin = newAdmin;\r\n\r\n        emit NewAdmin(oldAdmin, newAdmin);\r\n    }\r\n\r\n    function setAggregators(address[] calldata tokenAddresses, address[] calldata sources) external {\r\n        require(msg.sender == admin, \"only the admin may set the aggregators\");\r\n        for (uint i = 0; i < tokenAddresses.length; i++) {\r\n            aggregators[tokenAddresses[i]] = AggregatorV3Interface(sources[i]);\r\n            emit AggregatorUpdated(tokenAddresses[i], sources[i]);\r\n        }\r\n    } \r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }    \r\n\r\n\r\n}\r\n\r\n\r\n// File contracts/interfaces/IFulfillInterpreter.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IFulfillInterpreter {\r\n\r\n  event Executed(\r\n    bytes32 indexed transactionId,\r\n    address payable callTo,\r\n    address assetId,\r\n    address payable fallbackAddress,\r\n    uint256 amount,\r\n    bytes callData,\r\n    bytes returnData,\r\n    bool success,\r\n    bool isContract\r\n  );\r\n\r\n  function getTransactionManager() external returns (address);\r\n\r\n  function execute(\r\n    bytes32 transactionId,\r\n    address payable callTo,\r\n    address assetId,\r\n    address payable fallbackAddress,\r\n    uint256 amount,\r\n    bytes calldata callData\r\n  ) external payable returns (bool success, bool isContract, bytes memory returnData);\r\n}\r\n\r\n\r\n// File contracts/lib/LibAsset.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n/**\r\n* @title LibAsset\r\n* @author Connext <support@connext.network>\r\n* @notice This library contains helpers for dealing with onchain transfers\r\n*         of assets, including accounting for the native asset `assetId`\r\n*         conventions and any noncompliant ERC20 transfers\r\n*/\r\nlibrary LibAsset {\r\n  /** \r\n  * @dev All native assets use the empty address for their asset id\r\n  *      by convention\r\n  */\r\n  address constant NATIVE_ASSETID = address(0);\r\n\r\n  /** \r\n  * @notice Determines whether the given assetId is the native asset\r\n  * @param assetId The asset identifier to evaluate\r\n  * @return Boolean indicating if the asset is the native asset\r\n  */\r\n  function isNativeAsset(address assetId) internal pure returns (bool) {\r\n    return assetId == NATIVE_ASSETID;\r\n  }\r\n\r\n  /** \r\n  * @notice Gets the balance of the inheriting contract for the given asset\r\n  * @param assetId The asset identifier to get the balance of\r\n  * @return Balance held by contracts using this library\r\n  */\r\n  function getOwnBalance(address assetId) internal view returns (uint256) {\r\n    return\r\n      isNativeAsset(assetId)\r\n        ? address(this).balance\r\n        : IERC20(assetId).balanceOf(address(this));\r\n  }\r\n\r\n  /** \r\n  * @notice Transfers ether from the inheriting contract to a given\r\n  *         recipient\r\n  * @param recipient Address to send ether to\r\n  * @param amount Amount to send to given recipient\r\n  */\r\n  function transferNativeAsset(address payable recipient, uint256 amount)\r\n      internal\r\n  {\r\n    Address.sendValue(recipient, amount);\r\n  }\r\n\r\n  /** \r\n  * @notice Transfers tokens from the inheriting contract to a given\r\n  *         recipient\r\n  * @param assetId Token address to transfer\r\n  * @param recipient Address to send ether to\r\n  * @param amount Amount to send to given recipient\r\n  */\r\n  function transferERC20(\r\n      address assetId,\r\n      address recipient,\r\n      uint256 amount\r\n  ) internal {\r\n    SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\r\n  }\r\n\r\n  /** \r\n  * @notice Transfers tokens from a sender to a given recipient\r\n  * @param assetId Token address to transfer\r\n  * @param from Address of sender/owner\r\n  * @param to Address of recipient/spender\r\n  * @param amount Amount to transfer from owner to spender\r\n  */\r\n  function transferFromERC20(\r\n    address assetId,\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal {\r\n    SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\r\n  }\r\n\r\n  /** \r\n  * @notice Increases the allowance of a token to a spender\r\n  * @param assetId Token address of asset to increase allowance of\r\n  * @param spender Account whos allowance is increased\r\n  * @param amount Amount to increase allowance by\r\n  */\r\n  function increaseERC20Allowance(\r\n    address assetId,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal {\r\n    require(!isNativeAsset(assetId), \"#IA:034\");\r\n    SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\r\n  }\r\n\r\n  /**\r\n  * @notice Decreases the allowance of a token to a spender\r\n  * @param assetId Token address of asset to decrease allowance of\r\n  * @param spender Account whos allowance is decreased\r\n  * @param amount Amount to decrease allowance by\r\n  */\r\n  function decreaseERC20Allowance(\r\n    address assetId,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal {\r\n    require(!isNativeAsset(assetId), \"#DA:034\");\r\n    SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);\r\n  }\r\n\r\n  /**\r\n  * @notice Wrapper function to transfer a given asset (native or erc20) to\r\n  *         some recipient. Should handle all non-compliant return value\r\n  *         tokens as well by using the SafeERC20 contract by open zeppelin.\r\n  * @param assetId Asset id for transfer (address(0) for native asset, \r\n  *                token address for erc20s)\r\n  * @param recipient Address to send asset to\r\n  * @param amount Amount to send to given recipient\r\n  */\r\n  function transferAsset(\r\n      address assetId,\r\n      address payable recipient,\r\n      uint256 amount\r\n  ) internal {\r\n    isNativeAsset(assetId)\r\n      ? transferNativeAsset(recipient, amount)\r\n      : transferERC20(assetId, recipient, amount);\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interpreters/FulfillInterpreter.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @title FulfillInterpreter\r\n  * @author Connext <support@connext.network>\r\n  * @notice This library contains an `execute` function that is callabale by\r\n  *         an associated TransactionManager contract. This is used to execute\r\n  *         arbitrary calldata on a receiving chain.\r\n  */\r\ncontract FulfillInterpreter is ReentrancyGuard, IFulfillInterpreter {\r\n  address private immutable _transactionManager;\r\n\r\n  constructor(address transactionManager) {\r\n    _transactionManager = transactionManager;\r\n  }\r\n\r\n  /**\r\n  * @notice Errors if the sender is not the transaction manager\r\n  */\r\n  modifier onlyTransactionManager {\r\n    require(msg.sender == _transactionManager, \"#OTM:027\");\r\n    _;\r\n  }\r\n\r\n  /** \r\n    * @notice Returns the transaction manager address (only address that can \r\n    *         call the `execute` function)\r\n    * @return The address of the associated transaction manager\r\n    */\r\n  function getTransactionManager() override external view returns (address) {\r\n    return _transactionManager;\r\n  }\r\n\r\n  /** \r\n    * @notice Executes some arbitrary call data on a given address. The\r\n    *         call data executes can be payable, and will have `amount` sent\r\n    *         along with the function (or approved to the contract). If the\r\n    *         call fails, rather than reverting, funds are sent directly to \r\n    *         some provided fallbaack address\r\n    * @param transactionId Unique identifier of transaction id that necessitated\r\n    *        calldata execution\r\n    * @param callTo The address to execute the calldata on\r\n    * @param assetId The assetId of the funds to approve to the contract or\r\n    *                send along with the call\r\n    * @param fallbackAddress The address to send funds to if the `call` fails\r\n    * @param amount The amount to approve or send with the call\r\n    * @param callData The data to execute\r\n    */\r\n  function execute(\r\n    bytes32 transactionId,\r\n    address payable callTo,\r\n    address assetId,\r\n    address payable fallbackAddress,\r\n    uint256 amount,\r\n    bytes calldata callData\r\n  ) override external payable onlyTransactionManager returns (bool, bool, bytes memory) {\r\n    // If it is not ether, approve the callTo\r\n    // We approve here rather than transfer since many external contracts\r\n    // simply require an approval, and it is unclear if they can handle \r\n    // funds transferred directly to them (i.e. Uniswap)\r\n    bool isNative = LibAsset.isNativeAsset(assetId);\r\n    if (!isNative) {\r\n      LibAsset.increaseERC20Allowance(assetId, callTo, amount);\r\n    }\r\n\r\n    // Check if the callTo is a contract\r\n    bool success;\r\n    bytes memory returnData;\r\n    bool isContract = Address.isContract(callTo);\r\n    if (isContract) {\r\n      // Try to execute the callData\r\n      // the low level call will return `false` if its execution reverts\r\n      (success, returnData) = callTo.call{value: isNative ? amount : 0}(callData);\r\n    }\r\n\r\n    // Handle failure cases\r\n    if (!success) {\r\n      // If it fails, transfer to fallback\r\n      LibAsset.transferAsset(assetId, fallbackAddress, amount);\r\n      // Decrease allowance\r\n      if (!isNative) {\r\n        LibAsset.decreaseERC20Allowance(assetId, callTo, amount);\r\n      }\r\n    }\r\n\r\n    // Emit event\r\n    emit Executed(\r\n      transactionId,\r\n      callTo,\r\n      assetId,\r\n      fallbackAddress,\r\n      amount,\r\n      callData,\r\n      returnData,\r\n      success,\r\n      isContract\r\n    );\r\n    return (success, isContract, returnData);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITransactionManager.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface ITransactionManager {\r\n  // Structs\r\n\r\n  // Holds all data that is constant between sending and\r\n  // receiving chains. The hash of this is what gets signed\r\n  // to ensure the signature can be used on both chains.\r\n  struct InvariantTransactionData {\r\n    address receivingChainTxManagerAddress;\r\n    address user;\r\n    address router;\r\n    address initiator; // msg.sender of sending side\r\n    address sendingAssetId;\r\n    address receivingAssetId;\r\n    address sendingChainFallback; // funds sent here on cancel\r\n    address receivingAddress;\r\n    address callTo;\r\n    uint256 sendingChainId;\r\n    uint256 receivingChainId;\r\n    bytes32 callDataHash; // hashed to prevent free option\r\n    bytes32 transactionId;\r\n  }\r\n\r\n  // Holds all data that varies between sending and receiving\r\n  // chains. The hash of this is stored onchain to ensure the\r\n  // information passed in is valid.\r\n  struct VariantTransactionData {\r\n    uint256 amount;\r\n    uint256 expiry;\r\n    uint256 preparedBlockNumber;\r\n  }\r\n\r\n  // All Transaction data, constant and variable\r\n  struct TransactionData {\r\n    address receivingChainTxManagerAddress;\r\n    address user;\r\n    address router;\r\n    address initiator; // msg.sender of sending side\r\n    address sendingAssetId;\r\n    address receivingAssetId;\r\n    address sendingChainFallback;\r\n    address receivingAddress;\r\n    address callTo;\r\n    bytes32 callDataHash;\r\n    bytes32 transactionId;\r\n    uint256 sendingChainId;\r\n    uint256 receivingChainId;\r\n    uint256 amount;\r\n    uint256 expiry;\r\n    uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\r\n  }\r\n\r\n  // The structure of the signed data for fulfill\r\n  struct SignedFulfillData {\r\n    bytes32 transactionId;\r\n    uint256 relayerFee;\r\n    string functionIdentifier; // \"fulfill\" or \"cancel\"\r\n    uint256 receivingChainId; // For domain separation\r\n    address receivingChainTxManagerAddress; // For domain separation\r\n  }\r\n\r\n  // The structure of the signed data for cancellation\r\n  struct SignedCancelData {\r\n    bytes32 transactionId;\r\n    string functionIdentifier;\r\n    uint256 receivingChainId;\r\n    address receivingChainTxManagerAddress; // For domain separation\r\n  }\r\n\r\n  /**\r\n    * Arguments for calling prepare()\r\n    * @param invariantData The data for a crosschain transaction that will\r\n    *                      not change between sending and receiving chains.\r\n    *                      The hash of this data is used as the key to store \r\n    *                      the inforamtion that does change between chains \r\n    *                      (amount,expiry,preparedBlock) for verification\r\n    * @param amount The amount of the transaction on this chain\r\n    * @param expiry The block.timestamp when the transaction will no longer be\r\n    *               fulfillable and is freely cancellable on this chain\r\n    * @param encryptedCallData The calldata to be executed when the tx is\r\n    *                          fulfilled. Used in the function to allow the user\r\n    *                          to reconstruct the tx from events. Hash is stored\r\n    *                          onchain to prevent shenanigans.\r\n    * @param encodedBid The encoded bid that was accepted by the user for this\r\n    *                   crosschain transfer. It is supplied as a param to the\r\n    *                   function but is only used in event emission\r\n    * @param bidSignature The signature of the bidder on the encoded bid for\r\n    *                     this transaction. Only used within the function for\r\n    *                     event emission. The validity of the bid and\r\n    *                     bidSignature are enforced offchain\r\n    * @param encodedMeta The meta for the function\r\n    */\r\n  struct PrepareArgs {\r\n    InvariantTransactionData invariantData;\r\n    uint256 amount;\r\n    uint256 expiry;\r\n    bytes encryptedCallData;\r\n    bytes encodedBid;\r\n    bytes bidSignature;\r\n    bytes encodedMeta;\r\n  }\r\n\r\n  /**\r\n    * @param txData All of the data (invariant and variant) for a crosschain\r\n    *               transaction. The variant data provided is checked against\r\n    *               what was stored when the `prepare` function was called.\r\n    * @param relayerFee The fee that should go to the relayer when they are\r\n    *                   calling the function on the receiving chain for the user\r\n    * @param signature The users signature on the transaction id + fee that\r\n    *                  can be used by the router to unlock the transaction on \r\n    *                  the sending chain\r\n    * @param callData The calldata to be sent to and executed by the \r\n    *                 `FulfillHelper`\r\n    * @param encodedMeta The meta for the function\r\n    */\r\n  struct FulfillArgs {\r\n    TransactionData txData;\r\n    uint256 relayerFee;\r\n    bytes signature;\r\n    bytes callData;\r\n    bytes encodedMeta;\r\n  }\r\n\r\n  /**\r\n    * Arguments for calling cancel()\r\n    * @param txData All of the data (invariant and variant) for a crosschain\r\n    *               transaction. The variant data provided is checked against\r\n    *               what was stored when the `prepare` function was called.\r\n    * @param signature The user's signature that allows a transaction to be\r\n    *                  cancelled by a relayer\r\n    * @param encodedMeta The meta for the function\r\n    */\r\n  struct CancelArgs {\r\n    TransactionData txData;\r\n    bytes signature;\r\n    bytes encodedMeta;\r\n  }\r\n\r\n  // Adding/removing asset events\r\n  event RouterAdded(address indexed addedRouter, address indexed caller);\r\n\r\n  event RouterRemoved(address indexed removedRouter, address indexed caller);\r\n\r\n  // Adding/removing router events\r\n  event AssetAdded(address indexed addedAssetId, address indexed caller);\r\n\r\n  event AssetRemoved(address indexed removedAssetId, address indexed caller);\r\n\r\n  // Liquidity events\r\n  event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\r\n\r\n  event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\r\n\r\n  // Transaction events\r\n  event TransactionPrepared(\r\n    address indexed user,\r\n    address indexed router,\r\n    bytes32 indexed transactionId,\r\n    TransactionData txData,\r\n    address caller,\r\n    PrepareArgs args\r\n  );\r\n\r\n  event TransactionFulfilled(\r\n    address indexed user,\r\n    address indexed router,\r\n    bytes32 indexed transactionId,\r\n    FulfillArgs args,\r\n    bool success,\r\n    bool isContract,\r\n    bytes returnData,\r\n    address caller\r\n  );\r\n\r\n  event TransactionCancelled(\r\n    address indexed user,\r\n    address indexed router,\r\n    bytes32 indexed transactionId,\r\n    CancelArgs args,\r\n    address caller\r\n  );\r\n\r\n  // Getters\r\n  function getChainId() external view returns (uint256);\r\n\r\n  function getStoredChainId() external view returns (uint256);\r\n\r\n  // Owner only methods\r\n  function addRouter(address router) external;\r\n\r\n  function removeRouter(address router) external;\r\n\r\n  function addAssetId(address assetId) external;\r\n\r\n  function removeAssetId(address assetId) external;\r\n\r\n  // Router only methods\r\n  function addLiquidityFor(uint256 amount, address assetId, address router) external payable;\r\n\r\n  function addLiquidity(uint256 amount, address assetId) external payable;\r\n\r\n  function removeLiquidity(\r\n    uint256 amount,\r\n    address assetId,\r\n    address payable recipient\r\n  ) external;\r\n\r\n  // Methods for crosschain transfers\r\n  // called in the following order (in happy case)\r\n  // 1. prepare by user on sending chain\r\n  // 2. prepare by router on receiving chain\r\n  // 3. fulfill by user on receiving chain\r\n  // 4. fulfill by router on sending chain\r\n  function prepare(\r\n    PrepareArgs calldata args\r\n  ) external payable returns (TransactionData memory);\r\n\r\n  function fulfill(\r\n    FulfillArgs calldata args\r\n  ) external returns (TransactionData memory);\r\n\r\n  function cancel(CancelArgs calldata args) external returns (TransactionData memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return recover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return recover(hash, r, vs);\r\n        } else {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(\r\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\r\n            \"ECDSA: invalid signature 's' value\"\r\n        );\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Router.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\ncontract Router is Ownable {\r\n  address public immutable routerFactory;\r\n\r\n  ITransactionManager public transactionManager;\r\n\r\n  uint256 private chainId;\r\n\r\n  address public recipient;\r\n\r\n  address public routerSigner;\r\n\r\n  struct SignedPrepareData {\r\n    ITransactionManager.PrepareArgs args;\r\n    address routerRelayerFeeAsset;\r\n    uint256 routerRelayerFee;\r\n    uint256 chainId; // For domain separation\r\n  }\r\n\r\n  struct SignedFulfillData {\r\n    ITransactionManager.FulfillArgs args;\r\n    address routerRelayerFeeAsset;\r\n    uint256 routerRelayerFee;\r\n    uint256 chainId; // For domain separation\r\n  }\r\n\r\n  struct SignedCancelData {\r\n    ITransactionManager.CancelArgs args;\r\n    address routerRelayerFeeAsset;\r\n    uint256 routerRelayerFee;\r\n    uint256 chainId; // For domain separation\r\n  }\r\n\r\n  struct SignedRemoveLiquidityData {\r\n    uint256 amount;\r\n    address assetId;\r\n    address routerRelayerFeeAsset;\r\n    uint256 routerRelayerFee;\r\n    uint256 chainId; // For domain separation\r\n  }\r\n\r\n  event RelayerFeeAdded(address assetId, uint256 amount, address caller);\r\n  event RelayerFeeRemoved(address assetId, uint256 amount, address caller);\r\n  event RemoveLiquidity(\r\n    uint256 amount, \r\n    address assetId,\r\n    address routerRelayerFeeAsset,\r\n    uint256 routerRelayerFee, \r\n    address caller\r\n  );\r\n  event Prepare(\r\n    ITransactionManager.InvariantTransactionData invariantData,\r\n    address routerRelayerFeeAsset,\r\n    uint256 routerRelayerFee,\r\n    address caller\r\n  );\r\n  event Fulfill(\r\n    ITransactionManager.TransactionData txData,\r\n    address routerRelayerFeeAsset,\r\n    uint256 routerRelayerFee,\r\n    address caller\r\n  );\r\n  event Cancel(\r\n    ITransactionManager.TransactionData txData,\r\n    address routerRelayerFeeAsset,\r\n    uint256 routerRelayerFee,\r\n    address caller\r\n  );\r\n\r\n  constructor(address _routerFactory) {\r\n    routerFactory = _routerFactory;\r\n  }\r\n\r\n  // Prevents from calling methods other than routerFactory contract\r\n  modifier onlyViaFactory() {\r\n    require(msg.sender == routerFactory, \"ONLY_VIA_FACTORY\");\r\n    _;\r\n  }\r\n\r\n  function init(\r\n    address _transactionManager,\r\n    uint256 _chainId,\r\n    address _routerSigner,\r\n    address _recipient,\r\n    address _owner\r\n  ) external onlyViaFactory {\r\n    transactionManager = ITransactionManager(_transactionManager);\r\n    chainId = _chainId;\r\n    routerSigner = _routerSigner;\r\n    recipient = _recipient;\r\n    transferOwnership(_owner);\r\n  }\r\n\r\n  function setRecipient(address _recipient) external onlyOwner {\r\n    recipient = _recipient;\r\n  }\r\n\r\n  function setSigner(address _routerSigner) external onlyOwner {\r\n    routerSigner = _routerSigner;\r\n  }\r\n\r\n  function addRelayerFee(uint256 amount, address assetId) external payable {\r\n    // Sanity check: nonzero amounts\r\n    require(amount > 0, \"#RC_ARF:002\");\r\n\r\n    // Transfer funds to contract\r\n    // Validate correct amounts are transferred\r\n    if (LibAsset.isNativeAsset(assetId)) {\r\n      require(msg.value == amount, \"#RC_ARF:005\");\r\n    } else {\r\n      require(msg.value == 0, \"#RC_ARF:006\");\r\n      LibAsset.transferFromERC20(assetId, msg.sender, address(this), amount);\r\n    }\r\n\r\n    // Emit event\r\n    emit RelayerFeeAdded(assetId, amount, msg.sender);\r\n  }\r\n\r\n  function removeRelayerFee(uint256 amount, address assetId) external onlyOwner {\r\n    // Sanity check: nonzero amounts\r\n    require(amount > 0, \"#RC_RRF:002\");\r\n\r\n    // Transfer funds from contract\r\n    LibAsset.transferAsset(assetId, payable(recipient), amount);\r\n\r\n    // Emit event\r\n    emit RelayerFeeRemoved(assetId, amount, msg.sender);\r\n  }\r\n\r\n  function removeLiquidity(\r\n    uint256 amount,\r\n    address assetId,\r\n    address routerRelayerFeeAsset,\r\n    uint256 routerRelayerFee,\r\n    bytes calldata signature\r\n  ) external {\r\n    if (msg.sender != routerSigner) {\r\n      SignedRemoveLiquidityData memory payload = SignedRemoveLiquidityData({\r\n        amount: amount,\r\n        assetId: assetId,\r\n        routerRelayerFeeAsset: routerRelayerFeeAsset,\r\n        routerRelayerFee: routerRelayerFee,\r\n        chainId: chainId\r\n      });\r\n\r\n      address recovered = recoverSignature(abi.encode(payload), signature);\r\n      require(recovered == routerSigner, \"#RC_RL:040\");\r\n\r\n      // Send the relayer the fee\r\n      if (routerRelayerFee > 0) {\r\n        LibAsset.transferAsset(routerRelayerFeeAsset, payable(msg.sender), routerRelayerFee);\r\n      }\r\n    }\r\n\r\n    emit RemoveLiquidity(amount, assetId, routerRelayerFeeAsset, routerRelayerFee, msg.sender);\r\n    return transactionManager.removeLiquidity(amount, assetId, payable(recipient));\r\n  }\r\n\r\n  function prepare(\r\n    ITransactionManager.PrepareArgs calldata args,\r\n    address routerRelayerFeeAsset,\r\n    uint256 routerRelayerFee,\r\n    bytes calldata signature\r\n  ) external payable returns (ITransactionManager.TransactionData memory) {\r\n    if (msg.sender != routerSigner) {\r\n      SignedPrepareData memory payload = SignedPrepareData({\r\n        args: args,\r\n        routerRelayerFeeAsset: routerRelayerFeeAsset,\r\n        routerRelayerFee: routerRelayerFee,\r\n        chainId: chainId\r\n      });\r\n\r\n      address recovered = recoverSignature(abi.encode(payload), signature);\r\n      require(recovered == routerSigner, \"#RC_P:040\");\r\n\r\n      // Send the relayer the fee\r\n      if (routerRelayerFee > 0) {\r\n        LibAsset.transferAsset(routerRelayerFeeAsset, payable(msg.sender), routerRelayerFee);\r\n      }\r\n    }\r\n\r\n    emit Prepare(args.invariantData, routerRelayerFeeAsset, routerRelayerFee, msg.sender);\r\n    return transactionManager.prepare(args);\r\n  }\r\n\r\n  function fulfill(\r\n    ITransactionManager.FulfillArgs calldata args,\r\n    address routerRelayerFeeAsset,\r\n    uint256 routerRelayerFee,\r\n    bytes calldata signature\r\n  ) external returns (ITransactionManager.TransactionData memory) {\r\n    if (msg.sender != routerSigner) {\r\n      SignedFulfillData memory payload = SignedFulfillData({\r\n        args: args,\r\n        routerRelayerFeeAsset: routerRelayerFeeAsset,\r\n        routerRelayerFee: routerRelayerFee,\r\n        chainId: chainId\r\n      });\r\n\r\n      address recovered = recoverSignature(abi.encode(payload), signature);\r\n      require(recovered == routerSigner, \"#RC_F:040\");\r\n\r\n      // Send the relayer the fee\r\n      if (routerRelayerFee > 0) {\r\n        LibAsset.transferAsset(routerRelayerFeeAsset, payable(msg.sender), routerRelayerFee);\r\n      }\r\n    }\r\n    emit Fulfill(args.txData, routerRelayerFeeAsset, routerRelayerFee, msg.sender);\r\n    return transactionManager.fulfill(args);\r\n  }\r\n\r\n  function cancel(\r\n    ITransactionManager.CancelArgs calldata args,\r\n    address routerRelayerFeeAsset,\r\n    uint256 routerRelayerFee,\r\n    bytes calldata signature\r\n  ) external returns (ITransactionManager.TransactionData memory) {\r\n    if (msg.sender != routerSigner) {\r\n      SignedCancelData memory payload = SignedCancelData({\r\n        args: args,\r\n        routerRelayerFeeAsset: routerRelayerFeeAsset,\r\n        routerRelayerFee: routerRelayerFee,\r\n        chainId: chainId\r\n      });\r\n\r\n      address recovered = recoverSignature(abi.encode(payload), signature);\r\n      require(recovered == routerSigner, \"#RC_C:040\");\r\n\r\n      // Send the relayer the fee\r\n      if (routerRelayerFee > 0) {\r\n        LibAsset.transferAsset(routerRelayerFeeAsset, payable(msg.sender), routerRelayerFee);\r\n      }\r\n    }\r\n    emit Cancel(args.txData, routerRelayerFeeAsset, routerRelayerFee, msg.sender);\r\n    return transactionManager.cancel(args);\r\n  }\r\n\r\n  /**\r\n   * @notice Holds the logic to recover the routerSigner from an encoded payload.\r\n   *         Will hash and convert to an eth signed message.\r\n   * @param encodedPayload The payload that was signed\r\n   * @param signature The signature you are recovering the routerSigner from\r\n   */\r\n  function recoverSignature(bytes memory encodedPayload, bytes calldata signature) internal pure returns (address) {\r\n    // Recover\r\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(encodedPayload)), signature);\r\n  }\r\n\r\n  receive() external payable {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Create2.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\r\n * `CREATE2` can be used to compute in advance the address where a smart\r\n * contract will be deployed, which allows for interesting new mechanisms known\r\n * as 'counterfactual interactions'.\r\n *\r\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\r\n * information.\r\n */\r\nlibrary Create2 {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}.\r\n     *\r\n     * The bytecode for a contract can be obtained from Solidity with\r\n     * `type(contractName).creationCode`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `bytecode` must not be empty.\r\n     * - `salt` must have not been used for `bytecode` already.\r\n     * - the factory must have a balance of at least `amount`.\r\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\r\n     */\r\n    function deploy(\r\n        uint256 amount,\r\n        bytes32 salt,\r\n        bytes memory bytecode\r\n    ) internal returns (address) {\r\n        address addr;\r\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\r\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\r\n        assembly {\r\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n        return addr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\r\n     * `bytecodeHash` or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\r\n        return computeAddress(salt, bytecodeHash, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(\r\n        bytes32 salt,\r\n        bytes32 bytecodeHash,\r\n        address deployer\r\n    ) internal pure returns (address) {\r\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\r\n        return address(uint160(uint256(_data)));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRouterFactory.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IRouterFactory {\r\n  event RouterCreated(address router, address routerSigner, address recipient, address transactionManager);\r\n\r\n  function getRouterAddress(address routerSigner) external view returns (address);\r\n\r\n  function createRouter(address router, address recipient) external returns (address);\r\n}\r\n\r\n\r\n// File contracts/RouterFactory.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\ncontract RouterFactory is IRouterFactory, Ownable {\r\n  /**\r\n   * @dev The stored chain id of the contract, may be passed in to avoid any\r\n   *      evm issues\r\n   */\r\n  uint256 private chainId;\r\n\r\n  /**\r\n   * @dev The transaction Manager contract\r\n   */\r\n  ITransactionManager public transactionManager;\r\n\r\n  /**\r\n   * @dev Mapping of routerSigner to created Router contract address\r\n   */\r\n  mapping(address => address) public routerAddresses;\r\n\r\n  constructor(address _owner) {\r\n    transferOwnership(_owner);\r\n  }\r\n\r\n  function init(address _transactionManager) external onlyOwner {\r\n    require(address(_transactionManager) != address(0), \"#RF_I:042\");\r\n\r\n    transactionManager = ITransactionManager(_transactionManager);\r\n    chainId = ITransactionManager(_transactionManager).getChainId();\r\n  }\r\n\r\n  /**\r\n   * @notice Allows us to create new router contract\r\n   * @param routerSigner address router signer\r\n   * @param recipient address recipient\r\n   */\r\n\r\n  function createRouter(address routerSigner, address recipient) external override returns (address) {\r\n    require(address(transactionManager) != address(0), \"#RF_CR:042\");\r\n\r\n    require(routerSigner != address(0), \"#RF_CR:041\");\r\n\r\n    require(recipient != address(0), \"#RF_CR:007\");\r\n\r\n    address payable router = payable(Create2.deploy(0, generateSalt(routerSigner), getBytecode()));\r\n    Router(router).init(address(transactionManager), chainId, routerSigner, recipient, msg.sender);\r\n\r\n    routerAddresses[routerSigner] = router;\r\n    emit RouterCreated(router, routerSigner, recipient, address(transactionManager));\r\n    return router;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows us to get the address for a new router contract created via `createRouter`\r\n   * @param routerSigner address router signer\r\n   */\r\n  function getRouterAddress(address routerSigner) external view override returns (address) {\r\n    return Create2.computeAddress(generateSalt(routerSigner), keccak256(getBytecode()));\r\n  }\r\n\r\n  ////////////////////////////////////////\r\n  // Internal Methods\r\n\r\n  function getBytecode() internal view returns (bytes memory) {\r\n    bytes memory bytecode = type(Router).creationCode;\r\n    return abi.encodePacked(bytecode, abi.encode(address(this)));\r\n  }\r\n\r\n  function generateSalt(address routerSigner) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(routerSigner));\r\n  }\r\n}\r\n\r\n\r\n// File contracts/test/Counter.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ncontract Counter {\r\n  bool public shouldRevert;\r\n  uint256 public count = 0;\r\n\r\n  constructor() {\r\n    shouldRevert = false;\r\n  }\r\n\r\n  function setShouldRevert(bool value) public {\r\n    shouldRevert = value;\r\n  }\r\n\r\n  function increment() public {\r\n    require(!shouldRevert, \"increment: shouldRevert is true\");\r\n    count += 1;\r\n  }\r\n\r\n  function incrementAndSend(address assetId, address recipient, uint256 amount) public payable {\r\n    if (LibAsset.isNativeAsset(assetId)) {\r\n      require(msg.value == amount, \"incrementAndSend: INVALID_ETH_AMOUNT\");\r\n    } else {\r\n      require(msg.value == 0, \"incrementAndSend: ETH_WITH_ERC\");\r\n      LibAsset.transferFromERC20(assetId, msg.sender, address(this), amount);\r\n    }\r\n    increment();\r\n\r\n    LibAsset.transferAsset(assetId, payable(recipient), amount);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20Minimal.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Minimal ERC20 interface for Uniswap\r\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\r\ninterface IERC20Minimal {\r\n    /// @notice Returns the balance of a token\r\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\r\n    /// @return The number of tokens held by the account\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\r\n    /// @param recipient The account that will receive the amount transferred\r\n    /// @param amount The number of tokens to send from the sender to the recipient\r\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /// @notice Returns the current allowance given to a spender by an owner\r\n    /// @param owner The account of the token owner\r\n    /// @param spender The account of the token spender\r\n    /// @return The current allowance granted by `owner` to `spender`\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\r\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\r\n    /// @param amount The amount of tokens allowed to be used by `spender`\r\n    /// @return Returns true for a successful approval, false for unsuccessful\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\r\n    /// @param sender The account from which the transfer will be initiated\r\n    /// @param recipient The recipient of the transfer\r\n    /// @param amount The amount of the transfer\r\n    /// @return Returns true for a successful transfer, false for unsuccessful\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\r\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\r\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\r\n    /// @param value The amount of tokens that were transferred\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\r\n    /// @param owner The account that approved spending of its tokens\r\n    /// @param spender The account for which the spending allowance was modified\r\n    /// @param value The new allowance from the owner to the spender\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/test/FeeERC20.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/* This token is ONLY useful for testing\r\n * Anybody can mint as many tokens as they like\r\n * Anybody can burn anyone else's tokens\r\n */\r\ncontract FeeERC20 is ERC20 {\r\n\r\n  uint256 public fee = 1;\r\n\r\n  constructor() ERC20(\"Fee Token\", \"FEERC20\") {\r\n    _mint(msg.sender, 1000000 ether);\r\n  }\r\n\r\n  function setFee(uint256 _fee) external {\r\n    fee = _fee;\r\n  }\r\n\r\n  function mint(address account, uint256 amount) external {\r\n    _mint(account, amount);\r\n  }\r\n\r\n  function burn(address account, uint256 amount) external {\r\n    _burn(account, amount);\r\n  }\r\n\r\n  function transfer(address account, uint256 amount) public override returns (bool) {\r\n    uint256 toTransfer = amount - fee;\r\n    _transfer(msg.sender, account, toTransfer);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n    uint256 toTransfer = amount - fee;\r\n    _burn(sender, fee);\r\n    _transfer(sender, recipient, toTransfer);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/test/LibAssetTest.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/// @title LibAssetTest\r\n/// @author Connext\r\n/// @notice Used to easily test the internal methods of\r\n///         LibAsset.sol by aliasing them to public\r\n///         methods.\r\n\r\ncontract LibAssetTest {\r\n  \r\n  constructor() {}\r\n\r\n  receive() external payable {}\r\n\r\n  function isNativeAsset(address assetId) public pure returns (bool) {\r\n    return LibAsset.isNativeAsset(assetId);\r\n  }\r\n\r\n  function getOwnBalance(address assetId) public view returns (uint256) {\r\n    return LibAsset.getOwnBalance(assetId);\r\n  }\r\n\r\n  function transferNativeAsset(address payable recipient, uint256 amount) public {\r\n    LibAsset.transferNativeAsset(recipient, amount);\r\n  }\r\n\r\n  function increaseERC20Allowance(address assetId, address spender, uint256 amount) public {\r\n    LibAsset.increaseERC20Allowance(assetId, spender, amount);\r\n  }\r\n\r\n  function decreaseERC20Allowance(address assetId, address spender, uint256 amount) public {\r\n    LibAsset.decreaseERC20Allowance(assetId, spender, amount);\r\n  }\r\n\r\n  function transferERC20(\r\n    address assetId,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public {\r\n    LibAsset.transferERC20(assetId, recipient, amount);\r\n  }\r\n\r\n  // This function is a wrapper for transfers of Ether or ERC20 tokens,\r\n  // both standard-compliant ones as well as tokens that exhibit the\r\n  // missing-return-value bug.\r\n  function transferAsset(\r\n    address assetId,\r\n    address payable recipient,\r\n    uint256 amount\r\n  ) public {\r\n    LibAsset.transferAsset(assetId, recipient, amount);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/test/RevertableERC20.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/* This token is ONLY useful for testing\r\n * Anybody can mint as many tokens as they like\r\n * Anybody can burn anyone else's tokens\r\n */\r\ncontract RevertableERC20 is ERC20 {\r\n\r\n  bool public shouldRevert = false;\r\n\r\n  constructor() ERC20(\"Revertable Token\", \"RVRT\") {\r\n    _mint(msg.sender, 1000000 ether);\r\n  }\r\n\r\n  function mint(address account, uint256 amount) external {\r\n     require(!shouldRevert, \"mint: SHOULD_REVERT\");\r\n    _mint(account, amount);\r\n  }\r\n\r\n  function burn(address account, uint256 amount) external {\r\n    require(!shouldRevert, \"burn: SHOULD_REVERT\");\r\n    _burn(account, amount);\r\n  }\r\n\r\n  function transfer(address account, uint256 amount) public override returns (bool) {\r\n    require(!shouldRevert, \"transfer: SHOULD_REVERT\");\r\n    _transfer(msg.sender, account, amount);\r\n    return true;\r\n  }\r\n\r\n  function setShouldRevert(bool _shouldRevert) external {\r\n    shouldRevert = _shouldRevert;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/test/TestERC20.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/* This token is ONLY useful for testing\r\n * Anybody can mint as many tokens as they like\r\n * Anybody can burn anyone else's tokens\r\n */\r\ncontract TestERC20 is ERC20 {\r\n    constructor() ERC20(\"Test Token\", \"TEST\") {\r\n        _mint(msg.sender, 1000000 ether);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) external {\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ProposedOwnable.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @title ProposedOwnable\r\n * @notice Contract module which provides a basic access control mechanism, \r\n * where there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed via a two step process:\r\n * 1. Call `proposeOwner`\r\n * 2. Wait out the delay period\r\n * 3. Call `acceptOwner`\r\n *\r\n * @dev This module is used through inheritance. It will make available the \r\n * modifier `onlyOwner`, which can be applied to your functions to restrict \r\n * their use to the owner.\r\n * \r\n * @dev The majority of this code was taken from the openzeppelin Ownable \r\n * contract\r\n *\r\n */\r\nabstract contract ProposedOwnable {\r\n  address private _owner;\r\n\r\n  address private _proposed;\r\n  uint256 private _proposedOwnershipTimestamp;\r\n\r\n  bool private _routerOwnershipRenounced;\r\n  uint256 private _routerOwnershipTimestamp;\r\n\r\n  bool private _assetOwnershipRenounced;\r\n  uint256 private _assetOwnershipTimestamp;\r\n\r\n  uint256 private constant _delay = 7 days;\r\n\r\n  event RouterOwnershipRenunciationProposed(uint256 timestamp);\r\n\r\n  event RouterOwnershipRenounced(bool renounced);\r\n\r\n  event AssetOwnershipRenunciationProposed(uint256 timestamp);\r\n\r\n  event AssetOwnershipRenounced(bool renounced);\r\n\r\n  event OwnershipProposed(address indexed proposedOwner);\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n    * @notice Initializes the contract setting the deployer as the initial \r\n    * owner.\r\n    */\r\n  constructor() {\r\n    _setOwner(msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the address of the current owner.\r\n    */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the address of the proposed owner.\r\n    */\r\n  function proposed() public view virtual returns (address) {\r\n    return _proposed;\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the address of the proposed owner.\r\n    */\r\n  function proposedTimestamp() public view virtual returns (uint256) {\r\n    return _proposedOwnershipTimestamp;\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the timestamp when router ownership was last proposed to be renounced\r\n    */\r\n  function routerOwnershipTimestamp() public view virtual returns (uint256) {\r\n    return _routerOwnershipTimestamp;\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the timestamp when asset ownership was last proposed to be renounced\r\n    */\r\n  function assetOwnershipTimestamp() public view virtual returns (uint256) {\r\n    return _assetOwnershipTimestamp;\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the delay period before a new owner can be accepted.\r\n    */\r\n  function delay() public view virtual returns (uint256) {\r\n    return _delay;\r\n  }\r\n\r\n  /**\r\n    * @notice Throws if called by any account other than the owner.\r\n    */\r\n  modifier onlyOwner() {\r\n      require(_owner == msg.sender, \"#OO:029\");\r\n      _;\r\n  }\r\n\r\n  /**\r\n    * @notice Throws if called by any account other than the proposed owner.\r\n    */\r\n  modifier onlyProposed() {\r\n      require(_proposed == msg.sender, \"#OP:035\");\r\n      _;\r\n  }\r\n\r\n  /** \r\n    * @notice Indicates if the ownership of the router whitelist has\r\n    * been renounced\r\n    */\r\n  function isRouterOwnershipRenounced() public view returns (bool) {\r\n    return _owner == address(0) || _routerOwnershipRenounced;\r\n  }\r\n\r\n  /** \r\n    * @notice Indicates if the ownership of the router whitelist has\r\n    * been renounced\r\n    */\r\n  function proposeRouterOwnershipRenunciation() public virtual onlyOwner {\r\n    // Use contract as source of truth\r\n    // Will fail if all ownership is renounced by modifier\r\n    require(!_routerOwnershipRenounced, \"#PROR:038\");\r\n\r\n    // Begin delay, emit event\r\n    _setRouterOwnershipTimestamp();\r\n  }\r\n\r\n  /** \r\n    * @notice Indicates if the ownership of the asset whitelist has\r\n    * been renounced\r\n    */\r\n  function renounceRouterOwnership() public virtual onlyOwner {\r\n    // Contract as sournce of truth\r\n    // Will fail if all ownership is renounced by modifier\r\n    require(!_routerOwnershipRenounced, \"#RRO:038\");\r\n\r\n    // Ensure there has been a proposal cycle started\r\n    require(_routerOwnershipTimestamp > 0, \"#RRO:037\");\r\n\r\n    // Delay has elapsed\r\n    require((block.timestamp - _routerOwnershipTimestamp) > _delay, \"#RRO:030\");\r\n\r\n    // Set renounced, emit event, reset timestamp to 0\r\n    _setRouterOwnership(true);\r\n  }\r\n\r\n  /** \r\n    * @notice Indicates if the ownership of the asset whitelist has\r\n    * been renounced\r\n    */\r\n  function isAssetOwnershipRenounced() public view returns (bool) {\r\n    return _owner == address(0) || _assetOwnershipRenounced;\r\n  }\r\n\r\n  /** \r\n    * @notice Indicates if the ownership of the asset whitelist has\r\n    * been renounced\r\n    */\r\n  function proposeAssetOwnershipRenunciation() public virtual onlyOwner {\r\n    // Contract as sournce of truth\r\n    // Will fail if all ownership is renounced by modifier\r\n    require(!_assetOwnershipRenounced, \"#PAOR:038\");\r\n\r\n    // Start cycle, emit event\r\n    _setAssetOwnershipTimestamp();\r\n  }\r\n\r\n  /** \r\n    * @notice Indicates if the ownership of the asset whitelist has\r\n    * been renounced\r\n    */\r\n  function renounceAssetOwnership() public virtual onlyOwner {\r\n    // Contract as sournce of truth\r\n    // Will fail if all ownership is renounced by modifier\r\n    require(!_assetOwnershipRenounced, \"#RAO:038\");\r\n\r\n    // Ensure there has been a proposal cycle started\r\n    require(_assetOwnershipTimestamp > 0, \"#RAO:037\");\r\n\r\n    // Ensure delay has elapsed\r\n    require((block.timestamp - _assetOwnershipTimestamp) > _delay, \"#RAO:030\");\r\n\r\n    // Set ownership, reset timestamp, emit event\r\n    _setAssetOwnership(true);\r\n  }\r\n\r\n  /** \r\n    * @notice Indicates if the ownership has been renounced() by\r\n    * checking if current owner is address(0)\r\n    */\r\n  function renounced() public view returns (bool) {\r\n    return _owner == address(0);\r\n  }\r\n\r\n  /**\r\n    * @notice Sets the timestamp for an owner to be proposed, and sets the\r\n    * newly proposed owner as step 1 in a 2-step process\r\n   */\r\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\r\n    // Contract as source of truth\r\n    require(_proposed != newlyProposed || newlyProposed == address(0), \"#PNO:036\");\r\n\r\n    // Sanity check: reasonable proposal\r\n    require(_owner != newlyProposed, \"#PNO:038\");\r\n\r\n    _setProposed(newlyProposed);\r\n  }\r\n\r\n  /**\r\n    * @notice Renounces ownership of the contract after a delay\r\n    */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    // Ensure there has been a proposal cycle started\r\n    require(_proposedOwnershipTimestamp > 0, \"#RO:037\");\r\n\r\n    // Ensure delay has elapsed\r\n    require((block.timestamp - _proposedOwnershipTimestamp) > _delay, \"#RO:030\");\r\n\r\n    // Require proposed is set to 0\r\n    require(_proposed == address(0), \"#RO:036\");\r\n\r\n    // Emit event, set new owner, reset timestamp\r\n    _setOwner(_proposed);\r\n  }\r\n\r\n  /**\r\n    * @notice Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n  function acceptProposedOwner() public virtual onlyProposed {\r\n    // Contract as source of truth\r\n    require(_owner != _proposed, \"#APO:038\");\r\n\r\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\r\n    // the only time this would happen is if the _proposed was never\r\n    // set (will fail from modifier) or if the owner == _proposed (checked\r\n    // above)\r\n\r\n    // Ensure delay has elapsed\r\n    require((block.timestamp - _proposedOwnershipTimestamp) > _delay, \"#APO:030\");\r\n\r\n    // Emit event, set new owner, reset timestamp\r\n    _setOwner(_proposed);\r\n  }\r\n\r\n  ////// INTERNAL //////\r\n\r\n  function _setRouterOwnershipTimestamp() private {\r\n    _routerOwnershipTimestamp = block.timestamp;\r\n    emit RouterOwnershipRenunciationProposed(_routerOwnershipTimestamp);\r\n  }\r\n\r\n  function _setRouterOwnership(bool value) private {\r\n    _routerOwnershipRenounced = value;\r\n    _routerOwnershipTimestamp = 0;\r\n    emit RouterOwnershipRenounced(value);\r\n  }\r\n\r\n  function _setAssetOwnershipTimestamp() private {\r\n    _assetOwnershipTimestamp = block.timestamp;\r\n    emit AssetOwnershipRenunciationProposed(_assetOwnershipTimestamp);\r\n  }\r\n\r\n  function _setAssetOwnership(bool value) private {\r\n    _assetOwnershipRenounced = value;\r\n    _assetOwnershipTimestamp = 0;\r\n    emit AssetOwnershipRenounced(value);\r\n  }\r\n\r\n  function _setOwner(address newOwner) private {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    _proposedOwnershipTimestamp = 0;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n\r\n  function _setProposed(address newlyProposed) private {\r\n    _proposedOwnershipTimestamp = block.timestamp;\r\n    _proposed = newlyProposed;\r\n    emit OwnershipProposed(_proposed);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/TransactionManager.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  *\r\n  * @title TransactionManager\r\n  * @author Connext <support@connext.network>\r\n  * @notice This contract holds the logic to facilitate crosschain transactions.\r\n  *         Transactions go through three phases in the happy case:\r\n  *\r\n  *         1. Route Auction (offchain): User broadcasts to our network \r\n  *         signalling their desired route. Routers respond with sealed bids \r\n  *         containing commitments to fulfilling the transaction within a \r\n  *         certain time and price range.\r\n  *\r\n  *         2. Prepare: Once the auction is completed, the transaction can be \r\n  *         prepared. The user submits a transaction to `TransactionManager` \r\n  *         contract on sender-side chain containing router's signed bid. This \r\n  *         transaction locks up the users funds on the sending chain. Upon \r\n  *         detecting an event containing their signed bid from the chain, \r\n  *         router submits the same transaction to `TransactionManager` on the \r\n  *         receiver-side chain, and locks up a corresponding amount of \r\n  *         liquidity. The amount locked on the receiving chain is `sending \r\n  *         amount - auction fee` so the router is incentivized to complete the \r\n  *         transaction.\r\n  *\r\n  *         3. Fulfill: Upon detecting the `TransactionPrepared` event on the \r\n  *         receiver-side chain, the user signs a message and sends it to a \r\n  *         relayer, who will earn a fee for submission. The relayer (which may \r\n  *         be the router) then submits the message to the `TransactionManager` \r\n  *         to complete their transaction on receiver-side chain and claim the \r\n  *         funds locked by the router. A relayer is used here to allow users \r\n  *         to submit transactions with arbitrary calldata on the receiving \r\n  *         chain without needing gas to do so. The router then submits the \r\n  *         same signed message and completes transaction on sender-side, \r\n  *         unlocking the original `amount`.\r\n  *\r\n  *         If a transaction is not fulfilled within a fixed timeout, it \r\n  *         reverts and can be reclaimed by the party that called `prepare` on \r\n  *         each chain (initiator). Additionally, transactions can be cancelled \r\n  *         unilaterally by the person owed funds on that chain (router for \r\n  *         sending chain, user for receiving chain) prior to expiry.\r\n  */\r\ncontract TransactionManager is ReentrancyGuard, ProposedOwnable, ITransactionManager {\r\n  /**\r\n   * @dev Mapping of router to balance specific to asset\r\n   */\r\n  mapping(address => mapping(address => uint256)) public routerBalances;\r\n\r\n  /**\r\n    * @dev Mapping of allowed router addresses. Must be added to both\r\n    *      sending and receiving chains when forwarding a transfer.\r\n    */\r\n  mapping(address => bool) public approvedRouters;\r\n\r\n  /**\r\n    * @dev Mapping of allowed assetIds on same chain as contract\r\n    */\r\n  mapping(address => bool) public approvedAssets;\r\n\r\n  /**\r\n    * @dev Mapping of hash of `InvariantTransactionData` to the hash\r\n    *      of the `VariantTransactionData`\r\n    */\r\n  mapping(bytes32 => bytes32) public variantTransactionData;\r\n\r\n  /**\r\n  * @dev The stored chain id of the contract, may be passed in to avoid any \r\n  *      evm issues\r\n  */\r\n  uint256 private immutable chainId;\r\n\r\n  /**\r\n    * @dev Minimum timeout (will be the lowest on the receiving chain)\r\n    */\r\n  uint256 public constant MIN_TIMEOUT = 1 days; // 24 hours\r\n\r\n  /**\r\n    * @dev Maximum timeout (will be the highest on the sending chain)\r\n    */\r\n  uint256 public constant MAX_TIMEOUT = 30 days; // 720 hours\r\n\r\n  /**\r\n    * @dev The external contract that will execute crosschain\r\n    *      calldata\r\n    */\r\n  IFulfillInterpreter public immutable interpreter;\r\n\r\n  constructor(uint256 _chainId) {\r\n    chainId = _chainId;\r\n    interpreter = new FulfillInterpreter(address(this));\r\n  }\r\n\r\n  /** \r\n   * @notice Gets the chainId for this contract. If not specified during init\r\n   *         will use the block.chainId\r\n   */\r\n  function getChainId() public view override returns (uint256 _chainId) {\r\n    // Hold in memory to reduce sload calls\r\n    uint256 chain = chainId;\r\n    if (chain == 0) {\r\n      // If not provided, pull from block\r\n      chain = block.chainid;\r\n    }\r\n    return chain;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows us to get the chainId that this contract has stored\r\n   */\r\n  function getStoredChainId() external view override returns (uint256) {\r\n    return chainId;\r\n  }\r\n\r\n  /**\r\n    * @notice Used to add routers that can transact crosschain\r\n    * @param router Router address to add\r\n    */\r\n  function addRouter(address router) external override onlyOwner {\r\n    // Sanity check: not empty\r\n    require(router != address(0), \"#AR:001\");\r\n\r\n    // Sanity check: needs approval\r\n    require(approvedRouters[router] == false, \"#AR:032\");\r\n\r\n    // Update mapping\r\n    approvedRouters[router] = true;\r\n\r\n    // Emit event\r\n    emit RouterAdded(router, msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @notice Used to remove routers that can transact crosschain\r\n    * @param router Router address to remove\r\n    */\r\n  function removeRouter(address router) external override onlyOwner {\r\n    // Sanity check: not empty\r\n    require(router != address(0), \"#RR:001\");\r\n\r\n    // Sanity check: needs removal\r\n    require(approvedRouters[router] == true, \"#RR:033\");\r\n\r\n    // Update mapping\r\n    approvedRouters[router] = false;\r\n\r\n    // Emit event\r\n    emit RouterRemoved(router, msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @notice Used to add assets on same chain as contract that can\r\n    *         be transferred.\r\n    * @param assetId AssetId to add\r\n    */\r\n  function addAssetId(address assetId) external override onlyOwner {\r\n    // Sanity check: needs approval\r\n    require(approvedAssets[assetId] == false, \"#AA:032\");\r\n\r\n    // Update mapping\r\n    approvedAssets[assetId] = true;\r\n\r\n    // Emit event\r\n    emit AssetAdded(assetId, msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @notice Used to remove assets on same chain as contract that can\r\n    *         be transferred.\r\n    * @param assetId AssetId to remove\r\n    */\r\n  function removeAssetId(address assetId) external override onlyOwner {\r\n    // Sanity check: already approval\r\n    require(approvedAssets[assetId] == true, \"#RA:033\");\r\n\r\n    // Update mapping\r\n    approvedAssets[assetId] = false;\r\n\r\n    // Emit event\r\n    emit AssetRemoved(assetId, msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @notice This is used by anyone to increase a router's available\r\n    *         liquidity for a given asset.\r\n    * @param amount The amount of liquidity to add for the router\r\n    * @param assetId The address (or `address(0)` if native asset) of the\r\n    *                asset you're adding liquidity for\r\n    * @param router The router you are adding liquidity on behalf of\r\n    */\r\n  function addLiquidityFor(uint256 amount, address assetId, address router) external payable override nonReentrant {\r\n    _addLiquidityForRouter(amount, assetId, router);\r\n  }\r\n\r\n  /**\r\n    * @notice This is used by any router to increase their available\r\n    *         liquidity for a given asset.\r\n    * @param amount The amount of liquidity to add for the router\r\n    * @param assetId The address (or `address(0)` if native asset) of the\r\n    *                asset you're adding liquidity for\r\n    */\r\n  function addLiquidity(uint256 amount, address assetId) external payable override nonReentrant {\r\n    _addLiquidityForRouter(amount, assetId, msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @notice This is used by any router to decrease their available\r\n    *         liquidity for a given asset.\r\n    * @param amount The amount of liquidity to remove for the router\r\n    * @param assetId The address (or `address(0)` if native asset) of the\r\n    *                asset you're removing liquidity for\r\n    * @param recipient The address that will receive the liquidity being removed\r\n    */\r\n  function removeLiquidity(\r\n    uint256 amount,\r\n    address assetId,\r\n    address payable recipient\r\n  ) external override nonReentrant {\r\n    // Sanity check: recipient is sensible\r\n    require(recipient != address(0), \"#RL:007\");\r\n\r\n    // Sanity check: nonzero amounts\r\n    require(amount > 0, \"#RL:002\");\r\n\r\n    uint256 routerBalance = routerBalances[msg.sender][assetId];\r\n    // Sanity check: amount can be deducted for the router\r\n    require(routerBalance >= amount, \"#RL:008\");\r\n\r\n    // Update router balances\r\n    unchecked {\r\n      routerBalances[msg.sender][assetId] = routerBalance - amount;\r\n    }\r\n\r\n    // Transfer from contract to specified recipient\r\n    LibAsset.transferAsset(assetId, recipient, amount);\r\n\r\n    // Emit event\r\n    emit LiquidityRemoved(msg.sender, assetId, amount, recipient);\r\n  }\r\n\r\n  /**\r\n    * @notice This function creates a crosschain transaction. When called on\r\n    *         the sending chain, the user is expected to lock up funds. When\r\n    *         called on the receiving chain, the router deducts the transfer\r\n    *         amount from the available liquidity. The majority of the\r\n    *         information about a given transfer does not change between chains,\r\n    *         with three notable exceptions: `amount`, `expiry`, and \r\n    *         `preparedBlock`. The `amount` and `expiry` are decremented\r\n    *         between sending and receiving chains to provide an incentive for \r\n    *         the router to complete the transaction and time for the router to\r\n    *         fulfill the transaction on the sending chain after the unlocking\r\n    *         signature is revealed, respectively.\r\n    * @param args TODO\r\n    */\r\n  function prepare(\r\n    PrepareArgs calldata args\r\n  ) external payable override nonReentrant returns (TransactionData memory) {\r\n    // Sanity check: user is sensible\r\n    require(args.invariantData.user != address(0), \"#P:009\");\r\n\r\n    // Sanity check: router is sensible\r\n    require(args.invariantData.router != address(0), \"#P:001\");\r\n\r\n    // Router is approved *on both chains*\r\n    require(isRouterOwnershipRenounced() || approvedRouters[args.invariantData.router], \"#P:003\");\r\n\r\n    // Sanity check: sendingChainFallback is sensible\r\n    require(args.invariantData.sendingChainFallback != address(0), \"#P:010\");\r\n\r\n    // Sanity check: valid fallback\r\n    require(args.invariantData.receivingAddress != address(0), \"#P:026\");\r\n\r\n    // Make sure the chains are different\r\n    require(args.invariantData.sendingChainId != args.invariantData.receivingChainId, \"#P:011\");\r\n\r\n    // Make sure the chains are relevant\r\n    uint256 _chainId = getChainId();\r\n    require(args.invariantData.sendingChainId == _chainId || args.invariantData.receivingChainId == _chainId, \"#P:012\");\r\n\r\n    { // Expiry scope\r\n      // Make sure the expiry is greater than min\r\n      uint256 buffer = args.expiry - block.timestamp;\r\n      require(buffer >= MIN_TIMEOUT, \"#P:013\");\r\n\r\n      // Make sure the expiry is lower than max\r\n      require(buffer <= MAX_TIMEOUT, \"#P:014\");\r\n    }\r\n\r\n    // Make sure the hash is not a duplicate\r\n    bytes32 digest = keccak256(abi.encode(args.invariantData));\r\n    require(variantTransactionData[digest] == bytes32(0), \"#P:015\");\r\n\r\n    // NOTE: the `encodedBid` and `bidSignature` are simply passed through\r\n    //       to the contract emitted event to ensure the availability of\r\n    //       this information. Their validity is asserted offchain, and\r\n    //       is out of scope of this contract. They are used as inputs so\r\n    //       in the event of a router or user crash, they may recover the\r\n    //       correct bid information without requiring an offchain store.\r\n\r\n    // Amount actually used (if fee-on-transfer will be different than\r\n    // supplied)\r\n    uint256 amount = args.amount;\r\n\r\n    // First determine if this is sender side or receiver side\r\n    if (args.invariantData.sendingChainId == _chainId) {\r\n      // Check the sender is correct\r\n      require(msg.sender == args.invariantData.initiator, \"#P:039\");\r\n\r\n      // Sanity check: amount is sensible\r\n      // Only check on sending chain to enforce router fees. Transactions could\r\n      // be 0-valued on receiving chain if it is just a value-less call to some\r\n      // `IFulfillHelper`\r\n      require(args.amount > 0, \"#P:002\");\r\n\r\n      // Assets are approved\r\n      // NOTE: Cannot check this on receiving chain because of differing\r\n      // chain contexts\r\n      require(isAssetOwnershipRenounced() || approvedAssets[args.invariantData.sendingAssetId], \"#P:004\");\r\n\r\n      // This is sender side prepare. The user is beginning the process of \r\n      // submitting an onchain tx after accepting some bid. They should\r\n      // lock their funds in the contract for the router to claim after\r\n      // they have revealed their signature on the receiving chain via\r\n      // submitting a corresponding `fulfill` tx\r\n\r\n      // Validate correct amounts on msg and transfer from user to\r\n      // contract\r\n      amount = transferAssetToContract(\r\n        args.invariantData.sendingAssetId,\r\n        args.amount\r\n      );\r\n\r\n      // Store the transaction variants. This happens after transferring to\r\n      // account for fee on transfer tokens\r\n      variantTransactionData[digest] = hashVariantTransactionData(\r\n        amount,\r\n        args.expiry,\r\n        block.number\r\n      );\r\n    } else {\r\n      // This is receiver side prepare. The router has proposed a bid on the\r\n      // transfer which the user has accepted. They can now lock up their\r\n      // own liquidity on th receiving chain, which the user can unlock by\r\n      // calling `fulfill`. When creating the `amount` and `expiry` on the\r\n      // receiving chain, the router should have decremented both. The\r\n      // expiry should be decremented to ensure the router has time to\r\n      // complete the sender-side transaction after the user completes the\r\n      // receiver-side transactoin. The amount should be decremented to act as\r\n      // a fee to incentivize the router to complete the transaction properly.\r\n\r\n      // Check that the callTo is a contract\r\n      // NOTE: This cannot happen on the sending chain (different chain \r\n      // contexts), so a user could mistakenly create a transfer that must be\r\n      // cancelled if this is incorrect\r\n      require(args.invariantData.callTo == address(0) || Address.isContract(args.invariantData.callTo), \"#P:031\");\r\n\r\n      // Check that the asset is approved\r\n      // NOTE: This cannot happen on both chains because of differing chain \r\n      // contexts. May be possible for user to create transaction that is not\r\n      // prepare-able on the receiver chain.\r\n      require(isAssetOwnershipRenounced() || approvedAssets[args.invariantData.receivingAssetId], \"#P:004\");\r\n\r\n      // Check that the caller is the router\r\n      require(msg.sender == args.invariantData.router, \"#P:016\");\r\n\r\n      // Check that the router isnt accidentally locking funds in the contract\r\n      require(msg.value == 0, \"#P:017\");\r\n\r\n      // Check that router has liquidity\r\n      uint256 balance = routerBalances[args.invariantData.router][args.invariantData.receivingAssetId];\r\n      require(balance >= amount, \"#P:018\");\r\n\r\n      // Store the transaction variants\r\n      variantTransactionData[digest] = hashVariantTransactionData(\r\n        amount,\r\n        args.expiry,\r\n        block.number\r\n      );\r\n\r\n      // Decrement the router liquidity\r\n      // using unchecked because underflow protected against with require\r\n      unchecked {\r\n        routerBalances[args.invariantData.router][args.invariantData.receivingAssetId] = balance - amount;\r\n      }\r\n    }\r\n\r\n    // Emit event\r\n    TransactionData memory txData = TransactionData({\r\n      receivingChainTxManagerAddress: args.invariantData.receivingChainTxManagerAddress,\r\n      user: args.invariantData.user,\r\n      router: args.invariantData.router,\r\n      initiator: args.invariantData.initiator,\r\n      sendingAssetId: args.invariantData.sendingAssetId,\r\n      receivingAssetId: args.invariantData.receivingAssetId,\r\n      sendingChainFallback: args.invariantData.sendingChainFallback,\r\n      callTo: args.invariantData.callTo,\r\n      receivingAddress: args.invariantData.receivingAddress,\r\n      callDataHash: args.invariantData.callDataHash,\r\n      transactionId: args.invariantData.transactionId,\r\n      sendingChainId: args.invariantData.sendingChainId,\r\n      receivingChainId: args.invariantData.receivingChainId,\r\n      amount: amount,\r\n      expiry: args.expiry,\r\n      preparedBlockNumber: block.number\r\n    });\r\n\r\n    emit TransactionPrepared(\r\n      txData.user,\r\n      txData.router,\r\n      txData.transactionId,\r\n      txData,\r\n      msg.sender,\r\n      args\r\n    );\r\n\r\n    return txData;\r\n  }\r\n\r\n\r\n\r\n    /**\r\n    * @notice This function completes a crosschain transaction. When called on\r\n    *         the receiving chain, the user reveals their signature on the\r\n    *         transactionId and is sent the amount corresponding to the number\r\n    *         of shares the router locked when calling `prepare`. The router \r\n    *         then uses this signature to unlock the corresponding funds on the \r\n    *         receiving chain, which are then added back to their available \r\n    *         liquidity. The user includes a relayer fee since it is not \r\n    *         assumed they will have gas on the receiving chain. This function \r\n    *         *must* be called before the transaction expiry has elapsed.\r\n    * @param args TODO\r\n    */\r\n  function fulfill(\r\n    FulfillArgs calldata args\r\n  ) external override nonReentrant returns (TransactionData memory) {\r\n    // Get the hash of the invariant tx data. This hash is the same\r\n    // between sending and receiving chains. The variant data is stored\r\n    // in the contract when `prepare` is called within the mapping.\r\n\r\n    { // scope: validation and effects\r\n      bytes32 digest = hashInvariantTransactionData(args.txData);\r\n\r\n      // Make sure that the variant data matches what was stored\r\n      require(variantTransactionData[digest] == hashVariantTransactionData(\r\n        args.txData.amount,\r\n        args.txData.expiry,\r\n        args.txData.preparedBlockNumber\r\n      ), \"#F:019\");\r\n\r\n      // Make sure the expiry has not elapsed\r\n      require(args.txData.expiry >= block.timestamp, \"#F:020\");\r\n\r\n      // Make sure the transaction wasn't already completed\r\n      require(args.txData.preparedBlockNumber > 0, \"#F:021\");\r\n\r\n      // Check provided callData matches stored hash\r\n      require(keccak256(args.callData) == args.txData.callDataHash, \"#F:024\");\r\n\r\n      // To prevent `fulfill` / `cancel` from being called multiple times, the\r\n      // preparedBlockNumber is set to 0 before being hashed. The value of the\r\n      // mapping is explicitly *not* zeroed out so users who come online without\r\n      // a store can tell the difference between a transaction that has not been\r\n      // prepared, and a transaction that was already completed on the receiver\r\n      // chain.\r\n      variantTransactionData[digest] = hashVariantTransactionData(\r\n        args.txData.amount,\r\n        args.txData.expiry,\r\n        0\r\n      );\r\n    }\r\n\r\n    // Declare these variables for the event emission. Are only assigned\r\n    // IFF there is an external call on the receiving chain\r\n    bool success;\r\n    bool isContract;\r\n    bytes memory returnData;\r\n\r\n    uint256 _chainId = getChainId();\r\n\r\n    if (args.txData.sendingChainId == _chainId) {\r\n      // The router is completing the transaction, they should get the\r\n      // amount that the user deposited credited to their liquidity\r\n      // reserves.\r\n\r\n      // Make sure that the user is not accidentally fulfilling the transaction\r\n      // on the sending chain\r\n      require(msg.sender == args.txData.router, \"#F:016\");\r\n\r\n      // Validate the user has signed\r\n      require(\r\n        recoverFulfillSignature(\r\n          args.txData.transactionId,\r\n          args.relayerFee,\r\n          args.txData.receivingChainId,\r\n          args.txData.receivingChainTxManagerAddress,\r\n          args.signature\r\n        ) == args.txData.user, \"#F:022\"\r\n      );\r\n\r\n      // Complete tx to router for original sending amount\r\n      routerBalances[args.txData.router][args.txData.sendingAssetId] += args.txData.amount;\r\n\r\n    } else {\r\n      // Validate the user has signed, using domain of contract\r\n      require(\r\n        recoverFulfillSignature(\r\n          args.txData.transactionId,\r\n          args.relayerFee,\r\n          _chainId,\r\n          address(this),\r\n          args.signature\r\n        ) == args.txData.user, \"#F:022\"\r\n      );\r\n\r\n      // Sanity check: fee <= amount. Allow `=` in case of only \r\n      // wanting to execute 0-value crosschain tx, so only providing \r\n      // the fee amount\r\n      require(args.relayerFee <= args.txData.amount, \"#F:023\");\r\n\r\n      (success, isContract, returnData) = _receivingChainFulfill(\r\n        args.txData,\r\n        args.relayerFee,\r\n        args.callData\r\n      );\r\n    }\r\n\r\n    // Emit event\r\n    emit TransactionFulfilled(\r\n      args.txData.user,\r\n      args.txData.router,\r\n      args.txData.transactionId,\r\n      args,\r\n      success,\r\n      isContract,\r\n      returnData,\r\n      msg.sender\r\n    );\r\n\r\n    return args.txData;\r\n  }\r\n\r\n  /**\r\n    * @notice Any crosschain transaction can be cancelled after it has been\r\n    *         created to prevent indefinite lock up of funds. After the\r\n    *         transaction has expired, anyone can cancel it. Before the\r\n    *         expiry, only the recipient of the funds on the given chain is\r\n    *         able to cancel. On the sending chain, this means only the router\r\n    *         is able to cancel before the expiry, while only the user can\r\n    *         prematurely cancel on the receiving chain.\r\n    * @param args TODO\r\n    */\r\n  function cancel(CancelArgs calldata args)\r\n    external\r\n    override\r\n    nonReentrant\r\n    returns (TransactionData memory)\r\n  {\r\n    // Make sure params match against stored data\r\n    // Also checks that there is an active transfer here\r\n    // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\r\n\r\n    // Get the hash of the invariant tx data. This hash is the same\r\n    // between sending and receiving chains. The variant data is stored\r\n    // in the contract when `prepare` is called within the mapping.\r\n    bytes32 digest = hashInvariantTransactionData(args.txData);\r\n\r\n    // Verify the variant data is correct\r\n    require(variantTransactionData[digest] == hashVariantTransactionData(args.txData.amount, args.txData.expiry, args.txData.preparedBlockNumber), \"#C:019\");\r\n\r\n    // Make sure the transaction wasn't already completed\r\n    require(args.txData.preparedBlockNumber > 0, \"#C:021\");\r\n\r\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\r\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\r\n    // mapping is explicitly *not* zeroed out so users who come online without\r\n    // a store can tell the difference between a transaction that has not been\r\n    // prepared, and a transaction that was already completed on the receiver\r\n    // chain.\r\n    variantTransactionData[digest] = hashVariantTransactionData(args.txData.amount, args.txData.expiry, 0);\r\n\r\n    // Get chainId for gas\r\n    uint256 _chainId = getChainId();\r\n\r\n    // Return the appropriate locked funds\r\n    if (args.txData.sendingChainId == _chainId) {\r\n      // Sender side, funds must be returned to the user\r\n      if (args.txData.expiry >= block.timestamp) {\r\n        // Timeout has not expired and tx may only be cancelled by router\r\n        // NOTE: no need to validate the signature here, since you are requiring\r\n        // the router must be the sender when the cancellation is during the\r\n        // fulfill-able window\r\n        require(msg.sender == args.txData.router, \"#C:025\");\r\n      }\r\n\r\n      // Return users locked funds\r\n      // NOTE: no need to check if amount > 0 because cant be prepared on\r\n      // sending chain with 0 value\r\n      LibAsset.transferAsset(\r\n        args.txData.sendingAssetId,\r\n        payable(args.txData.sendingChainFallback),\r\n        args.txData.amount\r\n      );\r\n\r\n    } else {\r\n      // Receiver side, router liquidity is returned\r\n      if (args.txData.expiry >= block.timestamp) {\r\n        // Timeout has not expired and tx may only be cancelled by user\r\n        // Validate signature\r\n        require(msg.sender == args.txData.user || recoverCancelSignature(args.txData.transactionId, _chainId, address(this), args.signature) == args.txData.user, \"#C:022\");\r\n\r\n        // NOTE: there is no incentive here for relayers to submit this on\r\n        // behalf of the user (i.e. fee not respected) because the user has not\r\n        // locked funds on this contract. However, if the user reveals their\r\n        // cancel signature to the router, they are incentivized to submit it\r\n        // to unlock their own funds\r\n      }\r\n\r\n      // Return liquidity to router\r\n      routerBalances[args.txData.router][args.txData.receivingAssetId] += args.txData.amount;\r\n    }\r\n\r\n    // Emit event\r\n    emit TransactionCancelled(\r\n      args.txData.user,\r\n      args.txData.router,\r\n      args.txData.transactionId,\r\n      args,\r\n      msg.sender\r\n    );\r\n\r\n    // Return\r\n    return args.txData;\r\n  }\r\n\r\n  //////////////////////////\r\n  /// Private functions ///\r\n  //////////////////////////\r\n\r\n  /**\r\n    * @notice Contains the logic to verify + increment a given routers liquidity\r\n    * @param amount The amount of liquidity to add for the router\r\n    * @param assetId The address (or `address(0)` if native asset) of the\r\n    *                asset you're adding liquidity for\r\n    * @param router The router you are adding liquidity on behalf of\r\n    */\r\n  function _addLiquidityForRouter(\r\n    uint256 amount,\r\n    address assetId,\r\n    address router\r\n  ) internal {\r\n    // Sanity check: router is sensible\r\n    require(router != address(0), \"#AL:001\");\r\n\r\n    // Sanity check: nonzero amounts\r\n    require(amount > 0, \"#AL:002\");\r\n\r\n    // Router is approved\r\n    require(isRouterOwnershipRenounced() || approvedRouters[router], \"#AL:003\");\r\n\r\n    // Asset is approved\r\n    require(isAssetOwnershipRenounced() || approvedAssets[assetId], \"#AL:004\");\r\n\r\n    // Transfer funds to contract\r\n    amount = transferAssetToContract(assetId, amount);\r\n\r\n    // Update the router balances. Happens after pulling funds to account for\r\n    // the fee on transfer tokens\r\n    routerBalances[router][assetId] += amount;\r\n\r\n    // Emit event\r\n    emit LiquidityAdded(router, assetId, amount, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Handles transferring funds from msg.sender to the\r\n   *         transaction manager contract. Used in prepare, addLiquidity\r\n   * @param assetId The address to transfer\r\n   * @param specifiedAmount The specified amount to transfer. May not be the \r\n   *                        actual amount transferred (i.e. fee on transfer \r\n   *                        tokens)\r\n   */\r\n  function transferAssetToContract(address assetId, uint256 specifiedAmount) internal returns (uint256) {\r\n    uint256 trueAmount = specifiedAmount;\r\n\r\n    // Validate correct amounts are transferred\r\n    if (LibAsset.isNativeAsset(assetId)) {\r\n      require(msg.value == specifiedAmount, \"#TA:005\");\r\n    } else {\r\n      uint256 starting = LibAsset.getOwnBalance(assetId);\r\n      require(msg.value == 0, \"#TA:006\");\r\n      LibAsset.transferFromERC20(assetId, msg.sender, address(this), specifiedAmount);\r\n      // Calculate the *actual* amount that was sent here\r\n      trueAmount = LibAsset.getOwnBalance(assetId) - starting;\r\n    }\r\n\r\n    return trueAmount;\r\n  }\r\n\r\n  /// @notice Recovers the signer from the signature provided by the user\r\n  /// @param transactionId Transaction identifier of tx being recovered\r\n  /// @param signature The signature you are recovering the signer from\r\n  function recoverCancelSignature(\r\n    bytes32 transactionId,\r\n    uint256 receivingChainId,\r\n    address receivingChainTxManagerAddress,\r\n    bytes calldata signature\r\n  ) internal pure returns (address) {\r\n    // Create the signed payload\r\n    SignedCancelData memory payload = SignedCancelData({\r\n      transactionId: transactionId,\r\n      functionIdentifier: \"cancel\",\r\n      receivingChainId: receivingChainId,\r\n      receivingChainTxManagerAddress: receivingChainTxManagerAddress\r\n    });\r\n\r\n    // Recover\r\n    return recoverSignature(abi.encode(payload), signature);\r\n  }\r\n\r\n  /**\r\n    * @notice Recovers the signer from the signature provided by the user\r\n    * @param transactionId Transaction identifier of tx being recovered\r\n    * @param relayerFee The fee paid to the relayer for submitting the\r\n    *                   tx on behalf of the user.\r\n    * @param signature The signature you are recovering the signer from\r\n    */\r\n  function recoverFulfillSignature(\r\n    bytes32 transactionId,\r\n    uint256 relayerFee,\r\n    uint256 receivingChainId,\r\n    address receivingChainTxManagerAddress,\r\n    bytes calldata signature\r\n  ) internal pure returns (address) {\r\n    // Create the signed payload\r\n    SignedFulfillData memory payload = SignedFulfillData({\r\n      transactionId: transactionId,\r\n      relayerFee: relayerFee,\r\n      functionIdentifier: \"fulfill\",\r\n      receivingChainId: receivingChainId,\r\n      receivingChainTxManagerAddress: receivingChainTxManagerAddress\r\n    });\r\n\r\n    // Recover\r\n    return recoverSignature(abi.encode(payload), signature);\r\n  }\r\n\r\n  /**\r\n    * @notice Holds the logic to recover the signer from an encoded payload.\r\n    *         Will hash and convert to an eth signed message.\r\n    * @param encodedPayload The payload that was signed\r\n    * @param signature The signature you are recovering the signer from\r\n    */\r\n  function recoverSignature(bytes memory encodedPayload, bytes calldata  signature) internal pure returns (address) {\r\n    // Recover\r\n    return ECDSA.recover(\r\n      ECDSA.toEthSignedMessageHash(keccak256(encodedPayload)),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the hash of only the invariant portions of a given\r\n    *         crosschain transaction\r\n    * @param txData TransactionData to hash\r\n    */\r\n  function hashInvariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {\r\n    InvariantTransactionData memory invariant = InvariantTransactionData({\r\n      receivingChainTxManagerAddress: txData.receivingChainTxManagerAddress,\r\n      user: txData.user,\r\n      router: txData.router,\r\n      initiator: txData.initiator,\r\n      sendingAssetId: txData.sendingAssetId,\r\n      receivingAssetId: txData.receivingAssetId,\r\n      sendingChainFallback: txData.sendingChainFallback,\r\n      callTo: txData.callTo,\r\n      receivingAddress: txData.receivingAddress,\r\n      sendingChainId: txData.sendingChainId,\r\n      receivingChainId: txData.receivingChainId,\r\n      callDataHash: txData.callDataHash,\r\n      transactionId: txData.transactionId\r\n    });\r\n    return keccak256(abi.encode(invariant));\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the hash of only the variant portions of a given\r\n    *         crosschain transaction\r\n    * @param amount amount to hash\r\n    * @param expiry expiry to hash\r\n    * @param preparedBlockNumber preparedBlockNumber to hash\r\n    * @return Hash of the variant data\r\n    *\r\n    */\r\n  function hashVariantTransactionData(uint256 amount, uint256 expiry, uint256 preparedBlockNumber) internal pure returns (bytes32) {\r\n    VariantTransactionData memory variant = VariantTransactionData({\r\n      amount: amount,\r\n      expiry: expiry,\r\n      preparedBlockNumber: preparedBlockNumber\r\n    });\r\n    return keccak256(abi.encode(variant));\r\n  }\r\n\r\n  /**\r\n   * @notice Handles the receiving-chain fulfillment. This function should\r\n   *         pay the relayer and either send funds to the specified address\r\n   *         or execute the calldata. Will return a tuple of boolean,bytes\r\n   *         indicating the success and return data of the external call.\r\n   * @dev Separated from fulfill function to avoid stack too deep errors\r\n   *\r\n   * @param txData The TransactionData that needs to be fulfilled\r\n   * @param relayerFee The fee to be paid to the relayer for submission\r\n   * @param callData The data to be executed on the receiving chain\r\n   *\r\n   * @return Tuple representing (success, returnData) of the external call\r\n   */\r\n  function _receivingChainFulfill(\r\n    TransactionData calldata txData,\r\n    uint256 relayerFee,\r\n    bytes calldata callData\r\n  ) internal returns (bool, bool, bytes memory) {\r\n    // The user is completing the transaction, they should get the\r\n    // amount that the router deposited less fees for relayer.\r\n\r\n    // Get the amount to send\r\n    uint256 toSend;\r\n    unchecked {\r\n      toSend = txData.amount - relayerFee;\r\n    }\r\n\r\n    // Send the relayer the fee\r\n    if (relayerFee > 0) {\r\n      LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee);\r\n    }\r\n\r\n    // Handle receiver chain external calls if needed\r\n    if (txData.callTo == address(0)) {\r\n      // No external calls, send directly to receiving address\r\n      if (toSend > 0) {\r\n        LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend);\r\n      }\r\n      return (false, false, new bytes(0));\r\n    } else {\r\n      // Handle external calls with a fallback to the receiving\r\n      // address in case the call fails so the funds dont remain\r\n      // locked.\r\n\r\n      bool isNativeAsset = LibAsset.isNativeAsset(txData.receivingAssetId);\r\n\r\n      // First, transfer the funds to the helper if needed\r\n      if (!isNativeAsset && toSend > 0) {\r\n        LibAsset.transferERC20(txData.receivingAssetId, address(interpreter), toSend);\r\n      }\r\n\r\n      // Next, call `execute` on the helper. Helpers should internally\r\n      // track funds to make sure no one user is able to take all funds\r\n      // for tx, and handle the case of reversions\r\n      return interpreter.execute{ value: isNativeAsset ? toSend : 0}(\r\n        txData.transactionId,\r\n        payable(txData.callTo),\r\n        txData.receivingAssetId,\r\n        payable(txData.receivingAddress),\r\n        toSend,\r\n        callData\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPriceOracle.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IPriceOracle {\r\n    /**\r\n      * @notice Get the price of a token\r\n      * @param token The token to get the price of\r\n      * @return The asset price mantissa (scaled by 1e18).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n    function getTokenPrice(address token) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/Multicall.sol\r\n\r\npragma solidity ^0.8.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n/// @title Multicall - Aggregate results from multiple read-only function calls\r\n\r\ncontract Multicall {\r\n    struct Call {\r\n        address target;\r\n        bytes callData;\r\n    }\r\n\r\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\r\n        blockNumber = block.number;\r\n        returnData = new bytes[](calls.length);\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\r\n            require(success);\r\n            returnData[i] = ret;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/test/TestAggregator.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/* \r\n * This aggregator is ONLY useful for testing\r\n */\r\ncontract TestAggregator {\r\n\r\n    uint8 public decimals = 18;\r\n\r\n    string public description = \"Chainlink Test Aggregator\";\r\n\r\n    uint256 public version = 1;\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(uint80 _roundId) external view returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    ){\r\n        return (_roundId, 1e18, 0, block.timestamp, 1e18);\r\n    }\r\n\r\n    function latestRoundData() external view returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    ) {\r\n      return (1, 1e18, 0, block.timestamp, 1e18);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"routerRelayerFeeAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routerRelayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"routerRelayerFeeAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routerRelayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Fulfill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"invariantData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"routerRelayerFeeAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routerRelayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Prepare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RelayerFeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RelayerFeeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"routerRelayerFeeAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routerRelayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"addRelayerFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedMeta\",\"type\":\"bytes\"}],\"internalType\":\"struct ITransactionManager.CancelArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"routerRelayerFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"routerRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedMeta\",\"type\":\"bytes\"}],\"internalType\":\"struct ITransactionManager.FulfillArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"routerRelayerFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"routerRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfill\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transactionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_routerSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"invariantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedMeta\",\"type\":\"bytes\"}],\"internalType\":\"struct ITransactionManager.PrepareArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"routerRelayerFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"routerRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"prepare\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receivingChainTxManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerRelayerFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"routerRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"removeRelayerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionManager\",\"outputs\":[{\"internalType\":\"contract ITransactionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Router", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000073a37b3eb030cc3f9739ca5c16b7e6802f294122", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://67312d6472fee91db6d3c198cbe2daf6612c356fe9ecf639d436483a7bbe479d"}]}