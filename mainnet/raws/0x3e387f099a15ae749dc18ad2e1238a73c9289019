{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PrismBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\"; \\r\\n\\r\\n/*\\r\\n\u2588\u2580\u2588\u2003\u2588\u2580\u2588\u2003\u2588\u2003\u2588\u2580\u2003\u2588\u2580\u2584\u2580\u2588\u2003 \u2003\u2588\u2584\u2584\u2003\u2588\u2580\u2588\u2003\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2580\\r\\n\u2588\u2580\u2580\u2003\u2588\u2580\u2584\u2003\u2588\u2003\u2584\u2588\u2003\u2588\u2591\u2580\u2591\u2588\u2003 \u2003\u2588\u2584\u2588\u2003\u2588\u2580\u2584\u2003\u2588\u2003\u2588\u2584\u2580\u2003\u2588\u2584\u2588\u2003\u2588\u2588\u2584\\r\\n\\r\\nThe Ethernal Elves Gasles multichain bridge\\r\\n*/\\r\\n\\r\\n\\r\\ncontract PrismBridge {\\r\\n\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    bool public isBridgeOpen;    \\r\\n    bool public initialized;\\r\\n    address public admin;\\r\\n    address validator;\\r\\n    \\r\\n    mapping(address => bool)   public auth;  \\r\\n    mapping(bytes => uint256)  public usedSignatures; \\r\\n    \\r\\n    IElves public elves;\\r\\n    ///Add more assets here\\r\\n\\r\\n   function initialize() public {\\r\\n    \\r\\n       require(!initialized, \\\"Already initialized\\\");\\r\\n       admin                = msg.sender;   \\r\\n       initialized          = true;\\r\\n       isBridgeOpen         = true;\\r\\n    }\\r\\n\\r\\n    function setAddresses(address _elves, address _validator)  public {\\r\\n       onlyOwner();\\r\\n       elves                = IElves(_elves);\\r\\n       validator            = _validator;\\r\\n     \\r\\n    }\\r\\n\\r\\n    function setAuth(address[] calldata adds_, bool status) public {\\r\\n        onlyOwner();\\r\\n                \\r\\n        for (uint256 index = 0; index < adds_.length; index++) {\\r\\n               auth[adds_[index]] = status;\\r\\n        }\\r\\n    } \\r\\n\\r\\n    function flipActiveStatus() external {\\r\\n        onlyOwner();\\r\\n        isBridgeOpen = !isBridgeOpen;\\r\\n    }  \\r\\n\\r\\n//TRANSFERS TO ETH to be called from Polygon Contract\\r\\n// event emmited by the contract\\r\\n    function checkIn(uint256[] calldata sentinelIds, uint256[] calldata elderIds, uint256 artifactsAmount, uint256 renAmount, address _owner, uint256 chain) public returns (bool) {\\r\\n\\r\\n                checkBridgeStatus();             \\r\\n                \\r\\n                address owner;\\r\\n\\r\\n                if(chain == 1){\\r\\n                    isPlayer();\\r\\n                    owner = msg.sender;                    \\r\\n                }else{\\r\\n                    onlyOperator();\\r\\n                    owner = _owner;\\r\\n                }                                     \\r\\n\\r\\n                uint256 sentinelElves = sentinelIds.length;\\r\\n                uint256 elderElves = elderIds.length;\\r\\n\\r\\n                if (sentinelElves > 0) {\\r\\n\\r\\n                    elves.exitElf(sentinelIds, owner);                  \\r\\n                                                   \\r\\n                }\\r\\n\\r\\n                if (elderElves > 0) {/*wen elders? */}\\r\\n               \\r\\n                if (renAmount > 0) {\\r\\n                    elves.setAccountBalance(owner, renAmount, true, 0);                                              \\r\\n                }\\r\\n\\r\\n                if (artifactsAmount > 0) {\\r\\n                    elves.setAccountBalance(owner, artifactsAmount, true, 2);          \\r\\n                    \\r\\n                }\\r\\n            \\r\\n             \\r\\n        }\\r\\n\\r\\n        function transferTokensIn(uint256[] calldata tokenAmounts, uint256[] calldata tokenIndex, bytes[] memory tokenSignatures, uint256[] calldata timestamps, address[] calldata owners, uint256 chain) public returns (bool) {\\r\\n        \\r\\n        checkBridgeStatus();         \\r\\n        chain == 1 ? isPlayer() : onlyOperator();\\r\\n\\r\\n                for(uint i = 0; i < owners.length; i++){\\r\\n                    require(usedSignatures[tokenSignatures[i]] == 0, \\\"Signature already used\\\");   \\r\\n                    require(_isSignedByValidator(encodeTokenForSignature(tokenAmounts[i], owners[i], timestamps[i], tokenIndex[i]),tokenSignatures[i]), \\\"incorrect signature\\\");\\r\\n                    usedSignatures[tokenSignatures[i]] = 1;\\r\\n                    \\r\\n                    if(tokenIndex[i] == 0){\\r\\n                        elves.setAccountBalance(owners[i], tokenAmounts[i], false, 0);      \\r\\n                      \\r\\n                    }else if(tokenIndex[i] == 1){\\r\\n                        elves.setAccountBalance(owners[i], tokenAmounts[i], false, 1);      \\r\\n                      \\r\\n                    }\\r\\n                     \\r\\n                }            \\r\\n            \\r\\n        }\\r\\n\\r\\n\\r\\n    function checkOutSentinel(uint256[] calldata ids, uint256[] calldata sentinel, bytes[] memory signatures, bytes[] memory authCodes, address _owner, uint256 chain) public returns (bool) {\\r\\n    \\r\\n        checkBridgeStatus();         \\r\\n        address owner;\\r\\n\\r\\n                if(chain == 1){\\r\\n                    isPlayer();\\r\\n                    owner = msg.sender;                    \\r\\n                }else{\\r\\n                    onlyOperator();\\r\\n                    owner = _owner;\\r\\n                }          \\r\\n\\r\\n                    for (uint256 index = 0; index < ids.length; index++) {  \\r\\n\\r\\n                        require(usedSignatures[signatures[index]] == 0, \\\"Signature already used\\\");   \\r\\n                        require(_isSignedByValidator(encodeSentinelForSignature(ids[index], owner, sentinel[index], authCodes[index]),signatures[index]), \\\"incorrect signature\\\");\\r\\n                        usedSignatures[signatures[index]] = 1;\\r\\n\\r\\n                    }\\r\\n                    \\r\\n        elves.prismBridge(ids, sentinel, owner);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    //CheckOut Permissions \\r\\n    function encodeSentinelForSignature(uint256 id, address owner, uint256 sentinel, bytes memory authCode) public pure returns (bytes32) {\\r\\n        return keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", \\r\\n                    keccak256(\\r\\n                            abi.encodePacked(id, owner, sentinel, authCode))\\r\\n                            )\\r\\n                        );\\r\\n    } \\r\\n\\r\\n    function encodeTokenForSignature(uint256 tokenAmount, address owner, uint256 timestamp, uint256 tokenIndex) public pure returns (bytes32) {\\r\\n                return keccak256(\\r\\n                        abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", \\r\\n                            keccak256(\\r\\n                                    abi.encodePacked(tokenAmount, owner, timestamp, tokenIndex))\\r\\n                                    )\\r\\n                                );\\r\\n    }  \\r\\n\\r\\n//////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n  \\r\\n            function _isSignedByValidator(bytes32 _hash, bytes memory _signature) private view returns (bool) {\\r\\n                \\r\\n                bytes32 r;\\r\\n                bytes32 s;\\r\\n                uint8 v;\\r\\n                    assembly {\\r\\n                            r := mload(add(_signature, 0x20))\\r\\n                            s := mload(add(_signature, 0x40))\\r\\n                            v := byte(0, mload(add(_signature, 0x60)))\\r\\n                        }\\r\\n                    \\r\\n                        address signer = ecrecover(_hash, v, r, s);\\r\\n                        return signer == validator;\\r\\n  \\r\\n            }\\r\\n\\r\\n            ////////////////MODIFIERS//////////////////////////////////////////\\r\\n\\r\\n            function checkBalance(uint256 balance, uint256 amount) internal view {    \\r\\n            require(balance - amount >= 0, \\\"notEnoughBalance\\\");           \\r\\n            }\\r\\n            function checkBridgeStatus() internal view {\\r\\n            require(isBridgeOpen, \\\"bridgenotOpen\\\");       \\r\\n            }\\r\\n            function onlyOperator() internal view {    \\r\\n            require(msg.sender == admin || auth[msg.sender] == true);\\r\\n            }\\r\\n            function isPlayer() internal {    \\r\\n            uint256 size = 0;\\r\\n            address acc = msg.sender;\\r\\n            assembly { size := extcodesize(acc)}\\r\\n            require((msg.sender == tx.origin && size == 0));\\r\\n            }\\r\\n            function onlyOwner() internal view {    \\r\\n            require(admin == msg.sender);\\r\\n            }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IERC20Lite {\\r\\n    \\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n    function burn(address from, uint256 value) external;\\r\\n    function mint(address to, uint256 value) external; \\r\\n    function approve(address spender, uint256 value) external returns (bool); \\r\\n    function balanceOf(address account) external returns (uint256); \\r\\n\\r\\n}\\r\\n\\r\\ninterface IElfMetaDataHandler {    \\r\\nfunction getTokenURI(uint16 id_, uint256 sentinel) external view returns (string memory);\\r\\n}\\r\\n\\r\\ninterface ICampaigns {\\r\\nfunction gameEngine(uint256 _campId, uint256 _sector, uint256 _level, uint256 _attackPoints, uint256 _healthPoints, uint256 _inventory, bool _useItem) external \\r\\nreturns(uint256 level, uint256 rewards, uint256 timestamp, uint256 inventory);\\r\\n}\\r\\n\\r\\n/*\\r\\ninterface ITunnel {\\r\\n    function sendMessage(bytes calldata message_) external;\\r\\n}\\r\\n\\r\\ninterface ITerminus {\\r\\n    function pullCallback(address owner, uint256[] calldata ids) external;\\r\\n    \\r\\n}\\r\\n*/\\r\\n\\r\\ninterface IElders {\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\ninterface IArtifacts {\\r\\n\\r\\n    \\r\\n}\\r\\n\\r\\ninterface IElves {    \\r\\n    function prismBridge(uint256[] calldata id, uint256[] calldata sentinel, address owner) external;    \\r\\n    function exitElf(uint256[] calldata ids, address owner) external;\\r\\n    function setAccountBalance(address _owner, uint256 _amount, bool _subtract, uint256 _index) external;\\r\\n}\\r\\n\\r\\ninterface IERC721Lite {\\r\\n    function transferFrom(address from, address to, uint256 id) external;   \\r\\n    function transfer(address to, uint256 id) external;\\r\\n    function ownerOf(uint256 id) external returns (address owner);\\r\\n    function mint(address to, uint256 tokenid) external;\\r\\n}\\r\\n\\r\\n/*\\r\\ninterface IEthernalElves {\\r\\nfunction presale(uint256 _reserveAmount, address _whitelister) external payable returns (uint256 id);\\r\\n}\\r\\n*/\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sentinelIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"elderIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"artifactsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"name\":\"checkIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sentinel\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"authCodes\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"name\":\"checkOutSentinel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"elves\",\"outputs\":[{\"internalType\":\"contract IElves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sentinel\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"authCode\",\"type\":\"bytes\"}],\"name\":\"encodeSentinelForSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"encodeTokenForSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipActiveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBridgeOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_elves\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adds_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIndex\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"tokenSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"name\":\"transferTokensIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"usedSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrismBridge", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}