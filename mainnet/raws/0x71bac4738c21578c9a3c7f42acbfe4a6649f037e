{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\ncontract multiCall {\r\n    function call(uint256 times) public {\r\n        for(uint i=0;i<times;++i){\r\n            new claimer();\r\n        }\r\n    }\r\n}\r\ncontract claimer{\r\n    constructor(){\r\n        bool success;\r\n        (success,) = 0x1c7E83f8C581a967940DBfa7984744646AE46b29.call(abi.encodeWithSignature(\"claim()\"));\r\n        (success,) = 0x1c7E83f8C581a967940DBfa7984744646AE46b29.call(abi.encodeWithSignature(\"transfer(address,uint256)\",0x1f2479ee1b4aFE789e19D257D2D50810ac90fa59, 151200000000000000000000000));\r\n        selfdestruct(payable(address(msg.sender)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "multiCall", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e82f35b410f568ea3ee9462696d0f6e330c037880e803f9a1b074cb6b1b61974"}]}