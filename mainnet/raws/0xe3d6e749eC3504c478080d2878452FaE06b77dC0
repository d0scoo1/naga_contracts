{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n// File: contracts/ITccERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITccERC721  {\r\n\r\n    function totalSupply() external view returns(uint256);\r\n\r\n    function tokenCount() external view returns(uint256);\r\n\r\n    function createCollectible(uint256 _number, address to) external;\r\n}\r\n\r\n// File: contracts/TccBuyer3.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract TccBuyer3 is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using ECDSA for bytes32;\r\n\r\n    address public fredroERC721Address;\r\n    address public stickyERC721Address;\r\n    address public onyxERC721Address;\r\n    address public kuruptERC721Address;\r\n    address public dazERC721Address;\r\n    address public doggERC721Address;\r\n\r\n    ITccERC721 private _fredroContract;\r\n    ITccERC721 private _stickyContract;\r\n    ITccERC721 private _onyxContract;\r\n    ITccERC721 private _kuruptContract;\r\n    ITccERC721 private _dazContract;\r\n    ITccERC721 private _doggContract;\r\n    mapping (address => uint256) public amountCollected;\r\n    mapping (address => bool) public airdropped;\r\n\r\n    bool public saleOn = false;\r\n\r\n    uint256 public price = 5 * 10 ** 16; // 0.05 ETH\r\n    uint256 private nonce;\r\n    uint256 public maxAirdrop = 60;\r\n    uint256 public airdropCount = 0;\r\n    uint256 public buyCount = 0;\r\n\r\n    ITccERC721[] availableContracts;\r\n\r\n    event WithdrawnToOwner(address _operator, uint256 _ethWei);\r\n    event WithdrawnToEntities(address _operator, uint256 _ethWei);\r\n    event SaleChanged(bool _saleIsOn);\r\n    event NftBought(address indexed _from, uint256 _quantity);\r\n    event NftAirdropped(address indexed _from, uint256 _quantity);\r\n\r\n        //    Distribution  amount * rate / 1000\r\n        uint256 private CELEBRITY_RATE = 350;\r\n        uint256 private MAIN_RATE = 260;\r\n        uint256 private TEAM_RATE = 240;\r\n        uint256 private PARTNER_RATE = 50;\r\n        uint256 private PORTRAIT_RATE = 40;\r\n        uint256 private MARKETING_RATE = 40;\r\n        uint256 private SOCIAL_RATE = 20;\r\n\r\n\r\n\r\n        address payable public fredroCelebrityAddress = payable(0x09402C48eDE52C6eb1655B81fb39bb8e9b6B1F2A);\r\n        address payable public stickyCelebrityAddress = payable(0xf12760e8EEFac24dC47deb99A5bAB5Cd188db163);\r\n        address payable public onyxCelebrityAddress = payable(0x09402C48eDE52C6eb1655B81fb39bb8e9b6B1F2A);\r\n        address payable public kuruptCelebrityAddress = payable(0xD2DA904c6F5907fE8809Fb24F76E7338A5eDF665);\r\n        address payable public dazCelebrityAddress = payable(0xD2DA904c6F5907fE8809Fb24F76E7338A5eDF665);\r\n        address payable public doggCelebrityAddress = payable(0xD2DA904c6F5907fE8809Fb24F76E7338A5eDF665);\r\n\r\n        address payable public fredroPortraitAddress = payable(0x8b46Cb16c49739C77F157a8F1D6E8069fa920cAE);\r\n        address payable public stickyPortraitAddress = payable(0x2b2FE998757ae2A238637047Cc7B356dc56f76Da);\r\n        address payable public onyxPortraitAddress = payable(0x7Ae95A8d0E9Bc8c856D6027c204dd8279A04ECb8);\r\n        address payable public kuruptPortraitAddress = payable(0xB586D612DC53C9C632e3B039b4D8EdEc028daE70);\r\n        address payable public dazPortraitAddress = payable(0x7Ae95A8d0E9Bc8c856D6027c204dd8279A04ECb8);\r\n        address payable public doggPortraitAddress = payable(0x7Ae95A8d0E9Bc8c856D6027c204dd8279A04ECb8);\r\n\r\n        address payable public mainAddress = payable(0xd6d4d7FAf57f22830d978f793d033d115E605962);\r\n        address payable public teamAddress = payable(0x07D409e34786467F335fF8b7A69e300Effe7E2cf);\r\n        address payable public partnerAddress = payable(0x6d4FBA93638175e476D24a364b51687C7D12e4CE);\r\n        address payable public marketingAddress = payable(0xC82592Dd216Dcf4CFCB77309EFF8cAdEb4F7dd5F);\r\n        address payable public socialAddress = payable(0x5a952Ce385263daD8679e927823D78A116568Da2);\r\n\r\n    constructor(\r\n        address _fredroERC721Address,\r\n        address _stickyERC721Address,\r\n        address _onyxERC721Address,\r\n        address _kuruptERC721Address,\r\n        address _dazERC721Address,\r\n        address _doggERC721Address\r\n    ) {\r\n        fredroERC721Address = _fredroERC721Address;\r\n        stickyERC721Address = _stickyERC721Address;\r\n        onyxERC721Address = _onyxERC721Address;\r\n        kuruptERC721Address = _kuruptERC721Address;\r\n        dazERC721Address = _dazERC721Address;\r\n        doggERC721Address = _doggERC721Address;\r\n\r\n        _fredroContract = ITccERC721(fredroERC721Address);\r\n        _stickyContract = ITccERC721(stickyERC721Address);\r\n        _onyxContract = ITccERC721(onyxERC721Address);\r\n        _kuruptContract = ITccERC721(kuruptERC721Address);\r\n        _dazContract = ITccERC721(dazERC721Address);\r\n        _doggContract = ITccERC721(doggERC721Address);\r\n\r\n        availableContracts.push(_fredroContract);\r\n        availableContracts.push(_stickyContract);\r\n        availableContracts.push(_onyxContract);\r\n        availableContracts.push(_kuruptContract);\r\n        availableContracts.push(_dazContract);\r\n        availableContracts.push(_doggContract);\r\n    }\r\n\r\n    struct ContractBalance {\r\n        uint256 fredroContractBalance;\r\n        uint256 stickyContractBalance;\r\n        uint256 onyxContractBalance;\r\n        uint256 kuruptContractBalance;\r\n        uint256 dazContractBalance;\r\n        uint256 doggContractBalance;\r\n    }\r\n\r\n    struct RecipientBalance {\r\n        uint256 _fredroCelebrityBalance;\r\n        uint256 _fredroPortraitBalance;\r\n        uint256 _stickyCelebrityBalance;\r\n        uint256 _stickyPortraitBalance;\r\n        uint256 _onyxCelebrityBalance;\r\n        uint256 _onyxPortraitBalance;\r\n        uint256 _kuruptCelebrityBalance;\r\n        uint256 _kuruptPortraitBalance;\r\n        uint256 _dazCelebrityBalance;\r\n        uint256 _dazPortraitBalance;\r\n        uint256 _doggCelebrityBalance;\r\n        uint256 _doggPortraitBalance;\r\n        uint256 _mainBalance;\r\n        uint256 _teamBalance;\r\n        uint256 _partnerBalance;\r\n        uint256 _marketingBalance;\r\n        uint256 _socialBalance;\r\n    }\r\n\r\n    // Modifiers\r\n    modifier saleIsOn() {\r\n        require(saleOn, \"cannot purchase as the sale is off\");\r\n        _;\r\n    }\r\n\r\n    modifier isClaimedAuthorized(uint256 quantity, bytes memory signature) {\r\n        require(verifySignature(quantity, signature) == owner(), \"caller not authorized to get airdrop\");\r\n        _;\r\n    }\r\n\r\n    function setPrice(uint256 newPrice) public onlyOwner {\r\n        require(newPrice > 0, 'TccBuyer: price must be > 0');\r\n        price = newPrice;\r\n    }\r\n\r\n    function setAirdropSupply(uint256 newMaxAirdrop) public onlyOwner {\r\n        require(newMaxAirdrop >= 0, 'TccBuyer: newAirdropSupply must be >= 0');\r\n        maxAirdrop = newMaxAirdrop;\r\n    }\r\n\r\n    function activateSale() public onlyOwner {\r\n        saleOn = true;\r\n        emit SaleChanged(saleOn);\r\n    }\r\n\r\n    function deactivateSale() public onlyOwner {\r\n        saleOn = false;\r\n        emit SaleChanged(saleOn);\r\n    }\r\n\r\n    function setPaymentRecipients(\r\n        address _fredroCelebrityAddress,\r\n        address _stickyCelebrityAddress,\r\n        address _onyxCelebrityAddress,\r\n        address _kuruptCelebrityAddress,\r\n        address _dazCelebrityAddress,\r\n        address _doggCelebrityAddress,\r\n        address _mainAddress,\r\n        address _teamAddress,\r\n        address _partnerAddress,\r\n        address _marketingAddress,\r\n        address _socialAddress\r\n    ) external onlyOwner {\r\n        fredroCelebrityAddress = payable(_fredroCelebrityAddress);\r\n        stickyCelebrityAddress = payable(_stickyCelebrityAddress);\r\n        onyxCelebrityAddress = payable(_onyxCelebrityAddress);\r\n        kuruptCelebrityAddress = payable(_kuruptCelebrityAddress);\r\n        dazCelebrityAddress = payable(_dazCelebrityAddress);\r\n        doggCelebrityAddress = payable(_doggCelebrityAddress);\r\n        mainAddress = payable(_mainAddress);\r\n        teamAddress = payable(_teamAddress);\r\n        partnerAddress = payable(_partnerAddress);\r\n        marketingAddress = payable(_marketingAddress);\r\n        socialAddress = payable(_socialAddress);\r\n\r\n    }\r\n\r\n    function buyToken(uint256 quantity) external payable saleIsOn {\r\n        require(msg.value == price * quantity, \"TccBuyer: not the right amount of ETH sent\");\r\n        require(checkIfAvailableToMint(quantity + (maxAirdrop - airdropCount)), \"the quantity exceed the supply\");\r\n        randomMint(_msgSender(), quantity, true);\r\n        buyCount += quantity;\r\n        emit NftBought(_msgSender(), quantity);\r\n    }\r\n\r\n    function mintByOwner(uint256 quantity, address recipient) external onlyOwner {\r\n        require(checkIfAvailableToMint(quantity + (maxAirdrop - airdropCount)), \"the quantity exceed the supply\");\r\n        randomMint(recipient, quantity, false);\r\n        emit NftBought(_msgSender(), quantity);\r\n    }\r\n\r\n    function claimAirdrop(uint256 quantity, bytes memory signature) external saleIsOn isClaimedAuthorized(quantity, signature) {\r\n        require(!airdropped[msg.sender], \"caller already got airdropped\");\r\n        require((quantity + airdropCount) <= maxAirdrop, \"quantity requested the exceed max airdrop\");\r\n        randomMint(_msgSender(), quantity, false);\r\n        airdropped[msg.sender] = true;\r\n        airdropCount += quantity;\r\n        emit NftAirdropped(_msgSender(), quantity);\r\n    }\r\n\r\n    function checkIfAirdropped(address airDropAddress) public view returns(bool) {\r\n        return airdropped[airDropAddress];\r\n    }\r\n\r\n    function randomMint(address recipient, uint256 quantity, bool buyingContext) internal {\r\n        require(recipient != address(0), \"address must be defined\");\r\n        require(checkIfAvailableToMint(quantity), \"the quantity exceed the supply\");\r\n        for(uint i = 0; i < quantity; i++) {\r\n            setAvailableContracts();\r\n            require(availableContracts.length > 0, \"can't mint in any contracts\");\r\n            ITccERC721 stage2ERC721 = availableContracts[randomNumber()];\r\n            stage2ERC721.createCollectible(1, recipient);\r\n            if(buyingContext) {\r\n                amountCollected[address(stage2ERC721)] += price;\r\n            }\r\n            nonce++;\r\n        }\r\n    }\r\n\r\n    function verifySignature(uint256 quantity, bytes memory signature) internal view returns(address) {\r\n        return keccak256(abi.encodePacked(address(this), msg.sender, quantity))\r\n        .toEthSignedMessageHash()\r\n        .recover(signature);\r\n    }\r\n\r\n    function withdrawToOwner() external onlyOwner {\r\n        uint256 _amount = address(this).balance;\r\n        require(_amount > 0, \"No ETH to Withdraw\");\r\n        payable(_msgSender()).transfer(_amount);\r\n\r\n        emit WithdrawnToOwner(_msgSender(), _amount);\r\n    }\r\n\r\n    function checkIfAvailableToMint(uint256 quantity) public view returns(bool) {\r\n        uint _totalMinted;\r\n        uint _maxSupply;\r\n        for (uint i = 0; i < availableContracts.length; i++) {\r\n            _totalMinted += availableContracts[i].tokenCount();\r\n            _maxSupply += availableContracts[i].totalSupply();\r\n        }\r\n        return _totalMinted + quantity <= _maxSupply;\r\n    }\r\n\r\n    function setAvailableContracts() internal {\r\n        for (uint i = 0; i < availableContracts.length; i++) {\r\n            if(availableContracts[i].tokenCount() + 1 > availableContracts[i].totalSupply()) {\r\n                availableContracts[i] = availableContracts[availableContracts.length - 1];\r\n                availableContracts.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function randomNumber() internal view returns (uint8) {\r\n        return uint8(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, nonce))) % availableContracts.length);\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function tokenCount() external view returns (uint) {\r\n        return _fredroContract.tokenCount() +\r\n        _stickyContract.tokenCount() +\r\n        _onyxContract.tokenCount() +\r\n        _kuruptContract.tokenCount() +\r\n        _dazContract.tokenCount() +\r\n        _doggContract.tokenCount()\r\n        ;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint) {\r\n        return _fredroContract.totalSupply() +\r\n        _stickyContract.totalSupply() +\r\n        _onyxContract.totalSupply() +\r\n        _kuruptContract.totalSupply() +\r\n        _dazContract.totalSupply() +\r\n        _doggContract.totalSupply()\r\n        ;\r\n    }\r\n\r\n    function withdrawToEntities() external onlyOwner {\r\n        if(address(this).balance > 0) {\r\n            multiSend();\r\n        }\r\n    }\r\n\r\n    function multiSend() private {\r\n\r\n        ContractBalance memory contractBalance;\r\n        RecipientBalance memory recipientBalance;\r\n\r\n        contractBalance.fredroContractBalance = amountCollected[fredroERC721Address];\r\n        contractBalance.stickyContractBalance = amountCollected[stickyERC721Address];\r\n        contractBalance.onyxContractBalance = amountCollected[onyxERC721Address];\r\n        contractBalance.kuruptContractBalance = amountCollected[kuruptERC721Address];\r\n        contractBalance.dazContractBalance = amountCollected[dazERC721Address];\r\n        contractBalance.doggContractBalance = amountCollected[doggERC721Address];\r\n        uint256 totalBalance = address(this).balance;\r\n\r\n        require(totalBalance ==\r\n            contractBalance.fredroContractBalance +\r\n            contractBalance.stickyContractBalance +\r\n            contractBalance.onyxContractBalance +\r\n            contractBalance.kuruptContractBalance +\r\n            contractBalance.dazContractBalance +\r\n            contractBalance.doggContractBalance\r\n        , \"problem in total amount to distribute\");\r\n\r\n        if(contractBalance.fredroContractBalance > 0) {\r\n            recipientBalance._fredroCelebrityBalance += contractBalance.fredroContractBalance.mul(CELEBRITY_RATE).div(1000);\r\n            recipientBalance._fredroPortraitBalance += contractBalance.fredroContractBalance.mul(PORTRAIT_RATE).div(1000);\r\n\r\n            recipientBalance._mainBalance += contractBalance.fredroContractBalance.mul(MAIN_RATE).div(1000);\r\n            recipientBalance._teamBalance += contractBalance.fredroContractBalance.mul(TEAM_RATE).div(1000);\r\n            recipientBalance._partnerBalance += contractBalance.fredroContractBalance.mul(PARTNER_RATE).div(1000);\r\n            recipientBalance._marketingBalance += contractBalance.fredroContractBalance.mul(MARKETING_RATE).div(1000);\r\n            recipientBalance._socialBalance += contractBalance.fredroContractBalance.mul(SOCIAL_RATE).div(1000);\r\n        }\r\n\r\n        if(contractBalance.stickyContractBalance > 0) {\r\n            recipientBalance._stickyCelebrityBalance += contractBalance.stickyContractBalance.mul(CELEBRITY_RATE).div(1000);\r\n            recipientBalance._stickyPortraitBalance += contractBalance.stickyContractBalance.mul(PORTRAIT_RATE).div(1000);\r\n\r\n            recipientBalance._mainBalance += contractBalance.stickyContractBalance.mul(MAIN_RATE).div(1000);\r\n            recipientBalance._teamBalance += contractBalance.stickyContractBalance.mul(TEAM_RATE).div(1000);\r\n            recipientBalance._partnerBalance += contractBalance.stickyContractBalance.mul(PARTNER_RATE).div(1000);\r\n            recipientBalance._marketingBalance += contractBalance.stickyContractBalance.mul(MARKETING_RATE).div(1000);\r\n            recipientBalance._socialBalance += contractBalance.stickyContractBalance.mul(SOCIAL_RATE).div(1000);\r\n        }\r\n\r\n        if(contractBalance.onyxContractBalance > 0) {\r\n            recipientBalance._onyxCelebrityBalance += contractBalance.onyxContractBalance.mul(CELEBRITY_RATE).div(1000);\r\n            recipientBalance._onyxPortraitBalance += contractBalance.onyxContractBalance.mul(PORTRAIT_RATE).div(1000);\r\n\r\n            recipientBalance._mainBalance += contractBalance.onyxContractBalance.mul(MAIN_RATE).div(1000);\r\n            recipientBalance._teamBalance += contractBalance.onyxContractBalance.mul(TEAM_RATE).div(1000);\r\n            recipientBalance._partnerBalance += contractBalance.onyxContractBalance.mul(PARTNER_RATE).div(1000);\r\n            recipientBalance._marketingBalance += contractBalance.onyxContractBalance.mul(MARKETING_RATE).div(1000);\r\n            recipientBalance._socialBalance += contractBalance.onyxContractBalance.mul(SOCIAL_RATE).div(1000);\r\n        }\r\n\r\n        if(contractBalance.kuruptContractBalance > 0) {\r\n            recipientBalance._kuruptCelebrityBalance += contractBalance.kuruptContractBalance.mul(CELEBRITY_RATE).div(1000);\r\n            recipientBalance._kuruptPortraitBalance += contractBalance.kuruptContractBalance.mul(PORTRAIT_RATE).div(1000);\r\n\r\n            recipientBalance._mainBalance += contractBalance.kuruptContractBalance.mul(MAIN_RATE).div(1000);\r\n            recipientBalance._teamBalance += contractBalance.kuruptContractBalance.mul(TEAM_RATE).div(1000);\r\n            recipientBalance._partnerBalance += contractBalance.kuruptContractBalance.mul(PARTNER_RATE).div(1000);\r\n            recipientBalance._marketingBalance += contractBalance.kuruptContractBalance.mul(MARKETING_RATE).div(1000);\r\n            recipientBalance._socialBalance += contractBalance.kuruptContractBalance.mul(SOCIAL_RATE).div(1000);\r\n        }\r\n\r\n        if(contractBalance.dazContractBalance > 0) {\r\n            recipientBalance._dazCelebrityBalance += contractBalance.dazContractBalance.mul(CELEBRITY_RATE).div(1000);\r\n            recipientBalance._dazPortraitBalance += contractBalance.dazContractBalance.mul(PORTRAIT_RATE).div(1000);\r\n\r\n            recipientBalance._mainBalance += contractBalance.dazContractBalance.mul(MAIN_RATE).div(1000);\r\n            recipientBalance._teamBalance += contractBalance.dazContractBalance.mul(TEAM_RATE).div(1000);\r\n            recipientBalance._partnerBalance += contractBalance.dazContractBalance.mul(PARTNER_RATE).div(1000);\r\n            recipientBalance._marketingBalance += contractBalance.dazContractBalance.mul(MARKETING_RATE).div(1000);\r\n            recipientBalance._socialBalance += contractBalance.dazContractBalance.mul(SOCIAL_RATE).div(1000);\r\n        }\r\n\r\n        if(contractBalance.doggContractBalance > 0) {\r\n            recipientBalance._doggCelebrityBalance += contractBalance.doggContractBalance.mul(CELEBRITY_RATE).div(1000);\r\n            recipientBalance._doggPortraitBalance += contractBalance.doggContractBalance.mul(PORTRAIT_RATE).div(1000);\r\n\r\n            recipientBalance._mainBalance += contractBalance.doggContractBalance.mul(MAIN_RATE).div(1000);\r\n            recipientBalance._teamBalance += contractBalance.doggContractBalance.mul(TEAM_RATE).div(1000);\r\n            recipientBalance._partnerBalance += contractBalance.doggContractBalance.mul(PARTNER_RATE).div(1000);\r\n            recipientBalance._marketingBalance += contractBalance.doggContractBalance.mul(MARKETING_RATE).div(1000);\r\n            recipientBalance._socialBalance += contractBalance.doggContractBalance.mul(SOCIAL_RATE).div(1000);\r\n        }\r\n\r\n        transferToAddressETH(fredroCelebrityAddress, recipientBalance._fredroCelebrityBalance);\r\n        transferToAddressETH(stickyCelebrityAddress, recipientBalance._stickyCelebrityBalance);\r\n        transferToAddressETH(onyxCelebrityAddress, recipientBalance._onyxCelebrityBalance);\r\n        transferToAddressETH(kuruptCelebrityAddress, recipientBalance._kuruptCelebrityBalance);\r\n        transferToAddressETH(dazCelebrityAddress, recipientBalance._dazCelebrityBalance);\r\n        transferToAddressETH(doggCelebrityAddress, recipientBalance._doggCelebrityBalance);\r\n\r\n        transferToAddressETH(fredroPortraitAddress, recipientBalance._fredroPortraitBalance);\r\n        transferToAddressETH(stickyPortraitAddress, recipientBalance._stickyPortraitBalance);\r\n        transferToAddressETH(onyxPortraitAddress, recipientBalance._onyxPortraitBalance);\r\n        transferToAddressETH(kuruptPortraitAddress, recipientBalance._kuruptPortraitBalance);\r\n        transferToAddressETH(dazPortraitAddress, recipientBalance._dazPortraitBalance);\r\n        transferToAddressETH(doggPortraitAddress, recipientBalance._doggPortraitBalance);\r\n\r\n        transferToAddressETH(mainAddress, recipientBalance._mainBalance);\r\n        transferToAddressETH(teamAddress, recipientBalance._teamBalance);\r\n        transferToAddressETH(partnerAddress, recipientBalance._partnerBalance);\r\n        transferToAddressETH(marketingAddress, recipientBalance._marketingBalance);\r\n        transferToAddressETH(socialAddress, recipientBalance._socialBalance);\r\n\r\n        amountCollected[fredroERC721Address] -= contractBalance.fredroContractBalance;\r\n        amountCollected[stickyERC721Address] -= contractBalance.stickyContractBalance;\r\n        amountCollected[onyxERC721Address] -= contractBalance.onyxContractBalance;\r\n        amountCollected[kuruptERC721Address] -= contractBalance.kuruptContractBalance;\r\n        amountCollected[dazERC721Address] -= contractBalance.dazContractBalance;\r\n        amountCollected[doggERC721Address] -= contractBalance.doggContractBalance;\r\n\r\n        emit WithdrawnToEntities(_msgSender(), totalBalance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fredroERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stickyERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onyxERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kuruptERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dazERC721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_doggERC721Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"NftAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"NftBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_saleIsOn\",\"type\":\"bool\"}],\"name\":\"SaleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethWei\",\"type\":\"uint256\"}],\"name\":\"WithdrawnToEntities\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethWei\",\"type\":\"uint256\"}],\"name\":\"WithdrawnToOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airDropAddress\",\"type\":\"address\"}],\"name\":\"checkIfAirdropped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"checkIfAvailableToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dazCelebrityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dazERC721Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dazPortraitAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doggCelebrityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doggERC721Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doggPortraitAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fredroCelebrityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fredroERC721Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fredroPortraitAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kuruptCelebrityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kuruptERC721Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kuruptPortraitAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onyxCelebrityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onyxERC721Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onyxPortraitAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxAirdrop\",\"type\":\"uint256\"}],\"name\":\"setAirdropSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fredroCelebrityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stickyCelebrityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onyxCelebrityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kuruptCelebrityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dazCelebrityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_doggCelebrityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_socialAddress\",\"type\":\"address\"}],\"name\":\"setPaymentRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socialAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stickyCelebrityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stickyERC721Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stickyPortraitAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToEntities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TccBuyer3", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000091218543cdd6897ba2807ca271b087e0162d6273000000000000000000000000a241acf33c5275b73ae4c125b0a4a60af8f24eae00000000000000000000000060d19f2e09a60c34b24119732f5ede605be5734d000000000000000000000000cece216eaa9ada28fd71e31bc00012276f7e21ca0000000000000000000000009bd351bbe7bb476df36d6f3c5e5ef48819d4f940000000000000000000000000e7576db55ffada8cb8e628bfe76192cae60f05c4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc74564c76354960e0a6862a7e4764e793a9322da94914661e422a0ecc952d9e"}]}