{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FlowerFamMarketPlace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IFlowerFam.sol\\\";\\r\\nimport \\\"./interfaces/IBee.sol\\\";\\r\\nimport \\\"./interfaces/IFlowerFamNewGen.sol\\\";\\r\\nimport \\\"./interfaces/IHoney.sol\\\";\\r\\nimport \\\"./interfaces/IFlowerFamRandomizer.sol\\\";\\r\\n\\r\\ncontract IFlowerFamEcoSystem {\\r\\n    function upgradeFlower(address user, uint256 flowerFamId) external {}\\r\\n    function restorePowerOfBee(address user, uint256 flowerFamId, bool isFam, uint256 beeId, uint256 restorePeriods) external {}\\r\\n    function speciesToHoneyProduction(uint256 species) external view returns (uint256) {}\\r\\n}\\r\\n\\r\\ncontract FlowerFamMarketPlace is OwnableUpgradeable {\\r\\n    IFlowerFam public flowerFamNFT;\\r\\n    IBee public beeNFT;\\r\\n    IFlowerFamNewGen public flowerFamNewGenNFT;\\r\\n    IHoney public HoneyToken;\\r\\n\\r\\n    IFlowerFamEcoSystem public ecoSystem;\\r\\n    IFlowerFamRandomizer public randomizer;\\r\\n\\r\\n    uint256 public beeProbability;\\r\\n    uint256 public beeProbabilityBase;\\r\\n    uint256 public newGenFlowerProbability;\\r\\n    uint256 public newGenFlowerProbabilityBase;\\r\\n\\r\\n    uint128 public beePrice;\\r\\n    uint128 public seedPrice;\\r\\n\\r\\n    uint256 public beeSupply;\\r\\n    uint256 public newGenSupply;\\r\\n\\r\\n    uint128 public upgradeDiscountFactor;\\r\\n\\r\\n    constructor(\\r\\n        address _flowerFamNFT,\\r\\n        address _beeNFT,\\r\\n        address _flowerFamNewGen,\\r\\n        address _honeyToken,\\r\\n        address _randomizer,\\r\\n        address _ecoSystem\\r\\n    ) {}\\r\\n\\r\\n    function initialize(        \\r\\n        address _flowerFamNFT,\\r\\n        address _beeNFT,\\r\\n        address _flowerFamNewGen,\\r\\n        address _honeyToken,\\r\\n        address _randomizer,\\r\\n        address _ecoSystem\\r\\n    ) public initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        flowerFamNFT = IFlowerFam(_flowerFamNFT);\\r\\n        beeNFT = IBee(_beeNFT);\\r\\n        flowerFamNewGenNFT = IFlowerFamNewGen(_flowerFamNewGen);\\r\\n        HoneyToken = IHoney(_honeyToken);\\r\\n        ecoSystem = IFlowerFamEcoSystem(_ecoSystem);\\r\\n        randomizer = IFlowerFamRandomizer(_randomizer);\\r\\n\\r\\n        beeProbability = 50; /// @dev 50%\\r\\n        beeProbabilityBase = 100; /// @dev bee probability is with base 100.\\r\\n        newGenFlowerProbability = 80; /// @dev 80%\\r\\n        newGenFlowerProbabilityBase = 100; /// @dev new gen flower probability is with base 100.\\r\\n\\r\\n        beePrice = 1300 ether;\\r\\n        seedPrice = 200 ether;\\r\\n\\r\\n        beeSupply = 250;\\r\\n        newGenSupply = 300;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function getUpgradePriceBySpecies(uint256 species) public view returns (uint128) {\\r\\n        if (species == 0)\\r\\n            return 536 ether / 10 / upgradeDiscountFactor;\\r\\n        else if (species == 1)\\r\\n            return 1071 ether / 10 / upgradeDiscountFactor;\\r\\n        else if (species == 2)\\r\\n            return 150 ether / upgradeDiscountFactor;\\r\\n        else if (species == 3)\\r\\n            return 4286 ether / 10 / upgradeDiscountFactor;\\r\\n        else if (species == 4)\\r\\n            return 750 ether / upgradeDiscountFactor;\\r\\n\\r\\n        revert(\\\"invalid species\\\");\\r\\n    }\\r\\n\\r\\n    function attractBee(uint256[] memory flowersWithBees) external {\\r\\n        require(flowerFamNFT.balanceOf(msg.sender) + flowerFamNewGenNFT.balanceOf(msg.sender) > 0, \\\"Cannot attract bee without any flowers\\\");\\r\\n        require(beeNFT.totalSupply() < beeSupply, \\\"Bee supply exceeded\\\");\\r\\n\\r\\n        HoneyToken.spendEcoSystemBalance(msg.sender, beePrice, flowersWithBees, \\\"\\\");\\r\\n        if (randomizer.rngDecision(msg.sender, beeProbability, beeProbabilityBase)) {\\r\\n            beeNFT.mint(msg.sender, 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function plantSeed(uint256[] memory flowersWithBees) external {        \\r\\n        require(flowerFamNewGenNFT.totalSupply() < newGenSupply, \\\"New gen supply exceeded\\\");\\r\\n        require(flowerFamNFT.balanceOf(msg.sender) > 0, \\\"Cannot plantseed without any flowers\\\");\\r\\n\\r\\n        HoneyToken.spendEcoSystemBalance(msg.sender, seedPrice, flowersWithBees, \\\"\\\");\\r\\n        if (randomizer.rngDecision(msg.sender, newGenFlowerProbability, newGenFlowerProbabilityBase)) {\\r\\n            flowerFamNewGenNFT.mint(msg.sender, 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function upgradeFlower(uint256 flowerId, uint256[] memory flowersWithBees) external {        \\r\\n        uint256 species = randomizer.getSpeciesOfId(flowerId);\\r\\n        uint128 upgradePrice = getUpgradePriceBySpecies(species);\\r\\n        HoneyToken.spendEcoSystemBalance(msg.sender, upgradePrice, flowersWithBees, \\\"\\\");\\r\\n        ecoSystem.upgradeFlower(msg.sender, flowerId);\\r\\n    }\\r\\n\\r\\n    function boostBee(uint256 flowerId, bool isFam, uint256 beeId, uint128 restoreAmount, uint256[] memory flowersWithBees) external {               \\r\\n        uint256 species = randomizer.getSpeciesOfId(flowerId);\\r\\n        /// @dev boost price is 3x lost per week, which is 15% of flower earnings\\r\\n        uint128 boostPrice = uint128(ecoSystem.speciesToHoneyProduction(species) * 15 / 100) * restoreAmount;\\r\\n\\r\\n        HoneyToken.spendEcoSystemBalance(msg.sender, boostPrice, flowersWithBees, \\\"\\\");\\r\\n        ecoSystem.restorePowerOfBee(msg.sender, flowerId, isFam, beeId, restoreAmount);\\r\\n    }\\r\\n\\r\\n    function setEco(address eco) external onlyOwner {\\r\\n        ecoSystem = IFlowerFamEcoSystem(eco);\\r\\n    }\\r\\n\\r\\n    function setRandomizer(address rmz) external onlyOwner {\\r\\n        randomizer = IFlowerFamRandomizer(rmz);\\r\\n    }\\r\\n\\r\\n    function setBeeProbability(uint256 prob, uint256 base) external onlyOwner {\\r\\n        beeProbability = prob;\\r\\n        beeProbabilityBase = base;\\r\\n    }\\r\\n\\r\\n    function setNewGenProbability(uint256 prob, uint256 base) external onlyOwner {\\r\\n        newGenFlowerProbability = prob;\\r\\n        newGenFlowerProbabilityBase = base;\\r\\n    }\\r\\n\\r\\n    function setPrices(uint128 bee, uint128 seed) external onlyOwner {\\r\\n        beePrice = bee;\\r\\n        seedPrice = seed;\\r\\n    }\\r\\n\\r\\n    function setBeeSupply(uint256 newSupply) external onlyOwner {\\r\\n        beeSupply = newSupply;\\r\\n    }\\r\\n\\r\\n    function setNewGenSupply(uint256 newSupply) external onlyOwner {\\r\\n        newGenSupply = newSupply;\\r\\n    }\\r\\n\\r\\n    function setAddresses(address flowerfam, address newgen, address bee) external onlyOwner {\\r\\n        flowerFamNFT = IFlowerFam(flowerfam);\\r\\n        flowerFamNewGenNFT = IFlowerFamNewGen(newgen);\\r\\n        beeNFT = IBee(bee);\\r\\n    }\\r\\n\\r\\n    function setUpgradeDiscountFactor(uint128 newDiscount) external onlyOwner {\\r\\n        upgradeDiscountFactor = newDiscount;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlowerFam.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IFlowerFam {\\r\\n    function prodigy() external view returns (uint256);\\r\\n    function seedling() external view returns (uint256);\\r\\n    function ancestor() external view returns (uint256);\\r\\n    function elder() external view returns (uint256);\\r\\n    function pioneer() external view returns (uint256);\\r\\n\\r\\n    function upgradeCooldownTime() external view returns (uint256);\\r\\n    \\r\\n    function getUpgradeCountOfFlower(uint256 tokenId) external view returns (uint16);\\r\\n\\r\\n    function exists(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n    function isAlreadyStaked(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n    function mint(address _to, uint256 _tokenId) external;\\r\\n\\r\\n    function stake(address staker, uint256 tokenId) external;\\r\\n\\r\\n    function unstake(address unstaker, uint256 tokenId) external;\\r\\n\\r\\n    function realOwnerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function setBaseURI(string memory _newBaseURI) external;\\r\\n\\r\\n    function upgrade(address upgrader, uint256 tokenId) external;\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function startTokenId() external pure returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IBee {\\r\\n    function stake(address staker, uint256 tokenId) external;\\r\\n    function unstake(address unstaker, uint256 tokenId) external;\\r\\n    function mint(address sender, uint256 amount) external;\\r\\n    function restorePowerOfBee(address owner, uint256 tokenId, uint256 restorePeriods) external;\\r\\n\\r\\n    function realOwnerOf(uint256 tokenId) external view returns (address);\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n    function isAlreadyStaked(uint256 tokenId) external view returns (bool);\\r\\n    function getPowerReductionPeriods(uint256 tokenId) external view returns (uint256);\\r\\n    function getLastAction(uint256 tokenId) external view returns (uint88);\\r\\n    function getPowerCycleStart(uint256 tokenId) external view returns (uint88);\\r\\n\\r\\n    function powerCycleBasePeriod() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlowerFamNewGen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IFlowerFamNewGen {\\r\\n    function mint(\\r\\n        address sender,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function stake(address staker, uint256 tokenId) external;\\r\\n    function unstake(address unstaker, uint256 tokenId) external;\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function realOwnerOf(uint256 tokenId) external view returns (address);\\r\\n    function isAlreadyStaked(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n    function startTokenId() external pure returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IHoney.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IHoney {\\r\\n    function spendEcoSystemBalance(address user, uint128 amount, uint256[] memory flowersWithBees, bytes memory data) external;\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFlowerFamRandomizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IFlowerFamRandomizer {\\r\\n    function rng(address _address) external view returns (uint256);\\r\\n    function rngDecision(address _address, uint256 probability, uint256 base) external view returns (bool);\\r\\n    function getSpeciesOfId(uint256 id) external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flowerFamNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beeNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flowerFamNewGen\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_honeyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecoSystem\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HoneyToken\",\"outputs\":[{\"internalType\":\"contract IHoney\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"flowersWithBees\",\"type\":\"uint256[]\"}],\"name\":\"attractBee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beeNFT\",\"outputs\":[{\"internalType\":\"contract IBee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beePrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beeProbability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beeProbabilityBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowerId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFam\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"beeId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"restoreAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"flowersWithBees\",\"type\":\"uint256[]\"}],\"name\":\"boostBee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecoSystem\",\"outputs\":[{\"internalType\":\"contract IFlowerFamEcoSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flowerFamNFT\",\"outputs\":[{\"internalType\":\"contract IFlowerFam\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flowerFamNewGenNFT\",\"outputs\":[{\"internalType\":\"contract IFlowerFamNewGen\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"species\",\"type\":\"uint256\"}],\"name\":\"getUpgradePriceBySpecies\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flowerFamNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beeNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flowerFamNewGen\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_honeyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecoSystem\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newGenFlowerProbability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newGenFlowerProbabilityBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newGenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"flowersWithBees\",\"type\":\"uint256[]\"}],\"name\":\"plantSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract IFlowerFamRandomizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedPrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flowerfam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newgen\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bee\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prob\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"setBeeProbability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setBeeSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eco\",\"type\":\"address\"}],\"name\":\"setEco\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prob\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"setNewGenProbability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"setNewGenSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"bee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"seed\",\"type\":\"uint128\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rmz\",\"type\":\"address\"}],\"name\":\"setRandomizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newDiscount\",\"type\":\"uint128\"}],\"name\":\"setUpgradeDiscountFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeDiscountFactor\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flowerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"flowersWithBees\",\"type\":\"uint256[]\"}],\"name\":\"upgradeFlower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FlowerFamMarketPlace", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000caace84b015330c0ab4bd003f6fa0b84ec6c64ac000000000000000000000000420f11ef3aa3ccda28c836559acaabba959fdce6000000000000000000000000027183e3d0c150d30107e5344dbe1b9d4abf4c200000000000000000000000000e239db593619bcf6248fdef4723f26cf40e1f37000000000000000000000000fc300554a54da5b3891c129288708cf2329698eb000000000000000000000000f36f33ca39985945c3042646e013b46ff3b1d5f5", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}