{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity 0.8.12;\r\n\r\n/// [MIT License]\r\n/// @title Base64\r\n/// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\n    bytes internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\r\n                )\r\n                out := shl(224, out)\r\n\r\n                mstore(resultPtr, out)\r\n\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n\r\n            mstore(result, encodedLen)\r\n        }\r\n\r\n        return string(result);\r\n    }\r\n}/// @title ERC20 Interface\r\n/// @dev https://eips.ethereum.org/EIPS/eip-20\r\n/// @author Andreas Bigger <andreas@nascent.xyz>\r\ninterface IERC20 {\r\n    /// @dev The circulating supply of tokens\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @dev The number of tokens owned by the account\r\n    /// @param account The address to get the balance for\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @dev Transfers the specified amount of tokens to the recipient from the sender\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /// @dev The amount of tokens the spender is permitted to transfer from the owner\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /// @dev Permits a spender to transfer an amount of tokens\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /// @dev Transfers tokens from the sender using the caller's allowance\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /// @dev Emitted when tokens are transfered\r\n    /// @param from The address that is sending the tokens\r\n    /// @param to The token recipient\r\n    /// @param value The number of tokens\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// @dev Emitted when an owner permits a spender\r\n    /// @param owner The token owner\r\n    /// @param spender The permitted spender\r\n    /// @param value The number of tokens\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\r\nabstract contract ERC721 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                          METADATA STORAGE/LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    function tokenURI(uint256 id) public view virtual returns (string memory);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ERC721 STORAGE                        \r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(uint256 => address) public ownerOf;\r\n\r\n    mapping(uint256 => address) public getApproved;\r\n\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 id) public virtual {\r\n        address owner = ownerOf[id];\r\n\r\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\r\n\r\n        getApproved[id] = spender;\r\n\r\n        emit Approval(owner, spender, id);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        require(from == ownerOf[id], \"WRONG_FROM\");\r\n\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(\r\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\r\n            \"NOT_AUTHORIZED\"\r\n        );\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        unchecked {\r\n            balanceOf[from]--;\r\n\r\n            balanceOf[to]++;\r\n        }\r\n\r\n        ownerOf[id] = to;\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(from, to, id);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) public virtual {\r\n        transferFrom(from, to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC165 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 id) internal virtual {\r\n        require(to != address(0), \"INVALID_RECIPIENT\");\r\n\r\n        require(ownerOf[id] == address(0), \"ALREADY_MINTED\");\r\n\r\n        // Counter overflow is incredibly unrealistic.\r\n        unchecked {\r\n            balanceOf[to]++;\r\n        }\r\n\r\n        ownerOf[id] = to;\r\n\r\n        emit Transfer(address(0), to, id);\r\n    }\r\n\r\n    function _burn(uint256 id) internal virtual {\r\n        address owner = ownerOf[id];\r\n\r\n        require(ownerOf[id] != address(0), \"NOT_MINTED\");\r\n\r\n        // Ownership check above ensures no underflow.\r\n        unchecked {\r\n            balanceOf[owner]--;\r\n        }\r\n\r\n        delete ownerOf[id];\r\n\r\n        delete getApproved[id];\r\n\r\n        emit Transfer(owner, address(0), id);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL SAFE MINT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _safeMint(address to, uint256 id) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 id,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, id);\r\n\r\n        require(\r\n            to.code.length == 0 ||\r\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\r\n                ERC721TokenReceiver.onERC721Received.selector,\r\n            \"UNSAFE_RECIPIENT\"\r\n        );\r\n    }\r\n}\r\n\r\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n////////////////////////////////////////////////\r\n///                                          ///\r\n///         /|\\                /|\\           ///\r\n///        |||||              |||||          ///\r\n///        |||||              |||||          ///\r\n///    /\\  |||||          /\\  |||||          ///\r\n///   |||| |||||         |||| |||||          ///\r\n///   |||| |||||  /\\     |||| |||||  /\\      ///\r\n///   |||| ||||| ||||    |||| ||||| ||||     ///\r\n///    \\|`-'|||| ||||     \\|`-'|||| ||||     ///\r\n///     \\__ |||| ||||      \\__ |||| ||||     ///\r\n///        ||||`-'|||         ||||`-'|||     ///\r\n///        |||| ___/          |||| ___/      ///\r\n///        |||||              |||||          ///\r\n///        |||||              |||||          ///\r\n///   ------------------------------------   ///\r\n///                                          ///\r\n////////////////////////////////////////////////\r\n\r\n/// @title Pioneers\r\n/// @notice An NFT for early Yobot Adopters\r\n/// @author Andreas Bigger <andreas@nascent.xyz>\r\n/// @dev Opensea gasless listings logic adapted from Crypto Covens\r\n/// @dev Ref: https://etherscan.io/address/0x5180db8f5c931aae63c74266b211f580155ecac8#code\r\ncontract Pioneers is ERC721 {\r\n\r\n    /// ~~~~~~~~~~~~~~~~~~~~~~ CUSTOM ERRORS ~~~~~~~~~~~~~~~~~~~~~~ ///\r\n\r\n    /// @notice Maximum number of tokens minted\r\n    error MaximumMints();\r\n\r\n    /// @notice Too few tokens remain\r\n    error InsufficientTokensRemain();\r\n\r\n    /// @notice Not enough ether sent to mint\r\n    error InsufficientFunds();\r\n\r\n    /// @notice Caller is not the contract owner\r\n    error Unauthorized();\r\n\r\n    /// @notice Thrown if the user has already minted this token\r\n    error AlreadyMinted();\r\n\r\n    /// @notice Thrown when the sale is closed\r\n    error MintClosed();\r\n\r\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~ STORAGE ~~~~~~~~~~~~~~~~~~~~~~~~~ ///\r\n\r\n    /// @dev Number of tokens\r\n    uint8 public tokenCount;\r\n\r\n    /// @notice The contract Owner\r\n    address public owner;\r\n\r\n    /// @notice Sale Active?\r\n    bool public isPublicSaleActive;\r\n\r\n    /// @notice Allowed mints per wallet\r\n    mapping(address => bool) public minted;\r\n\r\n    /// @notice The maximum number of nfts to mint\r\n    uint256 public constant MAXIMUM_COUNT = 100;\r\n\r\n    /// @notice The maximum number of tokens to mint per wallet\r\n    uint256 public constant MAX_TOKENS_PER_WALLET = 1;\r\n\r\n    /// @notice Cost to mint a token\r\n    uint256 public constant PUBLIC_SALE_PRICE = 0.05 ether;\r\n\r\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~ MODIFIERS ~~~~~~~~~~~~~~~~~~~~~~~~ ///\r\n\r\n    /// @dev Checks if there are enough tokens left for minting\r\n    modifier canMint() {\r\n      if (tokenCount >= MAXIMUM_COUNT) {\r\n        revert MaximumMints();\r\n      }\r\n      if (tokenCount + 1 > MAXIMUM_COUNT) {\r\n        revert InsufficientTokensRemain();\r\n      }\r\n      if (minted[msg.sender]) {\r\n        revert AlreadyMinted();\r\n      }\r\n      _;\r\n    }\r\n\r\n    /// @dev Checks if user sent enough ether to mint\r\n    modifier isCorrectPayment() {\r\n      if (PUBLIC_SALE_PRICE > msg.value) {\r\n        revert InsufficientFunds();\r\n      }\r\n      _;\r\n    }\r\n\r\n    /// @dev Checks if the message sender is the contract owner\r\n    modifier onlyOwner() {\r\n      if (msg.sender != owner) {\r\n        revert Unauthorized();\r\n      }\r\n      _;\r\n    }\r\n\r\n    /// @dev Checks if minting is enabled\r\n    modifier isMintingOpen() {\r\n      if (!isPublicSaleActive) {\r\n        revert MintClosed();\r\n      }\r\n      _;\r\n    }\r\n\r\n    /// ~~~~~~~~~~~~~~~~~~~~~~~ CONSTRUCTOR ~~~~~~~~~~~~~~~~~~~~~~~ ///\r\n\r\n    /// @notice Creates the ERC721 with the predefined metadata\r\n    constructor() ERC721(\"Pioneers\", \"PINR\") {\r\n      owner = msg.sender;\r\n    }\r\n\r\n    /// ~~~~~~~~~~~~~~~~~~~~~~~~~ METADATA ~~~~~~~~~~~~~~~~~~~~~~~~ ///\r\n\r\n    /// @notice Returns the URI for the given token\r\n    /// @param tokenId The token id to query against\r\n    function tokenURI(uint256 tokenId)\r\n      public\r\n      view\r\n      virtual\r\n      override\r\n      returns (string memory)\r\n    {\r\n      string memory baseSvg =\r\n        \"<svg viewBox='0 0 800 800' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>\"\r\n        \"<style>.text--line{font-size:400px;font-weight:bold;font-family:'Arial';}\"\r\n        \".top-text{fill:#bafe49;font-weight: bold;font-color:#bafe49;font-size:40px;font-family:'Arial';}\"\r\n        \".text-copy{fill:none;stroke:white;stroke-dasharray:25% 40%;stroke-width:4px;animation:stroke-offset 9s infinite linear;}\"\r\n        \".text-copy:nth-child(1){stroke:#bafe49;stroke-dashoffset:6% * 1;}.text-copy:nth-child(2){stroke:#bafe49;stroke-dashoffset:6% * 2;}\"\r\n        \".text-copy:nth-child(3){stroke:#bafe49;stroke-dashoffset:6% * 3;}.text-copy:nth-child(4){stroke:#bafe49;stroke-dashoffset:6% * 4;}\"\r\n        \".text-copy:nth-child(5){stroke:#bafe49;stroke-dashoffset:6% * 5;}.text-copy:nth-child(6){stroke:#bafe49;stroke-dashoffset:6% * 6;}\"\r\n        \".text-copy:nth-child(7){stroke:#bafe49;stroke-dashoffset:6% * 7;}.text-copy:nth-child(8){stroke:#bafe49;stroke-dashoffset:6% * 8;}\"\r\n        \".text-copy:nth-child(9){stroke:#bafe49;stroke-dashoffset:6% * 9;}.text-copy:nth-child(10){stroke:#bafe49;stroke-dashoffset:6% * 10;}\"\r\n        \"@keyframes stroke-offset{45%{stroke-dashoffset:40%;stroke-dasharray:25% 0%;}60%{stroke-dashoffset:40%;stroke-dasharray:25% 0%;}}\"\r\n        \"</style>\"\r\n        \"<rect width='100%' height='100%' fill='black' />\"\r\n        \"<symbol id='s-text'>\"\r\n        \"<text text-anchor='middle' x='50%' y='70%' class='text--line'>Y</text>\"\r\n        \"</symbol><g class='g-ants'>\"\r\n        \"<use href='#s-text' class='text-copy'></use>\"\r\n        \"<use href='#s-text' class='text-copy'></use>\"\r\n        \"<use href='#s-text' class='text-copy'></use>\"\r\n        \"<use href='#s-text' class='text-copy'></use>\"\r\n        \"<use href='#s-text' class='text-copy'></use>\"\r\n        \"<use href='#s-text' class='text-copy'></use>\"\r\n        \"<use href='#s-text' class='text-copy'></use>\"\r\n        \"<use href='#s-text' class='text-copy'></use>\"\r\n        \"<use href='#s-text' class='text-copy'></use>\"\r\n        \"<use href='#s-text' class='text-copy'></use></g>\";\r\n\r\n      // Convert token id to string\r\n      string memory sTokenId = toString(tokenId);\r\n\r\n      // Create the SVG Image\r\n      string memory finalSvg = string(\r\n        abi.encodePacked(\r\n          baseSvg,\r\n          \"<text class='top-text' margin='2px' x='4%' y='8%'>\",\r\n          sTokenId,\r\n          \"</text></svg>\"\r\n        )\r\n      );\r\n\r\n      // Base64 Encode our JSON Metadata\r\n      string memory json = Base64.encode(\r\n        bytes(\r\n          string(\r\n            abi.encodePacked(\r\n              '{\"name\": \"Pioneer ',\r\n              sTokenId,\r\n              '\", \"description\": \"',\r\n              'Number ',\r\n              sTokenId,\r\n              ' of the Pioneer collection for early Yobot Adopters\", \"image\": \"data:image/svg+xml;base64,',\r\n              Base64.encode(bytes(finalSvg)),\r\n              '\"}'\r\n            )\r\n          )\r\n        )\r\n      );\r\n\r\n      // Prepend data:application/json;base64 to define the base64 encoded data\r\n      return string(\r\n        abi.encodePacked(\"data:application/json;base64,\", json)\r\n      );\r\n    }\r\n\r\n    /// ~~~~~~~~~~~~~~~~~~~~~~ MINTING LOGIC ~~~~~~~~~~~~~~~~~~~~~~ ///\r\n\r\n    /// @notice Permissionless minting\r\n    /// @param to The address to mint to\r\n    function mint(address to)\r\n      public\r\n      virtual\r\n      payable\r\n      isCorrectPayment\r\n      canMint\r\n      isMintingOpen\r\n    {\r\n      uint256 tokenId = uint256(tokenCount);\r\n      unchecked { ++tokenCount; }\r\n      minted[msg.sender] = true;\r\n      _mint(to, tokenId);\r\n    }\r\n\r\n    /// @notice Allows the owner to mint tokens\r\n    /// @param to The address to mint to\r\n    function privateMint(address to) public virtual payable onlyOwner {\r\n      uint256 tokenId = uint256(tokenCount);\r\n      unchecked { ++tokenCount; }\r\n      _mint(to, tokenId);\r\n    }\r\n\r\n    /// @notice Permissionless minting with safe receiver checks\r\n    /// @param to The address to mint to\r\n    function safeMint(address to)\r\n      public\r\n      virtual\r\n      payable\r\n      isCorrectPayment\r\n      canMint\r\n      isMintingOpen\r\n    {\r\n      uint256 tokenId = uint256(tokenCount);\r\n      unchecked { ++tokenCount; }\r\n      minted[msg.sender] = true;\r\n      _safeMint(to, tokenId);\r\n    }\r\n\r\n    /// @notice Permissionless minting with safe receiver checks and calldata\r\n    /// @param to The address to mint to\r\n    /// @param data Data to forward to the token receiver\r\n    function safeMint(\r\n      address to,\r\n      bytes memory data\r\n    )\r\n      public\r\n      virtual\r\n      payable\r\n      isCorrectPayment\r\n      canMint\r\n      isMintingOpen\r\n    {\r\n      uint256 tokenId = uint256(tokenCount);\r\n      unchecked { ++tokenCount; }\r\n      minted[msg.sender] = true;\r\n      _safeMint(to, tokenId, data);\r\n    }\r\n\r\n    /// ~~~~~~~~~~~~~~~~~~~~~~~ ADMIN LOGIC ~~~~~~~~~~~~~~~~~~~~~~~ ///\r\n\r\n    /// @dev Sets if the sale is active\r\n    /// @param _isPublicSaleActive Whether the public sale is open or not\r\n    function setIsPublicSaleActive(bool _isPublicSaleActive)\r\n      external\r\n      onlyOwner\r\n    {\r\n      isPublicSaleActive = _isPublicSaleActive;\r\n    }\r\n\r\n    /// @dev Allows the owner to withdraw eth\r\n    function withdraw() public onlyOwner {\r\n      uint256 balance = address(this).balance;\r\n      (bool sent,) = msg.sender.call{value: balance}(\"\");\r\n      require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    /// @dev Allows the owner to withdraw any erc20 tokens sent to this contract\r\n    /// @param token The ERC20 token to withdraw\r\n    function withdrawTokens(IERC20 token) public onlyOwner {\r\n      uint256 balance = token.balanceOf(address(this));\r\n      token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    /// ~~~~~~~~~~~~~~~~~~~~~~ CUSTOM LOGIC ~~~~~~~~~~~~~~~~~~~~~~~ ///\r\n\r\n    /// @dev Support for EIP 2981 Interface by overriding erc165 supportsInterface\r\n    /// @param interfaceId The 4 byte interface id to check against\r\n    function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\r\n      return\r\n        interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\r\n        interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\r\n        interfaceId == 0x5b5e139f;   // ERC165 Interface ID for ERC721Metadata\r\n    }\r\n\r\n    /// @notice Converts a uint256 into a string\r\n    /// @param value The value to convert to a string\r\n    function toString(uint256 value) public pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokensRemain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumMints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_PER_WALLET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"privateMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPublicSaleActive\",\"type\":\"bool\"}],\"name\":\"setIsPublicSaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pioneers", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://89e088e806d9ab3ff77368d8829312f6baca70ea8bba01b921257a18e6754832"}]}