{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity 0.8.10;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n\tfunction addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}\r\n\r\ncontract OceidonBloxLiquidityHandler is Ownable {\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public constant USDCAddress = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant OBLOX = 0x9319820aD5447180D0CBb76c1C06c870562aEf93;\r\n    address public constant uniswapV2_OBLOXUSDCPair = 0xB1636Da7243bED31B988d68026C3289Df258d252;\r\n    bool private inProgress;\r\n\r\n    constructor() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n\r\n    function addLiquidityFee(bool isAll, uint256 amountForLiquidity) public onlyOwner {\r\n        require(!inProgress, \"Add liquidity is in progress\");\r\n        if(isAll) {\r\n            amountForLiquidity = IERC20(OBLOX).balanceOf(address(this));\r\n        } else {\r\n            require(amountForLiquidity <= IERC20(OBLOX).balanceOf(address(this)), \"Not enough tokens in the contract\");\r\n        }\r\n\r\n        inProgress = true;\r\n        \r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2_OBLOXUSDCPair);\r\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\r\n\r\n        uint256 tokenReserve;\r\n        if(OBLOX == pair.token0()) {\r\n            tokenReserve = res0;\r\n        } else {\r\n            tokenReserve = res1;\r\n        }\r\n        uint256 originalAmount = IERC20(USDCAddress).balanceOf(address(this));\r\n        uint256 amountToSwap = calculateSwapInAmount(tokenReserve, amountForLiquidity);\r\n        //if no reserve or a new pair is created\r\n        if (amountToSwap <= 0) amountToSwap = amountForLiquidity / 2;\r\n        uint256 amountLeft = amountForLiquidity - amountToSwap;\r\n        swapTokensForUSDC(amountToSwap, address(this));\r\n        uint256 initialBalance = IERC20(USDCAddress).balanceOf(address(this)) - originalAmount;\r\n        addLiquidity(amountLeft, initialBalance);\r\n        \r\n        inProgress = false;\r\n    }\r\n\r\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return\r\n            (Babylonian.sqrt(\r\n                reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))\r\n            ) - (reserveIn * 1997)) / 1994;\r\n    }\r\n\r\n    function swapTokensForUSDC(uint256 tokenAmount, address receiver) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = OBLOX;\r\n        path[1] = USDCAddress;\r\n\t\t\r\n        IERC20(OBLOX).approve(address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdcAmount) private {\r\n        IERC20(OBLOX).approve(address(uniswapV2Router), tokenAmount);\r\n        IERC20(USDCAddress).approve(address(uniswapV2Router), usdcAmount);\r\n        uniswapV2Router.addLiquidity(\r\n            OBLOX,\r\n            USDCAddress,\r\n            tokenAmount,\r\n            usdcAmount, \r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OBLOX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isAll\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountForLiquidity\",\"type\":\"uint256\"}],\"name\":\"addLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2_OBLOXUSDCPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OceidonBloxLiquidityHandler", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://520d7617dd03083285e8a4c2d5ef12e0c95f04fb79e80b8e9b9d347948404a85"}]}