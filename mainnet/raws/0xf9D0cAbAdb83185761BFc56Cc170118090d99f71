{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/libs/Types.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.15;\\n\\n/**\\n * @title DataTypes\\n */\\nlibrary Types {\\n    // We define Usage for a batch or for a tx\\n    // to check if the usage of a batch and all txs in it are the same\\n    enum Usage {\\n        Genesis, // The Genesis type is only applicable to batch but not tx\\n        Transfer,\\n        Deposit\\n    }\\n    // PDALeaf represents the leaf in\\n    // Pubkey DataAvailability Tree\\n    struct PDALeaf {\\n        bytes pubkey;\\n    }\\n\\n    // Batch represents the batch submitted periodically to the ethereum chain\\n    struct Batch {\\n        bytes32 stateRoot;\\n        bytes32 accountRoot;\\n        bytes32 depositTree;\\n        address committer;\\n        bytes32 txRoot;\\n        uint256 stakeCommitted;\\n        uint256 finalisesOn;\\n        uint256 timestamp;\\n        Usage batchType;\\n    }\\n\\n    // Transaction represents how each transaction looks like for\\n    // this rollup chain\\n    struct Transaction {\\n        uint256 fromIndex;\\n        uint256 toIndex;\\n        uint256 tokenType;\\n        uint256 nonce;\\n        uint256 txType;\\n        uint256 amount;\\n        bytes signature;\\n    }\\n\\n    // AccountInclusionProof consists of the following fields\\n    // 1. Path to the account leaf from root in the balances tree\\n    // 2. Actual data stored in the leaf\\n    struct AccountInclusionProof {\\n        uint256 pathToAccount;\\n        UserAccount account;\\n    }\\n\\n    struct TranasctionInclusionProof {\\n        uint256 pathToTx;\\n        Transaction data;\\n    }\\n\\n    struct PDAInclusionProof {\\n        uint256 pathToPubkey;\\n        PDALeaf pubkey_leaf;\\n    }\\n\\n    // UserAccount contains the actual data stored in the leaf of balance tree\\n    struct UserAccount {\\n        // ID is the path to the pubkey in the PDA tree\\n        uint256 ID;\\n        uint256 tokenType;\\n        uint256 balance;\\n        uint256 nonce;\\n    }\\n\\n    struct AccountMerkleProof {\\n        AccountInclusionProof accountIP;\\n        bytes32[] siblings;\\n    }\\n\\n    struct AccountProofs {\\n        AccountMerkleProof from;\\n        AccountMerkleProof to;\\n    }\\n\\n    struct BatchValidationProofs {\\n        AccountProofs[] accountProofs;\\n        PDAMerkleProof[] pdaProof;\\n    }\\n\\n    struct TransactionMerkleProof {\\n        TranasctionInclusionProof _tx;\\n        bytes32[] siblings;\\n    }\\n\\n    struct PDAMerkleProof {\\n        PDAInclusionProof _pda;\\n        bytes32[] siblings;\\n    }\\n\\n    enum ErrorCode {\\n        NoError,\\n        InvalidTokenAddress,\\n        InvalidTokenAmount,\\n        NotEnoughTokenBalance,\\n        BadFromTokenType,\\n        BadToTokenType\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[]", "ContractName": "Types", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}