{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/OneOfOne.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/// @title 1-of-1 optimized Soulbound NFT contract\\n/// @author wschwab\\n/// @notice based on idea from Ross: https://gist.github.com/z0r0z/ea0b752aa9537070b0d61f8a74d5c10c\\n/// @dev ERC721 template based on Solmate\\n/// @dev NFT maps to ENS name instead of address\\ncontract OneOfOne {\\n  /*///////////////////////////////////////////////////////////////\\n                            ERRORS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  error TokenIdDoesNotExist();\\n  error EnsCallFailed();\\n  error ResolverCallFailed();\\n  error Soulbound(string message);\\n  error Unauthorized();\\n\\n  /*///////////////////////////////////////////////////////////////\\n                        GLOBAL VARIABLES\\n  //////////////////////////////////////////////////////////////*/\\n\\n  string public constant name = \\\"1-of-1 Soulbound\\\";\\n  string public constant symbol = \\\"1O1S\\\";\\n  string private constant URI = \\\"ipfs://QmPBAmzESVbx88Vtd94dmg8GCy2q4xLU3zxJfAc3puC4tW\\\";\\n  /// @notice ENS namehash used to determine NFT owner\\n  bytes32 private immutable namehash;\\n  /// @notice the ENS contract, needed to find the namehash's resolver\\n  address private immutable ens;\\n\\n\\n  /*///////////////////////////////////////////////////////////////\\n                              EVENTS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /// @dev event will only emit on mint, can hardcode from and tokenId\\n  /// @dev since there are no transfers, we don't need the other 721 events\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n  /*///////////////////////////////////////////////////////////////\\n                            CONSTRUCTOR\\n  //////////////////////////////////////////////////////////////*/\\n\\n  constructor(\\n      address _ens,\\n      bytes32 _namehash\\n  ) {\\n    ens = _ens;\\n    namehash = _namehash;\\n\\n    // NFT is hardcoded in, all we need is the event\\n    emit Transfer(address(0), resolveAddress(), 0);\\n  }\\n\\n  /*///////////////////////////////////////////////////////////////\\n                          ERC721 VIEW\\n  //////////////////////////////////////////////////////////////*/\\n\\n  function balanceOf(address account) public view returns(uint256) {\\n    return account == resolveAddress() ? 1 : 0;\\n  }\\n\\n  function ownerOf(uint256 tokenId) public view returns(address) {\\n    if(tokenId != 0) revert TokenIdDoesNotExist();\\n    return resolveAddress();\\n  }\\n\\n  function tokenURI(uint256 tokenId) public pure returns (string memory) {\\n    if(tokenId != 0) revert TokenIdDoesNotExist();\\n    return URI;\\n  }\\n\\n  /*///////////////////////////////////////////////////////////////\\n                          HELPER FUNCTIONS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  function resolveAddress() public view returns(address) {\\n    (bool success, bytes memory returndata) = ens.staticcall(\\n      abi.encodeWithSignature(\\n        \\\"resolver(bytes32)\\\",\\n        namehash\\n      )\\n    );\\n    if(!success) revert EnsCallFailed();\\n    address resolver = abi.decode(returndata, (address));\\n    (success, returndata) = resolver.staticcall(\\n      abi.encodeWithSignature(\\n        \\\"addr(bytes32)\\\",\\n        namehash\\n      )\\n    );\\n    if(!success) revert ResolverCallFailed();\\n    address owner = abi.decode(returndata, (address));\\n    return owner;\\n  }\\n\\n  /*///////////////////////////////////////////////////////////////\\n                                ERC165\\n  //////////////////////////////////////////////////////////////*/\\n\\n  function supportsInterface(bytes4 iface) public pure returns(bool) {\\n    return (\\n      iface == 0x80ac58cd     // ERC721\\n      || iface == 0x5b5e139f  // ERC721Metadata\\n      || iface == 0x01ffc9a7  // ERC165\\n    );\\n  }\\n\\n  /*///////////////////////////////////////////////////////////////\\n                            SOULBOUND\\n  //////////////////////////////////////////////////////////////*/\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public pure {\\n    revert Soulbound(\\\"SOULBOUND\\\");\\n  }\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) public pure {\\n    revert Soulbound(\\\"SOULBOUND\\\");\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public pure {\\n    revert Soulbound(\\\"SOULBOUND\\\");\\n  }\\n\\n  function approve(\\n    address approved,\\n    uint256 _tokenId\\n  ) public pure {\\n    revert Soulbound(\\\"SOULBOUND\\\");\\n  }\\n\\n  function setApprovalForAll(\\n    address operator,\\n    bool allowed\\n  ) public pure {\\n    revert Soulbound(\\\"SOULBOUND\\\");\\n  }\\n\\n  function getApproved(\\n    uint256 tokenId\\n  ) public pure {\\n    revert Soulbound(\\\"SOULBOUND\\\");\\n  }\\n\\n  function isApprovedForAll(\\n    address owner,\\n    address operator\\n  ) public pure returns(bool) {\\n    return false;\\n  }\\n\\n  /*///////////////////////////////////////////////////////////////\\n                            SELF-DESTRUCT\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /// @notice allows destruction of contract\\n  /// @dev intended if ENS domain will expire, ENS migrates, or otherwise\\n  /// @dev can only be called by namehash set in constructor\\n  function selfDestruct() public {\\n    address owner = resolveAddress();\\n    if(msg.sender != owner) revert Unauthorized();\\n    selfdestruct(payable(owner));\\n  }\\n}\\n\\n//         ________                .__                             \\n// ___  ___\\\\______ \\\\   ____ ______ |  |   ____ ___.__. ___________ \\n// \\\\  \\\\/  / |    |  \\\\_/ __ \\\\\\\\____ \\\\|  |  /  _ <   |  |/ __ \\\\_  __ \\\\\\n//  >    <  |    `   \\\\  ___/|  |_> >  |_(  <_> )___  \\\\  ___/|  | \\\\/\\n// /__/\\\\_ \\\\/_______  /\\\\___  >   __/|____/\\\\____// ____|\\\\___  >__|   \\n//       \\\\/        \\\\/     \\\\/|__|               \\\\/         \\\\/       \\n\\ninterface IxDeployer {\\n  function deploy(uint256 value, bytes32 salt, bytes memory code) external;\\n  function computeAddress(bytes32 salt, bytes32 codehash) external returns(address);\\n}\\n\\ncontract DeployToxDeployer {\\n  address ens = address(0x314159265dD8dbb310642f98f50C066173C1259b);\\n  bytes32 namehash = 0xb77f95208cec8af4dec158916be641e4f07614e1fa019686396b7a6da91aa985;\\n  IxDeployer x = IxDeployer(0x13b0D85CcB8bf860b6b79AF3029fCA081AE9beF2);\\n  bytes code = abi.encodePacked(type(OneOfOne).creationCode, abi.encode(ens, namehash));\\n  bytes32 salt = keccak256(abi.encode(\\\"One-of-One Soulbound\\\"));\\n  constructor() {\\n    x.deploy(0, salt, code);\\n    selfdestruct(payable(address(0)));\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@rari-capital/solmate/=lib/solmate/\",\r\n      \"create3/=lib/create3/contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_namehash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnsCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverCallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Soulbound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIdDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"iface\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "OneOfOne", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000314159265dd8dbb310642f98f50c066173c1259bb77f95208cec8af4dec158916be641e4f07614e1fa019686396b7a6da91aa985", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}