{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BLXMStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BLXMRewardProvider.sol\\\";\\nimport \\\"./interfaces/IBLXMStaker.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/BLXMLibrary.sol\\\";\\n\\n\\ncontract BLXMStaker is Initializable, BLXMRewardProvider, IBLXMStaker {\\n    using SafeMath for uint256;\\n\\n    address public override BLXM;\\n\\n    function initialize(address _BLXM) public initializer {\\n        __ReentrancyGuard_init();\\n        __BLXMMultiOwnable_init();\\n\\n        updateRewardFactor(30, 1000000000000000000);\\n        updateRewardFactor(90, 1300000000000000000);\\n        updateRewardFactor(180, 1690000000000000000);\\n        updateRewardFactor(360, 2197000000000000000);\\n\\n        BLXM = _BLXM;\\n    }\\n\\n    function addRewards(uint256 totalBlxmAmount, uint16 supplyDays) external override returns (uint256 amountPerHours) {\\n        TransferHelper.safeTransferFrom(BLXM, msg.sender, getTreasury(), totalBlxmAmount);\\n        amountPerHours = _addRewards(totalBlxmAmount, supplyDays);\\n    }\\n\\n    function stake(uint256 amount, address to, uint16 lockedDays) external override {\\n        require(amount > 0, \\\"ZERO_AMOUNT\\\");\\n        TransferHelper.safeTransferFrom(BLXM, msg.sender, getTreasury(), amount);\\n        _stake(to, amount, lockedDays);\\n    }\\n\\n    function withdraw(uint256 amount, address to, uint256 idx) external override returns (uint256 rewardAmount) {\\n        require(amount > 0, \\\"ZERO_AMOUNT\\\");\\n        rewardAmount = _withdraw(to, amount, idx);\\n    }\\n\\n    /**\\n    * This empty reserved space is put in place to allow future versions to add new\\n    * variables without shifting down storage in the inheritance chain.\\n    * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/BLXMRewardProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IBLXMRewardProvider.sol\\\";\\nimport \\\"./BLXMTreasuryManager.sol\\\";\\nimport \\\"./BLXMMultiOwnable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/BLXMLibrary.sol\\\";\\nimport \\\"./interfaces/IBLXMTreasury.sol\\\";\\n\\n\\ncontract BLXMRewardProvider is ReentrancyGuardUpgradeable, BLXMMultiOwnable, BLXMTreasuryManager, IBLXMRewardProvider {\\n\\n    using SafeMath for uint;\\n\\n\\n    struct Field {\\n        uint32 syncHour; // at most sync once an hour\\n        uint totalAmount; // exclude extra amount\\n        uint pendingRewards;\\n        uint32 initialHour;\\n        uint16 lastSession;\\n\\n        // days => session\\n        mapping(uint32 => uint16) daysToSession;\\n\\n        // session => Period struct\\n        mapping(uint16 => Period) periods;\\n\\n        // hours from the epoch => statistics\\n        mapping(uint32 => Statistics) dailyStatistics;\\n    }\\n\\n    struct Period {\\n        uint amountPerHours;\\n        uint32 startHour; // include, timestamp in hour from initial hour\\n        uint32 endHour; // exclude, timestamp in hour from initial hour\\n    }\\n\\n    struct Statistics {\\n        uint amountIn; // include extra amount\\n        uint amountOut;\\n        uint aggregatedRewards; // rewards / (amountIn - amountOut)\\n        uint32 next;\\n    }\\n\\n    struct Position {\\n        uint amount;\\n        uint extraAmount;\\n        uint32 startHour; // include, hour from epoch, time to start calculating rewards\\n        uint32 endLocking; // exclude, hour from epoch, locked until this hour\\n    }\\n\\n    Field private treasuryFields;\\n\\n    // user address => idx => position\\n    mapping(address => Position[]) public override allPosition;\\n\\n    // locked days => factor\\n    mapping(uint16 => uint) internal rewardFactor;\\n\\n\\n    modifier sync() {\\n        syncStatistics();\\n        _;\\n    }\\n\\n    function updateRewardFactor(uint16 lockedDays, uint factor) public override onlyOwner returns (bool) {\\n        require(lockedDays != 0, 'ZERO_DAYS');\\n        require(factor == 0 || factor >= 10 ** decimals(), 'WRONG_FACTOR');\\n        rewardFactor[lockedDays] = factor;\\n        return true;\\n    }\\n\\n    function getRewardFactor(uint16 lockedDays) external override view returns (uint factor) {\\n        factor = rewardFactor[lockedDays];\\n    }\\n\\n    function allPositionLength(address investor) public override view returns (uint) {\\n        return allPosition[investor].length;\\n    }\\n\\n    // ** DO NOT CALL THIS FUNCTION AS A WRITE FUNCTION **\\n    function calcRewards(address investor, uint idx) external override sync returns (uint rewardAmount, bool isLocked) {\\n        require(idx < allPositionLength(investor), 'NO_POSITION');\\n        Position memory position = allPosition[investor][idx];\\n        (rewardAmount, isLocked) = _calcRewards(position);\\n    }\\n\\n    function decimals() public override pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    function getDailyStatistics(uint32 hourFromEpoch) external view override returns (uint amountIn, uint amountOut, uint aggregatedRewards, uint32 next) {\\n        Statistics memory statistics = treasuryFields.dailyStatistics[hourFromEpoch];\\n        amountIn = statistics.amountIn;\\n        amountOut = statistics.amountOut;\\n        aggregatedRewards = statistics.aggregatedRewards;\\n        next = statistics.next;\\n    }\\n\\n    function hoursToSession(uint32 hourFromEpoch) external override view returns (uint16 session) {\\n        uint32 initialHour = treasuryFields.initialHour;\\n        if (hourFromEpoch >= initialHour) {\\n            uint32 hour = hourFromEpoch - initialHour;\\n            session = treasuryFields.daysToSession[hour / 24];\\n        }\\n    }\\n\\n    function getPeriods(uint16 session) external override view returns (uint amountPerHours, uint32 startHour, uint32 endHour) {\\n        Period storage period = treasuryFields.periods[session];\\n        amountPerHours = period.amountPerHours;\\n\\n        uint32 initialHour = treasuryFields.initialHour;\\n        startHour = period.startHour;\\n        endHour = period.endHour;\\n        \\n        if (startHour != 0 || endHour != 0) {\\n            startHour += initialHour;\\n            endHour += initialHour;\\n        }\\n    }\\n\\n    function getTreasuryFields() external view override returns(uint32 syncHour, uint totalAmount, uint pendingRewards, uint32 initialHour, uint16 lastSession) {\\n        syncHour = treasuryFields.syncHour;\\n        totalAmount = treasuryFields.totalAmount;\\n        pendingRewards = treasuryFields.pendingRewards;\\n        initialHour = treasuryFields.initialHour;\\n        lastSession = treasuryFields.lastSession;\\n    }\\n\\n    // should sync statistics every time before amount or rewards change\\n    function syncStatistics() public override {\\n        uint32 currentHour = BLXMLibrary.currentHour();\\n        uint32 syncHour = treasuryFields.syncHour;\\n\\n        if (syncHour < currentHour) {\\n            if (syncHour != 0) {\\n                _updateStatistics(syncHour, currentHour);\\n            }\\n            treasuryFields.syncHour = currentHour;\\n        }\\n    }\\n\\n    function _addRewards(uint totalAmount, uint16 supplyDays) internal nonReentrant sync onlyOwner returns (uint amountPerHours) {\\n        require(totalAmount > 0 && supplyDays > 0, 'ZERO_REWARDS');\\n\\n        uint16 lastSession = treasuryFields.lastSession;\\n        if (lastSession == 0) {\\n            treasuryFields.initialHour = BLXMLibrary.currentHour();\\n        }\\n\\n        uint32 startHour = treasuryFields.periods[lastSession].endHour;\\n        uint32 endHour = startHour + (supplyDays * 24);\\n\\n        lastSession += 1;\\n        treasuryFields.lastSession = lastSession;\\n\\n        uint32 target = startHour / 24;\\n        uint32 i = endHour / 24;\\n        unchecked {\\n            while (i --> target) {\\n                // reverse mapping\\n                treasuryFields.daysToSession[i] = lastSession;\\n            }\\n        }\\n\\n        amountPerHours = totalAmount / (supplyDays * 24);\\n        treasuryFields.periods[lastSession] = Period(amountPerHours, startHour, endHour);\\n\\n        if (treasuryFields.pendingRewards != 0) {\\n            uint pendingRewards = treasuryFields.pendingRewards;\\n            treasuryFields.pendingRewards = 0;\\n            _arrangeFailedRewards(pendingRewards);\\n        }\\n\\n        uint32 initialHour = treasuryFields.initialHour;\\n        _addRewards(totalAmount);\\n        emit AddRewards(msg.sender, initialHour + startHour, initialHour + endHour, amountPerHours);\\n    }\\n\\n    // if (is locked) {\\n    //     (amount + extra amount) * (agg now - agg hour in)\\n    // } else {\\n    //     amount * (agg now - agg day in)\\n    //     extra amount * (agg end locking - agg hour in)\\n    // }\\n    function _calcRewards(Position memory position) internal view returns (uint rewardAmount, bool isLocked) {\\n\\n        uint32 currentHour = BLXMLibrary.currentHour();\\n        require(treasuryFields.syncHour == currentHour, 'NOT_SYNC');\\n\\n        if (currentHour < position.startHour) {\\n            return (0, true);\\n        }\\n\\n        if (currentHour < position.endLocking) {\\n            isLocked = true;\\n        }\\n\\n        uint amount = position.amount;\\n        uint extraAmount = position.extraAmount;\\n        \\n        uint aggNow = treasuryFields.dailyStatistics[currentHour].aggregatedRewards;\\n        uint aggStart = treasuryFields.dailyStatistics[position.startHour].aggregatedRewards;\\n        if (isLocked) {\\n            rewardAmount = amount.add(extraAmount).wmul(aggNow.sub(aggStart));\\n        } else {\\n            uint aggEnd = treasuryFields.dailyStatistics[position.endLocking].aggregatedRewards;\\n            rewardAmount = extraAmount.wmul(aggEnd.sub(aggStart));\\n            rewardAmount = rewardAmount.add(amount.wmul(aggNow.sub(aggStart)));\\n        }\\n    }\\n\\n    function _stake(address to, uint amount, uint16 lockedDays) internal nonReentrant sync {\\n        require(amount != 0, 'INSUFFICIENT_AMOUNT');\\n        uint256 _factor = rewardFactor[lockedDays];\\n        require(_factor != 0, 'NO_FACTOR');\\n\\n        uint extraAmount = amount.wmul(_factor.sub(10 ** decimals()));\\n\\n        uint32 startHour = BLXMLibrary.currentHour() + 1;\\n        uint32 endLocking = startHour + (lockedDays * 24);\\n\\n        allPosition[to].push(Position(amount, extraAmount, startHour, endLocking));\\n        \\n        _updateAmount(startHour, amount.add(extraAmount), 0);\\n        if (extraAmount != 0) {\\n            _updateAmount(endLocking, 0, extraAmount);\\n        }\\n\\n        treasuryFields.totalAmount = amount.add(treasuryFields.totalAmount);\\n\\n        _notify(amount, to);\\n        emit Stake(msg.sender, amount, to);\\n        _emitAllPosition(to, allPositionLength(to) - 1);\\n    }\\n\\n    function _withdraw(address to, uint amount, uint idx) internal nonReentrant sync returns (uint rewardAmount) {\\n        require(idx < allPositionLength(msg.sender), 'NO_POSITION');\\n        Position memory position = allPosition[msg.sender][idx];\\n        require(amount > 0 && amount <= position.amount, 'INSUFFICIENT_AMOUNT');\\n\\n        // The start hour must be a full hour, \\n        // when add and remove on the same hour, \\n        // the next hour's amount should be subtracted.\\n        uint32 hour = BLXMLibrary.currentHour();\\n        hour = hour >= position.startHour ? hour : position.startHour;\\n        _updateAmount(hour, 0, amount);\\n\\n        uint extraAmount = position.extraAmount * amount / position.amount;\\n\\n        bool isLocked;\\n        (rewardAmount, isLocked) = _calcRewards(position);\\n        rewardAmount = rewardAmount * amount / position.amount;\\n        if (isLocked) {\\n            _arrangeFailedRewards(rewardAmount);\\n            rewardAmount = 0;\\n            _updateAmount(hour, 0, extraAmount);\\n            _updateAmount(position.endLocking, extraAmount, 0);\\n        }\\n\\n        allPosition[msg.sender][idx].amount = position.amount.sub(amount);\\n        allPosition[msg.sender][idx].extraAmount = position.extraAmount.sub(extraAmount);\\n        \\n        uint _totalAmount = treasuryFields.totalAmount;\\n        treasuryFields.totalAmount = _totalAmount.sub(amount);\\n\\n        _withdraw(msg.sender, amount, rewardAmount, to);\\n        emit Withdraw(msg.sender, amount, rewardAmount, to);\\n        _emitAllPosition(msg.sender, idx);\\n    }\\n\\n    function _arrangeFailedRewards(uint rewardAmount) internal {\\n        if (rewardAmount == 0) {\\n            return;\\n        }\\n        uint32 initialHour = treasuryFields.initialHour;\\n        uint32 startHour = BLXMLibrary.currentHour() - initialHour;\\n        uint16 session = treasuryFields.daysToSession[startHour / 24];\\n        if (session == 0) {\\n            treasuryFields.pendingRewards += rewardAmount; \\n        }\\n\\n        uint32 endHour = treasuryFields.periods[session].endHour;\\n        uint32 leftHour = endHour - startHour;\\n        uint amountPerHours = rewardAmount / leftHour;\\n        treasuryFields.periods[session].amountPerHours += amountPerHours;\\n\\n        emit ArrangeFailedRewards(msg.sender, initialHour + startHour, initialHour + endHour, amountPerHours);\\n    }\\n\\n    function _emitAllPosition(address owner, uint idx) internal {\\n        Position memory position = allPosition[owner][idx];\\n        emit AllPosition(owner, position.amount, position.extraAmount, position.startHour, position.endLocking, idx);\\n    }\\n\\n    function _updateAmount(uint32 hour, uint amountIn, uint amountOut) internal {\\n        require(hour >= BLXMLibrary.currentHour(), 'DATA_FIXED');\\n        Statistics memory statistics = treasuryFields.dailyStatistics[hour];\\n        statistics.amountIn = statistics.amountIn.add(amountIn);\\n        statistics.amountOut = statistics.amountOut.add(amountOut);\\n        treasuryFields.dailyStatistics[hour] = statistics;\\n    }\\n\\n    function _updateStatistics(uint32 fromHour, uint32 toHour) internal {\\n        Statistics storage statistics = treasuryFields.dailyStatistics[fromHour];\\n        uint amountIn = statistics.amountIn;\\n        uint amountOut = statistics.amountOut;\\n        uint aggregatedRewards = statistics.aggregatedRewards;\\n        uint32 prev = fromHour; // point to previous statistics\\n        while (fromHour < toHour) {\\n            uint amount = amountIn.sub(amountOut);\\n            uint rewards = treasuryFields.periods[treasuryFields.daysToSession[(fromHour - treasuryFields.initialHour) / 24]].amountPerHours;\\n\\n            if (amount != 0) {\\n                aggregatedRewards = aggregatedRewards.add(rewards.wdiv(amount));\\n            }\\n\\n            fromHour += 1;\\n            statistics = treasuryFields.dailyStatistics[fromHour];\\n\\n            if (statistics.amountIn != 0 || statistics.amountOut != 0 || fromHour == toHour) {\\n                statistics.aggregatedRewards = aggregatedRewards;\\n                statistics.amountIn = amountIn = amountIn.add(statistics.amountIn);\\n                statistics.amountOut = amountOut = amountOut.add(statistics.amountOut);\\n                treasuryFields.dailyStatistics[prev].next = fromHour;\\n                prev = fromHour;\\n\\n                emit SyncStatistics(msg.sender, amountIn, amountOut, aggregatedRewards, fromHour);\\n            }\\n        }\\n    }\\n\\n    /**\\n    * This empty reserved space is put in place to allow future versions to add new\\n    * variables without shifting down storage in the inheritance chain.\\n    * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    */\\n    uint256[50] private __gap;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBLXMStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IBLXMStaker {\\n\\n    function BLXM() external view returns (address);\\n\\n    function addRewards(uint totalBlxmAmount, uint16 supplyDays) external returns (uint amountPerHours);\\n    function stake(uint256 amount, address to, uint16 lockedDays) external;\\n    function withdraw(uint256 amount, address to, uint256 idx) external returns (uint256 rewardAmount);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n// helper methods for interacting with BEP20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferCurrency(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper: CURRENCY_TRANSFER_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/BLXMLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\n\\nlibrary BLXMLibrary {\\n\\n    function validateAddress(address _address) internal pure {\\n        // reduce contract size\\n        require(_address != address(0), \\\"ZERO_ADDRESS\\\");\\n    }\\n\\n    function currentHour() internal view returns(uint32) {\\n        return uint32(block.timestamp / 1 hours);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBLXMRewardProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IBLXMRewardProvider {\\n\\n    event Stake(address indexed sender, uint amount, address indexed to);\\n    event Withdraw(address indexed sender, uint amount, uint rewardAmount, address indexed to);\\n\\n    event AddRewards(address indexed sender, uint32 startHour, uint32 endHour, uint amountPerHours);\\n    event ArrangeFailedRewards(address indexed sender, uint32 startHour, uint32 endHour, uint amountPerHours);\\n    event AllPosition(address indexed owner, uint amount, uint extraAmount, uint32 startHour, uint32 endLocking, uint indexed idx);\\n    event SyncStatistics(address indexed sender, uint amountIn, uint amountOut, uint aggregatedRewards, uint32 hour);\\n\\n\\n    function getRewardFactor(uint16 _days) external view returns (uint factor);\\n    function updateRewardFactor(uint16 lockedDays, uint factor) external returns (bool);\\n\\n    function allPosition(address investor, uint idx) external view returns(uint amount, uint extraAmount, uint32 startHour, uint32 endLocking);\\n    function allPositionLength(address investor) external view returns (uint);\\n    function calcRewards(address investor, uint idx) external returns (uint rewardAmount, bool isLocked);\\n    \\n    function getTreasuryFields() external view returns (uint32 syncHour, uint totalAmount, uint pendingRewards, uint32 initialHour, uint16 lastSession);\\n    function getDailyStatistics(uint32 hourFromEpoch) external view returns (uint amountIn, uint amountOut, uint aggregatedRewards, uint32 next);\\n    function syncStatistics() external;\\n    function hoursToSession(uint32 hourFromEpoch) external view returns (uint16 session);\\n    function getPeriods(uint16 session) external view returns (uint amountPerHours, uint32 startHour, uint32 endHour);\\n\\n    function decimals() external pure returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/BLXMTreasuryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IBLXMTreasuryManager.sol\\\";\\nimport \\\"./BLXMMultiOwnable.sol\\\";\\n\\nimport \\\"./interfaces/IBLXMTreasury.sol\\\";\\nimport \\\"./libraries/BLXMLibrary.sol\\\";\\n\\n\\ncontract BLXMTreasuryManager is BLXMMultiOwnable, IBLXMTreasuryManager {\\n\\n    address internal treasury;\\n\\n\\n    function getTreasury() public override view returns (address _treasury) {\\n        require(treasury != address(0), 'TSC_NOT_FOUND');\\n        _treasury = treasury;\\n    }\\n\\n    function updateTreasury(address _treasury) external override onlyOwner {\\n        require(IBLXMTreasury(_treasury).SSC() == address(this), 'INVALID_TSC');\\n        address oldTreasury = treasury;\\n        treasury = _treasury;\\n        emit UpdateTreasury(msg.sender, oldTreasury, _treasury);\\n    }\\n\\n    function getReserves() public view override returns (uint reserveBlxm, uint totalRewrads) {\\n        reserveBlxm = IBLXMTreasury(getTreasury()).totalBlxm();\\n        totalRewrads = IBLXMTreasury(getTreasury()).totalRewards();\\n    }\\n\\n    function _addRewards(uint amount) internal {\\n        IBLXMTreasury(getTreasury()).addRewards(amount);\\n    }\\n\\n    function _withdraw(address from, uint amount, uint rewards, address to) internal {\\n        IBLXMTreasury(getTreasury()).retrieveBlxmTokens(from, amount, rewards, to);\\n    }\\n\\n    function _notify(uint amount, address to) internal {\\n        IBLXMTreasury(getTreasury()).addBlxmTokens(amount, to);\\n    }\\n\\n    /**\\n    * This empty reserved space is put in place to allow future versions to add new\\n    * variables without shifting down storage in the inheritance chain.\\n    * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    */\\n    uint256[50] private __gap;\\n}\"\r\n    },\r\n    \"contracts/BLXMMultiOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./libraries/BLXMLibrary.sol\\\";\\n\\n\\nabstract contract BLXMMultiOwnable is Initializable {\\n    \\n    // member address => permission\\n    mapping(address => bool) public members;\\n\\n    event OwnershipChanged(address indexed executeOwner, address indexed targetOwner, bool permission);\\n\\n    modifier onlyOwner() {\\n        require(members[msg.sender], \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    function __BLXMMultiOwnable_init() internal onlyInitializing {\\n        _changeOwnership(msg.sender, true);\\n    }\\n\\n    function addOwnership(address newOwner) public virtual onlyOwner {\\n        BLXMLibrary.validateAddress(newOwner);\\n        _changeOwnership(newOwner, true);\\n    }\\n\\n    function removeOwnership(address owner) public virtual onlyOwner {\\n        BLXMLibrary.validateAddress(owner);\\n        _changeOwnership(owner, false);\\n    }\\n\\n    function _changeOwnership(address owner, bool permission) internal virtual {\\n        members[owner] = permission;\\n        emit OwnershipChanged(msg.sender, owner, permission);\\n    }\\n\\n    /**\\n    * This empty reserved space is put in place to allow future versions to add new\\n    * variables without shifting down storage in the inheritance chain.\\n    * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n\\n    uint constant WAD = 10 ** 18;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Math {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBLXMTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IBLXMTreasury {\\n\\n    event SendTokensToWhitelistedWallet(address indexed sender, uint amount, address indexed receiver);\\n    event Whitelist(address indexed sender, bool permission, address indexed wallet);\\n\\n\\n    function BLXM() external returns (address blxm);\\n    function SSC() external returns (address ssc);\\n\\n    function addWhitelist(address wallet) external;\\n    function removeWhitelist(address wallet) external;\\n    function whitelist(address wallet) external returns (bool permission);\\n\\n    function totalBlxm() external view returns (uint totalBlxm);\\n    function totalRewards() external view returns (uint totalRewards);\\n    function balanceOf(address investor) external view returns (uint balance);\\n\\n    function addRewards(uint amount) external;\\n\\n    function addBlxmTokens(uint amount, address to) external;\\n    function retrieveBlxmTokens(address from, uint amount, uint rewardAmount, address to) external;\\n\\n    function sendTokensToWhitelistedWallet(uint amount, address to) external;\\n}    \"\r\n    },\r\n    \"contracts/interfaces/IBLXMTreasuryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0 License\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IBLXMTreasuryManager {\\n\\n    event UpdateTreasury(address indexed sender, address oldTreasury, address newTreasury);\\n\\n    function updateTreasury(address treasury) external;\\n    function getTreasury() external returns (address treasury);\\n\\n    function getReserves() external view returns (uint reserveBlxm, uint totalRewrads);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startHour\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endHour\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerHours\",\"type\":\"uint256\"}],\"name\":\"AddRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startHour\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endLocking\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"AllPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startHour\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"endHour\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerHours\",\"type\":\"uint256\"}],\"name\":\"ArrangeFailedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executeOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"OwnershipChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregatedRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"hour\",\"type\":\"uint32\"}],\"name\":\"SyncStatistics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"UpdateTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLXM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBlxmAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"supplyDays\",\"type\":\"uint16\"}],\"name\":\"addRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPerHours\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startHour\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endLocking\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"allPositionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"calcRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"hourFromEpoch\",\"type\":\"uint32\"}],\"name\":\"getDailyStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregatedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"next\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"session\",\"type\":\"uint16\"}],\"name\":\"getPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPerHours\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startHour\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endHour\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveBlxm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewrads\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lockedDays\",\"type\":\"uint16\"}],\"name\":\"getRewardFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryFields\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"syncHour\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"initialHour\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"lastSession\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"hourFromEpoch\",\"type\":\"uint32\"}],\"name\":\"hoursToSession\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"session\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BLXM\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"lockedDays\",\"type\":\"uint16\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncStatistics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lockedDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"updateRewardFactor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BLXMStaker", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}