{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: https://github.com/ethersphere/bzzaar-contracts/blob/v1.1.0/contracts/I_Curve.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title   Interface Curve\r\n * @notice  This contract acts as an interface to the curve contract. For\r\n *          documentation please see the curve smart contract.\r\n */\r\ninterface I_Curve {\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // View functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice This function is only callable after the curve contract has been\r\n     *         initialized.\r\n     * @param  _amount The amount of tokens a user wants to buy\r\n     * @return uint256 The cost to buy the _amount of tokens in the collateral\r\n     *         currency (see collateral token).\r\n     */\r\n    function buyPrice(uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256 collateralRequired);\r\n\r\n    /**\r\n     * @notice This function is only callable after the curve contract has been\r\n     *         initialized.\r\n     * @param  _amount The amount of tokens a user wants to sell\r\n     * @return collateralReward The reward for selling the _amount of tokens in the\r\n     *         collateral currency (see collateral token).\r\n     */\r\n    function sellReward(uint256 _amount)\r\n        external\r\n        view\r\n        returns (uint256 collateralReward);\r\n\r\n    /**\r\n      * @return If the curve is both active and initialised.\r\n      */\r\n    function isCurveActive() external view returns (bool);\r\n\r\n    /**\r\n      * @return The address of the collateral token (DAI)\r\n      */\r\n    function collateralToken() external view returns (address);\r\n\r\n    /**\r\n      * @return The address of the bonded token (BZZ).\r\n      */\r\n    function bondedToken() external view returns (address);\r\n\r\n    /**\r\n      * @return The required collateral amount (DAI) to initialise the curve.\r\n      */\r\n    function requiredCollateral(uint256 _initialSupply)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // State modifying functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @notice This function initializes the curve contract, and ensure the\r\n     *         curve has the required permissions on the token contract needed\r\n     *         to function.\r\n     */\r\n    function init() external;\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to buy.\r\n      * @param  _maxCollateralSpend The max amount of collateral (DAI) the user is\r\n      *         willing to spend in order to buy the _amount of tokens.\r\n      * @return The status of the mint. Note that should the total cost of the\r\n      *         purchase exceed the _maxCollateralSpend the transaction will revert.\r\n      */\r\n    function mint(uint256 _amount, uint256 _maxCollateralSpend)\r\n        external\r\n        returns (bool success);\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to buy.\r\n      * @param  _maxCollateralSpend The max amount of collateral (DAI) the user is\r\n      *         willing to spend in order to buy the _amount of tokens.\r\n      * @param  _to The address to send the tokens to.\r\n      * @return The status of the mint. Note that should the total cost of the\r\n      *         purchase exceed the _maxCollateralSpend the transaction will revert.\r\n      */\r\n    function mintTo(\r\n        uint256 _amount, \r\n        uint256 _maxCollateralSpend, \r\n        address _to\r\n    )\r\n        external\r\n        returns (bool success);\r\n\r\n    /**\r\n      * @param  _amount The amount of tokens (BZZ) the user wants to sell.\r\n      * @param  _minCollateralReward The min amount of collateral (DAI) the user is\r\n      *         willing to receive for their tokens.\r\n      * @return The status of the burn. Note that should the total reward of the\r\n      *         burn be below the _minCollateralReward the transaction will revert.\r\n      */\r\n    function redeem(uint256 _amount, uint256 _minCollateralReward)\r\n        external\r\n        returns (bool success);\r\n\r\n    /**\r\n      * @notice Shuts down the curve, disabling buying, selling and both price\r\n      *         functions. Can only be called by the owner. Will renounce the\r\n      *         minter role on the bonded token.\r\n      */\r\n    function shutDown() external;\r\n}\r\n\r\n// File: https://github.com/ethersphere/bzzaar-contracts/blob/v1.1.0/contracts/I_Token.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n/**\r\n * @title   Interface Token\r\n * @notice  Allows the Curve contract to interact with the token contract\r\n *          without importing the entire smart contract. For documentation\r\n *          please see the token contract:\r\n *          https://gitlab.com/linumlabs/swarm-token\r\n * @dev     This is not a full interface of the token, but instead a partial\r\n *          interface covering only the functions that are needed by the curve.\r\n */\r\ninterface I_Token {\r\n    // -------------------------------------------------------------------------\r\n    // IERC20 functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // ERC20 functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // ERC20 Detailed\r\n    // -------------------------------------------------------------------------\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Burnable functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Mintable functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function isMinter(address account) external view returns (bool);\r\n\r\n    function addMinter(address account) external;\r\n\r\n    function renounceMinter() external;\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Capped functions\r\n    // -------------------------------------------------------------------------\r\n\r\n    function cap() external view returns (uint256);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: NewListing.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RateCalc {\r\n    using SafeMath for uint256;\r\n\r\n    function buyRewardRange(address curveAddress, uint256 collateralAmount)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return _calcPriceRange(curveAddress, collateralAmount, true);\r\n    }\r\n\r\n    function sellPriceRange(address curveAddress, uint256 collateralAmount)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return _calcPriceRange(curveAddress, collateralAmount, false);\r\n    }\r\n\r\n    function _calcPriceRange(address curveAddress, uint256 y, bool isBuy)\r\n        private\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        I_Curve curve = I_Curve(curveAddress);\r\n        I_Token token = I_Token(curve.bondedToken());\r\n\r\n        uint256 x1 = 0;\r\n        uint256 x2 = (isBuy) ? token.cap() : token.totalSupply();\r\n        uint256 n = _logTwo(x2 - x1); // n = log2(1250000000000000000000000) = 80.04 iterations\r\n\r\n        for (uint256 i = 0; i < n; i++) {\r\n            uint256 xm = x1.add(x2).div(2);\r\n            uint256 ym = (isBuy) ? curve.buyPrice(xm) : curve.sellReward(xm);\r\n\r\n            if (ym > y) {\r\n                x2 = xm;\r\n            } else if (ym < y) {\r\n                x1 = xm;\r\n            } else if (ym == y) {\r\n                return (xm, xm);\r\n            }\r\n        }\r\n\r\n        return (x1, x2);\r\n    }\r\n\r\n    // https://ethereum.stackexchange.com/a/30168\r\n    function _logTwo(uint x) private pure returns (uint y) {\r\n        assembly {\r\n            let arg := x\r\n            x := sub(x,1)\r\n            x := or(x, div(x, 0x02))\r\n            x := or(x, div(x, 0x04))\r\n            x := or(x, div(x, 0x10))\r\n            x := or(x, div(x, 0x100))\r\n            x := or(x, div(x, 0x10000))\r\n            x := or(x, div(x, 0x100000000))\r\n            x := or(x, div(x, 0x10000000000000000))\r\n            x := or(x, div(x, 0x100000000000000000000000000000000))\r\n            x := add(x, 1)\r\n            let m := mload(0x40)\r\n            mstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\r\n            mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\r\n            mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\r\n            mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\r\n            mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\r\n            mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\r\n            mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\r\n            mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\r\n            mstore(0x40, add(m, 0x100))\r\n            let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\r\n            let shift := 0x100000000000000000000000000000000000000000000000000000000000000\r\n            let a := div(mul(x, magic), shift)\r\n            y := div(mload(add(m,sub(255,a))), shift)\r\n            y := add(y, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\r\n        }  \r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"curveAddress\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"sellPriceRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"curveAddress\",\"type\":\"address\"},{\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"buyRewardRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RateCalc", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "2500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://7856a34701bb335f3b0c797c75fa97789dacde7dcd7b80b1ab120eb2eb6052d3"}]}