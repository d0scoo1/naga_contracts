{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport \\\"./interfaces/IProxyFactory.sol\\\";\\r\\nimport \\\"./interfaces/IRewards.sol\\\";\\r\\n\\r\\ncontract PoolRegistry {\\r\\n\\r\\n    address public constant owner = address(0x59CFCD384746ec3035299D90782Be065e466800B);\\r\\n    address public constant proxyFactory = address(0x66807B5598A848602734B82E432dD88DBE13fC8f);\\r\\n\\r\\n    address public operator;\\r\\n    address public rewardImplementation;\\r\\n    bool public rewardsStartActive;\\r\\n    PoolInfo[] public poolInfo;\\r\\n    mapping(uint256 => mapping(address => address)) public vaultMap; //pool -> user -> vault\\r\\n    mapping(uint256 => address[]) public poolVaultList; //pool -> vault array\\r\\n    \\r\\n    struct PoolInfo {\\r\\n        address implementation;\\r\\n        address stakingAddress;\\r\\n        address stakingToken;\\r\\n        address rewardsAddress;\\r\\n        uint8 active;\\r\\n    }\\r\\n\\r\\n    event PoolCreated(uint256 indexed poolid, address indexed implementation, address stakingAddress, address stakingToken);\\r\\n    event PoolDeactivated(uint256 indexed poolid);\\r\\n    event AddUserVault(address indexed user, uint256 indexed poolid);\\r\\n    event OperatorChanged(address indexed account);\\r\\n    event RewardImplementationChanged(address indexed implementation);\\r\\n    event RewardActiveOnCreationChanged(bool value);\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"!auth\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(operator == msg.sender, \\\"!op auth\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //set operator/manager\\r\\n    function setOperator(address _op) external onlyOwner{\\r\\n        operator = _op;\\r\\n        emit OperatorChanged(_op);\\r\\n    }\\r\\n\\r\\n    //set extra reward implementation contract for future pools\\r\\n    function setRewardImplementation(address _imp) external onlyOperator{\\r\\n        rewardImplementation = _imp;\\r\\n        emit RewardImplementationChanged(_imp);\\r\\n    }\\r\\n\\r\\n    //set rewards to be active when pool is created\\r\\n    function setRewardActiveOnCreation(bool _active) external onlyOperator{\\r\\n        rewardsStartActive = _active;\\r\\n        emit RewardActiveOnCreationChanged(_active);\\r\\n    }\\r\\n\\r\\n    //get number of pools\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    //get number of vaults made for a specific pool\\r\\n    function poolVaultLength(uint256 _pid) external view returns (uint256) {\\r\\n        return poolVaultList[_pid].length;\\r\\n    }\\r\\n\\r\\n    //add a new pool and implementation\\r\\n    function addPool(address _implementation, address _stakingAddress, address _stakingToken) external onlyOperator{\\r\\n        require(_implementation != address(0), \\\"!imp\\\");\\r\\n        require(_stakingAddress != address(0), \\\"!stkAdd\\\");\\r\\n        require(_stakingToken != address(0), \\\"!stkTok\\\");\\r\\n\\r\\n        address rewards;\\r\\n        if(rewardImplementation != address(0)){\\r\\n           rewards = IProxyFactory(proxyFactory).clone(rewardImplementation);\\r\\n           IRewards(rewards).initialize(poolInfo.length, rewardsStartActive);\\r\\n        }\\r\\n\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                implementation: _implementation,\\r\\n                stakingAddress: _stakingAddress,\\r\\n                stakingToken: _stakingToken,\\r\\n                rewardsAddress: rewards,\\r\\n                active: 1\\r\\n            })\\r\\n        );\\r\\n        emit PoolCreated(poolInfo.length-1, _implementation, _stakingAddress, _stakingToken);\\r\\n    }\\r\\n\\r\\n    //replace rewards contract on a specific pool.\\r\\n    //each user must call changeRewards on vault to update to new contract\\r\\n    function createNewPoolRewards(uint256 _pid) external onlyOperator{\\r\\n        require(rewardImplementation != address(0), \\\"!imp\\\");\\r\\n\\r\\n        //spawn new clone\\r\\n        address rewards = IProxyFactory(proxyFactory).clone(rewardImplementation);\\r\\n        IRewards(rewards).initialize(_pid, rewardsStartActive);\\r\\n\\r\\n        //change address\\r\\n        poolInfo[_pid].rewardsAddress = rewards;\\r\\n    }\\r\\n    //deactivates pool so that new vaults can not be made.\\r\\n    //can not force shutdown/withdraw user funds\\r\\n    function deactivatePool(uint256 _pid) external onlyOperator{\\r\\n        poolInfo[_pid].active = 0;\\r\\n        emit PoolDeactivated(_pid);\\r\\n    }\\r\\n\\r\\n    //clone a new user vault\\r\\n    function addUserVault(uint256 _pid, address _user) external onlyOperator returns(address vault, address stakingAddress, address stakingToken, address rewards){\\r\\n        require(vaultMap[_pid][_user] == address(0), \\\"already exists\\\");\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(pool.active > 0, \\\"!active\\\");\\r\\n\\r\\n        //create\\r\\n        vault = IProxyFactory(proxyFactory).clone(pool.implementation);\\r\\n        //add to user map\\r\\n        vaultMap[_pid][_user] = vault;\\r\\n        //add to pool vault list\\r\\n        poolVaultList[_pid].push(vault);\\r\\n\\r\\n        //return values\\r\\n        stakingAddress = pool.stakingAddress;\\r\\n        stakingToken = pool.stakingToken;\\r\\n        rewards = pool.rewardsAddress;\\r\\n\\r\\n        emit AddUserVault(_user, _pid);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IRewards{\\r\\n    struct EarnedData {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    \\r\\n    function initialize(uint256 _pid, bool _startActive) external;\\r\\n    function addReward(address _rewardsToken, address _distributor) external;\\r\\n    function approveRewardDistributor(\\r\\n        address _rewardsToken,\\r\\n        address _distributor,\\r\\n        bool _approved\\r\\n    ) external;\\r\\n    function deposit(address _owner, uint256 _amount) external;\\r\\n    function withdraw(address _owner, uint256 _amount) external;\\r\\n    function getReward(address _forward) external;\\r\\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward) external;\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function claimableRewards(address _account) external view returns(EarnedData[] memory userRewards);\\r\\n    function rewardTokens(uint256 _rid) external view returns (address);\\r\\n    function rewardTokenLength() external view returns(uint256);\\r\\n    function active() external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IProxyFactory {\\r\\n    function clone(address _target) external returns(address);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"}],\"name\":\"AddUserVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"}],\"name\":\"PoolDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"RewardActiveOnCreationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"RewardImplementationChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addUserVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"createNewPoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"deactivatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"active\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolVaultLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVaultList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsStartActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_op\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setRewardActiveOnCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_imp\",\"type\":\"address\"}],\"name\":\"setRewardImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolRegistry", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}