{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GoopMetadataProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport {IGOOPsDescriptor} from './IGOOPsDescriptor.sol';\\r\\nimport {IGOOPsSeeder} from './IGOOPsSeeder.sol';\\r\\nimport {IGorfDecorator} from './IGorfDecorator.sol';\\r\\nimport {Base64} from 'base64-sol/base64.sol';\\r\\nimport {Strings} from './Strings.sol';\\r\\n\\r\\ncontract GoopMetadataProxy is IGOOPsDescriptor {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    address public descriptorAddress = 0x0Cfdb3Ba1694c2bb2CFACB0339ad7b1Ae5932B63;\\r\\n    IGOOPsDescriptor nounsDescriptor = IGOOPsDescriptor(descriptorAddress);\\r\\n\\r\\n    address public decoratorAddress = 0xb65783f1B45468A8f932511527A7e3FeBAE4e86d;\\r\\n    IGorfDecorator gorfDecorator = IGorfDecorator(decoratorAddress);\\r\\n\\r\\n    function genericDataURI(string memory name, string memory description, IGOOPsSeeder.Seed memory seed) public view override returns (string memory) {\\r\\n        string memory attributes = generateAttributesList(seed);\\r\\n        string memory image = nounsDescriptor.generateSVGImage(seed);\\r\\n\\r\\n        return string(\\r\\n            abi.encodePacked(\\r\\n                'data:application/json;base64,',\\r\\n                Base64.encode(\\r\\n                    bytes(\\r\\n                        abi.encodePacked('{\\\"name\\\": \\\"', name, '\\\", \\\"description\\\": \\\"', description, '\\\", \\\"attributes\\\": [', attributes, '], \\\"image\\\": \\\"', 'data:image/svg+xml;base64,', image, '\\\"}')\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function generateAttributesList(IGOOPsSeeder.Seed memory seed) public view returns (string memory) {\\r\\n        return string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"trait_type\\\":\\\"Background\\\",\\\"value\\\":\\\"', gorfDecorator.backgroundMapping(seed.background), '\\\"},',\\r\\n                '{\\\"trait_type\\\":\\\"Body\\\",\\\"value\\\":\\\"', gorfDecorator.bodyMapping(seed.body), '\\\"},',\\r\\n                '{\\\"trait_type\\\":\\\"Accessory\\\",\\\"value\\\":\\\"', gorfDecorator.accessoryMapping(seed.accessory), '\\\"},',\\r\\n                '{\\\"trait_type\\\":\\\"Head\\\",\\\"value\\\":\\\"', gorfDecorator.headMapping(seed.head), '\\\"},',\\r\\n                '{\\\"trait_type\\\":\\\"Glasses\\\",\\\"value\\\":\\\"', gorfDecorator.glassesMapping(seed.glasses), '\\\"}'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function arePartsLocked() external override returns (bool) {return nounsDescriptor.arePartsLocked();}\\r\\n\\r\\n    function isDataURIEnabled() external override returns (bool) {return nounsDescriptor.isDataURIEnabled();}\\r\\n\\r\\n    function baseURI() external override returns (string memory) {return nounsDescriptor.baseURI();}\\r\\n\\r\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external override view returns (string memory) {return nounsDescriptor.palettes(paletteIndex, colorIndex);}\\r\\n\\r\\n    function backgrounds(uint256 index) external override view returns (string memory) {return nounsDescriptor.backgrounds(index);}\\r\\n\\r\\n    function bodies(uint256 index) external override view returns (bytes memory) {return nounsDescriptor.bodies(index);}\\r\\n\\r\\n    function accessories(uint256 index) external override view returns (bytes memory) {return nounsDescriptor.accessories(index);}\\r\\n\\r\\n    function heads(uint256 index) external override view returns (bytes memory) {return nounsDescriptor.heads(index);}\\r\\n\\r\\n    function glasses(uint256 index) external override view returns (bytes memory) {return nounsDescriptor.glasses(index);}\\r\\n\\r\\n    function backgroundCount() external override view returns (uint256) {return nounsDescriptor.backgroundCount();}\\r\\n\\r\\n    function bodyCount() external override view returns (uint256) {return nounsDescriptor.bodyCount();}\\r\\n\\r\\n    function accessoryCount() external override view returns (uint256) {return nounsDescriptor.accessoryCount();}\\r\\n\\r\\n    function headCount() external override view returns (uint256) {return nounsDescriptor.headCount();}\\r\\n\\r\\n    function glassesCount() external override view returns (uint256) {return nounsDescriptor.glassesCount();}\\r\\n\\r\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external override {}\\r\\n\\r\\n    function addManyBackgrounds(string[] calldata backgrounds) external override {}\\r\\n\\r\\n    function addManyBodies(bytes[] calldata bodies) external override {}\\r\\n\\r\\n    function addManyAccessories(bytes[] calldata accessories) external override {}\\r\\n\\r\\n    function addManyHeads(bytes[] calldata heads) external override {}\\r\\n\\r\\n    function addManyGlasses(bytes[] calldata glasses) external override {}\\r\\n\\r\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external override {}\\r\\n\\r\\n    function addBackground(string calldata background) external override {}\\r\\n\\r\\n    function addBody(bytes calldata body) external override {}\\r\\n\\r\\n    function addAccessory(bytes calldata accessory) external override {}\\r\\n\\r\\n    function addHead(bytes calldata head) external override {}\\r\\n\\r\\n    function addGlasses(bytes calldata glasses) external override {}\\r\\n\\r\\n    function lockParts() external override {}\\r\\n\\r\\n    function toggleDataURIEnabled() external override {}\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) external override {}\\r\\n\\r\\n    function tokenURI(uint256 tokenId, IGOOPsSeeder.Seed memory seed) external override view returns (string memory) {return nounsDescriptor.tokenURI(tokenId, seed);}\\r\\n\\r\\n    function dataURI(uint256 tokenId, IGOOPsSeeder.Seed memory seed) external override view returns (string memory) {return nounsDescriptor.dataURI(tokenId, seed);}\\r\\n\\r\\n    function generateSVGImage(IGOOPsSeeder.Seed memory seed) external override view returns (string memory) {return nounsDescriptor.generateSVGImage(seed);}\\r\\n}\"\r\n    },\r\n    \"contracts/IGOOPsDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport { IGOOPsSeeder } from './IGOOPsSeeder.sol';\\r\\n\\r\\ninterface IGOOPsDescriptor {\\r\\n    event PartsLocked();\\r\\n\\r\\n    event DataURIToggled(bool enabled);\\r\\n\\r\\n    event BaseURIUpdated(string baseURI);\\r\\n\\r\\n    function arePartsLocked() external returns (bool);\\r\\n\\r\\n    function isDataURIEnabled() external returns (bool);\\r\\n\\r\\n    function baseURI() external returns (string memory);\\r\\n\\r\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\r\\n\\r\\n    function backgrounds(uint256 index) external view returns (string memory);\\r\\n\\r\\n    function bodies(uint256 index) external view returns (bytes memory);\\r\\n\\r\\n    function accessories(uint256 index) external view returns (bytes memory);\\r\\n\\r\\n    function heads(uint256 index) external view returns (bytes memory);\\r\\n\\r\\n    function glasses(uint256 index) external view returns (bytes memory);\\r\\n\\r\\n    function backgroundCount() external view returns (uint256);\\r\\n\\r\\n    function bodyCount() external view returns (uint256);\\r\\n\\r\\n    function accessoryCount() external view returns (uint256);\\r\\n\\r\\n    function headCount() external view returns (uint256);\\r\\n\\r\\n    function glassesCount() external view returns (uint256);\\r\\n\\r\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\r\\n\\r\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\r\\n\\r\\n    function addManyBodies(bytes[] calldata bodies) external;\\r\\n\\r\\n    function addManyAccessories(bytes[] calldata accessories) external;\\r\\n\\r\\n    function addManyHeads(bytes[] calldata heads) external;\\r\\n\\r\\n    function addManyGlasses(bytes[] calldata glasses) external;\\r\\n\\r\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\r\\n\\r\\n    function addBackground(string calldata background) external;\\r\\n\\r\\n    function addBody(bytes calldata body) external;\\r\\n\\r\\n    function addAccessory(bytes calldata accessory) external;\\r\\n\\r\\n    function addHead(bytes calldata head) external;\\r\\n\\r\\n    function addGlasses(bytes calldata glasses) external;\\r\\n\\r\\n    function lockParts() external;\\r\\n\\r\\n    function toggleDataURIEnabled() external;\\r\\n\\r\\n    function setBaseURI(string calldata baseURI) external;\\r\\n\\r\\n    function tokenURI(uint256 tokenId, IGOOPsSeeder.Seed memory seed) external view returns (string memory);\\r\\n\\r\\n    function dataURI(uint256 tokenId, IGOOPsSeeder.Seed memory seed) external view returns (string memory);\\r\\n\\r\\n    function genericDataURI(\\r\\n        string calldata name,\\r\\n        string calldata description,\\r\\n        IGOOPsSeeder.Seed memory seed\\r\\n    ) external view returns (string memory);\\r\\n\\r\\n    function generateSVGImage(IGOOPsSeeder.Seed memory seed) external view returns (string memory);\\r\\n}\"\r\n    },\r\n    \"contracts/IGOOPsSeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport { IGOOPsDescriptor } from './IGOOPsDescriptor.sol';\\r\\n\\r\\ninterface IGOOPsSeeder {\\r\\n    struct Seed {\\r\\n        uint48 background;\\r\\n        uint48 body;\\r\\n        uint48 accessory;\\r\\n        uint48 head;\\r\\n        uint48 glasses;\\r\\n    }\\r\\n\\r\\n    function generateSeed(uint256 GOOPId, IGOOPsDescriptor descriptor) external view returns (Seed memory);\\r\\n}\"\r\n    },\r\n    \"contracts/IGorfDecorator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport { IGOOPsSeeder } from './IGOOPsSeeder.sol';\\r\\n\\r\\ninterface IGorfDecorator {\\r\\n    function backgroundMapping(uint256) external view returns (string memory);\\r\\n    function bodyMapping(uint256) external view returns (string memory);\\r\\n    function accessoryMapping(uint256) external view returns (string memory);\\r\\n    function headMapping(uint256) external view returns (string memory);\\r\\n    function glassesMapping(uint256) external view returns (string memory);\\r\\n\\r\\n    function genericDataURI(\\r\\n        string calldata name,\\r\\n        string calldata description,\\r\\n        IGOOPsSeeder.Seed memory seed\\r\\n    ) external view returns (string memory);\\r\\n}\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"DataURIToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PartsLocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"accessories\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessoryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"accessory\",\"type\":\"bytes\"}],\"name\":\"addAccessory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"background\",\"type\":\"string\"}],\"name\":\"addBackground\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"}],\"name\":\"addBody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paletteIndex\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"name\":\"addColorToPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"glasses\",\"type\":\"bytes\"}],\"name\":\"addGlasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"head\",\"type\":\"bytes\"}],\"name\":\"addHead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"accessories\",\"type\":\"bytes[]\"}],\"name\":\"addManyAccessories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"backgrounds\",\"type\":\"string[]\"}],\"name\":\"addManyBackgrounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"bodies\",\"type\":\"bytes[]\"}],\"name\":\"addManyBodies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paletteIndex\",\"type\":\"uint8\"},{\"internalType\":\"string[]\",\"name\":\"newColors\",\"type\":\"string[]\"}],\"name\":\"addManyColorsToPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"glasses\",\"type\":\"bytes[]\"}],\"name\":\"addManyGlasses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"heads\",\"type\":\"bytes[]\"}],\"name\":\"addManyHeads\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arePartsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backgroundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"backgrounds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"bodies\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bodyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct IGOOPsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"dataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decoratorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct IGOOPsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"generateAttributesList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct IGOOPsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"generateSVGImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct IGOOPsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"genericDataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"glasses\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glassesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"headCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"heads\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDataURIEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockParts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paletteIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"colorIndex\",\"type\":\"uint256\"}],\"name\":\"palettes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDataURIEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"body\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"head\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"glasses\",\"type\":\"uint48\"}],\"internalType\":\"struct IGOOPsSeeder.Seed\",\"name\":\"seed\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GoopMetadataProxy", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}