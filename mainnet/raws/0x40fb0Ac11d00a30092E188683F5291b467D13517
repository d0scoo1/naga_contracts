{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StreamDeployer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Stream.sol\\\";\\n\\n/// @title The Stream Deployer Contract for Orgs\\n/// @author nowonder, jaxcoder, qedk, supriyaamisshra\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\ncontract StreamDeployer is Ownable {\\n\\n    /// @dev emitted when a new org is created.\\n    event OrganizationDeployed(\\n        address indexed orgAddress,\\n        address indexed ownerAddress,\\n        string organizationName\\n    );\\n\\n    address[] public organizations;\\n\\n    constructor (address _owner) {\\n        transferOwnership(_owner);\\n    }\\n\\n    /// @dev deploys a stream factory contract for a specified organization.\\n    /// @param _orgName the name of the organization\\n    /// @param _owner the owner address for the org\\n    /// @param _addresses any addresses you want to have a stream on deploy\\n    /// @param _caps the caps for the addresses\\n    /// @param _frequency the frequency for the addresses\\n    /// @param _startsFull the bool for each address to start full or not\\n    /// @param _tokenAddress the stream token address for the org\\n    /// @param _name the stream name for the org\\n    function deployOrganization(\\n        string memory _orgName,\\n        string memory _orgLogoURI,\\n        string memory _orgDescription,\\n        address _owner,\\n        address[] memory _addresses,\\n        uint256[] memory _caps,\\n        uint256[] memory _frequency,\\n        bool[] memory _startsFull,\\n        string[] memory _name,\\n        IERC20 _tokenAddress\\n    ) external {\\n        MultiStream deployedOrganization = new MultiStream(\\n            _orgName,\\n            _orgLogoURI,\\n            _orgDescription,\\n            _owner,\\n            _addresses,\\n            _caps,\\n            _frequency,\\n            _startsFull,\\n            _name,\\n            address(_tokenAddress)\\n        );\\n        \\n        organizations.push(address(deployedOrganization));\\n\\n        emit OrganizationDeployed(\\n            address(deployedOrganization),\\n            _owner,\\n            _orgName\\n        );\\n\\n    }\\n\\n    /// @dev gets a page of organizations\\n    /// @param _page page number\\n    /// @param _resultsPerPage how many to return per page\\n    function getOrganizations(\\n        uint256 _page,\\n        uint256 _resultsPerPage\\n    )\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 _orgIndex = _resultsPerPage * _page - _resultsPerPage;\\n\\n        if (\\n            organizations.length == 0 ||\\n            _orgIndex > organizations.length - 1\\n        ) {\\n            return new address[](0);\\n        }\\n\\n        address[] memory _orgs = new address[](_resultsPerPage);\\n        uint256 _returnCounter = 0;\\n        \\n        for (\\n            _orgIndex;\\n            _orgIndex < _resultsPerPage * _page;\\n            _orgIndex++\\n        ) {\\n            if (_orgIndex <= organizations.length - 1) {\\n                _orgs[_returnCounter] = organizations[_orgIndex];\\n            } else {\\n                _orgs[_returnCounter] = address(0);\\n            }\\n            _returnCounter++;\\n        }\\n        return _orgs;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Stream.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nerror NotYourStream();\\nerror NotEnoughBalance();\\nerror NotEnoughPledged();\\nerror SendMore();\\nerror IncreaseByMore();\\nerror IncreasedByTooMuch();\\nerror CantWithdrawToBurnAddress();\\nerror CantDepositFromBurnAddress();\\nerror StreamDisabled();\\nerror StreamDoesNotExist();\\nerror TransferFailed();\\nerror DepositAmountTooSmall();\\nerror DepositFailed();\\nerror InvalidFrequency();\\nerror InsufficientPrivileges();\\nerror StreamAlreadyExists();\\n\\n/// @title Organization Streams Contract\\n/// @author ghostffcode, jaxcoder, nowonder, qedk, supriyaamisshra\\n/// @notice the meat and potatoes of the stream\\ncontract MultiStream is Ownable, AccessControl, ReentrancyGuard {\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    /// @dev Describe a stream \\n    struct Stream {\\n        /// @dev stream cap\\n        uint256 cap;\\n        /// @dev stream frequency\\n        uint256 frequency;\\n        /// @dev last withdraw\\n        uint256 last;\\n        /// @dev tokens pledged to this stream\\n        uint256 pledged;\\n        ///@dev stream name \\n        string name;\\n    }\\n\\n    /// @dev Describe a stream for view purposes\\n    struct StreamView {\\n        /// @dev owner address\\n        address owner;\\n        /// @dev stream cap\\n        uint256 cap;\\n        /// @dev stream frequency\\n        uint256 frequency;\\n        /// @dev last withdraw\\n        uint256 last;\\n        /// @dev stream balance\\n        uint256 balance;\\n        /// @dev pledged/eligible balance\\n        uint256 pledged;\\n        ///@dev stream name \\n        string name;\\n    }\\n\\n    /// @dev organization info\\n    struct OrgInfo {\\n        /// @dev org name\\n        string name;\\n        /// @dev logo URI\\n        string logoURI;\\n        /// @dev description\\n        string description;\\n        /// @dev track total stream count\\n        uint256 totalStreams;\\n        /// @dev track total payouts for UI\\n        uint256 totalPaid;\\n        /// @dev token\\n        IERC20 dToken;\\n    }\\n\\n    OrgInfo public orgInfo;\\n    uint256 streamCount;\\n    mapping(address => uint256) inverseOwnerIndex;\\n    mapping(uint256 => address) ownerIndex;\\n    mapping(address => Stream) streams;\\n    mapping(address => bool) disabled;\\n\\n    event Withdraw(address indexed to, uint256 amount, string reason);\\n    event Deposit(address indexed stream, address indexed from, uint256 amount, string reason);\\n    /// @dev StreamAdded event to track the streams after creation\\n    event StreamAdded(address creator, address user, string name);\\n\\n    modifier hasCorrectRole() {\\n        if (!hasRole(MANAGER_ROLE, _msgSender())) {\\n            if (!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n                revert InsufficientPrivileges();\\n            }\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        string memory _orgName,\\n        string memory _orgLogoURI,\\n        string memory _orgDescription,\\n        address _owner,\\n        address[] memory _addresses,\\n        uint256[] memory _caps,\\n        uint256[] memory _frequency,\\n        bool[] memory _startsFull,\\n        string[] memory _name,\\n        address _tokenAddress\\n    ) {\\n        /* \\n        @ note Init Org Details\\n        */\\n        orgInfo = OrgInfo(\\n            _orgName,\\n            _orgLogoURI,\\n            _orgDescription,\\n            _addresses.length,\\n            0,\\n            IERC20(_tokenAddress)\\n        );\\n\\n        /* \\n        @ note Init Streams\\n        */\\n        for (uint256 i = 0; i < _addresses.length; ++i) {\\n            ownerIndex[streamCount] = _addresses[i];\\n            inverseOwnerIndex[_addresses[i]] = streamCount;\\n            streamCount += 1;\\n            uint256 last;\\n            if (_startsFull[i] == true) {\\n                last = block.timestamp - _frequency[i];\\n            } else {\\n                last = block.timestamp;\\n            }\\n            Stream memory stream = Stream(_caps[i], _frequency[i], last, 0, _name[i]);\\n            streams[_addresses[i]] = stream;\\n            emit StreamAdded(_msgSender(), _addresses[i], _name[i]);\\n        }\\n\\n        /* \\n        @ note Init Roles\\n        */\\n        transferOwnership(_owner);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n    }\\n\\n    function addManager(address _manager) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        grantRole(MANAGER_ROLE, _manager);\\n    }\\n\\n    function removeManager(address _manager)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        revokeRole(MANAGER_ROLE, _manager);\\n    }\\n\\n    /// @dev add a stream for user\\n    function addStream(\\n        address _beneficiary,\\n        uint256 _cap,\\n        uint256 _frequency,\\n        bool _startsFull,\\n        string calldata _name\\n    ) external hasCorrectRole {\\n        if (streams[_beneficiary].last > 0) {\\n            revert StreamAlreadyExists();\\n        }\\n        ownerIndex[streamCount] = _beneficiary;\\n        inverseOwnerIndex[_beneficiary] = streamCount;\\n        streamCount += 1;\\n        uint256 last;\\n        if (_startsFull == true) {\\n            last = block.timestamp - _frequency;\\n        } else {\\n            last = block.timestamp;\\n        }\\n        Stream memory stream = Stream(_cap, _frequency, last, 0, _name);\\n        streams[_beneficiary] = stream;\\n        orgInfo.totalStreams += 1;\\n        emit StreamAdded(_msgSender(), _beneficiary, _name);\\n    }\\n\\n    /// @dev Transfers remaining balance and disables stream\\n    function disableStream(address _beneficiary) external hasCorrectRole {\\n        uint256 totalAmount = streamBalance(_beneficiary);\\n\\n        uint256 cappedLast = block.timestamp - streams[_beneficiary].frequency;\\n        if (streams[_beneficiary].last < cappedLast) {\\n            streams[_beneficiary].last = cappedLast;\\n        }\\n        streams[_beneficiary].last =\\n            streams[_beneficiary].last +\\n            (((block.timestamp - streams[_beneficiary].last) * totalAmount) /\\n                totalAmount);\\n\\n        if (!orgInfo.dToken.transfer(_beneficiary, totalAmount)) revert TransferFailed();\\n\\n        disabled[_beneficiary] = true;\\n        streams[_beneficiary].cap = 0;\\n        orgInfo.totalStreams -= 1;\\n    }\\n\\n    /// @dev Transfers remaining balance and deletes stream\\n    function deleteStream(address _beneficiary) external hasCorrectRole {\\n        uint256 totalAmount = streamBalance(_beneficiary);\\n\\n        if(!orgInfo.dToken.transfer(msg.sender, totalAmount)) revert TransferFailed();\\n\\n        streamCount -= 1;\\n        // Trigger gas refunds\\n        delete streams[_beneficiary];\\n        delete ownerIndex[inverseOwnerIndex[_beneficiary]];\\n        delete inverseOwnerIndex[_beneficiary];\\n        delete disabled[_beneficiary];\\n    }\\n\\n    /// @dev Reactivates a stream for user\\n    function enableStream(\\n        address _beneficiary,\\n        uint256 _cap,\\n        uint256 _frequency,\\n        bool _startsFull\\n    ) external hasCorrectRole {\\n\\n        streams[_beneficiary].cap = _cap;\\n        streams[_beneficiary].frequency = _frequency;\\n\\n        if (_startsFull == true) {\\n            streams[_beneficiary].last = block.timestamp - _frequency;\\n        } else {\\n            streams[_beneficiary].last = block.timestamp;\\n        }\\n\\n        disabled[_beneficiary] = false;\\n        orgInfo.totalStreams += 1;\\n    }\\n\\n    /// @dev Get the balance of a stream by address\\n    /// @return balance of the stream by address\\n    function streamBalance(address _beneficiary) public view returns (uint256) {\\n\\n        if (block.timestamp - streams[_beneficiary].last > streams[_beneficiary].frequency) {\\n            return streams[_beneficiary].cap;\\n        }\\n        return\\n            (streams[_beneficiary].cap * (block.timestamp - streams[_beneficiary].last)) /\\n            streams[_beneficiary].frequency;\\n    }\\n\\n    /// @dev Withdraw from a stream\\n    /// @param payoutAddress account to withdraw into\\n    /// @param amount amount of withdraw\\n    /// @param reason a reason\\n    function streamWithdraw(address payoutAddress, uint256 amount, string calldata reason)\\n        external\\n    {\\n        if (payoutAddress == address(0)) revert CantWithdrawToBurnAddress();\\n        if (disabled[msg.sender] == true) revert StreamDisabled();\\n\\n        uint256 totalAmountCanWithdraw = streamBalance(msg.sender);\\n        if (totalAmountCanWithdraw < amount) revert NotEnoughBalance();\\n        if (amount > streams[msg.sender].pledged) revert NotEnoughPledged();\\n\\n        uint256 cappedLast = block.timestamp - streams[msg.sender].frequency;\\n        if (streams[msg.sender].last < cappedLast) {\\n            streams[msg.sender].last = cappedLast;\\n        }\\n        streams[msg.sender].last =\\n            streams[msg.sender].last +\\n            (((block.timestamp - streams[msg.sender].last) * amount) /\\n                totalAmountCanWithdraw);\\n\\n        if (!orgInfo.dToken.transfer(payoutAddress, amount)) revert TransferFailed();\\n\\n        orgInfo.totalPaid += amount;\\n        streams[msg.sender].pledged -= amount;\\n        emit Withdraw(payoutAddress, amount, reason);\\n    }\\n\\n    /// @notice Deposits tokens into a specified stream\\n    /// @dev Deposit into stream\\n    /// @param _stream a user stream\\n    /// @param reason reason for deposit\\n    /// @param  value the amount of the deposit\\n    function streamDeposit(address _stream, string memory reason, uint256 value)\\n        external\\n        nonReentrant\\n    {\\n        if (_msgSender() == address(0)) revert CantDepositFromBurnAddress();\\n        if (disabled[_stream] == true) revert StreamDisabled();\\n        if (value < (streams[_stream].cap / 10)) revert DepositAmountTooSmall();\\n        if (!orgInfo.dToken.transferFrom(_msgSender(), address(this), value)) revert DepositFailed();\\n        streams[_stream].pledged += value;\\n        emit Deposit(_stream, _msgSender(), value, reason);\\n    }\\n\\n    /// @dev Increase the cap of the stream\\n    /// @param _increase how much to increase the cap\\n    function increaseCap(uint256 _increase, address beneficiary)\\n        external\\n        hasCorrectRole\\n    {\\n        if (_increase == 0) revert IncreaseByMore();\\n\\n        if ((streams[beneficiary].cap + _increase) >= 1 ether)\\n            revert IncreasedByTooMuch();\\n        streams[beneficiary].cap = streams[beneficiary].cap + _increase;\\n    }\\n\\n    /// @dev Update the frequency of a stream\\n    /// @param _frequency the new frequency\\n    function updateFrequency(uint256 _frequency, address beneficiary)\\n        external\\n        hasCorrectRole\\n    {\\n        if(_frequency < 0) revert InvalidFrequency();\\n        if (_frequency == 0) revert IncreaseByMore();\\n        streams[beneficiary].frequency = _frequency;\\n    }\\n\\n    /// @dev checks whether org has an active stream for user\\n    /// @param _userAddress a users address\\n    function hasStream(address _userAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return streams[_userAddress].frequency != 0 && disabled[_userAddress] != true;\\n    }\\n\\n    /// @dev gets stream details\\n    /// @param _userAddress a users address\\n    function getStreamView(address _userAddress)\\n        public\\n        view\\n        returns (StreamView memory)\\n    {\\n        return StreamView(_userAddress, streams[_userAddress].cap,\\n                    streams[_userAddress].frequency, streams[_userAddress].last,\\n                    streamBalance(_userAddress), streams[_userAddress].pledged, streams[_userAddress].name);\\n    }\\n\\n    /// @dev gets a page of streams\\n    /// @param _page a page number\\n    /// @param _resultsPerPage number of results per page\\n    function getStreams(\\n        uint256 _page,\\n        uint256 _resultsPerPage\\n    )\\n        public\\n        view\\n        returns (StreamView[] memory)\\n    {\\n        uint256 _ownerIndex = _resultsPerPage * _page - _resultsPerPage;\\n\\n        if (\\n            streamCount == 0 ||\\n            _ownerIndex > streamCount - 1\\n        ) {\\n            return new StreamView[](0);\\n        }\\n\\n        StreamView[] memory _streams = new StreamView[](_resultsPerPage);\\n        uint256 _returnCounter = 0;\\n        uint256 _skipped = 0;\\n        address currentOwner = address(0);\\n        \\n        for (\\n            _ownerIndex;\\n            _ownerIndex < ((_resultsPerPage * _page) + _skipped);\\n            _ownerIndex++\\n        ) {\\n            if (_ownerIndex <= streamCount - 1) {\\n                currentOwner = ownerIndex[_ownerIndex];\\n                if (disabled[currentOwner]) {\\n                    _skipped++;\\n                    continue;\\n                }\\n                _streams[_returnCounter] = StreamView(currentOwner, streams[currentOwner].cap,\\n                    streams[currentOwner].frequency, streams[currentOwner].last,\\n                    streamBalance(currentOwner), streams[currentOwner].pledged, streams[currentOwner].name);\\n            } else {\\n                _streams[_returnCounter] = StreamView(address(0), 0,0,0,0,0, \\\"\\\");\\n            }\\n            _returnCounter++;\\n        }\\n        return _streams;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"orgAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"organizationName\",\"type\":\"string\"}],\"name\":\"OrganizationDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgLogoURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgDescription\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_frequency\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_startsFull\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"_name\",\"type\":\"string[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"deployOrganization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resultsPerPage\",\"type\":\"uint256\"}],\"name\":\"getOrganizations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"organizations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StreamDeployer", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a4ca1b15fe81f57cb2d3f686c7b13309906cd37b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}