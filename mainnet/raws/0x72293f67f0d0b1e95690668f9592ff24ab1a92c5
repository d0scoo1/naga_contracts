{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ForgeMaster.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport './IForgeMaster.sol';\\n\\nimport './ForgeMaster/ForgeMasterStorage.sol';\\n\\nimport './INiftyForge721.sol';\\nimport './INiftyForge721Slim.sol';\\n\\n/// @title ForgeMaster\\n/// @author Simon Fremaux (@dievardump)\\n/// @notice This contract allows anyone to create ERC721 contract with role management\\n///         modules, Permits, on-chain Royalties, for pretty cheap.\\n///         Those contract & nfts are all referenced in the same Subgraph that can be used to create\\n///         a small, customizable, Storefront for anyone that wishes to.\\ncontract ForgeMaster is IForgeMaster, OwnableUpgradeable, ForgeMasterStorage {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    // emitted when a registry is created\\n    event RegistryCreated(address indexed registry, string context);\\n\\n    // emitted when a slug is registered for a registry\\n    event RegistrySlug(address indexed registry, string slug);\\n\\n    // emitted when a module is added to the list of official modules\\n    event ModuleAdded(address indexed module);\\n\\n    // emitted when a module is removed from the list of official modules\\n    event ModuleRemoved(address indexed module);\\n\\n    // Force reindexing for a registry\\n    // if tokenIds.length == 0 then a full reindexing will be performed\\n    // this will be done automatically in the \\\"niftyforge metadata\\\" graph\\n    // It might create a *very* long indexing process. Do not use for fun.\\n    // Abuse of reindexing might result in the registry being flagged\\n    // and banned from the public indexer\\n    event ForceIndexing(address registry, uint256[] tokenIds);\\n\\n    // Flags a registry\\n    event FlagRegistry(address registry, address operator, string reason);\\n\\n    // Flags a token\\n    event FlagToken(\\n        address registry,\\n        uint256 tokenId,\\n        address operator,\\n        string reason\\n    );\\n\\n    function initialize(bool locked, address owner_) external initializer {\\n        __Ownable_init();\\n\\n        _locked = locked;\\n\\n        if (owner_ != address(0)) {\\n            transferOwnership(owner_);\\n        }\\n    }\\n\\n    /// @notice Helper to know if the contract is locked\\n    /// @return if the contract is locked for new creations or not\\n    function isLocked() external view returns (bool) {\\n        return _locked;\\n    }\\n\\n    /// @notice Getter for the ERC721 Implementation\\n    function getERC721Implementation() public view returns (address) {\\n        return _erc721Implementation;\\n    }\\n\\n    /// @notice Getter for the ERC1155 Implementation\\n    function getERC1155Implementation() public view returns (address) {\\n        return _erc1155Implementation;\\n    }\\n\\n    /// @notice Getter for the ERC721 OpenSea registry / proxy\\n    function getERC721ProxyRegistry() public view returns (address) {\\n        return _openseaERC721ProxyRegistry;\\n    }\\n\\n    /// @notice Getter for the ERC1155 OpenSea registry / proxy\\n    function getERC1155ProxyRegistry() public view returns (address) {\\n        return _openseaERC1155ProxyRegistry;\\n    }\\n\\n    /// @notice allows to check if a slug can be used\\n    /// @param slug the slug to check\\n    /// @return if the slug is used\\n    function isSlugFree(string memory slug) external view returns (bool) {\\n        bytes32 bSlug = keccak256(bytes(slug));\\n        // verifies that the slug is not already in use\\n        return _slugsToRegistry[bSlug] != address(0);\\n    }\\n\\n    /// @notice returns a registry address from a slug\\n    /// @param slug the slug to get the registry address\\n    /// @return the registry address\\n    function getRegistryBySlug(string memory slug)\\n        external\\n        view\\n        returns (address)\\n    {\\n        bytes32 bSlug = keccak256(bytes(slug));\\n        // verifies that the slug is not already in use\\n        require(_slugsToRegistry[bSlug] != address(0), '!UNKNOWN_SLUG!');\\n        return _slugsToRegistry[bSlug];\\n    }\\n\\n    /// @notice Helper to list all registries\\n    /// @param startAt the index to start at (will come in handy if one day we have too many contracts)\\n    /// @param limit the number of elements we request\\n    /// @return list of registries\\n    function listRegistries(uint256 startAt, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory list)\\n    {\\n        uint256 count = _registries.length();\\n\\n        require(startAt < count, '!OVERFLOW!');\\n\\n        if (startAt + limit > count) {\\n            limit = count - startAt;\\n        }\\n\\n        list = new address[](limit);\\n        for (uint256 i; i < limit; i++) {\\n            list[i] = _registries.at(startAt + i);\\n        }\\n    }\\n\\n    /// @notice Helper to list all modules\\n    /// @return list of modules\\n    function listModules() external view returns (address[] memory list) {\\n        uint256 count = _modules.length();\\n        list = new address[](count);\\n        for (uint256 i; i < count; i++) {\\n            list[i] = _modules.at(i);\\n        }\\n    }\\n\\n    /// @notice helper to know if a token is flagged\\n    /// @param registry the registry\\n    /// @param tokenId the tokenId\\n    function isTokenFlagged(address registry, uint256 tokenId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _flaggedTokens[registry][tokenId];\\n    }\\n\\n    /// @notice Creates a new NiftyForge721\\n    /// @dev the contract created is a minimal proxy to the _erc721Implementation\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param modulesInit array of ModuleInit\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    /// @return newContract the address of the new contract\\n    function createERC721(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        INiftyForge721.ModuleInit[] memory modulesInit,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue,\\n        string memory slug,\\n        string memory context\\n    ) external returns (address newContract) {\\n        require(_erc721Implementation != address(0), '!NO_721_IMPLEMENTATION!');\\n\\n        // verify not locked or not owner\\n        require(_locked == false || msg.sender == owner(), '!LOCKED!');\\n\\n        // create minimal proxy to _erc721Implementation\\n        newContract = ClonesUpgradeable.clone(_erc721Implementation);\\n\\n        // initialize the non upgradeable proxy\\n        INiftyForge721(payable(newContract)).initialize(\\n            name_,\\n            symbol_,\\n            contractURI_,\\n            baseURI_,\\n            owner_ != address(0) ? owner_ : msg.sender,\\n            modulesInit,\\n            contractRoyaltiesRecipient,\\n            contractRoyaltiesValue\\n        );\\n\\n        // add the new contract to the registry\\n        _addRegistry(newContract, context);\\n\\n        if (bytes(slug).length > 0) {\\n            setSlug(slug, newContract);\\n        }\\n    }\\n\\n    /// @notice Creates a new NiftyForge721Slim\\n    /// @dev the contract created is a minimal proxy to the _erc721SlimImplementation\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param minter The address that has the right to mint on the collection (see INiftyForge721Slim)\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    /// @return newContract the address of the new contract\\n    function createERC721Slim(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        address minter,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue,\\n        string memory slug,\\n        string memory context\\n    ) external returns (address newContract) {\\n        require(\\n            _erc721SlimImplementation != address(0),\\n            '!NO_721SLIM_IMPLEMENTATION!'\\n        );\\n\\n        // verify not locked or not owner\\n        require(_locked == false || msg.sender == owner(), '!LOCKED!');\\n\\n        // create minimal proxy to _erc721SlimImplementation\\n        newContract = ClonesUpgradeable.clone(_erc721SlimImplementation);\\n\\n        // initialize the non upgradeable proxy\\n        INiftyForge721Slim(newContract).initialize(\\n            name_,\\n            symbol_,\\n            contractURI_,\\n            baseURI_,\\n            owner_ != address(0) ? owner_ : msg.sender,\\n            minter,\\n            contractRoyaltiesRecipient,\\n            contractRoyaltiesValue\\n        );\\n\\n        // add the new contract to the registry\\n        _addRegistry(newContract, context);\\n\\n        if (bytes(slug).length > 0) {\\n            setSlug(slug, newContract);\\n        }\\n    }\\n\\n    /// @notice Method allowing an editor to ask for reindexing on a regisytry\\n    ///         (for example if baseURI changes)\\n    ///         This will be listen to by the NiftyForgeMetadata graph, and launch;\\n    ///         - either a reindexation of alist of tokenIds (if tokenIds.length != 0)\\n    ///         - a full reindexation if tokenIds.length == 0\\n    ///         This can be very long and block the indexer\\n    ///         so calling this with a list of tokenIds > 10 or for a full reindexation is limited\\n    ///         Abuse on this function can also result in the Registry banned.\\n    ///         Only an Editor on the Registry can request a full reindexing\\n    /// @param registry the registry to reindex\\n    /// @param tokenIds the ids to reindex. If empty, will try to reindex all tokens for this registry\\n    function forceReindexing(address registry, uint256[] memory tokenIds)\\n        external\\n    {\\n        require(_registries.contains(registry), '!UNKNOWN_REGISTRY!');\\n        require(flaggedRegistries[registry] == false, '!FLAGGED_REGISTRY!');\\n\\n        // only an editor can ask for a \\\"big indexing\\\"\\n        if (tokenIds.length == 0 || tokenIds.length > 10) {\\n            uint256 lastKnownIndexing = lastIndexing[registry];\\n            require(\\n                block.timestamp - lastKnownIndexing > 1 days,\\n                '!INDEXING_DELAY!'\\n            );\\n\\n            require(\\n                INiftyForge721(payable(registry)).canEdit(msg.sender),\\n                '!NOT_EDITOR!'\\n            );\\n            lastIndexing[registry] = block.timestamp;\\n        }\\n\\n        emit ForceIndexing(registry, tokenIds);\\n    }\\n\\n    /// @notice Method allowing to flag a registry\\n    /// @param registry the registry to flag\\n    /// @param reason the reason to flag\\n    function flagRegistry(address registry, string memory reason)\\n        external\\n        onlyOwner\\n    {\\n        require(_registries.contains(registry), '!UNKNOWN_REGISTRY!');\\n        require(\\n            flaggedRegistries[registry] == false,\\n            '!REGISTRY_ALREADY_FLAGGED!'\\n        );\\n\\n        flaggedRegistries[registry] = true;\\n\\n        emit FlagRegistry(registry, msg.sender, reason);\\n    }\\n\\n    /// @notice Method allowing this owner, or an editor of the registry, to flag a token\\n    /// @param registry the registry to flag\\n    /// @param tokenId the tokenId\\n    /// @param reason the reason to flag\\n    function flagToken(\\n        address registry,\\n        uint256 tokenId,\\n        string memory reason\\n    ) external {\\n        require(_registries.contains(registry), '!UNKNOWN_REGISTRY!');\\n        require(\\n            flaggedRegistries[registry] == false,\\n            '!REGISTRY_ALREADY_FLAGGED!'\\n        );\\n        require(\\n            _flaggedTokens[registry][tokenId] == false,\\n            '!TOKEN_ALREADY_FLAGGED!'\\n        );\\n\\n        // only this contract owner, or an editor on the registry, can flag a token\\n        // tokens when they are flagged are not shown on the\\n        require(\\n            msg.sender == owner() ||\\n                INiftyForge721(payable(registry)).canEdit(msg.sender),\\n            '!NOT_EDITOR!'\\n        );\\n\\n        _flaggedTokens[registry][tokenId] = true;\\n\\n        emit FlagToken(registry, tokenId, msg.sender, reason);\\n    }\\n\\n    /// @notice Setter for owner to stop the registries creation or not\\n    /// @param locked the new state\\n    function setLocked(bool locked) external onlyOwner {\\n        _locked = locked;\\n    }\\n\\n    /// @notice Setter for the ERC721 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC721Implementation(address implementation) public onlyOwner {\\n        _setERC721Implementation(implementation);\\n    }\\n\\n    /// @notice Setter for the ERC721Slim Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC721SlimImplementation(address implementation)\\n        public\\n        onlyOwner\\n    {\\n        _setERC721SlimImplementation(implementation);\\n    }\\n\\n    /// @notice Setter for the ERC1155 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC1155Implementation(address implementation) public onlyOwner {\\n        _setERC1155Implementation(implementation);\\n    }\\n\\n    /// @notice Setter for the ERC721 OpenSea registry / proxy\\n    /// @param proxy the address of the proxy\\n    function setERC721ProxyRegistry(address proxy) public onlyOwner {\\n        _openseaERC721ProxyRegistry = proxy;\\n    }\\n\\n    /// @notice Setter for the ERC1155 OpenSea registry / proxy\\n    /// @param proxy the address of the proxy\\n    function setERC1155ProxyRegistry(address proxy) public onlyOwner {\\n        _openseaERC1155ProxyRegistry = proxy;\\n    }\\n\\n    /// @notice Helper to add an official module to the list\\n    /// @param module address of the module to add to the list\\n    function addModule(address module) external onlyOwner {\\n        if (_modules.add(module)) {\\n            emit ModuleAdded(module);\\n        }\\n    }\\n\\n    /// @notice Helper to remove an official module from the list\\n    /// @param module address of the module to remove from the list\\n    function removeModule(address module) external onlyOwner {\\n        if (_modules.remove(module)) {\\n            emit ModuleRemoved(module);\\n        }\\n    }\\n\\n    /// @notice Allows to change the slug for a registry\\n    /// @dev only someone with Editor role on registry can call this\\n    /// @param slug the slug for the collection.\\n    ///        be aware that slugs will only work in the frontend if\\n    ///        they are composed of a-zA-Z0-9 and -\\n    ///        with no double dashed (--) allowed.\\n    ///        Any other character will render the slug invalid.\\n    /// @param registry the collection to link the slug with\\n    function setSlug(string memory slug, address registry) public {\\n        bytes32 bSlug = keccak256(bytes(slug));\\n\\n        // verifies that the slug is not already in use\\n        require(_slugsToRegistry[bSlug] == address(0), '!SLUG_IN_USE!');\\n\\n        // verifies that the sender is a collection Editor or Owner\\n        require(\\n            INiftyForge721(payable(registry)).canEdit(msg.sender),\\n            '!NOT_EDITOR!'\\n        );\\n\\n        // if the registry is already linked to a slug, free it\\n        bytes32 currentSlug = _registryToSlug[registry];\\n        if (currentSlug.length > 0) {\\n            delete _slugsToRegistry[currentSlug];\\n        }\\n\\n        // if the new slug is not empty\\n        if (bytes(slug).length > 0) {\\n            _slugsToRegistry[bSlug] = registry;\\n            _registryToSlug[registry] = bSlug;\\n        } else {\\n            // remove registry to slug\\n            delete _registryToSlug[registry];\\n        }\\n\\n        emit RegistrySlug(registry, slug);\\n    }\\n\\n    /// @dev internal setter for the ERC721 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function _setERC721Implementation(address implementation) internal {\\n        _erc721Implementation = implementation;\\n    }\\n\\n    /// @dev internal setter for the ERC721Slim Implementation\\n    /// @param implementation the address to proxy calls to\\n    function _setERC721SlimImplementation(address implementation) internal {\\n        _erc721SlimImplementation = implementation;\\n    }\\n\\n    /// @dev internal setter for the ERC1155 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function _setERC1155Implementation(address implementation) internal {\\n        _erc1155Implementation = implementation;\\n    }\\n\\n    /// @dev internal setter for new registries; emits an event RegistryCreated\\n    /// @param registry the new registry address\\n    function _addRegistry(address registry, string memory context) internal {\\n        _registries.add(registry);\\n        emit RegistryCreated(registry, context);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ForgeMaster/ForgeMasterStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\n\\n/// @title ForgeMasterStorage\\n/// @author Simon Fremaux (@dievardump)\\ncontract ForgeMasterStorage {\\n    // if creation is locked or not\\n    bool internal _locked;\\n\\n    // fee to pay to create a contract\\n    uint256 internal _fee;\\n\\n    // how many creations are still free\\n    uint256 internal _freeCreations;\\n\\n    // current ERC721 implementation\\n    address internal _erc721Implementation;\\n\\n    // current ERC1155 implementation\\n    // although this won't be used at the start\\n    address internal _erc1155Implementation;\\n\\n    // opensea erc721 ProxyRegistry / Proxy contract address\\n    address internal _openseaERC721ProxyRegistry;\\n\\n    // opensea erc1155 ProxyRegistry / Proxy contract address\\n    address internal _openseaERC1155ProxyRegistry;\\n\\n    // list of all registries created\\n    EnumerableSetUpgradeable.AddressSet internal _registries;\\n\\n    // list of all \\\"official\\\" modules\\n    EnumerableSetUpgradeable.AddressSet internal _modules;\\n\\n    // slugs used for registries\\n    mapping(bytes32 => address) internal _slugsToRegistry;\\n    mapping(address => bytes32) internal _registryToSlug;\\n\\n    // this is used for the reindexing requests\\n    mapping(address => uint256) public lastIndexing;\\n\\n    // Flagging might be used if there  are abuses, and we need a way to \\\"flag\\\" elements\\n    // in The Graph\\n\\n    // used to flag a registry\\n    mapping(address => bool) public flaggedRegistries;\\n\\n    // used to flag a token in a registry\\n    mapping(address => mapping(uint256 => bool)) internal _flaggedTokens;\\n\\n    address internal _erc721SlimImplementation;\\n\\n    // gap\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/IForgeMaster.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './INiftyForge721.sol';\\n\\n/// @title IForgeMaster\\n/// @author Simon Fremaux (@dievardump)\\n/// @notice Interface to interact with the current ForgeMaster on a network\\ninterface IForgeMaster {\\n    /// @notice Helper to know if the contract is locked\\n    /// @return if the contract is locked for new creations or not\\n    function isLocked() external view returns (bool);\\n\\n    /// @notice Getter for the ERC721 Implementation\\n    function getERC721Implementation() external view returns (address);\\n\\n    /// @notice Getter for the ERC1155 Implementation\\n    function getERC1155Implementation() external view returns (address);\\n\\n    /// @notice Getter for the ERC721 OpenSea registry / proxy\\n    function getERC721ProxyRegistry() external view returns (address);\\n\\n    /// @notice Getter for the ERC1155 OpenSea registry / proxy\\n    function getERC1155ProxyRegistry() external view returns (address);\\n\\n    /// @notice allows to check if a slug can be used\\n    /// @param slug the slug to check\\n    /// @return if the slug is used\\n    function isSlugFree(string memory slug) external view returns (bool);\\n\\n    /// @notice returns a registry address from a slug\\n    /// @param slug the slug to get the registry address\\n    /// @return the registry address\\n    function getRegistryBySlug(string memory slug)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Helper to list all registries\\n    /// @param startAt the index to start at (will come in handy if one day we have too many contracts)\\n    /// @param limit the number of elements we request\\n    /// @return list of registries\\n    function listRegistries(uint256 startAt, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory list);\\n\\n    /// @notice Helper to list all modules\\n    /// @return list of modules\\n    function listModules() external view returns (address[] memory list);\\n\\n    /// @notice helper to know if a token is flagged\\n    /// @param registry the registry\\n    /// @param tokenId the tokenId\\n    function isTokenFlagged(address registry, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Creates a new NiftyForge721\\n    /// @dev the contract created is a minimal proxy to the _erc721Implementation\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param modulesInit array of ModuleInit\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    /// @return newContract the address of the new contract\\n    function createERC721(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        INiftyForge721.ModuleInit[] memory modulesInit,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue,\\n        string memory slug,\\n        string memory context\\n    ) external returns (address newContract);\\n\\n    /// @notice Creates a new NiftyForge721Slim\\n    /// @dev the contract created is a minimal proxy to the _erc721SlimImplementation\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ The contract base URI (where to find the NFTs) - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param minter Address that  will be minting on the registry; Usually a module.\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    /// @return newContract the address of the new contract\\n    function createERC721Slim(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        address minter,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue,\\n        string memory slug,\\n        string memory context\\n    ) external returns (address newContract);\\n\\n    /// @notice Method allowing an editor to ask for reindexing on a regisytry\\n    ///         (for example if baseURI changes)\\n    ///         This will be listen to by the NiftyForgeMetadata graph, and launch;\\n    ///         - either a reindexation of alist of tokenIds (if tokenIds.length != 0)\\n    ///         - a full reindexation if tokenIds.length == 0\\n    ///         This can be very long and block the indexer\\n    ///         so calling this with a list of tokenIds > 10 or for a full reindexation is limited\\n    ///         Abuse on this function can also result in the Registry banned.\\n    ///         Only an Editor on the Registry can request a full reindexing\\n    /// @param registry the registry to reindex\\n    /// @param tokenIds the ids to reindex. If empty, will try to reindex all tokens for this registry\\n    function forceReindexing(address registry, uint256[] memory tokenIds)\\n        external;\\n\\n    /// @notice Method allowing to flag a registry\\n    /// @param registry the registry to flag\\n    /// @param reason the reason to flag\\n    function flagRegistry(address registry, string memory reason) external;\\n\\n    /// @notice Method allowing this owner, or an editor of the registry, to flag a token\\n    /// @param registry the registry to flag\\n    /// @param tokenId the tokenId\\n    /// @param reason the reason to flag\\n    function flagToken(\\n        address registry,\\n        uint256 tokenId,\\n        string memory reason\\n    ) external;\\n\\n    /// @notice Setter for owner to stop the registries creation or not\\n    /// @param locked the new state\\n    function setLocked(bool locked) external;\\n\\n    /// @notice Setter for the ERC721 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC721Implementation(address implementation) external;\\n\\n    /// @notice Setter for the ERC1155 Implementation\\n    /// @param implementation the address to proxy calls to\\n    function setERC1155Implementation(address implementation) external;\\n\\n    /// @notice Setter for the ERC721 OpenSea registry / proxy\\n    /// @param proxy the address of the proxy\\n    function setERC721ProxyRegistry(address proxy) external;\\n\\n    /// @notice Setter for the ERC1155 OpenSea registry / proxy\\n    /// @param proxy the address of the proxy\\n    function setERC1155ProxyRegistry(address proxy) external;\\n\\n    /// @notice Helper to add an official module to the list\\n    /// @param module address of the module to add to the list\\n    function addModule(address module) external;\\n\\n    /// @notice Helper to remove an official module from the list\\n    /// @param module address of the module to remove from the list\\n    function removeModule(address module) external;\\n\\n    /// @notice Allows to change the slug for a registry\\n    /// @dev only someone with Editor role on registry can call this\\n    /// @param slug the slug for the collection.\\n    ///        be aware that slugs will only work in the frontend if\\n    ///        they are composed of a-zA-Z0-9 and -\\n    ///        with no double dashed (--) allowed.\\n    ///        Any other character will render the slug invalid.\\n    /// @param registry the collection to link the slug with\\n    function setSlug(string memory slug, address registry) external;\\n}\\n\"\r\n    },\r\n    \"contracts/INiftyForge721.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './NFT/IERC721Full.sol';\\n\\n/// @title INiftyForge721\\n/// @author Simon Fremaux (@dievardump)\\n/// @notice Interface to interact with a NiftyFroge721 on a network\\ninterface INiftyForge721 is IERC721Full {\\n    struct ModuleInit {\\n        address module;\\n        bool enabled;\\n        bool minter;\\n    }\\n\\n    /// @notice this is the constructor of the contract, called at the time of creation\\n    ///         Although it uses what are called upgradeable contracts, this is only to\\n    ///         be able to make deployment cheap using a Proxy but NiftyForge contracts\\n    ///         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ the contract baseURI (if there is)  - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param modulesInit_ modules to add / enable directly at creation\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        ModuleInit[] memory modulesInit_,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue\\n    ) external;\\n\\n    /// @notice getter for the version of the implementation\\n    /// @return the current implementation version following the scheme 0x[erc][type][version]\\n    /// erc: 00 => ERC721 | 01 => ERC1155\\n    /// type: 00 => full | 01 => slim\\n    /// version: 00, 01, 02, 03...\\n    function version() external view returns (bytes3);\\n\\n    /// @notice totalSupply access\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice helper to know if everyone can mint or only minters\\n    function isMintingOpenToAll() external view returns (bool);\\n\\n    /// @notice Toggle minting open to all state\\n    /// @param isOpen if the new state is open or not\\n    function setMintingOpenToAll(bool isOpen) external;\\n\\n    /// @notice Allows to set a maximum number of mint possible\\n    function setMaxSupply(uint256 maxSupply_) external;\\n\\n    /// @notice Mint next token to `to`\\n    /// @param to address of recipient\\n    /// @return tokenId the tokenId\\n    function mint(address to) external returns (uint256 tokenId);\\n\\n    /// @notice Mint next token to `to` and then transfers to `transferTo`\\n    /// @param to address of first recipient\\n    /// @param transferTo address to transfer token to\\n    /// @return tokenId the tokenId\\n    function mint(address to, address transferTo)\\n        external\\n        returns (uint256 tokenId);\\n\\n    /// @notice Mint token to `to` with `uri`\\n    /// @param to address of recipient\\n    /// @param uri token metadata uri\\n    /// @param feeRecipient the recipient of royalties\\n    /// @param feeAmount the royalties amount. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @param transferTo the address to transfer the NFT to after mint\\n    ///        this is used when we want to mint the NFT to the creator address\\n    ///        before transferring it to a recipient\\n    /// @return tokenId the tokenId\\n    function mint(\\n        address to,\\n        string memory uri,\\n        address feeRecipient,\\n        uint256 feeAmount,\\n        address transferTo\\n    ) external returns (uint256 tokenId);\\n\\n    /// @notice Mint batch tokens to `to[i]` with `uri[i]`\\n    /// @param to array of address of recipients\\n    /// @param uris array of token metadata uris\\n    /// @param feeRecipients the recipients of royalties for each id\\n    /// @param feeAmounts the royalties amounts for each id. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @return startId the first id\\n    /// @return endId the last id\\n    function mintBatch(\\n        address[] memory to,\\n        string[] memory uris,\\n        address[] memory feeRecipients,\\n        uint256[] memory feeAmounts\\n    ) external returns (uint256 startId, uint256 endId);\\n\\n    /// @notice Mint `tokenId` to to` with `uri`\\n    ///         Because not all tokenIds have incremental ids\\n    ///         be careful with this function, it does not increment lastTokenId\\n    ///         and expects the minter to actually know what it is doing.\\n    ///         this also means, this function does not verify _maxTokenId\\n    /// @param to address of recipient\\n    /// @param uri token metadata uri\\n    /// @param tokenId token id wanted\\n    /// @param feeRecipient the recipient of royalties\\n    /// @param feeAmount the royalties amount. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @param transferTo the address to transfer the NFT to after mint\\n    ///        this is used when we want to mint the NFT to the creator address\\n    ///        before transferring it to a recipient\\n    /// @return tokenId the tokenId\\n    function mint(\\n        address to,\\n        string memory uri,\\n        uint256 tokenId_,\\n        address feeRecipient,\\n        uint256 feeAmount,\\n        address transferTo\\n    ) external returns (uint256 tokenId);\\n\\n    /// @notice Mint batch tokens to `to[i]` with `uris[i]`\\n    ///         Because not all tokenIds have incremental ids\\n    ///         be careful with this function, it does not increment lastTokenId\\n    ///         and expects the minter to actually know what it's doing.\\n    ///         this also means, this function does not verify _maxTokenId\\n    /// @param to array of address of recipients\\n    /// @param uris array of token metadata uris\\n    /// @param tokenIds array of token ids wanted\\n    /// @param feeRecipients the recipients of royalties for each id\\n    /// @param feeAmounts the royalties amounts for each id. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    function mintBatch(\\n        address[] memory to,\\n        string[] memory uris,\\n        uint256[] memory tokenIds,\\n        address[] memory feeRecipients,\\n        uint256[] memory feeAmounts\\n    ) external;\\n\\n    /// @notice Attach a module\\n    /// @param module a module to attach\\n    /// @param enabled if the module is enabled by default\\n    /// @param canModuleMint if the module has to be given the minter role\\n    function attachModule(\\n        address module,\\n        bool enabled,\\n        bool canModuleMint\\n    ) external;\\n\\n    /// @dev Allows owner to enable a module\\n    /// @param module to enable\\n    /// @param canModuleMint if the module has to be given the minter role\\n    function enableModule(address module, bool canModuleMint) external;\\n\\n    /// @dev Allows owner to disable a module\\n    /// @param module to disable\\n    function disableModule(address module, bool keepListeners) external;\\n\\n    /// @notice allows to force the collection to start ids at 0\\n    function startAtZero() external;\\n\\n    /// @notice function that returns a string that can be used to render the current token\\n    /// @param tokenId tokenId\\n    /// @return the URI to render token\\n    function renderTokenURI(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/INiftyForge721Slim.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './NFT/IERC721Slim.sol';\\n\\n/// @title INiftyForge721Slim\\n/// @author Simon Fremaux (@dievardump)\\ninterface INiftyForge721Slim is IERC721Slim {\\n    /// @notice this is the constructor of the contract, called at the time of creation\\n    ///         Although it uses what are called upgradeable contracts, this is only to\\n    ///         be able to make deployment cheap using a Proxy but NiftyForge contracts\\n    ///         ARE NOT UPGRADEABLE => the proxy used is not an upgradeable proxy, the implementation is immutable\\n    /// @param name_ name of the contract (see ERC721)\\n    /// @param symbol_ symbol of the contract (see ERC721)\\n    /// @param contractURI_ The contract URI (containing its metadata) - can be empty \\\"\\\"\\n    /// @param baseURI_ the contract baseURI (if there is)  - can be empty \\\"\\\"\\n    /// @param owner_ Address to whom transfer ownership\\n    /// @param minter_ The address that has the right to mint on this contract\\n    /// @param contractRoyaltiesRecipient the recipient, if the contract has \\\"contract wide royalties\\\"\\n    /// @param contractRoyaltiesValue the value, modules to add / enable directly at creation\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address owner_,\\n        address minter_,\\n        address contractRoyaltiesRecipient,\\n        uint256 contractRoyaltiesValue\\n    ) external;\\n\\n    /// @notice getter for the version of the implementation\\n    /// @return the current implementation version following the scheme 0x[erc][type][version]\\n    /// erc: 00 => ERC721 | 01 => ERC1155\\n    /// type: 00 => full | 01 => slim\\n    /// version: 00, 01, 02, 03...\\n    function version() external view returns (bytes3);\\n\\n    /// @notice the module/address that can mint on this contract (if address(0) then owner())\\n    function minter() external view returns (address);\\n\\n    /// @notice how many tokens exists\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice how many tokens have been minted\\n    function minted() external view returns (uint256);\\n\\n    /// @notice maximum tokens that can be created on this contract\\n    function maxSupply() external view returns (uint256);\\n\\n    /// @notice Mint one token to `to`\\n    /// @param to the recipient\\n    /// @return tokenId the tokenId minted\\n    function mint(address to) external returns (uint256 tokenId);\\n\\n    /// @notice Mint one token to `to` and transfers to `transferTo`\\n    /// @param to the first recipient\\n    /// @param transferTo the end recipient\\n    /// @return tokenId the tokenId minted\\n    function mint(address to, address transferTo)\\n        external\\n        returns (uint256 tokenId);\\n\\n    /// @notice Mint `count` tokens to `to`\\n    /// @param to array of address of recipients\\n    /// @return startId and endId\\n    function mintBatch(address to, uint256 count)\\n        external\\n        returns (uint256 startId, uint256 endId);\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/ERC721/IERC721WithMutableURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @dev This is the interface for NFT extension mutableURI\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721WithMutableURI {\\n    function mutableURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/ERC721/IERC721WithRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '../Royalties/ERC2981/IERC2981Royalties.sol';\\nimport '../Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol';\\nimport '../Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol';\\n\\n/// @dev This is a contract used for royalties on various platforms\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721WithRoyalties is\\n    IERC2981Royalties,\\n    IRaribleSecondarySales,\\n    IFoundationSecondarySales\\n{\\n\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/IERC721Full.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\n\\nimport './ERC721/IERC721WithRoyalties.sol';\\nimport './ERC721/IERC721WithMutableURI.sol';\\n\\n/// @title ERC721Full\\n/// @dev This contains all the different overrides needed on\\n///      ERC721 / URIStorage / Royalties\\n///      This contract does not use ERC721enumerable because Enumerable adds quite some\\n///      gas to minting costs and I am trying to make this cheap for creators.\\n///      Also, since all NiftyForge contracts will be fully indexed in TheGraph it will easily\\n///      Be possible to get tokenIds of an owner off-chain, before passing them to a contract\\n///      which can verify ownership at the processing time\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721Full is\\n    IERC721Upgradeable,\\n    IERC721WithRoyalties,\\n    IERC721WithMutableURI\\n{\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    /// @notice This is a generic function that allows this contract's owner to withdraw\\n    ///         any balance / ERC20 / ERC721 / ERC1155 it can have\\n    ///         this contract has no payable nor receive function so it should not get any nativ token\\n    ///         but this could save some ERC20, 721 or 1155\\n    /// @param token the token to withdraw from. address(0) means native chain token\\n    /// @param amount the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721\\n    /// @param tokenId the tokenId to withdraw for ERC1155 and ERC721\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Helper to know if an address can do the action an Editor can\\n    /// @param account the address to check\\n    function canEdit(address account) external view returns (bool);\\n\\n    /// @notice Helper to know if an address can do the action a Minter can\\n    /// @param account the address to check\\n    function canMint(address account) external view returns (bool);\\n\\n    /// @notice Helper to know if an address is editor\\n    /// @param account the address to check\\n    function isEditor(address account) external view returns (bool);\\n\\n    /// @notice Helper to know if an address is minter\\n    /// @param account the address to check\\n    function isMinter(address account) external view returns (bool);\\n\\n    /// @notice Allows to get approved using a permit and transfer in the same call\\n    /// @dev this supposes that the permit is for msg.sender\\n    /// @param from current owner\\n    /// @param to recipient\\n    /// @param tokenId the token id\\n    /// @param _data optional data to add\\n    /// @param deadline the deadline for the permit to be used\\n    /// @param signature of permit\\n    function safeTransferFromWithPermit(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n\\n    /// @notice Set the base token URI\\n    /// @dev only an editor can do that (account or module)\\n    /// @param baseURI_ the new base token uri used in tokenURI()\\n    function setBaseURI(string memory baseURI_) external;\\n\\n    /// @notice Set the base mutable meta URI for tokens\\n    /// @param baseMutableURI_ the new base for mutable meta uri used in mutableURI()\\n    function setBaseMutableURI(string memory baseMutableURI_) external;\\n\\n    /// @notice Set the mutable URI for a token\\n    /// @dev    Mutable URI work like tokenURI\\n    ///         -> if there is a baseMutableURI and a mutableURI, concat baseMutableURI + mutableURI\\n    ///         -> else if there is only mutableURI, return mutableURI\\n    //.         -> else if there is only baseMutableURI, concat baseMutableURI + tokenId\\n    /// @dev only an editor (account or module) can call this\\n    /// @param tokenId the token to set the mutable URI for\\n    /// @param mutableURI_ the mutable URI\\n    function setMutableURI(uint256 tokenId, string memory mutableURI_) external;\\n\\n    /// @notice Helper for the owner to add new editors\\n    /// @dev needs to be owner\\n    /// @param users list of new editors\\n    function addEditors(address[] memory users) external;\\n\\n    /// @notice Helper for the owner to remove editors\\n    /// @dev needs to be owner\\n    /// @param users list of removed editors\\n    function removeEditors(address[] memory users) external;\\n\\n    /// @notice Helper for an editor to add new minter\\n    /// @dev needs to be owner\\n    /// @param users list of new minters\\n    function addMinters(address[] memory users) external;\\n\\n    /// @notice Helper for an editor to remove minters\\n    /// @dev needs to be owner\\n    /// @param users list of removed minters\\n    function removeMinters(address[] memory users) external;\\n\\n    /// @notice Allows to change the default royalties recipient\\n    /// @dev an editor can call this\\n    /// @param recipient new default royalties recipient\\n    function setDefaultRoyaltiesRecipient(address recipient) external;\\n\\n    /// @notice Allows a royalty recipient of a token to change their recipient address\\n    /// @dev only the current token royalty recipient can change the address\\n    /// @param tokenId the token to change the recipient for\\n    /// @param recipient new default royalties recipient\\n    function setTokenRoyaltiesRecipient(uint256 tokenId, address recipient)\\n        external;\\n\\n    /// @notice Helper for the owner of the contract to set the new contract URI\\n    /// @dev needs to be owner\\n    /// @param contractURI_ new contract URI\\n    function setContractURI(string memory contractURI_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/IERC721Slim.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport './ERC721/IERC721WithRoyalties.sol';\\n\\n/// @title ERC721Slim\\n/// @dev This is a \\\"slim\\\" version of an ERC721 for NiftyForge\\n///      Slim ERC721 do not have all the bells and whistle that the ERC721Full have\\n///      Slim is made for series (like PFPs or Generative series)\\n///      The mint starts from 1 and ups\\n///      Not even the owner can mint directly on this collection.\\n///      It has to be the module passed as initialization\\n/// @author Simon Fremaux (@dievardump)\\ninterface IERC721Slim is IERC721Upgradeable, IERC721WithRoyalties {\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    // receive() external payable {}\\n\\n    /// @notice This is a generic function that allows this contract's owner to withdraw\\n    ///         any balance / ERC20 / ERC721 / ERC1155 it can have\\n    ///         this contract has no payable nor receive function so it should not get any nativ token\\n    ///         but this could save some ERC20, 721 or 1155\\n    /// @param token the token to withdraw from. address(0) means native chain token\\n    /// @param amount the amount to withdraw if native token, erc20 or erc1155 - must be 0 for ERC721\\n    /// @param tokenId the tokenId to withdraw for ERC1155 and ERC721\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @notice Helper to know if an address can do the action an Editor can\\n    /// @param account the address to check\\n    function canEdit(address account) external view returns (bool);\\n\\n    /// @notice Allows to get approved using a permit and transfer in the same call\\n    /// @dev this supposes that the permit is for msg.sender\\n    /// @param from current owner\\n    /// @param to recipient\\n    /// @param tokenId the token id\\n    /// @param _data optional data to add\\n    /// @param deadline the deadline for the permit to be used\\n    /// @param signature of permit\\n    function safeTransferFromWithPermit(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external;\\n\\n    /// @notice Set the base token URI\\n    /// @dev only an editor can do that (account or module)\\n    /// @param baseURI_ the new base token uri used in tokenURI()\\n    function setBaseURI(string memory baseURI_) external;\\n\\n    /// @notice Allows to change the default royalties recipient\\n    /// @dev an editor can call this\\n    /// @param recipient new default royalties recipient\\n    function setDefaultRoyaltiesRecipient(address recipient) external;\\n\\n    /// @notice Helper for the owner of the contract to set the new contract URI\\n    /// @dev needs to be owner\\n    /// @param contractURI_ new contract URI\\n    function setContractURI(string memory contractURI_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/Royalties/ERC2981/IERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title IERC2981Royalties\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\ninterface IERC2981Royalties {\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address _receiver, uint256 _royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/Royalties/FoundationSecondarySales/IFoundationSecondarySales.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFoundationSecondarySales {\\n    /// @notice returns a list of royalties recipients and the amount\\n    /// @param tokenId the token Id to check for\\n    /// @return all the recipients and their basis points, for tokenId\\n    function getFees(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/NFT/Royalties/RaribleSecondarySales/IRaribleSecondarySales.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IRaribleSecondarySales {\\n    /// @notice returns a list of royalties recipients\\n    /// @param tokenId the token Id to check for\\n    /// @return all the recipients for tokenId\\n    function getFeeRecipients(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory);\\n\\n    /// @notice returns a list of royalties amounts\\n    /// @param tokenId the token Id to check for\\n    /// @return all the amounts for tokenId\\n    function getFeeBps(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FlagRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FlagToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ForceIndexing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"RegistryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"RegistrySlug\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"minter\",\"type\":\"bool\"}],\"internalType\":\"struct INiftyForge721.ModuleInit[]\",\"name\":\"modulesInit\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"contractRoyaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractRoyaltiesValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"createERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractRoyaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractRoyaltiesValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"name\":\"createERC721Slim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"flagRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"flagToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"flaggedRegistries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"forceReindexing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC1155Implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC1155ProxyRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC721Implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC721ProxyRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"getRegistryBySlug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"isSlugFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenFlagged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastIndexing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listRegistries\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setERC1155Implementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setERC1155ProxyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setERC721Implementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setERC721ProxyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"setERC721SlimImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setSlug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ForgeMaster", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}