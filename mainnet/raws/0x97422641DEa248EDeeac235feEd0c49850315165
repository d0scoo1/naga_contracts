{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n                                                                                                                                                                                                                                          \\r\\npragma solidity ^0.8.4;                 \\r\\n   \\r\\n//@ts-ignore                        \\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";                                      \\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";                               \\r\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              \\r\\n/*                                                                                                           \\r\\n               AAA                  GGGGGGGGGGGGG   SSSSSSSSSSSSSSS \\r\\n              A:::A              GGG::::::::::::G SS:::::::::::::::S\\r\\n             A:::::A           GG:::::::::::::::GS:::::SSSSSS::::::S\\r\\n            A:::::::A         G:::::GGGGGGGG::::GS:::::S     SSSSSSS\\r\\n           A:::::::::A       G:::::G       GGGGGGS:::::S            \\r\\n          A:::::A:::::A     G:::::G              S:::::S            \\r\\n         A:::::A A:::::A    G:::::G               S::::SSSS         \\r\\n        A:::::A   A:::::A   G:::::G    GGGGGGGGGG  SS::::::SSSSS    \\r\\n       A:::::A     A:::::A  G:::::G    G::::::::G    SSS::::::::SS  \\r\\n      A:::::AAAAAAAAA:::::A G:::::G    GGGGG::::G       SSSSSS::::S \\r\\n     A:::::::::::::::::::::AG:::::G        G::::G            S:::::S\\r\\n    A:::::AAAAAAAAAAAAA:::::AG:::::G       G::::G            S:::::S\\r\\n   A:::::A             A:::::AG:::::GGGGGGGG::::GSSSSSSS     S:::::S\\r\\n  A:::::A               A:::::AGG:::::::::::::::GS::::::SSSSSS:::::S\\r\\n A:::::A                 A:::::A GGG::::::GGG:::GS:::::::::::::::SS \\r\\nAAAAAAA                   AAAAAAA   GGGGGG   GGGG SSSSSSSSSSSSSSS   \\r\\n                                                                    \\r\\n                                                                    \\r\\n\\r\\n    Based on Sushiswap MasterChef.\\r\\n    The basic idea is to keep an accumulating pool \\\"share balance\\\" (accumulatedRewardPerShare):\\r\\n    Every unit of this balance represents the proportionate reward of a single wei which is staked in the contract.\\r\\n    This balance is updated in updateRewards() (which is called in each deposit/withdraw/claim)\\r\\n        according to the time passed from the last update and in proportion to the total tokens staked in the pool.\\r\\n        Basically: accumulatedRewardPerShare = accumulatedRewardPerShare + (seconds passed from last update) * (rewards per second) / (total tokens staked)\\r\\n    We also save for each user an accumulation of how much he has already claimed so far.\\r\\n    And so to calculate a user's rewards, we basically just need to calculate:\\r\\n    userRewards = accumulatedRewardPerShare * (user's currently staked tokens) - (user's rewards already claimed) \\r\\n    And updated the user's rewards already claimed accordingly.\\r\\n\\r\\n\\r\\n*/\\r\\ncontract AGSStaking is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 deposited;\\r\\n        uint256 rewardsAlreadyConsidered;\\r\\n    }\\r\\n\\r\\n    mapping (address => UserInfo) users;\\r\\n    \\r\\n    IERC20 public depositToken; // eg. PancakeSwap AGS LP token\\r\\n    IERC20 public rewardToken;  // eg. AGS\\r\\n\\r\\n    // We are not using depositToken.balanceOf in order to prevent DOS attacks (attacker can make the total tokens staked very large)\\r\\n    // and to add a skim() functionality with which the owner can collect tokens which were transferred outside the stake mechanism.\\r\\n    uint256 public totalStaked;\\r\\n\\r\\n    uint256 public rewardPeriodEndTimestamp;\\r\\n    uint256 public rewardPerSecond; // multiplied by 1e7, to make up for division by 24*60*60\\r\\n\\r\\n    uint256 public lastRewardTimestamp;\\r\\n    uint256 public accumulatedRewardPerShare; // multiplied by 1e12, same as MasterChef\\r\\n\\r\\n    event AddRewards(uint256 amount, uint256 lengthInDays);\\r\\n    event ClaimReward(address indexed user, uint256 amount);\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event Skim(uint256 amount);\\r\\n    \\r\\n\\r\\n    constructor(address _depositToken, address _rewardToken) {\\r\\n        require(_depositToken != address(0) || _rewardToken !=address(0),\\\"Token addresses should not be address(0)\\\");\\r\\n        depositToken = IERC20(_depositToken);\\r\\n        rewardToken = IERC20(_rewardToken);\\r\\n    }\\r\\n\\r\\n    // Owner should have approved ERC20 before.\\r\\n    function addRewards(uint256 _rewardsAmount, uint256 _lengthInDays)\\r\\n    external onlyOwner {\\r\\n        require(block.timestamp > rewardPeriodEndTimestamp, \\\"Staker: can't add rewards before period finished\\\");\\r\\n        updateRewards();\\r\\n        rewardPeriodEndTimestamp = block.timestamp.add(_lengthInDays.mul(24*60*60));\\r\\n        rewardPerSecond = _rewardsAmount.mul(1e7).div(_lengthInDays).div(24*60*60);\\r\\n        require(rewardToken.transferFrom(msg.sender, address(this), _rewardsAmount), \\\"Staker: transfer failed\\\");\\r\\n        emit AddRewards(_rewardsAmount, _lengthInDays);\\r\\n    }\\r\\n\\r\\n    // Main function to keep a balance of the rewards.\\r\\n    // Is called before each user action (stake, unstake, claim).\\r\\n    // See top of file for high level description.\\r\\n    function updateRewards()\\r\\n    internal {\\r\\n        // If no staking period active, or already updated rewards after staking ended, or nobody staked anything - nothing to do\\r\\n        if (block.timestamp <= lastRewardTimestamp) {\\r\\n            return;\\r\\n        }\\r\\n        if ((totalStaked == 0) || lastRewardTimestamp > rewardPeriodEndTimestamp) {\\r\\n            lastRewardTimestamp = block.timestamp;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // If staking period ended, calculate time delta based on the time the staking ended (and not after)\\r\\n        uint256 endingTime;\\r\\n        if (block.timestamp > rewardPeriodEndTimestamp) {\\r\\n            endingTime = rewardPeriodEndTimestamp;\\r\\n        } else {\\r\\n            endingTime = block.timestamp;\\r\\n        }\\r\\n        uint256 secondsSinceLastRewardUpdate = endingTime.sub(lastRewardTimestamp);\\r\\n        uint256 totalNewReward = secondsSinceLastRewardUpdate.mul(rewardPerSecond); // For everybody in the pool\\r\\n        // The next line will calculate the reward for each staked token in the pool.\\r\\n        //  So when a specific user will claim his rewards,\\r\\n        //  we will basically multiply this var by the amount the user staked.\\r\\n        accumulatedRewardPerShare = accumulatedRewardPerShare.add(totalNewReward.mul(1e12).div(totalStaked));\\r\\n        lastRewardTimestamp = block.timestamp;\\r\\n        if (block.timestamp > rewardPeriodEndTimestamp) {\\r\\n            rewardPerSecond = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Will deposit specified amount and also send rewards.\\r\\n    // User should have approved ERC20 before.\\r\\n    function deposit(uint256 _amount)\\r\\n    external nonReentrant{\\r\\n        require(block.timestamp < rewardPeriodEndTimestamp,\\\"Cannot deposit after pool has expired\\\");\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        updateRewards();\\r\\n        // Send reward for previous deposits\\r\\n        if (user.deposited > 0) {\\r\\n            uint256 pending = user.deposited.mul(accumulatedRewardPerShare).div(1e12).div(1e7).sub(user.rewardsAlreadyConsidered);\\r\\n            require(rewardToken.transfer(msg.sender, pending), \\\"Staker: transfer failed\\\");\\r\\n            emit ClaimReward(msg.sender, pending);\\r\\n        }\\r\\n        user.deposited = user.deposited.add(_amount);\\r\\n        totalStaked = totalStaked.add(_amount);\\r\\n        user.rewardsAlreadyConsidered = user.deposited.mul(accumulatedRewardPerShare).div(1e12).div(1e7);\\r\\n        require(depositToken.transferFrom(msg.sender, address(this), _amount), \\\"Staker: transferFrom failed\\\");\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }        \\r\\n    \\r\\n    // Will withdraw the specified amount and also send rewards.\\r\\n    function withdraw(uint256 _amount)                                                                                         \\r\\n    external nonReentrant{         \\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        require(user.deposited >= _amount, \\\"Staker: balance not enough\\\");\\r\\n        updateRewards();\\r\\n        // Send reward for previous deposits\\r\\n        uint256 pending = user.deposited.mul(accumulatedRewardPerShare).div(1e12).div(1e7).sub(user.rewardsAlreadyConsidered);\\r\\n        require(rewardToken.balanceOf(address(this))>=pending,'Staker: Pool needs to be filled');  \\r\\n        require(rewardToken.transfer(msg.sender, pending), \\\"Staker: reward transfer failed\\\");\\r\\n        emit ClaimReward(msg.sender, pending);\\r\\n        user.deposited = user.deposited.sub(_amount);  \\r\\n        totalStaked = totalStaked.sub(_amount);\\r\\n        user.rewardsAlreadyConsidered = user.deposited.mul(accumulatedRewardPerShare).div(1e12).div(1e7);\\r\\n        require(depositToken.transfer(msg.sender, _amount), \\\"Staker: deposit withdrawal failed\\\");\\r\\n        emit Withdraw(msg.sender, _amount);\\r\\n    }              \\r\\n                                                                                                                                                                                     \\r\\n    // Will just send rewards.\\r\\n    function claim()\\r\\n    external nonReentrant{\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        if (user.deposited == 0)\\r\\n            return;\\r\\n\\r\\n        updateRewards();\\r\\n        uint256 pending = user.deposited.mul(accumulatedRewardPerShare).div(1e12).div(1e7).sub(user.rewardsAlreadyConsidered);\\r\\n        require(rewardToken.balanceOf(address(this))>=pending,'Staker: Pool needs to be filled');\\r\\n        require(rewardToken.transfer(msg.sender, pending), \\\"Staker: transfer failed\\\");\\r\\n        emit ClaimReward(msg.sender, pending);\\r\\n        user.rewardsAlreadyConsidered = user.deposited.mul(accumulatedRewardPerShare).div(1e12).div(1e7);\\r\\n        \\r\\n    }\\r\\n\\r\\n    // Will collect depositTokens (LP tokens) that were sent to the contract\\r\\n    //  Outside of the staking mechanism.\\r\\n    function skim()\\r\\n    external onlyOwner {\\r\\n        uint256 depositTokenBalance = depositToken.balanceOf(address(this));\\r\\n        if (depositTokenBalance > totalStaked) {\\r\\n            uint256 amount = depositTokenBalance.sub(totalStaked);\\r\\n            require(depositToken.transfer(msg.sender, amount), \\\"Staker: transfer failed\\\");\\r\\n            emit Skim(amount);\\r\\n        }            \\r\\n                                                                                                          \\r\\n    }                                                                            \\r\\n                                                                                                                                                       \\r\\n    /*   \\r\\n        ####################################################\\r\\n        ################## View functions ##################\\r\\n        ####################################################\\r\\n\\r\\n    */             \\r\\n                        \\r\\n    // Return the user's pending rewards.                                                              \\r\\n    function pendingRewards(address _user)                                            \\r\\n    public view returns (uint256) {\\r\\n        UserInfo storage user = users[_user];\\r\\n        uint256 accumulated = accumulatedRewardPerShare;\\r\\n        if (block.timestamp > lastRewardTimestamp && lastRewardTimestamp <= rewardPeriodEndTimestamp && totalStaked != 0) {\\r\\n            uint256 endingTime;\\r\\n            if (block.timestamp > rewardPeriodEndTimestamp) {\\r\\n                endingTime = rewardPeriodEndTimestamp;\\r\\n            } else {\\r\\n                endingTime = block.timestamp;\\r\\n            }\\r\\n            uint256 secondsSinceLastRewardUpdate = endingTime.sub(lastRewardTimestamp);\\r\\n            uint256 totalNewReward = secondsSinceLastRewardUpdate.mul(rewardPerSecond);\\r\\n            accumulated = accumulated.add(totalNewReward.mul(1e12).div(totalStaked));\\r\\n        }\\r\\n        return user.deposited.mul(accumulated).div(1e12).div(1e7).sub(user.rewardsAlreadyConsidered);\\r\\n    }\\r\\n\\r\\n    // Returns misc details for the front end.\\r\\n    function getFrontendView()\\r\\n    external view returns (uint256 _rewardPerSecond, uint256 _secondsLeft, uint256 _deposited, uint256 _pending) {\\r\\n        if (block.timestamp <= rewardPeriodEndTimestamp) {\\r\\n            _secondsLeft = rewardPeriodEndTimestamp.sub(block.timestamp); \\r\\n            _rewardPerSecond = rewardPerSecond.div(1e7);\\r\\n        } // else, anyway these values will default to 0\\r\\n        _deposited = users[msg.sender].deposited;\\r\\n        _pending = pendingRewards(msg.sender);\\r\\n    }\\r\\n}                                                                                                                        \\r\\n                     \\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n                 \"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lengthInDays\",\"type\":\"uint256\"}],\"name\":\"AddRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Skim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lengthInDays\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFrontendView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondsLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPeriodEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AGSStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000667fd83e24ca1d935d36717d305d54fa0cac991c000000000000000000000000667fd83e24ca1d935d36717d305d54fa0cac991c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}