{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NextTrialRunOrientation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\n\\ninterface NextTrialRun {\\n    function mint(address) external;\\n}\\n\\ncontract NextTrialRunOrientation is EIP712, Ownable {\\n\\n    NextTrialRun public constant nextTrialRun =\\n        NextTrialRun(0x62e719065Eb0425EE47C04Bb5B70805bD6D88e65);\\n\\n    //for withdrawal\\n    address payable public constant nextTrialRunWallet = payable(0x7A08b1193E076d4F6693A677c792e94B7fC00942); \\n\\n    /**\\n        EIP712\\n     */\\n    bytes32 public constant GIVEAWAY_TYPEHASH =\\n        keccak256(\\\"SignGiveaway(address receiver,uint256 amount)\\\");\\n    struct SignGiveaway {\\n        address receiver;\\n        uint256 amount;\\n    }\\n\\n    bytes32 public constant STAGE1_TYPEHASH =\\n        keccak256(\\\"SignStage1Whitelist(address receiver)\\\");\\n    struct SignStage1Whitelist {\\n        address receiver;\\n    }\\n\\n    bytes32 public constant STAGE2_TYPEHASH =\\n        keccak256(\\\"SignStage2Whitelist(address receiver)\\\");\\n    struct SignStage2Whitelist {\\n        address receiver;\\n    }\\n\\n    bytes32 public constant STAGE3_TYPEHASH =\\n        keccak256(\\\"SignStage3Whitelist(address receiver)\\\");\\n    struct SignStage3Whitelist {\\n        address receiver;\\n    }\\n\\n    \\n    /**\\n        Max supply\\n     */\\n     uint256 public constant MAX_SUPPLY = 6000;\\n\\n    /**\\n        Pause mint\\n    */\\n    bool public mintPaused = false;\\n\\n    /**\\n        Giveaway Mints\\n     */\\n    // team mints\\n    uint256 private constant TEAM_MINT = 51;\\n    // minted through giveaways\\n    uint256 public numGiveaways = 0;\\n    // max giveaways\\n    uint256 public constant MAX_GIVEAWAY = 59;     \\n    mapping(address => uint256) public giveawaysOf;\\n\\n    /**\\n        Whitelists\\n     */\\n    // stage 1 mints\\n    uint256 public numStage1Whitelists = 0;\\n    uint256 public maxPerMintStage1 = 2;\\n    mapping(address => uint256) public stage1WhitelistsOf; \\n\\n    // stage 2 mints\\n    uint256 public numStage2Whitelists = 0;\\n    uint256 public maxPerMintStage2 = 3;\\n    mapping(address => uint256) public stage2WhitelistsOf; \\n\\n    // stage 3 mints\\n    uint256 public numStage3Whitelists = 0;\\n    uint256 public maxPerMintStage3 = 5;\\n    mapping(address => uint256) public stage3WhitelistsOf;\\n\\n    // minted through public sale\\n    uint256 public numPublicSale = 0;\\n    uint256 public maxPerMint = 50;\\n    \\n    /**\\n        Scheduling\\n     */\\n    uint256 public giveawayOpeningHours = 1650628800; // Friday, April 22, 2022 10:00:00 PM GMT+08:00\\n    uint256 public openingHours = 1650686400; // Saturday, April 23, 2022 12:00:00 PM GMT+08:00\\n    uint256 public constant operationSecondsForStage1 = 3600 * 4; // 4 hours\\n    uint256 public constant operationSecondsForStage2 = 3600 * 4; // 4 hours\\n    uint256 public constant operationSecondsForStage3 = 3600 * 4; // 4 hours\\n\\n    /**\\n        Price\\n     */\\n    uint256 public constant mintPrice = 0.2 ether;\\n\\n    event SetGiveawayOpeningHours(uint256 giveawayOpeningHours);\\n    event SetOpeningHours(uint256 openingHours);\\n\\n    event MintGiveaway(address account, uint256 amount);\\n    event MintStage1(address account, uint256 amount, uint256 changes);\\n    event MintStage2(address account, uint256 amount, uint256 changes);\\n    event MintStage3(address account, uint256 amount, uint256 changes);\\n    event MintPublic(address account, uint256 amount, uint256 changes);\\n    event Withdraw(address to);\\n    event MintPaused(bool mintPaused);\\n    event SetMaxPerMint(uint256 maxPerMint);\\n    event SetMaxPerMintStage1(uint256 maxPerMintStage1);\\n    event SetMaxPerMintStage2(uint256 maxPerMintStage2);\\n    event SetMaxPerMintStage3(uint256 maxPerMintStage3);\\n\\n    constructor() EIP712(\\\"NextTrialRunOrientation\\\", \\\"1\\\") {}\\n\\n    modifier whenNotPaused() {\\n        require(\\n            !mintPaused,\\n            \\\"Store is closed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier whenGiveawayOpened() {\\n        require(\\n            block.timestamp >= giveawayOpeningHours,\\n            \\\"Store is not opened for giveaway mints\\\"\\n        );\\n        require(\\n            block.timestamp < openingHours,\\n            \\\"Store is closed for giveaway mints\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier whenStage1Opened() {\\n        require(\\n            block.timestamp >= openingHours,\\n            \\\"Store is not opened for stage 1 whitelist\\\"\\n        );\\n        require(\\n            block.timestamp < openingHours + operationSecondsForStage1,\\n            \\\"Store is closed for stage 1 whitelist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier whenStage2Opened() {\\n        require(\\n            block.timestamp >= openingHours + operationSecondsForStage1,\\n            \\\"Store is not opened for stage 2 whitelist\\\"\\n        );\\n        require(\\n            block.timestamp < openingHours + operationSecondsForStage1 + operationSecondsForStage2,\\n            \\\"Store is closed for stage 2 whitelist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier whenStage3Opened() {\\n        require(\\n            block.timestamp >= openingHours + operationSecondsForStage1 + operationSecondsForStage2,\\n            \\\"Store is not opened for stage 3 whitelist\\\"\\n        );\\n        require(\\n            block.timestamp < openingHours + operationSecondsForStage1 + operationSecondsForStage2+ operationSecondsForStage3,\\n            \\\"Store is closed for stage 3 whitelist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier whenPublicOpened() {\\n        require(\\n            block.timestamp >= openingHours + operationSecondsForStage1 + operationSecondsForStage2+ operationSecondsForStage3,\\n            \\\"Store is not opened\\\"\\n        );\\n        _;\\n    }\\n\\n    function setMintPaused(bool _mintPaused) external onlyOwner{\\n        mintPaused = _mintPaused;\\n        emit MintPaused(_mintPaused);\\n    }\\n\\n    function setGiveawayOpeningHours(uint256 _giveawayOpeningHours) external onlyOwner {\\n        giveawayOpeningHours = _giveawayOpeningHours;\\n        emit SetGiveawayOpeningHours(_giveawayOpeningHours);\\n    }\\n\\n    function setOpeningHours(uint256 _openingHours) external onlyOwner {\\n        openingHours = _openingHours;\\n        emit SetOpeningHours(_openingHours);\\n    }\\n\\n    function setMaxPerMint(uint256 _maxPerMint) external onlyOwner {\\n        maxPerMint = _maxPerMint;\\n        emit SetMaxPerMint(_maxPerMint);\\n    }\\n\\n    function setMaxPerMintStage1(uint256 _maxPerMintStage1) external onlyOwner {\\n        maxPerMintStage1 = _maxPerMintStage1;\\n        emit SetMaxPerMintStage1(_maxPerMintStage1);\\n    }\\n\\n    function setMaxPerMintStage2(uint256 _maxPerMintStage2) external onlyOwner {\\n        maxPerMintStage2 = _maxPerMintStage2;\\n        emit SetMaxPerMintStage2(_maxPerMintStage2);\\n    }\\n\\n    function setMaxPerMintStage3(uint256 _maxPerMintStage3) external onlyOwner {\\n        maxPerMintStage3 = _maxPerMintStage3;\\n        emit SetMaxPerMintStage3(_maxPerMintStage3);\\n    }\\n\\n    function mintByGiveaway(\\n        uint256 _nftAmount,\\n        uint8 _vSig,\\n        bytes32 _rSig,\\n        bytes32 _sSig\\n    ) external whenNotPaused whenGiveawayOpened {\\n        uint256 myGiveaways = giveawaysOf[msg.sender];\\n        require(myGiveaways == 0, \\\"Tsk tsk, not too greedy please\\\");\\n\\n        require(numGiveaways + _nftAmount <= MAX_GIVEAWAY, \\\"Max number of giveaways reached\\\");\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(abi.encode(GIVEAWAY_TYPEHASH, msg.sender, _nftAmount))\\n        );\\n\\n        address signer = ecrecover(digest, _vSig, _rSig, _sSig);\\n        require(signer == owner(), \\\"The signature is not from us, please check again\\\");\\n\\n        giveawaysOf[msg.sender] = _nftAmount; //update who has claimed their giveaways\\n\\n        for (uint256 i = 0; i < _nftAmount; i++) {\\n            nextTrialRun.mint(msg.sender);\\n        }\\n\\n        numGiveaways += _nftAmount;\\n\\n        emit MintGiveaway(msg.sender, _nftAmount);\\n    }\\n\\n    function mintByStage1Whitelist(\\n        uint256 _nftAmount,\\n        uint8 _vSig,\\n        bytes32 _rSig,\\n        bytes32 _sSig\\n    ) external payable whenNotPaused whenStage1Opened {\\n        uint256 myStage1Whitelists = stage1WhitelistsOf[msg.sender];\\n        require(myStage1Whitelists == 0, \\\"You have already minted for stage 1\\\");\\n\\n        require(_nftAmount <= maxPerMintStage1, \\\"You cannot mint more than the maximum allowed\\\");\\n\\n        require(TEAM_MINT + numGiveaways + numStage1Whitelists + _nftAmount <= MAX_SUPPLY, \\\"Mints exceeds max supply\\\");\\n\\n        uint256 totalPrice = mintPrice * _nftAmount;\\n        require(totalPrice <= msg.value, \\\"Not enough ETH\\\");\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(abi.encode(STAGE1_TYPEHASH, msg.sender))\\n        );\\n\\n        address signer = ecrecover(digest, _vSig, _rSig, _sSig);\\n        require(signer == owner(), \\\"The signature is not from us, please check again\\\");\\n\\n        stage1WhitelistsOf[msg.sender] = _nftAmount; //update who has claimed their whitelists\\n\\n        numStage1Whitelists += _nftAmount;\\n\\n        for (uint256 i = 0; i < _nftAmount; i++) {\\n            nextTrialRun.mint(msg.sender);\\n        }\\n\\n        // Refund changes\\n        uint256 changes = msg.value - totalPrice;\\n        emit MintStage1(msg.sender, _nftAmount, changes);\\n\\n        if (changes > 0) {\\n            payable(msg.sender).transfer(changes);\\n        }\\n    }\\n\\n    function mintByStage2Whitelist(\\n        uint256 _nftAmount,\\n        uint8 _vSig,\\n        bytes32 _rSig,\\n        bytes32 _sSig\\n    ) external payable whenNotPaused whenStage2Opened {\\n        uint256 myStage2Whitelists = stage2WhitelistsOf[msg.sender];\\n        require(myStage2Whitelists == 0, \\\"You have already minted for stage 2\\\");\\n\\n        require(_nftAmount <= maxPerMintStage2, \\\"You cannot mint more than the maximum allowed\\\");\\n\\n        require(TEAM_MINT + numGiveaways + numStage1Whitelists + numStage2Whitelists + _nftAmount <= MAX_SUPPLY, \\\"Mints exceeds max supply\\\");\\n\\n        uint256 totalPrice = mintPrice * _nftAmount;\\n        require(totalPrice <= msg.value, \\\"Not enough ETH\\\");\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(abi.encode(STAGE2_TYPEHASH, msg.sender))\\n        );\\n\\n        address signer = ecrecover(digest, _vSig, _rSig, _sSig);\\n        require(signer == owner(), \\\"The signature is not from us, please check again\\\");\\n\\n        stage2WhitelistsOf[msg.sender] = _nftAmount; //update who has claimed their whitelists\\n\\n        numStage2Whitelists += _nftAmount;\\n\\n        for (uint256 i = 0; i < _nftAmount; i++) {\\n            nextTrialRun.mint(msg.sender);\\n        }\\n\\n        // Refund changes\\n        uint256 changes = msg.value - totalPrice;\\n        emit MintStage2(msg.sender, _nftAmount, changes);\\n\\n        if (changes > 0) {\\n            payable(msg.sender).transfer(changes);\\n        }\\n    }\\n\\n    function mintByStage3Whitelist(\\n        uint256 _nftAmount,\\n        uint8 _vSig,\\n        bytes32 _rSig,\\n        bytes32 _sSig\\n    ) external payable whenNotPaused whenStage3Opened {\\n        uint256 myStage3Whitelists = stage3WhitelistsOf[msg.sender];\\n        require(myStage3Whitelists == 0, \\\"You have already minted for stage 3\\\");\\n\\n        require(_nftAmount <= maxPerMintStage3, \\\"You cannot mint more than the maximum allowed\\\");\\n\\n        require(TEAM_MINT + numGiveaways + numStage1Whitelists + numStage2Whitelists + numStage3Whitelists + _nftAmount <= MAX_SUPPLY, \\\"Mints exceeds max supply\\\");\\n\\n        uint256 totalPrice = mintPrice * _nftAmount;\\n        require(totalPrice <= msg.value, \\\"Not enough ETH\\\");\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(abi.encode(STAGE3_TYPEHASH, msg.sender))\\n        );\\n\\n        address signer = ecrecover(digest, _vSig, _rSig, _sSig);\\n        require(signer == owner(), \\\"The signature is not from us, please check again\\\");\\n\\n        stage3WhitelistsOf[msg.sender] = _nftAmount; //update who has claimed their whitelists\\n\\n        numStage3Whitelists += _nftAmount;\\n\\n        for (uint256 i = 0; i < _nftAmount; i++) {\\n            nextTrialRun.mint(msg.sender);\\n        }\\n\\n        // Refund changes\\n        uint256 changes = msg.value - totalPrice;\\n        emit MintStage3(msg.sender, _nftAmount, changes);\\n\\n        if (changes > 0) {\\n            payable(msg.sender).transfer(changes);\\n        }\\n    }\\n\\n    function publicMint(\\n        uint256 _nftAmount\\n    ) external payable whenNotPaused whenPublicOpened {\\n        require(_nftAmount <= maxPerMint, \\\"Cannot exceed max nft per mint\\\");\\n\\n        require(TEAM_MINT + numGiveaways + numStage1Whitelists + numStage2Whitelists + numStage3Whitelists + numPublicSale + _nftAmount <= MAX_SUPPLY, \\\"Mints exceeds max supply\\\");\\n\\n        uint256 totalPrice = mintPrice * _nftAmount;\\n        require(totalPrice <= msg.value, \\\"Not enough ETH\\\");\\n\\n        numPublicSale += _nftAmount;\\n\\n        for (uint256 i = 0; i < _nftAmount; i++) {\\n            nextTrialRun.mint(msg.sender);\\n        }\\n\\n        // Refund changes\\n        uint256 changes = msg.value - totalPrice;\\n        emit MintPublic(msg.sender, _nftAmount, changes);\\n\\n        if (changes > 0) {\\n            payable(msg.sender).transfer(changes);\\n        }\\n    }\\n\\n    // withdraw eth for sold NTR \\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n\\n        emit Withdraw(nextTrialRunWallet);\\n\\n        //send ETH to designated receiver only\\n        nextTrialRunWallet.transfer(balance);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintGiveaway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintPaused\",\"type\":\"bool\"}],\"name\":\"MintPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changes\",\"type\":\"uint256\"}],\"name\":\"MintPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changes\",\"type\":\"uint256\"}],\"name\":\"MintStage1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changes\",\"type\":\"uint256\"}],\"name\":\"MintStage2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changes\",\"type\":\"uint256\"}],\"name\":\"MintStage3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"giveawayOpeningHours\",\"type\":\"uint256\"}],\"name\":\"SetGiveawayOpeningHours\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerMint\",\"type\":\"uint256\"}],\"name\":\"SetMaxPerMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerMintStage1\",\"type\":\"uint256\"}],\"name\":\"SetMaxPerMintStage1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerMintStage2\",\"type\":\"uint256\"}],\"name\":\"SetMaxPerMintStage2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerMintStage3\",\"type\":\"uint256\"}],\"name\":\"SetMaxPerMintStage3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openingHours\",\"type\":\"uint256\"}],\"name\":\"SetOpeningHours\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GIVEAWAY_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GIVEAWAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAGE1_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAGE2_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAGE3_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveawayOpeningHours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"giveawaysOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerMintStage1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerMintStage2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerMintStage3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_vSig\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_rSig\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sSig\",\"type\":\"bytes32\"}],\"name\":\"mintByGiveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_vSig\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_rSig\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sSig\",\"type\":\"bytes32\"}],\"name\":\"mintByStage1Whitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_vSig\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_rSig\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sSig\",\"type\":\"bytes32\"}],\"name\":\"mintByStage2Whitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_vSig\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_rSig\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sSig\",\"type\":\"bytes32\"}],\"name\":\"mintByStage3Whitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTrialRun\",\"outputs\":[{\"internalType\":\"contract NextTrialRun\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTrialRunWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numGiveaways\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStage1Whitelists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStage2Whitelists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numStage3Whitelists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingHours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationSecondsForStage1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationSecondsForStage2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationSecondsForStage3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftAmount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_giveawayOpeningHours\",\"type\":\"uint256\"}],\"name\":\"setGiveawayOpeningHours\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerMint\",\"type\":\"uint256\"}],\"name\":\"setMaxPerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerMintStage1\",\"type\":\"uint256\"}],\"name\":\"setMaxPerMintStage1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerMintStage2\",\"type\":\"uint256\"}],\"name\":\"setMaxPerMintStage2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerMintStage3\",\"type\":\"uint256\"}],\"name\":\"setMaxPerMintStage3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mintPaused\",\"type\":\"bool\"}],\"name\":\"setMintPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_openingHours\",\"type\":\"uint256\"}],\"name\":\"setOpeningHours\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stage1WhitelistsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stage2WhitelistsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stage3WhitelistsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NextTrialRunOrientation", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}