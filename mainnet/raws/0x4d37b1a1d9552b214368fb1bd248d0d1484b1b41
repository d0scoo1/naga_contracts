{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract JHEToken {\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\r\n}\r\n\r\ncontract JHETokenSale {\r\n    using SafeMath for uint;\r\n\r\n    address public owner;\r\n    address payable public etherWallet;\r\n    JHEToken public tokenContract;\r\n    uint256 public tokenPrice;\r\n    uint256 public tokensSold;\r\n    uint256 public totalFeeAmount;\r\n\r\n    _Fee[] public feeDistributions;   // array of _Fee struct\r\n\r\n    struct _Fee {\r\n        uint256 id;\r\n        string name;\r\n        address payable wallet;\r\n        uint256 percent;\r\n        bool active;\r\n    }\r\n\r\n\r\n    event Sell(address _buyer, uint256 _amount);\r\n\r\n    constructor(JHEToken _tokenContract, uint256 _tokenPrice, address payable _etherWallet) public {\r\n        owner = msg.sender;\r\n        tokenContract = _tokenContract;\r\n        tokenPrice = _tokenPrice;\r\n        totalFeeAmount = 0;\r\n        etherWallet = _etherWallet;\r\n    }\r\n\r\n    // Modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"owner only\");\r\n        _;\r\n    }\r\n    modifier noBalance() {\r\n        // require(totalFeeAmount == 0, \"fee not null, transfer funds first\");\r\n        require(address(this).balance == 0, \"balance not null, transfer funds first\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x,'');\r\n    }\r\n\r\n    function buyTokens(uint256 _numberOfTokens) public payable {\r\n        uint256 tokenTotalPrice = (multiply(_numberOfTokens, tokenPrice)).div(10**18);\r\n        // calculate the total fee amount\r\n        uint256 totalFeePercent = getTotalFeePercent ();\r\n        uint256 _totalFeeAmount = tokenTotalPrice.mul(totalFeePercent).div(100000);  // FEE: 100000 = 100%\r\n        totalFeeAmount = totalFeeAmount.add (_totalFeeAmount);\r\n\r\n        require(msg.value >= tokenTotalPrice.add(_totalFeeAmount),'incorrect amount');\r\n        require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'contract has not enough token');\r\n        require(tokenContract.transfer(msg.sender, _numberOfTokens),'transfer error');\r\n\r\n        // sebd ether\r\n        uint256 ethAmount = msg.value;\r\n        _transferPayments(ethAmount);\r\n\r\n        tokensSold += _numberOfTokens;\r\n\r\n        emit Sell(msg.sender, _numberOfTokens);\r\n    }\r\n\r\n    // Transfer ether payments\r\n    function _transferPayments(uint256 ethAmount) internal {\r\n        require(ethAmount > 0, \"no ether recieved\");\r\n\r\n        // transfer owner's ether deducted from total Fee Amount\r\n        uint256 _ownerFunds = ethAmount.sub(totalFeeAmount);\r\n        etherWallet.transfer(_ownerFunds);\r\n\r\n        // distribute fees\r\n        uint256 feesCount = getFeeDistributionsCount();\r\n        _Fee[] storage fees = feeDistributions;\r\n\r\n        for (uint i = 0; i < feesCount; i++){\r\n            if (fees[i].active){\r\n                uint feeValue = _ownerFunds.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%\r\n                fees[i].wallet.transfer(feeValue);\r\n            }\r\n        }\r\n\r\n        // if eth rest: in case of fee deactivated...\r\n        if (address(this).balance != 0){\r\n            etherWallet.transfer(address(this).balance);\r\n        }\r\n        totalFeeAmount = 0;\r\n    }\r\n\r\n\r\n    function endSale() public onlyOwner{\r\n        require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))),'transfer error');\r\n\r\n        // UPDATE: Let's not destroy the contract here\r\n        // Just transfer the balance to the owner\r\n        // transferFunds();\r\n    }\r\n\r\n    // Transfer funds\r\n    function transferFunds() public onlyOwner {\r\n        // require(address(this).balance > 0, \"no funds\");\r\n\r\n        uint256 totalFunds = address(this).balance;\r\n\r\n        // transfer owner's ether deducted from total Fee Amount\r\n        uint256 _ownerFunds = totalFunds.sub(totalFeeAmount);\r\n        etherWallet.transfer(_ownerFunds);\r\n\r\n        // distribute fees\r\n        uint256 feesCount = getFeeDistributionsCount();\r\n        _Fee[] storage fees = feeDistributions;\r\n\r\n        for (uint i = 0; i < feesCount; i++){\r\n            if (fees[i].active){\r\n                uint feeValue = _ownerFunds.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%\r\n                fees[i].wallet.transfer(feeValue);\r\n            }\r\n        }\r\n\r\n        // if eth rest: in case of fee deactivated...\r\n        if (address(this).balance != 0){\r\n            etherWallet.transfer(address(this).balance);\r\n        }\r\n        totalFeeAmount = 0;\r\n    }\r\n\r\n    /*\r\n    *       FEE: \r\n    *              1 = 0.001%\r\n    *           1000 = 1%\r\n    *         100000 = 100%\r\n    */\r\n    function setFeeDistributions(address payable _feeWallet, string memory _name, uint256 _percent) public  onlyOwner noBalance{\r\n        require(_feeWallet != address(0), \"address not valid\");\r\n        // emit FeePercentChanged(feePercent, _newFeePercent);\r\n\r\n        _Fee[] storage fees = feeDistributions;\r\n        // uint256 feesCount = fees.length;\r\n        uint256 feesCount = getFeeDistributionsCount();\r\n\r\n        bool feeExiste = false;\r\n\r\n        uint totalFeePercent = getTotalFeePercent ();\r\n        totalFeePercent = totalFeePercent.add(_percent);\r\n        require(totalFeePercent <= 100000, \"total fee cannot exceed 100\");\r\n\r\n        for (uint i = 0; i < feesCount; i++){\r\n            if (fees[i].wallet == _feeWallet){\r\n                fees[i].name    = _name;\r\n                fees[i].percent = _percent;\r\n                fees[i].active  = true;\r\n\r\n                feeExiste = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // fee not found => add as new fee\r\n        if (!feeExiste){\r\n            _Fee memory fee;\r\n\r\n            fee.id = (feesCount + 1);\r\n            fee.name = _name;\r\n            fee.wallet = _feeWallet;\r\n            fee.percent = _percent;\r\n            fee.active = true;\r\n\r\n            fees.push(fee);\r\n        }\r\n    }\r\n\r\n    function getFeeDistributionsCount() public view returns(uint) {\r\n        _Fee[] storage fees = feeDistributions;\r\n        return fees.length;\r\n    }\r\n\r\n    function getTotalFeePercent () public view returns (uint){\r\n        uint256 totalFeePercent = 0;\r\n        uint256 feesCount = getFeeDistributionsCount();\r\n        _Fee[] storage fees = feeDistributions;\r\n\r\n        for (uint i = 0; i < feesCount; i++){\r\n            if (fees[i].active){\r\n                totalFeePercent = totalFeePercent.add(fees[i].percent);\r\n            }\r\n        }\r\n\r\n        return totalFeePercent;\r\n    }\r\n\r\n    function deActivateFeeWallet(address _feeWallet) public onlyOwner {\r\n        require(_feeWallet != address(0), \"address not valid\");\r\n        // emit FeePercentChanged(feePercent, _newFeePercent);\r\n\r\n        _Fee[] storage fees = feeDistributions;\r\n        // uint256 feesCount = fees.length;\r\n        uint256 feesCount = getFeeDistributionsCount();\r\n        for (uint i = 0; i < feesCount; i++){\r\n            if (fees[i].wallet == _feeWallet){\r\n                fees[i].active = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Transfer Owner\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n    function _transferOwnership(address payable _newOwner) internal {\r\n        require(_newOwner != address(0), \"address not valid\");\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // Transfer ether wallet\r\n    function transferEtherWallet(address payable _newEtherWallet) public onlyOwner {\r\n        _transferEtherWallet(_newEtherWallet);\r\n    }\r\n    function _transferEtherWallet(address payable _newEtherWallet) internal {\r\n        require(_newEtherWallet != address(0), \"address not valid\");\r\n        etherWallet = _newEtherWallet;\r\n    }\r\n\r\n    // set token price\r\n    function setTokenPrice(uint256 _tokenPrice) public onlyOwner {\r\n        require(_tokenPrice != 0, \"token price is null\");\r\n        tokenPrice = _tokenPrice;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"etherWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEtherWallet\",\"type\":\"address\"}],\"name\":\"transferEtherWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeDistributions\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeDistributionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeWallet\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setFeeDistributions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFeeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"deActivateFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"name\":\"_etherWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"}]", "ContractName": "JHETokenSale", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000075579d1c935bc600c7b4e30c54ecf86e703e5d880000000000000000000000000000000000000000000000000000b5e620f480000000000000000000000000001daccb936d45dcb63ef829f151cb33dc9d537300", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://42b4701bcdbe7c1b924e8086bbdaad3e22dcb5991de5716400993f7f9fce90dc"}]}