{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Dungeons.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./LEGENDZ.sol\\\";\\r\\nimport \\\"./NullHeroes.sol\\\";\\r\\nimport \\\"./HeroStakes.sol\\\";\\r\\n\\r\\ncontract Dungeons is HeroStakes {\\r\\n\\r\\n    uint8 public force;\\r\\n    uint8 public intelligence;\\r\\n    uint8 public agility;\\r\\n    uint256 public dailyReward;\\r\\n\\r\\n    constructor(address _legendz, address _nullHeroes, uint256 _dailyReward, uint8 _force, uint8 _intelligence, uint8 _agility) HeroStakes(_legendz, _nullHeroes, 10) {\\r\\n        dailyReward = _dailyReward;\\r\\n        force = _force;\\r\\n        intelligence = _intelligence;\\r\\n        agility = _agility;\\r\\n        minDaysToClaim = 1 days;\\r\\n    }\\r\\n\\r\\n    function _resolveReward(uint256 _tokenId) internal override returns (uint256) {\\r\\n        NullHeroes.Hero memory hero = nullHeroes.getHero(_tokenId);\\r\\n\\r\\n        uint256 seed = _random(_tokenId);\\r\\n        bool hasWon = _fight(seed, hero);\\r\\n\\r\\n        return _calculateTotalReward(hero, stakes[_tokenId].lastClaim, hasWon);\\r\\n    }\\r\\n\\r\\n    function estimateReward(uint256 _tokenId) public view override returns (uint256) {\\r\\n        return _calculateBaseReward(stakes[_tokenId].lastClaim, dailyReward);\\r\\n    }\\r\\n\\r\\n    function estimateDailyReward() public view override returns (uint256) {\\r\\n        return dailyReward;\\r\\n    }\\r\\n\\r\\n    function estimateDailyReward(uint256 _tokenId) public view override returns (uint256) {\\r\\n        return dailyReward;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * rolls a dice\\r\\n     * @param seed a pseudorandom number\\r\\n     * @param size the dice size\\r\\n     * @return a pseudorandom value\\r\\n     */\\r\\n    function _roll(uint256 seed, uint256 size) internal pure returns (uint256) {\\r\\n        require(size > 0, \\\"die size < 1\\\");\\r\\n        if (seed < size)\\r\\n            return seed + 1;\\r\\n        return (seed % size) + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * determines if a hero wins against a mob\\r\\n     * @param seed a pseudorandom number\\r\\n     * @param hero the hero\\r\\n     * @return bool hero's victory\\r\\n     */\\r\\n    function _fight(uint256 seed, NullHeroes.Hero memory hero) internal view returns (bool) {\\r\\n        uint8 _force = force;\\r\\n        uint8 _intelligence = intelligence;\\r\\n        uint8 _agility = agility;\\r\\n\\r\\n        // adds class skill\\r\\n        uint256 randomAttribute;\\r\\n        if (hero.class == 0) {// warrior's berserk\\r\\n            randomAttribute = _roll(uint16(seed), 30);\\r\\n            if (randomAttribute < 11) { // force\\r\\n                hero.force *= 2;\\r\\n            } else if (randomAttribute < 21) { // intelligence\\r\\n                hero.intelligence *= 2;\\r\\n            } else if (randomAttribute < 31) { // agility\\r\\n                hero.agility *= 2;\\r\\n            }\\r\\n        } else if (hero.class == 2) { // wizard's curse\\r\\n            randomAttribute = _roll(uint16(seed), 30);\\r\\n            if (randomAttribute < 11) { // force\\r\\n                _force = 1;\\r\\n            } else if (randomAttribute < 21) { // intelligence\\r\\n                _intelligence = 1;\\r\\n            } else if (randomAttribute < 31) { // agility\\r\\n                _agility = 1;\\r\\n            }\\r\\n        } else if (hero.class == 5) { // ranger's headshot\\r\\n            if(_roll(uint16(seed), 100) < 16) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // shifts seed\\r\\n        seed >>= 16;\\r\\n\\r\\n        // processes fight\\r\\n        if (hero.class == 3) { // cultist persuasion\\r\\n            if (_roll(uint16(seed >> 16), 100) < 76)\\r\\n                randomAttribute = 20;\\r\\n        } else {\\r\\n            randomAttribute = _roll(uint16(seed), 40);\\r\\n        }\\r\\n        if (randomAttribute < 11) { // force\\r\\n            return hero.force > _force;\\r\\n        } else if (randomAttribute < 21) { // intelligence\\r\\n            return hero.intelligence > _intelligence;\\r\\n        } else if (randomAttribute < 31) { // agility\\r\\n            return hero.agility > _agility;\\r\\n        } else { // attribute sum\\r\\n            return (hero.force + hero.intelligence + hero.agility) > (_force + _intelligence + _agility);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * calculates a total reward including skill bonus of a staked hero\\r\\n     * @param hero the corresponding hero\\r\\n     * @param hasWon hero victory flag\\r\\n     * @return the total reward\\r\\n     */\\r\\n    function _calculateTotalReward(NullHeroes.Hero memory hero, uint256 lastClaim, bool hasWon) internal view returns (uint256) {\\r\\n        uint256 reward;\\r\\n\\r\\n        // adds class skill\\r\\n        if (hasWon) {\\r\\n            reward = _calculateBaseReward(lastClaim, dailyReward);\\r\\n            if (hero.class == 4) // mercenary's bounty\\r\\n                reward += reward / 4;\\r\\n        } else {\\r\\n            if (hero.class == 1) // rogue's trickery\\r\\n                reward = _calculateBaseReward(lastClaim, dailyReward) / 4;\\r\\n        }\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * generates a pseudorandom number\\r\\n     * @param seed a value ensure different outcomes for different sources in the same block\\r\\n     * @return a pseudorandom value\\r\\n     */\\r\\n    function _random(uint256 seed) internal view returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(\\r\\n                tx.origin,\\r\\n                blockhash(block.number - 1),\\r\\n                block.timestamp,\\r\\n                seed\\r\\n            )));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * updates the dungeon parameters\\r\\n     * @param _dailyReward the legendz rate per day\\r\\n     * @param _force mob's force\\r\\n     * @param _intelligence mob's intelligence\\r\\n     * @param _agility mob's agility\\r\\n     */\\r\\n    function updateDungeon(uint256 _dailyReward, uint8 _force, uint8 _intelligence, uint8 _agility) external onlyOwner {\\r\\n        dailyReward = _dailyReward;\\r\\n        force = _force;\\r\\n        intelligence = _intelligence;\\r\\n        agility = _agility;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/NullHeroes.sol\": {\r\n      \"content\": \"// contracts/NullHeroes.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/**\\r\\n *       __   __     __  __     __         __\\r\\n *      /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\/\\\\ \\\\   /\\\\ \\\\       /\\\\ \\\\\\r\\n *      \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\_\\\\ \\\\  \\\\ \\\\ \\\\____  \\\\ \\\\ \\\\____\\r\\n *       \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_____\\\\\\r\\n *    www.\\\\/_/ \\\\/_/   \\\\/_____/   \\\\/_____/   \\\\/_____/\\r\\n *       __  __     ______     ______     ______     ______     ______\\r\\n *      /\\\\ \\\\_\\\\ \\\\   /\\\\  ___\\\\   /\\\\  == \\\\   /\\\\  __ \\\\   /\\\\  ___\\\\   /\\\\  ___\\\\\\r\\n *      \\\\ \\\\  __ \\\\  \\\\ \\\\  __\\\\   \\\\ \\\\  __<   \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\  __\\\\   \\\\ \\\\___  \\\\\\r\\n *       \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_____\\\\  \\\\/\\\\_____\\\\\\r\\n *        \\\\/_/\\\\/_/   \\\\/_____/   \\\\/_/ /_/   \\\\/_____/   \\\\/_____/   \\\\/_____/.io\\r\\n *\\r\\n *\\r\\n *  Somewhere in the metaverse the null heroes compete to farm the\\r\\n *  $LEGENDZ token, an epic ERC20 token that only the bravest will be able\\r\\n *  to claim.\\r\\n *\\r\\n *  Enroll some heroes and start farming the $LEGENDZ tokens now on:\\r\\n *  https://www.nullheroes.io\\r\\n *\\r\\n *  - OpenSea is already approved for transactions to spare gas fees\\r\\n *  - NullHeroes and related staking contracts are optimized for low gas fees,\\r\\n *    at least as much as I could :)\\r\\n *\\r\\n *  made with love by Stigmatix@github\\r\\n *  special credits: NuclearNerds, WolfGame\\r\\n *\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./ERC721Enumerable.sol\\\";\\r\\nimport \\\"./LEGENDZ.sol\\\";\\r\\n\\r\\nerror NonExistentToken();\\r\\nerror LevelMax();\\r\\nerror TooMuchTokensPerTx();\\r\\nerror NotEnoughTokens();\\r\\nerror NotEnoughGiveaways();\\r\\nerror SaleNotStarted();\\r\\nerror NotEnoughEther();\\r\\nerror NotEnoughLegendz();\\r\\n\\r\\ncontract NullHeroes is ERC721Enumerable, Ownable, Pausable {\\r\\n\\r\\n    // hero struct\\r\\n    struct Hero {\\r\\n        uint8 level;\\r\\n        uint8 class;\\r\\n        uint8 race;\\r\\n        uint8 force;\\r\\n        uint8 intelligence;\\r\\n        uint8 agility;\\r\\n    }\\r\\n\\r\\n    // max heroes\\r\\n    uint256 public constant MAX_TOKENS = 40000;\\r\\n\\r\\n    // genesis heroes (25% of max heroes)\\r\\n    uint256 public constant MAX_GENESIS_TOKENS = 10000;\\r\\n\\r\\n    // giveaways (5% of genesis heroes)\\r\\n    uint256 public constant MAX_GENESIS_TOKENS_GIVEAWAYS = 500;\\r\\n\\r\\n    // max per tx\\r\\n    uint256 public constant MAX_TOKENS_PER_TX = 10;\\r\\n\\r\\n    uint256 public MINT_GENESIS_PRICE = .06942 ether;\\r\\n\\r\\n    uint256 public MINT_PRICE = 70000;\\r\\n\\r\\n    // giveaways counter\\r\\n    uint256 public giveawayGenesisTokens;\\r\\n\\r\\n    // $LEGENDZ token contract\\r\\n    LEGENDZ private legendz;\\r\\n\\r\\n    // pre-generated list of traits distributed by weight\\r\\n    uint8[][3] private traits;\\r\\n\\r\\n    // mapping from tokenId to a struct containing the token's traits\\r\\n    mapping(uint256 => Hero) public heroes;\\r\\n\\r\\n    // mapping from proxy address to authorization\\r\\n    mapping(address => bool) private proxies;\\r\\n\\r\\n    address private proxyRegistryAddress;\\r\\n\\r\\n    address private accountingAddress;\\r\\n\\r\\n    string private baseURI;\\r\\n\\r\\n    constructor(\\r\\n        string memory _baseURI,\\r\\n        address _proxyRegistryAddress,\\r\\n        address _accountingAddress,\\r\\n        address _legendz\\r\\n    )\\r\\n    ERC721(\\\"NullHeroes\\\",\\\"NULLHEROES\\\")\\r\\n    {\\r\\n        baseURI = _baseURI;\\r\\n        proxyRegistryAddress = _proxyRegistryAddress;\\r\\n        accountingAddress = _accountingAddress;\\r\\n        legendz = LEGENDZ(_legendz);\\r\\n\\r\\n        // classes - warrior: 0 | rogue: 1 | wizard: 2 | cultist: 3 | mercenary: 4 | ranger: 5\\r\\n        traits[0] = [1, 5, 3, 2, 4, 0];\\r\\n\\r\\n        // races - human: 0 | orc: 1 | elf: 2 | undead: 3 | ape: 4 | human: 5\\r\\n        traits[1] = [5, 0, 1, 3, 5, 0, 1, 4, 1, 5, 2, 0, 3, 0, 1, 5];\\r\\n\\r\\n        // base attribute points - 1 to 6\\r\\n        traits[2] = [1, 2, 3, 2, 2, 5, 1, 3, 2, 4, 1, 1, 2, 2, 3, 2, 5, 3, 6, 2, 2, 4, 3, 1, 3, 1, 4, 1, 1, 2, 1, 4, 2, 1, 3, 1, 2, 1, 2, 1, 1];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * mints genesis heroes for the sender\\r\\n     * @param amount the amount of heroes to mint\\r\\n     */\\r\\n    function enrollGenesisHeroes(uint256 amount) external payable whenNotPaused {\\r\\n        uint256 totalSupply = _owners.length;\\r\\n        if (totalSupply >= MAX_GENESIS_TOKENS) revert NotEnoughTokens();\\r\\n        if (amount > MAX_TOKENS_PER_TX) revert TooMuchTokensPerTx();\\r\\n        if (msg.value < MINT_GENESIS_PRICE * amount) revert NotEnoughEther();\\r\\n\\r\\n        uint256 seed = _random(totalSupply);\\r\\n        for (uint i; i < amount; i++) {\\r\\n            heroes[i + totalSupply] = _generate(seed >> i, true);\\r\\n            _mint(_msgSender(), i + totalSupply);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * mints heroes for the sender\\r\\n     * @param amount the amount of heroes to mint\\r\\n     */\\r\\n    function enrollHeroes(uint256 amount) external whenNotPaused {\\r\\n        uint256 totalSupply = _owners.length;\\r\\n        if (totalSupply < MAX_GENESIS_TOKENS) revert SaleNotStarted();\\r\\n        if (totalSupply + amount > MAX_TOKENS) revert NotEnoughTokens();\\r\\n        if (amount > MAX_TOKENS_PER_TX) revert TooMuchTokensPerTx();\\r\\n\\r\\n        // check $LEGENDZ balance\\r\\n        uint balance = legendz.balanceOf(_msgSender());\\r\\n        uint cost = MINT_PRICE * amount;\\r\\n\\r\\n        if (cost > balance) revert NotEnoughLegendz();\\r\\n\\r\\n        // burn $LEGENDZ\\r\\n        legendz.burn(_msgSender(), cost);\\r\\n\\r\\n        uint256 seed = _random(totalSupply);\\r\\n        for (uint i; i < amount; i++) {\\r\\n            heroes[i + totalSupply] = _generate(seed >> i, false);\\r\\n            _mint(_msgSender(), i + totalSupply);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * mints free genesis heroes for a community member\\r\\n     * @param amount the amount of genesis heroes to mint\\r\\n     * @param recipient address of the recipient\\r\\n     */\\r\\n    function enrollGenesisHeroesForGiveaway(address recipient, uint256 amount) external onlyOwner whenNotPaused {\\r\\n        uint256 totalSupply = _owners.length;\\r\\n        if (totalSupply >= MAX_GENESIS_TOKENS) revert NotEnoughTokens();\\r\\n        if (amount > MAX_TOKENS_PER_TX) revert TooMuchTokensPerTx();\\r\\n        if (giveawayGenesisTokens + amount > MAX_GENESIS_TOKENS_GIVEAWAYS) revert NotEnoughGiveaways();\\r\\n\\r\\n        giveawayGenesisTokens += amount;\\r\\n\\r\\n        uint256 seed = _random(totalSupply);\\r\\n        for (uint i; i < amount; i++) {\\r\\n            heroes[i + totalSupply] = _generate(seed >> i, true);\\r\\n            _mint(recipient, i + totalSupply);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * generates a hero\\r\\n     * @param seed a seed\\r\\n     * @param isGenesis genesis flag\\r\\n     */\\r\\n    function _generate(uint256 seed, bool isGenesis) private view returns (Hero memory h) {\\r\\n\\r\\n        h.level = 1;\\r\\n\\r\\n        h.class = _selectTrait(uint16(seed), 0);\\r\\n        seed >>= 16;\\r\\n        h.race = _selectTrait(uint16(seed), 1);\\r\\n        seed >>= 16;\\r\\n\\r\\n        h.force = _selectTrait(uint16(seed), 2);\\r\\n        seed >>= 16;\\r\\n        h.intelligence = _selectTrait(uint16(seed), 2);\\r\\n        seed >>= 16;\\r\\n        h.agility = _selectTrait(uint16(seed), 2);\\r\\n\\r\\n        // add race modifiers\\r\\n        if (h.race == 0 || h.race == 5) { // human\\r\\n            h.force += 2;\\r\\n            h.intelligence += 2;\\r\\n            h.agility += 2;\\r\\n        } else if (h.race == 1) { // orc\\r\\n            h.force += 4;\\r\\n            h.agility += 2;\\r\\n        } else if (h.race == 3) { // undead\\r\\n            h.force += 7;\\r\\n            h.intelligence += 3;\\r\\n        } else if (h.race == 2) { // elf\\r\\n            h.force += 3;\\r\\n            h.intelligence += 7;\\r\\n            h.agility += 7;\\r\\n        } else if (h.race == 4) { // ape\\r\\n            h.force += 9;\\r\\n            h.intelligence -= 1;\\r\\n            h.agility += 9;\\r\\n        }\\r\\n\\r\\n        // add class modifiers\\r\\n        if (h.class == 0) { // warrior\\r\\n            h.force += 9;\\r\\n        } else if (h.class == 1) { // rogue\\r\\n            h.force += 3;\\r\\n            h.agility += 7;\\r\\n        } else if (h.class == 2) { // wizard\\r\\n            h.agility += 4;\\r\\n            h.force += 1;\\r\\n            h.intelligence += 6;\\r\\n        } else if (h.class == 3) { // cultist\\r\\n            h.intelligence += 9;\\r\\n        } else if (h.class == 4) { // mercenary\\r\\n            h.force += 4;\\r\\n            h.intelligence += 4;\\r\\n            h.agility += 4;\\r\\n        } else if (h.class == 5) { // ranger\\r\\n            h.intelligence += 3;\\r\\n            h.agility += 7;\\r\\n        }\\r\\n\\r\\n        // add genesis modifier\\r\\n        if (isGenesis) {\\r\\n            h.force += 1;\\r\\n            h.agility += 1;\\r\\n            h.intelligence += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * selects a random trait\\r\\n     * @param seed portion of the 256 bit seed\\r\\n     * @param traitType the trait type\\r\\n     * @return the index of the randomly selected trait\\r\\n     */\\r\\n    function _selectTrait(uint256 seed, uint256 traitType) private view returns (uint8) {\\r\\n        if (seed < traits[traitType].length)\\r\\n            return traits[traitType][seed];\\r\\n        return traits[traitType][seed % traits[traitType].length];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * generates a pseudorandom number\\r\\n     * @param seed a value ensure different outcomes for different sources in the same block\\r\\n     * @return a pseudorandom value\\r\\n     */\\r\\n    function _random(uint256 seed) private view returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(\\r\\n                tx.origin,\\r\\n                blockhash(block.number - 1),\\r\\n                block.timestamp,\\r\\n                seed\\r\\n            )));\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 tokenId) internal virtual override {\\r\\n        _owners.push(to);\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * transfers an array of tokens\\r\\n     * @param _from the current owner\\r\\n     * @param _to the new owner\\r\\n     * @param _tokenIds the array of token ids\\r\\n     */\\r\\n    function batchTransferFrom(address _from, address _to, uint256[] calldata _tokenIds) public {\\r\\n        for (uint i; i < _tokenIds.length; i++) {\\r\\n            transferFrom(_from, _to, _tokenIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * transfers an array of tokens\\r\\n     * @param _from the current owner\\r\\n     * @param _to the new owner\\r\\n     * @param _tokenIds the ids of the tokens\\r\\n     * @param _data the transfer data\\r\\n     */\\r\\n    function batchSafeTransferFrom(address _from, address _to, uint256[] calldata _tokenIds, bytes memory _data) public {\\r\\n        for (uint i; i < _tokenIds.length; i++) {\\r\\n            safeTransferFrom(_from, _to, _tokenIds[i], _data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * level up a hero\\r\\n     * @param tokenId the id of the token\\r\\n     * @param attribute the attribute to update - force: 0 | intelligence: 1 | agility: 2\\r\\n     */\\r\\n    function levelUp(uint256 tokenId, uint8 attribute) external {\\r\\n        if (!proxies[_msgSender()]) revert OnlyAuthorizedOperators();\\r\\n        if (!_exists(tokenId)) revert NonExistentToken();\\r\\n        if (heroes[tokenId].level > 99) revert LevelMax();\\r\\n\\r\\n        heroes[tokenId].level += 1;\\r\\n        if (attribute == 0)\\r\\n            heroes[tokenId].force += 1;\\r\\n        else if (attribute == 1)\\r\\n            heroes[tokenId].intelligence += 1;\\r\\n        else if (attribute == 2)\\r\\n            heroes[tokenId].agility += 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * gets a hero token\\r\\n     * @param tokenId the id of the token\\r\\n     * @return a hero struct\\r\\n     */\\r\\n    function getHero(uint256 tokenId) public view returns (Hero memory) {\\r\\n        if (!_exists(tokenId)) revert NonExistentToken();\\r\\n        return heroes[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * gets the tokens of an owner\\r\\n     * @param owner owner's address\\r\\n     * @return an array of the corresponding owner's token ids\\r\\n     */\\r\\n    function tokensOfOwner(address owner) public view returns(uint256[] memory) {\\r\\n        uint256 tokenCount = balanceOf(owner);\\r\\n        if (tokenCount == 0) return new uint256[](0);\\r\\n\\r\\n        uint256[] memory tokensIds = new uint256[](tokenCount);\\r\\n        for (uint i; i < tokenCount; i++) {\\r\\n            tokensIds[i] = tokenOfOwnerByIndex(owner, i);\\r\\n        }\\r\\n        return tokensIds;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        if (!_exists(tokenId)) revert NonExistentToken();\\r\\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenId)));\\r\\n    }\\r\\n\\r\\n    function contractURI() public view returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * updates base URI\\r\\n     * @param _baseURI the new base URI\\r\\n     */\\r\\n    function setBaseURI(string memory _baseURI) external onlyOwner {\\r\\n        baseURI = _baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * updates proxy registry address\\r\\n     * @param _proxyRegistryAddress proxy registry address\\r\\n     */\\r\\n    function setProxyRegistryAddress(address _proxyRegistryAddress) external onlyOwner {\\r\\n        proxyRegistryAddress = _proxyRegistryAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * sets a proxy's authorization\\r\\n     * @param proxyAddress address of the proxy\\r\\n     * @param authorized the new authorization value\\r\\n     */\\r\\n    function setProxy(address proxyAddress, bool authorized) external onlyOwner {\\r\\n        proxies[proxyAddress] = authorized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * burns a token\\r\\n     * @param tokenId the id of the token\\r\\n     */\\r\\n    function burn(uint256 tokenId) public {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"not approved to burn\\\");\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * withdraws from contract's balance\\r\\n     */\\r\\n    function withdraw() public onlyOwner {\\r\\n        (bool success, ) = accountingAddress.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"failed to send balance\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * enables the contract's owner to pause / unpause minting\\r\\n     * @param paused the new pause flag\\r\\n     */\\r\\n    function setPaused(bool paused) external onlyOwner {\\r\\n        if (paused) _pause();\\r\\n        else _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * updates the genesis mint price\\r\\n     * @param price new price\\r\\n     */\\r\\n    function updateGenesisMintPrice(uint256 price) external onlyOwner {\\r\\n        MINT_GENESIS_PRICE = price;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * updates the mint price\\r\\n     * @param price new price\\r\\n     */\\r\\n    function updateMintPrice(uint256 price) external onlyOwner {\\r\\n        MINT_PRICE = price;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * overrides approvals to avoid opensea and operator contracts to generate approval gas fees\\r\\n     * @param _owner the current owner\\r\\n     * @param _operator the operator\\r\\n     */\\r\\n    function isApprovedForAll(address _owner, address _operator) public view override returns (bool) {\\r\\n        OpenSeaProxyRegistry proxyRegistry = OpenSeaProxyRegistry(proxyRegistryAddress);\\r\\n        if (address(proxyRegistry.proxies(_owner)) == _operator || proxies[_operator]) return true;\\r\\n        return super.isApprovedForAll(_owner, _operator);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ncontract OwnableDelegateProxy { }\\r\\ncontract OpenSeaProxyRegistry {\\r\\n    mapping(address => OwnableDelegateProxy) public proxies;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/LEGENDZ.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nerror OnlyAuthorizedOperators();\\r\\nerror OwnerAuthorizationLocked();\\r\\n\\r\\ncontract LEGENDZ is ERC20, Ownable {\\r\\n\\r\\n    // mapping from address to whether or not it can mint / burn\\r\\n    mapping(address => bool) proxies;\\r\\n\\r\\n    constructor() ERC20(\\\"Legendz\\\", \\\"$LEGENDZ\\\") {\\r\\n        proxies[_msgSender()] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * mints $LEGENDZ to a recipient\\r\\n     * @param to the recipient of the $LEGENDZ\\r\\n     * @param amount the amount of $LEGENDZ to mint\\r\\n     */\\r\\n    function mint(address to, uint256 amount) external {\\r\\n        if (!proxies[_msgSender()]) revert OnlyAuthorizedOperators();\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * burns $LEGENDZ of a holder\\r\\n     * @param from the holder of the $LEGENDZ\\r\\n     * @param amount the amount of $LEGENDZ to burn\\r\\n     */\\r\\n    function burn(address from, uint256 amount) external {\\r\\n        if (!proxies[_msgSender()]) revert OnlyAuthorizedOperators();\\r\\n        _burn(from, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * sets a proxy's authorization\\r\\n     * @param proxyAddress address of the proxy\\r\\n     * @param authorized the new authorization value\\r\\n     */\\r\\n    function setProxy(address proxyAddress, bool authorized) public onlyOwner {\\r\\n        if (proxyAddress == owner()) revert OwnerAuthorizationLocked();\\r\\n        proxies[proxyAddress] = authorized;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/HeroStakes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./LEGENDZ.sol\\\";\\r\\nimport \\\"./NullHeroes.sol\\\";\\r\\n\\r\\nerror CannotSendDirectly();\\r\\nerror ZeroAddress();\\r\\nerror NotOwnedToken();\\r\\nerror TooEarlyToClaim();\\r\\n\\r\\nabstract contract HeroStakes is Ownable, IERC721Receiver, Pausable {\\r\\n\\r\\n    // Stake struct\\r\\n    struct Stake {\\r\\n        address owner;\\r\\n        uint256 lastClaim;\\r\\n    }\\r\\n\\r\\n    // max per transaction\\r\\n    uint8 public immutable maxTokensPerTx;\\r\\n\\r\\n    // stakes\\r\\n    Stake[40000] public stakes;\\r\\n\\r\\n    // $LEGENDZ contract\\r\\n    LEGENDZ internal legendz;\\r\\n\\r\\n    // NullHeroes contract\\r\\n    NullHeroes internal nullHeroes;\\r\\n\\r\\n    // lock-up period\\r\\n    uint256 public minDaysToClaim;\\r\\n\\r\\n    constructor(address _legendz, address _nullHeroes, uint8 _maxTokensPerTx) {\\r\\n        legendz = LEGENDZ(_legendz);\\r\\n        nullHeroes = NullHeroes(_nullHeroes);\\r\\n        maxTokensPerTx = _maxTokensPerTx + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * stakes some heroes\\r\\n     * @param _tokenIds an array of tokenIds to stake\\r\\n     */\\r\\n    function stakeHeroes(uint256[] calldata _tokenIds) external virtual whenNotPaused {\\r\\n        if (_tokenIds.length > maxTokensPerTx) revert TooMuchTokensPerTx();\\r\\n\\r\\n        nullHeroes.batchTransferFrom(_msgSender(), address(this), _tokenIds);\\r\\n\\r\\n        for (uint i; i < _tokenIds.length; i++) {\\r\\n            Stake storage stake = stakes[_tokenIds[i]];\\r\\n            stake.owner = _msgSender();\\r\\n            stake.lastClaim = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * claims the reward of some heroes\\r\\n     * @param _tokenIds an array of tokenIds to claim reward from\\r\\n     */\\r\\n    function claimReward(uint256[] calldata _tokenIds) external virtual whenNotPaused {\\r\\n        if (_tokenIds.length > maxTokensPerTx) revert TooMuchTokensPerTx();\\r\\n\\r\\n        uint256 reward;\\r\\n        for (uint i; i < _tokenIds.length; i++) {\\r\\n            Stake storage stake = stakes[_tokenIds[i]];\\r\\n\\r\\n            if (stake.owner != _msgSender()) revert NotOwnedToken();\\r\\n            if ((block.timestamp - stake.lastClaim) < minDaysToClaim) revert TooEarlyToClaim();\\r\\n\\r\\n            // resolves reward\\r\\n            reward += _resolveReward(_tokenIds[i]);\\r\\n\\r\\n            // reset last claim\\r\\n            stake.lastClaim = block.timestamp;\\r\\n        }\\r\\n\\r\\n        if (reward > 0)\\r\\n            legendz.mint(_msgSender(), reward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * claims some heroes reward and unstake\\r\\n     * @param _tokenIds an array of tokenIds to claim reward from\\r\\n     */\\r\\n    function unstakeHeroes(uint256[] calldata _tokenIds) external virtual {\\r\\n        if (_tokenIds.length > maxTokensPerTx) revert TooMuchTokensPerTx();\\r\\n\\r\\n        uint256 reward;\\r\\n        for (uint i; i < _tokenIds.length; i++) {\\r\\n            Stake storage stake = stakes[_tokenIds[i]];\\r\\n\\r\\n            if (stake.owner != _msgSender()) revert NotOwnedToken();\\r\\n            if ((block.timestamp - stake.lastClaim) < minDaysToClaim) revert TooEarlyToClaim();\\r\\n\\r\\n            // resolves reward if not paused\\r\\n            if (!paused())\\r\\n                reward += _resolveReward(_tokenIds[i]);\\r\\n\\r\\n            delete stakes[_tokenIds[i]];\\r\\n        }\\r\\n\\r\\n        if (reward > 0)\\r\\n            legendz.mint(_msgSender(), reward);\\r\\n\\r\\n        nullHeroes.batchTransferFrom(address(this), _msgSender(), _tokenIds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * resolves a staked hero's total reward\\r\\n     * @param _tokenId the hero's tokenId\\r\\n     * return the total reward in $LEGENDZ\\r\\n     */\\r\\n    function _resolveReward(uint256 _tokenId) internal virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * estimates a staked hero's total reward\\r\\n     * @param _tokenId the hero's tokenId\\r\\n     * return the estimated total reward in $LEGENDZ\\r\\n     */\\r\\n    function estimateReward(uint256 _tokenId) public view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * estimates an unknown hero's approximative daily reward\\r\\n     * @return the estimated reward\\r\\n     */\\r\\n    function estimateDailyReward() public view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * estimates a hero's daily reward\\r\\n     * @return the reward\\r\\n     */\\r\\n    function estimateDailyReward(uint256 _tokenId) public view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * calculates a base reward out of the last claim timestamp and a daily rate\\r\\n     * @param _dailyReward the legendz rate per day\\r\\n     * @param _lastClaim the amount of days of farming\\r\\n     * @return the total reward in $LEGENDZ\\r\\n     */\\r\\n    function _calculateBaseReward(uint256 _lastClaim, uint256 _dailyReward) internal view returns (uint256) {\\r\\n        return (block.timestamp - _lastClaim) * _dailyReward / 1 days;\\r\\n    }\\r\\n\\r\\n    function tokensOfOwner(address _owner) public view returns (uint256[] memory) {\\r\\n        uint256 tokenCount = _balanceOf(_owner);\\r\\n        if (tokenCount == 0) return new uint256[](0);\\r\\n\\r\\n        uint256[] memory tokenIds = new uint256[](tokenCount);\\r\\n        uint256 index;\\r\\n        for (uint i; i < stakes.length; i++) {\\r\\n            if (stakes[i].owner == _owner){\\r\\n                tokenIds[index++] = i;\\r\\n                if (index == tokenCount)\\r\\n                    return tokenIds;\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"HeroStakes: missing tokens\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * counts the number of tokens staked by an owner\\r\\n     * @param _owner the owner\\r\\n     * return the token count\\r\\n     */\\r\\n    function _balanceOf(address _owner) internal view returns (uint)\\r\\n    {\\r\\n        if(_owner == address(0)) revert ZeroAddress();\\r\\n        uint count;\\r\\n        for (uint i; i < stakes.length; ++i) {\\r\\n            if( _owner == stakes[i].owner )\\r\\n                ++count;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * enables owner to pause / unpause staking\\r\\n     * @param _paused the new contract paused state\\r\\n     */\\r\\n    function setPaused(bool _paused) external onlyOwner {\\r\\n        if (_paused) _pause();\\r\\n        else _unpause();\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address from,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        if(from != address(0x0)) revert CannotSendDirectly();\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\r\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\r\\n * account but rips out the core of the gas-wasting processing that comes from OpenZeppelin.\\r\\n */\\r\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _owners.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < _owners.length, \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256 tokenId) {\\r\\n        require(index < balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n\\r\\n        uint count;\\r\\n        for (uint i; i < _owners.length; i++) {\\r\\n            if (owner == _owners[i]) {\\r\\n                if(count == index) return i;\\r\\n                else count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert(\\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    address[] internal _owners;\\r\\n\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC165, IERC165)\\r\\n    returns (bool)\\r\\n    {\\r\\n        return\\r\\n        interfaceId == type(IERC721).interfaceId ||\\r\\n        interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n        super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint)\\r\\n    {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n\\r\\n        uint count;\\r\\n        for (uint i; i < _owners.length; ++i) {\\r\\n            if( owner == _owners[i] )\\r\\n                ++count;\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n    {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(\\r\\n            owner != address(0),\\r\\n            \\\"ERC721: owner query for nonexistent token\\\"\\r\\n        );\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721: approved query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n    {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n    {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n            \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(from, to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return tokenId < _owners.length && _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\r\\n    internal\\r\\n    view\\r\\n    virtual\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721: operator query for nonexistent token\\\"\\r\\n        );\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner ||\\r\\n        getApproved(tokenId) == spender ||\\r\\n        isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n        _owners.push(to);\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n        _owners[tokenId] = address(0);\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(\\r\\n            ERC721.ownerOf(tokenId) == from,\\r\\n            \\\"ERC721: transfer of token that is not own\\\"\\r\\n        );\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try\\r\\n            IERC721Receiver(to).onERC721Received(\\r\\n                _msgSender(),\\r\\n                from,\\r\\n                tokenId,\\r\\n                _data\\r\\n            )\\r\\n            returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\r\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n                    );\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_legendz\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nullHeroes\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dailyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_force\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_intelligence\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_agility\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotSendDirectly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooEarlyToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuchTokensPerTx\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agility\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"estimateDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"estimateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"force\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intelligence\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerTx\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDaysToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeHeroes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeHeroes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_force\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_intelligence\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_agility\",\"type\":\"uint8\"}],\"name\":\"updateDungeon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Dungeons", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000028c55276adaee1b9807bae4420c99cdc26c987ff000000000000000000000000eb4def805e565e0cd4df158a111aa2f2a4940a83000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000007", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}