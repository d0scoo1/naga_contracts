{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n// Part: Context\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Part: I3Pool\r\n\r\ninterface I3Pool {\r\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\r\n        external;\r\n\r\n        function get_virtual_price() external view returns(uint256);\r\n}\r\n\r\n// Part: IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: IStaking\r\n\r\ninterface IStaking {\r\n\r\n    struct ProposalState {\r\n        uint256 proposalTime;\r\n        uint256 iBZRXWeight;\r\n        uint256 lpBZRXBalance;\r\n        uint256 lpTotalSupply;\r\n    }\r\n\r\n    struct AltRewardsUserInfo {\r\n        uint256 rewardsPerShare;\r\n        uint256 pendingRewards;\r\n    }\r\n\r\n    function getCurrentFeeTokens()\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    function maxUniswapDisagreement()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n\r\n    function isPaused()\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function fundsWallet()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n\r\n    function callerRewardDivisor()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n\r\n    function maxCurveDisagreement()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function rewardPercent()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function addRewards(uint256 newBZRX, uint256 newStableCoin)\r\n        external;\r\n\r\n    function stake(\r\n        address[] calldata tokens,\r\n        uint256[] calldata values\r\n    )\r\n        external;\r\n\r\n    function unstake(\r\n        address[] calldata tokens,\r\n        uint256[] calldata values\r\n    )\r\n        external;\r\n\r\n\r\n    function earned(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 bzrxRewardsEarned,\r\n            uint256 stableCoinRewardsEarned,\r\n            uint256 bzrxRewardsVesting,\r\n            uint256 stableCoinRewardsVesting,\r\n            uint256 sushiRewardsEarned\r\n        );\r\n\r\n    function pendingCrvRewards(address account)\r\n    external\r\n    view\r\n    returns (\r\n        uint256 bzrxRewardsEarned,\r\n        uint256 stableCoinRewardsEarned,\r\n        uint256 bzrxRewardsVesting,\r\n        uint256 stableCoinRewardsVesting,\r\n        uint256 sushiRewardsEarned\r\n    );\r\n\r\n    function getVariableWeights()\r\n        external\r\n        view\r\n        returns (uint256 vBZRXWeight, uint256 iBZRXWeight, uint256 LPTokenWeight);\r\n\r\n    function balanceOfByAsset(\r\n        address token,\r\n        address account)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    function balanceOfByAssets(\r\n        address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 bzrxBalance,\r\n            uint256 iBZRXBalance,\r\n            uint256 vBZRXBalance,\r\n            uint256 LPTokenBalance,\r\n            uint256 LPTokenBalanceOld\r\n        );\r\n\r\n    function balanceOfStored(\r\n        address account)\r\n        external\r\n        view\r\n        returns (uint256 vestedBalance, uint256 vestingBalance);\r\n\r\n    function totalSupplyStored()\r\n        external\r\n        view\r\n        returns (uint256 supply);\r\n\r\n    function vestedBalanceForAmount(\r\n        uint256 tokenBalance,\r\n        uint256 lastUpdate,\r\n        uint256 vestingEndTime)\r\n        external\r\n        view\r\n        returns (uint256 vested);\r\n\r\n    function votingBalanceOf(\r\n        address account,\r\n        uint256 proposalId)\r\n        external\r\n        view\r\n        returns (uint256 totalVotes);\r\n\r\n    function votingBalanceOfNow(\r\n        address account)\r\n        external\r\n        view\r\n        returns (uint256 totalVotes);\r\n\r\n    function votingFromStakedBalanceOf(\r\n        address account)\r\n        external\r\n        view\r\n        returns (uint256 totalVotes);\r\n\r\n    function _setProposalVals(\r\n        address account,\r\n        uint256 proposalId)\r\n        external\r\n        returns (uint256);\r\n\r\n    function exit()\r\n        external;\r\n\r\n    function addAltRewards(address token, uint256 amount)\r\n        external;\r\n\r\n    function governor()\r\n        external\r\n        view\r\n        returns(address);\r\n\r\n}\r\n\r\n// Part: Ownable\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// Part: PausableGuardian_0_8\r\n\r\ncontract PausableGuardian_0_8 is Ownable {\r\n    // keccak256(\"Pausable_FunctionPause\")\r\n    bytes32 internal constant Pausable_FunctionPause = 0xa7143c84d793a15503da6f19bf9119a2dac94448ca45d77c8bf08f57b2e91047;\r\n\r\n    // keccak256(\"Pausable_GuardianAddress\")\r\n    bytes32 internal constant Pausable_GuardianAddress = 0x80e6706973d0c59541550537fd6a33b971efad732635e6c3b99fb01006803cdf;\r\n\r\n    modifier pausable() {\r\n        require(!_isPaused(msg.sig) || msg.sender == getGuardian(), \"paused\");\r\n        _;\r\n    }\r\n\r\n    function _isPaused(bytes4 sig) public view returns (bool isPaused) {\r\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\r\n        assembly {\r\n            isPaused := sload(slot)\r\n        }\r\n    }\r\n\r\n    function toggleFunctionPause(bytes4 sig) public {\r\n        require(msg.sender == getGuardian() || msg.sender == owner(), \"unauthorized\");\r\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\r\n        assembly {\r\n            sstore(slot, 1)\r\n        }\r\n    }\r\n\r\n    function toggleFunctionUnPause(bytes4 sig) public {\r\n        // only DAO can unpause, and adding guardian temporarily\r\n        require(msg.sender == getGuardian() || msg.sender == owner(), \"unauthorized\");\r\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\r\n        assembly {\r\n            sstore(slot, 0)\r\n        }\r\n    }\r\n\r\n    function changeGuardian(address newGuardian) public {\r\n        require(msg.sender == getGuardian() || msg.sender == owner(), \"unauthorized\");\r\n        assembly {\r\n            sstore(Pausable_GuardianAddress, newGuardian)\r\n        }\r\n    }\r\n\r\n    function getGuardian() public view returns (address guardian) {\r\n        assembly {\r\n            guardian := sload(Pausable_GuardianAddress)\r\n        }\r\n    }\r\n}\r\n\r\n// File: ConvertAndAdminister.sol\r\n\r\ncontract ConvertAndAdminister is PausableGuardian_0_8 {\r\n    address public implementation;\r\n    address public constant crv3 = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\r\n    address public constant pool3 = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\r\n    IERC20 public constant USDC =\r\n        IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    address public constant STAKING = 0x16f179f5C344cc29672A58Ea327A26F64B941a63; //set to staking contract\r\n        address public constant TREASURY = 0xfedC4dD5247B93feb41e899A09C44cFaBec29Cbc;\r\n    event Distributed(address indexed sender, uint256 treasury, uint256 stakers);\r\n\r\n    function distributeFees() external pausable {\r\n        _convertTo3Crv();\r\n                uint256 total = IERC20(crv3).balanceOf(address(this));\r\n                uint256 toTreasury = total*1000/3500;\r\n                IERC20(crv3).transfer(TREASURY,toTreasury); //20% goes to treasury and the amount sent here is 70%. Formula is 0.7/0.7/0.5 = 0.2\r\n                uint256 toStakers = IERC20(crv3).balanceOf(address(this));\r\n        _addRewards(toStakers);\r\n        emit Distributed(msg.sender, toTreasury, toStakers);\r\n    }\r\n\r\n    //internal functions\r\n\r\n    function _convertTo3Crv() internal returns(uint256 amountUsed) {\r\n                amountUsed = USDC.balanceOf(address(this));\r\n                uint256 min_amount = (amountUsed*1e12*1e18/I3Pool(pool3).get_virtual_price())*995/1000; //0.5% slippage on minting\r\n        I3Pool(pool3).add_liquidity([0, amountUsed, 0], min_amount);\r\n    }\r\n\r\n    function _addRewards(uint256 amount) internal {\r\n        IStaking(STAKING).addRewards(0, amount);\r\n    }\r\n\r\n    //Owner functions\r\n\r\n    function setApprovals(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(token).approve(spender, 0);\r\n        IERC20(token).approve(spender, amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakers\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STAKING\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"_isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"changeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"toggleFunctionPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"toggleFunctionUnPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvertAndAdminister", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab07f199e8a21438b1b133c95f27ad013ed122a3e16a101c83d7964fd929b5e1"}]}