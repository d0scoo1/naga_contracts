{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AGState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IAGStakeFull.sol\\\";\\r\\nimport \\\"./interfaces/IAlphaGangGenerative.sol\\\";\\r\\n\\r\\ncontract AGState {\\r\\n    IAGStake constant AGStake =\\r\\n        IAGStake(0xdb7a1FFCB7beE3b161279c370383c0a3D0459865);\\r\\n    IAlphaGangGenerative constant AlphaGangG2 =\\r\\n        IAlphaGangGenerative(0x125808292F4Bb11Bf2D01b070d94E19490f7f4Dc);\\r\\n\\r\\n    function stakedG2TokensOfOwner(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 supply = AlphaGangG2.totalSupply();\\r\\n\\r\\n        uint256 ownerStakedTokenCount = AGStake.ownerG2StakedCount(account);\\r\\n        uint256[] memory tokens = new uint256[](ownerStakedTokenCount);\\r\\n\\r\\n        uint256 index = 0;\\r\\n        for (uint256 tokenId = 1; tokenId <= supply; tokenId++) {\\r\\n            if (AGStake.vaultG2(account, tokenId) > 0) {\\r\\n                tokens[index] = tokenId;\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n        return tokens;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAGStakeFull.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAGStake {\\r\\n    event StakedG2(address owner, uint256[] tokenIds, uint256 timestamp);\\r\\n    event UnstakedG2(address owner, uint256[] tokenIds, uint256 timestamp);\\r\\n    event StakedOG(\\r\\n        address owner,\\r\\n        uint256[] tokenIds,\\r\\n        uint256[] counts,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event StakedForMint(\\r\\n        address owner,\\r\\n        uint256[] tokenIds,\\r\\n        uint256[] counts,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event UnstakedOG(\\r\\n        address owner,\\r\\n        uint256[] tokenIds,\\r\\n        uint256[] counts,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event Claimed(address owner, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    function ogAllocation(address _owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 _allocation);\\r\\n\\r\\n    function vaultG2(address, uint256) external view returns (uint256);\\r\\n\\r\\n    function stakeG2(uint256[] calldata tokenIds) external;\\r\\n\\r\\n    function updateOGAllocation(address _owner, uint256 _count) external;\\r\\n\\r\\n    function ownerG2StakedCount(address) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlphaGangGenerative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IAlphaGangGenerative {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function SUPPLY_MAX() external view returns (uint256);\\r\\n\\r\\n    function mintActive(uint8 mintType) external view returns (bool);\\r\\n\\r\\n    function tokensOfOwner(address _owner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory ownerTokens);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedG2TokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AGState", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}