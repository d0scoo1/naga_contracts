{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n[[\"TJDD1NbxfinVmprJLBqwk1X1j5biQWWmUc\",100000000000000]]     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n}\r\n\r\n\r\ncontract CalypsoPayout is Ownable {\r\n    struct Payout {\r\n        address receiver;\r\n        uint256 amount;\r\n    }\r\n\r\n    event MassBasePayout(uint256 totalAmount, string id);\r\n    event MassTokenPayout(uint256 totalAmount, address tokenAddress, string id);\r\n\r\n\r\n    function massBasePayout(address[] calldata massAddress, uint256[] calldata massAmount, string calldata id) payable external {\r\n        require(massAddress.length == massAmount.length, \"Arrays should have the same length\");\r\n\r\n        uint256 totalAmount = msg.value;\r\n\r\n        uint256 totalAmountInPayout = evaluateTotalAmount(massAmount);\r\n\r\n        require(totalAmountInPayout == totalAmount, \"Amount do not match\");\r\n\r\n        for (uint256 i = 0; i < massAddress.length; ++i) {\r\n            (bool sent, bytes memory data) = massAddress[i].call{value: massAmount[i]}(\"\");\r\n            require(sent, \"Failed to send Ether\");\r\n        }\r\n\r\n        emit MassBasePayout(totalAmount, id);\r\n    }\r\n    \r\n    function massTokenPayout(address[] calldata massAddress, uint256[] calldata massAmount,  address tokenAddress, string calldata id) external {\r\n        require(massAddress.length == massAmount.length, \"Arrays should have the same length\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n\r\n        uint256 totalAmountInPayout = evaluateTotalAmount(massAmount);\r\n        \r\n        require(totalAmountInPayout <= token.allowance(msg.sender, address(this)), \"Not enough tokens for mass payout\");\r\n\r\n        (bool sentAll, bytes memory data) = tokenAddress.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), totalAmountInPayout));\r\n        require(sentAll, \"Failed to send Tokens\");\r\n\r\n\r\n        for (uint256 i = 0; i < massAddress.length; ++i) {\r\n            (bool sent, bytes memory data) = tokenAddress.call(abi.encodeWithSignature(\"transfer(address,uint256)\", massAddress[i], massAmount[i]));\r\n            require(sent, \"Failed to send Tokens\");\r\n        }\r\n\r\n        emit MassTokenPayout(totalAmountInPayout, tokenAddress, id);\r\n    }\r\n    \r\n    \r\n    function evaluateTotalAmount(uint256[] calldata massAmount) internal pure returns (uint256) {\r\n        uint256 totalAmountInPayout = 0;\r\n\r\n        for (uint256 i = 0; i < massAmount.length; ++i) {\r\n            totalAmountInPayout += massAmount[i];\r\n        }\r\n\r\n        return totalAmountInPayout;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"MassBasePayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"MassTokenPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"massAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"massAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"massBasePayout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"massAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"massAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"massTokenPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CalypsoPayout", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b83cdf763e57f9ddad9587baebbe5ffd5bb23f87da1401bf44b19e5867fff48b"}]}