{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC721Listings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Basic listing management for ERC721 NFTs\\n/// @author Sam King (samking.eth)\\n/// @notice Allows the contract owner or token owner to list ERC721 tokens\\ncontract ERC721Listings is Ownable {\\n    /**************************************************************************\\n     * STORAGE\\n     *************************************************************************/\\n\\n    /// @notice The address of the contract with tokens e.g. Manifold\\n    address public tokenAddress;\\n\\n    /// @notice The original minter of the tokens\\n    /// @dev Used in `safeTransferFrom` when a user purchases a token\\n    address public tokenOwnerAddress;\\n\\n    /// @notice The address where purchase proceeds will be sent\\n    /// @dev Defaults to `tokenOwnerAddress` but can be updated later\\n    address payable public payoutAddress;\\n\\n    /// @notice Status for listings\\n    /// @dev Payments revert for listings that are inactive or executed\\n    /// @dev Active being 0 saves gas on creation because most listings will be set to active\\n    enum ListingStatus {\\n        ACTIVE,\\n        INACTIVE,\\n        EXECUTED\\n    }\\n\\n    /// @notice Stores price and status for a listing\\n    struct Listing {\\n        uint256 price;\\n        ListingStatus status;\\n    }\\n\\n    /// @notice Listing storgage by token id\\n    mapping(uint256 => Listing) private listings;\\n\\n    /**************************************************************************\\n     * EVENTS\\n     *************************************************************************/\\n\\n    /// @notice When a listing is created\\n    /// @param tokenId The token ID that was listed\\n    /// @param price The price of the listing\\n    event ListingCreated(\\n        uint256 indexed tokenId,\\n        uint256 price,\\n        ListingStatus indexed status\\n    );\\n\\n    /// @notice When a listings price or status is updated\\n    /// @param tokenId The token ID of the listing that was updated\\n    /// @param price The new listing price\\n    /// @param status The new listing status\\n    event ListingUpdated(\\n        uint256 indexed tokenId,\\n        uint256 price,\\n        ListingStatus indexed status\\n    );\\n\\n    /// @notice When a listing is purchased by a buyer\\n    /// @param tokenId The token ID that was purchased\\n    /// @param price The price the buyer paid\\n    /// @param buyer The buyer of the token ID\\n    event ListingPurchased(\\n        uint256 indexed tokenId,\\n        uint256 price,\\n        address indexed buyer\\n    );\\n\\n    /**************************************************************************\\n     * ERRORS\\n     *************************************************************************/\\n\\n    error IncorrectPaymentAmount(uint256 expected, uint256 provided);\\n    error IncorrectConfiguration();\\n    error ListingExecuted();\\n    error ListingInactive();\\n    error NotAuthorized();\\n    error PaymentFailed();\\n\\n    /**************************************************************************\\n     * MODIFIERS\\n     *************************************************************************/\\n\\n    modifier onlyOwnerOrMinter() {\\n        if (msg.sender != tokenOwnerAddress && msg.sender != owner()) {\\n            revert NotAuthorized();\\n        }\\n        _;\\n    }\\n\\n    /**************************************************************************\\n     * INIT\\n     *************************************************************************/\\n\\n    /// @param _tokenAddress The address of the contract with tokens\\n    /// @param _tokenOwnerAddress The original minter of the tokens\\n    constructor(address _tokenAddress, address _tokenOwnerAddress) {\\n        tokenAddress = _tokenAddress;\\n        tokenOwnerAddress = _tokenOwnerAddress;\\n        payoutAddress = payable(_tokenOwnerAddress);\\n    }\\n\\n    /**************************************************************************\\n     * LISTING ADMIN\\n     *************************************************************************/\\n\\n    /// @notice Internal function to set listing values in storage\\n    /// @dev Reverts on listings that have already been executed\\n    /// @param tokenId The tokenId to set listing information for\\n    /// @param price The price to list the token at\\n    /// @param setActive If the listing should be set to active or not\\n    function _setListing(\\n        uint256 tokenId,\\n        uint256 price,\\n        bool setActive\\n    ) internal {\\n        Listing storage listing = listings[tokenId];\\n        if (listing.status == ListingStatus.EXECUTED) revert ListingExecuted();\\n        listing.price = price;\\n        listing.status = setActive\\n            ? ListingStatus.ACTIVE\\n            : ListingStatus.INACTIVE;\\n        emit ListingCreated(tokenId, price, listing.status);\\n    }\\n\\n    /// @notice Sets information about a listing\\n    /// @param tokenId The token id to set listing information for\\n    /// @param price The price to list the token id at\\n    /// @param setActive If the listing should be set to active or not\\n    function createListing(\\n        uint256 tokenId,\\n        uint256 price,\\n        bool setActive\\n    ) external onlyOwnerOrMinter {\\n        _setListing(tokenId, price, setActive);\\n    }\\n\\n    /// @notice Sets information about multiple listings\\n    /// @dev tokenIds and prices should be the same length\\n    /// @param tokenIds An array of token ids to set listing information for\\n    /// @param prices An array of prices to list each token id at\\n    /// @param setActive If the listings should be set to active or not\\n    function createListingBatch(\\n        uint256[] memory tokenIds,\\n        uint256[] memory prices,\\n        bool setActive\\n    ) external onlyOwnerOrMinter {\\n        if (tokenIds.length != prices.length) {\\n            revert IncorrectConfiguration();\\n        }\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _setListing(tokenIds[i], prices[i], setActive);\\n        }\\n    }\\n\\n    /// @notice Updates the price of a specific listing\\n    /// @param tokenId The token id to update the price for\\n    /// @param newPrice The new price to set\\n    function updateListingPrice(uint256 tokenId, uint256 newPrice)\\n        external\\n        onlyOwnerOrMinter\\n    {\\n        Listing storage listing = listings[tokenId];\\n        if (listing.status == ListingStatus.EXECUTED) revert ListingExecuted();\\n        listing.price = newPrice;\\n        emit ListingUpdated(tokenId, listing.price, listing.status);\\n    }\\n\\n    /// @notice Flips the listing state between ACTIVE and INACTIVE\\n    /// @dev Only flips between ACTIVE and INACTIVE. Reverts if EXECUTED\\n    /// @param tokenId The token id to update the listing status for\\n    function toggleListingStatus(uint256 tokenId) external onlyOwnerOrMinter {\\n        Listing storage listing = listings[tokenId];\\n        if (listing.status == ListingStatus.EXECUTED) revert ListingExecuted();\\n        listing.status = listing.status == ListingStatus.ACTIVE\\n            ? ListingStatus.INACTIVE\\n            : ListingStatus.ACTIVE;\\n        emit ListingUpdated(tokenId, listing.price, listing.status);\\n    }\\n\\n    /**************************************************************************\\n     * PURCHASING\\n     *************************************************************************/\\n\\n    /// @notice Allows someone to purchase a token\\n    /// @dev Accepts payment, checks if listing can be purchased,\\n    ///      transfers token to new owner and sends payment to payout address\\n    /// @param tokenId The token id to purchase\\n    function purchase(uint256 tokenId) external payable {\\n        Listing storage listing = listings[tokenId];\\n\\n        // Check if the token can be purchased\\n        if (listing.status == ListingStatus.EXECUTED) revert ListingExecuted();\\n        if (listing.status == ListingStatus.INACTIVE) revert ListingInactive();\\n        if (msg.value != listing.price) {\\n            revert IncorrectPaymentAmount({\\n                expected: listing.price,\\n                provided: msg.value\\n            });\\n        }\\n\\n        // Transfer the token from the owner to the buyer\\n        IERC721(tokenAddress).safeTransferFrom(\\n            tokenOwnerAddress,\\n            msg.sender,\\n            tokenId\\n        );\\n\\n        // Set the listing to executed\\n        listing.status = ListingStatus.EXECUTED;\\n\\n        emit ListingPurchased(tokenId, msg.value, msg.sender);\\n    }\\n\\n    /**************************************************************************\\n     * ADMIN\\n     *************************************************************************/\\n\\n    /// @notice Updates the address that minted the original tokens\\n    /// @dev The address is used in the purchase flow to transfer tokens\\n    /// @param _tokenOwnerAddress The original minter of the tokens\\n    function setTokenOwnerAddress(address _tokenOwnerAddress)\\n        external\\n        onlyOwnerOrMinter\\n    {\\n        tokenOwnerAddress = _tokenOwnerAddress;\\n    }\\n\\n    /// @notice Updates the address that receives sale proceeds\\n    /// @param _payoutAddress The address where sale proceeds should be paid to\\n    function setPayoutAddress(address _payoutAddress)\\n        external\\n        onlyOwnerOrMinter\\n    {\\n        payoutAddress = payable(_payoutAddress);\\n    }\\n\\n    /// @notice Withdraw the contract balance to the payout address\\n    function withdraw() external {\\n        (bool sent, ) = payoutAddress.call{value: address(this).balance}(\\\"\\\");\\n        if (!sent) revert PaymentFailed();\\n    }\\n\\n    /**************************************************************************\\n     * GETTERS\\n     *************************************************************************/\\n\\n    /// @notice Gets listing information for a token id\\n    /// @param tokenId The token id to get listing information for\\n    /// @return listing Listing information\\n    function getListing(uint256 tokenId)\\n        external\\n        view\\n        returns (Listing memory listing)\\n    {\\n        listing = listings[tokenId];\\n    }\\n\\n    /// @notice Gets the listing price for a token id\\n    /// @param tokenId The token id to get the listing price for\\n    /// @return price Listing price\\n    function getListingPrice(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 price)\\n    {\\n        price = listings[tokenId].price;\\n    }\\n\\n    /// @notice Gets the listing status for a token id\\n    /// @param tokenId The token id to get the listing status for\\n    /// @return status Listing status\\n    function getListingStatus(uint256 tokenId)\\n        external\\n        view\\n        returns (ListingStatus status)\\n    {\\n        status = listings[tokenId].status;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOwnerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncorrectConfiguration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"}],\"name\":\"IncorrectPaymentAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum ERC721Listings.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ListingPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum ERC721Listings.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ListingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setActive\",\"type\":\"bool\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"setActive\",\"type\":\"bool\"}],\"name\":\"createListingBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum ERC721Listings.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ERC721Listings.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListingStatus\",\"outputs\":[{\"internalType\":\"enum ERC721Listings.ListingStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"setPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwnerAddress\",\"type\":\"address\"}],\"name\":\"setTokenOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"toggleListingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721Listings", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000076501fde1ccb70b2cf4bc25209562b6e4373abb2000000000000000000000000a1db2d6a01890723119af089da69106675285379", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}