{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OCMRenderingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n                mstore(resultPtr, out)\\n                resultPtr := add(resultPtr, 4)\\n            }\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n            mstore(result, encodedLen)\\n        }\\n        return string(result);\\n    }\\n}\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//\\n// Rendering contract for Karma\\n// \\n// created by Metagood\\n//\\n\\n// 1-10000     Public Mint\\n// 10001-20000 Karma1\\n// 20001-30000 Karma2\\n// 30001-30015 Karma3\\n// 0           prereview image\\n// 30016       k3 art unrevealed in public mint\\n\\ncontract OCMRenderingContract is Ownable {\\n    using Strings for uint256;\\n\\n    // used for random distribution of Genesis & Karma\\n    uint8[] private fur_w =[249, 246, 223, 141, 116, 114, 93, 90, 89, 86, 74, 72, 55, 48, 39, 32, 28, 14, 8];\\n    uint8[] private eyes_w = [245, 121, 107, 101, 79, 78, 70, 68, 62, 58, 56, 51, 50, 48, 44, 38, 35, 33, 31, 22, 15, 10, 7];\\n    uint8[] private mouth_w = [252, 172, 80, 79, 56, 49, 37, 33, 31, 30, 28, 27, 26, 23, 22, 18, 15, 14, 13, 12, 11, 10, 10, 10, 9, 8, 7, 7, 6, 5, 5, 4, 3];\\n    uint8[] private earring_w = [251, 32, 29, 17, 16, 8, 5];\\n    uint8[] private clothes_w = [251, 55, 45, 43, 38, 37, 34, 33, 32, 31, 31, 31, 31, 31, 30, 30, 29, 29, 28, 27, 27, 27, 26, 25, 24, 22, 21, 20, 19, 19, 19, 19, 19, 19, 18, 17, 16, 15, 14, 13, 11, 9, 8, 6];\\n    uint8[] private hat_w = [251, 64, 47, 42, 39, 38, 36, 35, 34, 34, 33, 29, 28, 26, 26, 25, 25, 25, 22, 21, 20, 20, 18, 17, 17, 15, 14, 14, 13, 13, 12, 12, 12, 10, 9, 8, 7];\\n\\n    string[2] private type_names = ['Incredible','Divine'];\\n\\n    string[8][2] private bg_names = [[\\\"Midnight\\\",\\\"Cream Soda\\\",\\\"Orange\\\",\\\"Mint\\\",\\\"Sage\\\",\\\"River\\\",\\\"Ocean\\\",\\\"Platinum\\\"],[\\\"Karmic Midnight\\\",\\\"Karmic Cream Soda\\\",\\\"Karmic Orange\\\",\\\"Karmic Mint\\\",\\\"Karmic Sage\\\",\\\"Karmic River\\\",\\\"Karmic Ocean\\\",\\\"Karmic Platinum\\\"]];\\n    string[44][2] private clothes_names = [[\\\"None\\\",\\\"Hoopster\\\",\\\"Rocket Pop\\\",\\\"Sun!RISE\\\",\\\"Nana Crew\\\",\\\"Vibes\\\",\\\"Bellhop\\\",\\\"Banana Lounge\\\",\\\"Neon\\\",\\\"Safari\\\",\\\"Metropolis\\\",\\\"OG Hoodie\\\",\\\"Professional\\\",\\\"Aviator\\\",\\\"Team Karma\\\",\\\"Denim\\\",\\\"Back In Time\\\",\\\"Moto\\\",\\\"Tracksuit\\\",\\\"Zebra\\\",\\\"Taxi\\\",\\\"Retro\\\",\\\"Funky Velvet\\\",\\\"Calavera\\\",\\\"Gladiator\\\",\\\"Powersuit\\\",\\\"Metagood Mage\\\",\\\"Banana Party\\\",\\\"Loungesuit\\\",\\\"Pirate\\\",\\\"Indy\\\",\\\"Western\\\",\\\"Money\\\",\\\"Thriller\\\",\\\"Snappy\\\",\\\"Fabulous\\\",\\\"Mummy\\\",\\\"Diablo\\\",\\\"Starry Night\\\",\\\"Royal\\\",\\\"Viking\\\",\\\"Illustrious Monk\\\",\\\"Mecha Pilot\\\",\\\"Guardian of the Monkeyverse\\\"],[\\\"None\\\",\\\"Baller\\\",\\\"Tie Dye\\\",\\\"Moon!RISE\\\",\\\"Bananza\\\",\\\"Warm Vibes\\\",\\\"Concierge\\\",\\\"Club Bananas\\\",\\\"Links\\\",\\\"Explorer\\\",\\\"Super Monk\\\",\\\"Camo Hoodie\\\",\\\"Monkey Business\\\",\\\"Nana Flyer\\\",\\\"Karma All-Star\\\",\\\"Denim !RISE\\\",\\\"Hover Time\\\",\\\"Punk\\\",\\\"Blingsuit\\\",\\\"Chromopop\\\",\\\"Steampunk\\\",\\\"Light Show\\\",\\\"Crystal Armor\\\",\\\"Bones\\\",\\\"Emperor\\\",\\\"Chief Karma Officer\\\",\\\"Marvelous Metagood Mage\\\",\\\"Surf's Up\\\",\\\"High Roller\\\",\\\"Swashbuckler\\\",\\\"Venom\\\",\\\"Banana Buckaroo\\\",\\\"Stacks\\\",\\\"Ethereal\\\",\\\"Dapper\\\",\\\"Dr. Dream\\\",\\\"Pharaoh\\\",\\\"Inferno\\\",\\\"Galaxy\\\",\\\"Interstellar\\\",\\\"Odin\\\",\\\"Monk of the Year\\\",\\\"Mecha Monk\\\",\\\"Champion of the Monkeyverse\\\"]];\\n    string[7][2] private earring_names = [[\\\"None\\\",\\\"Silver Loop\\\",\\\"Gold Loop\\\",\\\"Cross\\\",\\\"Silver Stud\\\",\\\"Gold Stud\\\",\\\"Diamond\\\"],[\\\"None\\\",\\\"Silver Banana Loop\\\",\\\"Gold Banana Loop\\\",\\\"Golden Banana\\\",\\\"Silver Banana Stud\\\",\\\"Gold Banana Stud\\\",\\\"Diamond Bananas\\\"]];\\n    string[23][2] private eyes_names = [[\\\"Sky\\\",\\\"Green\\\",\\\"Hazel\\\",\\\"Gray\\\",\\\"Lime\\\",\\\"Clever Sky\\\",\\\"Clever Green\\\",\\\"Clever Hazel\\\",\\\"Clever Gray\\\",\\\"Clever Lime\\\",\\\"Clever Blue\\\",\\\"Calm Sky\\\",\\\"Calm Green\\\",\\\"Calm Hazel\\\",\\\"Calm Gray\\\",\\\"Calm Lime\\\",\\\"Calm Blue\\\",\\\"Piercing Sky\\\",\\\"Piercing Green\\\",\\\"Piercing Hazel\\\",\\\"Upgrade\\\",\\\"Starlight Stare\\\",\\\"Laser Eyes\\\"],[\\\"Karmic Sky\\\",\\\"Karmic Green\\\",\\\"Karmic Hazel\\\",\\\"Karmic Gray\\\",\\\"Karmic Lime\\\",\\\"Clever Karmic Sky\\\",\\\"Clever Karmic Green\\\",\\\"Clever Karmic Hazel\\\",\\\"Gray Sus\\\",\\\"Lime Sus\\\",\\\"Blue Sus\\\",\\\"Smooth Sky\\\",\\\"Smooth Green\\\",\\\"Smooth Hazel\\\",\\\"Glimpsing Gray\\\",\\\"Glimpsing Lime\\\",\\\"Glimpsing Blue\\\",\\\"Intense\\\",\\\"Super Sus\\\",\\\"Anime\\\",\\\"Cyborg\\\",\\\"Galactic Gaze\\\",\\\"Karmic Destiny\\\"]];\\n    string[19][2] private fur_names = [[\\\"K1 Monkey\\\",\\\"K1 Wood\\\",\\\"K1 Onyx\\\",\\\"K1 Cinnamon\\\",\\\"K1 Peach\\\",\\\"K1 Coffee\\\",\\\"K1 Crystal\\\",\\\"K1 Rock\\\",\\\"K1 Aqua\\\",\\\"K1 Magma\\\",\\\"K1 Cheetah\\\",\\\"K1 Porcelain\\\",\\\"K1 Frog\\\",\\\"K1 Robot\\\",\\\"K1 Atomic\\\",\\\"K1 Midnight\\\",\\\"K1 Zombie\\\",\\\"K1 Alien\\\",\\\"Gold\\\"],[\\\"K2 Monkey\\\",\\\"K2 Wood\\\",\\\"K2 Onyx\\\",\\\"K2 Cinnamon\\\",\\\"K2 Peach\\\",\\\"K2 Coffee\\\",\\\"K2 Crystal\\\",\\\"K2 Rock\\\",\\\"K2 Aqua\\\",\\\"K2 Magma\\\",\\\"K2 Cheetah\\\",\\\"K2 Porcelain\\\",\\\"K2 Frog\\\",\\\"K2 Robot\\\",\\\"K2 Atomic\\\",\\\"K2 Midnight\\\",\\\"K2 Zombie\\\",\\\"K2 Alien\\\",\\\"Dragon\\\"]];\\n    string[37][2] private hat_names = [[\\\"None\\\",\\\"Neon !RISE\\\",\\\"Rocket Pop\\\",\\\"Beanie\\\",\\\"Safari\\\",\\\"Bellhop\\\",\\\"Newsie\\\",\\\"Panama\\\",\\\"Metropolis\\\",\\\"Trippy\\\",\\\"OG Snapback\\\",\\\"Aviator\\\",\\\"Wayfarer\\\",\\\"Glitz\\\",\\\"Bowler\\\",\\\"Sun!RISE\\\",\\\"Cat Ears\\\",\\\"Mage\\\",\\\"Prism\\\",\\\"Sombrero\\\",\\\"En Vogue\\\",\\\"Viking\\\",\\\"Faux Hawk\\\",\\\"Bandana\\\",\\\"Sgt. Pepper\\\",\\\"Indy\\\",\\\"Cowboy\\\",\\\"Mummy\\\",\\\"Snappy\\\",\\\"Red Racer\\\",\\\"Pirate\\\",\\\"Diablo\\\",\\\"Chic\\\",\\\"Captain\\\",\\\"Monkeysaurus\\\",\\\"Knight\\\",\\\"Crown\\\"],[\\\"None\\\",\\\"Links\\\",\\\"Tie Dye\\\",\\\"X Monk\\\",\\\"Explorer\\\",\\\"Concierge\\\",\\\"Driver\\\",\\\"Panama Rose\\\",\\\"Super Monk\\\",\\\"Psychedelic\\\",\\\"Camo Snapback\\\",\\\"Nana Flyer\\\",\\\"Bucket Bling\\\",\\\"Nightlife\\\",\\\"Party Animal\\\",\\\"Moon!RISE\\\",\\\"Cute Cat Ears\\\",\\\"Marvelous Mage\\\",\\\"Luminescence\\\",\\\"Skulls\\\",\\\"Ibiza\\\",\\\"Odin\\\",\\\"Pink Flame\\\",\\\"Hex Specs\\\",\\\"Imagine\\\",\\\"Venom\\\",\\\"Desperado\\\",\\\"Pharaoh\\\",\\\"Dapper\\\",\\\"Super Racer\\\",\\\"Swashbuckler\\\",\\\"Inferno\\\",\\\"Disco Chic\\\",\\\"Captain Borealis\\\",\\\"Gigasaurus\\\",\\\"Centurion\\\",\\\"Cosmic Crown\\\"]];\\n    string[33][2] private mouth_names = [[\\\"Smile\\\",\\\"Yellow Grin\\\",\\\"Pink Smirk\\\",\\\"Charcoal Smile\\\",\\\"Blue Confident\\\",\\\"Red Confident\\\",\\\"Steel Smirk\\\",\\\"Red Grin\\\",\\\"Cheerful\\\",\\\"Yellow Focused\\\",\\\"Pfft\\\",\\\"Pink Oof\\\",\\\"Charcoal Focused\\\",\\\"Blue Pfft\\\",\\\"Steel Oof\\\",\\\"Silly\\\",\\\"Toothpick\\\",\\\"Delight\\\",\\\"Not Entertained\\\",\\\"Red Twig\\\",\\\"Yellow Twig\\\",\\\"Pink Twig\\\",\\\"Charcoal Twig\\\",\\\"Blue Ladybug\\\",\\\"Gold Ladybug\\\",\\\"Pink Ladybug\\\",\\\"Charcoal Ladybug\\\",\\\"Steel Butterfly\\\",\\\"Red Butterfly\\\",\\\"Blue Butterfly\\\",\\\"Blue Rose\\\",\\\"Fire Rose\\\",\\\"Golden Rose\\\"],[\\\"Karmic Smile\\\",\\\"Karmic Grin\\\",\\\"Not Impressed\\\",\\\"Karmic Doubt\\\",\\\"Unamused\\\",\\\"Mischievous\\\",\\\"Sly\\\",\\\"Beaming\\\",\\\"Sparkle\\\",\\\"Karmic Focus\\\",\\\"Karmic Pfft\\\",\\\"Karmic Oof\\\",\\\"Refreshing\\\",\\\"Downvote\\\",\\\"Fangs\\\",\\\"Divine Sprinkle\\\",\\\"Smarty Pants\\\",\\\"Mouthguard\\\",\\\"Wheat\\\",\\\"Lollipop\\\",\\\"Pizza\\\",\\\"Superpop\\\",\\\"Gilded Feather\\\",\\\"Divine Delight\\\",\\\"Golden Grin\\\",\\\"Bubblegum\\\",\\\"Platinum Martini\\\",\\\"Bubbles\\\",\\\"Rainbow\\\",\\\"Hummingbird\\\",\\\"Ballad of Karma\\\",\\\"Dragon's Breath\\\",\\\"Billion Dollar Bananas\\\"]];\\n\\n    mapping(uint256 => string) public k3_tokenId_to_url; // full url\\n    string public urlBase;   // base url for ipfs submarining\\n    bool public urlBaseLocked = false;\\n\\n    struct Monkey {\\n        uint8 bg;\\n        uint8 fur;\\n        uint8 eyes;\\n        uint8 mouth;\\n        uint8 earring;\\n        uint8 clothes;\\n        uint8 hat;\\n        uint8 karmaType; // 0 means unrevealed\\n        uint256 tokenId;\\n        string url;\\n        string name;\\n    }    \\n\\n    function setBgName(uint8 karmaType, uint8 index, string memory name) external onlyOwner {\\n        bg_names[karmaType-1][index] = name;\\n    }\\n\\n    function setFurName(uint8 karmaType, uint8 index, string memory name) external onlyOwner {\\n        fur_names[karmaType-1][index] = name;\\n    }\\n\\n    function setEyesName(uint8 karmaType, uint8 index, string memory name) external onlyOwner {\\n        eyes_names[karmaType-1][index] = name;\\n    }\\n\\n    function setMouthName(uint8 karmaType, uint8 index, string memory name) external onlyOwner {\\n        mouth_names[karmaType-1][index] = name;\\n    }\\n\\n    function setEarringName(uint8 karmaType, uint8 index, string memory name) external onlyOwner {\\n        earring_names[karmaType-1][index] = name;\\n    }\\n\\n    function setClothesName(uint8 karmaType, uint8 index, string memory name) external onlyOwner {\\n        clothes_names[karmaType-1][index] = name;\\n    }\\n\\n    function setHatName(uint8 karmaType, uint8 index, string memory name) external onlyOwner {\\n        hat_names[karmaType-1][index] = name;\\n    }\\n\\n    function setUrlBase(string memory url) external onlyOwner {\\n        require(!urlBaseLocked, \\\"urlBase is locked\\\");\\n        urlBase = url;\\n    }\\n\\n    function lockUrlBase() external onlyOwner {\\n        urlBaseLocked = true;\\n    }\\n\\n\\n    function setK3Url(uint256 tokenId, string memory url) external onlyOwner {\\n        require(bytes(k3_tokenId_to_url[tokenId]).length == 0, \\\"k3Url already set\\\");\\n        k3_tokenId_to_url[tokenId] = url;\\n    }\\n\\n    function random(string memory input) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(input)));\\n    }\\n\\n    // used to sample from random distribution\\n    function usew(uint8[] memory w,uint256 i) internal pure returns (uint8) {\\n        uint8 ind=0;\\n        uint256 j=uint256(w[0]);\\n        while (j<=i) {\\n            ind++;\\n            j+=uint256(w[ind]);\\n        }\\n        return ind;\\n    }\\n\\n    function getImageURL(uint256 tokenId) private view returns (string memory) {\\n        return string(abi.encodePacked(urlBase, tokenId.toString()));\\n    }\\n\\n    // offset is >= 10000 before the random draw for setting offset once\\n    // offset is the offset for karma public mint\\n    function getMonkey(uint256 tokenId, uint256 offset) public view returns (Monkey memory) {\\n        Monkey memory monkey;\\n        monkey.tokenId = tokenId;\\n\\n        if (tokenId <= 10000) { // public mint has k1, k2, k3\\n            if (offset >= 10000) { \\n                monkey.karmaType = 0;\\n                monkey.url = getImageURL(0); // unrevealed\\n                return monkey;\\n            } \\n            tokenId = (tokenId + offset) % 10000; // random shift added\\n            if (tokenId == 0) {\\n                tokenId = 10000;\\n            }\\n            monkey.karmaType = publicMintKarmaDistribution(tokenId);\\n            if (monkey.karmaType == 3) {\\n                monkey.url = k3_tokenId_to_url[monkey.tokenId];\\n                if (bytes(monkey.url).length == 0) {\\n                  monkey.url = getImageURL(30016); // unrevealed K3 in public mint\\n                }\\n                return monkey;\\n            }\\n            monkey.url = getImageURL(tokenId);\\n            tokenId += 91912628207;\\n        } else if (tokenId <= 20000) { // karma1 from D1\\n            monkey.karmaType = 1;\\n            monkey.url = getImageURL(tokenId);\\n            tokenId = 22839 - tokenId;\\n        } else if (tokenId <= 30000) { // karma2 from D2\\n            monkey.karmaType = 2;\\n            monkey.url = getImageURL(tokenId);\\n            tokenId = 32839 - tokenId;\\n        } else { // karma3 from D3\\n            monkey.karmaType = 3;\\n            monkey.url = k3_tokenId_to_url[monkey.tokenId]; // Owner manually sets this\\n            return monkey;\\n        }\\n\\n        monkey.bg      = uint8(random(string(abi.encodePacked('A',tokenId.toString()))) % 8);\\n        monkey.fur     = usew(fur_w,random(string(abi.encodePacked('<rect width=\\\"300\\\" height=\\\"120\\\" x=\\\"99\\\" y=\\\"400\\\" style=\\\"fill:#',tokenId.toString())))%1817);\\n        monkey.eyes    = usew(eyes_w,random(string(abi.encodePacked('C',tokenId.toString())))%1429);\\n        monkey.mouth   = usew(mouth_w,random(string(abi.encodePacked('D',tokenId.toString())))%1112);\\n        monkey.earring = usew(earring_w,random(string(abi.encodePacked('E',tokenId.toString())))%358);\\n        monkey.clothes = usew(clothes_w,random(string(abi.encodePacked('F',tokenId.toString())))%1329);\\n        monkey.hat     = usew(hat_w,random(string(abi.encodePacked('G',tokenId.toString())))%1111);\\n\\n        // avoid collision in Karma from Genesis + Dessert1/2\\n        if (tokenId==7403) {\\n            monkey.hat++; // fix collision\\n        }\\n        return monkey;\\n    }\\n\\n    function publicMintKarmaDistribution(uint256 id) public pure returns (uint8) {\\n        uint256 r = (uint256(keccak256(abi.encode((id+21620000).toString())))) % 10000; // this is the fixed sequence with the desired rarity distribution\\n        if (r < 5) {\\n            return 3; // 5 Karma3\\n        } else if (r >= 8500) {\\n            return 2; // 15% Karma2\\n        } else {\\n            return 1; // 85% Karma1\\n        }\\n    } \\n\\n    // get string attributes of properties, used in tokenURI call\\n    //  { \\\"trait_type\\\": \\\"Hat\\\", \\\"value\\\": \\\"xxx\\\" }, \\n    function getTraits(Monkey memory monkey) internal view returns (string memory) {\\n        if (monkey.karmaType == 0) {\\n          return '[{\\\"trait_type\\\": \\\"Status\\\", \\\"value\\\": \\\"Not Revealed\\\"}]';\\n        } else if (monkey.karmaType == 3) {\\n          return '[{\\\"trait_type\\\": \\\"Type\\\", \\\"value\\\": \\\"Celestial\\\"}]';\\n        }\\n        string memory str = string(abi.encodePacked('[{\\\"trait_type\\\": \\\"Type\\\", \\\"value\\\": \\\"', type_names[monkey.karmaType - 1],\\n          '\\\"},{\\\"trait_type\\\": \\\"Background\\\", \\\"value\\\": \\\"', bg_names[monkey.karmaType-1][monkey.bg],\\n          '\\\"},{\\\"trait_type\\\": \\\"Fur\\\", \\\"value\\\": \\\"', fur_names[monkey.karmaType-1][monkey.fur],\\n          '\\\"},{\\\"trait_type\\\": \\\"Eyes\\\", \\\"value\\\": \\\"', eyes_names[monkey.karmaType-1][monkey.eyes],\\n          '\\\"},{\\\"trait_type\\\": \\\"Mouth\\\", \\\"value\\\": \\\"', mouth_names[monkey.karmaType-1][monkey.mouth],\\n          '\\\"},{\\\"trait_type\\\": \\\"Earring\\\", \\\"value\\\": \\\"', earring_names[monkey.karmaType-1][monkey.earring],\\n          '\\\"},{\\\"trait_type\\\": \\\"Clothes\\\", \\\"value\\\": \\\"', clothes_names[monkey.karmaType-1][monkey.clothes],\\n          '\\\"},{\\\"trait_type\\\": \\\"Hat\\\", \\\"value\\\": \\\"', hat_names[monkey.karmaType-1][monkey.hat],\\n          '\\\"}]'));\\n        return str;\\n    }    \\n\\n    function tokenURI(uint256 tokenId, uint256 offset) external view returns (string memory) {\\n        Monkey memory monkey = getMonkey(tokenId, offset);        \\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Karma #', tokenId.toString(), \\n            '\\\", \\\"description\\\": \\\"Karma is your membership into the Monkeyverse\\\", \\\"image\\\": \\\"', monkey.url,\\n            '\\\", \\\"attributes\\\":', getTraits(monkey), '}' ))));\\n        return string(abi.encodePacked('data:application/json;base64,', json));\\n    }    \\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getMonkey\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bg\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"fur\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"earring\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"clothes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hat\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"karmaType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct OCMRenderingContract.Monkey\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"k3_tokenId_to_url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUrlBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"publicMintKarmaDistribution\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"karmaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setBgName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"karmaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setClothesName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"karmaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setEarringName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"karmaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setEyesName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"karmaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setFurName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"karmaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setHatName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setK3Url\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"karmaType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setMouthName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"setUrlBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"urlBase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"urlBaseLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OCMRenderingContract", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://748ab9e0436a3bbb730c0991bb8eaa6b7cc5bab7f8bf99863d3177cb0cf42339"}]}