{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Beach.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\nccloool:::cc::::cc:::::cccccloooooool;;loddc...............,:'....''...,cc...''...,ll.................';:;,',,'',,;,';:;;:lll::clc;;;;;\\nccccllc:::cc:::::::::::c:clccllloolllooooodo,.............,loc'.......:dkkl,;odooodxxl:;;'..............',...........''.';ccc:;:c;....'\\n::::::::::cc::::::;;:::cclllcccloooollloooddl:,,;:,...';clooddo,.....,lxkkxxxkkkxxxxxddxxdoc,.':cllc;'.....''.''..........,,,'.''......\\n::::::;;:;::;;;;;;;::::ccclllccllllllloooooooooooool:clddddddddo:..';ldxkkxxxxxxxxxxdxxdddxxdodxxxxxxxo:,'cdddxxdolldl::,.........;clc'\\n:;;;;;:;:;:;;;;:::;;:::::cclccllccllllddolodoooooddododddodoodxddoodddoxkxxxxxxxdxxddxxdooddoddxkxxkkkkkxdkOxxkOOkkOOkkko:,'';c:';dkOkd\\n;,,,;;;;::;;,,;;::;,;:;;::cccccccllllllolooooooooooooollooloooodddoooddxkxddxxddddxddxxoodddddddxxxkkkkkkxkkxkkkkkkxkOkxkOOxxkkkxxkkOOO\\n,,,,;;,;;;,,,,;;;;;,;;;;;::::ccclollccclloollllloolllllcccclooodoodddddddxdodddddddddddddddddooodddxkxkOkxkxxkOkkkxxkkOkkkOOOkkOOkxkkkO\\n',,,,,',,,,,,,,,,'',,,,',,;::ccccccclcccloollolllolllcclccllccloooddddoodxddxddxdoooododdoloolodxdddxxxkkkxxkkOkkkkkkxxdxkkkOOkkOkxkkxk\\n'',,,'''''''''''....'''''',;::::::cc:c::clc:clllllllllcccc:ccclloodxdoodooooddddoooooooooollooooodxxxkxkkxkxkkkkkkxxkxxdxkkkkxxkkkxkOkx\\n'''''..'''...''........''..',,,,;:c:;;;;:c::cccccclllcccc::::cclllodooloolloddooolllloololcclollddddxkxddkkxxkkkxxxxkkkkxxkkxxdkOkkxxkO\\n.............................''',,,,,,,;::::::cc::::ccc::;;;;;::clccccllollllooollccccllccccclllooooodxddxxxxkxxxxxxxkkkkxxxdxxxkkxxxxx\\n.......................................',,;:;;;:;;;;;:;;,,,,,,;;:cc:::cllc:cccllcccc:;:c::::ccccllooodddddkkxxxxddxxxxxxxxxddxxxxkkxxxx\\n..........................................''',,,,;;,,,''......'',;;,,,;:::;:::cc::::;:::;;;;;;;:ccllooolododddxdddxxxddxddxxxdodxxxxxdd\\n..................'',,..,;;...................''.''''.................'',;;;;:::;,,,,,,'''..',,;:cccllloooloddxoodxkxddodddxxoodxddddoo\\n...............',;;;;coxxxkxolllc:,........';coddol:'.............:lllll;'''',,,..;coddddol:,...,;:oxkxxolloodddkOO0kdoooodddoooddoddoo\\n.....',,;,',,,,,,;;;,:OXXXXXXXXXXXKOd:;;,:dOKXXXXXXXOl'....,,;:;;xKXXXN0;......;lk0XXXXXXXXX0xc...,kXXXklllclold0XXKklllllooolloooooooo\\n'',,,,,,,,,,',,,,,,,'l0XXKkddxxxOKXXXx:;;lkKOxdllxKXXKd;;;;:::lkKXXXXXX0c..'',o0XXXKkdddoxOKXXO:..,OXXKo,;;:clcdKXX0dccc::ccccccclllccl\\n''',,'',,,,''''''''''oXXXk:,,,;,:OXXXx;,;,;c;,,,,c0XXXd,',;,;d0XX0KXXXXkc:::oOXXX0xl:::;;:coxoc:;'lKXXO,..'.',;xXXXOc,,''',,;,,;:cc:::c\\n'''''''''''''''''''.,xXXXOdoooddOKXKk:'',,'':oddx0XXKx;''',lkKXKdo0NXXKo::::xXXX0o;;::;;;:::;::::cOXXX0dlllllooOXXKo'...........,;;;,,;\\n'...'...''....'.....;OXXXXXXXXXXXXXx;...''.'oXNXXXXKo,''.;dKXKxc,lKXXX0c,;,cOXXXd;,,;;;,;;,;;;;::l0XXXXXXXXXXXXXXX0c',;clc:;,;;........\\n....................cKXX0ollllodOXXKo'......:oooxKXX0c..cOXXXOolokXXXX0ol;.:OXXXd''',,,,,''',,,,,l0XXKOkkxkxxk0XXX0lclllccclloo:,'..,,'\\n....................dXXXd'......oKXXk'...'.......dXXXx.'kNXXXXXXXXXXXXXNK:.'dXXX0c'..''''';l:,'',dKXXOl:::::clkXXXkc::cc::::ccc:c:;;;;,\\n...................'kXXXkcccclld0XXKo..;d0kl:;;:o0XXKl..clllllllxKXXXKdlc...'xXXXKxlc::clx0X0o'.,xXXXx;,,;;;:l0XXKd::::::;;::c:;;;,''..\\n...................;0NXXXXXXXXXXXKkc...l0XXXXKKXXXKOc...........cKXXXO;.......ckKXXXXXXXXXX0d:..;OXXKc....',;oKXX0c,'''',',;;;;'.......\\n...................,ooooooooooolc,...',,:lx000KKKOd;...,:;......:k000Oxooc;;;:clllodxxxdol:'....'lddl'......':oodc'.........'.........,\\n.................................':codxxooddxkxxkxxocodxkkxdoooccododdxxddxkxxkxoc;;;,..''',;'...........'...........'...........';coox\\n................................,cxxxkxdxxdodxddodxddxkxdxkxdddoooooddodddxxdxkxoodddollddooddo:'.,cl:::ll:'..':lc::lollccc,'..'cdxdxxx\\n....................;c:;;col:;:llooxkxxdodxdoodxdolodxxoloddkdlooodxdodxxddddddxdododdoooooooddollooddoolllc:clodxdooodxddxxdlooxxddkOk\\n::;;;;:;'...';;cc:cloodoodooolllllloxxdllddoxdoddooooddoddooddddolldooddloollllooloooooddoloolodolloooodoooolooloooolodxxdodooooxxoodxo\\ndlclocldolllccclooolloolol:cooolccclllollodooooollooccloollodddoloolllolldlcllooooodocclooloolllllollloxolollccoollooolodloollllddlcodl\\n:lccllolcoool::cclllllc:ccccllcc::lccldollccc:lolcllcllol:cclooollllloolllccldllllll::cc:ccloodolcccccloccc:ccccoolllooooodoloccddlcddo\\ncccccc::c:cllc:::c::cccclclc:cc;;:::::cccc:;::cllccc:clllc:lcccclclllool::ccclc:ll::cccc:::ccccccc:::lllccc:::cclccllcccloollcc:looooll\\nc:,,,,;;:;;;::;;,,;;:::::::;,,;,;:;;;::::cc::;,;:cc::cllcc:clol::;:cccllc:;:cc:;:;;cl:;;;;;;;;,;c:;;;:clc;;::::;;;;:cccccll:clc:ldolc;:\\n,,,,,,,,'',,,,,,;:;,,,,',,,,,,;,,,''',,,,,'',,,,,;:;;:::;:;;cc::;;::::::;,,,',;,,',;:;,''',,,,,;,'',,',,,,,,,;,,,,,;;;:;:clc:c:cddc:ccc\\n..'...........''''''....''...''..............'..'''''';:;,,',,',,,,,;:,,,'''..'...''.....''...''..'''''.........'..',;;,,,,,:;,:ol;;;;,\\n...........................................................''''''''..'..'.'...........................................'.','''..;dc,'''.\\n,;;;;;;;;,,,''''.......'',,;;::cccccccccccc::;;,'..............................',;;::cccc::;;,,'''''',,;;:::cc:;,'.............lx:'....\\n0KK0KKKK0000OOOOOkOOOOOO0000KKKKKKKKKKKKKKKKKKKK0Okdolc:;;,'''''',,,,;::clodxkO00KKKKKKKXKKKKK00000000KKKKKKKKKKKOkdl:,.......cOx,....;\\nKKKKKKKK00KKK0KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK0KKKKK00K00000000KK0KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK0Oxddddk0Ko..:ok0\\nKKKKKKKKKKKKKKK00KKKKKKKKKKKK0KKKKKKKKK0KKKKKKKKKKK0KKK00KKKKK00KKKKKK00KKKKKKKKKKKKKKKKKKKK00KKKKKKKKKK00KKKKKKKKKKKKKKKKKKK0KKl'oKK00\\n*/\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"./BeachLibrary.sol\\\";\\n\\ninterface IERC20Burnable {\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\\ninterface ISeafood {\\n  function decimals() external view returns (uint8);\\n}\\n\\ncontract Beach is ERC721Enumerable, ERC721Royalty, Ownable {\\n  bool private _revealed = false;\\n  string private _baseURIPath = \\\"https://url.b34ch.xyz/ipfs/\\\";\\n  string private _placeholderURI = \\\"Qmb4efNTGFfFeMmYNoMWKwhPkvQkfeNLo4kgZqi72JAL6S\\\";\\n  string[2] private _revealedPath = [\\\"\\\", \\\"\\\"];\\n  bool private _frozen = false;\\n\\n  bytes32 public waveListMerkleRoot;\\n  uint public MAX_SUPPLY = 1337;\\n  uint public MAX_PER_WALLET = 5;\\n  uint public MAX_PER_TX = 3;\\n  string public provenance = \\\"e36178f2da4018955176de7fc70fa1fdc0dc0679f36d42f60d5a6cafe9691ba1\\\";\\n\\n  address private _lobster;\\n  address private _seafood;\\n\\n  uint private _mintBlock;\\n\\n  string[] private _TRAITS;\\n  string[] private _DICT;\\n\\n  mapping(uint256 => string) private _beachNames;\\n  mapping(uint256 => uint16[8]) private _beachMetadata;\\n  mapping(string => bool) private _existingNames;\\n\\n  uint private AMOUNT_NEEDED_FOR_NAME_CHANGE = 50;\\n\\n  // PaymentSplitter\\n  mapping(address => uint8) private _shares;\\n  mapping(address => uint256) private _released;\\n  mapping(address => uint256) private _balances;\\n  address[] private _payees;\\n  uint256 private _totalShares;\\n  uint256 private _totalSplit;\\n  uint256 private _amountReleased;\\n\\n  event PayeeAdded(address indexed account, uint8 shares);\\n  event PayeeUpdated(address indexed account, uint8 shares);\\n  event PaymentReleased(address indexed account, uint256 amount);\\n  event Revealed();\\n  event NameChanged(uint256 tokenId, string name);\\n\\n  constructor(address lobster_, uint blockToMint_, string[] memory traits_) ERC721(\\\"B34CH DAO\\\", \\\"B34CH\\\") {\\n    _lobster = lobster_;\\n    _setDefaultRoyalty(address(this), 1000);\\n    _mintBlock = blockToMint_ > 100000 ? blockToMint_ : block.number + blockToMint_;\\n    _TRAITS = traits_;\\n  }\\n\\n  function setMerkleRoot(bytes32 waveListRoot_) external onlyOwner {\\n    waveListMerkleRoot = waveListRoot_;\\n  }\\n\\n  function setSeafood(address seafood_) external onlyOwner {\\n    _seafood = seafood_;\\n  }\\n\\n  receive() external payable {\\n  }\\n\\n  /**\\n   * @dev Returns the wallet of a given wallet. Mainly for ease for frontend devs.\\n   * @param wallet_ The wallet to get the tokens of.\\n   */\\n  function walletOfOwner(address wallet_)\\n  public\\n  view\\n  returns (uint256[] memory)\\n  {\\n    return BeachLibrary.walletOfOwner(wallet_, address(this));\\n  }\\n\\n  // Function intended to be triggered by the DAO in case the Gateway or Network has an issue\\n  function updateBaseURI(string memory uri_) external onlyOwner {\\n    require(!_frozen, \\\"B: Frozen\\\");\\n    _baseURIPath = uri_;\\n  }\\n\\n  /**\\n   * @dev Allows the owner to freeze the path so it can't be changed anymore once it has settled\\n   */\\n  function freezeMetadata() external onlyOwner {\\n    _frozen = true;\\n  }\\n\\n  /**\\n   * @dev Gets the path after reveal. The image folder is too big so it had to be split in 2 folders at ID 1000\\n   * @param tokenId_ TokenId to retrieve the path for\\n   */\\n  function getRevealedPath(uint256 tokenId_) internal view returns (string memory) {\\n    return tokenId_ <= 1000 ? _revealedPath[0] : _revealedPath[1];\\n  }\\n\\n  /**\\n   * @dev Builds the contract JSON from on-chain data to serve marketplaces\\n   */\\n  function contractURI() public view returns (string memory) {\\n    return BeachLibrary.buildContractURI(address(this));\\n  }\\n\\n  /**\\n   * @dev Returns the metadata for a token Id\\n   * @param tokenId_ The tokenId to return the metadata for.\\n   */\\n  function tokenURI(uint256 tokenId_)\\n  public\\n  view\\n  override\\n  returns (string memory)\\n  {\\n    _exists(tokenId_);\\n\\n    return BeachLibrary.buildTokenURI(\\n      tokenId_,\\n      beachName(tokenId_),\\n      BeachLibrary.getImagePath(tokenId_, _revealed, _baseURIPath, getRevealedPath(tokenId_), _placeholderURI, true),\\n      BeachLibrary.getImagePath(tokenId_, _revealed, _baseURIPath, getRevealedPath(tokenId_), _placeholderURI, false),\\n      _revealed ? BeachLibrary.dictToMetadata(tokenId_, _TRAITS, _DICT, _beachMetadata) : '[]');\\n  }\\n\\n  /**\\n   * @dev Function mostly for UI / UX so anyone can know whether the mint is opened and block has been reached\\n   */\\n  function isMintLive() public view returns (bool) {\\n    return block.number > _mintBlock;\\n  }\\n\\n  /**\\n   * @dev Mints one or more B34CH NFT up to the MAX per TX and MAX per Wallet.\\n   *      NOTE: During first phase of the mint (the first 137 NFTs), the MAX is over-ridden to 1.\\n   *      If you have been WaveListed, the right pricing will apply automatically.\\n   *      Call getMyPriceForNextMint() in order to know exactly how much you need to send.\\n   * @param count_ The amount of NFTs to mint at once\\n   * @param merkleProof_ The array of proofs needed to calculate your wallet all the way to the root to validate it\\n   */\\n  function gimmeBeaches(uint8 count_, bytes32[] calldata merkleProof_) external payable {\\n    require(block.number > _mintBlock, \\\"B: Mint block not ready\\\");\\n    require((count_ > 0 && count_ <= MAX_PER_TX) && (balanceOf(_msgSender()) + count_ <= MAX_PER_WALLET), \\\"B: Too many beaches\\\");\\n    require(_msgSender() == tx.origin, \\\"B: No contracts\\\");\\n    require((totalSupply() < 137 && balanceOf(_msgSender()) == 0 && count_ == 1) || totalSupply() >= 137, \\\"B: Only 1 in 1st wave\\\");\\n\\n    uint mintPrice = getMyPriceForNextMint(merkleProof_);\\n    require(msg.value == mintPrice * count_, \\\"B: Minting amount incorrect\\\");\\n\\n    for (uint8 i = 0; i < count_; i++) {\\n      _mintABeach(_msgSender());\\n    }\\n  }\\n\\n  /**\\n   * @dev Function to validate of your wallet address is present within the merkle tree or if your balance of LobsterDAO\\n   *      NFT is positive.\\n   * @param merkleProof_ The array of proofs needed to calculate your wallet all the way to the root to validate it\\n   */\\n  function amIWaveListed(bytes32[] calldata merkleProof_) public view returns (bool) {\\n    bool isWaveList = merkleProof_.length > 0 ? MerkleProof.verify(merkleProof_, waveListMerkleRoot, keccak256(abi.encodePacked(_msgSender()))) : false;\\n    return resolveLobster(_msgSender()) >= 1 || isWaveList;\\n  }\\n\\n  /**\\n   * @dev Function to enable the owner to rescue mints or giveaways if required. Not intended to be used.\\n   * @param to_ the address to mint to\\n   */\\n  function safeMint(address to_) public onlyOwner {\\n    _mintABeach(to_);\\n  }\\n\\n  /**\\n   * @dev Internal function to enable the owner to rescue mints or giveaways if required. Not intended to be used.\\n   * @param to_ the address to mint to\\n   */\\n  function _mintABeach(address to_) internal {\\n    require(totalSupply() < MAX_SUPPLY, \\\"B: max supply reached\\\");\\n    _safeMint(to_, totalSupply() + 1);\\n  }\\n\\n  /**\\n   * @dev Method to set the name of the NFT and update metadata accordingly so it's visible on OpenSea / on-chain.\\n   *      The method will make sure you are renaming tokens you own.\\n   *      The name needs to be unique, do not contain invalid characters (mostly just ASCII are allowed) and be short\\n   *      enough.\\n   * @param tokenId_ the token to rename\\n   * @param name_ the new name\\n   */\\n  function setName(uint tokenId_, string memory name_) external {\\n    require(ownerOf(tokenId_) == _msgSender(), \\\"B: You do not own this token\\\");\\n    require(BeachLibrary.validateName(name_), \\\"B: Name is not valid\\\");\\n    require(!nameExists(name_), \\\"B: Name requested is already used\\\");\\n\\n    // The setName process is free until seafood exists\\n    if (_seafood != address(0x0)) {\\n      require(resolveSeafoodBalance(_msgSender()) > AMOUNT_NEEDED_FOR_NAME_CHANGE, \\\"B: You do not have enough balance\\\");\\n      // Burn $BEACH\\n      _burnSeafoodToken(AMOUNT_NEEDED_FOR_NAME_CHANGE);\\n    }\\n\\n    _setName(tokenId_, name_);\\n  }\\n\\n  /**\\n   * @dev Internal method to propagate the name change, focused on name changing (minus validations)\\n   * @param tokenId_ the token to rename\\n   * @param name_ the new name\\n   */\\n  function _setName(uint tokenId_, string memory name_) private {\\n    if (bytes(_beachNames[tokenId_]).length > 0) {\\n      _existingNames[_beachNames[tokenId_]] = false;\\n    }\\n    _beachNames[tokenId_] = name_;\\n    _existingNames[BeachLibrary.toLower(name_)] = true;\\n    emit NameChanged(tokenId_, name_);\\n  }\\n\\n  /**\\n   * @dev Public method to find whether a name is unique or exists already\\n   * @param name_ the name top search for\\n   */\\n  function nameExists(string memory name_) public view returns (bool) {\\n    return _existingNames[BeachLibrary.toLower(name_)];\\n  }\\n\\n  /**\\n   * @dev Helper function to return the name of a beach. It will default the name if the name has never been set,\\n   *      to save gas during mint.\\n   * @param tokenId_ The token ID to return the name of\\n   */\\n  function beachName(uint tokenId_) public view returns (string memory) {\\n    _exists(tokenId_);\\n\\n    bool isEmpty = keccak256(abi.encodePacked(_beachNames[tokenId_])) == keccak256(abi.encodePacked(\\\"\\\")) || keccak256(abi.encodePacked(_beachNames[tokenId_])) == keccak256(bytes(BeachLibrary.toString(tokenId_)));\\n    return string(abi.encodePacked(\\\"Beach \\\", isEmpty ? string(abi.encodePacked(\\\"#\\\", BeachLibrary.toString(tokenId_))) : _beachNames[tokenId_]));\\n  }\\n\\n  /**\\n   * @dev Internal helper function to return the balance of the $Seafood token\\n   * @param account_ The account to retrieve the balance of\\n   */\\n  function resolveSeafoodBalance(address account_) internal view returns (uint) {\\n    return IERC20(_seafood).balanceOf(account_);\\n  }\\n\\n  /**\\n   * @dev Takes a high order amount (for example 10) and returns fully decimal'ed value (10 * 10 ** 18)\\n   * @param amount_ The amount to calculate for\\n   */\\n  function _toFullDecimals(uint amount_) private view returns (uint) {\\n    return amount_ * 10 ** ISeafood(_seafood).decimals();\\n  }\\n\\n  /**\\n   * @dev Internal helper to burn seafood token to change name, if $seafood address has been set\\n   * @param amount_ The amount to burn, in high order (you want to burn 10 $SEAFOOD, amount_ will be 10)\\n   */\\n  function _burnSeafoodToken(uint amount_) private returns (bool) {\\n    require(resolveSeafoodBalance(_msgSender()) >= _toFullDecimals(amount_), \\\"B: Not enough balance\\\");\\n    IERC20Burnable(_seafood).burnFrom(_msgSender(), _toFullDecimals(amount_));\\n    return true;\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721Royalty) {}\\n\\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n  internal\\n  override(ERC721, ERC721Enumerable)\\n  {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n  public\\n  view\\n  override(ERC721Enumerable, ERC721Royalty)\\n  returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  // Beach-specific functions\\n\\n  /***************************\\n   *      Reveal / Mint      *\\n   ***************************/\\n\\n  /**\\n   * @dev Sets the dictionary to build the metadata array from\\n   * @param dict_ The dictionary, basically a simple string array\\n   */\\n  function setDict(string[] memory dict_) public onlyOwner {\\n    require(!_frozen, \\\"B: Frozen\\\");\\n    _DICT = dict_;\\n  }\\n\\n  /**\\n   * @dev This method is very important and sets the metadata that will be used later to build the TokenURI JSON for\\n   *      each and every NFT. It is index based off of the dictionary in order to save space and gas cost.\\n   *      This method effectively prepares for the reveal to happen. It is re-callable until metadata has been frozen\\n   *      to allow for fixing potential mistakes. The process has been tested and validated, but, we never know, and\\n   *      since metadata will be on-chain and virtually frozen, we better make sure.\\n   * @param range_ is the range of metadata currently being uploaded, since the whole thing needs to happen in X tx\\n   * @param metadata_ the metadata itself\\n   */\\n  function setMetadata(uint16[2] calldata range_, uint16[][] calldata metadata_) external onlyOwner {\\n    require(!_frozen && range_[0] > 0 && range_[0] < range_[1] && range_[1] <= 1338, \\\"B: Range incorrect\\\");\\n    for (uint i = 0; i < range_[1] - range_[0]; i++) {\\n      uint tokenId_ = i + range_[0];\\n\\n      _beachMetadata[tokenId_][0] = metadata_[i][0];\\n      _beachMetadata[tokenId_][1] = metadata_[i][1];\\n      _beachMetadata[tokenId_][2] = metadata_[i][2];\\n      _beachMetadata[tokenId_][3] = metadata_[i][3];\\n      _beachMetadata[tokenId_][4] = metadata_[i][4];\\n      _beachMetadata[tokenId_][5] = metadata_[i][5];\\n      _beachMetadata[tokenId_][6] = metadata_[i][6];\\n      _beachMetadata[tokenId_][7] = metadata_[i][7];\\n    }\\n  }\\n\\n  function revealState() public view returns (bool) {\\n    return _revealed;\\n  }\\n\\n  /**\\n   * @dev Reveals the collection and sets the IPFS folders\\n   * @param paths_ An array of 2 IPFS paths to set the images for TokenURI JSON building\\n   */\\n  function reveal(string[] calldata paths_) external onlyOwner {\\n    require(!_revealed, \\\"B: already revealed\\\");\\n    _revealed = true;\\n    _revealedPath[0] = paths_[0];\\n    _revealedPath[1] = paths_[1];\\n    emit Revealed();\\n  }\\n\\n  /**\\n   * @dev Internal helper to check the lobsters balance\\n   * @param target_ The target to check the balance for\\n   */\\n  function resolveLobster(address target_) public view returns (uint) {\\n    return IERC721(_lobster).balanceOf(target_);\\n  }\\n\\n  /**\\n   * @dev A really important method that returns the price for the mint given current supply and whether you're\\n   *      WaveListed or not. It does *not* check whether you are *actually* WaveListed, this is just to get price ranges\\n   * @param isWaveList_ whether or not your are WaveListed. This method does not verify.\\n   */\\n  function getMintPrice(bool isWaveList_) public view returns (uint) {\\n    uint cId = totalSupply() + 1;\\n    uint zero = 0 ether;\\n    uint one = 1 ether;\\n    uint t1 = 0.037 ether;\\n    uint t2 = 0.073 ether;\\n    uint t3 = 0.1 ether;\\n    uint t4 = 0.1337 ether;\\n\\n    if (cId <= 137) {\\n      return isWaveList_ ? zero : one;\\n    } else if (cId > 137 && cId <= 317) {\\n      return isWaveList_ ? t1 : t2;\\n    } else if (cId > 317 && cId <= 713) {\\n      return isWaveList_ ? t2 : t3;\\n    } else if (cId > 713) {\\n      return isWaveList_ ? t3 : t4;\\n    }\\n    return 1 ether;\\n  }\\n\\n  /**\\n   * @dev This method is the one that will be used for Mint and UI / UX to tell you your mint price.\\n   *      It will check the provided merkleProof and your Lobster balance to confirm whether you're WaveListed or not.\\n   * @param merkleProof_ The array of proofs to confirm your address is in the Merkle Tree or not\\n   */\\n  function getMyPriceForNextMint(bytes32[] calldata merkleProof_) public view returns (uint) {\\n    return getMintPrice(amIWaveListed(merkleProof_));\\n  }\\n\\n  /***************************\\n   *                         *\\n   *    ================     *\\n   *    Payment Splitter     *\\n   *    ================     *\\n   *                         *\\n   *  All the methods under  *\\n   *  exist to manage        *\\n   *  Payment Splitting      *\\n   *  during mint and after  *\\n   *                         *\\n   ***************************/\\n\\n  function _addPayee(address account_, uint8 shares_) private {\\n    require(account_ != address(0), \\\"PS: No 0\\\");\\n    require(shares_ > 0, \\\"PS: Shares = 0\\\");\\n    require(_totalShares + shares_ < 256, \\\"PS: Max shares\\\");\\n    require(_payees.length < 256, \\\"PS: Too many sh\\\");\\n\\n    // Flush outstanding balances to ensure that new payees don't mess things up\\n    _splitOutstandingBalance();\\n\\n    // We're checking this one after the balance have been frozen in order to make sure we can't add an address twice\\n    require(_shares[account_] == 0 && _released[account_] == 0 && _balances[account_] == 0, \\\"PS: Account exists\\\");\\n\\n    _payees.push(account_);\\n    _shares[account_] = shares_;\\n    _totalShares += shares_;\\n\\n    emit PayeeAdded(account_, shares_);\\n  }\\n\\n  function addPayee(address account_, uint8 shares_) external onlyOwner {\\n    _addPayee(account_, shares_);\\n  }\\n\\n  function addPayeesBatch(address[] calldata accounts_, uint8[] calldata shares_) external onlyOwner {\\n    for (uint8 i = 0; i < accounts_.length; i++) {\\n      _addPayee(accounts_[i], shares_[i]);\\n    }\\n  }\\n\\n  function _updatePayee(address account_, uint8 shares_) private {\\n    require(account_ != address(0), \\\"PS: Address can't be 0\\\");\\n    require(_released[account_] > 0 || _balances[account_] > 0, \\\"PS: Account doesn't exist\\\");\\n    require(_totalShares - _shares[account_] + shares_ < 256, \\\"PS: Max shares reached\\\");\\n\\n    // Flush outstanding balances to ensure that new payees don't mess things up\\n    _splitOutstandingBalance();\\n\\n    _totalShares -= _shares[account_];\\n\\n    // Update shares\\n    _shares[account_] = shares_;\\n\\n    // Adjust total shares\\n    _totalShares += shares_;\\n\\n    emit PayeeUpdated(account_, shares_);\\n  }\\n\\n  function updatePayee(address account_, uint8 shares_) external onlyOwner {\\n    _updatePayee(account_, shares_);\\n  }\\n\\n  function updatePayeesBatch(address[] calldata accounts_, uint8[] calldata shares_) external onlyOwner {\\n    for (uint8 i = 0; i < accounts_.length; i++) {\\n      _updatePayee(accounts_[i], shares_[i]);\\n    }\\n  }\\n\\n  function _split(uint amount) private {\\n    for (uint8 i = 0; i < _payees.length; i++) {\\n      // Only calculate if the shares are not 0 to avoid un-needed calculations\\n      if (_shares[_payees[i]] == 0) {\\n        delete _payees[i];\\n        continue;\\n      }\\n\\n      // Last account gets the dust\\n      uint256 amountSplit = i < _payees.length - 1 ? amount * _shares[_payees[i]] / _totalShares : address(this).balance - (_totalSplit - _amountReleased);\\n      _balances[_payees[i]] += amountSplit;\\n      _totalSplit += amountSplit;\\n    }\\n  }\\n\\n  function _splitOutstandingBalance() internal {\\n    uint outstandingBalance = address(this).balance - (_totalSplit - _amountReleased);\\n    _split(outstandingBalance);\\n  }\\n\\n  function split() external onlyAccountOrOwner(_msgSender()) {\\n    _splitOutstandingBalance();\\n  }\\n\\n  // dev: This is not supposed to be used. More like an emergency withdraw\\n  //      It assumes that owner() is the DAO address.\\n  function withdrawEthFunds() external onlyOwner {\\n    Address.sendValue(payable(owner()), address(this).balance);\\n  }\\n\\n  function withdrawERC20Funds(address ERC20_) external onlyOwner {\\n    IERC20(ERC20_).transfer(owner(), IERC20(ERC20_).balanceOf(address(this)));\\n  }\\n\\n  function release(address payable account) external onlyAccountOrOwner(account) {\\n    require(_balances[account] > 0, \\\"PS: No balance\\\");\\n\\n    _splitOutstandingBalance();\\n\\n    // Non-re-entrant pre-tx\\n    uint256 amountToSend = _balances[account];\\n    _balances[account] = 0;\\n\\n    Address.sendValue(account, amountToSend);\\n\\n    // Post-tx book-keeping\\n    _released[account] += amountToSend;\\n    _amountReleased += amountToSend;\\n\\n    emit PaymentReleased(account, amountToSend);\\n  }\\n\\n  function accountDetails(address account_) public view onlyAccountOrOwner(account_) returns (uint8, uint256, uint256, uint256) {\\n    return (_shares[account_], _released[account_], _balances[account_], _totalShares);\\n  }\\n\\n  function balanceAvailable() public view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  function totalReceived() public view returns (uint256) {\\n    return address(this).balance + _amountReleased;\\n  }\\n\\n  modifier onlyAccountOrOwner(address account) {\\n    require(owner() == _msgSender() || account == _msgSender(), \\\"Not the owner or account owner\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BeachLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n// Some code are originally from https://etherscan.io/address/0xbad6186e92002e312078b5a1dafd5ddf63d3f731#code\\nlibrary BeachLibrary {\\n  string internal constant TABLE =\\n  \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return \\\"\\\";\\n\\n    // load the table into memory\\n    string memory table = TABLE;\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n    // add some extra buffer at the end required for the writing\\n    string memory result = new string(encodedLen + 32);\\n\\n    assembly {\\n    // set the actual output length\\n      mstore(result, encodedLen)\\n\\n    // prepare the lookup table\\n      let tablePtr := add(table, 1)\\n\\n    // input ptr\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n\\n    // result ptr, jump over length\\n      let resultPtr := add(result, 32)\\n\\n    // run over the input, 3 bytes at a time\\n      for {\\n\\n      } lt(dataPtr, endPtr) {\\n\\n      } {\\n        dataPtr := add(dataPtr, 3)\\n\\n      // read 3 bytes\\n        let input := mload(dataPtr)\\n\\n      // write 4 characters\\n        mstore(\\n        resultPtr,\\n        shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n        mstore(\\n        resultPtr,\\n        shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n        mstore(\\n        resultPtr,\\n        shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n        mstore(\\n        resultPtr,\\n        shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n        )\\n        resultPtr := add(resultPtr, 1)\\n      }\\n\\n    // padding with '='\\n      switch mod(mload(data), 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  function validateName(string memory str) public pure returns (bool){\\n    bytes memory b = bytes(str);\\n    if (b.length < 1) return false;\\n    if (b.length > 25) return false;\\n    // Cannot be longer than 25 characters\\n    if (b[0] == 0x20) return false;\\n    // Leading space\\n    if (b[b.length - 1] == 0x20) return false;\\n    // Trailing space\\n\\n    bytes1 lastChar = b[0];\\n\\n    for (uint i; i < b.length; i++) {\\n      bytes1 char = b[i];\\n\\n      if (char == 0x20 && lastChar == 0x20) return false;\\n      // Cannot contain continuous spaces\\n\\n      if (\\n        !(char >= 0x30 && char <= 0x39) && //9-0\\n      !(char >= 0x41 && char <= 0x5A) && //A-Z\\n      !(char >= 0x61 && char <= 0x7A) && //a-z\\n      !(char == 0x20) //space\\n      )\\n        return false;\\n\\n      lastChar = char;\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Converts the string to lowercase\\n\\t */\\n  function toLower(string memory str) internal pure returns (string memory){\\n    bytes memory bStr = bytes(str);\\n    bytes memory bLower = new bytes(bStr.length);\\n    for (uint i = 0; i < bStr.length; i++) {\\n      // Uppercase character\\n      if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n        bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n      } else {\\n        bLower[i] = bStr[i];\\n      }\\n    }\\n    return string(bLower);\\n  }\\n\\n  /**\\n   * @dev Converts the dictionary into metadata and returns the Token URI JSON\\n   */\\n  function dictToMetadata(uint tokenId_, string[] memory TRAITS_, string[] memory DICT_, mapping(uint256 => uint16[8]) storage beachMetadata_)\\n  public\\n  view\\n  returns (string memory)\\n  {\\n    string memory metadataString;\\n\\n    for (uint8 i = 0; i < beachMetadata_[tokenId_].length; i++) {\\n      metadataString = string(\\n        abi.encodePacked(\\n          metadataString,\\n          '{\\\"trait_type\\\":\\\"',\\n          TRAITS_[i],\\n          '\\\",\\\"value\\\":\\\"',\\n          DICT_[beachMetadata_[tokenId_][i]],\\n          '\\\"}'\\n        )\\n      );\\n\\n      if (i < beachMetadata_[tokenId_].length - 1)\\n        metadataString = string(abi.encodePacked(metadataString, \\\",\\\"));\\n    }\\n\\n    return string(abi.encodePacked(\\\"[\\\", metadataString, \\\"]\\\"));\\n  }\\n\\n  function getImagePath(uint tokenId_, bool revealed_, string memory baseURIPath_, string memory revealedPath_, string memory placeHolderURI_, bool small_) public view returns (bytes memory) {\\n    return revealed_ ?\\n    abi.encodePacked('\\\"image', small_ ? '' : '_large', '\\\": \\\"', baseURIPath_, revealedPath_, '/', toString(tokenId_), small_ ? '.png\\\",' : '_large.png\\\",') :\\n    abi.encodePacked('\\\"image', small_ ? '' : '_large', '\\\": \\\"', baseURIPath_, placeHolderURI_, '\\\",');\\n  }\\n\\n  function buildTokenURI(\\n    uint tokenId_,\\n    string memory beachName_,\\n    bytes memory smallImagePath_,\\n    bytes memory bigImagePath_,\\n    string memory attributes_\\n  ) public view returns (string memory) {\\n    return\\n    string(\\n      abi.encodePacked(\\n        \\\"data:application/json;base64,\\\",\\n        encode(\\n          bytes(\\n            string(\\n              abi.encodePacked(\\n                abi.encodePacked('{\\\"name\\\": \\\"', beachName_, '\\\",'),\\n                '\\\"description\\\": \\\"What\\\\'s the ocean if not Mother Nature\\\\'s generative art? B34CH is procedurally formed by code. The varieties of waves, particles, colors, textures, sizes combine to create digital representations of realistic and surreal beaches.\\\", ',\\n                '\\\"token_id\\\": ', toString(tokenId_), ', ',\\n                smallImagePath_,\\n                bigImagePath_,\\n                '\\\"attributes\\\":',\\n                attributes_,\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  function buildContractURI(address beach_) public view returns (string memory) {\\n    return\\n    string(\\n      abi.encodePacked(\\n        \\\"data:application/json;base64,\\\",\\n        encode(\\n          bytes(\\n            string(\\n              abi.encodePacked(\\n                abi.encodePacked(\\n                  '{',\\n                  '\\\"name\\\": \\\"B34CH DAO\\\",',\\n                  '\\\"description\\\": \\\"What\\\\'s the ocean if not Mother Nature\\\\'s generative art? B34CH is procedurally formed by code. The varieties of waves, particles, colors, textures, sizes combine to create digital representations of realistic and surreal beaches.\\\",',\\n                  '\\\"image\\\": \\\"https://b34ch.page.link/opensea_cover\\\",',\\n                  '\\\"external_link\\\": \\\"https://b34ch.xyz\\\",',\\n                  '\\\"seller_fee_basis_points\\\": 1000,',\\n                  '\\\"fee_recipient\\\": \\\"', addressToString(beach_), '\\\"',\\n                  '}'\\n                )\\n              )\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  function walletOfOwner(address wallet_, address creed_)\\n  public\\n  view\\n  returns (uint256[] memory)\\n  {\\n    uint256 tokenCount = IERC721Enumerable(creed_).balanceOf(wallet_);\\n\\n    uint256[] memory tokensId = new uint256[](tokenCount);\\n    for (uint256 i; i < tokenCount; i++) {\\n      tokensId[i] = IERC721Enumerable(creed_).tokenOfOwnerByIndex(wallet_, i);\\n    }\\n    return tokensId;\\n  }\\n\\n  function addressToString(address account) public pure returns (string memory) {\\n    return bytesToString(abi.encodePacked(account));\\n  }\\n\\n  function bytesToString(bytes memory data) public pure returns (string memory) {\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n    bytes memory str = new bytes(2 + data.length * 2);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n    for (uint i = 0; i < data.length; i++) {\\n      str[2 + i * 2] = alphabet[uint(uint8(data[i] >> 4))];\\n      str[3 + i * 2] = alphabet[uint(uint8(data[i] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address, uint256)\\n    {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/BeachLibrary.sol\": {\r\n        \"BeachLibrary\": \"0x19d876a8595e77244c2bac13844a6eb220bd1ac6\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lobster_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockToMint_\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"traits_\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"shares\",\"type\":\"uint8\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"shares\",\"type\":\"uint8\"}],\"name\":\"PayeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_WALLET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"accountDetails\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"shares_\",\"type\":\"uint8\"}],\"name\":\"addPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"shares_\",\"type\":\"uint8[]\"}],\"name\":\"addPayeesBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof_\",\"type\":\"bytes32[]\"}],\"name\":\"amIWaveListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"beachName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isWaveList_\",\"type\":\"bool\"}],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof_\",\"type\":\"bytes32[]\"}],\"name\":\"getMyPriceForNextMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"count_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof_\",\"type\":\"bytes32[]\"}],\"name\":\"gimmeBeaches\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"nameExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provenance\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"}],\"name\":\"resolveLobster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"paths_\",\"type\":\"string[]\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"dict_\",\"type\":\"string[]\"}],\"name\":\"setDict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"waveListRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[2]\",\"name\":\"range_\",\"type\":\"uint16[2]\"},{\"internalType\":\"uint16[][]\",\"name\":\"metadata_\",\"type\":\"uint16[][]\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seafood_\",\"type\":\"address\"}],\"name\":\"setSeafood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"shares_\",\"type\":\"uint8\"}],\"name\":\"updatePayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"shares_\",\"type\":\"uint8[]\"}],\"name\":\"updatePayeesBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveListMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20_\",\"type\":\"address\"}],\"name\":\"withdrawERC20Funds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEthFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Beach", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000026224a2940bfe258d0dbe947919b62fe321f0420000000000000000000000000000000000000000000000000000000000df36a80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000453414e440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055741544552000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000557415645530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009535041524b4c494e47000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084c4f434154494f4e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054652414d450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007464541545552450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045349474e00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}