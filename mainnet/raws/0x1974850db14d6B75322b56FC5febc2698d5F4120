{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.24;\r\n/** @title -MSFun- v0.2.4\r\n * \u250c\u252c\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u252c\u2510   \u2566\u2566 \u2566\u2554\u2550\u2557\u2554\u2566\u2557  \u250c\u2500\u2510\u252c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u2510\u250c\u250c\u252c\u2510\u250c\u2500\u2510\r\n *  \u2502 \u251c\u2524 \u251c\u2500\u2524\u2502\u2502\u2502   \u2551\u2551 \u2551\u255a\u2550\u2557 \u2551   \u251c\u2500\u2518\u251c\u252c\u2518\u251c\u2524 \u2514\u2500\u2510\u251c\u2524 \u2502\u2502\u2502 \u2502 \u2514\u2500\u2510\r\n *  \u2534 \u2514\u2500\u2518\u2534 \u2534\u2534 \u2534  \u255a\u255d\u255a\u2550\u255d\u255a\u2550\u255d \u2569   \u2534  \u2534\u2514\u2500\u2514\u2500\u2518\u2514\u2500\u2518\u2514\u2500\u2518\u2518\u2514\u2518 \u2534 \u2514\u2500\u2518\r\n *                                  _____                      _____\r\n *                                 (, /     /)       /) /)    (, /      /)          /)\r\n *          \u250c\u2500\u2510                      /   _ (/_      // //       /  _   // _   __  _(/\r\n *          \u251c\u2500\u2524                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\r\n *          \u2534 \u2534                /   /          .-/ _____   (__ /                               \r\n *                            (__ /          (_/ (, /                                      /)\u2122 \r\n *                                                 /  __  __ __ __  _   __ __  _  _/_ _  _(/\r\n * \u250c\u2500\u2510\u252c\u2500\u2510\u250c\u2500\u2510\u250c\u252c\u2510\u252c \u252c\u250c\u2500\u2510\u250c\u252c\u2510                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\r\n * \u251c\u2500\u2518\u251c\u252c\u2518\u2502 \u2502 \u2502\u2502\u2502 \u2502\u2502   \u2502                      (__ /              .-/  \u00a9 Jekyll Island Inc. 2018\r\n * \u2534  \u2534\u2514\u2500\u2514\u2500\u2518\u2500\u2534\u2518\u2514\u2500\u2518\u2514\u2500\u2518 \u2534                                        (_/\r\n *  _           _             _  _  _  _             _  _  _  _  _                                      \r\n *=(_) _     _ (_)==========_(_)(_)(_)(_)_==========(_)(_)(_)(_)(_)================================*\r\n * (_)(_)   (_)(_)         (_)          (_)         (_)       _         _    _  _  _  _                 \r\n * (_) (_)_(_) (_)         (_)_  _  _  _            (_) _  _ (_)       (_)  (_)(_)(_)(_)_               \r\n * (_)   (_)   (_)           (_)(_)(_)(_)_          (_)(_)(_)(_)       (_)  (_)        (_)              \r\n * (_)         (_)  _  _    _           (_)  _  _   (_)      (_)       (_)  (_)        (_)  _  _        \r\n *=(_)=========(_)=(_)(_)==(_)_  _  _  _(_)=(_)(_)==(_)======(_)_  _  _(_)_ (_)========(_)=(_)(_)==*\r\n * (_)         (_) (_)(_)    (_)(_)(_)(_)   (_)(_)  (_)        (_)(_)(_) (_)(_)        (_) (_)(_)\r\n *\r\n * \u2554\u2550\u2557\u250c\u2500\u2510\u250c\u2510\u250c\u250c\u252c\u2510\u252c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u252c\u2510  \u2554\u2550\u2557\u250c\u2500\u2510\u250c\u252c\u2510\u250c\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n * \u2551  \u2502 \u2502\u2502\u2502\u2502 \u2502 \u251c\u252c\u2518\u251c\u2500\u2524\u2502   \u2502   \u2551  \u2502 \u2502 \u2502\u2502\u251c\u2524  \u2502 Inventor \u2502\r\n * \u255a\u2550\u255d\u2514\u2500\u2518\u2518\u2514\u2518 \u2534 \u2534\u2514\u2500\u2534 \u2534\u2514\u2500\u2518 \u2534   \u255a\u2550\u255d\u2514\u2500\u2518\u2500\u2534\u2518\u2514\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n *  \r\n *         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n *         \u2502 MSFun, is an importable library that gives your contract the ability \u2502\r\n *         \u2502 add multiSig requirement to functions.                               \u2502\r\n *         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n *                                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n *                                \u2502 Setup Instructions \u2502\r\n *                                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n * (Step 1) import the library into your contract\r\n * \r\n *    import \"./MSFun.sol\";\r\n *\r\n * (Step 2) set up the signature data for msFun\r\n * \r\n *     MSFun.Data private msData;\r\n *                                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n *                                \u2502 Usage Instructions \u2502\r\n *                                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n * at the beginning of a function\r\n * \r\n *     function functionName() \r\n *     {\r\n *         if (MSFun.multiSig(msData, required signatures, \"functionName\") == true)\r\n *         {\r\n *             MSFun.deleteProposal(msData, \"functionName\");\r\n * \r\n *             // put function body here \r\n *         }\r\n *     }\r\n *                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n *                           \u2502 Optional Wrappers For TeamJust \u2502\r\n *                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n * multiSig wrapper function (cuts down on inputs, improves readability)\r\n * this wrapper is HIGHLY recommended\r\n * \r\n *     function multiSig(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamJust.requiredSignatures(), _whatFunction));}\r\n *     function multiSigDev(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamJust.requiredDevSignatures(), _whatFunction));}\r\n *\r\n * wrapper for delete proposal (makes code cleaner)\r\n *     \r\n *     function deleteProposal(bytes32 _whatFunction) private {MSFun.deleteProposal(msData, _whatFunction);}\r\n *                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n *                             \u2502 Utility & Vanity Functions \u2502\r\n *                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n * delete any proposal is highly recommended.  without it, if an admin calls a multiSig\r\n * function, with argument inputs that the other admins do not agree upon, the function\r\n * can never be executed until the undesirable arguments are approved.\r\n * \r\n *     function deleteAnyProposal(bytes32 _whatFunction) onlyDevs() public {MSFun.deleteProposal(msData, _whatFunction);}\r\n * \r\n * for viewing who has signed a proposal & proposal data\r\n *     \r\n *     function checkData(bytes32 _whatFunction) onlyAdmins() public view returns(bytes32, uint256) {return(MSFun.checkMsgData(msData, _whatFunction), MSFun.checkCount(msData, _whatFunction));}\r\n *\r\n * lets you check address of up to 3 signers (address)\r\n * \r\n *     function checkSignersByAddress(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyAdmins() public view returns(address, address, address) {return(MSFun.checkSigner(msData, _whatFunction, _signerA), MSFun.checkSigner(msData, _whatFunction, _signerB), MSFun.checkSigner(msData, _whatFunction, _signerC));}\r\n *\r\n * same as above but will return names in string format.\r\n *\r\n *     function checkSignersByName(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyAdmins() public view returns(bytes32, bytes32, bytes32) {return(TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerA)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerB)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerC)));}\r\n *                             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n *                             \u2502 Functions In Depth Guide \u2502\r\n *                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n * In the following examples, the Data is the proposal set for this library.  And\r\n * the bytes32 is the name of the function.\r\n *\r\n * MSFun.multiSig(Data, uint256, bytes32) - Manages creating/updating multiSig \r\n *      proposal for the function being called.  The uint256 is the required \r\n *      number of signatures needed before the multiSig will return true.  \r\n *      Upon first call, multiSig will create a proposal and store the arguments \r\n *      passed with the function call as msgData.  Any admins trying to sign the \r\n *      function call will need to send the same argument values. Once required\r\n *      number of signatures is reached this will return a bool of true.\r\n * \r\n * MSFun.deleteProposal(Data, bytes32) - once multiSig unlocks the function body,\r\n *      you will want to delete the proposal data.  This does that.\r\n *\r\n * MSFun.checkMsgData(Data, bytes32) - checks the message data for any given proposal \r\n * \r\n * MSFun.checkCount(Data, bytes32) - checks the number of admins that have signed\r\n *      the proposal \r\n * \r\n * MSFun.checkSigners(data, bytes32, uint256) - checks the address of a given signer.\r\n *      the uint256, is the log number of the signer (ie 1st signer, 2nd signer)\r\n */\r\n\r\nlibrary MSFun {\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // DATA SETS\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // contact data setup\r\n    struct Data \r\n    {\r\n        mapping (bytes32 => ProposalData) proposal_;\r\n    }\r\n    struct ProposalData \r\n    {\r\n        // a hash of msg.data \r\n        bytes32 msgData;\r\n        // number of signers\r\n        uint256 count;\r\n        // tracking of wither admins have signed\r\n        mapping (address => bool) admin;\r\n        // list of admins who have signed\r\n        mapping (uint256 => address) log;\r\n    }\r\n    \r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // MULTI SIG FUNCTIONS\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    function multiSig(Data storage self, uint256 _requiredSignatures, bytes32 _whatFunction)\r\n        internal\r\n        returns(bool) \r\n    {\r\n        // our proposal key will be a hash of our function name + our contracts address \r\n        // by adding our contracts address to this, we prevent anyone trying to circumvent\r\n        // the proposal's security via external calls.\r\n        bytes32 _whatProposal = whatProposal(_whatFunction);\r\n        \r\n        // this is just done to make the code more readable.  grabs the signature count\r\n        uint256 _currentCount = self.proposal_[_whatProposal].count;\r\n        \r\n        // store the address of the person sending the function call.  we use msg.sender \r\n        // here as a layer of security.  in case someone imports our contract and tries to \r\n        // circumvent function arguments.  still though, our contract that imports this\r\n        // library and calls multisig, needs to use onlyAdmin modifiers or anyone who\r\n        // calls the function will be a signer. \r\n        address _whichAdmin = msg.sender;\r\n        \r\n        // prepare our msg data.  by storing this we are able to verify that all admins\r\n        // are approving the same argument input to be executed for the function.  we hash \r\n        // it and store in bytes32 so its size is known and comparable\r\n        bytes32 _msgData = keccak256(msg.data);\r\n        \r\n        // check to see if this is a new execution of this proposal or not\r\n        if (_currentCount == 0)\r\n        {\r\n            // if it is, lets record the original signers data\r\n            self.proposal_[_whatProposal].msgData = _msgData;\r\n            \r\n            // record original senders signature\r\n            self.proposal_[_whatProposal].admin[_whichAdmin] = true;        \r\n            \r\n            // update log (used to delete records later, and easy way to view signers)\r\n            // also useful if the calling function wants to give something to a \r\n            // specific signer.  \r\n            self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;  \r\n            \r\n            // track number of signatures\r\n            self.proposal_[_whatProposal].count += 1;  \r\n            \r\n            // if we now have enough signatures to execute the function, lets\r\n            // return a bool of true.  we put this here in case the required signatures\r\n            // is set to 1.\r\n            if (self.proposal_[_whatProposal].count == _requiredSignatures) {\r\n                return(true);\r\n            }            \r\n        // if its not the first execution, lets make sure the msgData matches\r\n        } else if (self.proposal_[_whatProposal].msgData == _msgData) {\r\n            // msgData is a match\r\n            // make sure admin hasnt already signed\r\n            if (self.proposal_[_whatProposal].admin[_whichAdmin] == false) \r\n            {\r\n                // record their signature\r\n                self.proposal_[_whatProposal].admin[_whichAdmin] = true;        \r\n                \r\n                // update log (used to delete records later, and easy way to view signers)\r\n                self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;  \r\n                \r\n                // track number of signatures\r\n                self.proposal_[_whatProposal].count += 1;  \r\n            }\r\n            \r\n            // if we now have enough signatures to execute the function, lets\r\n            // return a bool of true.\r\n            // we put this here for a few reasons.  (1) in normal operation, if \r\n            // that last recorded signature got us to our required signatures.  we \r\n            // need to return bool of true.  (2) if we have a situation where the \r\n            // required number of signatures was adjusted to at or lower than our current \r\n            // signature count, by putting this here, an admin who has already signed,\r\n            // can call the function again to make it return a true bool.  but only if\r\n            // they submit the correct msg data\r\n            if (self.proposal_[_whatProposal].count == _requiredSignatures) {\r\n                return(true);\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    // deletes proposal signature data after successfully executing a multiSig function\r\n    function deleteProposal(Data storage self, bytes32 _whatFunction)\r\n        internal\r\n    {\r\n        //done for readability sake\r\n        bytes32 _whatProposal = whatProposal(_whatFunction);\r\n        address _whichAdmin;\r\n        \r\n        //delete the admins votes & log.   i know for loops are terrible.  but we have to do this \r\n        //for our data stored in mappings.  simply deleting the proposal itself wouldn't accomplish this.\r\n        for (uint256 i=0; i < self.proposal_[_whatProposal].count; i++) {\r\n            _whichAdmin = self.proposal_[_whatProposal].log[i];\r\n            delete self.proposal_[_whatProposal].admin[_whichAdmin];\r\n            delete self.proposal_[_whatProposal].log[i];\r\n        }\r\n        //delete the rest of the data in the record\r\n        delete self.proposal_[_whatProposal];\r\n    }\r\n    \r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // HELPER FUNCTIONS\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n    function whatProposal(bytes32 _whatFunction)\r\n        private\r\n        view\r\n        returns(bytes32)\r\n    {\r\n        return(keccak256(abi.encodePacked(_whatFunction,this)));\r\n    }\r\n    \r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // VANITY FUNCTIONS\r\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n    // returns a hashed version of msg.data sent by original signer for any given function\r\n    function checkMsgData (Data storage self, bytes32 _whatFunction)\r\n        internal\r\n        view\r\n        returns (bytes32 msg_data)\r\n    {\r\n        bytes32 _whatProposal = whatProposal(_whatFunction);\r\n        return (self.proposal_[_whatProposal].msgData);\r\n    }\r\n    \r\n    // returns number of signers for any given function\r\n    function checkCount (Data storage self, bytes32 _whatFunction)\r\n        internal\r\n        view\r\n        returns (uint256 signature_count)\r\n    {\r\n        bytes32 _whatProposal = whatProposal(_whatFunction);\r\n        return (self.proposal_[_whatProposal].count);\r\n    }\r\n    \r\n    // returns address of an admin who signed for any given function\r\n    function checkSigner (Data storage self, bytes32 _whatFunction, uint256 _signer)\r\n        internal\r\n        view\r\n        returns (address signer)\r\n    {\r\n        require(_signer > 0, \"MSFun checkSigner failed - 0 not allowed\");\r\n        bytes32 _whatProposal = whatProposal(_whatFunction);\r\n        return (self.proposal_[_whatProposal].log[_signer - 1]);\r\n    }\r\n}", "ABI": "[]", "ContractName": "MSFun", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cb85dd29731e38c1a20670a8c5a03153f7f1aff2b7d24f0e75955ccb0d448b1d"}]}