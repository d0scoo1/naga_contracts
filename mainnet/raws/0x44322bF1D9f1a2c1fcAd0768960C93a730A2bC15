{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/TotlePrimary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./lib/Withdrawable.sol\\\";\\nimport \\\"./lib/TokenTransferProxy.sol\\\";\\nimport \\\"./lib/Utils.sol\\\";\\nimport \\\"./lib/Partner.sol\\\";\\nimport \\\"./lib/TokenBalanceLibrary.sol\\\";\\nimport \\\"./exchange_handlers/ExchangeHandler.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title The primary contract for Totle\\ncontract TotlePrimary is Withdrawable, Pausable {\\n    /*\\n     *   State Variables\\n     */\\n\\n    TokenTransferProxy public tokenTransferProxy;\\n\\n    /*\\n     *   Types\\n     */\\n\\n    // Structs\\n    struct Order {\\n        address payable exchangeHandler;\\n        bytes encodedPayload;\\n    }\\n\\n    struct Trade {\\n        address sourceToken;\\n        address destinationToken;\\n        uint256 amount;\\n        Order[] orders;\\n    }\\n\\n    struct Swap {\\n        Trade[] trades;\\n        uint256 minimumDestinationAmount;\\n        uint256 minimumExchangeRate;\\n        uint256 sourceAmount;\\n        uint256 tradeToTakeFeeFrom;\\n        bool takeFeeFromSource; //Takes the fee before the trade if true, takes it after if false\\n        address payable redirectAddress;\\n    }\\n\\n    struct SwapCollection {\\n        Swap[] swaps;\\n        uint256 expirationBlock;\\n        bytes32 id;\\n        uint256 maxGasPrice;\\n        address payable partnerContract;\\n        uint8 tokenCount;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /*\\n     *   Events\\n     */\\n\\n    event LogSwapCollection(\\n        bytes32 indexed id,\\n        address indexed partnerContract,\\n        address indexed user\\n    );\\n\\n    event LogSwap(\\n        bytes32 indexed id,\\n        address sourceAsset,\\n        address destinationAsset,\\n        uint256 sourceAmount,\\n        uint256 destinationAmount,\\n        address feeAsset,\\n        uint256 feeAmount\\n    );\\n\\n    /// @notice Constructor\\n    /// @param _tokenTransferProxy address of the TokenTransferProxy\\n    /// @param _signer the suggester's address that signs the payloads. More can be added with add/removeSigner functions\\n    constructor(address _tokenTransferProxy, address _signer) {\\n        tokenTransferProxy = TokenTransferProxy(_tokenTransferProxy);\\n    }\\n\\n    /*\\n     *   Public functions\\n     */\\n\\n    /// @notice Performs the requested set of swaps\\n    /// @param swaps The struct that defines the collection of swaps to perform\\n    function performSwapCollection(SwapCollection memory swaps)\\n        public\\n        payable\\n        whenNotPaused\\n    {\\n        // Initialize token balances\\n        TokenBalanceLibrary.TokenBalance[]\\n            memory balances = new TokenBalanceLibrary.TokenBalance[](\\n                swaps.tokenCount\\n            );\\n        // Set the ETH balance to what was given with the function call\\n        balances[0] = TokenBalanceLibrary.TokenBalance(\\n            address(Utils.eth_address()),\\n            msg.value\\n        );\\n        // Iterate over swaps and execute individually\\n        for (\\n            uint256 swapIndex = 0;\\n            swapIndex < swaps.swaps.length;\\n            swapIndex++\\n        ) {\\n            performSwap(\\n                swaps.id,\\n                swaps.swaps[swapIndex],\\n                balances,\\n                swaps.partnerContract\\n            );\\n        }\\n        emit LogSwapCollection(swaps.id, swaps.partnerContract, msg.sender);\\n        // Transfer all assets from swap to user\\n        transferAllTokensToUser(balances);\\n    }\\n\\n    /*\\n     *   Internal functions\\n     */\\n\\n    function performSwap(\\n        bytes32 swapCollectionId,\\n        Swap memory swap,\\n        TokenBalanceLibrary.TokenBalance[] memory balances,\\n        address payable partnerContract\\n    ) internal {\\n        // Get the asset for the swap from the user if not already available\\n        transferFromSenderDifference(\\n            balances,\\n            swap.trades[0].sourceToken,\\n            swap.sourceAmount\\n        );\\n\\n        uint256 amountSpentFirstTrade = 0;\\n        uint256 amountReceived = 0;\\n        uint256 feeAmount = 0;\\n        // Iterated over and execute the trades in this swap\\n        for (\\n            uint256 tradeIndex = 0;\\n            tradeIndex < swap.trades.length;\\n            tradeIndex++\\n        ) {\\n            // If we are supposed to take the trade from the input of this trade, then collect it now\\n            if (\\n                tradeIndex == swap.tradeToTakeFeeFrom && swap.takeFeeFromSource\\n            ) {\\n                feeAmount = takeFee(\\n                    balances,\\n                    swap.trades[tradeIndex].sourceToken,\\n                    partnerContract,\\n                    tradeIndex == 0 ? swap.sourceAmount : amountReceived\\n                );\\n            }\\n            uint256 tempSpent;\\n            (tempSpent, amountReceived) = performTrade(\\n                swap.trades[tradeIndex],\\n                balances,\\n                Utils.min(\\n                    tradeIndex == 0 ? swap.sourceAmount : amountReceived,\\n                    balances[\\n                        TokenBalanceLibrary.findToken(\\n                            balances,\\n                            swap.trades[tradeIndex].sourceToken\\n                        )\\n                    ].balance\\n                )\\n            );\\n            // If this is the first trade in the swap then we need to initialize\\n            if (tradeIndex == 0) {\\n                amountSpentFirstTrade = tempSpent + feeAmount;\\n                if (feeAmount != 0) {\\n                    amountSpentFirstTrade += feeAmount;\\n                }\\n            }\\n            // If we are supposed to take the trade from the output of this trade, then collect it now\\n            if (\\n                tradeIndex == swap.tradeToTakeFeeFrom && !swap.takeFeeFromSource\\n            ) {\\n                feeAmount = takeFee(\\n                    balances,\\n                    swap.trades[tradeIndex].destinationToken,\\n                    partnerContract,\\n                    amountReceived\\n                );\\n                amountReceived -= feeAmount;\\n            }\\n        }\\n        emit LogSwap(\\n            swapCollectionId,\\n            swap.trades[0].sourceToken,\\n            swap.trades[swap.trades.length - 1].destinationToken,\\n            amountSpentFirstTrade,\\n            amountReceived,\\n            swap.takeFeeFromSource\\n                ? swap.trades[swap.tradeToTakeFeeFrom].sourceToken\\n                : swap.trades[swap.tradeToTakeFeeFrom].destinationToken,\\n            feeAmount\\n        );\\n        // Validate the swap got a better rate and destination amount than the minimums defined in swap\\n        require(\\n            amountReceived >= swap.minimumDestinationAmount,\\n            \\\"Get less than minimumDestinationAmount\\\"\\n        );\\n        require(\\n            !minimumRateFailed(\\n                swap.trades[0].sourceToken,\\n                swap.trades[swap.trades.length - 1].destinationToken,\\n                swap.sourceAmount,\\n                amountReceived,\\n                swap.minimumExchangeRate\\n            ),\\n            \\\"minimumExchangeRate not met\\\"\\n        );\\n        // Handle forwarding assets if needed\\n        if (\\n            swap.redirectAddress != msg.sender &&\\n            swap.redirectAddress != address(0x0)\\n        ) {\\n            uint256 destinationTokenIndex = TokenBalanceLibrary.findToken(\\n                balances,\\n                swap.trades[swap.trades.length - 1].destinationToken\\n            );\\n            uint256 amountToSend = Math.min(\\n                amountReceived,\\n                balances[destinationTokenIndex].balance\\n            );\\n            transferTokens(\\n                balances,\\n                destinationTokenIndex,\\n                swap.redirectAddress,\\n                amountToSend\\n            );\\n            TokenBalanceLibrary.removeBalance(\\n                balances,\\n                swap.trades[swap.trades.length - 1].destinationToken,\\n                amountToSend\\n            );\\n        }\\n    }\\n\\n    function performTrade(\\n        Trade memory trade,\\n        TokenBalanceLibrary.TokenBalance[] memory balances,\\n        uint256 availableToSpend\\n    ) internal returns (uint256 totalSpent, uint256 totalReceived) {\\n        uint256 tempSpent = 0;\\n        uint256 tempReceived = 0;\\n        // Iterate over orders and execute consecutively\\n        for (\\n            uint256 orderIndex = 0;\\n            orderIndex < trade.orders.length;\\n            orderIndex++\\n        ) {\\n            if (tempSpent >= trade.amount) {\\n                break;\\n            }\\n            (tempSpent, tempReceived) = performOrder(\\n                trade.orders[orderIndex],\\n                availableToSpend - totalSpent,\\n                trade.sourceToken,\\n                balances\\n            );\\n            totalSpent += tempSpent;\\n            totalReceived += tempReceived;\\n        }\\n        // Update balances after performing order\\n        TokenBalanceLibrary.addBalance(\\n            balances,\\n            trade.destinationToken,\\n            totalReceived\\n        );\\n        TokenBalanceLibrary.removeBalance(\\n            balances,\\n            trade.sourceToken,\\n            totalSpent\\n        );\\n    }\\n\\n    function performOrder(\\n        Order memory order,\\n        uint256 targetAmount,\\n        address tokenToSpend,\\n        TokenBalanceLibrary.TokenBalance[] memory balances\\n    ) internal returns (uint256 spent, uint256 received) {\\n        // Hand off order settlement to handler, handling both tokens and ETH as the from asset\\n        if (tokenToSpend == Utils.eth_address()) {\\n            (spent, received) = ExchangeHandler(order.exchangeHandler)\\n                .performOrder{value: targetAmount}(\\n                order.encodedPayload,\\n                targetAmount,\\n                targetAmount\\n            );\\n        } else {\\n            transferTokens(\\n                balances,\\n                TokenBalanceLibrary.findToken(balances, tokenToSpend),\\n                order.exchangeHandler,\\n                targetAmount\\n            );\\n            (spent, received) = ExchangeHandler(order.exchangeHandler)\\n                .performOrder(order.encodedPayload, targetAmount, targetAmount);\\n        }\\n    }\\n\\n    function minimumRateFailed(\\n        address sourceToken,\\n        address destinationToken,\\n        uint256 sourceAmount,\\n        uint256 destinationAmount,\\n        uint256 minimumExchangeRate\\n    ) internal returns (bool failed) {\\n        uint256 sourceDecimals = sourceToken == Utils.eth_address()\\n            ? 18\\n            : Utils.getDecimals(sourceToken);\\n        uint256 destinationDecimals = destinationToken == Utils.eth_address()\\n            ? 18\\n            : Utils.getDecimals(destinationToken);\\n        uint256 rateGot = Utils.calcRateFromQty(\\n            sourceAmount,\\n            destinationAmount,\\n            sourceDecimals,\\n            destinationDecimals\\n        );\\n        return rateGot < minimumExchangeRate;\\n    }\\n\\n    function takeFee(\\n        TokenBalanceLibrary.TokenBalance[] memory balances,\\n        address token,\\n        address payable partnerContract,\\n        uint256 amountTraded\\n    ) internal returns (uint256 feeAmount) {\\n        Partner partner = Partner(partnerContract);\\n        uint256 feePercentage = partner.getTotalFeePercentage();\\n        feeAmount = calculateFee(amountTraded, feePercentage);\\n        uint256 tokenIndex = TokenBalanceLibrary.findToken(balances, token);\\n        TokenBalanceLibrary.removeBalance(\\n            balances,\\n            tokenIndex,\\n            feeAmount\\n        );\\n        transferTokens(\\n            balances,\\n            tokenIndex,\\n            partnerContract,\\n            feeAmount\\n        );\\n        return feeAmount;\\n    }\\n\\n    function transferFromSenderDifference(\\n        TokenBalanceLibrary.TokenBalance[] memory balances,\\n        address token,\\n        uint256 sourceAmount\\n    ) internal {\\n        if (token == Utils.eth_address()) {\\n            require(\\n                sourceAmount >= balances[0].balance,\\n                \\\"Not enough ETH to perform swap\\\"\\n            );\\n        } else {\\n            uint256 tokenIndex = TokenBalanceLibrary.findToken(balances, token);\\n            if (sourceAmount > balances[tokenIndex].balance) {\\n                SafeERC20.safeTransferFrom(\\n                    IERC20(token),\\n                    msg.sender,\\n                    address(this),\\n                    sourceAmount - balances[tokenIndex].balance\\n                );\\n            }\\n        }\\n    }\\n\\n    function transferAllTokensToUser(\\n        TokenBalanceLibrary.TokenBalance[] memory balances\\n    ) internal {\\n        for (\\n            uint256 balanceIndex = 0;\\n            balanceIndex < balances.length;\\n            balanceIndex++\\n        ) {\\n            if (\\n                balanceIndex != 0 &&\\n                balances[balanceIndex].tokenAddress == address(0x0)\\n            ) {\\n                return;\\n            }\\n            transferTokens(\\n                balances,\\n                balanceIndex,\\n                payable(msg.sender),\\n                balances[balanceIndex].balance\\n            );\\n        }\\n    }\\n\\n    function transferTokens(\\n        TokenBalanceLibrary.TokenBalance[] memory balances,\\n        uint256 tokenIndex,\\n        address payable destination,\\n        uint256 tokenAmount\\n    ) internal {\\n        if (tokenAmount > 0) {\\n            if (balances[tokenIndex].tokenAddress == Utils.eth_address()) {\\n                destination.transfer(tokenAmount);\\n            } else {\\n                SafeERC20.safeTransfer(\\n                    IERC20(balances[tokenIndex].tokenAddress),\\n                    destination,\\n                    tokenAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    // @notice Calculates the fee amount given a fee percentage and amount\\n    // @param amount the amount to calculate the fee based on\\n    // @param fee the percentage, out of 1 eth (e.g. 0.01 ETH would be 1%)\\n    function calculateFee(uint256 amount, uint256 fee)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return SafeMath.div(SafeMath.mul(amount, fee), 1 * (10**18));\\n    }\\n\\n    /*\\n     *   Payable receive function\\n     */\\n\\n    /// @notice payable receive to allow handler or exchange contracts to return ether\\n    /// @dev only accounts containing code (ie. contracts) can send ether to contract\\n    receive() external payable whenNotPaused {\\n        // Check in here that the sender is a contract! (to stop accidents)\\n        uint256 size;\\n        address sender = msg.sender;\\n        assembly {\\n            size := extcodesize(sender)\\n        }\\n        if (size == 0) {\\n            revert(\\\"EOA cannot send ether to primary receive function\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Withdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title A contract which allows its owner to withdraw any ether which is contained inside\\ncontract Withdrawable is Ownable {\\n\\n    /// @notice Withdraw ether contained in this contract and send it back to owner\\n    /// @dev onlyOwner modifier only allows the contract owner to run the code\\n    /// @param _token The address of the token that the user wants to withdraw\\n    /// @param _amount The amount of tokens that the caller wants to withdraw\\n    function withdrawToken(address _token, uint256 _amount) external onlyOwner {\\n        SafeERC20.safeTransfer(IERC20(_token), owner(), _amount);\\n    }\\n\\n    /// @notice Withdraw ether contained in this contract and send it back to owner\\n    /// @dev onlyOwner modifier only allows the contract owner to run the code\\n    /// @param _amount The amount of ether that the caller wants to withdraw\\n    function withdrawETH(uint256 _amount) external onlyOwner {\\n        payable(owner()).transfer(_amount);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lib/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/*\\n    Modified Util contract as used by Kyber Network\\n*/\\n\\nlibrary Utils {\\n\\n    uint256 constant internal PRECISION = (10**18);\\n    uint256 constant internal MAX_QTY   = (10**28); // 10B tokens\\n    uint256 constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\\n    uint256 constant internal MAX_DECIMALS = 18;\\n    uint256 constant internal ETH_DECIMALS = 18;\\n    uint256 constant internal MAX_UINT = 2**256-1;\\n    address constant internal ETH_ADDRESS = address(0x0);\\n\\n    // Currently constants can't be accessed from other contracts, so providing functions to do that here\\n    function precision() internal pure returns (uint256) { return PRECISION; }\\n    function max_qty() internal pure returns (uint256) { return MAX_QTY; }\\n    function max_rate() internal pure returns (uint256) { return MAX_RATE; }\\n    function max_decimals() internal pure returns (uint256) { return MAX_DECIMALS; }\\n    function eth_decimals() internal pure returns (uint256) { return ETH_DECIMALS; }\\n    function max_uint() internal pure returns (uint256) { return MAX_UINT; }\\n    function eth_address() internal pure returns (address) { return ETH_ADDRESS; }\\n\\n    /// @notice Retrieve the number of decimals used for a given ERC20 token\\n    /// @dev As decimals are an optional feature in ERC20, this contract uses `call` to\\n    /// ensure that an exception doesn't cause transaction failure\\n    /// @param token the token for which we should retrieve the decimals\\n    /// @return decimals the number of decimals in the given token\\n    function getDecimals(address token)\\n        internal\\n        returns (uint256 decimals)\\n    {\\n        bytes4 functionSig = bytes4(keccak256(\\\"decimals()\\\"));\\n\\n        /// @dev Using assembly due to issues with current solidity `address.call()`\\n        /// implementation: https://github.com/ethereum/solidity/issues/2884\\n        assembly {\\n            // Pointer to next free memory slot\\n            let ptr := mload(0x40)\\n            // Store functionSig variable at ptr\\n            mstore(ptr,functionSig)\\n            let functionSigLength := 0x04\\n            let wordLength := 0x20\\n\\n            let success := call(\\n                                gas(), // Amount of gas\\n                                token, // Address to call\\n                                0, // ether to send\\n                                ptr, // ptr to input data\\n                                functionSigLength, // size of data\\n                                ptr, // where to store output data (overwrite input)\\n                                wordLength // size of output data (32 bytes)\\n                               )\\n\\n            switch success\\n            case 0 {\\n                decimals := 0 // If the token doesn't implement `decimals()`, return 0 as default\\n            }\\n            case 1 {\\n                decimals := mload(ptr) // Set decimals to return data from call\\n            }\\n            mstore(0x40,add(ptr,0x04)) // Reset the free memory pointer to the next known free location\\n        }\\n    }\\n\\n    /// @dev Checks that a given address has its token allowance and balance set above the given amount\\n    /// @param tokenOwner the address which should have custody of the token\\n    /// @param tokenAddress the address of the token to check\\n    /// @param tokenAmount the amount of the token which should be set\\n    /// @param addressToAllow the address which should be allowed to transfer the token\\n    /// @return bool true if the allowance and balance is set, false if not\\n    function tokenAllowanceAndBalanceSet(\\n        address tokenOwner,\\n        address tokenAddress,\\n        uint256 tokenAmount,\\n        address addressToAllow\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return (\\n            IERC20(tokenAddress).allowance(tokenOwner, addressToAllow) >= tokenAmount &&\\n            IERC20(tokenAddress).balanceOf(tokenOwner) >= tokenAmount\\n        );\\n    }\\n\\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns (uint) {\\n        if (dstDecimals >= srcDecimals) {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\\n        } else {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\\n        }\\n    }\\n\\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns (uint) {\\n\\n        //source quantity is rounded up. to avoid dest quantity being too low.\\n        uint numerator;\\n        uint denominator;\\n        if (srcDecimals >= dstDecimals) {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\\n            denominator = rate;\\n        } else {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\\n            numerator = (PRECISION * dstQty);\\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\\n        }\\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\\n    }\\n\\n    function calcDestAmount(IERC20 src, IERC20 dest, uint srcAmount, uint rate) internal returns (uint) {\\n        return calcDstQty(srcAmount, getDecimals(address(src)), getDecimals(address(dest)), rate);\\n    }\\n\\n    function calcSrcAmount(IERC20 src, IERC20 dest, uint destAmount, uint rate) internal returns (uint) {\\n        return calcSrcQty(destAmount, getDecimals(address(src)), getDecimals(address(dest)), rate);\\n    }\\n\\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\\n        internal pure returns (uint)\\n    {\\n        require(srcAmount <= MAX_QTY);\\n        require(destAmount <= MAX_QTY);\\n\\n        if (dstDecimals >= srcDecimals) {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\\n        } else {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\\n        }\\n    }\\n\\n    /// @notice Bringing this in from the Math library as we've run out of space in TotlePrimary (see EIP-170)\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/TokenTransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n/*\\n\\n  Copyright 2018 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title TokenTransferProxy - Transfers tokens on behalf of contracts that have been approved via decentralized governance.\\n/// @author Amir Bandeali - <amir@0xProject.com>, Will Warren - <will@0xProject.com>\\ncontract TokenTransferProxy is Ownable {\\n\\n    /// @dev Only authorized addresses can invoke functions with this modifier.\\n    modifier onlyAuthorized {\\n        require(authorized[msg.sender]);\\n        _;\\n    }\\n\\n    modifier targetAuthorized(address target) {\\n        require(authorized[target]);\\n        _;\\n    }\\n\\n    modifier targetNotAuthorized(address target) {\\n        require(!authorized[target]);\\n        _;\\n    }\\n\\n    mapping (address => bool) public authorized;\\n\\n    event LogAuthorizedAddressAdded(address indexed target, address indexed caller);\\n    event LogAuthorizedAddressRemoved(address indexed target, address indexed caller);\\n\\n    /*\\n     * Public functions\\n     */\\n\\n    /// @dev Authorizes an address.\\n    /// @param target Address to authorize.\\n    function addAuthorizedAddress(address target)\\n        public\\n        onlyOwner\\n        targetNotAuthorized(target)\\n    {\\n        authorized[target] = true;\\n        emit LogAuthorizedAddressAdded(target, msg.sender);\\n    }\\n\\n    /// @dev Removes authorizion of an address.\\n    /// @param target Address to remove authorization from.\\n    function removeAuthorizedAddress(address target)\\n        public\\n        onlyOwner\\n        targetAuthorized(target)\\n    {\\n        authorized[target] = false;\\n\\n        emit LogAuthorizedAddressRemoved(target, msg.sender);\\n    }\\n\\n    /// @dev Calls into ERC20 Token contract, invoking transferFrom.\\n    /// @param token Address of token to transfer.\\n    /// @param from Address to transfer token from.\\n    /// @param to Address to transfer token to.\\n    /// @param value Amount of token to transfer.\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint value)\\n        public\\n        onlyAuthorized\\n    {\\n        SafeERC20.safeTransferFrom(IERC20(token), from, to, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/TokenBalanceLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary TokenBalanceLibrary {\\n    struct TokenBalance {\\n        address tokenAddress;\\n        uint256 balance;\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n     \\n    /// @dev Finds token entry in balances array\\n    /// @param balances Array of token balance entries\\n    /// @param token The address of the token to find the entry for. If it's not found, it will create a new entry and return that index\\n    /// @return tokenEntry The index that this tokens entry can be found at\\n\\n    function findToken(TokenBalance[] memory balances, address token)\\n        internal\\n        pure\\n        returns (uint256 tokenEntry)\\n    {\\n        for (uint256 index = 0; index < balances.length; index++) {\\n            if (balances[index].tokenAddress == token) {\\n                return index;\\n            } else if (\\n                index != 0 && balances[index].tokenAddress == address(0x0)\\n            ) {\\n                balances[index] = TokenBalance(token, 0);\\n                return index;\\n            }\\n        }\\n    }\\n\\n    /// @dev Adds an amount of a token to the balances array by token address. Automatically adds entry if it doesn't exist\\n    /// @param balances Array of token balances to add to\\n    /// @param token The address of the token to add balance to\\n    /// @param amountToAdd Amount of the token to add to balance\\n    function addBalance(\\n        TokenBalance[] memory balances,\\n        address token,\\n        uint256 amountToAdd\\n    ) internal pure {\\n        uint256 tokenIndex = findToken(balances, token);\\n        addBalance(balances, tokenIndex, amountToAdd);\\n    }\\n\\n    /// @dev Adds an amount of a token to the balances array by token index\\n    /// @param balances Array of token balances to add to\\n    /// @param tokenIndex The index of the token to add balance to\\n    /// @param amountToAdd Amount of the token to add to balance\\n    function addBalance(\\n        TokenBalance[] memory balances,\\n        uint256 tokenIndex,\\n        uint256 amountToAdd\\n    ) internal pure {\\n        balances[tokenIndex].balance += amountToAdd;\\n    }\\n\\n    /// @dev Removes an amount of a token from the balances array by token address\\n    /// @param balances Array of token balances to remove from\\n    /// @param token The address of the token to remove balance from\\n    /// @param amountToRemove Amount of the token to remove from balance\\n    function removeBalance(\\n        TokenBalance[] memory balances,\\n        address token,\\n        uint256 amountToRemove\\n    ) internal pure {\\n        uint256 tokenIndex = findToken(balances, token);\\n        removeBalance(balances, tokenIndex, amountToRemove);\\n    }\\n\\n    /// @dev Removes an amount of a token from the balances array by token index\\n    /// @param balances Array of token balances to remove from\\n    /// @param tokenIndex The index of the token to remove balance from\\n    /// @param amountToRemove Amount of the token to remove from balance\\n    function removeBalance(\\n        TokenBalance[] memory balances,\\n        uint256 tokenIndex,\\n        uint256 amountToRemove\\n    ) internal pure {\\n        balances[tokenIndex].balance -= amountToRemove;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/PartnerRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./Partner.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PartnerRegistry is Ownable, Pausable {\\n    address target;\\n    mapping(address => bool) partnerContracts;\\n    address payable public companyBeneficiary;\\n    uint256 public basePercentage;\\n    PartnerRegistry public previousRegistry;\\n\\n    event PartnerRegistered(\\n        address indexed creator,\\n        address indexed beneficiary,\\n        address partnerContract\\n    );\\n\\n    constructor(\\n        PartnerRegistry _previousRegistry,\\n        address _target,\\n        address payable _companyBeneficiary,\\n        uint256 _basePercentage\\n    ) {\\n        previousRegistry = _previousRegistry;\\n        target = _target;\\n        companyBeneficiary = _companyBeneficiary;\\n        basePercentage = _basePercentage;\\n    }\\n\\n    /*\\n     * Public functions\\n     */\\n\\n    /// @dev registers a partner and deploys a partner contract\\n    /// @param partnerBeneficiary The address that the partner will receive payments to - NON-CHANGEABLE\\n    /// @param partnerPercentage The percentage fee the partner wants to take - this is out of 1**18, so 1**16 would be 1% fee\\n    function registerPartner(\\n        address payable partnerBeneficiary,\\n        uint256 partnerPercentage\\n    ) external whenNotPaused {\\n        Partner newPartner = Partner(createClone());\\n        newPartner.init(\\n            this,\\n            payable(0x0),\\n            0,\\n            partnerBeneficiary,\\n            partnerPercentage\\n        );\\n        partnerContracts[address(newPartner)] = true;\\n        emit PartnerRegistered(\\n            address(msg.sender),\\n            partnerBeneficiary,\\n            address(newPartner)\\n        );\\n    }\\n\\n    /// @dev registers a partner and deploys a partner contract with custom company values, only usable by owner\\n    /// @param _companyBeneficiary The address that the company will receive payments to - NON-CHANGEABLE\\n    /// @param _companyPercentage The percentage fee the company wants to take - this is out of 1**18, so 1**16 would be 1% fee\\n    /// @param partnerBeneficiary The address that the partner will receive payments to - NON-CHANGEABLE\\n    /// @param partnerPercentage The percentage fee the partner wants to take - this is out of 1**18, so 1**16 would be 1% fee\\n    function overrideRegisterPartner(\\n        address payable _companyBeneficiary,\\n        uint256 _companyPercentage,\\n        address payable partnerBeneficiary,\\n        uint256 partnerPercentage\\n    ) external onlyOwner {\\n        Partner newPartner = Partner(createClone());\\n        newPartner.init(\\n            PartnerRegistry(0x0000000000000000000000000000000000000000),\\n            _companyBeneficiary,\\n            _companyPercentage,\\n            partnerBeneficiary,\\n            partnerPercentage\\n        );\\n        partnerContracts[address(newPartner)] = true;\\n        emit PartnerRegistered(\\n            address(msg.sender),\\n            partnerBeneficiary,\\n            address(newPartner)\\n        );\\n    }\\n\\n    /// @dev Marks a partner contract as no longer valid\\n    /// @param partnerContract The partner contract address to disable\\n    function deletePartner(address partnerContract) external onlyOwner {\\n        partnerContracts[partnerContract] = false;\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n\\n    /// @dev Creates a clone of contract - from EIP-1167\\n    /// @param result The address of the contract that was created\\n    function createClone() internal returns (address payable result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            result := create(0, clone, 0x37)\\n        }\\n    }\\n    /// @dev Used to tell whether a given address is a valid partner contract, i.e. it was created on this contract or a historic registry, and it hasn't been disabled\\n    /// @param partnerContract The partner contract address to validate\\n\\n    function isValidPartner(address partnerContract)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            partnerContracts[partnerContract] ||\\n            previousRegistry.isValidPartner(partnerContract);\\n    }\\n\\n    /// @dev Updates the beneficiary and default percentage for the company\\n    /// @param newCompanyBeneficiary New beneficiary address for company\\n    /// @param newBasePercentage New base percentage for company\\n    function updateCompanyInfo(\\n        address payable newCompanyBeneficiary,\\n        uint256 newBasePercentage\\n    ) external onlyOwner {\\n        companyBeneficiary = newCompanyBeneficiary;\\n        basePercentage = newBasePercentage;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Partner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./Utils.sol\\\";\\nimport \\\"./PartnerRegistry.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Partner is ReentrancyGuard {\\n    address payable public partnerBeneficiary;\\n    uint256 public partnerPercentage; //This is out of 1 ETH, e.g. 0.5 ETH is 50% of the fee\\n\\n    uint256 public overrideCompanyPercentage;\\n    address payable public overrideCompanyBeneficiary;\\n\\n    PartnerRegistry public registry;\\n\\n    event LogPayout(address[] tokens, uint256[] amount);\\n\\n    function init(\\n        PartnerRegistry _registry,\\n        address payable _overrideCompanyBeneficiary,\\n        uint256 _overrideCompanyPercentage,\\n        address payable _partnerBeneficiary,\\n        uint256 _partnerPercentage\\n    ) public {\\n        require(\\n            registry ==\\n                PartnerRegistry(0x0000000000000000000000000000000000000000) &&\\n                overrideCompanyBeneficiary == address(0x0) &&\\n                partnerBeneficiary == address(0x0)\\n        );\\n        overrideCompanyBeneficiary = _overrideCompanyBeneficiary;\\n        overrideCompanyPercentage = _overrideCompanyPercentage;\\n        partnerBeneficiary = _partnerBeneficiary;\\n        partnerPercentage = _partnerPercentage;\\n        overrideCompanyPercentage = _overrideCompanyPercentage;\\n        registry = _registry;\\n    }\\n\\n    function payout(address[] memory tokens) public nonReentrant {\\n        uint256 totalFeePercentage = getTotalFeePercentage();\\n        address payable _companyBeneficiary = companyBeneficiary();\\n        uint256[] memory amountsPaidOut = new uint256[](tokens.length);\\n        // Payout both the partner and the company at the same time\\n        for (uint256 index = 0; index < tokens.length; index++) {\\n            uint256 balance = tokens[index] == Utils.eth_address()\\n                ? address(this).balance\\n                : IERC20(tokens[index]).balanceOf(address(this));\\n            amountsPaidOut[index] = balance;\\n            uint256 partnerAmount = SafeMath.div(\\n                SafeMath.mul(balance, partnerPercentage),\\n                totalFeePercentage\\n            );\\n            uint256 companyAmount = balance - partnerAmount;\\n            if (tokens[index] == Utils.eth_address()) {\\n                bool success;\\n                (success,) = partnerBeneficiary.call{value: partnerAmount, gas: 5000}(\\\"\\\");\\n                require(success,\\\"Transfer failed\\\");\\n                (success,) =_companyBeneficiary.call{value: companyAmount, gas: 5000}(\\\"\\\");\\n                require(success,\\\"Transfer failed\\\");\\n\\n            } else {\\n                SafeERC20.safeTransfer(\\n                    IERC20(tokens[index]),\\n                    partnerBeneficiary,\\n                    partnerAmount\\n                );\\n                SafeERC20.safeTransfer(\\n                    IERC20(tokens[index]),\\n                    _companyBeneficiary,\\n                    companyAmount\\n                );\\n            }\\n        }\\n        emit LogPayout(tokens, amountsPaidOut);\\n    }\\n\\n    function getTotalFeePercentage() public view returns (uint256) {\\n        return partnerPercentage + companyPercentage();\\n    }\\n\\n    function companyPercentage() public view returns (uint256) {\\n        if (\\n            registry !=\\n            PartnerRegistry(0x0000000000000000000000000000000000000000)\\n        ) {\\n            return Math.max(registry.basePercentage(), partnerPercentage);\\n        } else {\\n            return overrideCompanyPercentage;\\n        }\\n    }\\n\\n    function companyBeneficiary() public view returns (address payable) {\\n        if (\\n            registry !=\\n            PartnerRegistry(0x0000000000000000000000000000000000000000)\\n        ) {\\n            return registry.companyBeneficiary();\\n        } else {\\n            return overrideCompanyBeneficiary;\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"/contracts/exchange_handlers/ExchangeHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../lib/Withdrawable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for all exchange handler contracts\\nabstract contract ExchangeHandler is Withdrawable {\\n    /*\\n     *   Public functions\\n     */\\n\\n    /// @dev Fills the input order.\\n    /// @param genericPayload Encoded data for this order. This is specific to exchange and is done by encoding a per-exchange struct\\n    /// @param availableToSpend The amount of assets that are available for the handler to spend.\\n    /// @param targetAmount The target for amount of assets to spend - it may spend less than this and return the change.\\n    /// @return amountSpentOnOrder The amount of source asset spent on this order.\\n    /// @return amountReceivedFromOrder The amount of destination asset received from this order.\\n\\n    function performOrder(\\n        bytes memory genericPayload,\\n        uint256 availableToSpend,\\n        uint256 targetAmount\\n    )\\n        external\\n        payable\\n        virtual\\n        returns (uint256 amountSpentOnOrder, uint256 amountReceivedFromOrder);\\n\\n\\n    /// @notice payable receive  to block EOA sending eth\\n    /// @dev this should fail if an EOA (or contract with 0 bytecode size) tries to send ETH to this contract\\n    receive() external payable {\\n        // Check in here that the sender is a contract! (to stop accidents)\\n        uint256 size;\\n        address sender = msg.sender;\\n        assembly {\\n            size := extcodesize(sender)\\n        }\\n        require(size > 0);\\n    }\\n    /* \\n     *   Internal functions\\n     */\\n\\n    /// @dev Gets the max to spend by taking min of targetAmount and availableToSpend.\\n    /// @param targetAmount The amount the primary wants this handler to spend\\n    /// @param availableToSpend The amount the exchange handler has available to spend.\\n    /// @return max The maximum amount the handler can spend\\n\\n    function getMaxToSpend(uint256 targetAmount, uint256 availableToSpend)\\n        internal\\n        pure\\n        returns (uint256 max)\\n    {\\n        max = Math.min(availableToSpend, targetAmount);\\n        return max;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenTransferProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"LogSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partnerContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogSwapCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"exchangeHandler\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedPayload\",\"type\":\"bytes\"}],\"internalType\":\"struct TotlePrimary.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TotlePrimary.Trade[]\",\"name\":\"trades\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"minimumDestinationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeToTakeFeeFrom\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"takeFeeFromSource\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"redirectAddress\",\"type\":\"address\"}],\"internalType\":\"struct TotlePrimary.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"partnerContract\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct TotlePrimary.SwapCollection\",\"name\":\"swaps\",\"type\":\"tuple\"}],\"name\":\"performSwapCollection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTransferProxy\",\"outputs\":[{\"internalType\":\"contract TokenTransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TotlePrimary", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "0000000000000000000000006a30e421571c137708acbf565e16262ecac93357000000000000000000000000c2d7cf95645d33006175b78989035c7c9061d3f9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}