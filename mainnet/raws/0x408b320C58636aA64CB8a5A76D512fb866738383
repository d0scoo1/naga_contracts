{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"AddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"IGasBank.sol\\\";\\nimport \\\"IAddressProvider.sol\\\";\\nimport \\\"IStakerVault.sol\\\";\\nimport \\\"IOracleProvider.sol\\\";\\n\\nimport \\\"EnumerableExtensions.sol\\\";\\nimport \\\"EnumerableMapping.sol\\\";\\nimport \\\"AddressProviderKeys.sol\\\";\\n\\nimport \\\"Admin.sol\\\";\\nimport \\\"Preparable.sol\\\";\\n\\n// solhint-disable ordering\\n\\ncontract AddressProvider is IAddressProvider, Admin, Preparable {\\n    using EnumerableMapping for EnumerableMapping.AddressToAddressMap;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableExtensions for EnumerableSet.AddressSet;\\n    using EnumerableExtensions for EnumerableSet.Bytes32Set;\\n    using EnumerableExtensions for EnumerableMapping.AddressToAddressMap;\\n\\n    bytes32 internal constant _BKD_LOCKER = \\\"BKDLocker\\\";\\n\\n    // LpToken -> stakerVault\\n    EnumerableMapping.AddressToAddressMap internal _stakerVaults;\\n\\n    EnumerableSet.AddressSet internal _whiteListedFeeHandlers;\\n\\n    EnumerableSet.Bytes32Set internal _knownAddressKeys;\\n\\n    EnumerableSet.AddressSet internal _actions; // list of all actions ever registered\\n\\n    EnumerableMapping.AddressToAddressMap internal _tokenToPools;\\n\\n    constructor(\\n        address treasury,\\n        address vaultReserve,\\n        address gasBank,\\n        address oracleProvider\\n    ) Admin(msg.sender) {\\n        _setConfig(AddressProviderKeys._TREASURY_KEY, treasury);\\n        _setConfig(AddressProviderKeys._VAULT_RESERVE_KEY, vaultReserve);\\n        _setConfig(AddressProviderKeys._GAS_BANK_KEY, gasBank);\\n        _setConfig(AddressProviderKeys._ORACLE_PROVIDER_KEY, oracleProvider);\\n\\n        addKnownAddressKey(AddressProviderKeys._TREASURY_KEY);\\n        addKnownAddressKey(AddressProviderKeys._VAULT_RESERVE_KEY);\\n        addKnownAddressKey(AddressProviderKeys._GAS_BANK_KEY);\\n        addKnownAddressKey(AddressProviderKeys._ORACLE_PROVIDER_KEY);\\n        addKnownAddressKey(AddressProviderKeys._SWAPPER_REGISTRY_KEY);\\n    }\\n\\n    function addKnownAddressKey(bytes32 key) public onlyAdmin {\\n        require(_knownAddressKeys.add(key), Error.INVALID_ARGUMENT);\\n        emit KnownAddressKeyAdded(key);\\n    }\\n\\n    function getKnownAddressKeys() external view returns (bytes32[] memory) {\\n        return _knownAddressKeys.toArray();\\n    }\\n\\n    function addFeeHandler(address feeHandler) external onlyAdmin returns (bool) {\\n        require(!_whiteListedFeeHandlers.contains(feeHandler), Error.ADDRESS_WHITELISTED);\\n        _whiteListedFeeHandlers.add(feeHandler);\\n        return true;\\n    }\\n\\n    function removeFeeHandler(address feeHandler) external onlyAdmin returns (bool) {\\n        require(_whiteListedFeeHandlers.contains(feeHandler), Error.ADDRESS_NOT_WHITELISTED);\\n        _whiteListedFeeHandlers.remove(feeHandler);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Adds action.\\n     * @param action Address of action to add.\\n     */\\n    function addAction(address action) external onlyAdmin returns (bool) {\\n        bool result = _actions.add(action);\\n        if (result) {\\n            emit ActionListed(action);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Adds pool.\\n     * @param pool Address of pool to add.\\n     */\\n    function addPool(address pool) external override onlyAdmin {\\n        require(pool != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\\n\\n        ILiquidityPool ipool = ILiquidityPool(pool);\\n        address poolToken = ipool.getLpToken();\\n        if (_tokenToPools.set(poolToken, pool)) {\\n            emit PoolListed(pool);\\n        }\\n    }\\n\\n    /**\\n     * @notice Delists pool.\\n     * @param pool Address of pool to delist.\\n     * @return `true` if successful.\\n     */\\n    function removePool(address pool) external override onlyAdmin returns (bool) {\\n        address lpToken = ILiquidityPool(pool).getLpToken();\\n        bool removed = _tokenToPools.remove(lpToken);\\n        if (removed) {\\n            emit PoolDelisted(pool);\\n        }\\n\\n        return removed;\\n    }\\n\\n    /**\\n     * @notice Returns the address for the given key\\n     */\\n    function getAddress(bytes32 key) external view returns (address) {\\n        require(_knownAddressKeys.contains(key), Error.INVALID_ARGUMENT);\\n        return currentAddresses[key];\\n    }\\n\\n    /**\\n     * @notice Prepare update of an address\\n     * @param key Key to update\\n     * @param newAddress New address for `key`\\n     * @return `true` if successful.\\n     */\\n    function prepareAddress(bytes32 key, address newAddress)\\n        external\\n        override\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        require(_knownAddressKeys.contains(key), Error.INVALID_ARGUMENT);\\n        return _prepare(key, newAddress);\\n    }\\n\\n    /**\\n     * @notice Execute update of `key`\\n     * @return New address.\\n     */\\n    function executeAddress(bytes32 key) external override returns (address) {\\n        require(_knownAddressKeys.contains(key), Error.INVALID_ARGUMENT);\\n        return _executeAddress(key);\\n    }\\n\\n    /**\\n     * @notice Reset `key`\\n     * @return true if it was reset\\n     */\\n    function resetAddress(bytes32 key) external onlyAdmin returns (bool) {\\n        return _resetAddressConfig(key);\\n    }\\n\\n    /**\\n     * @notice Add a new staker vault and add it's lpGauge if set in vault.\\n     * @dev This fails if the token of the staker vault is the token of an existing staker vault.\\n     * @param stakerVault Vault to add.\\n     * @return `true` if successful.\\n     */\\n    function addStakerVault(address stakerVault) external override onlyAdmin returns (bool) {\\n        address token = IStakerVault(stakerVault).getToken();\\n        require(token != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\\n        require(!_stakerVaults.contains(token), Error.STAKER_VAULT_EXISTS);\\n        _stakerVaults.set(token, stakerVault);\\n        emit StakerVaultListed(stakerVault);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set the BKD locker\\n     * @dev this can only be done once and the change is permanent\\n     */\\n    function setBKDLocker(address bkdLocker) external override onlyAdmin {\\n        require(getBKDLocker() == address(0), Error.ADDRESS_ALREADY_SET);\\n        _setConfig(_BKD_LOCKER, bkdLocker);\\n    }\\n\\n    function isWhiteListedFeeHandler(address feeHandler) external view override returns (bool) {\\n        return _whiteListedFeeHandlers.contains(feeHandler);\\n    }\\n\\n    /**\\n     * @notice Get the liquidity pool for a given token\\n     * @dev Does not revert if the pool deos not exist\\n     * @param token Token for which to get the pool.\\n     * @return Pool address.\\n     */\\n    function safeGetPoolForToken(address token) external view override returns (ILiquidityPool) {\\n        (, address poolAddress) = _tokenToPools.tryGet(token);\\n        return ILiquidityPool(poolAddress);\\n    }\\n\\n    /**\\n     * @notice Get the liquidity pool for a given token\\n     * @dev Reverts if the pool deos not exist\\n     * @param token Token for which to get the pool.\\n     * @return Pool address.\\n     */\\n    function getPoolForToken(address token) external view override returns (ILiquidityPool) {\\n        (bool exists, address poolAddress) = _tokenToPools.tryGet(token);\\n        require(exists, Error.ADDRESS_NOT_FOUND);\\n        return ILiquidityPool(poolAddress);\\n    }\\n\\n    /**\\n     * @notice Get list of all action addresses.\\n     * @return Array with action addresses.\\n     */\\n    function allActions() external view override returns (address[] memory) {\\n        return _actions.toArray();\\n    }\\n\\n    /**\\n     * @notice Check whether an address is an action.\\n     * @param action Address to check whether it is action.\\n     * @return True if address is an action.\\n     */\\n    function isAction(address action) external view override returns (bool) {\\n        return _actions.contains(action);\\n    }\\n\\n    /**\\n     * @notice Get list of all pool addresses.\\n     * @return Array with pool addresses.\\n     */\\n    function allPools() external view override returns (address[] memory) {\\n        return _tokenToPools.valuesArray();\\n    }\\n\\n    /**\\n     * @notice Returns all the staker vaults.\\n     */\\n    function allStakerVaults() external view override returns (address[] memory) {\\n        return _stakerVaults.valuesArray();\\n    }\\n\\n    /**\\n     * @notice Get the staker vault for a given token\\n     * @dev There can only exist one staker vault per unique token.\\n     * @param token Token for which to get the vault.\\n     * @return Vault address.\\n     */\\n    function getStakerVault(address token) external view override returns (address) {\\n        return _stakerVaults.get(token);\\n    }\\n\\n    /**\\n     * @notice Tries to get the staker vault for a given token but does not throw if it does not exist\\n     * @return A boolean set to true if the vault exists and the vault address.\\n     */\\n    function tryGetStakerVault(address token) external view override returns (bool, address) {\\n        return _stakerVaults.tryGet(token);\\n    }\\n\\n    /**\\n     * @notice Check if a vault is registered (exists).\\n     * @param stakerVault Address of staker vault to check.\\n     * @return `true` if registered, `false` if not.\\n     */\\n    function isStakerVaultRegistered(address stakerVault) external view override returns (bool) {\\n        address token = IStakerVault(stakerVault).getToken();\\n        return isStakerVault(stakerVault, token);\\n    }\\n\\n    function isStakerVault(address stakerVault, address token) public view override returns (bool) {\\n        (bool exists, address vault) = _stakerVaults.tryGet(token);\\n        return exists && vault == stakerVault;\\n    }\\n\\n    /**\\n     * @return the address of the BKD locker\\n     */\\n    function getBKDLocker() public view override returns (address) {\\n        return currentAddresses[_BKD_LOCKER];\\n    }\\n}\\n\"\r\n    },\r\n    \"IGasBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IGasBank {\\n    event Deposit(address indexed account, uint256 value);\\n    event Withdraw(address indexed account, address indexed receiver, uint256 value);\\n\\n    function depositFor(address account) external payable;\\n\\n    function withdrawUnused(address account) external;\\n\\n    function withdrawFrom(address account, uint256 amount) external;\\n\\n    function withdrawFrom(\\n        address account,\\n        address payable to,\\n        uint256 amount\\n    ) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"ILiquidityPool.sol\\\";\\nimport \\\"IPreparable.sol\\\";\\nimport \\\"IGasBank.sol\\\";\\nimport \\\"IOracleProvider.sol\\\";\\n\\n// solhint-disable ordering\\n\\ninterface IAddressProvider is IPreparable {\\n    event KnownAddressKeyAdded(bytes32 indexed key);\\n    event StakerVaultListed(address indexed stakerVault);\\n    event StakerVaultDelisted(address indexed stakerVault);\\n    event ActionListed(address indexed action);\\n    event PoolListed(address indexed pool);\\n    event PoolDelisted(address indexed pool);\\n\\n    /** Key functions */\\n    function getKnownAddressKeys() external view returns (bytes32[] memory);\\n\\n    function addKnownAddressKey(bytes32 key) external;\\n\\n    /** Pool functions */\\n\\n    function allPools() external view returns (address[] memory);\\n\\n    function addPool(address pool) external;\\n\\n    function removePool(address pool) external returns (bool);\\n\\n    function getPoolForToken(address token) external view returns (ILiquidityPool);\\n\\n    function safeGetPoolForToken(address token) external view returns (ILiquidityPool);\\n\\n    /** Action functions */\\n\\n    function allActions() external view returns (address[] memory);\\n\\n    function addAction(address action) external returns (bool);\\n\\n    function isAction(address action) external view returns (bool);\\n\\n    /** Address functions */\\n    function getAddress(bytes32 key) external view returns (address);\\n\\n    function prepareAddress(bytes32 key, address newAddress) external returns (bool);\\n\\n    function executeAddress(bytes32 key) external returns (address);\\n\\n    function resetAddress(bytes32 key) external returns (bool);\\n\\n    /** Staker vault functions */\\n    function allStakerVaults() external view returns (address[] memory);\\n\\n    function tryGetStakerVault(address token) external view returns (bool, address);\\n\\n    function getStakerVault(address token) external view returns (address);\\n\\n    function addStakerVault(address stakerVault) external returns (bool);\\n\\n    function isStakerVault(address stakerVault, address token) external view returns (bool);\\n\\n    function isStakerVaultRegistered(address stakerVault) external view returns (bool);\\n\\n    function isWhiteListedFeeHandler(address feeHandler) external view returns (bool);\\n\\n    /** BKD Locker functions */\\n\\n    function getBKDLocker() external view returns (address);\\n\\n    function setBKDLocker(address bkdLocker) external;\\n}\\n\"\r\n    },\r\n    \"ILiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"IERC20.sol\\\";\\n\\nimport \\\"IPreparable.sol\\\";\\nimport \\\"IVault.sol\\\";\\n\\ninterface ILiquidityPool is IPreparable {\\n    event Deposit(address indexed minter, uint256 depositAmount, uint256 mintedLpTokens);\\n\\n    event DepositFor(\\n        address indexed minter,\\n        address indexed mintee,\\n        uint256 depositAmount,\\n        uint256 mintedLpTokens\\n    );\\n\\n    event Redeem(address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n    event LpTokenSet(address indexed lpToken);\\n\\n    event StakerVaultSet(address indexed stakerVault);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens, uint256 minRedeemAmount) external returns (uint256);\\n\\n    function calcRedeem(address account, uint256 underlyingAmount) external returns (uint256);\\n\\n    function deposit(uint256 mintAmount) external payable returns (uint256);\\n\\n    function deposit(uint256 mintAmount, uint256 minTokenAmount) external payable returns (uint256);\\n\\n    function depositAndStake(uint256 depositAmount, uint256 minTokenAmount)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function depositFor(address account, uint256 depositAmount) external payable returns (uint256);\\n\\n    function depositFor(\\n        address account,\\n        uint256 depositAmount,\\n        uint256 minTokenAmount\\n    ) external payable returns (uint256);\\n\\n    function unstakeAndRedeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\\n        external\\n        returns (uint256);\\n\\n    function handleLpTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function executeNewVault() external returns (address);\\n\\n    function executeNewMaxWithdrawalFee() external returns (uint256);\\n\\n    function executeNewRequiredReserves() external returns (uint256);\\n\\n    function executeNewReserveDeviation() external returns (uint256);\\n\\n    function setLpToken(address _lpToken) external returns (bool);\\n\\n    function setStaker() external returns (bool);\\n\\n    function isCapped() external returns (bool);\\n\\n    function uncap() external returns (bool);\\n\\n    function updateDepositCap(uint256 _depositCap) external returns (bool);\\n\\n    function getUnderlying() external view returns (address);\\n\\n    function getLpToken() external view returns (address);\\n\\n    function getWithdrawalFee(address account, uint256 amount) external view returns (uint256);\\n\\n    function getVault() external view returns (IVault);\\n\\n    function exchangeRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IPreparable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IPreparable {\\n    event ConfigPreparedAddress(bytes32 indexed key, address value, uint256 delay);\\n    event ConfigPreparedNumber(bytes32 indexed key, uint256 value, uint256 delay);\\n\\n    event ConfigUpdatedAddress(bytes32 indexed key, address oldValue, address newValue);\\n    event ConfigUpdatedNumber(bytes32 indexed key, uint256 oldValue, uint256 newValue);\\n\\n    event ConfigReset(bytes32 indexed key);\\n}\\n\"\r\n    },\r\n    \"IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"IStrategy.sol\\\";\\nimport \\\"IPreparable.sol\\\";\\n\\n/**\\n * @title Interface for a Vault\\n */\\n\\ninterface IVault is IPreparable {\\n    function initialize(\\n        address _pool,\\n        uint256 _debtLimit,\\n        uint256 _targetAllocation,\\n        uint256 _bound\\n    ) external;\\n\\n    function getStrategy() external view returns (IStrategy);\\n\\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256);\\n\\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory);\\n\\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function withdraw(uint256 amount) external returns (bool);\\n\\n    function initializeStrategy(address strategy_) external returns (bool);\\n\\n    function withdrawAll() external;\\n\\n    function withdrawFromReserve(uint256 amount) external;\\n\\n    function getTotalUnderlying() external view returns (uint256);\\n\\n    function getUnderlying() external view returns (address);\\n\\n    function deposit() external payable;\\n\\n    event StrategyActivated(address indexed strategy);\\n\\n    event StrategyDeactivated(address indexed strategy);\\n\\n    event NewStrategist(address indexed strategist);\\n\\n    /**\\n     * @dev 'netProfit' is the profit after all fees have been deducted\\n     */\\n    event Harvest(uint256 indexed netProfit, uint256 indexed loss);\\n}\\n\"\r\n    },\r\n    \"IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function deposit() external payable returns (bool);\\n\\n    function balance() external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external returns (bool);\\n\\n    function withdrawAll() external returns (uint256);\\n\\n    function harvestable() external view returns (uint256);\\n\\n    function harvest() external returns (uint256);\\n\\n    function strategist() external view returns (address);\\n\\n    function shutdown() external returns (bool);\\n\\n    function hasPendingFunds() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IOracleProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IOracleProvider {\\n    /// @notice Quotes the USD price of `baseAsset`\\n    /// @param baseAsset the asset of which the price is to be quoted\\n    /// @return the USD price of the asset\\n    function getPriceUSD(address baseAsset) external view returns (uint256);\\n\\n    /// @notice Quotes the ETH price of `baseAsset`\\n    /// @param baseAsset the asset of which the price is to be quoted\\n    /// @return the ETH price of the asset\\n    function getPriceETH(address baseAsset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IStakerVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IStakerVault {\\n    event Staked(address indexed account, uint256 amount);\\n    event Unstaked(address indexed account, uint256 amount);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function initialize(address _token) external;\\n\\n    function initializeLpGauge(address _lpGauge) external returns (bool);\\n\\n    function stake(uint256 amount) external returns (bool);\\n\\n    function stakeFor(address account, uint256 amount) external returns (bool);\\n\\n    function unstake(uint256 amount) external returns (bool);\\n\\n    function unstakeFor(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address account, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function getToken() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function stakedAndActionLockedBalanceOf(address account) external view returns (uint256);\\n\\n    function actionLockedBalanceOf(address account) external view returns (uint256);\\n\\n    function increaseActionLockedBalance(address account, uint256 amount) external returns (bool);\\n\\n    function decreaseActionLockedBalance(address account, uint256 amount) external returns (bool);\\n\\n    function getStakedByActions() external view returns (uint256);\\n\\n    function addStrategy(address strategy) external returns (bool);\\n\\n    function getPoolTotalStaked() external view returns (uint256);\\n\\n    function prepareLpGauge(address _lpGauge) external returns (bool);\\n\\n    function executeLpGauge() external returns (bool);\\n\\n    function getLpGauge() external view returns (address);\\n\\n    function poolCheckpoint() external returns (bool);\\n\\n    function isStrategy(address user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"EnumerableExtensions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"EnumerableSet.sol\\\";\\nimport \\\"EnumerableMapping.sol\\\";\\n\\nlibrary EnumerableExtensions {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableMapping for EnumerableMapping.AddressToAddressMap;\\n    using EnumerableMapping for EnumerableMapping.AddressToUintMap;\\n\\n    function toArray(EnumerableSet.AddressSet storage addresses)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 len = addresses.length();\\n        address[] memory result = new address[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            result[i] = addresses.at(i);\\n        }\\n        return result;\\n    }\\n\\n    function toArray(EnumerableSet.Bytes32Set storage values)\\n        internal\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        uint256 len = values.length();\\n        bytes32[] memory result = new bytes32[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            result[i] = values.at(i);\\n        }\\n        return result;\\n    }\\n\\n    function keyAt(EnumerableMapping.AddressToAddressMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        (address key, ) = map.at(index);\\n        return key;\\n    }\\n\\n    function valueAt(EnumerableMapping.AddressToAddressMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        (, address value) = map.at(index);\\n        return value;\\n    }\\n\\n    function keyAt(EnumerableMapping.AddressToUintMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        (address key, ) = map.at(index);\\n        return key;\\n    }\\n\\n    function valueAt(EnumerableMapping.AddressToUintMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, uint256 value) = map.at(index);\\n        return value;\\n    }\\n\\n    function keysArray(EnumerableMapping.AddressToAddressMap storage map)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 len = map.length();\\n        address[] memory result = new address[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            result[i] = keyAt(map, i);\\n        }\\n        return result;\\n    }\\n\\n    function valuesArray(EnumerableMapping.AddressToAddressMap storage map)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 len = map.length();\\n        address[] memory result = new address[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            result[i] = valueAt(map, i);\\n        }\\n        return result;\\n    }\\n\\n    function keysArray(EnumerableMapping.AddressToUintMap storage map)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 len = map.length();\\n        address[] memory result = new address[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            result[i] = keyAt(map, i);\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"EnumerableMapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"EnumerableSet.sol\\\";\\n\\nlibrary EnumerableMapping {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // Code take from contracts/utils/structs/EnumerableMap.sol\\n    // because the helper functions are private\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    // AddressToAddressMap\\n\\n    struct AddressToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToAddressMap storage map,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(uint256(uint160(key))), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToAddressMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (address, address)\\n    {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (address(uint160(uint256(key))), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(AddressToAddressMap storage map, address key)\\n        internal\\n        view\\n        returns (bool, address)\\n    {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(uint256(uint160(key)))))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (address, uint256)\\n    {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(AddressToUintMap storage map, address key)\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(_get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n}\\n\"\r\n    },\r\n    \"AddressProviderKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nlibrary AddressProviderKeys {\\n    bytes32 internal constant _TREASURY_KEY = \\\"treasury\\\";\\n    bytes32 internal constant _GAS_BANK_KEY = \\\"gasBank\\\";\\n    bytes32 internal constant _VAULT_RESERVE_KEY = \\\"vaultReserve\\\";\\n    bytes32 internal constant _SWAPPER_REGISTRY_KEY = \\\"swapperRegistry\\\";\\n    bytes32 internal constant _ORACLE_PROVIDER_KEY = \\\"oracleProvider\\\";\\n}\\n\"\r\n    },\r\n    \"Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"AdminBase.sol\\\";\\n\\ncontract Admin is AdminBase {\\n    constructor(address _admin) {\\n        _addAdmin(_admin);\\n    }\\n}\\n\"\r\n    },\r\n    \"AdminBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"EnumerableSet.sol\\\";\\n\\nimport \\\"Errors.sol\\\";\\nimport \\\"IAdmin.sol\\\";\\n\\nabstract contract AdminBase is IAdmin {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal _admins;\\n\\n    /**\\n     * @notice Make a function only callable by admins.\\n     * @dev Fails if msg.sender is not an admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(isAdmin(msg.sender), Error.UNAUTHORIZED_ACCESS);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Remove msg.sender from admin list.\\n     * @return `true` if sucessful.\\n     */\\n    function renounceAdmin() external override onlyAdmin returns (bool) {\\n        _admins.remove(msg.sender);\\n        emit AdminRenounced(msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Add a new admin.\\n     * @dev This fails if the newAdmin was added previously.\\n     * @param newAdmin Address to add as admin.\\n     * @return `true` if successful.\\n     */\\n    function addAdmin(address newAdmin) public override onlyAdmin returns (bool) {\\n        require(_addAdmin(newAdmin), Error.ROLE_EXISTS);\\n        return true;\\n    }\\n\\n    /**\\n     * @return a list of all admins for this contract\\n     */\\n    function admins() public view override returns (address[] memory) {\\n        uint256 len = _admins.length();\\n        address[] memory allAdmins = new address[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            allAdmins[i] = _admins.at(i);\\n        }\\n        return allAdmins;\\n    }\\n\\n    /**\\n     * @notice Check if an account is admin.\\n     * @param account Address to check.\\n     * @return `true` if account is an admin.\\n     */\\n    function isAdmin(address account) public view override returns (bool) {\\n        return _isAdmin(account);\\n    }\\n\\n    function _addAdmin(address newAdmin) internal returns (bool) {\\n        if (_admins.add(newAdmin)) {\\n            emit NewAdminAdded(newAdmin);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _isAdmin(address account) internal view returns (bool) {\\n        return _admins.contains(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\n// solhint-disable private-vars-leading-underscore\\n\\nlibrary Error {\\n    string internal constant ADDRESS_WHITELISTED = \\\"address already whitelisted\\\";\\n    string internal constant ADMIN_ALREADY_SET = \\\"admin has already been set once\\\";\\n    string internal constant ADDRESS_NOT_WHITELISTED = \\\"address not whitelisted\\\";\\n    string internal constant ADDRESS_NOT_FOUND = \\\"address not found\\\";\\n    string internal constant CONTRACT_INITIALIZED = \\\"contract can only be initialized once\\\";\\n    string internal constant CONTRACT_PAUSED = \\\"contract is paused\\\";\\n    string internal constant INVALID_AMOUNT = \\\"invalid amount\\\";\\n    string internal constant INVALID_INDEX = \\\"invalid index\\\";\\n    string internal constant INVALID_VALUE = \\\"invalid msg.value\\\";\\n    string internal constant INVALID_SENDER = \\\"invalid msg.sender\\\";\\n    string internal constant INVALID_TOKEN = \\\"token address does not match pool's LP token address\\\";\\n    string internal constant INVALID_DECIMALS = \\\"incorrect number of decimals\\\";\\n    string internal constant INVALID_ARGUMENT = \\\"invalid argument\\\";\\n    string internal constant INVALID_PARAMETER_VALUE = \\\"invalid parameter value attempted\\\";\\n    string internal constant INVALID_IMPLEMENTATION = \\\"invalid pool implementation for given coin\\\";\\n    string internal constant INVALID_POOL_IMPLEMENTATION =\\n        \\\"invalid pool implementation for given coin\\\";\\n    string internal constant INVALID_LP_TOKEN_IMPLEMENTATION =\\n        \\\"invalid LP Token implementation for given coin\\\";\\n    string internal constant INVALID_VAULT_IMPLEMENTATION =\\n        \\\"invalid vault implementation for given coin\\\";\\n    string internal constant INVALID_STAKER_VAULT_IMPLEMENTATION =\\n        \\\"invalid stakerVault implementation for given coin\\\";\\n    string internal constant INSUFFICIENT_BALANCE = \\\"insufficient balance\\\";\\n    string internal constant ADDRESS_ALREADY_SET = \\\"Address is already set\\\";\\n    string internal constant INSUFFICIENT_STRATEGY_BALANCE = \\\"insufficient strategy balance\\\";\\n    string internal constant INSUFFICIENT_FUNDS_RECEIVED = \\\"insufficient funds received\\\";\\n    string internal constant ROLE_EXISTS = \\\"role already exists\\\";\\n    string internal constant UNAUTHORIZED_ACCESS = \\\"unauthorized access\\\";\\n    string internal constant SAME_ADDRESS_NOT_ALLOWED = \\\"same address not allowed\\\";\\n    string internal constant SELF_TRANSFER_NOT_ALLOWED = \\\"self-transfer not allowed\\\";\\n    string internal constant ZERO_ADDRESS_NOT_ALLOWED = \\\"zero address not allowed\\\";\\n    string internal constant ZERO_TRANSFER_NOT_ALLOWED = \\\"zero transfer not allowed\\\";\\n    string internal constant THRESHOLD_TOO_HIGH = \\\"threshold is too high, must be under 10\\\";\\n    string internal constant INSUFFICIENT_THRESHOLD = \\\"insufficient threshold\\\";\\n    string internal constant NO_POSITION_EXISTS = \\\"no position exists\\\";\\n    string internal constant POSITION_ALREADY_EXISTS = \\\"position already exists\\\";\\n    string internal constant PROTOCOL_NOT_FOUND = \\\"protocol not found\\\";\\n    string internal constant TOP_UP_FAILED = \\\"top up failed\\\";\\n    string internal constant SWAP_PATH_NOT_FOUND = \\\"swap path not found\\\";\\n    string internal constant UNDERLYING_NOT_SUPPORTED = \\\"underlying token not supported\\\";\\n    string internal constant NOT_ENOUGH_FUNDS_WITHDRAWN =\\n        \\\"not enough funds were withdrawn from the pool\\\";\\n    string internal constant FAILED_TRANSFER = \\\"transfer failed\\\";\\n    string internal constant FAILED_MINT = \\\"mint failed\\\";\\n    string internal constant FAILED_REPAY_BORROW = \\\"repay borrow failed\\\";\\n    string internal constant FAILED_METHOD_CALL = \\\"method call failed\\\";\\n    string internal constant NOTHING_TO_CLAIM = \\\"there is no claimable balance\\\";\\n    string internal constant ERC20_BALANCE_EXCEEDED = \\\"ERC20: transfer amount exceeds balance\\\";\\n    string internal constant INVALID_MINTER =\\n        \\\"the minter address of the LP token and the pool address do not match\\\";\\n    string internal constant STAKER_VAULT_EXISTS = \\\"a staker vault already exists for the token\\\";\\n    string internal constant DEADLINE_NOT_ZERO = \\\"deadline must be 0\\\";\\n    string internal constant DEADLINE_NOT_SET = \\\"deadline is 0\\\";\\n    string internal constant DEADLINE_NOT_REACHED = \\\"deadline has not been reached yet\\\";\\n    string internal constant DELAY_TOO_SHORT = \\\"delay be at least 3 days\\\";\\n    string internal constant INSUFFICIENT_UPDATE_BALANCE =\\n        \\\"insufficient funds for updating the position\\\";\\n    string internal constant SAME_AS_CURRENT = \\\"value must be different to existing value\\\";\\n    string internal constant NOT_CAPPED = \\\"the pool is not currently capped\\\";\\n    string internal constant ALREADY_CAPPED = \\\"the pool is already capped\\\";\\n    string internal constant EXCEEDS_DEPOSIT_CAP = \\\"deposit exceeds deposit cap\\\";\\n    string internal constant VALUE_TOO_LOW_FOR_GAS = \\\"value too low to cover gas\\\";\\n    string internal constant NOT_ENOUGH_FUNDS = \\\"not enough funds to withdraw\\\";\\n    string internal constant ESTIMATED_GAS_TOO_HIGH = \\\"too much ETH will be used for gas\\\";\\n    string internal constant DEPOSIT_FAILED = \\\"deposit failed\\\";\\n    string internal constant GAS_TOO_HIGH = \\\"too much ETH used for gas\\\";\\n    string internal constant GAS_BANK_BALANCE_TOO_LOW = \\\"not enough ETH in gas bank to cover gas\\\";\\n    string internal constant INVALID_TOKEN_TO_ADD = \\\"Invalid token to add\\\";\\n    string internal constant INVALID_TOKEN_TO_REMOVE = \\\"token can not be removed\\\";\\n    string internal constant TIME_DELAY_NOT_EXPIRED = \\\"time delay not expired yet\\\";\\n    string internal constant UNDERLYING_NOT_WITHDRAWABLE =\\n        \\\"pool does not support additional underlying coins to be withdrawn\\\";\\n    string internal constant STRATEGY_SHUT_DOWN = \\\"Strategy is shut down\\\";\\n    string internal constant STRATEGY_DOES_NOT_EXIST = \\\"Strategy does not exist\\\";\\n    string internal constant UNSUPPORTED_UNDERLYING = \\\"Underlying not supported\\\";\\n    string internal constant NO_DEX_SET = \\\"no dex has been set for token\\\";\\n    string internal constant INVALID_TOKEN_PAIR = \\\"invalid token pair\\\";\\n    string internal constant TOKEN_NOT_USABLE = \\\"token not usable for the specific action\\\";\\n    string internal constant ADDRESS_NOT_ACTION = \\\"address is not registered action\\\";\\n    string internal constant INVALID_SLIPPAGE_TOLERANCE = \\\"Invalid slippage tolerance\\\";\\n    string internal constant POOL_NOT_PAUSED = \\\"Pool must be paused to withdraw from reserve\\\";\\n    string internal constant INTERACTION_LIMIT = \\\"Max of one deposit and withdraw per block\\\";\\n    string internal constant GAUGE_EXISTS = \\\"Gauge already exists\\\";\\n    string internal constant GAUGE_DOES_NOT_EXIST = \\\"Gauge does not exist\\\";\\n    string internal constant EXCEEDS_MAX_BOOST = \\\"Not allowed to exceed maximum boost on Convex\\\";\\n    string internal constant PREPARED_WITHDRAWAL =\\n        \\\"Cannot relock funds when withdrawal is being prepared\\\";\\n    string internal constant ASSET_NOT_SUPPORTED = \\\"Asset not supported\\\";\\n    string internal constant STALE_PRICE = \\\"Price is stale\\\";\\n    string internal constant NEGATIVE_PRICE = \\\"Price is negative\\\";\\n    string internal constant NOT_ENOUGH_BKD_STAKED = \\\"Not enough BKD tokens staked\\\";\\n}\\n\"\r\n    },\r\n    \"IAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\ninterface IAdmin {\\n    event NewAdminAdded(address newAdmin);\\n    event AdminRenounced(address oldAdmin);\\n\\n    function admins() external view returns (address[] memory);\\n\\n    function addAdmin(address newAdmin) external returns (bool);\\n\\n    function renounceAdmin() external returns (bool);\\n\\n    function isAdmin(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"Preparable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.9;\\n\\nimport \\\"IPreparable.sol\\\";\\nimport \\\"Errors.sol\\\";\\n\\n/**\\n * @notice Implements the base logic for a two-phase commit\\n * @dev This does not implements any access-control so publicly exposed\\n * callers should make sure to have the proper checks in palce\\n */\\ncontract Preparable is IPreparable {\\n    uint256 private constant _MIN_DELAY = 3 days;\\n\\n    mapping(bytes32 => address) public pendingAddresses;\\n    mapping(bytes32 => uint256) public pendingUInts256;\\n\\n    mapping(bytes32 => address) public currentAddresses;\\n    mapping(bytes32 => uint256) public currentUInts256;\\n\\n    /**\\n     * @dev Deadlines shares the same namespace regardless of the type\\n     * of the pending variable so this needs to be enforced in the caller\\n     */\\n    mapping(bytes32 => uint256) public deadlines;\\n\\n    function _prepareDeadline(bytes32 key, uint256 delay) internal {\\n        require(deadlines[key] == 0, Error.DEADLINE_NOT_ZERO);\\n        require(delay >= _MIN_DELAY, Error.DELAY_TOO_SHORT);\\n        deadlines[key] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @notice Prepares an uint256 that should be commited to the contract\\n     * after `_MIN_DELAY` elapsed\\n     * @param value The value to prepare\\n     * @return `true` if success.\\n     */\\n    function _prepare(\\n        bytes32 key,\\n        uint256 value,\\n        uint256 delay\\n    ) internal returns (bool) {\\n        _prepareDeadline(key, delay);\\n        pendingUInts256[key] = value;\\n        emit ConfigPreparedNumber(key, value, delay);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Same as `_prepare(bytes32,uint256,uint256)` but uses a default delay\\n     */\\n    function _prepare(bytes32 key, uint256 value) internal returns (bool) {\\n        return _prepare(key, value, _MIN_DELAY);\\n    }\\n\\n    /**\\n     * @notice Prepares an address that should be commited to the contract\\n     * after `_MIN_DELAY` elapsed\\n     * @param value The value to prepare\\n     * @return `true` if success.\\n     */\\n    function _prepare(\\n        bytes32 key,\\n        address value,\\n        uint256 delay\\n    ) internal returns (bool) {\\n        _prepareDeadline(key, delay);\\n        pendingAddresses[key] = value;\\n        emit ConfigPreparedAddress(key, value, delay);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Same as `_prepare(bytes32,address,uint256)` but uses a default delay\\n     */\\n    function _prepare(bytes32 key, address value) internal returns (bool) {\\n        return _prepare(key, value, _MIN_DELAY);\\n    }\\n\\n    /**\\n     * @notice Reset a uint256 key\\n     * @return `true` if success.\\n     */\\n    function _resetUInt256Config(bytes32 key) internal returns (bool) {\\n        require(deadlines[key] != 0, Error.DEADLINE_NOT_ZERO);\\n        deadlines[key] = 0;\\n        pendingUInts256[key] = 0;\\n        emit ConfigReset(key);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Reset an address key\\n     * @return `true` if success.\\n     */\\n    function _resetAddressConfig(bytes32 key) internal returns (bool) {\\n        require(deadlines[key] != 0, Error.DEADLINE_NOT_ZERO);\\n        deadlines[key] = 0;\\n        pendingAddresses[key] = address(0);\\n        emit ConfigReset(key);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks the deadline of the key and reset it\\n     */\\n    function _executeDeadline(bytes32 key) internal {\\n        uint256 deadline = deadlines[key];\\n        require(block.timestamp >= deadline, Error.DEADLINE_NOT_REACHED);\\n        require(deadline != 0, Error.DEADLINE_NOT_SET);\\n        deadlines[key] = 0;\\n    }\\n\\n    /**\\n     * @notice Execute uint256 config update (with time delay enforced).\\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\\n     * @return New value.\\n     */\\n    function _executeUInt256(bytes32 key) internal returns (uint256) {\\n        _executeDeadline(key);\\n        uint256 newValue = pendingUInts256[key];\\n        _setConfig(key, newValue);\\n        return newValue;\\n    }\\n\\n    /**\\n     * @notice Execute address config update (with time delay enforced).\\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\\n     * @return New value.\\n     */\\n    function _executeAddress(bytes32 key) internal returns (address) {\\n        _executeDeadline(key);\\n        address newValue = pendingAddresses[key];\\n        _setConfig(key, newValue);\\n        return newValue;\\n    }\\n\\n    function _setConfig(bytes32 key, address value) internal returns (address) {\\n        address oldValue = currentAddresses[key];\\n        currentAddresses[key] = value;\\n        pendingAddresses[key] = address(0);\\n        deadlines[key] = 0;\\n        emit ConfigUpdatedAddress(key, oldValue, value);\\n        return value;\\n    }\\n\\n    function _setConfig(bytes32 key, uint256 value) internal returns (uint256) {\\n        uint256 oldValue = currentUInts256[key];\\n        currentUInts256[key] = value;\\n        pendingUInts256[key] = 0;\\n        deadlines[key] = 0;\\n        emit ConfigUpdatedNumber(key, oldValue, value);\\n        return value;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"AddressProvider.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultReserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasBank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"action\",\"type\":\"address\"}],\"name\":\"ActionListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"ConfigPreparedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"ConfigPreparedNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"ConfigReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ConfigUpdatedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ConfigUpdatedNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"KnownAddressKeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerVault\",\"type\":\"address\"}],\"name\":\"StakerVaultDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerVault\",\"type\":\"address\"}],\"name\":\"StakerVaultListed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"action\",\"type\":\"address\"}],\"name\":\"addAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"}],\"name\":\"addFeeHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"addKnownAddressKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerVault\",\"type\":\"address\"}],\"name\":\"addStakerVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allStakerVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentUInts256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deadlines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"executeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBKDLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKnownAddressKeys\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolForToken\",\"outputs\":[{\"internalType\":\"contract ILiquidityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getStakerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"action\",\"type\":\"address\"}],\"name\":\"isAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isStakerVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerVault\",\"type\":\"address\"}],\"name\":\"isStakerVaultRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"}],\"name\":\"isWhiteListedFeeHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingUInts256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"prepareAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"}],\"name\":\"removeFeeHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"resetAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"safeGetPoolForToken\",\"outputs\":[{\"internalType\":\"contract ILiquidityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bkdLocker\",\"type\":\"address\"}],\"name\":\"setBKDLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tryGetStakerVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AddressProvider", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000019b61f2fb92e6a679e9bee69ff5b68d28bf1a5b80000000000000000000000008b4953dccd3ee51da1e146fd8feca4c21458238c0000000000000000000000008675b649af5af7dbe01d86ae4fb2900a38ad47be000000000000000000000000dec278a43984038f10546b389ca75bda1f25d6ea", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}