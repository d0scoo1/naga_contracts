{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Sherlock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\n\\nimport './interfaces/ISherlock.sol';\\n\\n/// @title Sherlock core interface for stakers\\n/// @author Evert Kors\\n// This is the contract that manages staking actions\\n\\ncontract Sherlock is ISherlock, ERC721, Ownable, Pausable {\\n  using SafeERC20 for IERC20;\\n\\n  // The minimal amount needed to mint a position\\n  uint256 public constant MIN_STAKE = 10**6; // 1 USDC\\n\\n  // The initial period for a staker to restake/withdraw without being auto-restaked\\n  uint256 public constant ARB_RESTAKE_WAIT_TIME = 2 weeks;\\n\\n  // The period during which the reward for restaking an account (after the inital period) grows\\n  uint256 public constant ARB_RESTAKE_GROWTH_TIME = 1 weeks;\\n\\n  // Anyone who gets auto-restaked is restaked for this period (26 weeks)\\n  uint256 public constant ARB_RESTAKE_PERIOD = 26 weeks;\\n\\n  // The percentage of someone's stake that can be paid to an arb for restaking\\n  uint256 public constant ARB_RESTAKE_MAX_PERCENTAGE = (10**18 / 100) * 20; // 20%\\n\\n  // USDC address\\n  IERC20 public immutable token;\\n\\n  // SHER token address\\n  IERC20 public immutable sher;\\n\\n  // Key is the staking period (3 months, 6 months, etc.), value will be whether it is allowed or not\\n  mapping(uint256 => bool) public override stakingPeriods;\\n\\n  // Key is a specific position ID (NFT ID), value represents the timestamp at which the position can be unstaked/restaked\\n  mapping(uint256 => uint256) internal lockupEnd_;\\n\\n  // Key is NFT ID, value is the amount of SHER rewards owed to that NFT position\\n  mapping(uint256 => uint256) internal sherRewards_;\\n\\n  // Key is NFT ID, value is the amount of shares representing the USDC owed to this position (includes principal, interest, etc.)\\n  mapping(uint256 => uint256) internal stakeShares;\\n\\n  // Total amount of shares that have been issued to all NFT positions\\n  uint256 internal totalStakeShares;\\n\\n  // Contract representing the current yield strategy (deposits staker funds into Aave, etc.)\\n  IStrategyManager public override yieldStrategy;\\n\\n  // Instances of relevant Sherlock contracts\\n  ISherDistributionManager public override sherDistributionManager;\\n  ISherlockProtocolManager public override sherlockProtocolManager;\\n  ISherlockClaimManager public override sherlockClaimManager;\\n\\n  // Address to which nonstaker payments are made\\n  // This will start out as a multi-sig address, then become a contract address later\\n  address public override nonStakersAddress;\\n\\n  // Stores the ID of the most recently created NFT\\n  // This variable is incremented by 1 to create a new NFT ID\\n  uint256 internal nftCounter;\\n\\n  string private constant baseURI = 'https://nft.sherlock.xyz/api/mainnet/';\\n\\n  // Even though `_sherDistributionManager` can be removed once deployed, every initial deployment will have an active instance.\\n  constructor(\\n    IERC20 _token, // USDC address\\n    IERC20 _sher, // SHER token address\\n    string memory _name, // Token collection name (see ERC-721 docs)\\n    string memory _symbol, // Token collection symbol (see ERC-721 docs)\\n    IStrategyManager _yieldStrategy, // The active yield strategy contract\\n    ISherDistributionManager _sherDistributionManager, // The active DistributionManager contract\\n    address _nonStakersAddress, // The address to which nonstakers payments go\\n    ISherlockProtocolManager _sherlockProtocolManager, // The address for the ProtocolManager contract\\n    ISherlockClaimManager _sherlockClaimManager, // The address for the ClaimManager contract\\n    uint256[] memory _initialstakingPeriods // The initial periods (3m, 6m, etc.) that someone can stake for\\n  ) ERC721(_name, _symbol) {\\n    if (address(_token) == address(0)) revert ZeroArgument();\\n    if (address(_sher) == address(0)) revert ZeroArgument();\\n    if (address(_yieldStrategy) == address(0)) revert ZeroArgument();\\n    if (address(_sherDistributionManager) == address(0)) revert ZeroArgument();\\n    if (_nonStakersAddress == address(0)) revert ZeroArgument();\\n    if (address(_sherlockProtocolManager) == address(0)) revert ZeroArgument();\\n    if (address(_sherlockClaimManager) == address(0)) revert ZeroArgument();\\n\\n    token = _token;\\n    sher = _sher;\\n    yieldStrategy = _yieldStrategy;\\n    sherDistributionManager = _sherDistributionManager;\\n    nonStakersAddress = _nonStakersAddress;\\n    sherlockProtocolManager = _sherlockProtocolManager;\\n    sherlockClaimManager = _sherlockClaimManager;\\n\\n    // Enabling the first set of staking periods that were provided in constructor args\\n    for (uint256 i; i < _initialstakingPeriods.length; i++) {\\n      enableStakingPeriod(_initialstakingPeriods[i]);\\n    }\\n\\n    emit YieldStrategyUpdated(IStrategyManager(address(0)), _yieldStrategy);\\n    emit SherDistributionManagerUpdated(\\n      ISherDistributionManager(address(0)),\\n      _sherDistributionManager\\n    );\\n    emit NonStakerAddressUpdated(address(0), _nonStakersAddress);\\n    emit ProtocolManagerUpdated(ISherlockProtocolManager(address(0)), _sherlockProtocolManager);\\n    emit ClaimManagerUpdated(ISherlockClaimManager(address(0)), _sherlockClaimManager);\\n  }\\n\\n  //\\n  // View functions\\n  //\\n\\n  // Returns the timestamp at which the position represented by _tokenID can first be unstaked/restaked\\n  /// @notice View the current lockup end timestamp of `_tokenID`\\n  /// @return Timestamp when NFT position unlocks\\n  function lockupEnd(uint256 _tokenID) public view override returns (uint256) {\\n    if (!_exists(_tokenID)) revert NonExistent();\\n\\n    return lockupEnd_[_tokenID];\\n  }\\n\\n  // Returns the SHER rewards owed to this position\\n  /// @notice View the current SHER reward of `_tokenID`\\n  /// @return Amount of SHER rewarded to owner upon reaching the end of the lockup\\n  function sherRewards(uint256 _tokenID) public view override returns (uint256) {\\n    if (!_exists(_tokenID)) revert NonExistent();\\n\\n    return sherRewards_[_tokenID];\\n  }\\n\\n  // Returns the tokens (USDC) owed to a position\\n  /// @notice View the current token balance claimable upon reaching end of the lockup\\n  /// @return Amount of tokens assigned to owner when unstaking position\\n  function tokenBalanceOf(uint256 _tokenID) public view override returns (uint256) {\\n    if (!_exists(_tokenID)) revert NonExistent();\\n    // Finds the fraction of total shares owed to this position and multiplies by the total amount of tokens (USDC) owed to stakers\\n    return (stakeShares[_tokenID] * totalTokenBalanceStakers()) / totalStakeShares;\\n  }\\n\\n  // Gets the total amount of tokens (USDC) owed to stakers\\n  // Adds this contract's balance, the tokens in the yield strategy, and the claimable premiums in the protocol manager contract\\n  /// @notice View the current TVL for all stakers\\n  /// @return Total amount of tokens staked\\n  /// @dev Adds principal + strategy + premiums\\n  /// @dev Will calculate the most up to date value for each piece\\n  function totalTokenBalanceStakers() public view override returns (uint256) {\\n    return\\n      token.balanceOf(address(this)) +\\n      yieldStrategy.balanceOf() +\\n      sherlockProtocolManager.claimablePremiums();\\n  }\\n\\n  //\\n  // Gov functions\\n  //\\n\\n  // Allows governance to add a new staking period (4 months, etc.)\\n  /// @notice Allows stakers to stake for `_period` of time\\n  /// @param _period Period of time, in seconds,\\n  /// @dev should revert if already enabled\\n  function enableStakingPeriod(uint256 _period) public override onlyOwner {\\n    if (_period == 0) revert ZeroArgument();\\n    // Revert if staking period is already active\\n    if (stakingPeriods[_period]) revert InvalidArgument();\\n\\n    // Sets the staking period to true\\n    stakingPeriods[_period] = true;\\n    emit StakingPeriodEnabled(_period);\\n  }\\n\\n  // Allows governance to remove a staking period (4 months, etc.)\\n  /// @notice Disallow stakers to stake for `_period` of time\\n  /// @param _period Period of time, in seconds,\\n  /// @dev should revert if already disabled\\n  function disableStakingPeriod(uint256 _period) external override onlyOwner {\\n    // Revert if staking period is already inactive\\n    if (!stakingPeriods[_period]) revert InvalidArgument();\\n\\n    // Sets the staking period to false\\n    stakingPeriods[_period] = false;\\n    emit StakingPeriodDisabled(_period);\\n  }\\n\\n  // Sets a new contract to be the active SHER distribution manager\\n  /// @notice Update SHER distribution manager contract\\n  /// @param _sherDistributionManager New adddress of the manager\\n  /// @dev After updating the contract, call setSherlockCoreAddress() on the new contract\\n  function updateSherDistributionManager(ISherDistributionManager _sherDistributionManager)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    if (address(_sherDistributionManager) == address(0)) revert ZeroArgument();\\n    if (sherDistributionManager == _sherDistributionManager) revert InvalidArgument();\\n\\n    emit SherDistributionManagerUpdated(sherDistributionManager, _sherDistributionManager);\\n    sherDistributionManager = _sherDistributionManager;\\n  }\\n\\n  /// @notice Deletes the SHER distribution manager altogether (if Sherlock decides to no longer pay out SHER rewards)\\n  function removeSherDistributionManager() external override onlyOwner {\\n    if (address(sherDistributionManager) == address(0)) revert InvalidConditions();\\n\\n    emit SherDistributionManagerUpdated(\\n      sherDistributionManager,\\n      ISherDistributionManager(address(0))\\n    );\\n    delete sherDistributionManager;\\n  }\\n\\n  // Sets a new address for nonstakers payments\\n  /// @notice Update address eligible for non staker rewards from protocol premiums\\n  /// @param _nonStakers Address eligible for non staker rewards\\n  function updateNonStakersAddress(address _nonStakers) external override onlyOwner {\\n    if (address(_nonStakers) == address(0)) revert ZeroArgument();\\n    if (nonStakersAddress == _nonStakers) revert InvalidArgument();\\n\\n    emit NonStakerAddressUpdated(nonStakersAddress, _nonStakers);\\n    nonStakersAddress = _nonStakers;\\n  }\\n\\n  // Sets a new protocol manager contract\\n  /// @notice Transfer protocol manager implementation address\\n  /// @param _protocolManager new implementation address\\n  /// @dev After updating the contract, call setSherlockCoreAddress() on the new contract\\n  function updateSherlockProtocolManager(ISherlockProtocolManager _protocolManager)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    if (address(_protocolManager) == address(0)) revert ZeroArgument();\\n    if (sherlockProtocolManager == _protocolManager) revert InvalidArgument();\\n\\n    emit ProtocolManagerUpdated(sherlockProtocolManager, _protocolManager);\\n    sherlockProtocolManager = _protocolManager;\\n  }\\n\\n  // Sets a new claim manager contract\\n  /// @notice Transfer claim manager role to different address\\n  /// @param _claimManager New address of claim manager\\n  /// @dev After updating the contract, call setSherlockCoreAddress() on the new contract\\n  function updateSherlockClaimManager(ISherlockClaimManager _claimManager)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    if (address(_claimManager) == address(0)) revert ZeroArgument();\\n    if (sherlockClaimManager == _claimManager) revert InvalidArgument();\\n\\n    emit ClaimManagerUpdated(sherlockClaimManager, _claimManager);\\n    sherlockClaimManager = _claimManager;\\n  }\\n\\n  // Sets a new yield strategy manager contract\\n  /// @notice Update yield strategy\\n  /// @param _yieldStrategy New address of the strategy\\n  /// @dev Call will fail if underlying withdrawAll call fails\\n  /// @dev After updating the contract, call setSherlockCoreAddress() on the new contract\\n  function updateYieldStrategy(IStrategyManager _yieldStrategy) external override onlyOwner {\\n    if (address(_yieldStrategy) == address(0)) revert ZeroArgument();\\n    if (yieldStrategy == _yieldStrategy) revert InvalidArgument();\\n\\n    yieldStrategy.withdrawAll();\\n\\n    emit YieldStrategyUpdated(yieldStrategy, _yieldStrategy);\\n    yieldStrategy = _yieldStrategy;\\n  }\\n\\n  // Sets a new yield strategy manager contract\\n  /// @notice Update yield strategy ignoring state of current strategy\\n  /// @param _yieldStrategy New address of the strategy\\n  /// @dev tries a yieldStrategyWithdrawAll() on old strategy, ignore failure\\n  function updateYieldStrategyForce(IStrategyManager _yieldStrategy) external override onlyOwner {\\n    if (address(_yieldStrategy) == address(0)) revert ZeroArgument();\\n    if (yieldStrategy == _yieldStrategy) revert InvalidArgument();\\n\\n    // This call is surrounded with a try catch as there is a non-zero chance the underlying yield protocol(s) will fail\\n    // For example; the Aave V2 withdraw can fail in case there is not enough liquidity available for whatever reason.\\n    // In case this happens. We still want the yield strategy to be updated.\\n    // As the worst case could be that the Aave V2 withdraw will never work again, forcing us to never use a yield strategy ever again.\\n    try yieldStrategy.withdrawAll() {} catch (bytes memory reason) {\\n      emit YieldStrategyUpdateWithdrawAllError(reason);\\n    }\\n\\n    emit YieldStrategyUpdated(yieldStrategy, _yieldStrategy);\\n    yieldStrategy = _yieldStrategy;\\n  }\\n\\n  // Deposits a chosen amount of tokens (USDC) into the active yield strategy\\n  /// @notice Deposit `_amount` into active strategy\\n  /// @param _amount Amount of tokens\\n  /// @dev gov only\\n  function yieldStrategyDeposit(uint256 _amount) external override onlyOwner {\\n    if (_amount == 0) revert ZeroArgument();\\n\\n    // Transfers any tokens owed to stakers from the protocol manager contract to this contract first\\n    sherlockProtocolManager.claimPremiumsForStakers();\\n    // Transfers the amount of tokens to the yield strategy contract\\n    token.safeTransfer(address(yieldStrategy), _amount);\\n    // Deposits all tokens in the yield strategy contract into the actual yield strategy\\n    yieldStrategy.deposit();\\n  }\\n\\n  // Withdraws a chosen amount of tokens (USDC) from the yield strategy back into this contract\\n  /// @notice Withdraw `_amount` from active strategy\\n  /// @param _amount Amount of tokens\\n  /// @dev gov only\\n  function yieldStrategyWithdraw(uint256 _amount) external override onlyOwner {\\n    if (_amount == 0) revert ZeroArgument();\\n\\n    yieldStrategy.withdraw(_amount);\\n  }\\n\\n  // Withdraws all tokens from the yield strategy back into this contract\\n  /// @notice Withdraw all funds from active strategy\\n  /// @dev gov only\\n  function yieldStrategyWithdrawAll() external override onlyOwner {\\n    yieldStrategy.withdrawAll();\\n  }\\n\\n  /// @notice Pause external functions in all contracts\\n  /// @dev A manager can still be replaced with a new contract in a `paused` state\\n  /// @dev To ensure we are still able to pause all contracts, we check if the manager is unpaused\\n  function pause() external onlyOwner {\\n    _pause();\\n    if (!Pausable(address(yieldStrategy)).paused()) yieldStrategy.pause();\\n    // sherDistributionManager can be 0, pause isn't needed in that case\\n    if (\\n      address(sherDistributionManager) != address(0) &&\\n      !Pausable(address(sherDistributionManager)).paused()\\n    ) {\\n      sherDistributionManager.pause();\\n    }\\n    if (!Pausable(address(sherlockProtocolManager)).paused()) sherlockProtocolManager.pause();\\n    if (!Pausable(address(sherlockClaimManager)).paused()) sherlockClaimManager.pause();\\n  }\\n\\n  /// @notice Unpause external functions in all contracts\\n  /// @dev A manager can still be replaced with a new contract in an `unpaused` state\\n  /// @dev To ensure we are still able to unpause all contracts, we check if the manager is paused\\n  function unpause() external onlyOwner {\\n    _unpause();\\n    if (Pausable(address(yieldStrategy)).paused()) yieldStrategy.unpause();\\n    // sherDistributionManager can be 0, unpause isn't needed in that case\\n    if (\\n      address(sherDistributionManager) != address(0) &&\\n      Pausable(address(sherDistributionManager)).paused()\\n    ) {\\n      sherDistributionManager.unpause();\\n    }\\n    if (Pausable(address(sherlockProtocolManager)).paused()) sherlockProtocolManager.unpause();\\n    if (Pausable(address(sherlockClaimManager)).paused()) sherlockClaimManager.unpause();\\n  }\\n\\n  //\\n  // Access control functions\\n  //\\n  function _beforeTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _tokenID\\n  ) internal override whenNotPaused {}\\n\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return baseURI;\\n  }\\n\\n  // Transfers specified amount of tokens to the address specified by the claim creator (protocol agent)\\n  // This function is called by the Sherlock claim manager contract if a claim is approved\\n  /// @notice Initiate a payout of `_amount` to `_receiver`\\n  /// @param _receiver Receiver of payout\\n  /// @param _amount Amount to send\\n  /// @dev only payout manager should call this\\n  /// @dev should pull money out of strategy\\n  function payoutClaim(address _receiver, uint256 _amount) external override whenNotPaused {\\n    // Can only be called by the Sherlock claim manager contract\\n    if (msg.sender != address(sherlockClaimManager)) revert Unauthorized();\\n\\n    if (_amount != 0) {\\n      // Sends the amount of tokens to the receiver address (specified by the protocol agent who created the claim)\\n      _transferTokensOut(_receiver, _amount);\\n    }\\n    emit ClaimPayout(_receiver, _amount);\\n  }\\n\\n  //\\n  // Non-access control functions\\n  //\\n\\n  // Helper function for initial staking and restaking\\n  // Sets the unlock period, mints and transfers SHER tokens to this contract, assigns SHER tokens to this NFT position\\n  /// @notice Stakes `_amount` of tokens and locks up the `_id` position for `_period` seconds\\n  /// @param _amount Amount of tokens to stake\\n  /// @param _period Period of time for which funds get locked\\n  /// @param _id ID for this NFT position\\n  /// @param _receiver Address that will be linked to this position\\n  /// @return _sher Amount of SHER tokens awarded to this position after `_period` ends\\n  /// @dev `_period` needs to be whitelisted\\n  function _stake(\\n    uint256 _amount,\\n    uint256 _period,\\n    uint256 _id,\\n    address _receiver\\n  ) internal returns (uint256 _sher) {\\n    // Sets the timestamp at which this position can first be unstaked/restaked\\n    lockupEnd_[_id] = block.timestamp + _period;\\n\\n    if (address(sherDistributionManager) == address(0)) return 0;\\n    // Does not allow restaking of 0 tokens\\n    if (_amount == 0) return 0;\\n\\n    // Checks this amount of SHER tokens in this contract before we transfer new ones\\n    uint256 before = sher.balanceOf(address(this));\\n\\n    // pullReward() calcs then actually transfers the SHER tokens to this contract\\n    // in case this call fails, whole (re)staking transaction fails\\n    _sher = sherDistributionManager.pullReward(_amount, _period, _id, _receiver);\\n\\n    // actualAmount should represent the amount of SHER tokens transferred to this contract for the current stake position\\n    uint256 actualAmount = sher.balanceOf(address(this)) - before;\\n    if (actualAmount != _sher) revert InvalidSherAmount(_sher, actualAmount);\\n    // Assigns the newly created SHER tokens to the current stake position\\n    if (_sher != 0) sherRewards_[_id] = _sher;\\n  }\\n\\n  // Checks to see if the NFT owner is the caller and that the position is unlockable\\n  function _verifyUnlockableByOwner(uint256 _id) internal view {\\n    if (ownerOf(_id) != msg.sender) revert Unauthorized();\\n    if (lockupEnd_[_id] > block.timestamp) revert InvalidConditions();\\n  }\\n\\n  // Sends the SHER tokens associated with this NFT ID to the address of the NFT owner\\n  function _sendSherRewardsToOwner(uint256 _id, address _nftOwner) internal {\\n    uint256 sherReward = sherRewards_[_id];\\n    if (sherReward == 0) return;\\n\\n    // Deletes the SHER reward mapping for this NFT ID\\n    delete sherRewards_[_id];\\n\\n    // Transfers the SHER tokens associated with this NFT ID to the address of the NFT owner\\n    sher.safeTransfer(_nftOwner, sherReward);\\n  }\\n\\n  // Transfers an amount of tokens to the receiver address\\n  // This is the logic for a payout AND for an unstake (used by the payoutClaim() function above and in _redeemShares() below)\\n  function _transferTokensOut(address _receiver, uint256 _amount) internal {\\n    // Transfers any premiums owed to stakers from the protocol manager to this contract\\n    sherlockProtocolManager.claimPremiumsForStakers();\\n\\n    // The amount of tokens in this contract\\n    uint256 mainBalance = token.balanceOf(address(this));\\n\\n    // If the amount to transfer out is still greater than the amount of tokens in this contract,\\n    // Withdraw yield strategy tokens to make up the difference\\n    if (_amount > mainBalance) {\\n      yieldStrategy.withdraw(_amount - mainBalance);\\n    }\\n\\n    token.safeTransfer(_receiver, _amount);\\n  }\\n\\n  // Returns the amount of USDC owed to this amount of stakeShares\\n  function _redeemSharesCalc(uint256 _stakeShares) internal view returns (uint256) {\\n    // Finds fraction that the given amount of stakeShares represents of the total\\n    // Then multiplies it by the total amount of tokens (USDC) owed to all stakers\\n    return (_stakeShares * totalTokenBalanceStakers()) / totalStakeShares;\\n  }\\n\\n  // Transfers USDC to the receiver (arbitrager OR NFT owner) based on the stakeShares inputted\\n  // Also burns the requisite amount of shares associated with this NFT position\\n  // Returns the amount of USDC owed to these shares\\n  function _redeemShares(\\n    uint256 _id,\\n    uint256 _stakeShares,\\n    address _receiver\\n  ) internal returns (uint256 _amount) {\\n    // Returns the amount of USDC owed to this amount of stakeShares\\n    _amount = _redeemSharesCalc(_stakeShares);\\n    // Transfers _amount of tokens to _receiver address\\n    if (_amount != 0) _transferTokensOut(_receiver, _amount);\\n\\n    // Subtracts this amount of stakeShares from the NFT position\\n    stakeShares[_id] -= _stakeShares;\\n    // Subtracts this amount of stakeShares from the total amount of stakeShares outstanding\\n    totalStakeShares -= _stakeShares;\\n  }\\n\\n  // Helper function to restake an eligible NFT position on behalf of the NFT owner OR an arbitrager\\n  // Restakes an NFT position (_id) for a given period (_period) and\\n  // Sends any previously earned SHER rewards to the _nftOwner address\\n  function _restake(\\n    uint256 _id,\\n    uint256 _period,\\n    address _nftOwner\\n  ) internal returns (uint256 _sher) {\\n    // Sends the SHER tokens previously earned by this NFT ID to the address of the NFT owner\\n    // NOTE This function deletes the SHER reward mapping for this NFT ID\\n    _sendSherRewardsToOwner(_id, _nftOwner);\\n\\n    // tokenBalanceOf() returns the USDC amount owed to this NFT ID\\n    // _stake() restakes that amount of USDC for the period inputted\\n    // We use the same ID that we just deleted the SHER rewards mapping for\\n    // Resets the lockupEnd mapping and SHER token rewards mapping for this ID\\n    // Note stakeShares for this position do not change so no need to update\\n    _sher = _stake(tokenBalanceOf(_id), _period, _id, _nftOwner);\\n\\n    emit Restaked(_id);\\n  }\\n\\n  // This function is called in the UI by anyone who is staking for the first time (not restaking a previous position)\\n  /// @notice Stakes `_amount` of tokens and locks up for `_period` seconds, `_receiver` will receive the NFT receipt\\n  /// @param _amount Amount of tokens to stake\\n  /// @param _period Period of time, in seconds, to lockup your funds\\n  /// @param _receiver Address that will receive the NFT representing the position\\n  /// @return _id ID of the position\\n  /// @return _sher Amount of SHER tokens to be released to this ID after `_period` ends\\n  /// @dev `_period` needs to be whitelisted\\n  function initialStake(\\n    uint256 _amount,\\n    uint256 _period,\\n    address _receiver\\n  ) external override whenNotPaused returns (uint256 _id, uint256 _sher) {\\n    if (_amount == 0) revert ZeroArgument();\\n    if (_amount < MIN_STAKE) revert InvalidArgument();\\n    // Makes sure the period is a whitelisted period\\n    if (!stakingPeriods[_period]) revert InvalidArgument();\\n    if (address(_receiver) == address(0)) revert ZeroArgument();\\n    // Adds 1 to the ID of the last NFT created for the new NFT ID\\n    _id = ++nftCounter;\\n\\n    // Transfers the USDC from the msg.sender to this contract for the amount specified (this is the staking action)\\n    token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    uint256 stakeShares_;\\n    uint256 totalStakeShares_ = totalStakeShares;\\n    // _amount of tokens divided by the \\\"before\\\" total amount of tokens, multiplied by the \\\"before\\\" amount of stake shares\\n    if (totalStakeShares_ != 0)\\n      stakeShares_ = (_amount * totalStakeShares_) / (totalTokenBalanceStakers() - _amount);\\n      // If this is the first stake ever, we just mint stake shares equal to the amount of USDC staked\\n    else stakeShares_ = _amount;\\n\\n    // Assigns this NFT ID the calc'd amount of stake shares above\\n    stakeShares[_id] = stakeShares_;\\n    // Adds the newly created stake shares to the total amount of stake shares\\n    totalStakeShares += stakeShares_;\\n\\n    // Locks up the USDC amount and calcs the SHER token amount to receive on unstake\\n    _sher = _stake(_amount, _period, _id, _receiver);\\n\\n    // This is an ERC-721 function that creates an NFT and sends it to the receiver\\n    _safeMint(_receiver, _id);\\n  }\\n\\n  // This is how a staker unstakes and cashes out on their position\\n  /// @notice Redeem NFT `_id` and receive `_amount` of tokens\\n  /// @param _id TokenID of the position\\n  /// @return _amount Amount of tokens (USDC) owed to NFT ID\\n  /// @dev Only the owner of `_id` will be able to redeem their position\\n  /// @dev The SHER rewards are sent to the NFT owner\\n  /// @dev Can only be called after lockup `_period` has ended\\n  function redeemNFT(uint256 _id) external override whenNotPaused returns (uint256 _amount) {\\n    // Checks to make sure caller is the owner of the NFT position, and that the lockup period is over\\n    _verifyUnlockableByOwner(_id);\\n\\n    // This is the ERC-721 function to destroy an NFT (with owner's approval)\\n    _burn(_id);\\n\\n    // Transfers USDC to the NFT owner based on the stake shares associated with this NFT ID\\n    // Also burns the requisite amount of shares associated with this NFT position\\n    // Returns the amount of USDC owed to these shares\\n    _amount = _redeemShares(_id, stakeShares[_id], msg.sender);\\n\\n    // Sends the SHER tokens associated with this NFT ID to the NFT owner\\n    _sendSherRewardsToOwner(_id, msg.sender);\\n\\n    // Removes the unlock deadline associated with this NFT\\n    delete lockupEnd_[_id];\\n  }\\n\\n  // This is how a staker restakes an expired position\\n  /// @notice Owner restakes position with ID: `_id` for `_period` seconds\\n  /// @param _id ID of the position\\n  /// @param _period Period of time, in seconds, to lockup your funds\\n  /// @return _sher Amount of SHER tokens to be released to owner address after `_period` ends\\n  /// @dev Only the owner of `_id` will be able to restake their position using this call\\n  /// @dev `_period` needs to be whitelisted\\n  /// @dev Can only be called after lockup `_period` has ended\\n  function ownerRestake(uint256 _id, uint256 _period)\\n    external\\n    override\\n    whenNotPaused\\n    returns (uint256 _sher)\\n  {\\n    // Checks to make sure caller is the owner of the NFT position, and that the lockup period is over\\n    _verifyUnlockableByOwner(_id);\\n\\n    // Checks to make sure the staking period is a whitelisted one\\n    if (!stakingPeriods[_period]) revert InvalidArgument();\\n\\n    // Sends the previously earned SHER token rewards to the owner and restakes the USDC value of the position\\n    _sher = _restake(_id, _period, msg.sender);\\n  }\\n\\n  // Calcs the reward (in stake shares) an arb would get for restaking a position\\n  // Takes the NFT ID as a param and outputs the stake shares (which can be redeemed for USDC) for the arb\\n  function _calcSharesForArbRestake(uint256 _id) internal view returns (uint256, bool) {\\n    // this is the first point at which an arb can restake a position (i.e. two weeks after the initial lockup ends)\\n    uint256 initialArbTime = lockupEnd_[_id] + ARB_RESTAKE_WAIT_TIME;\\n\\n    // If the initialArbTime has not passed, return 0 for the stake shares and false for whether an arb can restake the position\\n    if (initialArbTime > block.timestamp) return (0, false);\\n\\n    // The max rewards (as a % of the position's shares) for the arb are available at this timestamp\\n    uint256 maxRewardArbTime = initialArbTime + ARB_RESTAKE_GROWTH_TIME;\\n\\n    // Caps the timestamp at the maxRewardArbTime so the calc below never goes above 100%\\n    uint256 targetTime = block.timestamp < maxRewardArbTime ? block.timestamp : maxRewardArbTime;\\n\\n    // Scaled by 10**18\\n    // Represents the max amount of stake shares that an arb could get from restaking this position\\n    uint256 maxRewardScaled = ARB_RESTAKE_MAX_PERCENTAGE * stakeShares[_id];\\n\\n    // Calcs what % of the max reward an arb gets based on the timestamp at which they call this function\\n    // If targetTime == maxRewardArbTime, then the arb gets 100% of the maxRewardScaled\\n    return (\\n      ((targetTime - initialArbTime) * maxRewardScaled) / (ARB_RESTAKE_GROWTH_TIME) / 10**18,\\n      true\\n    );\\n  }\\n\\n  /// @notice Calculates the reward in tokens (USDC) that an arb would get for calling restake on a position\\n  /// @return profit How much profit an arb would make in USDC\\n  /// @return able If the transaction can be executed (the current timestamp is during an arb period, etc.)\\n  function viewRewardForArbRestake(uint256 _id) external view returns (uint256 profit, bool able) {\\n    if (!_exists(_id)) revert NonExistent();\\n    // Returns the stake shares that an arb would get, and whether the position can currently be arbed\\n    // `profit` variable is used to store the amount of shares\\n    (profit, able) = _calcSharesForArbRestake(_id);\\n    // Calculates the tokens (USDC) represented by that amount of stake shares\\n    // Amount of shares stored in `profit` is used to calculate the reward in USDC, which is stored in `profit`\\n    profit = _redeemSharesCalc(profit);\\n  }\\n\\n  /// @notice Allows someone who doesn't own the position (an arbitrager) to restake the position for 26 weeks (ARB_RESTAKE_PERIOD)\\n  /// @param _id ID of the position\\n  /// @return _sher Amount of SHER tokens to be released to position owner on expiry of the 26 weeks lockup\\n  /// @return _arbReward Amount of tokens (USDC) sent to caller (the arbitrager) in return for calling the function\\n  /// @dev Can only be called after lockup `_period` is more than 2 weeks in the past (assuming ARB_RESTAKE_WAIT_TIME is 2 weeks)\\n  /// @dev Max 20% (ARB_RESTAKE_MAX_PERCENTAGE) of tokens associated with a position are used to incentivize arbs (x)\\n  /// @dev During a 2 week period the reward ratio will move from 0% to 100% (* x)\\n  function arbRestake(uint256 _id)\\n    external\\n    override\\n    whenNotPaused\\n    returns (uint256 _sher, uint256 _arbReward)\\n  {\\n    address nftOwner = ownerOf(_id);\\n\\n    // Returns the stake shares that an arb would get, and whether the position can currently be arbed\\n    (uint256 arbRewardShares, bool able) = _calcSharesForArbRestake(_id);\\n    // Revert if not able to be arbed\\n    if (!able) revert InvalidConditions();\\n\\n    // Transfers USDC to the arbitrager based on the stake shares associated with the arb reward\\n    // Also burns the requisite amount of shares associated with this NFT position\\n    // Returns the amount of USDC paid to the arbitrager\\n    _arbReward = _redeemShares(_id, arbRewardShares, msg.sender);\\n\\n    // Restakes the tokens (USDC) associated with this position for the ARB_RESTAKE_PERIOD (26 weeks)\\n    // Sends previously earned SHER rewards to the NFT owner address\\n    _sher = _restake(_id, ARB_RESTAKE_PERIOD, nftOwner);\\n\\n    emit ArbRestaked(_id, _arbReward);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport './ISherlockStake.sol';\\nimport './ISherlockGov.sol';\\nimport './ISherlockPayout.sol';\\nimport './ISherlockStrategy.sol';\\n\\ninterface ISherlock is ISherlockStake, ISherlockGov, ISherlockPayout, ISherlockStrategy, IERC721 {\\n  // msg.sender is not authorized to call this function\\n  error Unauthorized();\\n\\n  // An address or other value passed in is equal to zero (and shouldn't be)\\n  error ZeroArgument();\\n\\n  // Occurs when a value already holds the desired property, or is not whitelisted\\n  error InvalidArgument();\\n\\n  // Required conditions are not true/met\\n  error InvalidConditions();\\n\\n  // If the SHER tokens held in a contract are not the value they are supposed to be\\n  error InvalidSherAmount(uint256 expected, uint256 actual);\\n\\n  // Checks the ERC-721 functions _exists() to see if an NFT ID actually exists and errors if not\\n  error NonExistent();\\n\\n  event ArbRestaked(uint256 indexed tokenID, uint256 reward);\\n\\n  event Restaked(uint256 indexed tokenID);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\n/// @title Sherlock core interface for stakers\\n/// @author Evert Kors\\ninterface ISherlockStake {\\n  /// @notice View the current lockup end timestamp of `_tokenID`\\n  /// @return Timestamp when NFT position unlocks\\n  function lockupEnd(uint256 _tokenID) external view returns (uint256);\\n\\n  /// @notice View the current SHER reward of `_tokenID`\\n  /// @return Amount of SHER rewarded to owner upon reaching the end of the lockup\\n  function sherRewards(uint256 _tokenID) external view returns (uint256);\\n\\n  /// @notice View the current token balance claimable upon reaching end of the lockup\\n  /// @return Amount of tokens assigned to owner when unstaking position\\n  function tokenBalanceOf(uint256 _tokenID) external view returns (uint256);\\n\\n  /// @notice View the current TVL for all stakers\\n  /// @return Total amount of tokens staked\\n  /// @dev Adds principal + strategy + premiums\\n  /// @dev Will calculate the most up to date value for each piece\\n  function totalTokenBalanceStakers() external view returns (uint256);\\n\\n  /// @notice Stakes `_amount` of tokens and locks up for `_period` seconds, `_receiver` will receive the NFT receipt\\n  /// @param _amount Amount of tokens to stake\\n  /// @param _period Period of time, in seconds, to lockup your funds\\n  /// @param _receiver Address that will receive the NFT representing the position\\n  /// @return _id ID of the position\\n  /// @return _sher Amount of SHER tokens to be released to this ID after `_period` ends\\n  /// @dev `_period` needs to be whitelisted\\n  function initialStake(\\n    uint256 _amount,\\n    uint256 _period,\\n    address _receiver\\n  ) external returns (uint256 _id, uint256 _sher);\\n\\n  /// @notice Redeem NFT `_id` and receive `_amount` of tokens\\n  /// @param _id TokenID of the position\\n  /// @return _amount Amount of tokens (USDC) owed to NFT ID\\n  /// @dev Only the owner of `_id` will be able to redeem their position\\n  /// @dev The SHER rewards are sent to the NFT owner\\n  /// @dev Can only be called after lockup `_period` has ended\\n  function redeemNFT(uint256 _id) external returns (uint256 _amount);\\n\\n  /// @notice Owner restakes position with ID: `_id` for `_period` seconds\\n  /// @param _id ID of the position\\n  /// @param _period Period of time, in seconds, to lockup your funds\\n  /// @return _sher Amount of SHER tokens to be released to owner address after `_period` ends\\n  /// @dev Only the owner of `_id` will be able to restake their position using this call\\n  /// @dev `_period` needs to be whitelisted\\n  /// @dev Can only be called after lockup `_period` has ended\\n  function ownerRestake(uint256 _id, uint256 _period) external returns (uint256 _sher);\\n\\n  /// @notice Allows someone who doesn't own the position (an arbitrager) to restake the position for 26 weeks (ARB_RESTAKE_PERIOD)\\n  /// @param _id ID of the position\\n  /// @return _sher Amount of SHER tokens to be released to position owner on expiry of the 26 weeks lockup\\n  /// @return _arbReward Amount of tokens (USDC) sent to caller (the arbitrager) in return for calling the function\\n  /// @dev Can only be called after lockup `_period` is more than 2 weeks in the past (assuming ARB_RESTAKE_WAIT_TIME is 2 weeks)\\n  /// @dev Max 20% (ARB_RESTAKE_MAX_PERCENTAGE) of tokens associated with a position are used to incentivize arbs (x)\\n  /// @dev During a 2 week period the reward ratio will move from 0% to 100% (* x)\\n  function arbRestake(uint256 _id) external returns (uint256 _sher, uint256 _arbReward);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockGov.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './managers/ISherDistributionManager.sol';\\nimport './managers/ISherlockProtocolManager.sol';\\nimport './managers/ISherlockClaimManager.sol';\\nimport './managers/IStrategyManager.sol';\\n\\n/// @title Sherlock core interface for governance\\n/// @author Evert Kors\\ninterface ISherlockGov {\\n  event ClaimPayout(address receiver, uint256 amount);\\n  event YieldStrategyUpdateWithdrawAllError(bytes error);\\n  event YieldStrategyUpdated(IStrategyManager previous, IStrategyManager current);\\n  event ProtocolManagerUpdated(ISherlockProtocolManager previous, ISherlockProtocolManager current);\\n  event ClaimManagerUpdated(ISherlockClaimManager previous, ISherlockClaimManager current);\\n  event NonStakerAddressUpdated(address previous, address current);\\n  event SherDistributionManagerUpdated(\\n    ISherDistributionManager previous,\\n    ISherDistributionManager current\\n  );\\n\\n  event StakingPeriodEnabled(uint256 period);\\n\\n  event StakingPeriodDisabled(uint256 period);\\n\\n  /// @notice Allows stakers to stake for `_period` of time\\n  /// @param _period Period of time, in seconds,\\n  /// @dev should revert if already enabled\\n  function enableStakingPeriod(uint256 _period) external;\\n\\n  /// @notice Disallow stakers to stake for `_period` of time\\n  /// @param _period Period of time, in seconds,\\n  /// @dev should revert if already disabled\\n  function disableStakingPeriod(uint256 _period) external;\\n\\n  /// @notice View if `_period` is a valid period\\n  /// @return Boolean indicating if period is valid\\n  function stakingPeriods(uint256 _period) external view returns (bool);\\n\\n  /// @notice Update SHER distribution manager contract\\n  /// @param _sherDistributionManager New adddress of the manager\\n  function updateSherDistributionManager(ISherDistributionManager _sherDistributionManager)\\n    external;\\n\\n  /// @notice Deletes the SHER distribution manager altogether (if Sherlock decides to no longer pay out SHER rewards)\\n  function removeSherDistributionManager() external;\\n\\n  /// @notice Read SHER distribution manager\\n  /// @return Address of current SHER distribution manager\\n  function sherDistributionManager() external view returns (ISherDistributionManager);\\n\\n  /// @notice Update address eligible for non staker rewards from protocol premiums\\n  /// @param _nonStakers Address eligible for non staker rewards\\n  function updateNonStakersAddress(address _nonStakers) external;\\n\\n  /// @notice View current non stakers address\\n  /// @return Current non staker address\\n  /// @dev Is able to pull funds out of the contract\\n  function nonStakersAddress() external view returns (address);\\n\\n  /// @notice View current address able to manage protocols\\n  /// @return Protocol manager implemenation\\n  function sherlockProtocolManager() external view returns (ISherlockProtocolManager);\\n\\n  /// @notice Transfer protocol manager implementation address\\n  /// @param _protocolManager new implementation address\\n  function updateSherlockProtocolManager(ISherlockProtocolManager _protocolManager) external;\\n\\n  /// @notice View current address able to pull payouts\\n  /// @return Address able to pull payouts\\n  function sherlockClaimManager() external view returns (ISherlockClaimManager);\\n\\n  /// @notice Transfer claim manager role to different address\\n  /// @param _claimManager New address of claim manager\\n  function updateSherlockClaimManager(ISherlockClaimManager _claimManager) external;\\n\\n  /// @notice Update yield strategy\\n  /// @param _yieldStrategy New address of the strategy\\n  /// @dev try a yieldStrategyWithdrawAll() on old, ignore failure\\n  function updateYieldStrategy(IStrategyManager _yieldStrategy) external;\\n\\n  /// @notice Update yield strategy ignoring current state\\n  /// @param _yieldStrategy New address of the strategy\\n  /// @dev tries a yieldStrategyWithdrawAll() on old strategy, ignore failure\\n  function updateYieldStrategyForce(IStrategyManager _yieldStrategy) external;\\n\\n  /// @notice Read current strategy\\n  /// @return Address of current strategy\\n  /// @dev can never be address(0)\\n  function yieldStrategy() external view returns (IStrategyManager);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockPayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\n/// @title Sherlock interface for payout manager\\n/// @author Evert Kors\\ninterface ISherlockPayout {\\n  /// @notice Initiate a payout of `_amount` to `_receiver`\\n  /// @param _receiver Receiver of payout\\n  /// @param _amount Amount to send\\n  /// @dev only payout manager should call this\\n  /// @dev should pull money out of strategy\\n  function payoutClaim(address _receiver, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISherlockStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './managers/IStrategyManager.sol';\\n\\n/// @title Sherlock core interface for yield strategy\\n/// @author Evert Kors\\ninterface ISherlockStrategy {\\n  /// @notice Deposit `_amount` into active strategy\\n  /// @param _amount Amount of tokens\\n  /// @dev gov only\\n  function yieldStrategyDeposit(uint256 _amount) external;\\n\\n  /// @notice Withdraw `_amount` from active strategy\\n  /// @param _amount Amount of tokens\\n  /// @dev gov only\\n  function yieldStrategyWithdraw(uint256 _amount) external;\\n\\n  /// @notice Withdraw all funds from active strategy\\n  /// @dev gov only\\n  function yieldStrategyWithdrawAll() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/ISherDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IManager.sol';\\n\\ninterface ISherDistributionManager is IManager {\\n  // anyone can just send token to this contract to fund rewards\\n\\n  event Initialized(uint256 maxRewardsEndTVL, uint256 zeroRewardsStartTVL, uint256 maxRewardRate);\\n\\n  /// @notice Caller will receive `_sher` SHER tokens based on `_amount` and `_period`\\n  /// @param _amount Amount of tokens (in USDC) staked\\n  /// @param _period Period of time for stake, in seconds\\n  /// @param _id ID for this NFT position\\n  /// @param _receiver Address that will be linked to this position\\n  /// @return _sher Amount of SHER tokens sent to Sherlock core contract\\n  /// @dev Calling contract will depend on before + after balance diff and return value\\n  /// @dev INCLUDES stake in calculation, function expects the `_amount` to be deposited already\\n  /// @dev If tvl=50 and amount=50, this means it is calculating SHER rewards for the first 50 tokens going in\\n  function pullReward(\\n    uint256 _amount,\\n    uint256 _period,\\n    uint256 _id,\\n    address _receiver\\n  ) external returns (uint256 _sher);\\n\\n  /// @notice Calculates how many `_sher` SHER tokens are owed to a stake position based on `_amount` and `_period`\\n  /// @param _tvl TVL to use for reward calculation (pre-stake TVL)\\n  /// @param _amount Amount of tokens (USDC) staked\\n  /// @param _period Stake period (in seconds)\\n  /// @return _sher Amount of SHER tokens owed to this stake position\\n  /// @dev EXCLUDES `_amount` of stake, this will be added on top of TVL (_tvl is excluding _amount)\\n  /// @dev If tvl=0 and amount=50, it would calculate for the first 50 tokens going in (different from pullReward())\\n  function calcReward(\\n    uint256 _tvl,\\n    uint256 _amount,\\n    uint256 _period\\n  ) external view returns (uint256 _sher);\\n\\n  /// @notice Function used to check if this is the current active distribution manager\\n  /// @return Boolean indicating it's active\\n  /// @dev If inactive the owner can pull all ERC20s and ETH\\n  /// @dev Will be checked by calling the sherlock contract\\n  function isActive() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/ISherlockProtocolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './IManager.sol';\\n\\n/// @title Sherlock core interface for protocols\\n/// @author Evert Kors\\ninterface ISherlockProtocolManager is IManager {\\n  // msg.sender is not authorized to call this function\\n  error Unauthorized();\\n\\n  // If a protocol was never instantiated or was removed and the claim deadline has passed, this error is returned\\n  error ProtocolNotExists(bytes32 protocol);\\n\\n  // When comparing two arrays and the lengths are not equal (but are supposed to be equal)\\n  error UnequalArrayLength();\\n\\n  // If there is not enough balance in the contract for the amount requested (after any requirements are met), this is returned\\n  error InsufficientBalance(bytes32 protocol);\\n\\n  event MinBalance(uint256 previous, uint256 current);\\n\\n  event AccountingError(bytes32 indexed protocol, uint256 amount, uint256 insufficientTokens);\\n\\n  event ProtocolAdded(bytes32 indexed protocol);\\n\\n  event ProtocolRemovedByArb(bytes32 indexed protocol, address arb, uint256 profit);\\n\\n  event ProtocolRemoved(bytes32 indexed protocol);\\n\\n  event ProtocolUpdated(\\n    bytes32 indexed protocol,\\n    bytes32 coverage,\\n    uint256 nonStakers,\\n    uint256 coverageAmount\\n  );\\n\\n  event ProtocolAgentTransfer(bytes32 indexed protocol, address from, address to);\\n\\n  event ProtocolBalanceDeposited(bytes32 indexed protocol, uint256 amount);\\n\\n  event ProtocolBalanceWithdrawn(bytes32 indexed protocol, uint256 amount);\\n\\n  event ProtocolPremiumChanged(bytes32 indexed protocol, uint256 oldPremium, uint256 newPremium);\\n\\n  /// @notice View current amount of all premiums that are owed to stakers\\n  /// @return Premiums claimable\\n  /// @dev Will increase every block\\n  /// @dev base + (now - last_settled) * ps\\n  function claimablePremiums() external view returns (uint256);\\n\\n  /// @notice Transfer current claimable premiums (for stakers) to core Sherlock address\\n  /// @dev Callable by everyone\\n  /// @dev Funds will be transferred to Sherlock core contract\\n  function claimPremiumsForStakers() external;\\n\\n  /// @notice View current protocolAgent of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @return Address able to submit claims\\n  function protocolAgent(bytes32 _protocol) external view returns (address);\\n\\n  /// @notice View current premium of protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Amount of premium `_protocol` pays per second\\n  function premium(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice View current active balance of covered protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Active balance\\n  /// @dev Accrued debt is subtracted from the stored active balance\\n  function activeBalance(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice View seconds of coverage left for `_protocol` before it runs out of active balance\\n  /// @param _protocol Protocol identifier\\n  /// @return Seconds of coverage left\\n  function secondsOfCoverageLeft(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice Add a new protocol to Sherlock\\n  /// @param _protocol Protocol identifier\\n  /// @param _protocolAgent Address able to submit a claim on behalf of the protocol\\n  /// @param _coverage Hash referencing the active coverage agreement\\n  /// @param _nonStakers Percentage of premium payments to nonstakers, scaled by 10**18\\n  /// @param _coverageAmount Max amount claimable by this protocol\\n  /// @dev Adding a protocol allows the `_protocolAgent` to submit a claim\\n  /// @dev Coverage is not started yet as the protocol doesn't pay a premium at this point\\n  /// @dev `_nonStakers` is scaled by 10**18\\n  /// @dev Only callable by governance\\n  function protocolAdd(\\n    bytes32 _protocol,\\n    address _protocolAgent,\\n    bytes32 _coverage,\\n    uint256 _nonStakers,\\n    uint256 _coverageAmount\\n  ) external;\\n\\n  /// @notice Update info regarding a protocol\\n  /// @param _protocol Protocol identifier\\n  /// @param _coverage Hash referencing the active coverage agreement\\n  /// @param _nonStakers Percentage of premium payments to nonstakers, scaled by 10**18\\n  /// @param _coverageAmount Max amount claimable by this protocol\\n  /// @dev Only callable by governance\\n  function protocolUpdate(\\n    bytes32 _protocol,\\n    bytes32 _coverage,\\n    uint256 _nonStakers,\\n    uint256 _coverageAmount\\n  ) external;\\n\\n  /// @notice Remove a protocol from coverage\\n  /// @param _protocol Protocol identifier\\n  /// @dev Before removing a protocol the premium must be 0\\n  /// @dev Removing a protocol basically stops the `_protocolAgent` from being active (can still submit claims until claim deadline though)\\n  /// @dev Pays off debt + sends remaining balance to protocol agent\\n  /// @dev This call should be subject to a timelock\\n  /// @dev Only callable by governance\\n  function protocolRemove(bytes32 _protocol) external;\\n\\n  /// @notice Remove a protocol with insufficient active balance\\n  /// @param _protocol Protocol identifier\\n  function forceRemoveByActiveBalance(bytes32 _protocol) external;\\n\\n  /// @notice Removes a protocol with insufficent seconds of coverage left\\n  /// @param _protocol Protocol identifier\\n  function forceRemoveBySecondsOfCoverage(bytes32 _protocol) external;\\n\\n  /// @notice View minimal balance needed before liquidation can start\\n  /// @return Minimal balance needed\\n  function minActiveBalance() external view returns (uint256);\\n\\n  /// @notice Sets the minimum active balance before an arb can remove a protocol\\n  /// @param _minActiveBalance Minimum balance needed (in USDC)\\n  /// @dev Only gov\\n  function setMinActiveBalance(uint256 _minActiveBalance) external;\\n\\n  /// @notice Set premium of `_protocol` to `_premium`\\n  /// @param _protocol Protocol identifier\\n  /// @param _premium Amount of premium `_protocol` pays per second\\n  /// @dev The value 0 would mean inactive coverage\\n  /// @dev Only callable by governance\\n  function setProtocolPremium(bytes32 _protocol, uint256 _premium) external;\\n\\n  /// @notice Set premium of multiple protocols\\n  /// @param _protocol Array of protocol identifiers\\n  /// @param _premium Array of premium amounts protocols pay per second\\n  /// @dev The value 0 would mean inactive coverage\\n  /// @dev Only callable by governance\\n  function setProtocolPremiums(bytes32[] calldata _protocol, uint256[] calldata _premium) external;\\n\\n  /// @notice Deposits `_amount` of token to the active balance of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens to deposit\\n  /// @dev Approval should be made before calling\\n  function depositToActiveBalance(bytes32 _protocol, uint256 _amount) external;\\n\\n  /// @notice Withdraws `_amount` of token from the active balance of `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens to withdraw\\n  /// @dev Only protocol agent is able to withdraw\\n  /// @dev Balance can be withdrawn up until 7 days worth of active balance\\n  function withdrawActiveBalance(bytes32 _protocol, uint256 _amount) external;\\n\\n  /// @notice Transfer protocol agent role\\n  /// @param _protocol Protocol identifier\\n  /// @param _protocolAgent Account able to submit a claim on behalf of the protocol\\n  /// @dev Only the active protocolAgent is able to transfer the role\\n  function transferProtocolAgent(bytes32 _protocol, address _protocolAgent) external;\\n\\n  /// @notice View the amount nonstakers can claim from this protocol\\n  /// @param _protocol Protocol identifier\\n  /// @return Amount of tokens claimable by nonstakers\\n  /// @dev this reads from a storage variable + (now-lastsettled) * premiums\\n  function nonStakersClaimable(bytes32 _protocol) external view returns (uint256);\\n\\n  /// @notice Choose an `_amount` of tokens that nonstakers (`_receiver` address) will receive from `_protocol`\\n  /// @param _protocol Protocol identifier\\n  /// @param _amount Amount of tokens\\n  /// @param _receiver Address to receive tokens\\n  /// @dev Only callable by nonstakers role\\n  function nonStakersClaim(\\n    bytes32 _protocol,\\n    uint256 _amount,\\n    address _receiver\\n  ) external;\\n\\n  /// @param _protocol Protocol identifier\\n  /// @return current and previous are the current and previous coverage amounts for this protocol\\n  function coverageAmounts(bytes32 _protocol)\\n    external\\n    view\\n    returns (uint256 current, uint256 previous);\\n\\n  /// @notice Function used to check if this is the current active protocol manager\\n  /// @return Boolean indicating it's active\\n  /// @dev If inactive the owner can pull all ERC20s and ETH\\n  /// @dev Will be checked by calling the sherlock contract\\n  function isActive() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/ISherlockClaimManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './callbacks/ISherlockClaimManagerCallbackReceiver.sol';\\nimport '../UMAprotocol/OptimisticRequester.sol';\\nimport './IManager.sol';\\n\\ninterface ISherlockClaimManager is IManager, OptimisticRequester {\\n  // Doesn't allow a new claim to be submitted by a protocol agent if a claim is already active for that protocol\\n  error ClaimActive();\\n\\n  // If the current state of a claim does not match the expected state, this error is thrown\\n  error InvalidState();\\n\\n  event ClaimCreated(\\n    uint256 claimID,\\n    bytes32 indexed protocol,\\n    uint256 amount,\\n    address receiver,\\n    bool previousCoverageUsed\\n  );\\n\\n  event CallbackAdded(ISherlockClaimManagerCallbackReceiver callback);\\n\\n  event CallbackRemoved(ISherlockClaimManagerCallbackReceiver callback);\\n\\n  event ClaimStatusChanged(uint256 indexed claimID, State previousState, State currentState);\\n\\n  event ClaimPayout(uint256 claimID, address receiver, uint256 amount);\\n\\n  event ClaimHalted(uint256 claimID);\\n\\n  event UMAHORenounced();\\n\\n  enum State {\\n    NonExistent, // Claim doesn't exist (this is the default state on creation)\\n    SpccPending, // Claim is created, SPCC is able to set state to valid\\n    SpccApproved, // Final state, claim is valid\\n    SpccDenied, // Claim denied by SPCC, claim can be escalated within 4 weeks\\n    UmaPriceProposed, // Price is proposed but not escalated\\n    ReadyToProposeUmaDispute, // Price is proposed, callback received, ready to submit dispute\\n    UmaDisputeProposed, // Escalation is done, waiting for confirmation\\n    UmaPending, // Claim is escalated, in case Spcc denied or didn't act within 7 days.\\n    UmaApproved, // Final state, claim is valid, claim can be enacted after 1 day, umaHaltOperator has 1 day to change to denied\\n    UmaDenied, // Final state, claim is invalid\\n    Halted, // UMAHO can halt claim if state is UmaApproved\\n    Cleaned // Claim is removed by protocol agent\\n  }\\n\\n  struct Claim {\\n    uint256 created;\\n    uint256 updated;\\n    address initiator;\\n    bytes32 protocol;\\n    uint256 amount;\\n    address receiver;\\n    uint32 timestamp;\\n    State state;\\n    bytes ancillaryData;\\n  }\\n\\n  // requestAndProposePriceFor() --> proposer = sherlockCore (address to receive BOND if UMA denies claim)\\n  // disputePriceFor() --> disputer = protocolAgent\\n  // priceSettled will be the the callback that contains the main data\\n\\n  // Assume BOND = 9600, UMA's final fee = 1500.\\n  // Claim initiator (Sherlock) has to pay 22.2k to dispute a claim,\\n  // so we will execute a safeTransferFrom(claimInitiator, address(this), 22.2k).\\n  // We need to approve the contract 22.2k as it will be transferred from address(this).\\n\\n  // The 22.2k consists of 2 * (BOND + final fee charged by UMA), as follows:\\n  // 1. On requestAndProposePriceFor(), the fee will be 10k: 9600 BOND + 1500 UMA's final fee;\\n  // 2. On disputePriceFor(), the fee will be the same 10k.\\n  // note that half of the BOND (4800) + UMA's final fee (1500) is \\\"burnt\\\" and sent to UMA\\n\\n  // UMA's final fee can be changed in the future, which may result in lower or higher required staked amounts for escalating a claim.\\n\\n  // On settle, either the protocolAgent (dispute success) or sherlockCore (dispute failure)\\n  // will receive 9600 + 4800 + 1500 = 15900. In addition, the protocolAgent will be entitled to\\n  // the claimAmount if the dispute is successful/\\n\\n  // lastClaimID <-- starts with 0, so initial id = 1\\n  // have claim counter, easy to identify certain claims by their number\\n  // but use hash(callback.request.propose + callback.timestamp) as the internal UUID to handle the callbacks\\n\\n  // So SPCC and UMAHO are hardcoded (UMAHO can be renounced)\\n  // In case these need to be updated, deploy different contract and upgrade it on the sherlock gov side.\\n\\n  // On price proposed callback --> call disputePriceFor with callbackdata + sherlock.strategyManager() and address(this)\\n\\n  /// @notice `SHERLOCK_CLAIM` in utf8\\n  function UMA_IDENTIFIER() external view returns (bytes32);\\n\\n  function sherlockProtocolClaimsCommittee() external view returns (address);\\n\\n  /// @notice operator is able to deny approved UMA claims\\n  function umaHaltOperator() external view returns (address);\\n\\n  /// @notice gov is able to renounce the role\\n  function renounceUmaHaltOperator() external;\\n\\n  function claim(uint256 _claimID) external view returns (Claim memory);\\n\\n  /// @notice Initiate a claim for a specific protocol as the protocol agent\\n  /// @param _protocol protocol ID (different from the internal or public claim ID fields)\\n  /// @param _amount amount of USDC which is being claimed by the protocol\\n  /// @param _receiver address to receive the amount of USDC being claimed\\n  /// @param _timestamp timestamp at which the exploit first occurred\\n  /// @param ancillaryData other data associated with the claim, such as the coverage agreement\\n  /// @dev The protocol agent that starts a claim will be the protocol agent during the claims lifecycle\\n  /// @dev Even if the protocol agent role is tranferred during the lifecycle\\n  function startClaim(\\n    bytes32 _protocol,\\n    uint256 _amount,\\n    address _receiver,\\n    uint32 _timestamp,\\n    bytes memory ancillaryData\\n  ) external;\\n\\n  function spccApprove(uint256 _claimID) external;\\n\\n  function spccRefuse(uint256 _claimID) external;\\n\\n  /// @notice Callable by protocol agent\\n  /// @param _claimID Public claim ID\\n  /// @param _amount Bond amount sent by protocol agent\\n  /// @dev Use hardcoded USDC address\\n  /// @dev Use hardcoded bond amount\\n  /// @dev Use hardcoded liveness 7200 (2 hours)\\n  /// @dev proposedPrice = _amount\\n  function escalate(uint256 _claimID, uint256 _amount) external;\\n\\n  /// @notice Execute claim, storage will be removed after\\n  /// @param _claimID Public ID of the claim\\n  /// @dev Needs to be SpccApproved or UmaApproved && >UMAHO_TIME\\n  /// @dev Funds will be pulled from core\\n  function payoutClaim(uint256 _claimID) external;\\n\\n  /// @notice UMAHO is able to execute a halt if the state is UmaApproved and state was updated less than UMAHO_TIME ago\\n  function executeHalt(uint256 _claimID) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/IStrategyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport './IManager.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStrategyManager is IManager {\\n  /// @return Returns the token type being deposited into a strategy\\n  function want() external view returns (IERC20);\\n\\n  /// @notice Withdraws all USDC from the strategy back into the Sherlock core contract\\n  /// @dev Only callable by the Sherlock core contract\\n  /// @return The final amount withdrawn\\n  function withdrawAll() external returns (uint256);\\n\\n  /// @notice Withdraws a specific amount of USDC from the strategy back into the Sherlock core contract\\n  /// @param _amount Amount of USDC to withdraw\\n  function withdraw(uint256 _amount) external;\\n\\n  /// @notice Deposits all USDC held in this contract into the strategy\\n  function deposit() external;\\n\\n  /// @return Returns the USDC balance in this contract\\n  function balanceOf() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\nimport '../ISherlock.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IManager {\\n  // An address or other value passed in is equal to zero (and shouldn't be)\\n  error ZeroArgument();\\n\\n  // Occurs when a value already holds the desired property, or is not whitelisted\\n  error InvalidArgument();\\n\\n  // If a required condition for executing the function is not met, it reverts and throws this error\\n  error InvalidConditions();\\n\\n  // Throws if the msg.sender is not the required address\\n  error InvalidSender();\\n\\n  event SherlockCoreSet(ISherlock sherlock);\\n\\n  /// @notice Set sherlock core address where premiums should be send too\\n  /// @param _sherlock Current core contract\\n  /// @dev Only deployer is able to set core address on all chains except Hardhat network\\n  /// @dev One time function, will revert once `sherlock` != address(0)\\n  /// @dev This contract will be deployed first, passed on as argument in core constuctor\\n  /// @dev ^ that's needed for tvl accounting, once core is deployed this function is called\\n  /// @dev emits `SherlockCoreSet`\\n  function setSherlockCoreAddress(ISherlock _sherlock) external;\\n\\n  /// @notice Pause external functions in contract\\n  function pause() external;\\n\\n  /// @notice Unpause external functions in contract\\n  function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/managers/callbacks/ISherlockClaimManagerCallbackReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.10;\\n\\n/******************************************************************************\\\\\\n* Author: Evert Kors <dev@sherlock.xyz> (https://twitter.com/evert0x)\\n* Sherlock Protocol: https://sherlock.xyz\\n/******************************************************************************/\\n\\ninterface ISherlockClaimManagerCallbackReceiver {\\n  /// @notice Calls this function on approved contracts and passes args\\n  /// @param _protocol The protocol that is receiving the payout\\n  /// @param _claimID The claim ID that is receiving the payout\\n  /// @param _amount The amount of USDC being paid out for this claim\\n  function PreCorePayoutCallback(\\n    bytes32 _protocol,\\n    uint256 _claimID,\\n    uint256 _amount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UMAprotocol/OptimisticRequester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport './SkinnyOptimisticOracleInterface.sol';\\n\\n/**\\n * @title Optimistic Requester.\\n * @notice Optional interface that requesters can implement to receive callbacks.\\n * @dev This contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\\n * money themselves).\\n */\\ninterface OptimisticRequester {\\n  /**\\n   * @notice Callback for proposals.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request request params after proposal.\\n   */\\n  function priceProposed(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request memory request\\n  ) external;\\n\\n  /**\\n   * @notice Callback for disputes.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request request params after dispute.\\n   */\\n  function priceDisputed(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request memory request\\n  ) external;\\n\\n  /**\\n   * @notice Callback for settlement.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request request params after settlement.\\n   */\\n  function priceSettled(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    SkinnyOptimisticOracleInterface.Request memory request\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UMAprotocol/SkinnyOptimisticOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './OptimisticOracleInterface.sol';\\n\\n/**\\n * @title Interface for the gas-cost-reduced version of the OptimisticOracle.\\n * @notice Differences from normal OptimisticOracle:\\n * - refundOnDispute: flag is removed, by default there are no refunds on disputes.\\n * - customizing request parameters: In the OptimisticOracle, parameters like `bond` and `customLiveness` can be reset\\n *   after a request is already made via `requestPrice`. In the SkinnyOptimisticOracle, these parameters can only be\\n *   set in `requestPrice`, which has an expanded input set.\\n * - settleAndGetPrice: Replaced by `settle`, which can only be called once per settleable request. The resolved price\\n *   can be fetched via the `Settle` event or the return value of `settle`.\\n * - general changes to interface: Functions that interact with existing requests all require the parameters of the\\n *   request to modify to be passed as input. These parameters must match with the existing request parameters or the\\n *   function will revert. This change reflects the internal refactor to store hashed request parameters instead of the\\n *   full request struct.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract SkinnyOptimisticOracleInterface {\\n  event RequestPrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  event ProposePrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  event DisputePrice(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  event Settle(\\n    address indexed requester,\\n    bytes32 indexed identifier,\\n    uint32 timestamp,\\n    bytes ancillaryData,\\n    Request request\\n  );\\n  // Struct representing a price request. Note that this differs from the OptimisticOracleInterface's Request struct\\n  // in that refundOnDispute is removed.\\n  struct Request {\\n    address proposer; // Address of the proposer.\\n    address disputer; // Address of the disputer.\\n    IERC20 currency; // ERC20 token used to pay rewards and fees.\\n    bool settled; // True if the request is settled.\\n    int256 proposedPrice; // Price that the proposer submitted.\\n    int256 resolvedPrice; // Price resolved once the request is settled.\\n    uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n    uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n    uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n    uint256 customLiveness; // Custom liveness value set by the requester.\\n  }\\n\\n  // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n  // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n  // to accept a price request made with ancillary data length over a certain size.\\n  uint256 public constant ancillaryBytesLimit = 8192;\\n\\n  /**\\n   * @notice Requests a new price.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\\n   * @param customLiveness custom proposal liveness to set for request.\\n   * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\\n   */\\n  function requestPrice(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward,\\n    uint256 bond,\\n    uint256 customLiveness\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n   * from this proposal. However, any bonds are pulled from the caller.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * propose a price for.\\n   * @param proposer address to set as the proposer.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePriceFor(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    address proposer,\\n    int256 proposedPrice\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value where caller is the proposer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * propose a price for.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\\n   * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\\n   * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\\n   * @dev The caller is the requester, but the proposer can be customized.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @param bond custom proposal bond to set for request. If set to 0, defaults to the final fee.\\n   * @param customLiveness custom proposal liveness to set for request.\\n   * @param proposer address to set as the proposer.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function requestAndProposePriceFor(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward,\\n    uint256 bond,\\n    uint256 customLiveness,\\n    address proposer,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n   * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * dispute.\\n   * @param disputer address to set as the disputer.\\n   * @param requester sender of the initial price request.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePriceFor(\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request,\\n    address disputer,\\n    address requester\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal where caller is the disputer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * dispute.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters whose hash must match the request that the caller wants to\\n   * settle.\\n   * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n   * the returned bonds as well as additional rewards.\\n   * @return resolvedPrice the price that the request settled to.\\n   */\\n  function settle(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (uint256 payout, int256 resolvedPrice);\\n\\n  /**\\n   * @notice Computes the current state of a price request. See the State enum for more details.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters.\\n   * @return the State.\\n   */\\n  function getState(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) external virtual returns (OptimisticOracleInterface.State);\\n\\n  /**\\n   * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param request price request parameters. The hash of these parameters must match with the request hash that is\\n   * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\\n   * will revert.\\n   * @return boolean indicating true if price exists and false if not.\\n   */\\n  function hasPrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint32 timestamp,\\n    bytes memory ancillaryData,\\n    Request memory request\\n  ) public virtual returns (bool);\\n\\n  /**\\n   * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param requester sender of the initial price request.\\n   * @return the stamped ancillary bytes.\\n   */\\n  function stampAncillaryData(bytes memory ancillaryData, address requester)\\n    public\\n    pure\\n    virtual\\n    returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UMAprotocol/OptimisticOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleInterface {\\n  // Struct representing the state of a price request.\\n  enum State {\\n    Invalid, // Never requested.\\n    Requested, // Requested, no other actions taken.\\n    Proposed, // Proposed, but not expired or disputed yet.\\n    Expired, // Proposed, not disputed, past liveness.\\n    Disputed, // Disputed, but no DVM price returned yet.\\n    Resolved, // Disputed and DVM price is available.\\n    Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n  }\\n\\n  // Struct representing a price request.\\n  struct Request {\\n    address proposer; // Address of the proposer.\\n    address disputer; // Address of the disputer.\\n    IERC20 currency; // ERC20 token used to pay rewards and fees.\\n    bool settled; // True if the request is settled.\\n    bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n    int256 proposedPrice; // Price that the proposer submitted.\\n    int256 resolvedPrice; // Price resolved once the request is settled.\\n    uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n    uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n    uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n    uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n    uint256 customLiveness; // Custom liveness value set by the requester.\\n  }\\n\\n  // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n  // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n  // to accept a price request made with ancillary data length over a certain size.\\n  uint256 public constant ancillaryBytesLimit = 8192;\\n\\n  /**\\n   * @notice Requests a new price.\\n   * @param identifier price identifier being requested.\\n   * @param timestamp timestamp of the price being requested.\\n   * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n   *               which could make sense if the contract requests and proposes the value in the same call or\\n   *               provides its own reward system.\\n   * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n   * This can be changed with a subsequent call to setBond().\\n   */\\n  function requestPrice(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    IERC20 currency,\\n    uint256 reward\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Set the proposal bond associated with a price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param bond custom bond amount to set.\\n   * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n   * changed again with a subsequent call to setBond().\\n   */\\n  function setBond(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    uint256 bond\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n   * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n   * bond, so there is still profit to be made even if the reward is refunded.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   */\\n  function setRefundOnDispute(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual;\\n\\n  /**\\n   * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n   * being auto-resolved.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param customLiveness new custom liveness.\\n   */\\n  function setCustomLiveness(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    uint256 customLiveness\\n  ) external virtual;\\n\\n  /**\\n   * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n   * from this proposal. However, any bonds are pulled from the caller.\\n   * @param proposer address to set as the proposer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePriceFor(\\n    address proposer,\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    int256 proposedPrice\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Proposes a price value for an existing price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @param proposedPrice price being proposed.\\n   * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n   * the proposer once settled if the proposal is correct.\\n   */\\n  function proposePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData,\\n    int256 proposedPrice\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n   * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n   * @param disputer address to set as the disputer.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was value (the proposal was incorrect).\\n   */\\n  function disputePriceFor(\\n    address disputer,\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Disputes a price value for an existing price request with an active proposal.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n   * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n   */\\n  function disputePrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (uint256 totalBond);\\n\\n  /**\\n   * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n   * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n   * hasn't been settled.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return resolved price.\\n   */\\n  function settleAndGetPrice(\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (int256);\\n\\n  /**\\n   * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n   * the returned bonds as well as additional rewards.\\n   */\\n  function settle(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) external virtual returns (uint256 payout);\\n\\n  /**\\n   * @notice Gets the current data structure containing all information about a price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return the Request data structure.\\n   */\\n  function getRequest(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (Request memory);\\n\\n  /**\\n   * @notice Returns the state of a price request.\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return the State enum value.\\n   */\\n  function getState(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (State);\\n\\n  /**\\n   * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n   * @param requester sender of the initial price request.\\n   * @param identifier price identifier to identify the existing request.\\n   * @param timestamp timestamp to identify the existing request.\\n   * @param ancillaryData ancillary data of the price being requested.\\n   * @return true if price has resolved or settled, false otherwise.\\n   */\\n  function hasPrice(\\n    address requester,\\n    bytes32 identifier,\\n    uint256 timestamp,\\n    bytes memory ancillaryData\\n  ) public view virtual returns (bool);\\n\\n  function stampAncillaryData(bytes memory ancillaryData, address requester)\\n    public\\n    view\\n    virtual\\n    returns (bytes memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_sher\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IStrategyManager\",\"name\":\"_yieldStrategy\",\"type\":\"address\"},{\"internalType\":\"contract ISherDistributionManager\",\"name\":\"_sherDistributionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nonStakersAddress\",\"type\":\"address\"},{\"internalType\":\"contract ISherlockProtocolManager\",\"name\":\"_sherlockProtocolManager\",\"type\":\"address\"},{\"internalType\":\"contract ISherlockClaimManager\",\"name\":\"_sherlockClaimManager\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialstakingPeriods\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConditions\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InvalidSherAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroArgument\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ArbRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISherlockClaimManager\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISherlockClaimManager\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"ClaimManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NonStakerAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISherlockProtocolManager\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISherlockProtocolManager\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"ProtocolManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Restaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISherDistributionManager\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISherDistributionManager\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"SherDistributionManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"StakingPeriodDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"StakingPeriodEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"error\",\"type\":\"bytes\"}],\"name\":\"YieldStrategyUpdateWithdrawAllError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStrategyManager\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategyManager\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"YieldStrategyUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARB_RESTAKE_GROWTH_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARB_RESTAKE_MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARB_RESTAKE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARB_RESTAKE_WAIT_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"arbRestake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sher\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_arbReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"disableStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"enableStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"initialStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sher\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"lockupEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonStakersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"ownerRestake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sher\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payoutClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"redeemNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeSherDistributionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sher\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sherDistributionManager\",\"outputs\":[{\"internalType\":\"contract ISherDistributionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"sherRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sherlockClaimManager\",\"outputs\":[{\"internalType\":\"contract ISherlockClaimManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sherlockProtocolManager\",\"outputs\":[{\"internalType\":\"contract ISherlockProtocolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPeriods\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenBalanceStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nonStakers\",\"type\":\"address\"}],\"name\":\"updateNonStakersAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISherDistributionManager\",\"name\":\"_sherDistributionManager\",\"type\":\"address\"}],\"name\":\"updateSherDistributionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISherlockClaimManager\",\"name\":\"_claimManager\",\"type\":\"address\"}],\"name\":\"updateSherlockClaimManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISherlockProtocolManager\",\"name\":\"_protocolManager\",\"type\":\"address\"}],\"name\":\"updateSherlockProtocolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategyManager\",\"name\":\"_yieldStrategy\",\"type\":\"address\"}],\"name\":\"updateYieldStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategyManager\",\"name\":\"_yieldStrategy\",\"type\":\"address\"}],\"name\":\"updateYieldStrategyForce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"viewRewardForArbRestake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"able\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"yieldStrategyDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"yieldStrategyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldStrategyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Sherlock", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000046d2a90153cd8f09464ca3a5605b6bbec9c2ff0100000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000f02d3a6288d998b412ce749cff244c8ef799f5820000000000000000000000005775f32787656e77dd99f20f4e478ddc85fdb31b000000000000000000000000666b8ebfbf4d5f0ce56962a25635cff563f131610000000000000000000000003d0b8a0a10835ab9b0f0beb54c5400b8aacaa1d3000000000000000000000000feedd254ae4b7c44a0472bb836b813ce4625eb8400000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000020536865726c6f636b205374616b696e6720506f736974696f6e204e46542d56310000000000000000000000000000000000000000000000000000000000000008534845522d504f5300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000eff1000000000000000000000000000000000000000000000000000000000001dfe200", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}