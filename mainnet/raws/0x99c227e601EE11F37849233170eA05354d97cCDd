{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\ncontract Eterney {\r\n    // Contract name\r\n    string public  name = 'Eterney';\r\n\r\n    uint public peopleCount = 0;\r\n    mapping(uint => Person) public people;\r\n\r\n    struct Person {\r\n        string name;\r\n        string dates;\r\n        string bio;\r\n    }\r\n\r\n    mapping(address => uint[]) public userSubmissions;\r\n\r\n    mapping(bytes32 => uint[]) public searchByHash;\r\n\r\n    // Address of admin account\r\n    address public admin;\r\n    //Contract fee\r\n    uint public fee = 0;\r\n\r\n    modifier isAdmin {\r\n        require(admin == msg.sender, \"not-an-admin\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    // Function to add a person\r\n    function addPerson(string memory _name, string memory _dates, string memory _bio) external payable {\r\n        require(msg.sender != address(0));\r\n        require(msg.value == fee, 'The payment is lower than the contract fee');\r\n        // Make sure file name exists\r\n        require(bytes(_name).length > 0, 'The name can not be empty');\r\n        // Make sure dates is more than 0\r\n        require(bytes(_dates).length > 0, 'The dates can not be empty');\r\n\r\n        people[peopleCount] = Person(_name, _dates, _bio);\r\n\r\n        userSubmissions[msg.sender].push(peopleCount);\r\n\r\n        bytes32 hash = hashIt(_name);\r\n        searchByHash[hash].push(peopleCount);\r\n\r\n        // Increment peopleCount\r\n        peopleCount ++;\r\n    }\r\n\r\n    // Function to delete a person (just deletes name)\r\n    function deletePerson(uint _id) external isAdmin {\r\n        require(_id < peopleCount, 'Id must exist');\r\n        people[_id].dates = '';\r\n    }\r\n\r\n    function getPeopleByIds(uint[] memory _ids) external view returns (Person[] memory _people) {\r\n        _people = new Person[](_ids.length);\r\n\r\n        for (uint index = 0; index < _ids.length; index++) {\r\n            uint id = _ids[index];\r\n            _people[index].name = people[id].name;\r\n            _people[index].dates = people[id].dates;\r\n            _people[index].bio = people[id].bio;\r\n        }\r\n    }\r\n\r\n    // Returns user submissions or search result paginated\r\n    function getUserOrSearchSubmissionsPaginated(bool _isSearch, string memory _name, uint _page, uint _resultsPerPage) external view returns (\r\n        uint totalAmountOfSubmissions,\r\n        Person[] memory submissions,\r\n        uint[] memory ids){\r\n\r\n        bytes32 hash;\r\n        if (_isSearch) {\r\n            hash = hashIt(_name);\r\n            totalAmountOfSubmissions = searchByHash[hash].length;\r\n        } else {\r\n            totalAmountOfSubmissions = userSubmissions[msg.sender].length;\r\n        }\r\n\r\n        if (_page == 0 || _resultsPerPage == 0) {\r\n            return (totalAmountOfSubmissions, new Person[](0), new uint[](0));\r\n        }\r\n\r\n        uint _index = _resultsPerPage * _page - _resultsPerPage;\r\n\r\n        // return empty array if already empty or _index is out of bounds\r\n        if (\r\n            totalAmountOfSubmissions == 0 ||\r\n            _index > totalAmountOfSubmissions - 1\r\n        ) {\r\n            return (totalAmountOfSubmissions, new Person[](0), new uint[](0));\r\n        }\r\n\r\n        submissions = new Person[](_resultsPerPage);\r\n        ids = new uint[](_resultsPerPage);\r\n        // start starting counter for return array\r\n        uint _returnCounter = 0;\r\n        // loop through array from starting point to end point\r\n        for (\r\n            _index;\r\n            _index < _resultsPerPage * _page;\r\n            _index++\r\n        ) {\r\n            // add array item unless out of bounds if so add uninitialized value (0 in the case of uint)\r\n            if (_index < totalAmountOfSubmissions) {\r\n                uint reversedIndex = totalAmountOfSubmissions - 1 - _index;\r\n                uint id;\r\n                if (_isSearch) {\r\n                    id = searchByHash[hash][reversedIndex];\r\n                } else {\r\n                    id = userSubmissions[msg.sender][reversedIndex];\r\n                }\r\n\r\n                submissions[_returnCounter] = Person({\r\n                name : people[id].name,\r\n                dates : people[id].dates,\r\n                bio : people[id].bio\r\n                });\r\n                ids[_returnCounter] = id;\r\n            }\r\n            _returnCounter++;\r\n        }\r\n        return (totalAmountOfSubmissions, submissions, ids);\r\n    }\r\n\r\n    // Function to withdraw contract balance\r\n    function withdraw(uint _value) external isAdmin {\r\n        require(address(this).balance >= _value, 'Not enough funds to withdraw');\r\n        payable(msg.sender).transfer(_value);\r\n    }\r\n\r\n    // Function to change contract fee\r\n    function changeFee(uint _fee) external isAdmin {\r\n        require(fee != _fee, \"Fee must be different\");\r\n        fee = _fee;\r\n    }\r\n\r\n    function hashIt(string memory _name) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_name));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_dates\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_bio\",\"type\":\"string\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"deletePerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getPeopleByIds\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dates\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"}],\"internalType\":\"struct Eterney.Person[]\",\"name\":\"_people\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSearch\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_resultsPerPage\",\"type\":\"uint256\"}],\"name\":\"getUserOrSearchSubmissionsPaginated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOfSubmissions\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dates\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"}],\"internalType\":\"struct Eterney.Person[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"people\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dates\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peopleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"searchByHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSubmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Eterney", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://007167132bc8f7378ff2dc8989f2f891c46249eb8f268779ff9ec5098afaaa15"}]}