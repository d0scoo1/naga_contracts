{"status": "1", "message": "OK", "result": [{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.10;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = _setInitializedVersion(1);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n     * initialization.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        bool isTopLevelCall = _setInitializedVersion(version);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(version);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        _setInitializedVersion(type(uint8).max);\r\n    }\r\n\r\n    function _setInitializedVersion(uint8 version) private returns (bool) {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\r\n        // of initializers, because in other contexts the contract may have been reentered.\r\n        if (_initializing) {\r\n            require(\r\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\r\n                \"Initializable: contract is already initialized\"\r\n            );\r\n            return false;\r\n        } else {\r\n            require(_initialized < version, \"Initializable: contract is already initialized\");\r\n            _initialized = version;\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\ncontract LockedStaking is Initializable, OwnableUpgradeable {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n    event LockAdded(address indexed from, uint208 amount, uint32 end, uint16 multiplier);\r\n    event LockUpdated(address indexed from, uint8 index, uint208 amount, uint32 end, uint16 multiplier);\r\n    event Unlock(address indexed from, uint256 amount, uint256 index);\r\n    event Claim(address indexed from, uint256 amount);\r\n    event RewardAdded(uint256 start, uint256 end, uint256 amountPerSecond);\r\n    event RewardUpdated(uint256 index, uint256 start, uint256 end, uint256 amountPerSecond);\r\n    event RewardRemoved(uint256 index);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  ERRORS\r\n    //////////////////////////////////////////////////////////////*/\r\n    error MustProlongLock(uint256 oldDuration, uint256 newDuration);\r\n    error AmountIsZero();\r\n    error TransferFailed();\r\n    error NothingToClaim();\r\n    error LockStillActive();\r\n    error IndexOutOfBounds(uint256 index, uint256 length);\r\n    error DurationOutOfBounds(uint256 duration);\r\n    error UpdateToSmallerMultiplier(uint16 oldMultiplier, uint16 newMultiplier);\r\n    error ZeroAddress();\r\n    error ZeroPrecision();\r\n    error MaxLocksSucceeded();\r\n    error MaxRewardsSucceeded();\r\n    error CanOnlyAddFutureRewards();\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             IMMUTABLES & CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n    IERC20 public swapToken;\r\n    uint256 public precision;\r\n    uint256 public constant MAX_LOCK_COUNT = 5;\r\n    uint256 public constant MAX_REWARD_COUNT = 5;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             STRUCTS\r\n    //////////////////////////////////////////////////////////////*/\r\n    struct Lock {\r\n        uint16 multiplier;\r\n        uint32 end;\r\n        uint208 amount;\r\n    }\r\n\r\n    struct Reward {\r\n        uint32 start;\r\n        uint32 end;\r\n        uint192 amountPerSecond;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n    Reward[] public rewards;\r\n    mapping(address => Lock[]) public locks;\r\n    mapping(address => uint256) public userLastAccRewardsWeight;\r\n\r\n    uint256 public lastRewardUpdate;\r\n    uint256 public totalScore;\r\n    uint256 public accRewardWeight;\r\n\r\n    function initialize(address _swapToken, uint256 _precision) external initializer {\r\n        if (_swapToken == address(0)) revert ZeroAddress();\r\n        if (_precision == 0) revert ZeroPrecision();\r\n\r\n        swapToken = IERC20(_swapToken);\r\n        precision = _precision;\r\n\r\n        __Ownable_init();\r\n    }\r\n\r\n    function getRewardsLength() external view returns (uint256) {\r\n        return rewards.length;\r\n    }\r\n\r\n    function getLockInfo(address addr, uint256 index) external view returns (Lock memory) {\r\n        return locks[addr][index];\r\n    }\r\n\r\n    function getUserLocks(address addr) external view returns (Lock[] memory) {\r\n        return locks[addr];\r\n    }\r\n\r\n    function getLockLength(address addr) external view returns (uint256) {\r\n        return locks[addr].length;\r\n    }\r\n\r\n    function getRewards() external view returns (Reward[] memory) {\r\n        return rewards;\r\n    }\r\n\r\n    function addReward(\r\n        uint32 start,\r\n        uint32 end,\r\n        uint192 amountPerSecond\r\n    ) external onlyOwner {\r\n        if (rewards.length == MAX_REWARD_COUNT) revert MaxRewardsSucceeded();\r\n        if (amountPerSecond == 0) revert AmountIsZero();\r\n        if (start < block.timestamp || end < block.timestamp) revert CanOnlyAddFutureRewards();\r\n\r\n        rewards.push(Reward(start, end, amountPerSecond));\r\n\r\n        if (!IERC20(swapToken).transferFrom(msg.sender, address(this), (end - start) * amountPerSecond))\r\n            revert TransferFailed();\r\n\r\n        emit RewardAdded(start, end, amountPerSecond);\r\n    }\r\n\r\n    function removeReward(uint256 index) external onlyOwner {\r\n        updateRewardsWeight();\r\n\r\n        Reward memory reward = rewards[index];\r\n\r\n        rewards[index] = rewards[rewards.length - 1];\r\n        rewards.pop();\r\n\r\n        // if rewards are not unlocked completely, send remaining to owner\r\n        if (reward.end > block.timestamp) {\r\n            uint256 lockedRewards = (reward.end - max(block.timestamp, reward.start)) * reward.amountPerSecond;\r\n\r\n            if (!IERC20(swapToken).transfer(msg.sender, lockedRewards)) revert TransferFailed();\r\n        }\r\n\r\n        emit RewardRemoved(index);\r\n    }\r\n\r\n    function updateReward(\r\n        uint256 index,\r\n        uint256 start,\r\n        uint256 end,\r\n        uint256 amountPerSecond\r\n    ) external onlyOwner {\r\n        uint256 newRewards = (end - start) * amountPerSecond;\r\n\r\n        Reward storage reward = rewards[index];\r\n        uint256 oldStart = reward.start;\r\n        uint256 oldEnd = reward.end;\r\n\r\n        uint256 oldRewards = (oldEnd - oldStart) * reward.amountPerSecond;\r\n\r\n        uint32 newStart = uint32(min(oldStart, start));\r\n        uint32 newEnd = uint32(max(oldEnd, end));\r\n        uint192 newAmountPerSecond = uint192((newRewards + oldRewards) / (newEnd - newStart));\r\n\r\n        reward.start = newStart;\r\n        reward.end = newEnd;\r\n        reward.amountPerSecond = newAmountPerSecond;\r\n\r\n        if (!IERC20(swapToken).transferFrom(msg.sender, address(this), newRewards)) revert TransferFailed();\r\n\r\n        emit RewardUpdated(index, newStart, newEnd, newAmountPerSecond);\r\n    }\r\n\r\n    // claims for current locks and creates new lock\r\n    function addLock(uint208 amount, uint256 duration) external {\r\n        if (amount == 0) revert AmountIsZero();\r\n        if (locks[msg.sender].length == MAX_LOCK_COUNT) revert MaxLocksSucceeded();\r\n\r\n        uint256 newAccRewardsWeight = updateRewardsWeight();\r\n\r\n        uint256 claimable = calculateUserClaimable(msg.sender, newAccRewardsWeight);\r\n\r\n        userLastAccRewardsWeight[msg.sender] = newAccRewardsWeight;\r\n\r\n        uint32 end = uint32(block.timestamp + duration);\r\n        uint16 multiplier = getDurationMultiplier(duration);\r\n\r\n        locks[msg.sender].push(Lock(multiplier, end, amount));\r\n\r\n        totalScore += multiplier * amount;\r\n\r\n        if (claimable < amount) {\r\n            if (!IERC20(swapToken).transferFrom(msg.sender, address(this), amount - claimable)) revert TransferFailed();\r\n        }\r\n\r\n        if (claimable > amount) {\r\n            if (!IERC20(swapToken).transfer(msg.sender, claimable - amount)) revert TransferFailed();\r\n        }\r\n\r\n        if (claimable > 0) {\r\n            emit Claim(msg.sender, claimable);\r\n        }\r\n\r\n        emit LockAdded(msg.sender, amount, end, multiplier);\r\n    }\r\n\r\n    // adds claimable to current lock, keeping the same end\r\n    function compound(uint8 index) external {\r\n        uint256 newAccRewardsWeight = updateRewardsWeight();\r\n\r\n        uint256 claimable = calculateUserClaimable(msg.sender, newAccRewardsWeight);\r\n        if (claimable == 0) revert NothingToClaim();\r\n\r\n        userLastAccRewardsWeight[msg.sender] = newAccRewardsWeight;\r\n\r\n        Lock storage lock = locks[msg.sender][index];\r\n        uint208 newAmount = uint208(lock.amount + claimable);\r\n        uint16 multiplier = lock.multiplier;\r\n\r\n        lock.amount = newAmount;\r\n        totalScore += claimable * multiplier;\r\n\r\n        emit Claim(msg.sender, claimable);\r\n\r\n        emit LockUpdated(msg.sender, index, newAmount, lock.end, multiplier);\r\n    }\r\n\r\n    // claims for current lock and adds amount to existing lock, keeping the same end\r\n    function updateLockAmount(uint256 index, uint208 amount) external {\r\n        if (amount == 0) revert AmountIsZero();\r\n\r\n        uint256 newAccRewardsWeight = updateRewardsWeight();\r\n\r\n        Lock storage lock = locks[msg.sender][index];\r\n        uint208 newAmount = lock.amount + amount;\r\n        uint16 multiplier = lock.multiplier;\r\n\r\n        uint256 claimable = calculateUserClaimable(msg.sender, newAccRewardsWeight);\r\n\r\n        userLastAccRewardsWeight[msg.sender] = newAccRewardsWeight;\r\n\r\n        lock.amount = newAmount;\r\n\r\n        totalScore += amount * multiplier;\r\n\r\n        if (claimable < amount) {\r\n            if (!IERC20(swapToken).transferFrom(msg.sender, address(this), amount - claimable)) revert TransferFailed();\r\n        }\r\n        if (claimable > amount) {\r\n            if (!IERC20(swapToken).transfer(msg.sender, claimable - amount)) revert TransferFailed();\r\n        }\r\n\r\n        if (claimable > 0) {\r\n            emit Claim(msg.sender, claimable);\r\n        }\r\n\r\n        emit LockUpdated(msg.sender, uint8(index), newAmount, lock.end, multiplier);\r\n    }\r\n\r\n    // claims for current locks and increases duration of existing lock\r\n    function updateLockDuration(uint8 index, uint256 duration) external {\r\n        uint256 newAccRewardsWeight = updateRewardsWeight();\r\n\r\n        Lock storage lock = locks[msg.sender][index];\r\n\r\n        uint32 end = uint32(block.timestamp + duration);\r\n        if (lock.end > end) revert MustProlongLock(lock.end, end);\r\n\r\n        uint256 claimable = calculateUserClaimable(msg.sender, newAccRewardsWeight);\r\n\r\n        userLastAccRewardsWeight[msg.sender] = newAccRewardsWeight;\r\n\r\n        uint16 multiplier = getDurationMultiplier(duration);\r\n\r\n        lock.end = end;\r\n\r\n        uint16 oldMultiplier = lock.multiplier;\r\n\r\n        if (oldMultiplier > multiplier) revert UpdateToSmallerMultiplier(oldMultiplier, multiplier);\r\n\r\n        lock.multiplier = multiplier;\r\n\r\n        uint208 amount = lock.amount;\r\n        totalScore += (multiplier - oldMultiplier) * amount;\r\n\r\n        if (claimable > 0) {\r\n            if (!IERC20(swapToken).transfer(msg.sender, claimable)) revert TransferFailed();\r\n\r\n            emit Claim(msg.sender, claimable);\r\n        }\r\n\r\n        emit LockUpdated(msg.sender, index, amount, end, multiplier);\r\n    }\r\n\r\n    // updates rewards weight & returns users claimable amount\r\n    function getUserClaimable(address user) external view returns (uint256 claimable) {\r\n        uint256 accRewardsWeight = getRewardsWeight();\r\n\r\n        return calculateUserClaimable(user, accRewardsWeight);\r\n    }\r\n\r\n    // returns users claimable amount\r\n    function calculateUserClaimable(address user, uint256 accRewardsWeight_) internal view returns (uint256 claimable) {\r\n        uint256 userScore = getUsersTotalScore(user);\r\n\r\n        return (userScore * (accRewardsWeight_ - userLastAccRewardsWeight[user])) / precision;\r\n    }\r\n\r\n    // returns users score for all locks\r\n    function getUsersTotalScore(address user) public view returns (uint256 score) {\r\n        uint256 lockLength = locks[user].length;\r\n        Lock storage lock;\r\n        for (uint256 lockId = 0; lockId < lockLength; ++lockId) {\r\n            lock = locks[user][lockId];\r\n            score += lock.amount * lock.multiplier;\r\n        }\r\n    }\r\n\r\n    // claims for current locks\r\n    function claim() external {\r\n        uint256 newAccRewardsWeight = updateRewardsWeight();\r\n\r\n        uint256 claimable = calculateUserClaimable(msg.sender, newAccRewardsWeight);\r\n        if (claimable == 0) revert NothingToClaim();\r\n\r\n        userLastAccRewardsWeight[msg.sender] = newAccRewardsWeight;\r\n\r\n        if (!IERC20(swapToken).transfer(msg.sender, claimable)) revert TransferFailed();\r\n\r\n        emit Claim(msg.sender, claimable);\r\n    }\r\n\r\n    // returns locked amount to user and deletes lock from array\r\n    function unlock(uint256 index) external {\r\n        uint256 newAccRewardsWeight = updateRewardsWeight();\r\n        Lock storage lock = locks[msg.sender][index];\r\n\r\n        if (lock.end > block.timestamp) revert LockStillActive();\r\n\r\n        uint256 amount = lock.amount;\r\n\r\n        uint256 claimable = calculateUserClaimable(msg.sender, newAccRewardsWeight);\r\n\r\n        userLastAccRewardsWeight[msg.sender] = newAccRewardsWeight;\r\n\r\n        totalScore -= amount * lock.multiplier;\r\n\r\n        locks[msg.sender][index] = locks[msg.sender][locks[msg.sender].length - 1];\r\n        locks[msg.sender].pop();\r\n\r\n        if (!IERC20(swapToken).transfer(msg.sender, amount + claimable)) revert TransferFailed();\r\n\r\n        if (claimable > 0) {\r\n            emit Claim(msg.sender, claimable);\r\n        }\r\n\r\n        emit Unlock(msg.sender, amount, index);\r\n    }\r\n\r\n    // calculates and updates rewards weight\r\n    function updateRewardsWeight() public returns (uint256) {\r\n        // already updated\r\n        if (block.timestamp == lastRewardUpdate) {\r\n            return accRewardWeight;\r\n        }\r\n\r\n        uint256 newAccRewardsWeight = getRewardsWeight();\r\n\r\n        if (newAccRewardsWeight > 0) {\r\n            lastRewardUpdate = block.timestamp;\r\n            accRewardWeight = newAccRewardsWeight;\r\n        }\r\n\r\n        return newAccRewardsWeight;\r\n    }\r\n\r\n    // calculates rewards weight\r\n    function getRewardsWeight() public view returns (uint256) {\r\n        // to avoid div by zero on first lock\r\n        if (totalScore == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 _lastRewardUpdate = lastRewardUpdate;\r\n\r\n        uint256 length = rewards.length;\r\n        uint256 newRewards;\r\n        for (uint256 rewardId = 0; rewardId < length; ++rewardId) {\r\n            Reward storage reward = rewards[rewardId];\r\n            uint256 start = reward.start;\r\n            uint256 end = reward.end;\r\n\r\n            if (block.timestamp < start) continue;\r\n            if (_lastRewardUpdate > end) continue;\r\n\r\n            newRewards += (min(block.timestamp, end) - max(start, _lastRewardUpdate)) * reward.amountPerSecond;\r\n        }\r\n\r\n        return newRewards == 0 ? accRewardWeight : accRewardWeight + (newRewards * precision) / totalScore;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x < y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x > y ? x : y;\r\n    }\r\n\r\n    // returns multiplier(2 decimals) on amount locked for duration in seconds\r\n    // aprox of function (2592000,1),(31536000,2),(94608000,5),(157680000,10)\r\n    // 2.22574\u00d710^-16 x^2 + 2.19094\u00d710^-8 x + 0.993975\r\n    function getDurationMultiplier(uint256 duration) public pure returns (uint16) {\r\n        if (duration < 30 days || duration > 1825 days) revert DurationOutOfBounds(duration);\r\n\r\n        return uint16((222574 * duration * duration + 21909400000000 * duration + 993975000000000000000) / 1e19);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanOnlyAddFutureRewards\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"DurationOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockStillActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLocksSucceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxRewardsSucceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"MustProlongLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"oldMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newMultiplier\",\"type\":\"uint16\"}],\"name\":\"UpdateToSmallerMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPrecision\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"}],\"name\":\"LockAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"}],\"name\":\"LockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerSecond\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerSecond\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LOCK_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"amountPerSecond\",\"type\":\"uint192\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"getDurationMultiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"}],\"internalType\":\"struct LockedStaking.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLockLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"amountPerSecond\",\"type\":\"uint192\"}],\"internalType\":\"struct LockedStaking.Reward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"}],\"internalType\":\"struct LockedStaking.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUsersTotalScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_precision\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint192\",\"name\":\"amountPerSecond\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint208\",\"name\":\"amount\",\"type\":\"uint208\"}],\"name\":\"updateLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"updateLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerSecond\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardsWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastAccRewardsWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LockedStaking", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c09a12cae7a7f0467a4841c660408b0afdf95fa5c2aafa5f3d45bed62b1d1698"}]}