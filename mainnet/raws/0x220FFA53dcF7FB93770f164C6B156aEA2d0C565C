{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/libraries/Funding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// (C) Florence Finance, 2022 - https://florence.finance/\\npragma solidity 0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../LendingPoolToken.sol\\\";\\nimport \\\"./Util.sol\\\";\\n\\n/// @title Funding contract\\n/// @dev this library contains all funcionality related to the funding mechanism\\n/// A borrower creates a new funding request to fund an amount of Lending Pool Token (LPT)\\n/// A whitelisted primary funder buys LPT from the open funding request with own USDC\\n/// The treasury wallet is a MultiSig wallet\\n/// The funding request can be cancelled by the borrower\\n\\nlibrary Funding {\\n    /// @dev Emitted when a funding request is added\\n    /// @param fundingRequestId id of the funding request\\n    /// @param borrower borrower / creator of the funding request\\n    /// @param amount amount raised in LendingPoolTokens\\n    /// @param durationDays duration of the underlying loan\\n    /// @param interestRate interest rate of the underlying loan\\n    event FundingRequestAdded(uint256 fundingRequestId, address borrower, uint256 amount, uint256 durationDays, uint256 interestRate);\\n\\n    /// @dev Emitted when a funding request is cancelled\\n    /// @param fundingRequestId id of the funding request\\n    event FundingRequestCancelled(uint256 fundingRequestId);\\n\\n    /// @dev Emitted when a funding request is (partially) filled\\n    /// @param funder the funder\\n    /// @param fundingToken the token used to fund\\n    /// @param fundingTokenAmount the amount funded\\n    /// @param lendingPoolTokenAmount the amount of LendingPoolTokens the funder received\\n    event Funded(address indexed funder, IERC20 fundingToken, uint256 fundingTokenAmount, uint256 lendingPoolTokenAmount);\\n\\n    /// @dev Emitted when a token is added or removed as funding token\\n    /// @param token the token\\n    /// @param accepted whether it can be used to fund\\n    event FundingTokenUpdated(IERC20 token, bool accepted);\\n\\n    /// @dev Emitted when an address primaryFunder status changes\\n    /// @param primaryFunder the address\\n    /// @param accepted whether the address can fund loans\\n    event PrimaryFunderUpdated(address primaryFunder, bool accepted);\\n\\n    /// @dev Emitted when an address borrower status changes\\n    /// @param borrower the address\\n    /// @param accepted whether the address can borrow from the pool\\n    event BorrowerUpdated(address borrower, bool accepted);\\n\\n    /// @dev Contains all state data pertaining to funding\\n    struct FundingStorage {\\n        mapping(uint256 => FundingRequest) fundingRequests; //FundingRequest.id => FundingRequest\\n        uint256 currentFundingRequestId; //id of the next FundingRequest to be proccessed\\n        uint256 lastFundingRequestId; //id of the last FundingRequest in the\\n        mapping(address => bool) primaryFunders; //address => whether its allowed to fund loans\\n        mapping(IERC20 => bool) fundingTokens; //token => whether it can be used to fund loans\\n        IERC20[] _fundingTokens; //all fundingTokens that can be used to fund loans\\n        mapping(address => bool) borrowers; //address => whether its allowed to act as borrower / create FundingRequests\\n        mapping(IERC20 => AggregatorV3Interface) fundingTokenChainLinkFeeds; //fudingToken => ChainLink feed which provides a conversion rate for the fundingToken to the pools loans base currency (e.g. USDC => EURSUD)\\n        mapping(IERC20 => bool) invertChainLinkFeedAnswer; //fudingToken => whether the data provided by the ChainLink feed should be inverted (not all ChainLink feeds are Token->BaseCurrency, some could be BaseCurrency->Token)\\n        bool disablePrimaryFunderCheck;\\n    }\\n    /// @dev A FundingRequest represents a borrowers desire to raise funds for a loan. (Double linked list)\\n    struct FundingRequest {\\n        uint256 id; //id of the funding request\\n        address borrower; //the borrower who created the funding request\\n        uint256 amount; //the amount to be raised denominated in LendingPoolTokens\\n        uint256 durationDays; //duration of the underlying loan in days\\n        uint256 interestRate; //interest rate of the underlying  loan (2 decimals)\\n        uint256 amountFilled; //amount that has already been filled by primary funders\\n        FundingRequestState state; //state of the funding request\\n        uint256 next; //id of the next funding request\\n        uint256 prev; //id of the previous funding request\\n    }\\n\\n    /// @dev State of a FundingRequest\\n    enum FundingRequestState {\\n        OPEN, //the funding request is open and ready to be filled\\n        FILLED, //the funding request has been filled completely\\n        CANCELLED //the funding request has been cancelled\\n    }\\n\\n    /// @dev modifier to make function callable by borrower only\\n    modifier onlyBorrower(FundingStorage storage fundingStorage) {\\n        require(fundingStorage.borrowers[msg.sender], \\\"caller address is no borrower\\\");\\n        _;\\n    }\\n\\n    /// @dev Get all open FundingRequests\\n    /// @param fundingStorage FundingStorage\\n    /// @return all open FundingRequests\\n    function getOpenFundingRequests(FundingStorage storage fundingStorage) external view returns (FundingRequest[] memory) {\\n        FundingRequest[] memory fundingRequests = new FundingRequest[](fundingStorage.lastFundingRequestId - fundingStorage.currentFundingRequestId + 1);\\n        uint256 i = fundingStorage.currentFundingRequestId;\\n        for (; i <= fundingStorage.lastFundingRequestId; i++) {\\n            fundingRequests[i - fundingStorage.currentFundingRequestId] = fundingStorage.fundingRequests[i];\\n        }\\n        return fundingRequests;\\n    }\\n\\n    /// @dev Allows borrowers to submit a FundingRequest\\n    /// @param fundingStorage FundingStorage\\n    /// @param amount the amount to be raised denominated in LendingPoolTokens\\n    /// @param durationDays duration of the underlying loan in days\\n    /// @param interestRate interest rate of the underlying loan (2 decimals)\\n    function addFundingRequest(\\n        FundingStorage storage fundingStorage,\\n        uint256 amount,\\n        uint256 durationDays,\\n        uint256 interestRate\\n    ) public onlyBorrower(fundingStorage) {\\n        require(amount > 0 && durationDays > 0 && interestRate > 0, \\\"invalid funding request data\\\");\\n\\n        uint256 previousFundingRequestId = fundingStorage.lastFundingRequestId;\\n\\n        uint256 fundingRequestId = ++fundingStorage.lastFundingRequestId;\\n\\n        if (previousFundingRequestId != 0) {\\n            fundingStorage.fundingRequests[previousFundingRequestId].next = fundingRequestId;\\n        }\\n\\n        emit FundingRequestAdded(fundingRequestId, msg.sender, amount, durationDays, interestRate);\\n\\n        fundingStorage.fundingRequests[fundingRequestId] = FundingRequest(\\n            fundingRequestId,\\n            msg.sender,\\n            amount,\\n            durationDays,\\n            interestRate,\\n            0,\\n            FundingRequestState.OPEN,\\n            0,\\n            previousFundingRequestId\\n        );\\n\\n        if (fundingStorage.currentFundingRequestId == 0) {\\n            fundingStorage.currentFundingRequestId = fundingStorage.lastFundingRequestId;\\n        }\\n    }\\n\\n    /// @dev Allows borrowers to cancel their own funding request as long as it has not been partially or fully filled\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingRequestId the id of the funding request to cancel\\n    function cancelFundingRequest(FundingStorage storage fundingStorage, uint256 fundingRequestId) public onlyBorrower(fundingStorage) {\\n        require(fundingStorage.fundingRequests[fundingRequestId].id != 0, \\\"funding request not found\\\");\\n        require(fundingStorage.fundingRequests[fundingRequestId].state == FundingRequestState.OPEN, \\\"funding request already processing\\\");\\n\\n        emit FundingRequestCancelled(fundingRequestId);\\n\\n        fundingStorage.fundingRequests[fundingRequestId].state = FundingRequestState.CANCELLED;\\n\\n        FundingRequest storage currentRequest = fundingStorage.fundingRequests[fundingRequestId];\\n\\n        if (currentRequest.prev != 0) {\\n            fundingStorage.fundingRequests[currentRequest.prev].next = currentRequest.next;\\n        }\\n\\n        if (currentRequest.next != 0) {\\n            fundingStorage.fundingRequests[currentRequest.next].prev = currentRequest.prev;\\n        }\\n\\n        uint256 saveNext = fundingStorage.fundingRequests[fundingRequestId].next;\\n        fundingStorage.fundingRequests[fundingRequestId].prev = 0;\\n        fundingStorage.fundingRequests[fundingRequestId].next = 0;\\n\\n        if (fundingStorage.currentFundingRequestId == fundingRequestId) {\\n            fundingStorage.currentFundingRequestId = saveNext; // can be zero which is fine\\n        }\\n    }\\n\\n    /// @dev Allows primary funders to fund borrowers fundingRequests. In return for their\\n    ///      funding they receive LendingPoolTokens based on the rate provided by the configured ChainLinkFeed\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingToken token used for the funding (e.g. USDC)\\n    /// @param fundingTokenAmount funding amount\\n    /// @param lendingPoolToken the LendingPoolToken which will be minted to the funders wallet in return\\n    function fund(\\n        FundingStorage storage fundingStorage,\\n        IERC20 fundingToken,\\n        uint256 fundingTokenAmount,\\n        LendingPoolToken lendingPoolToken\\n    ) public {\\n        require(fundingStorage.primaryFunders[msg.sender] || fundingStorage.disablePrimaryFunderCheck, \\\"address is not primary funder\\\");\\n        require(fundingStorage.fundingTokens[fundingToken], \\\"unrecognized funding token\\\");\\n        require(fundingStorage.currentFundingRequestId != 0, \\\"no active funding request\\\");\\n\\n        (uint256 exchangeRate, uint256 exchangeRateDecimals) = getExchangeRate(fundingStorage, fundingToken);\\n\\n        FundingRequest storage currentFundingRequest = fundingStorage.fundingRequests[fundingStorage.currentFundingRequestId];\\n        uint256 currentFundingNeedInLPT = currentFundingRequest.amount - currentFundingRequest.amountFilled;\\n\\n        uint256 currentFundingNeedInFundingToken = (Util.convertDecimalsERC20(currentFundingNeedInLPT, lendingPoolToken, fundingToken) * exchangeRate) /\\n            (uint256(10)**exchangeRateDecimals);\\n\\n        if (fundingTokenAmount > currentFundingNeedInFundingToken) {\\n            fundingTokenAmount = currentFundingNeedInFundingToken;\\n        }\\n\\n        uint256 lendingPoolTokenAmount = ((Util.convertDecimalsERC20(fundingTokenAmount, fundingToken, lendingPoolToken) * (uint256(10)**exchangeRateDecimals)) / exchangeRate);\\n\\n        //require(lendingPoolTokenAmount <= currentFundingNeed, \\\"amount exceeds requested funding\\\");\\n        Util.checkedTransferFrom(fundingToken, msg.sender, currentFundingRequest.borrower, fundingTokenAmount);\\n        currentFundingRequest.amountFilled += lendingPoolTokenAmount;\\n\\n        if (currentFundingRequest.amount == currentFundingRequest.amountFilled) {\\n            currentFundingRequest.state = FundingRequestState.FILLED;\\n\\n            fundingStorage.currentFundingRequestId = currentFundingRequest.next; // this can be zero which is ok\\n        }\\n\\n        lendingPoolToken.mint(msg.sender, lendingPoolTokenAmount);\\n        emit Funded(msg.sender, fundingToken, fundingTokenAmount, lendingPoolTokenAmount);\\n    }\\n\\n    /// @dev Returns an exchange rate to convert from a funding token to the pools underlying loan currency\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingToken the fundingToken\\n    /// @return the exchange rate and the decimals of the exchange rate\\n    function getExchangeRate(FundingStorage storage fundingStorage, IERC20 fundingToken) public view returns (uint256, uint8) {\\n        require(address(fundingStorage.fundingTokenChainLinkFeeds[fundingToken]) != address(0), \\\"no exchange rate available\\\");\\n\\n        (, int256 exchangeRate, , , ) = fundingStorage.fundingTokenChainLinkFeeds[fundingToken].latestRoundData();\\n        require(exchangeRate != 0, \\\"zero exchange rate\\\");\\n\\n        uint8 exchangeRateDecimals = fundingStorage.fundingTokenChainLinkFeeds[fundingToken].decimals();\\n\\n        if (fundingStorage.invertChainLinkFeedAnswer[fundingToken]) {\\n            exchangeRate = int256(10**(exchangeRateDecimals * 2)) / exchangeRate;\\n        }\\n\\n        return (uint256(exchangeRate), exchangeRateDecimals);\\n    }\\n\\n    /// @dev Maps a funding token to a ChainLinkFeed\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingToken the fundingToken\\n    /// @param fundingTokenChainLinkFeed the ChainLink price feed\\n    /// @param invertChainLinkFeedAnswer whether the rate returned by the chainLinkFeed needs to be inverted to match the token-currency pair order\\n    function setFundingTokenChainLinkFeed(\\n        FundingStorage storage fundingStorage,\\n        IERC20 fundingToken,\\n        AggregatorV3Interface fundingTokenChainLinkFeed,\\n        bool invertChainLinkFeedAnswer\\n    ) external {\\n        fundingStorage.fundingTokenChainLinkFeeds[fundingToken] = fundingTokenChainLinkFeed;\\n        fundingStorage.invertChainLinkFeedAnswer[fundingToken] = invertChainLinkFeedAnswer;\\n    }\\n\\n    /// @dev Set whether a token should be accepted for funding the pool\\n    /// @param fundingStorage FundingStorage\\n    /// @param fundingToken the token\\n    /// @param accepted whether it is accepted\\n    function setFundingToken(\\n        FundingStorage storage fundingStorage,\\n        IERC20 fundingToken,\\n        bool accepted\\n    ) public {\\n        if (fundingStorage.fundingTokens[fundingToken] != accepted) {\\n            fundingStorage.fundingTokens[fundingToken] = accepted;\\n            emit FundingTokenUpdated(fundingToken, accepted);\\n            if (accepted) {\\n                fundingStorage._fundingTokens.push(fundingToken);\\n            } else {\\n                Util.removeValueFromArray(fundingToken, fundingStorage._fundingTokens);\\n            }\\n        }\\n    }\\n\\n    /// @dev Change primaryFunder status of an address\\n    /// @param fundingStorage FundingStorage\\n    /// @param primaryFunder the address\\n    /// @param accepted whether its accepted as primaryFunder\\n    function setPrimaryFunder(\\n        FundingStorage storage fundingStorage,\\n        address primaryFunder,\\n        bool accepted\\n    ) public {\\n        if (fundingStorage.primaryFunders[primaryFunder] != accepted) {\\n            fundingStorage.primaryFunders[primaryFunder] = accepted;\\n            emit PrimaryFunderUpdated(primaryFunder, accepted);\\n        }\\n    }\\n\\n    /// @dev Change borrower status of an address\\n    /// @param fundingStorage FundingStorage\\n    /// @param borrower the borrower address\\n    /// @param accepted whether the address is a borrower\\n    function setBorrower(\\n        FundingStorage storage fundingStorage,\\n        address borrower,\\n        bool accepted\\n    ) public {\\n        if (fundingStorage.borrowers[borrower] != accepted) {\\n            fundingStorage.borrowers[borrower] = accepted;\\n            emit BorrowerUpdated(borrower, accepted);\\n            if (fundingStorage.borrowers[msg.sender]) {\\n                fundingStorage.borrowers[msg.sender] = false;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/LendingPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// (C) Florence Finance, 2022 - https://florence.finance/\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title LendingPoolToken\\n/// @author Florence Finance\\n/// @dev Every LendingPool has its own LendingPoolToken which can be minted and burned by the LendingPool\\ncontract LendingPoolToken is ERC20, Ownable {\\n    /// @dev\\n    /// @param _lendingPoolId (uint256) id of the LendingPool this token belongs to\\n    /// @param _name (string) name of the token (see ERC20)\\n    /// @param _symbol (string) symbol of the token (see ERC20)\\n    // solhint-disable-next-line\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\\n\\n    /// @dev Allows owner to mint tokens.\\n    /// @param _receiver (address) receiver of the minted tokens\\n    /// @param _amount (uint256) the amount to mint (18 decimals)\\n    function mint(address _receiver, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"LendingPoolToken: invalidAmount\\\");\\n        _mint(_receiver, _amount);\\n    }\\n\\n    /// @dev Allows owner to burn tokens.\\n    /// @param _amount (uint256) the amount to burn (18 decimals)\\n    function burn(uint256 _amount) external {\\n        require(_amount > 0, \\\"LendingPoolToken: invalidAmount\\\");\\n        _burn(msg.sender, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Util.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\n// (C) Florence Finance, 2022 - https://florence.finance/\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nlibrary Util {\\n    /// @dev Return the decimals of an ERC20 token (if the implementations offers it)\\n    /// @param _token (IERC20) the ERC20 token\\n    /// @return  (uint8) the decimals\\n    function getERC20Decimals(IERC20 _token) internal view returns (uint8) {\\n        return IERC20Metadata(address(_token)).decimals();\\n    }\\n\\n    function checkedTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        require(amount > 0, \\\"checkedTransferFrom: amount zero\\\");\\n        uint256 balanceBefore = token.balanceOf(to);\\n        token.transferFrom(from, to, amount);\\n        uint256 receivedAmount = token.balanceOf(to) - balanceBefore;\\n        require(receivedAmount == amount, \\\"checkedTransferFrom: not amount\\\");\\n        return receivedAmount;\\n    }\\n\\n    /// @dev A checked Token transfer; raises if the token transfer amount is not equal to the transferred amount\\n    /// this might happen if the token ERC20 contract is hacked\\n    /// @param token (address) the address of the ERC20 token to transfer\\n    /// @param to (address) receiver address\\n    /// @param amount (uint256) the desired amount to transfer\\n    /// @return  (uint256) the received amount that was transferred\\n    /// IMPORTANT: the return value will only be returned to another smart contract,\\n    /// but never to the testing environment, because if the transaction goes through,\\n    /// a receipt is returned and not a (uint256)\\n    function checkedTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        require(amount > 0, \\\"checkedTransfer: amount zero\\\");\\n        uint256 balanceBefore = token.balanceOf(to);\\n        token.transfer(to, amount);\\n        uint256 receivedAmount = token.balanceOf(to) - balanceBefore;\\n        require(receivedAmount == amount, \\\"checkedTransfer: not amount\\\");\\n        return receivedAmount;\\n    }\\n\\n    /// @dev Converts a number from one decimal precision to the other\\n    /// @param _number (uint256) the number\\n    /// @param _currentDecimals (uint256) the current decimals of the number\\n    /// @param _targetDecimals (uint256) the desired decimals for the number\\n    /// @return  (uint256) the number with _targetDecimals decimals\\n    function convertDecimals(\\n        uint256 _number,\\n        uint256 _currentDecimals,\\n        uint256 _targetDecimals\\n    ) internal pure returns (uint256) {\\n        uint256 diffDecimals;\\n\\n        uint256 amountCorrected = _number;\\n\\n        if (_targetDecimals < _currentDecimals) {\\n            diffDecimals = _currentDecimals - _targetDecimals;\\n            amountCorrected = _number / (uint256(10)**diffDecimals);\\n        } else if (_targetDecimals > _currentDecimals) {\\n            diffDecimals = _targetDecimals - _currentDecimals;\\n            amountCorrected = _number * (uint256(10)**diffDecimals);\\n        }\\n\\n        return (amountCorrected);\\n    }\\n\\n    /// @dev Converts a number from one decimal precision to the other based on two ERC20 Tokens\\n    /// @param _number (uint256) the number\\n    /// @param _sourceToken (address) the source ERC20 Token\\n    /// @param _targetToken (address) the target ERC20 Token\\n    /// @return  (uint256) the number with _targetDecimals decimals\\n    function convertDecimalsERC20(\\n        uint256 _number,\\n        IERC20 _sourceToken,\\n        IERC20 _targetToken\\n    ) internal view returns (uint256) {\\n        return convertDecimals(_number, getERC20Decimals(_sourceToken), getERC20Decimals(_targetToken));\\n    }\\n\\n    function removeValueFromArray(IERC20 value, IERC20[] storage array) internal {\\n        bool shift = false;\\n        uint256 i = 0;\\n        while (i < array.length - 1) {\\n            if (array[i] == value) shift = true;\\n            if (shift) {\\n                array[i] = array[i + 1];\\n            }\\n            i++;\\n        }\\n        array.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"BorrowerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"fundingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lendingPoolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingRequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"FundingRequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingRequestId\",\"type\":\"uint256\"}],\"name\":\"FundingRequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"FundingTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"primaryFunder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"PrimaryFunderUpdated\",\"type\":\"event\"}]", "ContractName": "Funding", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}