{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/veToken/VeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./VeTokenProxy.sol\\\";\\r\\nimport \\\"./VeTokenStorage.sol\\\";\\r\\n\\r\\n// # Interface for checking whether address belongs to a whitelisted\\r\\n// # type of a smart wallet.\\r\\ninterface SmartWalletChecker {\\r\\n    function isAllowed(address addr) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract VeToken is AccessControl, VeTokenStorage {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    \\r\\n    function initialize(\\r\\n        address tokenAddr_,\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        string memory version_,\\r\\n        uint256 scorePerBlk_,\\r\\n        uint256 startBlk_\\r\\n    ) external onlyOwner \\r\\n    {\\r\\n        token = tokenAddr_;\\r\\n        \\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n        version = version_;\\r\\n\\r\\n        scorePerBlk = scorePerBlk_;\\r\\n        startBlk = startBlk_;\\r\\n\\r\\n        poolInfo.lastUpdateBlk = startBlk > block.number ? startBlk : block.number;\\r\\n    \\r\\n        emit Initialize(tokenAddr_, name_, symbol_, version_, scorePerBlk_, startBlk_);\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS & INTERNALS ========== */\\r\\n\\r\\n    function getPoolInfo() external view returns (PoolInfo memory) \\r\\n    {\\r\\n        return poolInfo;\\r\\n    }\\r\\n\\r\\n    function getUserInfo(\\r\\n        address user_\\r\\n    ) external view returns (UserInfo memory) \\r\\n    {\\r\\n        return userInfo[user_];\\r\\n    }\\r\\n\\r\\n    function getTotalScore() public view returns(uint256) \\r\\n    {\\r\\n        uint256 startBlk = (clearBlk > startBlk) && (block.number > clearBlk) ? clearBlk : startBlk;\\r\\n        return block.number.sub(startBlk).mul(scorePerBlk);\\r\\n    }\\r\\n\\r\\n    function getUserRatio(\\r\\n        address user_\\r\\n    ) public view returns (uint256) \\r\\n    {\\r\\n        return currentScore(user_).mul(1e12).div(getTotalScore());\\r\\n    }\\r\\n\\r\\n    // Score multiplier over given block range which include start block\\r\\n    function getMultiplier(\\r\\n        uint256 from_, \\r\\n        uint256 to_\\r\\n    ) internal view returns (uint256) \\r\\n    {\\r\\n        require(from_ <= to_, \\\"from_ must less than to_\\\");\\r\\n\\r\\n        from_ = from_ >= startBlk ? from_ : startBlk;\\r\\n\\r\\n        return to_.sub(from_);\\r\\n    }\\r\\n    \\r\\n    // Boolean value if user's score should be cleared\\r\\n    function clearUserScore(\\r\\n        address user_\\r\\n    ) internal view returns(bool isClearScore)\\r\\n    {\\r\\n        if ((block.number > clearBlk) && \\r\\n            (userInfo[user_].lastUpdateBlk < clearBlk)) {\\r\\n                isClearScore = true;\\r\\n            }\\r\\n    } \\r\\n\\r\\n    function clearPoolScore() internal returns(bool isClearScore)\\r\\n    {\\r\\n        if ((block.number > clearBlk) && (poolInfo.lastUpdateBlk < clearBlk)) {\\r\\n                isClearScore = true;\\r\\n                startBlk = clearBlk;\\r\\n            }     \\r\\n    }\\r\\n\\r\\n    function accScorePerToken() internal returns (uint256 updated)\\r\\n    {\\r\\n        bool isClearPoolScore = clearPoolScore();\\r\\n        uint256 scoreReward =  getMultiplier(poolInfo.lastUpdateBlk, block.number)\\r\\n                                            .mul(scorePerBlk);\\r\\n\\r\\n        if (isClearPoolScore) {\\r\\n            updated = scoreReward.mul(1e12).div(totalStaked)\\r\\n                                 .mul(block.number.sub(clearBlk))\\r\\n                                 .div(block.number.sub(poolInfo.lastUpdateBlk));\\r\\n        } else {\\r\\n            updated = poolInfo.accScorePerToken.add(scoreReward.mul(1e12)\\r\\n                                               .div(totalStaked));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function accScorePerTokenStatic() internal view returns (uint256 updated)\\r\\n    {\\r\\n        uint256 scoreReward =  getMultiplier(poolInfo.lastUpdateBlk, block.number)\\r\\n                                            .mul(scorePerBlk);\\r\\n\\r\\n        updated = poolInfo.accScorePerToken.add(scoreReward.mul(1e12)\\r\\n                                            .div(totalStaked));\\r\\n        \\r\\n    }\\r\\n\\r\\n    // Pending score to be added for user\\r\\n    function pendingScore(\\r\\n        address user_\\r\\n    ) internal view returns (uint256 pending) \\r\\n    {\\r\\n        if (userInfo[user_].amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (clearUserScore(user_)) {\\r\\n            pending = userInfo[user_].amount.mul(accScorePerTokenStatic()).div(1e12);\\r\\n        } else {\\r\\n            pending = userInfo[user_].amount.mul(accScorePerTokenStatic()).div(1e12)\\r\\n                                            .sub(userInfo[user_].scoreDebt);  \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function currentScore(\\r\\n        address user_\\r\\n    ) internal view returns(uint256)\\r\\n    {\\r\\n        uint256 pending = pendingScore(user_);\\r\\n\\r\\n        if (clearUserScore(user_)) {\\r\\n            return pending;\\r\\n        } else {\\r\\n            return pending.add(userInfo[user_].score);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Boolean value of claimable or not\\r\\n    function isClaimable() external view returns(bool) \\r\\n    {\\r\\n        return claimIsActive;\\r\\n    }\\r\\n\\r\\n    // Boolean value of stakable or not\\r\\n    function isStakable() external view returns(bool) \\r\\n    {\\r\\n        return stakeIsActive;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @notice Get the current voting power for `msg.sender` \\r\\n        * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\r\\n        * @param addr_ User wallet address\\r\\n        * @return User voting power\\r\\n    */\\r\\n    function balanceOf(\\r\\n        address addr_\\r\\n    ) external view notZeroAddr(addr_) returns(uint256)\\r\\n    {\\r\\n        return userInfo[addr_].amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @notice Calculate total voting power \\r\\n        * @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\r\\n        * @return Total voting power\\r\\n    */\\r\\n    function totalSupply() external view returns(uint256) \\r\\n    {\\r\\n        return supply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @notice Check if the call is from a whitelisted smart contract, revert if not\\r\\n        * @param addr_ Address to be checked\\r\\n    */\\r\\n    function assertNotContract(\\r\\n        address addr_\\r\\n    ) internal \\r\\n    {\\r\\n        if (addr_ != tx.origin) {\\r\\n            address checker = smartWalletChecker;\\r\\n            if (checker != ZERO_ADDRESS){\\r\\n                if (SmartWalletChecker(checker).isAllowed(addr_)){\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n            revert(\\\"Smart contract depositors not allowed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== WRITES ========== */\\r\\n\\r\\n    function updateStakingPool() internal\\r\\n    {\\r\\n        if (block.number <= poolInfo.lastUpdateBlk || block.number <= startBlk) { \\r\\n            poolInfo.lastUpdateBlk = block.number; \\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (totalStaked == 0) {\\r\\n            poolInfo.lastUpdateBlk = block.number; \\r\\n            return;\\r\\n        }  \\r\\n\\r\\n        poolInfo.accScorePerToken = accScorePerToken();\\r\\n        poolInfo.lastUpdateBlk = block.number; \\r\\n\\r\\n        emit UpdateStakingPool(block.number);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @notice Deposit and lock tokens for a user\\r\\n        * @dev Anyone (even a smart contract) can deposit for someone else\\r\\n        * @param value_ Amount to add to user's lock\\r\\n        * @param user_ User's wallet address\\r\\n    */\\r\\n    function depositFor(\\r\\n        address user_,\\r\\n        uint256 value_\\r\\n    ) external nonReentrant activeStake notZeroAddr(user_) \\r\\n    {\\r\\n        require (value_ > 0, \\\"Need non-zero value\\\");\\r\\n\\r\\n        if (userInfo[user_].amount == 0) {\\r\\n            assertNotContract(msg.sender);\\r\\n        }\\r\\n    \\r\\n        updateStakingPool();\\r\\n        userInfo[user_].score = currentScore(user_);\\r\\n        userInfo[user_].amount = userInfo[user_].amount.add(value_);\\r\\n        userInfo[user_].scoreDebt = userInfo[user_].amount.mul(poolInfo.accScorePerToken).div(1e12);\\r\\n        userInfo[user_].lastUpdateBlk = block.number;\\r\\n\\r\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), value_);\\r\\n        totalStaked = totalStaked.add(value_);\\r\\n        supply = supply.add(value_);\\r\\n\\r\\n        emit DepositFor(user_, value_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @notice Withdraw tokens for `msg.sender`ime`\\r\\n        * @param value_ Token amount to be claimed\\r\\n        * @dev Only possible if it's claimable\\r\\n    */\\r\\n    function withdraw(\\r\\n        uint256 value_\\r\\n    ) public nonReentrant activeClaim\\r\\n    {\\r\\n        require (value_ > 0, \\\"Need non-zero value\\\");\\r\\n        require (userInfo[msg.sender].amount >= value_, \\\"Exceed staked value\\\");\\r\\n        \\r\\n        updateStakingPool();\\r\\n        userInfo[msg.sender].score = currentScore(msg.sender);\\r\\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount.sub(value_);\\r\\n        userInfo[msg.sender].scoreDebt = userInfo[msg.sender].amount.mul(poolInfo.accScorePerToken).div(1e12);\\r\\n        userInfo[msg.sender].lastUpdateBlk = block.number;\\r\\n\\r\\n        IERC20(token).safeTransfer(msg.sender, value_);\\r\\n        totalStaked = totalStaked.sub(value_);\\r\\n        supply = supply.sub(value_);\\r\\n\\r\\n        emit Withdraw(value_);\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    function become(\\r\\n        VeTokenProxy veTokenProxy\\r\\n    ) public \\r\\n    {\\r\\n        require(msg.sender == veTokenProxy.owner(), \\\"only MultiSigner can change brains\\\");\\r\\n        veTokenProxy.acceptImplementation();\\r\\n\\r\\n        emit Become(address(veTokenProxy), address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @notice Apply setting external contract to check approved smart contract wallets\\r\\n    */\\r\\n    function applySmartWalletChecker(\\r\\n        address smartWalletChecker_\\r\\n    ) external onlyOwner notZeroAddr(smartWalletChecker_) \\r\\n    {\\r\\n        smartWalletChecker = smartWalletChecker_;\\r\\n\\r\\n        emit ApplySmartWalletChecker(smartWalletChecker_);\\r\\n    }\\r\\n\\r\\n    // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\\r\\n    function recoverERC20(\\r\\n        address tokenAddress, \\r\\n        uint256 tokenAmount\\r\\n    ) external onlyOwner notZeroAddr(tokenAddress) \\r\\n    {\\r\\n        // Only the owner address can ever receive the recovery withdrawal\\r\\n        require(tokenAddress != token, \\\"Not in migration\\\");\\r\\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\\r\\n\\r\\n        emit Recovered(tokenAddress, tokenAmount);\\r\\n    }\\r\\n\\r\\n    function setScorePerBlk(\\r\\n        uint256 scorePerBlk_\\r\\n    ) external onlyOwner \\r\\n    {\\r\\n        scorePerBlk = scorePerBlk_;\\r\\n\\r\\n        emit SetScorePerBlk(scorePerBlk_);\\r\\n    }\\r\\n\\r\\n    function setClearBlk(\\r\\n        uint256 clearBlk_\\r\\n    ) external onlyOwner \\r\\n    {\\r\\n        clearBlk = clearBlk_;\\r\\n\\r\\n        emit SetClearBlk(clearBlk_);\\r\\n    }\\r\\n\\r\\n    receive () external payable {}\\r\\n\\r\\n    function claim (address receiver) external onlyOwner nonReentrant {\\r\\n        payable(receiver).transfer(address(this).balance);\\r\\n    \\r\\n        emit Claim(receiver);\\r\\n    }\\r\\n    \\r\\n    /* ========== EVENTS ========== */\\r\\n    event Initialize(address tokenAddr, string name, string symbol, string version, uint scorePerBlk, uint startBlk);\\r\\n    event DepositFor(address depositor, uint256 value);\\r\\n    event Withdraw(uint256 value);\\r\\n    event ApplySmartWalletChecker(address smartWalletChecker);\\r\\n    event Recovered(address tokenAddress, uint256 tokenAmount);\\r\\n    event UpdateStakingPool(uint256 blockNumber);\\r\\n    event SetScorePerBlk(uint256 scorePerBlk);\\r\\n    event SetClearBlk(uint256 clearBlk);\\r\\n    event Become(address proxy, address impl);\\r\\n    event Claim(address receiver);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    // function decimals() external view override returns (uint8);\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/veToken/VeTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./VeTokenStorage.sol\\\";\\r\\nimport \\\"./AccessControl.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title VeTokenCore\\r\\n * @dev Storage for the VeToken is at this address, while execution is delegated to the `veTokenImplementation`.\\r\\n */\\r\\ncontract VeTokenProxy is AccessControl, ProxyStorage {\\r\\n    function setPendingImplementation(\\r\\n        address newPendingImplementation_\\r\\n    ) public onlyOwner \\r\\n    {\\r\\n        address oldPendingImplementation = pendingVeTokenImplementation;\\r\\n\\r\\n        pendingVeTokenImplementation = newPendingImplementation_;\\r\\n\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingVeTokenImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\r\\n    * @dev Admin function for new implementation to accept it's role as implementation\\r\\n    */\\r\\n    function acceptImplementation() public {\\r\\n        // Check caller is pendingImplementation and pendingImplementation \u2260 address(0)\\r\\n        require (msg.sender == pendingVeTokenImplementation && pendingVeTokenImplementation != address(0),\\r\\n                \\\"Invalid veTokenImplementation\\\");\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldImplementation = veTokenImplementation;\\r\\n        address oldPendingImplementation = pendingVeTokenImplementation;\\r\\n\\r\\n        veTokenImplementation = oldPendingImplementation;\\r\\n\\r\\n        pendingVeTokenImplementation = address(0);\\r\\n\\r\\n        emit NewImplementation(oldImplementation, veTokenImplementation);\\r\\n        emit NewPendingImplementation(oldPendingImplementation, pendingVeTokenImplementation);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * It returns to the external caller whatever the implementation returns\\r\\n     * or forwards reverts.\\r\\n     */\\r\\n    fallback () external payable {\\r\\n        // delegate all other functions to current implementation\\r\\n        (bool success, ) = veTokenImplementation.delegatecall(msg.data);\\r\\n\\r\\n        assembly {\\r\\n              let free_mem_ptr := mload(0x40)\\r\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\r\\n\\r\\n              switch success\\r\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\r\\n              default { return(free_mem_ptr, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive () external payable {}\\r\\n\\r\\n    function claim (address receiver) external onlyOwner nonReentrant {\\r\\n        payable(receiver).transfer(address(this).balance);\\r\\n\\r\\n        emit Claim(receiver);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is changed\\r\\n      */\\r\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\r\\n\\r\\n    /**\\r\\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\r\\n      */\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n   \\r\\n    /**\\r\\n      * @notice Emitted when claim eth in contract\\r\\n      */\\r\\n    event Claim(address receiver);\\r\\n}\\r\\n \"\r\n    },\r\n    \"contracts/veToken/VeTokenStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract ProxyStorage {\\r\\n    /**\\r\\n    * @notice Active brains of VeTokenProxy\\r\\n    */\\r\\n    address public veTokenImplementation;\\r\\n\\r\\n    /**\\r\\n    * @notice Pending brains of VeTokenProxy\\r\\n    */\\r\\n    address public pendingVeTokenImplementation;\\r\\n}\\r\\n\\r\\ncontract VeTokenStorage is  ProxyStorage {\\r\\n    address public token;  // token\\r\\n    uint256 public supply; // veToken\\r\\n\\r\\n    // veToken related\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    string public version;\\r\\n    uint256 constant decimals = 18;\\r\\n\\r\\n    // score related\\r\\n    uint256 public scorePerBlk;\\r\\n    uint256 public totalStaked;\\r\\n\\r\\n    mapping (address => UserInfo) internal userInfo;\\r\\n    PoolInfo public poolInfo;\\r\\n    uint256 public startBlk;  // start Blk\\r\\n    uint256 public clearBlk;  // set annually\\r\\n    \\r\\n    // User variables\\r\\n    struct UserInfo {\\r\\n        uint256 amount;        // How many tokens the user has provided.\\r\\n        uint256 score;         // score exclude pending amount\\r\\n        uint256 scoreDebt;     // score debt\\r\\n        uint256 lastUpdateBlk; // last user's tx Blk\\r\\n    }\\r\\n\\r\\n    // Pool variables\\r\\n    struct PoolInfo {      \\r\\n        uint256 lastUpdateBlk;     // Last block number that score distribution occurs.\\r\\n        uint256 accScorePerToken;   // Accumulated socres per token, times 1e12. \\r\\n    }\\r\\n\\r\\n    address public smartWalletChecker;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/veToken/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n// import \\\"./Sig.sol\\\";\\n\\ncontract AccessControl is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    // event ContractUpgrade(address newContract);\\n    event SetProxy(address proxy);\\n    event AdminTransferred(address oldAdmin, address newAdmin);\\n    event FlipStakableState(bool stakeIsActive);\\n    event FlipClaimableState(bool claimIsActive);\\n    event TransferAdmin(address oldAdmin, address newAdmin);\\n\\n    address private _admin;\\n    address public proxy;\\n    bool public stakeIsActive = true;\\n    bool public claimIsActive = true;\\n\\n    address public constant ZERO_ADDRESS = address(0);\\n\\n    constructor() {\\n        _setAdmin(_msgSender());\\n    }\\n\\n    // function verified(bytes32 hash, bytes memory signature) public view returns (bool){\\n    //     return admin() == Sig.recover(hash, signature);\\n    // }\\n\\n    /**\\n     * @dev Returns the address of the current admin.\\n     */\\n    function admin() public view virtual returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(admin() == _msgSender(), \\\"Invalid Admin: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    function _setAdmin(address newAdmin) private {\\n        address oldAdmin = _admin;\\n        _admin = newAdmin;\\n        emit AdminTransferred(oldAdmin, newAdmin);\\n    }\\n\\n    function setProxy(address _proxy) external onlyOwner {\\n        require(_proxy != address(0), \\\"Invalid Address\\\");\\n        proxy = _proxy;\\n\\n        emit SetProxy(_proxy);\\n    }\\n\\n    modifier onlyProxy() {\\n        require(proxy == _msgSender(), \\\"Not Permit: caller is not the proxy\\\"); \\n        _;\\n    }\\n\\n    // modifier sigVerified(bytes memory signature) {\\n    //     require(verified(Sig.ethSignedHash(msg.sender), signature), \\\"Not verified\\\");\\n    //     _;\\n    // }\\n\\n    modifier activeStake() {\\n        require(stakeIsActive, \\\"Unstakable\\\");\\n        _;\\n    } \\n\\n    modifier activeClaim() {\\n        require(claimIsActive, \\\"Unclaimable\\\");\\n        _;\\n    } \\n    \\n    modifier notZeroAddr(address addr_) {\\n        require(addr_ != ZERO_ADDRESS, \\\"Zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newAdmin`).\\n     * Can only be called by the current admin.\\n     */\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Invalid Admin: new admin is the zero address\\\");\\n        address oldAdmin = admin();\\n        _setAdmin(newAdmin);\\n\\n        emit TransferAdmin(oldAdmin, newAdmin);\\n    }\\n\\n    /*\\n    * Pause sale if active, make active if paused\\n    */\\n    function flipStakableState() external onlyOwner {\\n        stakeIsActive = !stakeIsActive;\\n\\n        emit FlipStakableState(stakeIsActive);\\n    }\\n\\n    function flipClaimableState() external onlyOwner {\\n        claimIsActive = !claimIsActive;\\n\\n        emit FlipClaimableState(claimIsActive);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartWalletChecker\",\"type\":\"address\"}],\"name\":\"ApplySmartWalletChecker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"Become\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"claimIsActive\",\"type\":\"bool\"}],\"name\":\"FlipClaimableState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stakeIsActive\",\"type\":\"bool\"}],\"name\":\"FlipStakableState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scorePerBlk\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlk\",\"type\":\"uint256\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clearBlk\",\"type\":\"uint256\"}],\"name\":\"SetClearBlk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"SetProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scorePerBlk\",\"type\":\"uint256\"}],\"name\":\"SetScorePerBlk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"UpdateStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartWalletChecker_\",\"type\":\"address\"}],\"name\":\"applySmartWalletChecker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VeTokenProxy\",\"name\":\"veTokenProxy\",\"type\":\"address\"}],\"name\":\"become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBlk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipClaimableState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipStakableState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accScorePerToken\",\"type\":\"uint256\"}],\"internalType\":\"struct VeTokenStorage.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scoreDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlk\",\"type\":\"uint256\"}],\"internalType\":\"struct VeTokenStorage.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"scorePerBlk_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlk_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingVeTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accScorePerToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scorePerBlk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"clearBlk_\",\"type\":\"uint256\"}],\"name\":\"setClearBlk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scorePerBlk_\",\"type\":\"uint256\"}],\"name\":\"setScorePerBlk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartWalletChecker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VeToken", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}