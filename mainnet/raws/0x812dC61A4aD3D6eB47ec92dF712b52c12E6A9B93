{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/JBProjectHandles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title JBProjectHandles\\n/// @author peri\\n/// @notice Manages reverse records that point from JB project IDs to ENS nodes. If the reverse record of a project ID is pointed to an ENS node with a TXT record matching the ID of that project, then the ENS node will be considered the \\\"handle\\\" for that project.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"./interfaces/IJBProjectHandles.sol\\\";\\nimport \\\"./interfaces/ITextResolver.sol\\\";\\n\\ncontract JBProjectHandles is IJBProjectHandles {\\n    /* -------------------------------------------------------------------------- */\\n    /* ------------------------------- MODIFIERS -------------------------------- */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Require that caller owns this Juicebox project\\n    /// @param projectId id of Juicebox project\\n    modifier onlyProjectOwner(uint256 projectId) {\\n        require(\\n            msg.sender == IERC721(jbProjects).ownerOf(projectId),\\n            \\\"Not Juicebox project owner\\\"\\n        );\\n        _;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /* ------------------------------ CONSTRUCTOR ------------------------------- */\\n    /* -------------------------------------------------------------------------- */\\n\\n    constructor(address _jbProjects, address _ensTextResolver) {\\n        jbProjects = _jbProjects;\\n        ensTextResolver = _ensTextResolver;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /* ------------------------------- VARIABLES -------------------------------- */\\n    /* -------------------------------------------------------------------------- */\\n\\n    string constant KEY = \\\"JUICEBOX\\\";\\n\\n    /// JB Projects contract address\\n    address immutable jbProjects;\\n\\n    /// ENS text resolver contract address\\n    address immutable ensTextResolver;\\n\\n    /// Point from project ID to ENS node\\n    mapping(uint256 => bytes32) reverseRecords;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /* --------------------------- EXTERNAL FUNCTIONS --------------------------- */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Set reverse record for Juicebox project\\n    /// @dev Requires sender to own Juicebox project\\n    /// @param projectId id of Juicebox project\\n    /// @param record new reverse record for Juicebox project\\n    function setReverseRecord(uint256 projectId, bytes32 record)\\n        external\\n        onlyProjectOwner(projectId)\\n    {\\n        reverseRecords[projectId] = record;\\n\\n        emit SetReverseRecord(projectId, record);\\n    }\\n\\n    /// @notice Returns reverse record of Juicebox project\\n    /// @param projectId id of Juicebox project\\n    function reverseRecordOf(uint256 projectId)\\n        public\\n        view\\n        returns (bytes32 reverseRecord)\\n    {\\n        reverseRecord = reverseRecords[projectId];\\n    }\\n\\n    /// @notice Returns handle for Juicebox project\\n    /// @dev Requires ENS TXT record to match projectId\\n    /// @param projectId id of Juicebox project\\n    function handleOf(uint256 projectId) public view returns (bytes32) {\\n        bytes32 reverseRecord = reverseRecordOf(projectId);\\n\\n        require(reverseRecord != bytes32(0), \\\"No reverse record\\\");\\n\\n        string memory id = ITextResolver(ensTextResolver).text(\\n            reverseRecord,\\n            KEY\\n        );\\n\\n        require(stringToUint(id) == projectId, \\\"Invalid TXT record\\\");\\n\\n        return reverseRecord;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /* --------------------------- INTERNAL FUNCTIONS --------------------------- */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Converts string to uint256\\n    /// @param str string to be converted\\n    function stringToUint(string memory str)\\n        internal\\n        pure\\n        returns (uint256 _result)\\n    {\\n        bytes memory _data = bytes(str);\\n        uint256 count = 0;\\n        for (uint256 i = _data.length; i > 0; i--) {\\n            _result |= uint256(uint8(_data[i - 1])) << ((count++) * 8);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"contracts/interfaces/IJBProjectHandles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Interface for JBProjectHandles\\n\\npragma solidity ^0.8.0;\\n\\ninterface IJBProjectHandles {\\n    event SetReverseRecord(uint256 indexed projectId, bytes32 indexed record);\\n\\n    function setReverseRecord(uint256 projectId, bytes32 record) external;\\n\\n    function reverseRecordOf(uint256 projectId)\\n        external\\n        view\\n        returns (bytes32 reverseRecord);\\n\\n    function handleOf(uint256 projectId) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITextResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n// https://github.com/ensdomains/ens-contracts/blob/master/contracts/resolvers/profiles/ITextResolver.sol\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jbProjects\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensTextResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"SetReverseRecord\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"handleOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"reverseRecordOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"reverseRecord\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"record\",\"type\":\"bytes32\"}],\"name\":\"setReverseRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JBProjectHandles", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d8b4359143eda5b2d763e127ed27c77addbc47d30000000000000000000000004976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}