{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: alloyx-smart-contracts-v2/contracts/goldfinch/interfaces/ICreditLine.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ICreditLine {\r\n  function borrower() external view returns (address);\r\n\r\n  function limit() external view returns (uint256);\r\n\r\n  function maxLimit() external view returns (uint256);\r\n\r\n  function interestApr() external view returns (uint256);\r\n\r\n  function paymentPeriodInDays() external view returns (uint256);\r\n\r\n  function principalGracePeriodInDays() external view returns (uint256);\r\n\r\n  function termInDays() external view returns (uint256);\r\n\r\n  function lateFeeApr() external view returns (uint256);\r\n\r\n  function isLate() external view returns (bool);\r\n\r\n  function withinPrincipalGracePeriod() external view returns (bool);\r\n\r\n  // Accounting variables\r\n  function balance() external view returns (uint256);\r\n\r\n  function interestOwed() external view returns (uint256);\r\n\r\n  function principalOwed() external view returns (uint256);\r\n\r\n  function termEndTime() external view returns (uint256);\r\n\r\n  function nextDueTime() external view returns (uint256);\r\n\r\n  function interestAccruedAsOf() external view returns (uint256);\r\n\r\n  function lastFullPaymentTime() external view returns (uint256);\r\n}\r\n\r\n// File: alloyx-smart-contracts-v2/contracts/goldfinch/interfaces/IV2CreditLine.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nabstract contract IV2CreditLine is ICreditLine {\r\n  function principal() external view virtual returns (uint256);\r\n\r\n  function totalInterestAccrued() external view virtual returns (uint256);\r\n\r\n  function termStartTime() external view virtual returns (uint256);\r\n\r\n  function setLimit(uint256 newAmount) external virtual;\r\n\r\n  function setMaxLimit(uint256 newAmount) external virtual;\r\n\r\n  function setBalance(uint256 newBalance) external virtual;\r\n\r\n  function setPrincipal(uint256 _principal) external virtual;\r\n\r\n  function setTotalInterestAccrued(uint256 _interestAccrued) external virtual;\r\n\r\n  function drawdown(uint256 amount) external virtual;\r\n\r\n  function assess()\r\n    external\r\n    virtual\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  function initialize(\r\n    address _config,\r\n    address owner,\r\n    address _borrower,\r\n    uint256 _limit,\r\n    uint256 _interestApr,\r\n    uint256 _paymentPeriodInDays,\r\n    uint256 _termInDays,\r\n    uint256 _lateFeeApr,\r\n    uint256 _principalGracePeriodInDays\r\n  ) public virtual;\r\n\r\n  function setTermEndTime(uint256 newTermEndTime) external virtual;\r\n\r\n  function setNextDueTime(uint256 newNextDueTime) external virtual;\r\n\r\n  function setInterestOwed(uint256 newInterestOwed) external virtual;\r\n\r\n  function setPrincipalOwed(uint256 newPrincipalOwed) external virtual;\r\n\r\n  function setInterestAccruedAsOf(uint256 newInterestAccruedAsOf) external virtual;\r\n\r\n  function setWritedownAmount(uint256 newWritedownAmount) external virtual;\r\n\r\n  function setLastFullPaymentTime(uint256 newLastFullPaymentTime) external virtual;\r\n\r\n  function setLateFeeApr(uint256 newLateFeeApr) external virtual;\r\n\r\n  function updateGoldfinchConfig() external virtual;\r\n}\r\n\r\n// File: alloyx-smart-contracts-v2/contracts/goldfinch/interfaces/ITranchedPool.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nabstract contract ITranchedPool {\r\n  IV2CreditLine public creditLine;\r\n  uint256 public createdAt;\r\n\r\n  enum Tranches {\r\n    Reserved,\r\n    Senior,\r\n    Junior\r\n  }\r\n\r\n  struct TrancheInfo {\r\n    uint256 id;\r\n    uint256 principalDeposited;\r\n    uint256 principalSharePrice;\r\n    uint256 interestSharePrice;\r\n    uint256 lockedUntil;\r\n  }\r\n\r\n  struct PoolSlice {\r\n    TrancheInfo seniorTranche;\r\n    TrancheInfo juniorTranche;\r\n    uint256 totalInterestAccrued;\r\n    uint256 principalDeployed;\r\n  }\r\n\r\n  struct SliceInfo {\r\n    uint256 reserveFeePercent;\r\n    uint256 interestAccrued;\r\n    uint256 principalAccrued;\r\n  }\r\n\r\n  struct ApplyResult {\r\n    uint256 interestRemaining;\r\n    uint256 principalRemaining;\r\n    uint256 reserveDeduction;\r\n    uint256 oldInterestSharePrice;\r\n    uint256 oldPrincipalSharePrice;\r\n  }\r\n\r\n  function initialize(\r\n    address _config,\r\n    address _borrower,\r\n    uint256 _juniorFeePercent,\r\n    uint256 _limit,\r\n    uint256 _interestApr,\r\n    uint256 _paymentPeriodInDays,\r\n    uint256 _termInDays,\r\n    uint256 _lateFeeApr,\r\n    uint256 _principalGracePeriodInDays,\r\n    uint256 _fundableAt,\r\n    uint256[] calldata _allowedUIDTypes\r\n  ) public virtual;\r\n\r\n  function getTranche(uint256 tranche) external view virtual returns (TrancheInfo memory);\r\n\r\n  function pay(uint256 amount) external virtual;\r\n\r\n  function lockJuniorCapital() external virtual;\r\n\r\n  function lockPool() external virtual;\r\n\r\n  function initializeNextSlice(uint256 _fundableAt) external virtual;\r\n\r\n  function totalJuniorDeposits() external view virtual returns (uint256);\r\n\r\n  function drawdown(uint256 amount) external virtual;\r\n\r\n  function setFundableAt(uint256 timestamp) external virtual;\r\n\r\n  function deposit(uint256 tranche, uint256 amount) external virtual returns (uint256 tokenId);\r\n\r\n  function assess() external virtual;\r\n\r\n  function depositWithPermit(\r\n    uint256 tranche,\r\n    uint256 amount,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external virtual returns (uint256 tokenId);\r\n\r\n  function availableToWithdraw(uint256 tokenId)\r\n    external\r\n    view\r\n    virtual\r\n    returns (uint256 interestRedeemable, uint256 principalRedeemable);\r\n\r\n  function withdraw(uint256 tokenId, uint256 amount)\r\n    external\r\n    virtual\r\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\r\n\r\n  function withdrawMax(uint256 tokenId)\r\n    external\r\n    virtual\r\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\r\n\r\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts)\r\n    external\r\n    virtual;\r\n}\r\n\r\n// File: alloyx-smart-contracts-v2/contracts/goldfinch/interfaces/ISeniorPool.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\nabstract contract ISeniorPool {\r\n  uint256 public sharePrice;\r\n  uint256 public totalLoansOutstanding;\r\n  uint256 public totalWritedowns;\r\n\r\n  function deposit(uint256 amount) external virtual returns (uint256 depositShares);\r\n\r\n  function depositWithPermit(\r\n    uint256 amount,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external virtual returns (uint256 depositShares);\r\n\r\n  function withdraw(uint256 usdcAmount) external virtual returns (uint256 amount);\r\n\r\n  function withdrawInFidu(uint256 fiduAmount) external virtual returns (uint256 amount);\r\n\r\n  function sweepToCompound() public virtual;\r\n\r\n  function sweepFromCompound() public virtual;\r\n\r\n  function invest(ITranchedPool pool) public virtual;\r\n\r\n  function estimateInvestment(ITranchedPool pool) public view virtual returns (uint256);\r\n\r\n  function redeem(uint256 tokenId) public virtual;\r\n\r\n  function writedown(uint256 tokenId) public virtual;\r\n\r\n  function calculateWritedown(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    returns (uint256 writedownAmount);\r\n\r\n  function assets() public view virtual returns (uint256);\r\n\r\n  function getNumShares(uint256 amount) public view virtual returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: alloyx-smart-contracts-v2/contracts/goldfinch/interfaces/IPoolTokens.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\ninterface IPoolTokens is IERC721, IERC721Enumerable {\r\n  event TokenMinted(\r\n    address indexed owner,\r\n    address indexed pool,\r\n    uint256 indexed tokenId,\r\n    uint256 amount,\r\n    uint256 tranche\r\n  );\r\n\r\n  event TokenRedeemed(\r\n    address indexed owner,\r\n    address indexed pool,\r\n    uint256 indexed tokenId,\r\n    uint256 principalRedeemed,\r\n    uint256 interestRedeemed,\r\n    uint256 tranche\r\n  );\r\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\r\n\r\n  struct TokenInfo {\r\n    address pool;\r\n    uint256 tranche;\r\n    uint256 principalAmount;\r\n    uint256 principalRedeemed;\r\n    uint256 interestRedeemed;\r\n  }\r\n\r\n  struct MintParams {\r\n    uint256 principalAmount;\r\n    uint256 tranche;\r\n  }\r\n\r\n  function mint(MintParams calldata params, address to) external returns (uint256);\r\n\r\n  function redeem(\r\n    uint256 tokenId,\r\n    uint256 principalRedeemed,\r\n    uint256 interestRedeemed\r\n  ) external;\r\n\r\n  function burn(uint256 tokenId) external;\r\n\r\n  function onPoolCreated(address newPool) external;\r\n\r\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\r\n\r\n  function validPool(address sender) external view returns (bool);\r\n\r\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: alloyx-smart-contracts-v2/contracts/alloyx/AlloyxTokenCRWN.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\ncontract AlloyxTokenCRWN is ERC20, Ownable {\r\n  constructor() ERC20(\"Crown Gold\", \"CRWN\") {}\r\n\r\n  function mint(address _account, uint256 _amount) external onlyOwner returns (bool) {\r\n    _mint(_account, _amount);\r\n    return true;\r\n  }\r\n\r\n  function burn(address _account, uint256 _amount) external onlyOwner returns (bool) {\r\n    _burn(_account, _amount);\r\n    return true;\r\n  }\r\n\r\n  function contractName() external pure returns (string memory) {\r\n    return \"AlloyxTokenCRWN\";\r\n  }\r\n}\r\n\r\n// File: alloyx-smart-contracts-v2/contracts/alloyx/AlloyxTokenDURA.sol\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\ncontract AlloyxTokenDURA is ERC20, Ownable {\r\n  constructor() ERC20(\"Duralumin\", \"DURA\") {}\r\n\r\n  function mint(address _account, uint256 _amount) external onlyOwner returns (bool) {\r\n    _mint(_account, _amount);\r\n    return true;\r\n  }\r\n\r\n  function burn(address _account, uint256 _amount) external onlyOwner returns (bool) {\r\n    _burn(_account, _amount);\r\n    return true;\r\n  }\r\n\r\n  function contractName() external pure returns (string memory) {\r\n    return \"AlloyxTokenDura\";\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: alloyx-smart-contracts-v2/contracts/alloyx/IGoldfinchDelegacy.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Goldfinch Delegacy Interface\r\n * @notice Middle layer to communicate with goldfinch contracts\r\n * @author AlloyX\r\n */\r\ninterface IGoldfinchDelegacy {\r\n  /**\r\n   * @notice GoldFinch PoolToken Value in Value in term of USDC\r\n   */\r\n  function getGoldfinchDelegacyBalanceInUSDC() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Claim certain amount of reward token based on alloy silver token, the method will burn the silver token of\r\n   * the amount of message sender, and transfer reward token to message sender\r\n   * @param _rewardee the address of rewardee\r\n   * @param _amount the amount of silver tokens used to claim\r\n   * @param _totalSupply total claimable and claimed silver tokens of all stakeholders\r\n   * @param _percentageFee the earning fee for redeeming silver token in percentage in terms of GFI\r\n   */\r\n  function claimReward(\r\n    address _rewardee,\r\n    uint256 _amount,\r\n    uint256 _totalSupply,\r\n    uint256 _percentageFee\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Get gfi amount that should be transfered to the claimer for the amount of CRWN\r\n   * @param _amount the amount of silver tokens used to claim\r\n   * @param _totalSupply total claimable and claimed silver tokens of all stakeholders\r\n   * @param _percentageFee the earning fee for redeeming silver token in percentage in terms of GFI\r\n   */\r\n  function getRewardAmount(\r\n    uint256 _amount,\r\n    uint256 _totalSupply,\r\n    uint256 _percentageFee\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Purchase junior token through this delegacy to get pooltoken inside this delegacy\r\n   * @param _amount the amount of usdc to purchase by\r\n   * @param _poolAddress the pool address to buy from\r\n   * @param _tranche the tranch id\r\n   */\r\n  function purchaseJuniorToken(\r\n    uint256 _amount,\r\n    address _poolAddress,\r\n    uint256 _tranche\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Sell junior token through this delegacy to get repayments\r\n   * @param _tokenId the ID of token to sell\r\n   * @param _amount the amount to withdraw\r\n   * @param _poolAddress the pool address to withdraw from\r\n   * @param _percentageBronzeRepayment the repayment fee for bronze token in percentage\r\n   */\r\n  function sellJuniorToken(\r\n    uint256 _tokenId,\r\n    uint256 _amount,\r\n    address _poolAddress,\r\n    uint256 _percentageBronzeRepayment\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Purchase senior token through this delegacy to get FIDU inside this delegacy\r\n   * @param _amount the amount of USDC to purchase by\r\n   */\r\n  function purchaseSeniorTokens(uint256 _amount) external;\r\n\r\n  /**\r\n   * @notice sell senior token through delegacy to redeem fidu\r\n   * @param _amount the amount of fidu to sell\r\n   * @param _percentageBronzeRepayment the repayment fee for bronze token in percentage\r\n   */\r\n  function sellSeniorTokens(uint256 _amount, uint256 _percentageBronzeRepayment) external;\r\n\r\n  function getJuniorTokenValue(uint256 _tokenID) external view returns (uint256);\r\n\r\n  function isValidPool(uint256 _tokenID) external view returns (bool);\r\n  /**\r\n   * @notice Validates the Pooltoken to be deposited and get the USDC value of the token\r\n   * @param _tokenAddress the Pooltoken address\r\n   * @param _depositor the person to deposit\r\n   * @param _tokenID the ID of the Pooltoken\r\n   */\r\n  function validatesTokenToDepositAndGetPurchasePrice(\r\n    address _tokenAddress,\r\n    address _depositor,\r\n    uint256 _tokenID\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Pay USDC tokens to account\r\n   * @param _to the address to pay to\r\n   * @param _amount the amount to pay\r\n   */\r\n  function payUsdc(address _to, uint256 _amount) external;\r\n\r\n  /**\r\n   * @notice Approve certain amount token of certain address to some other account\r\n   * @param _account the address to approve\r\n   * @param _amount the amount to approve\r\n   * @param _tokenAddress the token address to approve\r\n   */\r\n  function approve(\r\n    address _tokenAddress,\r\n    address _account,\r\n    uint256 _amount\r\n  ) external;\r\n}\r\n\r\n// File: alloyx-smart-contracts-v2/contracts/alloyx/AlloyxVault.sol\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AlloyX Vault\r\n * @notice Initial vault for AlloyX. This vault holds loan tokens generated on Goldfinch\r\n * and emits AlloyTokens when a liquidity provider deposits supported stable coins.\r\n * @author AlloyX\r\n */\r\ncontract AlloyxVault is ERC721Holder, Ownable, Pausable {\r\n  using SafeERC20 for IERC20;\r\n  using SafeERC20 for AlloyxTokenDURA;\r\n  using SafeMath for uint256;\r\n  struct StakeInfo {\r\n    uint256 amount;\r\n    uint256 since;\r\n  }\r\n  bool private vaultStarted;\r\n  IERC20 private usdcCoin;\r\n  AlloyxTokenDURA private alloyxTokenDURA;\r\n  AlloyxTokenCRWN private alloyxTokenCRWN;\r\n  IGoldfinchDelegacy private goldfinchDelegacy;\r\n  mapping(address => bool) private stakeholderMap;\r\n  mapping(address => StakeInfo) private stakesMapping;\r\n  mapping(address => uint256) private pastRedeemableReward;\r\n  mapping(address => bool) whitelistedAddresses;\r\n  uint256 public percentageRewardPerYear = 2;\r\n  uint256 public percentageDURARedemption = 1;\r\n  uint256 public percentageDURARepayment = 2;\r\n  uint256 public percentageCRWNEarning = 10;\r\n  uint256 public redemptionFee = 0;\r\n  StakeInfo totalActiveStake;\r\n  uint256 totalPastRedeemableReward;\r\n\r\n  event DepositStable(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\r\n  event DepositNFT(address _tokenAddress, address _tokenSender, uint256 _tokenID);\r\n  event DepositAlloyx(address _tokenAddress, address _tokenSender, uint256 _tokenAmount);\r\n  event PurchaseSenior(uint256 amount);\r\n  event SellSenior(uint256 amount);\r\n  event PurchaseJunior(uint256 amount);\r\n  event SellJunior(uint256 amount);\r\n  event Mint(address _tokenReceiver, uint256 _tokenAmount);\r\n  event Burn(address _tokenReceiver, uint256 _tokenAmount);\r\n  event Reward(address _tokenReceiver, uint256 _tokenAmount);\r\n  event Claim(address _tokenReceiver, uint256 _tokenAmount);\r\n  event Stake(address _staker, uint256 _amount);\r\n  event Unstake(address _unstaker, uint256 _amount);\r\n  event SetField(string _field, uint256 _value);\r\n  event ChangeAddress(string _field, address _address);\r\n  event DepositNftForDura(address _tokenAddress, address _tokenSender, uint256 _tokenID);\r\n\r\n  constructor(\r\n    address _alloyxDURAAddress,\r\n    address _alloyxCRWNAddress,\r\n    address _usdcCoinAddress,\r\n    address _goldfinchDelegacy\r\n  ) {\r\n    alloyxTokenDURA = AlloyxTokenDURA(_alloyxDURAAddress);\r\n    alloyxTokenCRWN = AlloyxTokenCRWN(_alloyxCRWNAddress);\r\n    usdcCoin = IERC20(_usdcCoinAddress);\r\n    goldfinchDelegacy = IGoldfinchDelegacy(_goldfinchDelegacy);\r\n    vaultStarted = false;\r\n  }\r\n\r\n  /**\r\n   * @notice If vault is started\r\n   */\r\n  modifier whenVaultStarted() {\r\n    require(vaultStarted, \"Vault has not start accepting deposits\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice If vault is not started\r\n   */\r\n  modifier whenVaultNotStarted() {\r\n    require(!vaultStarted, \"Vault has already start accepting deposits\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice If address is whitelisted\r\n   * @param _address The address to verify.\r\n   */\r\n  modifier isWhitelisted(address _address) {\r\n    require(whitelistedAddresses[_address], \"You need to be whitelisted\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice If address is not whitelisted\r\n   * @param _address The address to verify.\r\n   */\r\n  modifier notWhitelisted(address _address) {\r\n    require(!whitelistedAddresses[_address], \"You are whitelisted\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Initialize by minting the alloy brown tokens to owner\r\n   */\r\n  function startVaultOperation() external onlyOwner whenVaultNotStarted returns (bool) {\r\n    uint256 totalBalanceInUSDC = getAlloyxDURATokenBalanceInUSDC();\r\n    require(totalBalanceInUSDC > 0, \"Vault must have positive value before start\");\r\n    alloyxTokenDURA.mint(\r\n      address(this),\r\n      totalBalanceInUSDC.mul(alloyMantissa()).div(usdcMantissa())\r\n    );\r\n    vaultStarted = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Pause all operations except migration of tokens\r\n   */\r\n  function pause() external onlyOwner whenNotPaused {\r\n    _pause();\r\n  }\r\n\r\n  /**\r\n   * @notice Unpause all operations\r\n   */\r\n  function unpause() external onlyOwner whenPaused {\r\n    _unpause();\r\n  }\r\n\r\n  /**\r\n   * @notice Add whitelist address\r\n   * @param _addressToWhitelist The address to whitelist.\r\n   */\r\n  function addWhitelistedUser(address _addressToWhitelist)\r\n    public\r\n    onlyOwner\r\n    notWhitelisted(_addressToWhitelist)\r\n  {\r\n    whitelistedAddresses[_addressToWhitelist] = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Remove whitelist address\r\n   * @param _addressToDeWhitelist The address to de-whitelist.\r\n   */\r\n  function removeWhitelistedUser(address _addressToDeWhitelist)\r\n    public\r\n    onlyOwner\r\n    isWhitelisted(_addressToDeWhitelist)\r\n  {\r\n    whitelistedAddresses[_addressToDeWhitelist] = false;\r\n  }\r\n\r\n  /**\r\n   * @notice Check whether user is whitelisted\r\n   * @param _whitelistedAddress The address to whitelist.\r\n   */\r\n  function isUserWhitelisted(address _whitelistedAddress) public view returns (bool) {\r\n    return whitelistedAddresses[_whitelistedAddress];\r\n  }\r\n\r\n  /**\r\n   * @notice Check if an address is a stakeholder.\r\n   * @param _address The address to verify.\r\n   * @return bool Whether the address is a stakeholder,\r\n   * and if so its position in the stakeholders array.\r\n   */\r\n  function isStakeholder(address _address) public view returns (bool) {\r\n    return stakeholderMap[_address];\r\n  }\r\n\r\n  /**\r\n   * @notice Add a stakeholder.\r\n   * @param _stakeholder The stakeholder to add.\r\n   */\r\n  function addStakeholder(address _stakeholder) internal {\r\n    stakeholderMap[_stakeholder] = true;\r\n  }\r\n\r\n  /**\r\n   * @notice Remove a stakeholder.\r\n   * @param _stakeholder The stakeholder to remove.\r\n   */\r\n  function removeStakeholder(address _stakeholder) internal {\r\n    stakeholderMap[_stakeholder] = false;\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieve the stake for a stakeholder.\r\n   * @param _stakeholder The stakeholder to retrieve the stake for.\r\n   * @return Stake The amount staked and the time since when it's staked.\r\n   */\r\n  function stakeOf(address _stakeholder) public view returns (StakeInfo memory) {\r\n    return stakesMapping[_stakeholder];\r\n  }\r\n\r\n  /**\r\n   * @notice A method for a stakeholder to reset the timestamp of the stake.\r\n   */\r\n  function resetStakeTimestamp() internal {\r\n    if (stakesMapping[msg.sender].amount == 0) addStakeholder(msg.sender);\r\n    addPastRedeemableReward(msg.sender, stakesMapping[msg.sender]);\r\n    stakesMapping[msg.sender] = StakeInfo(stakesMapping[msg.sender].amount, block.timestamp);\r\n  }\r\n\r\n  /**\r\n   * @notice Add stake for a staker\r\n   * @param _staker The person intending to stake\r\n   * @param _stake The size of the stake to be created.\r\n   */\r\n  function addStake(address _staker, uint256 _stake) internal {\r\n    if (stakesMapping[_staker].amount == 0) addStakeholder(_staker);\r\n    addPastRedeemableReward(_staker, stakesMapping[_staker]);\r\n    stakesMapping[_staker] = StakeInfo(stakesMapping[_staker].amount.add(_stake), block.timestamp);\r\n    updateTotalStakeInfoAndPastRedeemable(_stake, 0, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Remove stake for a staker\r\n   * @param _staker The person intending to remove stake\r\n   * @param _stake The size of the stake to be removed.\r\n   */\r\n  function removeStake(address _staker, uint256 _stake) internal {\r\n    require(stakeOf(_staker).amount >= _stake, \"User has insufficient dura coin staked\");\r\n    if (stakesMapping[_staker].amount == 0) addStakeholder(_staker);\r\n    addPastRedeemableReward(_staker, stakesMapping[_staker]);\r\n    stakesMapping[_staker] = StakeInfo(stakesMapping[_staker].amount.sub(_stake), block.timestamp);\r\n    updateTotalStakeInfoAndPastRedeemable(0, _stake, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Add the stake to past redeemable reward\r\n   * @param _stake the stake to be added into the reward\r\n   */\r\n  function addPastRedeemableReward(address _staker, StakeInfo storage _stake) internal {\r\n    uint256 additionalPastRedeemableReward = calculateRewardFromStake(_stake);\r\n    pastRedeemableReward[_staker] = pastRedeemableReward[_staker].add(\r\n      additionalPastRedeemableReward\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Stake more into the vault, which will cause the user's DURA token to transfer to vault\r\n   * @param _amount the amount the message sender intending to stake in\r\n   */\r\n  function stake(uint256 _amount) external whenNotPaused whenVaultStarted returns (bool) {\r\n    addStake(msg.sender, _amount);\r\n    alloyxTokenDURA.safeTransferFrom(msg.sender, address(this), _amount);\r\n    emit Stake(msg.sender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Unstake some from the vault, which will cause the vault to transfer DURA token back to message sender\r\n   * @param _amount the amount the message sender intending to unstake\r\n   */\r\n  function unstake(uint256 _amount) external whenNotPaused whenVaultStarted returns (bool) {\r\n    removeStake(msg.sender, _amount);\r\n    alloyxTokenDURA.safeTransfer(msg.sender, _amount);\r\n    emit Unstake(msg.sender, _amount);\r\n    return true;\r\n  }\r\n\r\n  function updateTotalStakeInfoAndPastRedeemable(\r\n    uint256 increaseInStake,\r\n    uint256 decreaseInStake,\r\n    uint256 increaseInPastRedeemable,\r\n    uint256 decreaseInPastRedeemable\r\n  ) internal {\r\n    uint256 additionalPastRedeemableReward = calculateRewardFromStake(totalActiveStake);\r\n    totalPastRedeemableReward = totalPastRedeemableReward.add(additionalPastRedeemableReward);\r\n    totalPastRedeemableReward = totalPastRedeemableReward.add(increaseInPastRedeemable).sub(\r\n      decreaseInPastRedeemable\r\n    );\r\n    totalActiveStake = StakeInfo(\r\n      totalActiveStake.amount.add(increaseInStake).sub(decreaseInStake),\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice A method for a stakeholder to clear a stake with some leftover reward\r\n   * @param _reward the leftover reward the staker owns\r\n   */\r\n  function resetStakeTimestampWithRewardLeft(uint256 _reward) internal {\r\n    resetStakeTimestamp();\r\n    adjustTotalStakeWithRewardLeft(_reward);\r\n    pastRedeemableReward[msg.sender] = _reward;\r\n  }\r\n\r\n  /**\r\n   * @notice Adjust total stake variables with leftover reward\r\n   * @param _reward the leftover reward the staker owns\r\n   */\r\n  function adjustTotalStakeWithRewardLeft(uint256 _reward) internal {\r\n    uint256 increaseInPastReward = 0;\r\n    uint256 decreaseInPastReward = 0;\r\n    if (pastRedeemableReward[msg.sender] >= _reward) {\r\n      decreaseInPastReward = pastRedeemableReward[msg.sender].sub(_reward);\r\n    } else {\r\n      increaseInPastReward = _reward.sub(pastRedeemableReward[msg.sender]);\r\n    }\r\n    updateTotalStakeInfoAndPastRedeemable(0, 0, increaseInPastReward, decreaseInPastReward);\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate reward from the stake info\r\n   * @param _stake the stake info to calculate reward based on\r\n   */\r\n  function calculateRewardFromStake(StakeInfo memory _stake) internal view returns (uint256) {\r\n    return\r\n      _stake\r\n        .amount\r\n        .mul(block.timestamp.sub(_stake.since))\r\n        .mul(percentageRewardPerYear)\r\n        .div(100)\r\n        .div(365 days);\r\n  }\r\n\r\n  /**\r\n   * @notice Claimable CRWN token amount of an address\r\n   * @param _receiver the address of receiver\r\n   */\r\n  function claimableCRWNToken(address _receiver) public view returns (uint256) {\r\n    StakeInfo memory stakeValue = stakeOf(_receiver);\r\n    return pastRedeemableReward[_receiver] + calculateRewardFromStake(stakeValue);\r\n  }\r\n\r\n  /**\r\n   * @notice Total claimable CRWN tokens of all stakeholders\r\n   */\r\n  function totalClaimableCRWNToken() public view returns (uint256) {\r\n    return calculateRewardFromStake(totalActiveStake) + totalPastRedeemableReward;\r\n  }\r\n\r\n  /**\r\n   * @notice Total claimable and claimed CRWN tokens of all stakeholders\r\n   */\r\n  function totalClaimableAndClaimedCRWNToken() public view returns (uint256) {\r\n    return totalClaimableCRWNToken().add(alloyxTokenCRWN.totalSupply());\r\n  }\r\n\r\n  /**\r\n   * @notice Claim all alloy CRWN tokens of the message sender, the method will mint the CRWN token of the claimable\r\n   * amount to message sender, and clear the past rewards to zero\r\n   */\r\n  function claimAllAlloyxCRWN() external whenNotPaused whenVaultStarted returns (bool) {\r\n    uint256 reward = claimableCRWNToken(msg.sender);\r\n    alloyxTokenCRWN.mint(msg.sender, reward);\r\n    resetStakeTimestampWithRewardLeft(0);\r\n    emit Claim(msg.sender, reward);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Claim certain amount of alloy CRWN tokens of the message sender, the method will mint the CRWN token of\r\n   * the claimable amount to message sender, and clear the past rewards to the remainder\r\n   * @param _amount the amount to claim\r\n   */\r\n  function claimAlloyxCRWN(uint256 _amount) external whenNotPaused whenVaultStarted returns (bool) {\r\n    uint256 allReward = claimableCRWNToken(msg.sender);\r\n    require(allReward >= _amount, \"User has claimed more than he's entitled\");\r\n    alloyxTokenCRWN.mint(msg.sender, _amount);\r\n    resetStakeTimestampWithRewardLeft(allReward.sub(_amount));\r\n    emit Claim(msg.sender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Claim certain amount of reward token based on alloy CRWN token, the method will burn the CRWN token of\r\n   * the amount of message sender, and transfer reward token to message sender\r\n   * @param _amount the amount to claim\r\n   */\r\n  function claimReward(uint256 _amount) external whenNotPaused whenVaultStarted returns (bool) {\r\n    require(\r\n      alloyxTokenCRWN.balanceOf(address(msg.sender)) >= _amount,\r\n      \"Balance of crown coin must be larger than the amount to claim\"\r\n    );\r\n    goldfinchDelegacy.claimReward(\r\n      msg.sender,\r\n      _amount,\r\n      totalClaimableAndClaimedCRWNToken(),\r\n      percentageCRWNEarning\r\n    );\r\n    alloyxTokenCRWN.burn(msg.sender, _amount);\r\n    emit Reward(msg.sender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Get reward token count if the amount of CRWN tokens are claimed\r\n   * @param _amount the amount to claim\r\n   */\r\n  function getRewardTokenCount(uint256 _amount) external view returns (uint256) {\r\n    return\r\n      goldfinchDelegacy.getRewardAmount(\r\n        _amount,\r\n        totalClaimableAndClaimedCRWNToken(),\r\n        percentageCRWNEarning\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @notice Request the delegacy to approve certain tokens on certain account for certain amount, it is most used for\r\n   * buying the goldfinch tokens, they need to be able to transfer usdc to them\r\n   * @param _tokenAddress the leftover reward the staker owns\r\n   * @param _account the account the delegacy going to approve\r\n   * @param _amount the amount the delegacy going to approve\r\n   */\r\n  function approveDelegacy(\r\n    address _tokenAddress,\r\n    address _account,\r\n    uint256 _amount\r\n  ) external onlyOwner {\r\n    goldfinchDelegacy.approve(_tokenAddress, _account, _amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Alloy DURA Token Value in terms of USDC\r\n   */\r\n  function getAlloyxDURATokenBalanceInUSDC() public view returns (uint256) {\r\n    uint256 totalValue = getUSDCBalance().add(\r\n      goldfinchDelegacy.getGoldfinchDelegacyBalanceInUSDC()\r\n    );\r\n    require(\r\n      totalValue > redemptionFee,\r\n      \"the value of vault is not larger than redemption fee, something went wrong\"\r\n    );\r\n    return\r\n      getUSDCBalance().add(goldfinchDelegacy.getGoldfinchDelegacyBalanceInUSDC()).sub(\r\n        redemptionFee\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @notice USDC Value in Vault\r\n   */\r\n  function getUSDCBalance() internal view returns (uint256) {\r\n    return usdcCoin.balanceOf(address(this));\r\n  }\r\n\r\n  /**\r\n   * @notice Convert Alloyx DURA to USDC amount\r\n   * @param _amount the amount of DURA token to convert to usdc\r\n   */\r\n  function alloyxDURAToUSDC(uint256 _amount) public view returns (uint256) {\r\n    uint256 alloyDURATotalSupply = alloyxTokenDURA.totalSupply();\r\n    uint256 totalVaultAlloyxDURAValueInUSDC = getAlloyxDURATokenBalanceInUSDC();\r\n    return _amount.mul(totalVaultAlloyxDURAValueInUSDC).div(alloyDURATotalSupply);\r\n  }\r\n\r\n  /**\r\n   * @notice Convert USDC Amount to Alloyx DURA\r\n   * @param _amount the amount of usdc to convert to DURA token\r\n   */\r\n  function usdcToAlloyxDURA(uint256 _amount) public view returns (uint256) {\r\n    uint256 alloyDURATotalSupply = alloyxTokenDURA.totalSupply();\r\n    uint256 totalVaultAlloyxDURAValueInUSDC = getAlloyxDURATokenBalanceInUSDC();\r\n    return _amount.mul(alloyDURATotalSupply).div(totalVaultAlloyxDURAValueInUSDC);\r\n  }\r\n\r\n  /**\r\n   * @notice Set percentageRewardPerYear which is the reward per year in percentage\r\n   * @param _percentageRewardPerYear the reward per year in percentage\r\n   */\r\n  function setPercentageRewardPerYear(uint256 _percentageRewardPerYear) external onlyOwner {\r\n    percentageRewardPerYear = _percentageRewardPerYear;\r\n    emit SetField(\"percentageRewardPerYear\", _percentageRewardPerYear);\r\n  }\r\n\r\n  /**\r\n   * @notice Set percentageDURARedemption which is the redemption fee for DURA token in percentage\r\n   * @param _percentageDURARedemption the redemption fee for DURA token in percentage\r\n   */\r\n  function setPercentageDURARedemption(uint256 _percentageDURARedemption) external onlyOwner {\r\n    percentageDURARedemption = _percentageDURARedemption;\r\n    emit SetField(\"percentageDURARedemption\", _percentageDURARedemption);\r\n  }\r\n\r\n  /**\r\n   * @notice Set percentageDURARepayment which is the repayment fee for DURA token in percentage\r\n   * @param _percentageDURARepayment the repayment fee for DURA token in percentage\r\n   */\r\n  function setPercentageDURARepayment(uint256 _percentageDURARepayment) external onlyOwner {\r\n    percentageDURARepayment = _percentageDURARepayment;\r\n    emit SetField(\"percentageDURARepayment\", _percentageDURARepayment);\r\n  }\r\n\r\n  /**\r\n   * @notice Set percentageCRWNEarning which is the earning fee for redeeming CRWN token in percentage in terms of gfi\r\n   * @param _percentageCRWNEarning the earning fee for redeeming CRWN token in percentage in terms of gfi\r\n   */\r\n  function setPercentageCRWNEarning(uint256 _percentageCRWNEarning) external onlyOwner {\r\n    percentageCRWNEarning = _percentageCRWNEarning;\r\n    emit SetField(\"percentageCRWNEarning\", _percentageCRWNEarning);\r\n  }\r\n\r\n  /**\r\n   * @notice Alloy token with 18 decimals\r\n   */\r\n  function alloyMantissa() internal pure returns (uint256) {\r\n    return uint256(10)**uint256(18);\r\n  }\r\n\r\n  /**\r\n   * @notice USDC mantissa with 6 decimals\r\n   */\r\n  function usdcMantissa() internal pure returns (uint256) {\r\n    return uint256(10)**uint256(6);\r\n  }\r\n\r\n  /**\r\n   * @notice Change DURA token address\r\n   * @param _alloyxAddress the address to change to\r\n   */\r\n  function changeAlloyxDURAAddress(address _alloyxAddress) external onlyOwner {\r\n    alloyxTokenDURA = AlloyxTokenDURA(_alloyxAddress);\r\n    emit ChangeAddress(\"alloyxTokenDURA\", _alloyxAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice Change CRWN token address\r\n   * @param _alloyxAddress the address to change to\r\n   */\r\n  function changeAlloyxCRWNAddress(address _alloyxAddress) external onlyOwner {\r\n    alloyxTokenCRWN = AlloyxTokenCRWN(_alloyxAddress);\r\n    emit ChangeAddress(\"alloyxTokenCRWN\", _alloyxAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice Change Goldfinch delegacy address\r\n   * @param _goldfinchDelegacy the address to change to\r\n   */\r\n  function changeGoldfinchDelegacyAddress(address _goldfinchDelegacy) external onlyOwner {\r\n    goldfinchDelegacy = IGoldfinchDelegacy(_goldfinchDelegacy);\r\n    emit ChangeAddress(\"goldfinchDelegacy\", _goldfinchDelegacy);\r\n  }\r\n\r\n  /**\r\n   * @notice Change USDC address\r\n   * @param _usdcAddress the address to change to\r\n   */\r\n  function changeUSDCAddress(address _usdcAddress) external onlyOwner {\r\n    usdcCoin = IERC20(_usdcAddress);\r\n    emit ChangeAddress(\"usdcCoin\", _usdcAddress);\r\n  }\r\n\r\n  /**\r\n   * @notice An Alloy token holder can deposit their tokens and redeem them for USDC\r\n   * @param _tokenAmount Number of Alloy Tokens\r\n   */\r\n  function depositAlloyxDURATokens(uint256 _tokenAmount)\r\n    external\r\n    whenNotPaused\r\n    whenVaultStarted\r\n    isWhitelisted(msg.sender)\r\n    returns (bool)\r\n  {\r\n    require(\r\n      alloyxTokenDURA.balanceOf(msg.sender) >= _tokenAmount,\r\n      \"User has insufficient alloyx coin.\"\r\n    );\r\n    require(\r\n      alloyxTokenDURA.allowance(msg.sender, address(this)) >= _tokenAmount,\r\n      \"User has not approved the vault for sufficient alloyx coin\"\r\n    );\r\n    uint256 amountToWithdraw = alloyxDURAToUSDC(_tokenAmount);\r\n    uint256 withdrawalFee = amountToWithdraw.mul(percentageDURARedemption).div(100);\r\n    require(amountToWithdraw > 0, \"The amount of stable coin to get is not larger than 0\");\r\n    require(\r\n      usdcCoin.balanceOf(address(this)) >= amountToWithdraw,\r\n      \"The vault does not have sufficient stable coin\"\r\n    );\r\n    alloyxTokenDURA.burn(msg.sender, _tokenAmount);\r\n    usdcCoin.safeTransfer(msg.sender, amountToWithdraw.sub(withdrawalFee));\r\n    redemptionFee = redemptionFee.add(withdrawalFee);\r\n    emit DepositAlloyx(address(alloyxTokenDURA), msg.sender, _tokenAmount);\r\n    emit Burn(msg.sender, _tokenAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\r\n   * @param _tokenAmount Number of stable coin\r\n   */\r\n  function depositUSDCCoin(uint256 _tokenAmount)\r\n    external\r\n    whenNotPaused\r\n    whenVaultStarted\r\n    isWhitelisted(msg.sender)\r\n    returns (bool)\r\n  {\r\n    require(usdcCoin.balanceOf(msg.sender) >= _tokenAmount, \"User has insufficient stable coin\");\r\n    require(\r\n      usdcCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\r\n      \"User has not approved the vault for sufficient stable coin\"\r\n    );\r\n    uint256 amountToMint = usdcToAlloyxDURA(_tokenAmount);\r\n    require(amountToMint > 0, \"The amount of alloyx DURA coin to get is not larger than 0\");\r\n    usdcCoin.safeTransferFrom(msg.sender, address(goldfinchDelegacy), _tokenAmount);\r\n    alloyxTokenDURA.mint(msg.sender, amountToMint);\r\n    emit DepositStable(address(usdcCoin), msg.sender, amountToMint);\r\n    emit Mint(msg.sender, amountToMint);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice A Liquidity Provider can deposit supported stable coins for Alloy Tokens\r\n   * @param _tokenAmount Number of stable coin\r\n   */\r\n  function depositUSDCCoinWithStake(uint256 _tokenAmount)\r\n    external\r\n    whenNotPaused\r\n    whenVaultStarted\r\n    isWhitelisted(msg.sender)\r\n    returns (bool)\r\n  {\r\n    require(usdcCoin.balanceOf(msg.sender) >= _tokenAmount, \"User has insufficient stable coin\");\r\n    require(\r\n      usdcCoin.allowance(msg.sender, address(this)) >= _tokenAmount,\r\n      \"User has not approved the vault for sufficient stable coin\"\r\n    );\r\n    uint256 amountToMint = usdcToAlloyxDURA(_tokenAmount);\r\n    require(amountToMint > 0, \"The amount of alloyx DURA coin to get is not larger than 0\");\r\n    usdcCoin.safeTransferFrom(msg.sender, address(this), _tokenAmount);\r\n    alloyxTokenDURA.mint(address(this), amountToMint);\r\n    addStake(msg.sender, amountToMint);\r\n    emit DepositStable(address(usdcCoin), msg.sender, amountToMint);\r\n    emit Mint(address(this), amountToMint);\r\n    emit Stake(msg.sender, amountToMint);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice A Junior token holder can deposit their NFT for stable coin\r\n   * @param _tokenAddress NFT Address\r\n   * @param _tokenID NFT ID\r\n   */\r\n  function depositNFTToken(address _tokenAddress, uint256 _tokenID)\r\n    external\r\n    whenNotPaused\r\n    whenVaultStarted\r\n    isWhitelisted(msg.sender)\r\n    returns (bool)\r\n  {\r\n    uint256 purchasePrice = goldfinchDelegacy.validatesTokenToDepositAndGetPurchasePrice(\r\n      _tokenAddress,\r\n      msg.sender,\r\n      _tokenID\r\n    );\r\n    IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(goldfinchDelegacy), _tokenID);\r\n    goldfinchDelegacy.payUsdc(msg.sender, purchasePrice);\r\n    emit DepositNFT(_tokenAddress, msg.sender, _tokenID);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice A Junior token holder can deposit their NFT for dura\r\n   * @param _tokenAddress NFT Address\r\n   * @param _tokenID NFT ID\r\n   */\r\n  function depositNFTTokenForDura(address _tokenAddress, uint256 _tokenID)\r\n    external\r\n    whenNotPaused\r\n    whenVaultStarted\r\n    isWhitelisted(msg.sender)\r\n    returns (bool)\r\n  {\r\n    require(goldfinchDelegacy.isValidPool(_tokenID) == true, \"Not a valid pool\");\r\n    require(IERC721(_tokenAddress).ownerOf(_tokenID) == msg.sender, \"User does not own this token\");\r\n\r\n    uint256 purchasePrice = goldfinchDelegacy.getJuniorTokenValue(_tokenID);\r\n    uint256 amountToMint = usdcToAlloyxDURA(purchasePrice);\r\n    require(amountToMint > 0, \"The amount of alloyx DURA coin to get is not larger than 0\");\r\n    IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(goldfinchDelegacy), _tokenID);\r\n    alloyxTokenDURA.mint(msg.sender, amountToMint);\r\n    emit Mint(msg.sender, amountToMint);\r\n    emit DepositNftForDura(_tokenAddress, msg.sender, _tokenID);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice A Junior token holder can deposit their NFT for dura with stake\r\n   * @param _tokenAddress NFT Address\r\n   * @param _tokenID NFT ID\r\n   */\r\n  function depositNFTTokenForDuraWithStake(address _tokenAddress, uint256 _tokenID)\r\n    external\r\n    whenNotPaused\r\n    whenVaultStarted\r\n    isWhitelisted(msg.sender)\r\n    returns (bool)\r\n  {\r\n    require(goldfinchDelegacy.isValidPool(_tokenID) == true, \"Not a valid pool\");\r\n    require(IERC721(_tokenAddress).ownerOf(_tokenID) == msg.sender, \"User does not own this token\");\r\n \r\n    uint256 purchasePrice = goldfinchDelegacy.getJuniorTokenValue(_tokenID);\r\n    uint256 amountToMint = usdcToAlloyxDURA(purchasePrice);\r\n    require(amountToMint > 0, \"The amount of alloyx DURA coin to get is not larger than 0\");\r\n    IERC721(_tokenAddress).safeTransferFrom(msg.sender, address(goldfinchDelegacy), _tokenID);\r\n    alloyxTokenDURA.mint(address(this), amountToMint);\r\n    addStake(msg.sender, amountToMint);\r\n    emit Mint(address(this), amountToMint);\r\n    emit DepositNftForDura(_tokenAddress, msg.sender, _tokenID);\r\n    emit Stake(msg.sender, amountToMint);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Purchase junior token through delegacy to get pooltoken inside the delegacy\r\n   * @param _amount the amount of usdc to purchase by\r\n   * @param _poolAddress the pool address to buy from\r\n   * @param _tranche the tranch id\r\n   */\r\n  function purchaseJuniorToken(\r\n    uint256 _amount,\r\n    address _poolAddress,\r\n    uint256 _tranche\r\n  ) external onlyOwner {\r\n    require(_amount > 0, \"Must deposit more than zero\");\r\n    goldfinchDelegacy.purchaseJuniorToken(_amount, _poolAddress, _tranche);\r\n    emit PurchaseJunior(_amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Sell junior token through delegacy to get repayments\r\n   * @param _tokenId the ID of token to sell\r\n   * @param _amount the amount to withdraw\r\n   * @param _poolAddress the pool address to withdraw from\r\n   */\r\n  function sellJuniorToken(\r\n    uint256 _tokenId,\r\n    uint256 _amount,\r\n    address _poolAddress\r\n  ) external onlyOwner {\r\n    require(_amount > 0, \"Must sell more than zero\");\r\n    goldfinchDelegacy.sellJuniorToken(_tokenId, _amount, _poolAddress, percentageDURARepayment);\r\n    emit SellSenior(_amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Purchase senior token through delegacy to get fidu inside the delegacy\r\n   * @param _amount the amount of usdc to purchase by\r\n   */\r\n  function purchaseSeniorTokens(uint256 _amount) external onlyOwner {\r\n    require(_amount > 0, \"Must deposit more than zero\");\r\n    goldfinchDelegacy.purchaseSeniorTokens(_amount);\r\n    emit PurchaseSenior(_amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Sell senior token through delegacy to redeem fidu\r\n   * @param _amount the amount of fidu to sell\r\n   */\r\n  function sellSeniorTokens(uint256 _amount) external onlyOwner {\r\n    require(_amount > 0, \"Must sell more than zero\");\r\n    goldfinchDelegacy.sellSeniorTokens(_amount, percentageDURARepayment);\r\n    emit SellSenior(_amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Migrate certain ERC20 to an address\r\n   * @param _tokenAddress the token address to migrate\r\n   * @param _to the address to transfer tokens to\r\n   */\r\n  function migrateERC20(address _tokenAddress, address _to) external onlyOwner whenPaused {\r\n    uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\r\n    IERC20(_tokenAddress).safeTransfer(_to, balance);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer redemption fee to some other address\r\n   * @param _to the address to transfer to\r\n   */\r\n  function transferRedemptionFee(address _to) external onlyOwner whenNotPaused {\r\n    usdcCoin.safeTransfer(_to, redemptionFee);\r\n    redemptionFee = 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer the ownership of alloy CRWN and DURA token contract to some other address\r\n   * @param _to the address to transfer ownership to\r\n   */\r\n  function transferAlloyxOwnership(address _to) external onlyOwner whenPaused {\r\n    alloyxTokenDURA.transferOwnership(_to);\r\n    alloyxTokenCRWN.transferOwnership(_to);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxDURAAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alloyxCRWNAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcCoinAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_goldfinchDelegacy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_field\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ChangeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAlloyx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"DepositNftForDura\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositStable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseJunior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PurchaseSenior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellJunior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellSenior\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_field\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetField\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_unstaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToWhitelist\",\"type\":\"address\"}],\"name\":\"addWhitelistedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"alloyxDURAToUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveDelegacy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxCRWNAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alloyxAddress\",\"type\":\"address\"}],\"name\":\"changeAlloyxDURAAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_goldfinchDelegacy\",\"type\":\"address\"}],\"name\":\"changeGoldfinchDelegacyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"}],\"name\":\"changeUSDCAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllAlloyxCRWN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimAlloyxCRWN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimableCRWNToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositAlloyxDURATokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"depositNFTToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"depositNFTTokenForDura\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"depositNFTTokenForDuraWithStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDCCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"depositUSDCCoinWithStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAlloyxDURATokenBalanceInUSDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getRewardTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistedAddress\",\"type\":\"address\"}],\"name\":\"isUserWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageCRWNEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageDURARedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageDURARepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageRewardPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tranche\",\"type\":\"uint256\"}],\"name\":\"purchaseJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressToDeWhitelist\",\"type\":\"address\"}],\"name\":\"removeWhitelistedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"sellJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellSeniorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageCRWNEarning\",\"type\":\"uint256\"}],\"name\":\"setPercentageCRWNEarning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageDURARedemption\",\"type\":\"uint256\"}],\"name\":\"setPercentageDURARedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageDURARepayment\",\"type\":\"uint256\"}],\"name\":\"setPercentageDURARepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageRewardPerYear\",\"type\":\"uint256\"}],\"name\":\"setPercentageRewardPerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"}],\"internalType\":\"struct AlloyxVault.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVaultOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimableAndClaimedCRWNToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimableCRWNToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferAlloyxOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdcToAlloyxDURA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlloyxVault", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d737babfde172caab0e583c1f71ff8065d8e02e60000000000000000000000001e6b127734ec66a729b366ce8b7184eb18fa6e20000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000f9fcbf03534b42275bd6fead1a7f0ff86e4777d9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2fd7d728c36020df21c759925271127b2f2b631730e5e1f47d15368070331b54"}]}