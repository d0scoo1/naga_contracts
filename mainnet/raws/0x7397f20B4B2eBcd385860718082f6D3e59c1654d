{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SolidarityMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport './SolidarityMetadataBase.sol';\\r\\n\\r\\n/**\\r\\n * @title Solidarity Metadata wrapper contract\\r\\n */\\r\\ncontract SolidarityMetadata is SolidarityMetadataBase {\\r\\n    constructor()\\r\\n        SolidarityMetadataBase(\\r\\n            'ipfs://',\\r\\n            'QmT6Em9Dt7RzritFvrvW5CVwvZgp6GE94RxAsnGCuShyiz', // Valeriia Unfurling Final V1.0.0\\r\\n            'QmXWdy9J7fh3cYDTdpYrLGxa9KXTHLMdNF2729PBmom2f4' // Valeriia Final V1.0.0\\r\\n        )\\r\\n    {\\r\\n        // Implementation version: 1\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SolidarityMetadataBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n// NFTC Open Source Libraries See: https://github.com/NFTCulture/nftc-open-contracts\\r\\nimport {OnChainEncoding} from '@nftculture/nftc-open-contracts/contracts/utility/onchain/OnChainEncoding.sol';\\r\\n\\r\\n// OZ Libraries\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\n/**\\r\\n * @title SolidarityMetadataBase\\r\\n * @author @NiftyMike, NFT Culture\\r\\n * @dev Companion contract to SolidarityNFTProjectForUkraine.\\r\\n *\\r\\n * Responsible for returning on-chain metadata. Built as a separate contract to allow\\r\\n * for corrections or improvements to the metadata.\\r\\n */\\r\\ncontract SolidarityMetadataBase is Ownable {\\r\\n    using OnChainEncoding for uint8;\\r\\n\\r\\n    uint256 public version;\\r\\n\\r\\n    uint256 private constant TOKEN_TYPE_ONE = 1;\\r\\n    uint256 private constant TOKEN_TYPE_TWO = 2;\\r\\n\\r\\n    string private baseURI;\\r\\n    string private tokenTypeOneURIPart;\\r\\n    string private tokenTypeTwoURIPart;\\r\\n\\r\\n    constructor(\\r\\n        string memory __baseURI,\\r\\n        string memory __tokenTypeOneURIPart,\\r\\n        string memory __tokenTypeTwoURIPart\\r\\n    ) {\\r\\n        baseURI = __baseURI;\\r\\n        tokenTypeOneURIPart = __tokenTypeOneURIPart;\\r\\n        tokenTypeTwoURIPart = __tokenTypeTwoURIPart;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory __baseUri) external onlyOwner {\\r\\n        baseURI = __baseUri;\\r\\n    }\\r\\n\\r\\n    function setTokenTypeURIs(\\r\\n        string memory __tokenTypeOneURIPart,\\r\\n        string memory __tokenTypeTwoURIPart\\r\\n    ) external onlyOwner {\\r\\n        tokenTypeOneURIPart = __tokenTypeOneURIPart;\\r\\n        tokenTypeTwoURIPart = __tokenTypeTwoURIPart;\\r\\n    }\\r\\n\\r\\n    function getAsString(uint256 tokenId, uint256 tokenType) external view returns (string memory) {\\r\\n        require(tokenType == TOKEN_TYPE_ONE || tokenType == TOKEN_TYPE_TWO, 'Invalid token type');\\r\\n\\r\\n        if (tokenType == TOKEN_TYPE_ONE) {\\r\\n            return _videoMetadataString(tokenId);\\r\\n        } else if (tokenType == TOKEN_TYPE_TWO) {\\r\\n            return _photoMetadataString(tokenId);\\r\\n        }\\r\\n\\r\\n        // unreachable.\\r\\n        return '';\\r\\n    }\\r\\n\\r\\n    function getAsEncodedString(uint256 tokenId, uint256 tokenType)\\r\\n        external\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(tokenType == TOKEN_TYPE_ONE || tokenType == TOKEN_TYPE_TWO, 'Invalid token type');\\r\\n\\r\\n        if (tokenType == TOKEN_TYPE_ONE) {\\r\\n            return _encode(_videoMetadataString(tokenId));\\r\\n        } else if (tokenType == TOKEN_TYPE_TWO) {\\r\\n            return _encode(_photoMetadataString(tokenId));\\r\\n        }\\r\\n\\r\\n        // unreachable.\\r\\n        return '';\\r\\n    }\\r\\n\\r\\n    function _encode(string memory stringToEncode) internal pure returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    'data:application/json;base64,',\\r\\n                    OnChainEncoding.encode(bytes(stringToEncode))\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _photoMetadataString(uint256 tokenId) internal view returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"name\\\": \\\"Valeriia #',\\r\\n                    OnChainEncoding.toString(tokenId),\\r\\n                    '\\\", \\\"description\\\": \\\"This image was taken in March 2022 in Lviv, Ukraine.  It represents Valeriia, a 5-year-old refugee fleeing the war and it was on the cover of Time Magazine.\\\", \\\"image\\\": \\\"',\\r\\n                    _photoAsset(),\\r\\n                    '\\\",\\\"attributes\\\": [',\\r\\n                    _photoAttributes(),\\r\\n                    '], \\\"external_url\\\": \\\"https://jr-art.io/\\\"}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _videoMetadataString(uint256 tokenId) internal view returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"name\\\": \\\"Valeriia Unfurling #',\\r\\n                    OnChainEncoding.toString(tokenId),\\r\\n                    '\\\", \\\"description\\\": \\\"This video was taken in March 2022 in Lviv, Ukraine.  It represents Valeriia, a 5-year-old refugee fleeing the war and it was featured on Time.com.\\\", \\\"image\\\": \\\"',\\r\\n                    _videoAsset(),\\r\\n                    '\\\",\\\"attributes\\\": [',\\r\\n                    _videoAttributes(),\\r\\n                    '], \\\"external_url\\\": \\\"https://jr-art.io/\\\"}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _photoAttributes() internal pure virtual returns (string memory) {\\r\\n        return\\r\\n            '{\\\"trait_type\\\": \\\"ARTIST\\\", \\\"value\\\": \\\"JR\\\"}, {\\\"trait_type\\\": \\\"FORMAT\\\", \\\"value\\\": \\\"Photo\\\"}, {\\\"trait_type\\\": \\\"LOCATION\\\", \\\"value\\\": \\\"Lviv, Ukraine\\\"}, {\\\"trait_type\\\": \\\"YEAR\\\", \\\"value\\\": \\\"2022\\\"}';\\r\\n    }\\r\\n\\r\\n    function _photoAsset() internal view virtual returns (bytes memory) {\\r\\n        require(bytes(baseURI).length > 0, 'Base unset');\\r\\n        require(bytes(tokenTypeTwoURIPart).length > 0, 'Type2 unset');\\r\\n\\r\\n        return abi.encodePacked(baseURI, tokenTypeTwoURIPart);\\r\\n    }\\r\\n\\r\\n    function _videoAttributes() internal pure virtual returns (string memory) {\\r\\n        return\\r\\n            '{\\\"trait_type\\\": \\\"ARTIST\\\", \\\"value\\\": \\\"JR\\\"}, {\\\"trait_type\\\": \\\"FORMAT\\\", \\\"value\\\": \\\"Video\\\"}, {\\\"trait_type\\\": \\\"LOCATION\\\", \\\"value\\\": \\\"Lviv, Ukraine\\\"}, {\\\"trait_type\\\": \\\"YEAR\\\", \\\"value\\\": \\\"2022\\\"}';\\r\\n    }\\r\\n\\r\\n    function _videoAsset() internal view virtual returns (bytes memory) {\\r\\n        require(bytes(baseURI).length > 0, 'Base unset');\\r\\n        require(bytes(tokenTypeOneURIPart).length > 0, 'Type1 unset');\\r\\n\\r\\n        return abi.encodePacked(baseURI, tokenTypeOneURIPart);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@nftculture/nftc-open-contracts/contracts/utility/onchain/OnChainEncoding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/**\\r\\n * @title OnChainEncoding\\r\\n * @author @NiftyMike, NFT Culture\\r\\n * @dev Credit to the Anonymice Library.\\r\\n * See https://etherscan.io/address/0xbad6186e92002e312078b5a1dafd5ddf63d3f731#code\\r\\n *\\r\\n * Not sure who originated this code, but I am re-using many parts of the Anonymice work, appreciate them \\r\\n * releasing it under the MIT license.\\r\\n *\\r\\n * If you know the original source of this code, please visit us on discord, and I will add a credit here.\\r\\n */\\r\\nlibrary OnChainEncoding {\\r\\n    string internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Encode data into a string.\\r\\n     */\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n\\r\\n                // read 3 bytes\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore(\\r\\n                    resultPtr,\\r\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                )\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"getAsEncodedString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"getAsString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__baseUri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__tokenTypeOneURIPart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__tokenTypeTwoURIPart\",\"type\":\"string\"}],\"name\":\"setTokenTypeURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SolidarityMetadata", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}