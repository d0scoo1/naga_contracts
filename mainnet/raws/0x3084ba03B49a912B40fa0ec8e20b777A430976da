{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/CurveInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.11;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICurveMetaPool is IERC20{\\n    function add_liquidity(uint256[2] calldata _amounts, uint256 _min_mint_amount) external;\\n    function remove_liquidity(uint256 _burning_amount, uint256[2] calldata _min_amounts) external;\\n    function remove_liquidity_imbalance(uint256[2] calldata _amounts, uint256 _maxBurningAmount) external;\\n}\\n\\ninterface ICurvePool {\\n    function add_liquidity(uint256[3] calldata _amounts, uint256 _min_mint_amount) external;\\n    function remove_liquidity(uint256 _burning_amount, uint256[3] calldata _min_amounts) external;\\n    function remove_liquidity_imbalance(uint256[3] calldata _amounts, uint256 _maxBurningAmount) external;\\n    function remove_liquidity_one_coin(uint256 _3crv_token_amount, int128 i, uint256 _min_amount) external;\\n    function calc_token_amount(uint256[3] calldata _amounts, bool _deposit) external view returns(uint256);\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 _i) external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/external/VotiumInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.13;\\n\\ninterface IVotiumMerkleStash {\\n    function claim(\\n        address token,\\n        uint256 index,\\n        address account,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/prm/PegRecoveryModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ICurveMetaPool, ICurvePool } from \\\"../external/CurveInterfaces.sol\\\";\\nimport { IVotiumMerkleStash } from \\\"../external/VotiumInterfaces.sol\\\";\\nimport { VotiumShare } from \\\"./VotiumShare.sol\\\";\\n\\n// usdm3crv 0x5B3b5DF2BF2B6543f78e053bD91C4Bdd820929f1\\n// 3crv 0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7\\n// zap tx https://etherscan.io/tx/0x4a1c6582675b2582849b3947c63f53e209f320225aa501d0347bb8bae278d365\\n//BASE_COINS: constant(address[3]) = [\\n//    0x6B175474E89094C44Da98b954EedeAC495271d0F,  # DAI\\n//    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,  # USDC\\n//    0xdAC17F958D2ee523a2206206994597C13D831ec7,  # USDT\\n//]\\n\\ncontract PegRecoveryModule is VotiumShare{\\n    using SafeERC20 for IERC20;\\n\\n    struct BaseCoins {\\n        uint256 dai;\\n        uint256 usdc;\\n        uint256 usdt;\\n    }\\n\\n    // token addresses\\n    IERC20 public immutable usdm; // 0x31d4Eb09a216e181eC8a43ce79226A487D6F0BA9\\n\\n    IERC20 public immutable crv3; // 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490\\n\\n    IERC20 public immutable dai; // 0x6B175474E89094C44Da98b954EedeAC495271d0F\\n\\n    IERC20 public immutable usdc; // 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n\\n    IERC20 public immutable usdt; // 0xdAC17F958D2ee523a2206206994597C13D831ec7\\n\\n    // curve addresses\\n    ICurveMetaPool public immutable usdm3crv; // 0x5B3b5DF2BF2B6543f78e053bD91C4Bdd820929f1\\n\\n    ICurvePool public immutable crv3pool; // 0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7\\n\\n    // usdm deposit info\\n\\n    uint256 public totalUsdm;\\n\\n    uint256 public usdmProvided;\\n\\n    mapping(address => uint256) public usdmShare;\\n\\n    // 3crv deposit info\\n    uint256 public totalCrv3;\\n\\n    uint256 public crv3Provided;\\n\\n    mapping(address => uint256) public crv3Share;\\n\\n    // reward info\\n\\n    constructor(\\n        IERC20 _usdm,\\n        IERC20 _crv3,\\n        IERC20 _dai,\\n        IERC20 _usdc, \\n        IERC20 _usdt,\\n        ICurveMetaPool _usdm3crv,\\n        ICurvePool _crv3pool\\n    ) VotiumShare(){\\n        usdm = _usdm;\\n        crv3 = _crv3;\\n        dai = _dai;\\n        usdc = _usdc;\\n        usdt = _usdt;\\n        usdm3crv = _usdm3crv;\\n        crv3pool = _crv3pool;\\n    }\\n\\n    // 3crv section\\n\\n    function deposit3Crv(\\n        uint256 _deposit\\n    ) external updateReward(msg.sender) {\\n        totalCrv3 += _deposit;\\n        crv3Share[msg.sender] += _deposit;\\n        crv3.transferFrom(msg.sender, address(this), _deposit);\\n    }\\n\\n    function withdraw3Crv(\\n        uint256 _withdraw\\n    ) external updateReward(msg.sender) {\\n        totalCrv3 -= _withdraw;\\n        crv3Share[msg.sender] -= _withdraw;\\n        crv3.transfer(msg.sender, _withdraw);\\n    }\\n\\n    function depositStable(\\n        uint256[3] calldata _deposit,\\n        uint256 _min3crv\\n    ) external updateReward(msg.sender){\\n        // convert deposit to 3crv\\n        if(_deposit[0] > 0) {\\n            dai.safeTransferFrom(msg.sender, address(this), _deposit[0]);\\n            dai.safeApprove(address(crv3pool), _deposit[0]);\\n        }\\n        if(_deposit[1] > 0) {\\n            usdc.safeTransferFrom(msg.sender, address(this), _deposit[1]);\\n            usdc.safeApprove(address(crv3pool), _deposit[1]);\\n        }\\n        if(_deposit[2] > 0) {\\n            usdt.safeTransferFrom(msg.sender, address(this), _deposit[2]);\\n            usdt.safeApprove(address(crv3pool), _deposit[2]);\\n        }\\n\\n        // add liquidity to 3pool right away and hold as 3crv\\n        uint256 balance = crv3.balanceOf(address(this));\\n        crv3pool.add_liquidity(\\n            _deposit,\\n            _min3crv\\n        );\\n        // **vague name to use only 1 variable\\n        balance = crv3.balanceOf(address(this)) - balance;\\n\\n        // update storage variables\\n        totalCrv3 += balance;\\n        crv3Share[msg.sender] += balance;\\n    }\\n\\n    function withdrawStable(\\n        uint256[3] calldata _withdraw,\\n        uint256 _3crv_max\\n    ) external updateReward(msg.sender) {\\n        // update storage variables\\n        uint256 balance = crv3.balanceOf(address(this));\\n        crv3pool.remove_liquidity_imbalance(\\n            _withdraw,\\n            _3crv_max\\n        );\\n        balance = balance - crv3.balanceOf(address(this));\\n        totalCrv3 -= balance;\\n        crv3Share[msg.sender] -= balance;\\n        if(_withdraw[0] > 0){\\n            dai.safeTransfer(msg.sender, _withdraw[0]);\\n        }\\n        if(_withdraw[1] > 0){\\n            usdc.safeTransfer(msg.sender, _withdraw[1]);\\n        }\\n        if(_withdraw[2] > 0){\\n            usdt.safeTransfer(msg.sender, _withdraw[2]);\\n        }\\n    }\\n\\n    // usdm section\\n    function depositUsdm(\\n        uint256 _usdm\\n    ) external updateReward(msg.sender) {\\n        usdmShare[msg.sender] += _usdm;\\n        totalUsdm += _usdm;\\n        usdm.transferFrom(msg.sender, address(this), _usdm);\\n    }\\n\\n    function withdrawUsdm(\\n        uint256 _usdm\\n    ) external updateReward(msg.sender){\\n        usdmShare[msg.sender] -= _usdm;\\n        totalUsdm -= _usdm;\\n        usdm.transfer(msg.sender, _usdm);\\n    }\\n\\n    // peg recovery section\\n    function pairLiquidity(uint256 _amount, uint256 _min_liquidity) external onlyOwner {\\n        uint256[2] memory amounts = [_amount, _amount];\\n        usdm.safeApprove(address(usdm3crv), _amount);\\n        crv3.safeApprove(address(usdm3crv), _amount);\\n        usdmProvided += _amount;\\n        crv3Provided += _amount;\\n        usdm3crv.add_liquidity(amounts, _min_liquidity);\\n    }\\n\\n    function removeLiquidity(uint256 _amount, uint256 _max_burn) external onlyOwner {\\n        uint256[2] memory amounts = [_amount, _amount];\\n        usdmProvided -= _amount;\\n        crv3Provided -= _amount;\\n        usdm3crv.remove_liquidity_imbalance(amounts, _max_burn);\\n    }\\n\\n    function sweepTokens() external onlyOwner {\\n        uint256 usdmLeftover = usdm.balanceOf(address(this)) - (totalUsdm - usdmProvided);\\n        usdm.transfer(msg.sender, usdmLeftover);\\n        uint256 crv3Leftover = crv3.balanceOf(address(this)) - (totalCrv3 - crv3Provided);\\n        crv3.transfer(msg.sender, crv3Leftover);\\n    }\\n\\n    // --- votium virtual functions ---\\n    function _balanceOf(address _user) internal view override returns(uint256) {\\n        return usdmShare[_user] + crv3Share[_user];\\n    }\\n\\n    function _supply() internal view override returns(uint256) {\\n        return totalUsdm + totalCrv3;\\n    }\\n\\n    function approvedReward(IERC20 _token) public view override returns(bool) {\\n        return address(_token) != address(usdm) && address(_token) != address(crv3) && address(_token) != address(usdm3crv);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/prm/VotiumShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { BoringMath } from \\\"./library/BoringMath.sol\\\";\\nimport { IVotiumMerkleStash } from \\\"../external/VotiumInterfaces.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\nabstract contract VotiumShare is Ownable {\\n    using BoringMath for uint256;\\n    using SafeERC20 for IERC20;\\n    // reward section\\n    struct Reward {\\n        uint256 rewardLeft;\\n        uint40 periodFinish;\\n        uint208 rewardRate;\\n        uint40 lastUpdateTime;\\n        uint208 rewardPerTokenStored;\\n    }\\n\\n    // claim section\\n    struct ClaimParam {\\n        address token;\\n        uint256 index;\\n        uint256 amount;\\n        bytes32[]  merkleProof;\\n    }\\n    \\n    // earned reward section\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    // votium = https://etherscan.io/address/0x378ba9b73309be80bf4c2c027aad799766a7ed5a#writeContract\\n\\n    IERC20[] public rewardTokens;\\n\\n    mapping(IERC20 => Reward) public rewardData;\\n\\n    mapping(IERC20 => uint256) public rewardIndex;\\n\\n    uint256 public constant rewardsDuration = 86400 * 14;\\n\\n    address public team;\\n\\n    // user -> reward token -> amount\\n    mapping(address => mapping(IERC20 => uint256)) public userRewardPerTokenPaid;\\n\\n    mapping(address => mapping(IERC20 => uint256)) public rewards;\\n\\n    constructor() {\\n        team = msg.sender;\\n    }\\n\\n    modifier updateReward(address _account) {\\n        for (uint i = 0; i < rewardTokens.length; i++) {\\n            IERC20 token = rewardTokens[i];\\n            rewardData[token].rewardPerTokenStored = _rewardPerToken(token).to208();\\n            rewardData[token].lastUpdateTime = _lastTimeRewardApplicable(rewardData[token].periodFinish).to40();\\n            if (_account != address(0)) {\\n                rewards[_account][token] = _earned(_account, token, _balanceOf(_account));\\n                userRewardPerTokenPaid[_account][token] = rewardData[token].rewardPerTokenStored;\\n            }\\n        }\\n        _;\\n    }\\n\\n    function changeTeam(address _team) external onlyOwner {\\n        team = _team;\\n    }\\n\\n    function syncRewards(IERC20[] memory _tokens) external {\\n        for(uint256 i = 0; i<_tokens.length; i++){\\n            IERC20 token = _tokens[i];\\n            require(approvedReward(token), \\\"!approvedReward\\\");\\n            uint256 increasedToken = token.balanceOf(address(this)) - rewardData[token].rewardLeft;\\n            _notifyReward(\\n                token,\\n                increasedToken * 8 / 10\\n            );\\n\\n            rewardData[token].rewardLeft += increasedToken;\\n            token.transfer(team, increasedToken * 2 / 10);\\n\\n            if(rewardIndex[token] == 0) {\\n                rewardTokens.push(token);\\n                rewardIndex[token] = rewardTokens.length;\\n            }\\n        }\\n    }\\n    \\n    // Address and claimable amount of all reward tokens for the given account\\n    function claimableAmount(address _account) external view returns(EarnedData[] memory userRewards) {\\n        userRewards = new EarnedData[](rewardTokens.length);\\n        for (uint256 i = 0; i < userRewards.length; i++) {\\n            IERC20 token = rewardTokens[i];\\n            userRewards[i].token = address(token);\\n            userRewards[i].amount = _earned(_account, token, _balanceOf(_account));\\n        }\\n        return userRewards;\\n    }\\n\\n\\n    function claim() external updateReward(msg.sender) {\\n        for (uint i; i < rewardTokens.length; i++) {\\n            IERC20 _rewardsToken = IERC20(rewardTokens[i]);\\n            uint256 reward = rewards[msg.sender][_rewardsToken];\\n            if (reward > 0) {\\n                rewards[msg.sender][_rewardsToken] = 0;\\n                rewardData[_rewardsToken].rewardLeft -= reward;\\n                _rewardsToken.safeTransfer(msg.sender, reward);\\n            }\\n        }\\n    }\\n\\n    // --- internal functions ---\\n\\n    function _notifyReward(IERC20 _rewardsToken, uint256 _reward) internal {\\n        Reward storage rdata = rewardData[_rewardsToken];\\n\\n        if (block.timestamp >= rdata.periodFinish) {\\n            rdata.rewardRate = _reward.div(rewardsDuration).to208();\\n        } else {\\n            uint256 remaining = uint256(rdata.periodFinish).sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rdata.rewardRate);\\n            rdata.rewardRate = _reward.add(leftover).div(rewardsDuration).to208();\\n        }\\n\\n        rdata.lastUpdateTime = block.timestamp.to40();\\n        rdata.periodFinish = block.timestamp.add(rewardsDuration).to40();\\n    }\\n\\n    function _rewardPerToken(IERC20 _rewardsToken) internal view returns(uint256) {\\n        if (_supply() == 0) {\\n            return rewardData[_rewardsToken].rewardPerTokenStored;\\n        }\\n        return\\n        uint256(rewardData[_rewardsToken].rewardPerTokenStored).add(\\n            _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish).sub(\\n                rewardData[_rewardsToken].lastUpdateTime).mul(\\n                rewardData[_rewardsToken].rewardRate).mul(1e18).div(_supply())\\n        );\\n\\n    }\\n\\n    function _lastTimeRewardApplicable(uint256 _finishTime) internal view returns(uint256) {\\n        return Math.min(block.timestamp, _finishTime);\\n    }\\n\\n    function _earned(\\n        address _user,\\n        IERC20 _rewardsToken,\\n        uint256 _balance\\n    ) internal view returns(uint256) {\\n        return _balance.mul(\\n            _rewardPerToken(_rewardsToken).sub(userRewardPerTokenPaid[_user][_rewardsToken])\\n        ).div(1e18).add(rewards[_user][_rewardsToken]);\\n    }\\n\\n    // --- virtual internal functions ---\\n    function _balanceOf(address _user) internal view virtual returns(uint256);\\n\\n    function _supply() internal view virtual returns(uint256);\\n\\n    function approvedReward(IERC20 _token) public view virtual returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/prm/library/BoringMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.13;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        unchecked { \\n            require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n        }\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        unchecked { \\n            require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        unchecked { \\n            require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked { \\n            require(b > 0, \\\"BoringMath: division by zero\\\");\\n            return a / b;\\n        }\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        unchecked { \\n            require(a <= type(uint128).max, \\\"BoringMath: uint128 Overflow\\\");\\n            c = uint128(a);\\n        }\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        unchecked { \\n            require(a <= type(uint64).max, \\\"BoringMath: uint64 Overflow\\\");\\n            c = uint64(a);\\n        }\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        unchecked { \\n            require(a <= type(uint32).max, \\\"BoringMath: uint32 Overflow\\\");\\n            c = uint32(a);\\n        }\\n    }\\n\\n    function to40(uint256 a) internal pure returns (uint40 c) {\\n        unchecked { \\n            require(a <= type(uint40).max, \\\"BoringMath: uint40 Overflow\\\");\\n            c = uint40(a);\\n        }\\n    }\\n\\n    function to112(uint256 a) internal pure returns (uint112 c) {\\n        unchecked { \\n            require(a <= type(uint112).max, \\\"BoringMath: uint112 Overflow\\\");\\n            c = uint112(a);\\n        }\\n    }\\n\\n    function to224(uint256 a) internal pure returns (uint224 c) {\\n        unchecked { \\n            require(a <= type(uint224).max, \\\"BoringMath: uint224 Overflow\\\");\\n            c = uint224(a);\\n        }\\n    }\\n\\n    function to208(uint256 a) internal pure returns (uint208 c) {\\n        unchecked { \\n            require(a <= type(uint208).max, \\\"BoringMath: uint208 Overflow\\\");\\n            c = uint208(a);\\n        }\\n    }\\n\\n    function to216(uint256 a) internal pure returns (uint216 c) {\\n        unchecked { \\n            require(a <= type(uint216).max, \\\"BoringMath: uint216 Overflow\\\");\\n            c = uint216(a);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_usdm\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_crv3\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"contract ICurveMetaPool\",\"name\":\"_usdm3crv\",\"type\":\"address\"},{\"internalType\":\"contract ICurvePool\",\"name\":\"_crv3pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approvedReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"changeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct VotiumShare.EarnedData[]\",\"name\":\"userRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv3\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv3Provided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crv3Share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv3pool\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"deposit3Crv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_deposit\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_min3crv\",\"type\":\"uint256\"}],\"name\":\"depositStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdm\",\"type\":\"uint256\"}],\"name\":\"depositUsdm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_liquidity\",\"type\":\"uint256\"}],\"name\":\"pairLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_burn\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"periodFinish\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"rewardRate\",\"type\":\"uint208\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTime\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint208\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"syncRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCrv3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsdm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm3crv\",\"outputs\":[{\"internalType\":\"contract ICurveMetaPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdmProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdmShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw3Crv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_withdraw\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"_3crv_max\",\"type\":\"uint256\"}],\"name\":\"withdrawStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdm\",\"type\":\"uint256\"}],\"name\":\"withdrawUsdm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PegRecoveryModule", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000031d4eb09a216e181ec8a43ce79226a487d6f0ba90000000000000000000000006c3f90f043a72fa612cbac8115ee7e52bde6e4900000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000005b3b5df2bf2b6543f78e053bd91c4bdd820929f1000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7", "EVMVersion": "Default", "Library": "", "LicenseType": "Unknown", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}