{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: interfaces/OracleWrapper.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface OracleWrapper {\r\n    function latestAnswer() external view returns (uint128);\r\n}\r\n\r\n// File: interfaces/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface Token {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: utils/Ownable.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: libraries/TransferHelper.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeApprove: approve failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeTransfer: transfer failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::transferFrom: transferFrom failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(\r\n            success,\r\n            \"TransferHelper::safeTransferETH: ETH transfer failed\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: CHBTeam.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CHBTeam is Ownable {\r\n    address public tokenAddress; // CHB Token address\r\n    uint64 public decimalValue; // Token decimals\r\n    uint32 public startTimestamp; // Time at which contract is deployed\r\n    uint32 public firstClaimTimestamp; // Time at which first first claim will be available\r\n    uint32 public lastClaimTimestamp; // Time at which claims will be over\r\n    uint32 public timeIntervals; // Time interval between 2 claims\r\n    uint8 public totalTeams; // Total teams available\r\n    uint8 public currentTeamCount;\r\n\r\n    // Team Addresses\r\n    address public DEVELOPMENT = 0xab1322Fd34dA21F564F1ff7E83371A46E7dDac98;\r\n    address public MARKETING = 0x8cD523AB00c13FB71b7Ad1692d6815b0b2eC37a9;\r\n    address public SECURITY = 0xDCa990Cf44A7Ed377DCD262ECC9B2d25078BAc74;\r\n    address public LEGAL = 0x1D29A0605300CBD35402d8c3105a11FEcf7cd29A;\r\n\r\n    /* ================ STRUCT SECTION ================ */\r\n    // Struct for teams\r\n    struct Team {\r\n        address teamAddress;\r\n        uint128 totalTokens;\r\n        uint128 tokensClaimed;\r\n        uint128 tokenDistribution;\r\n        uint32 claimCount;\r\n        uint32 vestingPeriod;\r\n        bool isActive;\r\n    }\r\n    mapping(address => Team) public teamInfo;\r\n    mapping(address => uint128) public teamShare;\r\n\r\n    /* ================ EVENT SECTION ================ */\r\n    event TeamCreated(\r\n        address indexed teamAddress,\r\n        uint128 totalTokens,\r\n        uint128 tokensClaimed,\r\n        uint128 tokenDistribution,\r\n        uint32 claimCount,\r\n        uint32 vestingPeriod\r\n    );\r\n\r\n    event TokensClaimed(\r\n        address indexed teamAddress,\r\n        uint128 tokensClaimed,\r\n        uint32 claimCount\r\n    );\r\n\r\n    /* ================ CONSTRUCTOR SECTION ================ */\r\n    // Construtor\r\n    constructor(address _tokenAddress) {\r\n        tokenAddress = _tokenAddress;\r\n\r\n        decimalValue = uint64(10**Token(tokenAddress).decimals());\r\n\r\n        startTimestamp = uint32(block.timestamp);\r\n        firstClaimTimestamp = startTimestamp + 300 days;\r\n        lastClaimTimestamp = startTimestamp + 1800 days;\r\n        timeIntervals = 30 days;\r\n        totalTeams = 4;\r\n\r\n        teamShare[DEVELOPMENT] = 70_00_00_000 * decimalValue;\r\n        teamShare[MARKETING] = 80_00_00_000 * decimalValue;\r\n        teamShare[SECURITY] = 30_00_00_000 * decimalValue;\r\n        teamShare[LEGAL] = 20_00_00_000 * decimalValue;\r\n\r\n        registerTeam(DEVELOPMENT, teamShare[DEVELOPMENT]);\r\n        registerTeam(MARKETING, teamShare[MARKETING]);\r\n        registerTeam(SECURITY, teamShare[SECURITY]);\r\n        registerTeam(LEGAL, teamShare[LEGAL]);\r\n    }\r\n\r\n    /* ================ TEAM FUNCTION SECTION ================ */\r\n\r\n    // Function registers new team\r\n    function registerTeam(address _teamAddress, uint128 _teamShare)\r\n        public\r\n        onlyOwner\r\n    {\r\n        // Only 4 teams are allowed\r\n        require(currentTeamCount < totalTeams, \"Maximum teams created\");\r\n\r\n        // Team should not be already registered\r\n        require(!teamInfo[_teamAddress].isActive, \"Team already registered\");\r\n\r\n        // New team instance created\r\n        Team memory newTeam = Team({\r\n            teamAddress: _teamAddress,\r\n            totalTokens: _teamShare,\r\n            tokensClaimed: 0,\r\n            tokenDistribution: (_teamShare * 200) / 10000,\r\n            claimCount: 0,\r\n            vestingPeriod: lastClaimTimestamp,\r\n            isActive: true\r\n        });\r\n        teamInfo[_teamAddress] = newTeam;\r\n        ++currentTeamCount;\r\n\r\n        emit TeamCreated(\r\n            _teamAddress,\r\n            newTeam.totalTokens,\r\n            newTeam.tokensClaimed,\r\n            newTeam.tokenDistribution,\r\n            newTeam.claimCount,\r\n            newTeam.vestingPeriod\r\n        );\r\n    }\r\n\r\n    // Function allows teams to claim tokens\r\n    function claimTokens() public {\r\n        Team storage tInfo = teamInfo[msg.sender];\r\n\r\n        require(tInfo.isActive, \"Team doesn't exist\");\r\n        require(block.timestamp > firstClaimTimestamp, \"Tokens in vesting\");\r\n\r\n        uint32 _totalClaims = teamTotalClaims(firstClaimTimestamp, 0);\r\n        if (_totalClaims > tInfo.claimCount) {\r\n            uint128 _totalTokensToClaim = (_totalClaims - tInfo.claimCount) *\r\n                tInfo.tokenDistribution;\r\n\r\n            TransferHelper.safeTransfer(\r\n                tokenAddress,\r\n                msg.sender,\r\n                _totalTokensToClaim\r\n            );\r\n\r\n            tInfo.claimCount = _totalClaims;\r\n            tInfo.tokensClaimed += _totalTokensToClaim;\r\n        } else {\r\n            if (block.timestamp < firstClaimTimestamp) {\r\n                require(false, \"Vesting time is still on\");\r\n            } else {\r\n                require(false, \"Maximum tokens available already claimed\");\r\n            }\r\n        }\r\n\r\n        emit TokensClaimed(msg.sender, tInfo.tokensClaimed, tInfo.claimCount);\r\n    }\r\n\r\n    // Internal function to return claims\r\n    function teamTotalClaims(uint32 _timestamp, uint32 _totalClaims)\r\n        public\r\n        view\r\n        returns (uint32)\r\n    {\r\n        if (block.timestamp >= _timestamp) {\r\n            if (_totalClaims < 50) {\r\n                ++_totalClaims;\r\n                return\r\n                    teamTotalClaims(_timestamp + timeIntervals, _totalClaims);\r\n            } else {\r\n                return _totalClaims;\r\n            }\r\n        } else {\r\n            return _totalClaims;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokensClaimed\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenDistribution\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"claimCount\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"vestingPeriod\",\"type\":\"uint32\"}],\"name\":\"TeamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokensClaimed\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"claimCount\",\"type\":\"uint32\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEVELOPMENT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGAL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECURITY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTeamCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalValue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_teamShare\",\"type\":\"uint128\"}],\"name\":\"registerTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensClaimed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenDistribution\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"claimCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestingPeriod\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamShare\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_totalClaims\",\"type\":\"uint32\"}],\"name\":\"teamTotalClaims\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeIntervals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeams\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CHBTeam", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f68d4d917592f3a62417ace42592f15296cc33a0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b251773b59af119cd96ce4aab45df882bfb597103e7ba7051196758a84da33f"}]}