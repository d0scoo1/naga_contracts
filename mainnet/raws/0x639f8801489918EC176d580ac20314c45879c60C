{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/external/DecentralandAdminOperatorUpdater.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/decentraland/IDecentralandFacet.sol\\\";\\n\\ncontract DecentralandAdminOperatorUpdater {\\n    function updateAssetsAdministrativeState(\\n        address _landWorks,\\n        uint256[] memory _assets\\n    ) public {\\n        IDecentralandFacet landWorks = IDecentralandFacet(_landWorks);\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            landWorks.updateAdministrativeState(_assets[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/decentraland/IDecentralandFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../IRentable.sol\\\";\\n\\ninterface IDecentralandFacet is IRentable {\\n    event UpdateState(\\n        uint256 indexed _assetId,\\n        uint256 _rentId,\\n        address indexed _operator\\n    );\\n    event UpdateAdministrativeState(\\n        uint256 indexed _assetId,\\n        address indexed _operator\\n    );\\n    event UpdateOperator(\\n        uint256 indexed _assetId,\\n        uint256 _rentId,\\n        address indexed _operator\\n    );\\n    event UpdateAdministrativeOperator(address _administrativeOperator);\\n\\n    /// @notice Rents Decentraland Estate/LAND.\\n    /// @param _assetId The target asset\\n    /// @param _period The target period of the rental\\n    /// @param _operator The target operator, which will be set as operator once the rent is active\\n    /// @param _paymentToken The current payment token for the asset\\n    /// @param _amount The target amount to be paid for the rent\\n    function rentDecentraland(\\n        uint256 _assetId,\\n        uint256 _period,\\n        address _operator,\\n        address _paymentToken,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Updates the corresponding Estate/LAND operator from the given rent.\\n    /// When the rent becomes active (the current block.timestamp is between the rent's start and end),\\n    /// this function should be executed to set the provided rent operator to the Estate/LAND scene operator.\\n    /// @param _assetId The target asset which will map to its corresponding Estate/LAND\\n    /// @param _rentId The target rent\\n    function updateState(uint256 _assetId, uint256 _rentId) external;\\n\\n    /// @notice Updates the corresponding Estate/LAND operator with the administrative operator\\n    /// @param _assetId The target asset which will map to its corresponding Estate/LAND\\n    function updateAdministrativeState(uint256 _assetId) external;\\n\\n    /// @notice Updates the operator for the given rent of an asset\\n    /// @param _assetId The target asset\\n    /// @param _rentId The target rent for the asset\\n    /// @param _newOperator The to-be-set new operator\\n    function updateOperator(\\n        uint256 _assetId,\\n        uint256 _rentId,\\n        address _newOperator\\n    ) external;\\n\\n    /// @notice Updates the administrative operator\\n    /// @param _administrativeOperator The to-be-set administrative operator\\n    function updateAdministrativeOperator(address _administrativeOperator)\\n        external;\\n\\n    /// @notice Gets the administrative operator\\n    function administrativeOperator() external view returns (address);\\n\\n    /// @notice Gets the operator of the rent for the an asset\\n    /// @param _assetId The target asset\\n    /// @param _rentId The target rentId\\n    function operatorFor(uint256 _assetId, uint256 _rentId)\\n        external\\n        view\\n        returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRentable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IRentable {\\n\\n    /// @notice Emitted once a given asset has been rented\\n    event Rent(\\n        uint256 indexed _assetId,\\n        uint256 _rentId,\\n        address indexed _renter,\\n        uint256 _start,\\n        uint256 _end,\\n        address indexed _paymentToken,\\n        uint256 _rent,\\n        uint256 _protocolFee\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_landWorks\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_assets\",\"type\":\"uint256[]\"}],\"name\":\"updateAssetsAdministrativeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DecentralandAdminOperatorUpdater", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}