{"status": "1", "message": "OK", "result": [{"SourceCode": "pragma solidity ^0.4.4;\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n} \r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n    function approve(address spender, uint256 value) public returns (bool success);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool success)  {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of. \r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance)  {\r\n        return balances[_owner];\r\n    }\r\n \r\n}\r\n \r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n \r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amout of tokens to be transfered\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)  {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool success)  {\r\n\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifing the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n \r\n}\r\n \r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable()  public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner  public {\r\n        require(newOwner != address(0));      \r\n        owner = newOwner;\r\n    }\r\n \r\n}\r\n \r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n */\r\n \r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n    event Mint(address indexed to, uint256 amount);\r\n\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will recieve the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount); \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() public onlyOwner returns (bool)  {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n  \r\n}\r\n\r\n\r\n// \u0422\u043e\u043a\u0435\u043d \r\ncontract GWTToken is MintableToken {\r\n    \r\n    string public constant name = \"Global Wind Token\";\r\n    \r\n    string public constant symbol = \"GWT\";\r\n    \r\n    uint32 public constant decimals = 18; \r\n\r\n}\r\n\r\n// \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u043a\u0440\u0430\u0443\u0434\u0441\u0435\u0439\u043b\u0430\r\ncontract GWTCrowdsale is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint public supplyLimit;         // \u041b\u0438\u043c\u0438\u0442 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432\r\n\r\n    address ethAddress;              // \u0410\u0434\u0440\u0435\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u044d\u0444\u0438\u0440\u0430\r\n    uint saleStartTimestamp;         // \u0422\u0430\u0439\u043c\u0448\u0442\u0430\u043c\u043f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\r\n\r\n    uint public currentStageNumber;  // \u041d\u043e\u043c\u0435\u0440 \u043f\u0435\u0440\u0438\u043e\u0434\u0430\r\n    uint currentStageStartTimestamp; // \u0422\u0430\u0439\u043c\u0448\u0442\u0430\u043c\u043f \u0441\u0442\u0430\u0440\u0442\u0430 \u043f\u0435\u0440\u0438\u043e\u0434\u0430\r\n    uint currentStageEndTimestamp;   // \u0422\u0430\u0439\u043c\u0448\u0442\u0430\u043c\u043f \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0430\r\n    uint currentStagePeriodDays;     // \u041a\u043e\u043b-\u0432\u043e \u0434\u043d\u0435\u0439 (\u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043c\u0438\u043d\u0443\u0442) \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u043a\u0440\u0430\u0443\u0434\u0441\u0435\u0439\u043b\u0430\r\n    uint public baseExchangeRate;    // \u041a\u0443\u0440\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u043d\u0430 \u0442\u043e\u043a\u0435\u043d\u044b\r\n    uint currentStageMultiplier;     // \u041c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u044d\u0442\u0430\u043f\u043e\u0432:     bcostReal = baseExchangeRate * currentStageMultiplier\r\n\r\n    uint constant M = 1000000000000000000;  // 1 GWT = 10^18 GWTunits (wei)\r\n\r\n    uint[] _percs = [40, 30, 25, 20, 15, 10, 5, 0, 0];  // \u0411\u043e\u043d\u0443\u0441\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u044b\r\n    uint[] _days  = [42, 1, 27, 1, 7, 7, 7, 14, 0];      // \u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432 \u0434\u043d\u044f\u0445\r\n\r\n    // \u041b\u0438\u043c\u0438\u0442\u044b \u043d\u0430 \u0432\u044b\u043f\u0443\u0441\u043a \u0442\u043e\u043a\u0435\u043d\u043e\u0432\r\n    uint PrivateSaleLimit = M.mul(420000000);\r\n    uint PreSaleLimit = M.mul(1300000000);\r\n    uint TokenSaleLimit = M.mul(8400000000);\r\n    uint RetailLimit = M.mul(22490000000);\r\n\r\n    // \u041a\u0443\u0440\u0441\u044b \u043e\u0431\u043c\u0435\u043d\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043d\u0430 \u044d\u0444\u0438\u0440\r\n    uint TokensaleRate = M.mul(160000);\r\n    uint RetailRate = M.mul(16000);\r\n\r\n    GWTToken public token = new GWTToken(); // \u0422\u043e\u043a\u0435\u043d\r\n\r\n    // \u0410\u043a\u0442\u0438\u0432\u0435\u043d \u043b\u0438 \u043a\u0440\u0430\u0443\u0434\u0441\u0435\u0439\u043b\r\n    modifier isActive() {\r\n        require(isInActiveStage());\r\n        _;\r\n    }\r\n\r\n    function isInActiveStage() private returns(bool) {\r\n        if (currentStageNumber == 8) return true;\r\n        if (now >= currentStageStartTimestamp && now <= currentStageEndTimestamp){\r\n            return true;\r\n        }else if (now < currentStageStartTimestamp) {\r\n            return false;\r\n        }else if (now > currentStageEndTimestamp){\r\n            if (currentStageNumber == 0 || currentStageNumber == 2 || currentStageNumber == 7) return false;\r\n            switchPeriod();\r\n            // It is not possible for stage to be finished after straight the start\r\n            // Also new set currentStageStartTimestamp and currentStageEndTimestamp should be valid by definition\r\n            //return isInActiveStage();\r\n            return true;\r\n        }\r\n        // That will never get reached\r\n        return false;\r\n    }\r\n\r\n    // \u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043f\u0435\u0440\u0438\u043e\u0434\u0443\r\n    function switchPeriod() private onlyOwner {\r\n        if (currentStageNumber == 8) return;\r\n\r\n        currentStageNumber++;\r\n        currentStageStartTimestamp = currentStageEndTimestamp; // \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0442 \u043a\u043e\u043d\u0446\u0430 \u043f\u0440\u043e\u0448\u043b\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043d\u0430 now\r\n        currentStagePeriodDays = _days[currentStageNumber];\r\n        currentStageEndTimestamp = currentStageStartTimestamp + currentStagePeriodDays * 1 days;\r\n        currentStageMultiplier = _percs[currentStageNumber];\r\n\r\n        if(currentStageNumber == 0 ){\r\n            supplyLimit = PrivateSaleLimit;\r\n        } else if(currentStageNumber < 3){\r\n            supplyLimit = PreSaleLimit;\r\n        } else if(currentStageNumber < 8){\r\n            supplyLimit = TokenSaleLimit;\r\n        } else {\r\n            // Base rate for phase 8 should update exchange rate\r\n            baseExchangeRate = RetailRate;\r\n            supplyLimit = RetailLimit;\r\n        }\r\n    }\r\n\r\n    function setStage(uint _index) public onlyOwner {\r\n        require(_index >= 0 && _index < 9);\r\n        \r\n        if (_index == 0) return startPrivateSale();\r\n        currentStageNumber = _index - 1;\r\n        currentStageEndTimestamp = now;\r\n        switchPeriod();\r\n    }\r\n\r\n    // \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043a\u0443\u0440\u0441 \u043e\u0431\u043c\u0435\u043d\u0430\r\n    function setRate(uint _rate) public onlyOwner {\r\n        baseExchangeRate = _rate;\r\n    }\r\n\r\n    // \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043c\u043e\u0436\u0438\u0442\u0435\u043b\u044c\r\n    function setBonus(uint _bonus) public onlyOwner {\r\n        currentStageMultiplier = _bonus;\r\n    }\r\n\r\n    function setTokenOwner(address _newTokenOwner) public onlyOwner {\r\n        token.transferOwnership(_newTokenOwner);\r\n    }\r\n\r\n    // \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0432 \u0434\u043d\u044f\u0445\r\n    function setPeriodLength(uint _length) public onlyOwner {\r\n        // require(now < currentStageStartTimestamp + _length * 1 days);\r\n        currentStagePeriodDays = _length;\r\n        currentStageEndTimestamp = currentStageStartTimestamp + currentStagePeriodDays * 1 days;\r\n    }\r\n\r\n    // \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043b\u0438\u043c\u0438\u0442 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432\r\n    function modifySupplyLimit(uint _new) public onlyOwner {\r\n        if (_new >= token.totalSupply()){\r\n            supplyLimit = _new;\r\n        }\r\n    }\r\n\r\n    // \u0412\u044b\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u044b \u043d\u0430 \u043a\u043e\u0448\u0435\u043b\u0435\u043a\r\n    function mintFor(address _to, uint _val) public onlyOwner isActive payable {\r\n        require(token.totalSupply() + _val <= supplyLimit);\r\n        token.mint(_to, _val);\r\n    }\r\n\r\n    // \u041f\u0440\u0435\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u044b\u043f\u0443\u0441\u043a \u0442\u043e\u043a\u0435\u043d\u043e\u0432\r\n    // \u0412\u041d\u0418\u041c\u0410\u041d\u0418\u0415! \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430 \u044d\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u0435\u043d!\r\n    function closeMinting() public onlyOwner {\r\n        token.finishMinting();\r\n    }\r\n\r\n    // \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u0432. \u0441\u0435\u0439\u043b\u0430\r\n    function startPrivateSale() public onlyOwner {\r\n        currentStageNumber = 0;\r\n        currentStageStartTimestamp = now;\r\n        currentStagePeriodDays = _days[0];\r\n        currentStageMultiplier = _percs[0];\r\n        supplyLimit = PrivateSaleLimit;\r\n        currentStageEndTimestamp = currentStageStartTimestamp + currentStagePeriodDays * 1 days;\r\n        baseExchangeRate = TokensaleRate;\r\n    }\r\n\r\n    function startPreSale() public onlyOwner {\r\n        currentStageNumber = 0;\r\n        currentStageEndTimestamp = now;\r\n        switchPeriod();\r\n    }\r\n\r\n    function startTokenSale() public onlyOwner {\r\n        currentStageNumber = 2;\r\n        currentStageEndTimestamp = now;\r\n        switchPeriod();\r\n    }\r\n\r\n    function endTokenSale() public onlyOwner {\r\n        currentStageNumber = 7;\r\n        currentStageEndTimestamp = now;\r\n        switchPeriod();\r\n    }\r\n\r\n    // 000000000000000000 - 18 \u043d\u0443\u043b\u0435\u0439, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u0441\u0443\u043c\u043c\u0435 \u0432 \u0446\u0435\u043b\u044b\u0445 GWT\r\n    // \u0421\u0442\u0430\u0440\u0442\r\n    function GWTCrowdsale() public {\r\n        // Init\r\n        ethAddress = 0xB93B2be636e39340f074F0c7823427557941Be42;  // \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0430\u0434\u0440\u0435\u0441, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u044d\u0444\u0438\u0440\r\n        // ethAddress = 0x16a49c8af25b3c2ff315934bf38a4cf645813844; // Dev\r\n        saleStartTimestamp = now;                                       // \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0443 \u0434\u0435\u043f\u043b\u043e\u044f\r\n        startPrivateSale();\r\n    }\r\n\r\n    function changeEthAddress(address _newAddress) public onlyOwner {\r\n        ethAddress = _newAddress;\r\n    }\r\n\r\n    // \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u043e\u043a\u0443\u043f\u043a\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432\r\n    function createTokens() public isActive payable {\r\n        uint tokens = baseExchangeRate.mul(msg.value).div(1 ether); // \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c ETH \u0432 GWT\r\n\r\n        if (currentStageMultiplier > 0 && currentStageEndTimestamp > now) {            // \u041d\u0430\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0431\u043e\u043d\u0443\u0441\r\n            tokens = tokens + tokens.div(100).mul(currentStageMultiplier);\r\n        }\r\n        // require(tokens > minLimit && tokens < buyLimit);\r\n        require(token.totalSupply() + tokens <= supplyLimit);\r\n        ethAddress.transfer(msg.value);   // \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043e\u0448\u0435\u043b\u0435\u043a\r\n        token.mint(msg.sender, tokens); // \u041d\u0430\u0447\u0438\u0441\u043b\u044f\u0435\u043c\r\n    }\r\n\r\n    // \u0415\u0441\u043b\u0438 \u043a\u0442\u043e-\u0442\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u043b \u044d\u0444\u0438\u0440 \u043d\u0430 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\r\n    function() external payable {\r\n        createTokens(); // \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenOwner\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setPeriodLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPrivateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"setStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeEthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStageNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startPreSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTokenSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"modifySupplyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"mintFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "GWTCrowdsale", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0ccbe9173e29d13635879c4fbc0a05a5632f50ca33c3cd0cc345d0dfc363f6a8"}]}