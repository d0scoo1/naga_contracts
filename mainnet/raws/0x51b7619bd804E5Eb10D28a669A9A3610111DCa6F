{"status": "1", "message": "OK", "result": [{"SourceCode": "/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [////IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n// SPDX-License-Identifier: MIT\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n////import \"../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = _setInitializedVersion(1);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n     * initialization.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        bool isTopLevelCall = _setInitializedVersion(version);\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(version);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        _setInitializedVersion(type(uint8).max);\r\n    }\r\n\r\n    function _setInitializedVersion(uint8 version) private returns (bool) {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\r\n        // of initializers, because in other contexts the contract may have been reentered.\r\n        if (_initializing) {\r\n            require(\r\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\r\n                \"Initializable: contract is already initialized\"\r\n            );\r\n            return false;\r\n        } else {\r\n            require(_initialized < version, \"Initializable: contract is already initialized\");\r\n            _initialized = version;\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n////import \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\npragma solidity 0.8.11;\r\n\r\n//uint256 constant DECIMALS = 10**18;\r\nuint256 constant DECIMALS = 18;\r\nuint256 constant DECIMALS18 = 1e18;\r\n\r\nuint256 constant MAX_UINT256 = type(uint256).max;\r\nuint256 constant PERCENTAGE_100 = 100 * DECIMALS18;\r\nuint256 constant PERCENTAGE_1 = DECIMALS18;\r\nuint256 constant MAX_FEE_PERCENTAGE = 99 * DECIMALS18;\r\n\r\nuint256 constant YEAR_IN_SECONDS = 31556952;\r\n\r\nstring constant ERROR_ACCESS_DENIED = \"0x1\";\r\nstring constant ERROR_NO_CONTRACT = \"0x2\";\r\nstring constant ERROR_NOT_AVAILABLE = \"0x3\";\r\nstring constant ERROR_KYC_MISSING = \"0x4\";\r\nstring constant ERROR_INVALID_ADDRESS = \"0x5\";\r\nstring constant ERROR_INCORRECT_CALL_METHOD = \"0x6\";\r\nstring constant ERROR_AMOUNT_IS_ZERO = \"0x7\";\r\nstring constant ERROR_HAVENT_ALLOCATION = \"0x8\";\r\nstring constant ERROR_AMOUNT_IS_MORE_TS = \"0x9\";\r\nstring constant ERROR_ERC20_CALL_ERROR = \"0xa\";\r\nstring constant ERROR_DIFF_ARR_LENGTH = \"0xb\";\r\nstring constant ERROR_METHOD_DISABLE = \"0xc\";\r\nstring constant ERROR_SEND_VALUE = \"0xd\";\r\nstring constant ERROR_NOT_ENOUGH_NFT_IDS = \"0xe\";\r\nstring constant ERROR_INCORRECT_FEE = \"0xf\";\r\nstring constant ERROR_WRONG_IMPLEMENT_ADDRESS = \"0x10\";\r\nstring constant ERROR_INVALID_SIGNER = \"0x11\";\r\nstring constant ERROR_NOT_FOUND = \"0x12\";\r\nstring constant ERROR_IS_EXISTS = \"0x13\";\r\nstring constant ERROR_IS_NOT_EXISTS = \"0x14\";\r\nstring constant ERROR_TIME_OUT = \"0x15\";\r\nstring constant ERROR_NFT_NOT_EXISTS = \"0x16\";\r\nstring constant ERROR_MINTING_COMPLETED = \"0x17\";\r\nstring constant ERROR_TOKEN_NOT_SUPPORTED = \"0x18\";\r\nstring constant ERROR_NOT_ENOUGH_NFT_FOR_SALE = \"0x19\";\r\nstring constant ERROR_NOT_ENOUGH_PREVIOUS_NFT = \"0x1a\";\r\nstring constant ERROR_FAIL = \"0x1b\";\r\nstring constant ERROR_MORE_THEN_MAX = \"0x1c\";\r\nstring constant ERROR_VESTING_NOT_START = \"0x1d\";\r\nstring constant ERROR_VESTING_IS_STARTED = \"0x1e\";\r\nstring constant ERROR_IS_SET = \"0x1f\";\r\nstring constant ERROR_ALREADY_CALL_METHOD = \"0x20\";\r\nstring constant ERROR_INCORRECT_DATE = \"0x21\";\r\nstring constant ERROR_IS_NOT_SALE = \"0x22\";\r\nstring constant ERROR_UNPREDICTABLE_MEMBER_ACTION = \"0x23\";\r\nstring constant ERROR_ALREADY_PAID = \"0x24\";\r\nstring constant ERROR_COOLDOWN_IS_NOT_OVER = \"0x25\";\r\nstring constant ERROR_INSUFFICIENT_AMOUNT = \"0x26\";\r\nstring constant ERROR_RESERVES_IS_ZERO = \"0x27\";\r\nstring constant ERROR_TREE_EXISTS = \"0x28\";\r\nstring constant ERROR_TREE_DOESNT_EXIST = \"0x29\";\r\nstring constant ERROR_NOT_DIFFERENT_MEMBERS = \"0x2a\";\r\nstring constant ERROR_NOT_ENOUGH_BALANCE = \"0x2b\";\r\nstring constant ERROR_ALREADY_DISTRIBUTED = \"0x2c\";\r\nstring constant ERROR_INDEX_OUT = \"0x2d\";\r\nstring constant ERROR_NOT_START = \"0x2e\";\r\nstring constant ERROR_ALREADY_CLAIMED = \"0x2f\";\r\nstring constant ERROR_LENGTH_IS_ZERO = \"0x30\";\r\nstring constant ERROR_WRONG_AMOUNT = \"0x31\";\r\nstring constant ERROR_SIGNERS_CANNOT_BE_EMPTY = \"0x41\";\r\nstring constant ERROR_LOCKED_PERIOD = \"0x42\";\r\nstring constant ERROR_INVALID_NONCE = \"0x43\";\r\nstring constant ERROR_CHAIN_NOT_SUPPORTED = \"0x44\";\r\nstring constant ERROR_INCORRECT_DATA = \"0x45\";\r\nstring constant ERROR_TWO_AMOUNTS_ENTERED = \"0x46\";\r\n\r\nbytes32 constant KYC_CONTAINER_TYPEHASH = keccak256(\"Container(address sender,uint256 deadline)\");\r\n\r\nuint256 constant ROLE_ADMIN = 1;\r\nuint256 constant CAN_WITHDRAW_NATIVE = 10;\r\n\r\n// Managemenet\r\nuint256 constant MANAGEMENT_CAN_SET_KYC_WHITELISTED = 3;\r\nuint256 constant MANAGEMENT_KYC_SIGNER = 4;\r\nuint256 constant MANAGEMENT_WHITELISTED_KYC = 5;\r\n\r\n// Payment Gateway\r\nuint256 constant SHOPS_PAYMENT_PAY_SIGNER = 21;\r\nuint256 constant SHOPS_POOL_CAN_WITHDRAW_FOR = 31;\r\nuint256 constant SHOPS_MANAGER_BLACK_LIST_PERM = 41;\r\nuint256 constant SHOPS_MAGANER_FREEZ_LIST_PERM = 42;\r\nuint256 constant SHOPS_MANAGER_CAN_SET_SHOP_ACCESS = 43;\r\nuint256 constant SHOPS_MANAGER_CAN_REGISTER_REMOVE_SHOP = 44;\r\nuint256 constant SHOPS_MANAGER_CAN_SET_COMMISION = 45;\r\n\r\n// Public Sale\r\nuint256 constant CAN_MINT_TOKENS_TOKEN_PLAN = 100;\r\nuint256 constant CAN_BURN_TOKENS_TOKEN_PLAN = 101;\r\n\r\nuint256 constant CAN_UPDATE_REWARD_REFERRAL_TREE = 120;\r\nuint256 constant CAN_CREATE_TREE_REFERRAL_TREE = 121;\r\nuint256 constant CAN_UPDATE_CALCULATE_REWARDS_REFERRAL_TREE = 122;\r\n\r\nuint256 constant CAN_STAKE_FOR_APR_STAKE = 123;\r\n\r\nuint256 constant CAN_FORWARD_FORWARDER = 124;\r\n\r\nuint256 constant CAN_DISTRIBUT_BONUS_KRU_DISTRIBUTOR = 140;\r\nuint256 constant CAN_CHANGE_BONUS_KRU_BONUS_DISTRIBUTOR = 143;\r\n\r\nuint256 constant CAN_CHANGE_PURCHASE_INFO = 141;\r\nuint256 constant CAN_SET_PLANS_INFO = 142;\r\n\r\n//KRUExchangeForwarder\r\nuint256 constant EXCHANGE_FORWARDER_SIGNER = 151;\r\nuint256 constant EXCHANGE_FORWARDER_CAN_SET_ADDRESSES = 152;\r\n\r\n//KRUDiscountExcange\r\nuint256 constant DISCOUNT_EXCHANGE_CAN_SET_VESTING_TYPE = 161;\r\nuint256 constant DISCOUNT_EXCHANGE_CAN_SET_SIGNER = 162;\r\nuint256 constant DISCOUNT_EXCHANGE_CAN_CLAIM_FOR = 163;\r\nuint256 constant DISCOUNT_EXCHANGE_CAN_ISSUE_PURCHASE = 164;\r\n\r\n//All contracts by all part\r\n\r\nuint256 constant CONTRACT_MANAGEMENT = 0;\r\n\r\nuint256 constant CONTRACT_KRU_SHOPS_PAYMENT_PROCCESOR = 2;\r\nuint256 constant CONTRACT_KRU_SHOPS_POOL = 3;\r\nuint256 constant CONTRACT_KRU_SHOPS_MANAGER = 4;\r\n\r\nuint256 constant CONTRACT_APR_STAKE = 11;\r\nuint256 constant CONTRACT_FUND_FORWARDER = 15;\r\nuint256 constant CONTRACT_REFERRAL_TREE = 16;\r\nuint256 constant CONTRACT_BONUS_DISTRIBUTOR = 20;\r\n\r\nuint256 constant CONTRACT_UNISWAP_V2_PAIR = 23;\r\nuint256 constant CONTRACT_UNISWAP_V2_ROUTER = 24;\r\nuint256 constant CONTRACT_UNISWAP_V2_FACTORY = 25;\r\n\r\nuint256 constant CONTRACT_WRAPPED_KRU = 26;\r\n\r\nuint256 constant CONTRACT_KRU_SHOPS_TRESUARY = 100;\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\npragma solidity 0.8.11;\r\n\r\n/// @title Management\r\n/// @author Applicature\r\n/// @notice This contract allows set permission or permissions for sender,\r\n/// set owner of the pool, set kyc whitelist, register contract etc\r\n/// @dev This contract allows set permission or permissions for sender,\r\n/// set owner of the pool, set kyc whitelist, register contract etc\r\ninterface IManagement {\r\n    /// @notice Generated when admin set limit set permissions for user\r\n    /// @dev Generated when admin set limit set permissions for user\r\n    /// @param subject address which recive limit set permissions\r\n    /// @param permissions id of permissions which was limit set permissions\r\n    /// @param value Bool state of permission (true - enable, false - disable for subject)\r\n    event LimitSetPermission(address indexed subject, uint256 indexed permissions, bool value);\r\n\r\n    /// @notice Generated when admin set new permissions for user\r\n    /// @dev Generated when admin/or user with limit set permissions set new permissions for user\r\n    /// @param subject address which recive permissions\r\n    /// @param permissions id's of permissions which was set\r\n    /// @param value Bool state of permission (true - enable, false - disable for subject)\r\n    event PermissionsSet(address indexed subject, uint256[] indexed permissions, bool value);\r\n\r\n    /// @notice Generated when admin set new permissions for user\r\n    /// @dev Generated when admin/or user with limit set permissions set new permissions for user\r\n    /// @param subject array with addresses which permissions was update\r\n    /// @param permissions id of permission which was set\r\n    /// @param value Bool state of permission (true - enable, false - disable for subject)\r\n    event UsersPermissionsSet(address[] indexed subject, uint256 indexed permissions, bool value);\r\n\r\n    /// @notice Generated when admin set new permissions for user\r\n    /// @dev Generated when admin/or user with limit set permissions set new permissions for user\r\n    /// @param subject address which recive permissions\r\n    /// @param permission id of permission which was set\r\n    /// @param value Bool state of permission (true - enable, false - disable for subject)\r\n    event PermissionSet(address indexed subject, uint256 indexed permission, bool value);\r\n\r\n    /// @notice Generated when admin register new contract\r\n    /// @dev Generated when admin register new contract by key\r\n    /// @param key id on which the contract is registered\r\n    /// @param target address contract which was registered\r\n    event ContractRegistered(uint256 indexed key, address target);\r\n\r\n    /// @notice Sets the permission for sender\r\n    /// @dev  Sets the permission for sender by owner or address with limit set permissions\r\n    /// @param address_ the address of sender\r\n    /// @param permission_ the permission for sender\r\n    /// @param value_ true or false for sender's permission\r\n    function setPermission(\r\n        address address_,\r\n        uint256 permission_,\r\n        bool value_\r\n    ) external;\r\n\r\n    /// @notice Sets the permissions for sender\r\n    /// @dev Sets the permissions for sender by owner\r\n    /// @param address_ the address of sender\r\n    /// @param permissions_ the permissions for sender\r\n    /// @param value_ true or false for sender's permissions\r\n    function setPermissions(\r\n        address address_,\r\n        uint256[] calldata permissions_,\r\n        bool value_\r\n    ) external;\r\n\r\n    /// @notice Sets the limit grant access to gran permissions\r\n    /// @dev  Sets the limit grant access to gran permissions\r\n    /// @param address_ the address of sender\r\n    /// @param permission_ the permission which address_ can grant\r\n    /// @param value_ true or false for address_ permission\r\n    function setLimitSetPermission(\r\n        address address_,\r\n        uint256 permission_,\r\n        bool value_\r\n    ) external;\r\n\r\n    /// @notice Registrates contract\r\n    /// @dev Registrates contract by owner\r\n    /// @param key_ the number that corresponds to the registered address\r\n    /// @param target_ the address that must to be registered\r\n    function registerContract(uint256 key_, address payable target_) external;\r\n\r\n    /// @notice Sets the kyc whitelist\r\n    /// @dev Sets the kyc whitelist\r\n    /// @param address_ the addresses that need to whitelist\r\n    /// @param value_ the true or false for kyc whitelist\r\n    function setKycWhitelists(address[] calldata address_, bool value_) external;\r\n\r\n    /// @notice Checks whether the sender has passed kyc\r\n    /// @dev Checks whether the sender has passed kyc\r\n    /// @param address_ the address of sender\r\n    /// @param deadline_ deadline in Unix timestamp\r\n    /// @param v_ one of the signature parameters\r\n    /// @param r_ one of the signature parameters\r\n    /// @param s_ one of the signature parameters\r\n    /// @return Returns whether the sender has passed kyc\r\n    function isKYCPassed(\r\n        address address_,\r\n        uint256 deadline_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) external view returns (bool);\r\n\r\n    /// @notice Gets the registered contract by key\r\n    /// @dev Gets the registered contract by key\r\n    /// @param key_ the number that corresponds to the registered address\r\n    /// @return Returns the registered contract by key\r\n    function contractRegistry(uint256 key_) external view returns (address payable);\r\n\r\n    /// @notice Gets whether the sender has permission\r\n    /// @dev Gets whether the sender has permission\r\n    /// @param address_ the address of sender\r\n    /// @param permission_ the permission for sender\r\n    /// @return Returns whether the sender has permission\r\n    function permissions(address address_, uint256 permission_) external view returns (bool);\r\n\r\n    /// @notice Returns whether the user can grant right to someone\r\n    /// @dev Returns whether the user can grant right to someone\r\n    /// @param address_ the address of sender\r\n    /// @param permission_ the permission for sender\r\n    /// @return Returns whether the user can grant right to someone\r\n    function limitSetPermissions(address address_, uint256 permission_) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../utils/ContextUpgradeable.sol\";\r\n////import \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../StringsUpgradeable.sol\";\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSAUpgradeable {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * ////IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * ////IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n////import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n////import \"../interfaces/IManagement.sol\";\r\n////import \"./Constants.sol\";\r\n\r\n/// @title Managed\r\n/// @author Applicature\r\n/// @notice This contract allows initialize the address of management, set permission for sender etc\r\n/// @dev This contract allows initialize the address of management, set permission for sender etc\r\nabstract contract ManagedUpgradeable is OwnableUpgradeable {\r\n    /// @notice The state variable of IManagement interface\r\n    /// @dev The state variable of IManagement interface\r\n    IManagement public management;\r\n\r\n    /// @notice Checks whether the sender has permission prior to executing the function\r\n    /// @dev Checks whether the sender has permission prior to executing the function\r\n    /// @param permission_ the permission for sender\r\n    modifier requirePermission(uint256 permission_) {\r\n        require(_hasPermission(_msgSender(), permission_), ERROR_ACCESS_DENIED);\r\n        _;\r\n    }\r\n\r\n    /// @notice Checks whether the sender is a registered contract\r\n    /// @dev Checks whether the sender is a registered contract\r\n    /// @param key_ the number that corresponds to the registered address\r\n    modifier canCallOnlyRegisteredContract(uint256 key_) {\r\n        require(_msgSender() == management.contractRegistry(key_), ERROR_ACCESS_DENIED);\r\n        _;\r\n    }\r\n\r\n    /// @notice Initializes the address of management after deployment\r\n    /// @dev Initializes the address of management after deployment by owner of smart contract\r\n    /// @param managementAddress_ the address of management\r\n    function setManagementContract(address managementAddress_) external virtual onlyOwner {\r\n        require(address(0) != managementAddress_, ERROR_NO_CONTRACT);\r\n        management = IManagement(managementAddress_);\r\n    }\r\n\r\n    /// @notice Initializes the address of management and initial owner\r\n    /// @dev Initializes the address of management, initial owner and protect from being invoked twice\r\n    /// @param managementAddress_ the address of management\r\n    /* solhint-disable */\r\n    function __Managed_init(address managementAddress_) internal virtual onlyInitializing {\r\n        require(address(0) != managementAddress_, ERROR_NO_CONTRACT);\r\n        management = IManagement(managementAddress_);\r\n        __Ownable_init();\r\n    }\r\n\r\n    /// @notice Checks whether the sender has permission\r\n    /// @dev Checks whether the sender has permission\r\n    /// @param subject_ the address of sender\r\n    /// @param permission_ the permission for sender\r\n    /// @return Returns whether the sender has permission\r\n    function _hasPermission(address subject_, uint256 permission_) internal view virtual returns (bool) {\r\n        return management.permissions(subject_, permission_);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\npragma solidity 0.8.11;\r\n\r\n/// @title IKRUExchangeForwarder\r\n/// @author Applicature\r\n/// @notice There is an interface to KRUExchangeForwarder contract\r\n/// @dev There is an interface to KRUExchangeForwarder contract\r\ninterface IKRUExchangeForwarder {\r\n    /// @notice Generated when admin set destination address\r\n    /// @dev Generated when admin set destination address\r\n    /// @param destination_ the address to which any funds sent to this contract will be forwarded\r\n    event DestinationSet(address indexed destination_);\r\n\r\n    /// @notice Generated when admin set tokens which be available for transfer to destination address\r\n    /// @dev Generated when admin set tokens which be available for transfer to destination address\r\n    /// @param tokens_ the array of addresses of tokens\r\n    /// @param value_ whether tokens available or not (true or false)\r\n    event AvailableTokensSet(address[] indexed tokens_, bool value_);\r\n\r\n    /// @notice Generated when signer forward amount of tokens or native coin to destination address\r\n    /// @dev Generated when signer forward amount of tokens or native coin to destination address\r\n    /// @param sender_ the address of sender\r\n    /// @param recipient_ the destination address\r\n    /// @param token_ the address of token\r\n    /// @param amount_ the amount of tokens or native coin\r\n    /// @param data_ data to bytes to emit transaction\r\n    event Forward(\r\n        address indexed sender_,\r\n        address indexed recipient_,\r\n        address indexed token_,\r\n        uint256 amount_,\r\n        string data_\r\n    );\r\n\r\n    /// @notice Set destination address by admin\r\n    /// @dev Emit {DestinationSet} event\r\n    /// @param destination_ the address to which any funds sent to this contract will be forwarded\r\n    function setDestinationAddress(address destination_) external;\r\n\r\n    /// @notice Set addresses of tokens which be available for transfer to destination address\r\n    /// @dev Zero address is used to forward native coin\r\n    /// @param tokens_ the array of addresses of tokens\r\n    /// @param value_ whether tokens available or not (true or false)\r\n    function setAvailableTokens(address[] calldata tokens_, bool value_) external;\r\n\r\n    /// @notice Forward amount of tokens or native coin to destination address\r\n    /// @dev Expire date, signature, nonce will be checked by EIP712\r\n    /// @param token_ the address of token\r\n    /// @param amount_ the amount of tokens\r\n    /// @param deadline_ expire date of signature\r\n    /// @param nonce_ the counter that keeps track of the number of transactions sent by an account\r\n    /// @param data_ data to bytes to emit transaction\r\n    /// @param v_ signature parameter\r\n    /// @param r_ signature parameter\r\n    /// @param s_ signature parameter\r\n    function forward(\r\n        address token_,\r\n        uint256 amount_,\r\n        uint256 deadline_,\r\n        uint256 nonce_,\r\n        string memory data_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) external payable;\r\n\r\n    /// @notice Get the address to which any funds sent to this contract will be forwarded\r\n    /// @dev Get the address to which any funds sent to this contract will be forwarded\r\n    function destinationAddress() external view returns (address);\r\n\r\n    /// @notice Get whether the token is available\r\n    /// @dev Zero address is used to forward native coin\r\n    /// @param token_ the address of token\r\n    /// @return Return whether the token is available (true or false)\r\n    function availableTokens(address token_) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"../IERC20Upgradeable.sol\";\r\n////import \"../../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n            \r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n////import \"./ECDSAUpgradeable.sol\";\r\n////import \"../../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * _Available since v3.4._\r\n *\r\n * @custom:storage-size 52\r\n */\r\nabstract contract EIP712Upgradeable is Initializable {\r\n    /* solhint-disable var-name-mixedcase */\r\n    bytes32 private _HASHED_NAME;\r\n    bytes32 private _HASHED_VERSION;\r\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\r\n        __EIP712_init_unchained(name, version);\r\n    }\r\n\r\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n        _HASHED_NAME = hashedName;\r\n        _HASHED_VERSION = hashedVersion;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\r\n    }\r\n\r\n    function _buildDomainSeparator(\r\n        bytes32 typeHash,\r\n        bytes32 nameHash,\r\n        bytes32 versionHash\r\n    ) private view returns (bytes32) {\r\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n    }\r\n\r\n    /**\r\n     * @dev The hash of the name parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\r\n     * are a concern.\r\n     */\r\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\r\n        return _HASHED_NAME;\r\n    }\r\n\r\n    /**\r\n     * @dev The hash of the version parameter for the EIP712 domain.\r\n     *\r\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\r\n     * are a concern.\r\n     */\r\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\r\n        return _HASHED_VERSION;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/** \r\n * contracts\\KRUExchangeForwarder.sol\r\n*/\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n////import \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\r\n////import \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n////import \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\n////import \"./interfaces/IKRUExchangeForwarder.sol\";\r\n////import \"./management/ManagedUpgradeable.sol\";\r\n\r\n/// @title KRUExchangeForwarder\r\n/// @author Applicature\r\n/// @notice There is a Smart Contract that is used to forward ERC20 tokens or native coin to destination address\r\n/// @dev There is a Smart Contract that is used to forward ERC20 tokens or native coin to destination address\r\ncontract KRUExchangeForwarder is IKRUExchangeForwarder, ManagedUpgradeable, EIP712Upgradeable {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    /// @notice Store the address to which any funds sent to this contract will be forwarded\r\n    address public override destinationAddress;\r\n\r\n    /// @notice Store the addresses of tokens which be available for transfer to destination address\r\n    /// @dev Zero address is used to forward native coin\r\n    /// @return Bool whether token is available\r\n    mapping(address => bool) public override availableTokens;\r\n\r\n    /// @notice Store nonces of signers\r\n    /// @dev Store nonces of signers\r\n    mapping(address => mapping(uint256 => bool)) internal _nonces;\r\n\r\n    /// @notice Store hash to sign forward transaction\r\n    /// @dev Store computed 256 bit keccak hash\r\n    bytes32 private constant _CONTAINER_TYPEHASH =\r\n        keccak256(\"Container(address sender,address token,uint256 amount,uint256 deadline,uint256 nonce,string data)\");\r\n\r\n    /// @notice Initializes the address of management\r\n    /// @dev Initializes the address of management\r\n    /// @param management_ the address of management\r\n    /// @param destination_ the address to which any funds sent to this contract will be forwarded\r\n    function initialize(address management_, address destination_) external virtual initializer {\r\n        __Managed_init(management_);\r\n        __EIP712_init(\"KRUExchangeForwarder\", \"v1\");\r\n        _setDestinationAddress(destination_);\r\n    }\r\n\r\n    /// @notice Set destination address by admin\r\n    /// @dev Emit {DestinationSet} event\r\n    /// @param destination_ the address to which any funds sent to this contract will be forwarded\r\n    function setDestinationAddress(address destination_)\r\n        external\r\n        virtual\r\n        override\r\n        requirePermission(EXCHANGE_FORWARDER_CAN_SET_ADDRESSES)\r\n    {\r\n        _setDestinationAddress(destination_);\r\n    }\r\n\r\n    /// @notice Set addresses of tokens which be available for transfer to destination address\r\n    /// @dev Zero address is used to forward native coin\r\n    /// @param tokens_ the array of addresses of tokens\r\n    /// @param value_ whether tokens available or not (true or false)\r\n    function setAvailableTokens(address[] calldata tokens_, bool value_)\r\n        external\r\n        virtual\r\n        override\r\n        requirePermission(EXCHANGE_FORWARDER_CAN_SET_ADDRESSES)\r\n    {\r\n        for (uint256 i; i < tokens_.length; i++) {\r\n            availableTokens[tokens_[i]] = value_;\r\n        }\r\n        emit AvailableTokensSet(tokens_, value_);\r\n    }\r\n\r\n    /// @notice Forward amount of tokens or native coin to destination address\r\n    /// @dev Expire date, signature, nonce will be checked by EIP712\r\n    /// @param token_ the address of token\r\n    /// @param amount_ the amount of tokens\r\n    /// @param deadline_ expire date of signature\r\n    /// @param nonce_ the counter that keeps track of the number of transactions sent by an account\r\n    /// @param data_ data to bytes to emit transaction\r\n    /// @param v_ signature parameter\r\n    /// @param r_ signature parameter\r\n    /// @param s_ signature parameter\r\n    function forward(\r\n        address token_,\r\n        uint256 amount_,\r\n        uint256 deadline_,\r\n        uint256 nonce_,\r\n        string memory data_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) external payable virtual override {\r\n        require(availableTokens[token_], ERROR_ACCESS_DENIED);\r\n        uint256 amount = token_ == address(0) ? msg.value : amount_;\r\n        _forward(_msgSender(), token_, amount, deadline_, nonce_, data_, v_, r_, s_);\r\n    }\r\n\r\n    /// @notice Forward amount of native coin or tokens to destination address\r\n    /// @dev Expire date, signature, nonce will be checked by EIP712\r\n    /// @param sender_ the address of sender\r\n    /// @param token_ the address of token\r\n    /// @param amount_ the amount of tokens or native coin\r\n    /// @param deadline_ expire date of signature\r\n    /// @param nonce_ the counter that keeps track of the number of transactions sent by an account\r\n    /// @param data_ data to bytes to emit transaction\r\n    /// @param v_ signature parameter\r\n    /// @param r_ signature parameter\r\n    /// @param s_ signature parameter\r\n    function _forward(\r\n        address sender_,\r\n        address token_,\r\n        uint256 amount_,\r\n        uint256 deadline_,\r\n        uint256 nonce_,\r\n        string memory data_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) internal virtual {\r\n        require(!_nonces[sender_][nonce_], ERROR_ACCESS_DENIED);\r\n        require(amount_ != 0, ERROR_AMOUNT_IS_ZERO);\r\n        require(_isValidSigner(sender_, token_, amount_, deadline_, nonce_, data_, v_, r_, s_), ERROR_INVALID_SIGNER);\r\n        _nonces[sender_][nonce_] = true;\r\n        if (token_ != address(0)) {\r\n            IERC20Upgradeable(token_).safeTransferFrom(sender_, destinationAddress, amount_);\r\n        } else {\r\n            (bool success, ) = payable(destinationAddress).call{value: amount_}(\"\");\r\n            require(success, ERROR_SEND_VALUE);\r\n        }\r\n        emit Forward(sender_, destinationAddress, token_, amount_, data_);\r\n    }\r\n\r\n    /// @notice Set destination address by admin\r\n    /// @dev Emit {DestinationSet} event\r\n    /// @param destination_ the address to which any funds sent to this contract will be forwarded\r\n    function _setDestinationAddress(address destination_) internal virtual {\r\n        require(destination_ != address(0), ERROR_INVALID_ADDRESS);\r\n        destinationAddress = destination_;\r\n        emit DestinationSet(destination_);\r\n    }\r\n\r\n    /// @notice Check whether signer is valid\r\n    /// @dev Expire date, signature, nonce will be checked by EIP712\r\n    /// @param sender_ the address of sender\r\n    /// @param token_ the address of token\r\n    /// @param amount_ the amount of tokens or native coin\r\n    /// @param deadline_ expire date of signature\r\n    /// @param nonce_ the counter that keeps track of the number of transactions sent by an account\r\n    /// @param data_ data to bytes to emit transaction\r\n    /// @param v_ signature parameter\r\n    /// @param r_ signature parameter\r\n    /// @param s_ signature parameter\r\n    function _isValidSigner(\r\n        address sender_,\r\n        address token_,\r\n        uint256 amount_,\r\n        uint256 deadline_,\r\n        uint256 nonce_,\r\n        string memory data_,\r\n        uint8 v_,\r\n        bytes32 r_,\r\n        bytes32 s_\r\n    ) internal view virtual returns (bool) {\r\n        require(deadline_ > block.timestamp, ERROR_TIME_OUT);\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(_CONTAINER_TYPEHASH, sender_, token_, amount_, deadline_, nonce_, keccak256(bytes(data_)))\r\n        );\r\n        bytes32 hash = _hashTypedDataV4(structHash);\r\n        address messageSigner = ECDSAUpgradeable.recover(hash, v_, r_, s_);\r\n        return _hasPermission(messageSigner, EXCHANGE_FORWARDER_SIGNER);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"AvailableTokensSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"DestinationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data_\",\"type\":\"string\"}],\"name\":\"Forward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destinationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"forward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"management_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"contract IManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"setAvailableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"setDestinationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managementAddress_\",\"type\":\"address\"}],\"name\":\"setManagementContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KRUExchangeForwarder", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://903e9d17bb280789f5d82f618adfe25fa2bd27776280f3b211804a7895f17eea"}]}