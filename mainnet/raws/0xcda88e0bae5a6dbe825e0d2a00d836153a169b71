{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRandomNumberGenerator.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IRandomNumberGenerator {\r\n  function getRandomNumber() external;\r\n  function randomNumber() external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC721A.sol\r\n\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\nerror ApprovalQueryForNonexistentToken();\r\nerror ApproveToCaller();\r\nerror ApprovalToCurrentOwner();\r\nerror BalanceQueryForZeroAddress();\r\nerror MintedQueryForZeroAddress();\r\nerror BurnedQueryForZeroAddress();\r\nerror AuxQueryForZeroAddress();\r\nerror MintToZeroAddress();\r\nerror MintZeroQuantity();\r\nerror OwnerIndexOutOfBounds();\r\nerror OwnerQueryForNonexistentToken();\r\nerror TokenIndexOutOfBounds();\r\nerror TransferCallerNotOwnerNorApproved();\r\nerror TransferFromIncorrectOwner();\r\nerror TransferToNonERC721ReceiverImplementer();\r\nerror TransferToZeroAddress();\r\nerror URIQueryForNonexistentToken();\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n *\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n    }\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct AddressData {\r\n        // Realistically, 2**64-1 is more than enough.\r\n        uint64 balance;\r\n        // Keeps track of mint count with minimal overhead for tokenomics.\r\n        uint64 numberMinted;\r\n        // Keeps track of burn count with minimal overhead for tokenomics.\r\n        uint64 numberBurned;\r\n        // For miscellaneous variable(s) pertaining to the address\r\n        // (e.g. number of whitelist mint slots used). \r\n        // If there are multiple variables, please pack them into a uint64.\r\n        uint64 aux;\r\n    }\r\n\r\n    // The tokenId of the next token to be minted.\r\n    uint256 internal _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 internal _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than _currentIndex times\r\n        unchecked {\r\n            return _currentIndex - _burnCounter;    \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\r\n        return uint256(_addressData[owner].numberBurned);\r\n    }\r\n\r\n    /**\r\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\r\n        return _addressData[owner].aux;\r\n    }\r\n\r\n    /**\r\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal {\r\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\r\n        _addressData[owner].aux = aux;\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (curr < _currentIndex) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n                if (!ownership.burned) {\r\n                    if (ownership.addr != address(0)) {\r\n                        return ownership;\r\n                    }\r\n                    // Invariant: \r\n                    // There will always be an ownership that has an address and is not burned \r\n                    // before an ownership that does not have an address and is not burned.\r\n                    // Hence, curr will not underflow.\r\n                    while (true) {\r\n                        curr--;\r\n                        ownership = _ownerships[curr];\r\n                        if (ownership.addr != address(0)) {\r\n                            return ownership;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return tokenId < _currentIndex && !_ownerships[tokenId].burned;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity, _data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            _addressData[to].balance += uint64(quantity);\r\n            _addressData[to].numberMinted += uint64(quantity);\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n\r\n            for (uint256 i; i < quantity; i++) {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n                if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {\r\n                    revert TransferToNonERC721ReceiverImplementer();\r\n                }\r\n                updatedIndex++;\r\n            }\r\n\r\n            _currentIndex = updatedIndex;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender());\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[from].balance -= 1;\r\n            _addressData[to].balance += 1;\r\n\r\n            _ownerships[tokenId].addr = to;\r\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId),\r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId < _currentIndex) {\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[prevOwnership.addr].balance -= 1;\r\n            _addressData[prevOwnership.addr].numberBurned += 1;\r\n\r\n            // Keep track of who burned the token, and the timestamp of burning.\r\n            _ownerships[tokenId].addr = prevOwnership.addr;\r\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n            _ownerships[tokenId].burned = true;\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId),\r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId < _currentIndex) {\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\r\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked { \r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert TransferToNonERC721ReceiverImplementer();\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File hardhat/console.sol@v2.8.4\r\n\r\npragma solidity >= 0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n\tfunction _sendLogPayload(bytes memory payload) private view {\r\n\t\tuint256 payloadLength = payload.length;\r\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\r\n\t\tassembly {\r\n\t\t\tlet payloadStart := add(payload, 32)\r\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction log() internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n\t}\r\n\r\n\tfunction logInt(int p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n\t}\r\n\r\n\tfunction logUint(uint p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n\t}\r\n\r\n\tfunction logString(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction logBool(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction logAddress(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes(bytes memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes1(bytes1 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes2(bytes2 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes3(bytes3 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes4(bytes4 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes5(bytes5 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes6(bytes6 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes7(bytes7 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes8(bytes8 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes9(bytes9 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes10(bytes10 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes11(bytes11 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes12(bytes12 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes13(bytes13 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes14(bytes14 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes15(bytes15 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes16(bytes16 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes17(bytes17 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes18(bytes18 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes19(bytes19 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes20(bytes20 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes21(bytes21 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes22(bytes22 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes23(bytes23 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes24(bytes24 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes25(bytes25 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes26(bytes26 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes27(bytes27 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes28(bytes28 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes29(bytes29 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes30(bytes30 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes31(bytes31 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes32(bytes32 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n\t}\r\n\r\n\tfunction log(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction log(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction log(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n}\r\n\r\n\r\n// File contracts/AngryEggs.sol\r\n\r\n// Creators: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract AngryEggs is ERC721A, Ownable, ReentrancyGuard{\r\n    using Strings for uint256;\r\n\r\n    uint256 public price;\r\n    uint256 public reserved;\r\n    string private _baseTokenURI;\r\n    address public treasury;\r\n    IRandomNumberGenerator public randomGenerator;\r\n    bool private randomNumberReqSent;\r\n    uint256 public immutable maxSupply;\r\n\r\n    constructor(\r\n        uint256 _price,\r\n        uint256 _reserved,\r\n        address _treasury,\r\n        uint256 _maxSupply\r\n    ) ERC721A(\"The Angry Eggs\", \"ANGRYEGG\") {\r\n        price = _price;\r\n        reserved = _reserved;\r\n        treasury = _treasury;\r\n        maxSupply= _maxSupply;\r\n\r\n        _mint(treasury, reserved, '0x0', true);\r\n    }\r\n\r\n    function setRandomGenerator(address _randomGenerator) public onlyOwner {\r\n        randomGenerator = IRandomNumberGenerator(_randomGenerator);\r\n    }\r\n\r\n    function numberMinted(address owner) public view returns (uint256) {\r\n        return _numberMinted(owner);\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    function setBaseURI(string calldata baseURI) external onlyOwner {\r\n        _baseTokenURI = baseURI;\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        if(randomGenerator.randomNumber() == 0){\r\n            return _baseTokenURI;\r\n        }\r\n        require(_exists(tokenId), \"nonexistent token\");\r\n        uint256 tokenPath = (startingIndex() + tokenId) % maxSupply;\r\n\r\n        return string(abi.encodePacked(_baseTokenURI, tokenPath.toString()));\r\n    }\r\n\r\n    function transferFunds(uint256 totalCost) private {\r\n        require(msg.value == totalCost, \"wrong amount\");\r\n        (bool success, ) = payable(treasury).call{value: totalCost}(\"\");\r\n        require(success, \"transfer failed\");\r\n    }\r\n\r\n    function mint(\r\n        uint256 quantity\r\n    ) public payable {\r\n        require(totalSupply() + quantity <= maxSupply, \"max supply reached\");\r\n        uint256 totalCost = price * quantity;\r\n        require(msg.value == totalCost, \"Wrong amount sent\");\r\n        transferFunds(totalCost);\r\n        _mint(msg.sender, quantity, '', true);\r\n    }\r\n\r\n    function startingIndex() public view returns(uint256) {\r\n        return randomGenerator.randomNumber();\r\n    }\r\n\r\n    function reveal() external onlyOwner {\r\n        if (!randomNumberReqSent) {\r\n            randomNumberReqSent = true;\r\n            randomGenerator.getRandomNumber();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/extensions/ERC721ABurnable.sol\r\n\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/**\r\n * @title ERC721A Burnable Token\r\n * @dev ERC721A Token that can be irreversibly burned (destroyed).\r\n */\r\nabstract contract ERC721ABurnable is Context, ERC721A {\r\n\r\n    /**\r\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own `tokenId` or be an approved operator.\r\n     */\r\n    function burn(uint256 tokenId) public virtual {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender());\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        _burn(tokenId);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/extensions/ERC721AOwnersExplicit.sol\r\n\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nerror AllOwnershipsHaveBeenSet();\r\nerror QuantityMustBeNonZero();\r\nerror NoTokensMintedYet();\r\n\r\nabstract contract ERC721AOwnersExplicit is ERC721A {\r\n    uint256 public nextOwnerToExplicitlySet;\r\n\r\n    /**\r\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\r\n     */\r\n    function _setOwnersExplicit(uint256 quantity) internal {\r\n        if (quantity == 0) revert QuantityMustBeNonZero();\r\n        if (_currentIndex == 0) revert NoTokensMintedYet();\r\n        uint256 _nextOwnerToExplicitlySet = nextOwnerToExplicitlySet;\r\n        if (_nextOwnerToExplicitlySet >= _currentIndex) revert AllOwnershipsHaveBeenSet();\r\n\r\n        // Index underflow is impossible.\r\n        // Counter or index overflow is incredibly unrealistic.\r\n        unchecked {\r\n            uint256 endIndex = _nextOwnerToExplicitlySet + quantity - 1;\r\n\r\n            // Set the end index to be the last token index\r\n            if (endIndex + 1 > _currentIndex) {\r\n                endIndex = _currentIndex - 1;\r\n            }\r\n\r\n            for (uint256 i = _nextOwnerToExplicitlySet; i <= endIndex; i++) {\r\n                if (_ownerships[i].addr == address(0) && !_ownerships[i].burned) {\r\n                    TokenOwnership memory ownership = ownershipOf(i);\r\n                    _ownerships[i].addr = ownership.addr;\r\n                    _ownerships[i].startTimestamp = ownership.startTimestamp;\r\n                }\r\n            }\r\n\r\n            nextOwnerToExplicitlySet = endIndex + 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/ERC721ABurnableMock.sol\r\n\r\n// Creators: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract ERC721ABurnableMock is ERC721A, ERC721ABurnable {\r\n    constructor(string memory name_, string memory symbol_) ERC721A(name_, symbol_) {}\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 quantity) public {\r\n        _safeMint(to, quantity);\r\n    }\r\n    \r\n    function getOwnershipAt(uint256 index) public view returns (TokenOwnership memory) {\r\n        return _ownerships[index];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/ERC721ABurnableOwnersExplicitMock.sol\r\n\r\n// Creators: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ncontract ERC721ABurnableOwnersExplicitMock is ERC721A, ERC721ABurnable, ERC721AOwnersExplicit {\r\n    constructor(string memory name_, string memory symbol_) ERC721A(name_, symbol_) {}\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 quantity) public {\r\n        _safeMint(to, quantity);\r\n    }\r\n\r\n    function setOwnersExplicit(uint256 quantity) public {\r\n        _setOwnersExplicit(quantity);\r\n    }\r\n\r\n    function getOwnershipAt(uint256 index) public view returns (TokenOwnership memory) {\r\n        return _ownerships[index];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/ERC721AExplicitOwnershipMock.sol\r\n\r\n// Creators: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract ERC721AOwnersExplicitMock is ERC721AOwnersExplicit {\r\n    constructor(string memory name_, string memory symbol_) ERC721A(name_, symbol_) {}\r\n\r\n    function safeMint(address to, uint256 quantity) public {\r\n        _safeMint(to, quantity);\r\n    }\r\n\r\n    function setOwnersExplicit(uint256 quantity) public {\r\n        _setOwnersExplicit(quantity);\r\n    }\r\n\r\n    function getOwnershipAt(uint256 index) public view returns (TokenOwnership memory) {\r\n        return _ownerships[index];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/ERC721AGasReporterMock.sol\r\n\r\n// Creators: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract ERC721AGasReporterMock is ERC721A {\r\n    constructor(string memory name_, string memory symbol_) ERC721A(name_, symbol_) {}\r\n\r\n    function safeMintOne(address to) public {\r\n        _safeMint(to, 1);\r\n    }\r\n\r\n    function mintOne(address to) public {\r\n        _mint(to, 1, '', false);\r\n    }\r\n\r\n    function safeMintTen(address to) public {\r\n        _safeMint(to, 10);\r\n    }\r\n\r\n    function mintTen(address to) public {\r\n        _mint(to, 10, '', false);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/ERC721AMock.sol\r\n\r\n// Creators: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract ERC721AMock is ERC721A {\r\n    constructor(string memory name_, string memory symbol_) ERC721A(name_, symbol_) {}\r\n\r\n    function numberMinted(address owner) public view returns (uint256) {\r\n        return _numberMinted(owner);\r\n    }\r\n\r\n    function getAux(address owner) public view returns (uint64) {\r\n        return _getAux(owner);\r\n    }\r\n\r\n    function setAux(address owner, uint64 aux) public {\r\n        _setAux(owner, aux);\r\n    }\r\n\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI();\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function safeMint(address to, uint256 quantity) public {\r\n        _safeMint(to, quantity);\r\n    }\r\n\r\n    function safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) public {\r\n        _safeMint(to, quantity, _data);\r\n    }\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) public {\r\n        _mint(to, quantity, _data, safe);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mocks/ERC721ReceiverMock.sol\r\n\r\n// Creators: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract ERC721ReceiverMock is IERC721Receiver {\r\n    enum Error {\r\n        None,\r\n        RevertWithMessage,\r\n        RevertWithoutMessage,\r\n        Panic\r\n    }\r\n\r\n    bytes4 private immutable _retval;\r\n\r\n    event Received(address operator, address from, uint256 tokenId, bytes data, uint256 gas);\r\n\r\n    constructor(bytes4 retval) {\r\n        _retval = retval;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public override returns (bytes4) {\r\n        emit Received(operator, from, tokenId, data, 20000);\r\n        return _retval;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/vrf/LinkTokenInterface.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n  function name() external view returns (string memory tokenName);\r\n\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n  function transferAndCall(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external returns (bool success);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool success);\r\n}\r\n\r\n\r\n// File contracts/vrf/VRFRequestIDBase.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract VRFRequestIDBase {\r\n  /**\r\n   * @notice returns the seed which is actually input to the VRF coordinator\r\n   *\r\n   * @dev To prevent repetition of VRF output due to repetition of the\r\n   * @dev user-supplied seed, that seed is combined in a hash with the\r\n   * @dev user-specific nonce, and the address of the consuming contract. The\r\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n   * @dev the final seed, but the nonce does protect against repetition in\r\n   * @dev requests which are included in a single block.\r\n   *\r\n   * @param _userSeed VRF seed input provided by user\r\n   * @param _requester Address of the requesting contract\r\n   * @param _nonce User-specific nonce at the time of the request\r\n   */\r\n  function makeVRFInputSeed(\r\n    bytes32 _keyHash,\r\n    uint256 _userSeed,\r\n    address _requester,\r\n    uint256 _nonce\r\n  ) internal pure returns (uint256) {\r\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the id for this request\r\n   * @param _keyHash The serviceAgreement ID to be used for this request\r\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n   * @return The id for this request\r\n   *\r\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n   * @dev contract, but the one generated by makeVRFInputSeed\r\n   */\r\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n\r\n\r\n// File contracts/vrf/VRFConsumerBase.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomness the VRF output\r\n   */\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\r\n\r\n  /**\r\n   * @dev In order to keep backwards compatibility we have kept the user\r\n   * seed field around. We remove the use of it because given that the blockhash\r\n   * enters later, it overrides whatever randomness the used seed provides.\r\n   * Given that it adds no security, and can easily lead to misunderstandings,\r\n   * we have removed it from usage and can now provide a simpler API.\r\n   */\r\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\r\n\r\n  /**\r\n   * @notice requestRandomness initiates a request for VRF output given _seed\r\n   *\r\n   * @dev The fulfillRandomness method receives the output, once it's provided\r\n   * @dev by the Oracle, and verified by the vrfCoordinator.\r\n   *\r\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n   * @dev the _fee must exceed the fee specified during registration of the\r\n   * @dev _keyHash.\r\n   *\r\n   * @dev The _seed parameter is vestigial, and is kept only for API\r\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n   * @dev your own randomness, here, but it's not necessary because the VRF\r\n   * @dev oracle will mix the hash of the block containing your request into the\r\n   * @dev VRF seed it ultimately uses.\r\n   *\r\n   * @param _keyHash ID of public key against which randomness is generated\r\n   * @param _fee The amount of LINK to send with the request\r\n   *\r\n   * @return requestId unique ID for this request\r\n   *\r\n   * @dev The returned requestId can be used to distinguish responses to\r\n   * @dev concurrent requests. It is passed as the first argument to\r\n   * @dev fulfillRandomness.\r\n   */\r\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\r\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n    // the hash of the block containing this request to obtain the seed/input\r\n    // which is finally passed to the VRF cryptographic machinery.\r\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\r\n    // nonces[_keyHash] must stay in sync with\r\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n    // This provides protection against the user repeating their input seed,\r\n    // which would result in a predictable/duplicate output, if multiple such\r\n    // requests appeared in the same block.\r\n    nonces[_keyHash] = nonces[_keyHash] + 1;\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface internal immutable LINK;\r\n  address private immutable vrfCoordinator;\r\n\r\n  // Nonces for each VRF key from which randomness has been requested.\r\n  //\r\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\r\n    private nonces;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   * @param _link address of LINK token contract\r\n   *\r\n   * @dev https://docs.chain.link/docs/link-token-contracts\r\n   */\r\n  constructor(address _vrfCoordinator, address _link) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IAngryEggs.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IAngryEggs {\r\n  function maxSupply() external view returns(uint256);\r\n}\r\n\r\n\r\n// File contracts/RandomNumberGenerator.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n/// @title A title that should describe the contract/interface\r\n/// https://docs.chain.link/docs/vrf-contracts/\r\n/// You can get the keyhash and vrfCoordinator from here https://docs.chain.link/docs/vrf-contracts/\r\ncontract RandomNumberGenerator is VRFConsumerBase, Ownable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public fee;\r\n  uint256 public randomNumber;\r\n  bytes32 public keyHash;\r\n  bytes32 public latestRequestId;\r\n  address public eggs;\r\n\r\n  /// @dev Ctor\r\n  /// @param vrfCoordinator: address of the VRF coordinator\r\n  /// @param linkToken: address of the LINK token\r\n  constructor(address vrfCoordinator, address linkToken, bytes32 _keyHash) \r\n    VRFConsumerBase(vrfCoordinator, linkToken) {\r\n      keyHash = _keyHash;\r\n    }\r\n\r\n  /// @notice Set the address for the eggs\r\n  /// @param _eggs: address of the collection\r\n  function setEggs(address _eggs) external onlyOwner {\r\n    eggs = _eggs;\r\n  }\r\n\r\n  /// @notice Change the fee\r\n  /// @param _fee: new fee (in LINK)\r\n  function setFee(uint256 _fee) external onlyOwner {\r\n    fee = _fee;\r\n  }\r\n\r\n  /// @notice Change the keyHash\r\n  /// @param _keyHash: new keyHash\r\n  function setKeyHash(bytes32 _keyHash) external onlyOwner {\r\n    keyHash = _keyHash;\r\n  }\r\n\r\n  /// @notice It allows the admin to withdraw tokens sent to the contract\r\n  /// @dev Only callable by owner.\r\n  /// @param token: the address of the token to withdraw\r\n  /// @param amount: the number of token amount to withdraw\r\n  function withdrawTokens(address token, uint256 amount) external onlyOwner {\r\n    IERC20(token).safeTransfer(_msgSender(), amount);\r\n  }\r\n\r\n  /// @notice Request randomness from a user-provided seed\r\n  function getRandomNumber() external {\r\n    require(msg.sender == eggs, \"only eggs\");\r\n    require(keyHash != bytes32(0), \"invalid key hash\");\r\n    require(LINK.balanceOf(address(this)) >= fee, \"insufficient LINK tokens\");\r\n\r\n    latestRequestId = requestRandomness(keyHash, fee);\r\n  }\r\n\r\n  /// @notice Callback function used by ChainLink's VRF Coordinator\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n    require(latestRequestId == requestId, \"Wrong requestId\");\r\n    randomNumber = randomness % IAngryEggs(eggs).maxSupply();\r\n\r\n    if(randomNumber == 0) {\r\n      randomNumber += 1;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/mocks/RandomNumberGeneratorMock.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\ncontract RandomNumberGeneratorMock {\r\n  uint256 public randomNumberTmp;\r\n  uint256 public randomNumber;\r\n  \r\n  function setEggs(address eggs) external {}\r\n\r\n  function setRandomNumber(uint256 _randomNumber) external {\r\n    randomNumberTmp = _randomNumber % 1000;\r\n  } \r\n\r\n  // dummy implementation. We don't need to ask chainlink to send the random number\r\n  // we basically tell what the random number is. This is enough for our test purposes\r\n  function getRandomNumber() external {\r\n    randomNumber = randomNumberTmp;\r\n  } \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserved\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintedQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomNumberGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomGenerator\",\"type\":\"address\"}],\"name\":\"setRandomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AngryEggs", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000000000000000000000000000006a94d74f4300000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000ebe54b2d83b26f46848f5432c02fb091e16027e80000000000000000000000000000000000000000000000000000000000002710", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f51a630eb2ae322c84661af014d4b93a19fac4791165811d08ee1ff65a05af23"}]}