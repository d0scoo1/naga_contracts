{"status": "1", "message": "OK", "result": [{"SourceCode": "// Sources flattened with hardhat v2.8.4 https://hardhat.org\r\n\r\n// File contracts/utils/AddressUpgradeable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity =0.8.9;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, 'Address: low-level call failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\r\n        require(isContract(target), 'Address: call to non-contract');\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, 'Address: low-level static call failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), 'Address: static call to non-contract');\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/proxy/Initializable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\r\n\r\npragma solidity =0.8.9;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice\r\n     */\r\n    modifier initializer() {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n        // contract may have been reentered\r\n        require(_initializing ? _isConstructor() : !_initialized, 'CIAI');\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} modifier, directly or indirectly\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, 'CINI');\r\n        _;\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUnifarmCohort.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\n/// @title IUnifarmCohort Interface\r\n/// @author UNIFARM\r\n/// @notice unifarm cohort external functions\r\n/// @dev All function calls are currently implemented without any side effects\r\n\r\ninterface IUnifarmCohort {\r\n    /**\r\n    @notice stake handler\r\n    @dev function called by only nft manager\r\n    @param fid farm id where you want to stake\r\n    @param tokenId NFT token Id\r\n    @param account user wallet Address\r\n    @param referralAddress referral address for this stake\r\n   */\r\n\r\n    function stake(\r\n        uint32 fid,\r\n        uint256 tokenId,\r\n        address account,\r\n        address referralAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice unStake handler\r\n     * @dev called by nft manager only\r\n     * @param user user wallet Address\r\n     * @param tokenId NFT Token Id\r\n     * @param flag 1, if owner is caller\r\n     */\r\n\r\n    function unStake(\r\n        address user,\r\n        uint256 tokenId,\r\n        uint256 flag\r\n    ) external;\r\n\r\n    /**\r\n     * @notice allow user to collect rewards before cohort end\r\n     * @dev called by NFT manager\r\n     * @param user user address\r\n     * @param tokenId NFT Token Id\r\n     */\r\n\r\n    function collectPrematureRewards(address user, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @notice purchase a booster pack for particular token Id\r\n     * @dev called by NFT manager or owner\r\n     * @param user user wallet address who is willing to buy booster\r\n     * @param bpid booster pack id to purchase booster\r\n     * @param tokenId NFT token Id which booster to take\r\n     */\r\n\r\n    function buyBooster(\r\n        address user,\r\n        uint256 bpid,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @notice set portion amount for particular tokenId\r\n     * @dev called by only owner access\r\n     * @param tokenId NFT token Id\r\n     * @param stakedAmount new staked amount\r\n     */\r\n\r\n    function setPortionAmount(uint256 tokenId, uint256 stakedAmount) external;\r\n\r\n    /**\r\n     * @notice disable booster for particular tokenId\r\n     * @dev called by only owner access.\r\n     * @param tokenId NFT token Id\r\n     */\r\n\r\n    function disableBooster(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev rescue Ethereum\r\n     * @param withdrawableAddress to address\r\n     * @param amount to withdraw\r\n     * @return Transaction status\r\n     */\r\n\r\n    function safeWithdrawEth(address withdrawableAddress, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev rescue all available tokens in a cohort\r\n     * @param tokens list of tokens\r\n     * @param amounts list of amounts to withdraw respectively\r\n     */\r\n\r\n    function safeWithdrawAll(\r\n        address withdrawableAddress,\r\n        address[] memory tokens,\r\n        uint256[] memory amounts\r\n    ) external;\r\n\r\n    /**\r\n     * @notice obtain staking details\r\n     * @param tokenId - NFT Token id\r\n     * @return fid the cohort farm id\r\n     * @return nftTokenId the NFT token id\r\n     * @return stakedAmount denotes staked amount\r\n     * @return startBlock start block of particular user stake\r\n     * @return endBlock end block of particular user stake\r\n     * @return originalOwner wallet address\r\n     * @return referralAddress the referral address of stake\r\n     * @return isBooster denotes booster availability\r\n     */\r\n\r\n    function viewStakingDetails(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 fid,\r\n            uint256 nftTokenId,\r\n            uint256 stakedAmount,\r\n            uint256 startBlock,\r\n            uint256 endBlock,\r\n            address originalOwner,\r\n            address referralAddress,\r\n            bool isBooster\r\n        );\r\n\r\n    /**\r\n     * @notice emit on each booster purchase\r\n     * @param nftTokenId NFT Token Id\r\n     * @param user user wallet address who bought the booster\r\n     * @param bpid booster pack id\r\n     */\r\n\r\n    event BoosterBuyHistory(uint256 indexed nftTokenId, address indexed user, uint256 bpid);\r\n\r\n    /**\r\n     * @notice emit on each claim\r\n     * @param fid farm id.\r\n     * @param tokenId NFT Token Id\r\n     * @param userAddress NFT owner wallet address\r\n     * @param referralAddress referral wallet address\r\n     * @param rValue Aggregated R Value\r\n     */\r\n\r\n    event Claim(uint32 fid, uint256 indexed tokenId, address indexed userAddress, address indexed referralAddress, uint256 rValue);\r\n\r\n    /**\r\n     * @notice emit on each stake\r\n     * @dev helps to derive referrals of unifarm cohort\r\n     * @param tokenId NFT Token Id\r\n     * @param referralAddress referral Wallet Address\r\n     * @param stakedAmount user staked amount\r\n     * @param fid farm id\r\n     */\r\n\r\n    event ReferedBy(uint256 indexed tokenId, address indexed referralAddress, uint256 stakedAmount, uint32 fid);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUnifarmRewardRegistryUpgradeable.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\ninterface IUnifarmRewardRegistryUpgradeable {\r\n    /**\r\n     * @notice function is used to distribute cohort rewards\r\n     * @dev only cohort contract can access this function\r\n     * @param cohortId cohort contract address\r\n     * @param userAddress user wallet address\r\n     * @param influencerAddress influencer wallet address\r\n     * @param rValue Aggregated R value\r\n     * @param hasContainsWrappedToken has contain wrap token in rewards\r\n     */\r\n\r\n    function distributeRewards(\r\n        address cohortId,\r\n        address userAddress,\r\n        address influencerAddress,\r\n        uint256 rValue,\r\n        bool hasContainsWrappedToken\r\n    ) external;\r\n\r\n    /**\r\n     * @notice admin can add more influencers with some percentage\r\n     * @dev can only be called by owner or multicall\r\n     * @param userAddresses list of influencers wallet addresses\r\n     * @param referralPercentages list of referral percentages\r\n     */\r\n\r\n    function addInfluencers(address[] memory userAddresses, uint256[] memory referralPercentages) external;\r\n\r\n    /**\r\n     * @notice update multicall contract address\r\n     * @dev only called by owner access\r\n     * @param newMultiCallAddress new multicall address\r\n     */\r\n\r\n    function updateMulticall(address newMultiCallAddress) external;\r\n\r\n    /**\r\n     * @notice update default referral percenatge\r\n     * @dev can only be called by owner or multicall\r\n     * @param newRefPercentage referral percentage in 3 decimals\r\n     */\r\n\r\n    function updateRefPercentage(uint256 newRefPercentage) external;\r\n\r\n    /**\r\n     * @notice set reward tokens for a particular cohort\r\n     * @dev function can be called by only owner\r\n     * @param cohortId cohort contract address\r\n     * @param rewards per block rewards in bytes\r\n     */\r\n\r\n    function setRewardTokenDetails(address cohortId, bytes calldata rewards) external;\r\n\r\n    /**\r\n     * @notice set reward cap for particular cohort\r\n     * @dev function can be called by only owner\r\n     * @param cohortId cohort address\r\n     * @param rewardTokenAddresses reward token addresses\r\n     * @param rewards rewards available\r\n     * @return Transaction Status\r\n     */\r\n\r\n    function setRewardCap(\r\n        address cohortId,\r\n        address[] memory rewardTokenAddresses,\r\n        uint256[] memory rewards\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @notice rescue ethers\r\n     * @dev can called by only owner in rare sitution\r\n     * @param withdrawableAddress withdrawable address\r\n     * @param amount to send\r\n     * @return Transaction Status\r\n     */\r\n\r\n    function safeWithdrawEth(address withdrawableAddress, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n      @notice withdraw list of erc20 tokens in emergency sitution\r\n      @dev can called by only owner on worst sitution  \r\n      @param withdrawableAddress withdrawble wallet address\r\n      @param tokens list of token address\r\n      @param amounts list of amount to withdraw\r\n     */\r\n\r\n    function safeWithdrawAll(\r\n        address withdrawableAddress,\r\n        address[] memory tokens,\r\n        uint256[] memory amounts\r\n    ) external;\r\n\r\n    /**\r\n     * @notice derive reward tokens for a specfic cohort\r\n     * @param cohortId cohort address\r\n     * @return rewardTokens array of reward token address\r\n     * @return pbr array of per block reward\r\n     */\r\n\r\n    function getRewardTokens(address cohortId) external view returns (address[] memory rewardTokens, uint256[] memory pbr);\r\n\r\n    /**\r\n     * @notice get influencer referral percentage\r\n     * @return referralPercentage the referral percentage\r\n     */\r\n\r\n    function getInfluencerReferralPercentage(address influencerAddress) external view returns (uint256 referralPercentage);\r\n\r\n    /**\r\n     * @notice emit when referral percetage updated\r\n     * @param newRefPercentage - new referral percentage\r\n     */\r\n    event UpdatedRefPercentage(uint256 newRefPercentage);\r\n\r\n    /**\r\n     * @notice set reward token details\r\n     * @param cohortId - cohort address\r\n     * @param rewards - list of token address and rewards\r\n     */\r\n    event SetRewardTokenDetails(address indexed cohortId, bytes rewards);\r\n}\r\n\r\n\r\n// File contracts/library/CheckPointReward.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\n/// @title CheckPointReward library\r\n/// @author UNIFARM\r\n/// @notice help to do a calculation of various checkpoints.\r\n/// @dev all the functions are internally used in the protocol.\r\n\r\nlibrary CheckPointReward {\r\n    /**\r\n     * @dev help to find block difference\r\n     * @param from from the blockNumber\r\n     * @param to till the blockNumber\r\n     * @return the blockDifference\r\n     */\r\n\r\n    function getBlockDifference(uint256 from, uint256 to) internal pure returns (uint256) {\r\n        return to - from;\r\n    }\r\n\r\n    /**\r\n     * @dev calculate number of checkpoint\r\n     * @param from from blockNumber\r\n     * @param to till blockNumber\r\n     * @param epochBlocks epoch blocks length\r\n     * @return checkpoint number of checkpoint\r\n     */\r\n\r\n    function getCheckpoint(\r\n        uint256 from,\r\n        uint256 to,\r\n        uint256 epochBlocks\r\n    ) internal pure returns (uint256) {\r\n        uint256 blockDifference = getBlockDifference(from, to);\r\n        return uint256(blockDifference / epochBlocks);\r\n    }\r\n\r\n    /**\r\n     * @dev derive current check point in unifarm cohort\r\n     * @dev it will be maximum to unifarm cohort endBlock\r\n     * @param startBlock start block of a unifarm cohort\r\n     * @param endBlock end block of a unifarm cohort\r\n     * @param epochBlocks number of blocks in one epoch\r\n     * @return checkpoint the current checkpoint in unifarm cohort\r\n     */\r\n\r\n    function getCurrentCheckpoint(\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        uint256 epochBlocks\r\n    ) internal view returns (uint256 checkpoint) {\r\n        uint256 yfEndBlock = block.number;\r\n        if (yfEndBlock > endBlock) {\r\n            yfEndBlock = endBlock;\r\n        }\r\n        checkpoint = getCheckpoint(startBlock, yfEndBlock, epochBlocks);\r\n    }\r\n\r\n    /**\r\n     * @dev derive start check point of user staking\r\n     * @param startBlock start block\r\n     * @param userStakedBlock block on user staked\r\n     * @param epochBlocks number of block in epoch\r\n     * @return checkpoint the start checkpoint of a user\r\n     */\r\n\r\n    function getStartCheckpoint(\r\n        uint256 startBlock,\r\n        uint256 userStakedBlock,\r\n        uint256 epochBlocks\r\n    ) internal pure returns (uint256 checkpoint) {\r\n        checkpoint = getCheckpoint(startBlock, userStakedBlock, epochBlocks);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/library/TransferHelpers.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\n// solhint-disable  avoid-low-level-calls\r\n\r\n/// @title TransferHelpers library\r\n/// @author UNIFARM\r\n/// @notice handles token transfers and ethereum transfers for protocol\r\n/// @dev all the functions are internally used in the protocol\r\n\r\nlibrary TransferHelpers {\r\n    /**\r\n     * @dev make sure about approval before use this function\r\n     * @param target A ERC20 token address\r\n     * @param sender sender wallet address\r\n     * @param recipient receiver wallet Address\r\n     * @param amount number of tokens to transfer\r\n     */\r\n\r\n    function safeTransferFrom(\r\n        address target,\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = target.call(abi.encodeWithSelector(0x23b872dd, sender, recipient, amount));\r\n        require(success && data.length > 0, 'STFF');\r\n    }\r\n\r\n    /**\r\n     * @notice transfer any erc20 token\r\n     * @param target ERC20 token address\r\n     * @param to receiver wallet address\r\n     * @param amount number of tokens to transfer\r\n     */\r\n\r\n    function safeTransfer(\r\n        address target,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = target.call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && data.length > 0, 'STF');\r\n    }\r\n\r\n    /**\r\n     * @notice transfer parent chain token\r\n     * @param to receiver wallet address\r\n     * @param value of eth to transfer\r\n     */\r\n\r\n    function safeTransferParentChainToken(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: uint128(value)}(new bytes(0));\r\n        require(success, 'STPCF');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/abstract/CohortFactory.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\nabstract contract CohortFactory {\r\n    /**\r\n     * @notice factory owner\r\n     * @return owner\r\n     */\r\n    function owner() public view virtual returns (address);\r\n\r\n    /**\r\n     * @notice derive storage contracts\r\n     * @return registry contract address\r\n     * @return nftManager contract address\r\n     * @return rewardRegistry contract address\r\n     */\r\n\r\n    function getStorageContracts()\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            address registry,\r\n            address nftManager,\r\n            address rewardRegistry\r\n        );\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity =0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUnifarmCohortRegistryUpgradeable.sol\r\n\r\npragma solidity =0.8.9;\r\npragma abicoder v2;\r\n\r\n/// @title IUnifarmCohortRegistryUpgradeable Interface\r\n/// @author UNIFARM\r\n/// @notice All External functions of Unifarm Cohort Registry.\r\n\r\ninterface IUnifarmCohortRegistryUpgradeable {\r\n    /**\r\n     * @notice set tokenMetaData for a particular cohort farm\r\n     * @dev only called by owner access or multicall\r\n     * @param cohortId cohort address\r\n     * @param fid_ farm id\r\n     * @param farmToken_ farm token address\r\n     * @param userMinStake_ user minimum stake\r\n     * @param userMaxStake_ user maximum stake\r\n     * @param totalStakeLimit_ total stake limit\r\n     * @param decimals_ token decimals\r\n     * @param skip_ it can be skip or not during unstake\r\n     */\r\n\r\n    function setTokenMetaData(\r\n        address cohortId,\r\n        uint32 fid_,\r\n        address farmToken_,\r\n        uint256 userMinStake_,\r\n        uint256 userMaxStake_,\r\n        uint256 totalStakeLimit_,\r\n        uint8 decimals_,\r\n        bool skip_\r\n    ) external;\r\n\r\n    /**\r\n     * @notice a function to set particular cohort details\r\n     * @dev only called by owner access or multicall\r\n     * @param cohortId cohort address\r\n     * @param cohortVersion_ cohort version\r\n     * @param startBlock_ start block of a cohort\r\n     * @param endBlock_ end block of a cohort\r\n     * @param epochBlocks_ epochBlocks of a cohort\r\n     * @param hasLiquidityMining_ true if lp tokens can be stake here\r\n     * @param hasContainsWrappedToken_ true if wTokens exist in rewards\r\n     * @param hasCohortLockinAvaliable_ cohort lockin flag\r\n     */\r\n\r\n    function setCohortDetails(\r\n        address cohortId,\r\n        string memory cohortVersion_,\r\n        uint256 startBlock_,\r\n        uint256 endBlock_,\r\n        uint256 epochBlocks_,\r\n        bool hasLiquidityMining_,\r\n        bool hasContainsWrappedToken_,\r\n        bool hasCohortLockinAvaliable_\r\n    ) external;\r\n\r\n    /**\r\n     * @notice to add a booster pack in a particular cohort\r\n     * @dev only called by owner access or multicall\r\n     * @param cohortId_ cohort address\r\n     * @param paymentToken_ payment token address\r\n     * @param boosterVault_ booster vault address\r\n     * @param bpid_ booster pack Id\r\n     * @param boosterPackAmount_ booster pack amount\r\n     */\r\n\r\n    function addBoosterPackage(\r\n        address cohortId_,\r\n        address paymentToken_,\r\n        address boosterVault_,\r\n        uint256 bpid_,\r\n        uint256 boosterPackAmount_\r\n    ) external;\r\n\r\n    /**\r\n     * @notice update multicall contract address\r\n     * @dev only called by owner access\r\n     * @param newMultiCallAddress new multicall address\r\n     */\r\n\r\n    function updateMulticall(address newMultiCallAddress) external;\r\n\r\n    /**\r\n     * @notice lock particular cohort contract\r\n     * @dev only called by owner access or multicall\r\n     * @param cohortId cohort contract address\r\n     * @param status true for lock vice-versa false for unlock\r\n     */\r\n\r\n    function setWholeCohortLock(address cohortId, bool status) external;\r\n\r\n    /**\r\n     * @notice lock particular cohort contract action. (`STAKE` | `UNSTAKE`)\r\n     * @dev only called by owner access or multicall\r\n     * @param cohortId cohort address\r\n     * @param actionToLock magic value STAKE/UNSTAKE\r\n     * @param status true for lock vice-versa false for unlock\r\n     */\r\n\r\n    function setCohortLockStatus(\r\n        address cohortId,\r\n        bytes4 actionToLock,\r\n        bool status\r\n    ) external;\r\n\r\n    /**\r\n     * @notice lock the particular farm action (`STAKE` | `UNSTAKE`) in a cohort\r\n     * @param cohortSalt mixture of cohortId and tokenId\r\n     * @param actionToLock magic value STAKE/UNSTAKE\r\n     * @param status true for lock vice-versa false for unlock\r\n     */\r\n\r\n    function setCohortTokenLockStatus(\r\n        bytes32 cohortSalt,\r\n        bytes4 actionToLock,\r\n        bool status\r\n    ) external;\r\n\r\n    /**\r\n     * @notice validate cohort stake locking status\r\n     * @param cohortId cohort address\r\n     * @param farmId farm Id\r\n     */\r\n\r\n    function validateStakeLock(address cohortId, uint32 farmId) external view;\r\n\r\n    /**\r\n     * @notice validate cohort unstake locking status\r\n     * @param cohortId cohort address\r\n     * @param farmId farm Id\r\n     */\r\n\r\n    function validateUnStakeLock(address cohortId, uint32 farmId) external view;\r\n\r\n    /**\r\n     * @notice get farm token details in a specific cohort\r\n     * @param cohortId particular cohort address\r\n     * @param farmId farmId of particular cohort\r\n     * @return fid farm Id\r\n     * @return farmToken farm Token Address\r\n     * @return userMinStake amount that user can minimum stake\r\n     * @return userMaxStake amount that user can maximum stake\r\n     * @return totalStakeLimit total stake limit for the specific farm\r\n     * @return decimals farm token decimals\r\n     * @return skip it can be skip or not during unstake\r\n     */\r\n\r\n    function getCohortToken(address cohortId, uint32 farmId)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 fid,\r\n            address farmToken,\r\n            uint256 userMinStake,\r\n            uint256 userMaxStake,\r\n            uint256 totalStakeLimit,\r\n            uint8 decimals,\r\n            bool skip\r\n        );\r\n\r\n    /**\r\n     * @notice get specific cohort details\r\n     * @param cohortId cohort address\r\n     * @return cohortVersion specific cohort version\r\n     * @return startBlock start block of a unifarm cohort\r\n     * @return endBlock end block of a unifarm cohort\r\n     * @return epochBlocks epoch blocks in particular cohort\r\n     * @return hasLiquidityMining indicator for liquidity mining\r\n     * @return hasContainsWrappedToken true if contains wrapped token in cohort rewards\r\n     * @return hasCohortLockinAvaliable denotes cohort lockin\r\n     */\r\n\r\n    function getCohort(address cohortId)\r\n        external\r\n        view\r\n        returns (\r\n            string memory cohortVersion,\r\n            uint256 startBlock,\r\n            uint256 endBlock,\r\n            uint256 epochBlocks,\r\n            bool hasLiquidityMining,\r\n            bool hasContainsWrappedToken,\r\n            bool hasCohortLockinAvaliable\r\n        );\r\n\r\n    /**\r\n     * @notice get booster pack details for a specific cohort\r\n     * @param cohortId cohort address\r\n     * @param bpid booster pack Id\r\n     * @return cohortId_ cohort address\r\n     * @return paymentToken_ payment token address\r\n     * @return boosterVault booster vault address\r\n     * @return boosterPackAmount booster pack amount\r\n     */\r\n\r\n    function getBoosterPackDetails(address cohortId, uint256 bpid)\r\n        external\r\n        view\r\n        returns (\r\n            address cohortId_,\r\n            address paymentToken_,\r\n            address boosterVault,\r\n            uint256 boosterPackAmount\r\n        );\r\n\r\n    /**\r\n     * @notice emit on each farm token update\r\n     * @param cohortId cohort address\r\n     * @param farmToken farm token address\r\n     * @param fid farm Id\r\n     * @param userMinStake amount that user can minimum stake\r\n     * @param userMaxStake amount that user can maximum stake\r\n     * @param totalStakeLimit total stake limit for the specific farm\r\n     * @param decimals farm token decimals\r\n     * @param skip it can be skip or not during unstake\r\n     */\r\n\r\n    event TokenMetaDataDetails(\r\n        address indexed cohortId,\r\n        address indexed farmToken,\r\n        uint32 indexed fid,\r\n        uint256 userMinStake,\r\n        uint256 userMaxStake,\r\n        uint256 totalStakeLimit,\r\n        uint8 decimals,\r\n        bool skip\r\n    );\r\n\r\n    /**\r\n     * @notice emit on each update of cohort details\r\n     * @param cohortId cohort address\r\n     * @param cohortVersion specific cohort version\r\n     * @param startBlock start block of a unifarm cohort\r\n     * @param endBlock end block of a unifarm cohort\r\n     * @param epochBlocks epoch blocks in particular unifarm cohort\r\n     * @param hasLiquidityMining indicator for liquidity mining\r\n     * @param hasContainsWrappedToken true if contains wrapped token in cohort rewards\r\n     * @param hasCohortLockinAvaliable denotes cohort lockin\r\n     */\r\n\r\n    event AddedCohortDetails(\r\n        address indexed cohortId,\r\n        string indexed cohortVersion,\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        uint256 epochBlocks,\r\n        bool indexed hasLiquidityMining,\r\n        bool hasContainsWrappedToken,\r\n        bool hasCohortLockinAvaliable\r\n    );\r\n\r\n    /**\r\n     * @notice emit on update of each booster pacakge\r\n     * @param cohortId the cohort address\r\n     * @param bpid booster pack id\r\n     * @param paymentToken the payment token address\r\n     * @param boosterPackAmount the booster pack amount\r\n     */\r\n\r\n    event BoosterDetails(address indexed cohortId, uint256 indexed bpid, address paymentToken, uint256 boosterPackAmount);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWETH.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\ninterface IWETH {\r\n    /**\r\n     * @dev deposit eth to the contract\r\n     */\r\n\r\n    function deposit() external payable;\r\n\r\n    /**\r\n     * @dev transfer allows to transfer to a wallet or contract address\r\n     * @param to recipient address\r\n     * @param value amount to be transfered\r\n     * @return Transfer status.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev allow to withdraw weth from contract\r\n     */\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\n\r\n// File contracts/library/CohortHelper.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\n\r\n\r\n\r\n/// @title CohortHelper library\r\n/// @author UNIFARM\r\n/// @notice we have various util functions.which is used in protocol directly\r\n/// @dev all the functions are internally used in the protocol.\r\n\r\nlibrary CohortHelper {\r\n    /**\r\n     * @dev getBlockNumber obtain current block from the chain.\r\n     * @return current block number\r\n     */\r\n\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n     * @dev get current owner of the factory contract.\r\n     * @param factory factory contract address.\r\n     * @return factory owner address\r\n     */\r\n\r\n    function owner(address factory) internal view returns (address) {\r\n        return CohortFactory(factory).owner();\r\n    }\r\n\r\n    /**\r\n     * @dev validating the sender\r\n     * @param factory factory contract address\r\n     * @return registry registry contract address\r\n     * @return nftManager nft Manager contract address\r\n     * @return rewardRegistry reward registry contract address\r\n     */\r\n\r\n    function verifyCaller(address factory)\r\n        internal\r\n        view\r\n        returns (\r\n            address registry,\r\n            address nftManager,\r\n            address rewardRegistry\r\n        )\r\n    {\r\n        (registry, nftManager, rewardRegistry) = getStorageContracts(factory);\r\n        require(msg.sender == nftManager, 'ONM');\r\n    }\r\n\r\n    /**\r\n     * @dev get cohort details\r\n     * @param registry registry contract address\r\n     * @param cohortId cohort contract address\r\n     * @return cohortVersion specfic cohort version.\r\n     * @return startBlock start block of a cohort.\r\n     * @return endBlock end block of a cohort.\r\n     * @return epochBlocks epoch blocks in particular cohort.\r\n     * @return hasLiquidityMining indicator for liquidity mining.\r\n     * @return hasContainsWrappedToken true if contains wrapped token in cohort rewards.\r\n     * @return hasCohortLockinAvaliable denotes cohort lockin.\r\n     */\r\n\r\n    function getCohort(address registry, address cohortId)\r\n        internal\r\n        view\r\n        returns (\r\n            string memory cohortVersion,\r\n            uint256 startBlock,\r\n            uint256 endBlock,\r\n            uint256 epochBlocks,\r\n            bool hasLiquidityMining,\r\n            bool hasContainsWrappedToken,\r\n            bool hasCohortLockinAvaliable\r\n        )\r\n    {\r\n        (\r\n            cohortVersion,\r\n            startBlock,\r\n            endBlock,\r\n            epochBlocks,\r\n            hasLiquidityMining,\r\n            hasContainsWrappedToken,\r\n            hasCohortLockinAvaliable\r\n        ) = IUnifarmCohortRegistryUpgradeable(registry).getCohort(cohortId);\r\n    }\r\n\r\n    /**\r\n     * @dev obtain particular cohort farm token details\r\n     * @param registry registry contract address\r\n     * @param cohortId cohort contract address\r\n     * @param farmId farm Id\r\n     * @return fid farm Id\r\n     * @return farmToken farm token Address\r\n     * @return userMinStake amount that user can minimum stake\r\n     * @return userMaxStake amount that user can maximum stake\r\n     * @return totalStakeLimit total stake limit for the specfic farm\r\n     * @return decimals farm token decimals\r\n     * @return skip it can be skip or not during unstake\r\n     */\r\n\r\n    function getCohortToken(\r\n        address registry,\r\n        address cohortId,\r\n        uint32 farmId\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            uint32 fid,\r\n            address farmToken,\r\n            uint256 userMinStake,\r\n            uint256 userMaxStake,\r\n            uint256 totalStakeLimit,\r\n            uint8 decimals,\r\n            bool skip\r\n        )\r\n    {\r\n        (fid, farmToken, userMinStake, userMaxStake, totalStakeLimit, decimals, skip) = IUnifarmCohortRegistryUpgradeable(registry).getCohortToken(\r\n            cohortId,\r\n            farmId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev derive booster pack details available for a specfic cohort.\r\n     * @param registry registry contract address\r\n     * @param cohortId cohort contract Address\r\n     * @param bpid booster pack id.\r\n     * @return cohortId_ cohort address.\r\n     * @return paymentToken_ payment token address.\r\n     * @return boosterVault the booster vault address.\r\n     * @return boosterPackAmount the booster pack amount.\r\n     */\r\n\r\n    function getBoosterPackDetails(\r\n        address registry,\r\n        address cohortId,\r\n        uint256 bpid\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            address cohortId_,\r\n            address paymentToken_,\r\n            address boosterVault,\r\n            uint256 boosterPackAmount\r\n        )\r\n    {\r\n        (cohortId_, paymentToken_, boosterVault, boosterPackAmount) = IUnifarmCohortRegistryUpgradeable(registry).getBoosterPackDetails(\r\n            cohortId,\r\n            bpid\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev calculate exact balance of a particular cohort.\r\n     * @param token token address\r\n     * @param totalStaking total staking of a token\r\n     * @return cohortBalance current cohort balance\r\n     */\r\n\r\n    function getCohortBalance(address token, uint256 totalStaking) internal view returns (uint256 cohortBalance) {\r\n        uint256 contractBalance = IERC20(token).balanceOf(address(this));\r\n        cohortBalance = contractBalance - totalStaking;\r\n    }\r\n\r\n    /**\r\n     * @dev get all storage contracts from factory contract.\r\n     * @param factory factory contract address\r\n     * @return registry registry contract address\r\n     * @return nftManager nftManger contract address\r\n     * @return rewardRegistry reward registry address\r\n     */\r\n\r\n    function getStorageContracts(address factory)\r\n        internal\r\n        view\r\n        returns (\r\n            address registry,\r\n            address nftManager,\r\n            address rewardRegistry\r\n        )\r\n    {\r\n        (registry, nftManager, rewardRegistry) = CohortFactory(factory).getStorageContracts();\r\n    }\r\n\r\n    /**\r\n     * @dev handle deposit WETH\r\n     * @param weth WETH address\r\n     * @param amount deposit amount\r\n     */\r\n\r\n    function depositWETH(address weth, uint256 amount) internal {\r\n        IWETH(weth).deposit{value: amount}();\r\n    }\r\n\r\n    /**\r\n     * @dev validate stake lock status\r\n     * @param registry registry address\r\n     * @param cohortId cohort address\r\n     * @param farmId farm Id\r\n     */\r\n\r\n    function validateStakeLock(\r\n        address registry,\r\n        address cohortId,\r\n        uint32 farmId\r\n    ) internal view {\r\n        IUnifarmCohortRegistryUpgradeable(registry).validateStakeLock(cohortId, farmId);\r\n    }\r\n\r\n    /**\r\n     * @dev validate unstake lock status\r\n     * @param registry registry address\r\n     * @param cohortId cohort address\r\n     * @param farmId farm Id\r\n     */\r\n\r\n    function validateUnStakeLock(\r\n        address registry,\r\n        address cohortId,\r\n        uint32 farmId\r\n    ) internal view {\r\n        IUnifarmCohortRegistryUpgradeable(registry).validateUnStakeLock(cohortId, farmId);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/UnifarmCohort.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\n\r\n// libraries\r\n\r\n\r\n\r\n/// @title UnifarmCohort Contract\r\n/// @author UNIFARM\r\n/// @notice the main core cohort contract.\r\n\r\ncontract UnifarmCohort is IUnifarmCohort {\r\n    /// @notice reciveing chain currency.\r\n    receive() external payable {}\r\n\r\n    /// @notice dentoes stakes\r\n    struct Stakes {\r\n        // farm id\r\n        uint32 fid;\r\n        // nft token id for this stake\r\n        uint256 nftTokenId;\r\n        // stake amount\r\n        uint256 stakedAmount;\r\n        // user start from block\r\n        uint256 startBlock;\r\n        // user end block\r\n        uint256 endBlock;\r\n        // originalOwner address.\r\n        address originalOwner;\r\n        // referralAddress along with stakes.\r\n        address referralAddress;\r\n        // true if boosted\r\n        bool isBooster;\r\n    }\r\n\r\n    /// @notice factory address.\r\n    address public immutable factory;\r\n\r\n    /// @notice average total staking.\r\n    mapping(uint32 => uint256) public totalStaking;\r\n\r\n    /// @notice priorEpochATVL contains average total staking in each epochs.\r\n    mapping(uint32 => mapping(uint256 => uint256)) public priorEpochATVL;\r\n\r\n    /// @notice stakes map with nft Token Id.\r\n    mapping(uint256 => Stakes) public stakes;\r\n\r\n    /// @notice average userTotalStaking.\r\n    mapping(address => mapping(uint256 => uint256)) public userTotalStaking;\r\n\r\n    /**\r\n     * @notice construct unifarm cohort contract.\r\n     * @param factory_ factory contract address.\r\n     */\r\n\r\n    constructor(address factory_) {\r\n        factory = factory_;\r\n    }\r\n\r\n    /**\r\n     * @dev only owner verify\r\n     */\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev function to verify owner\r\n     */\r\n\r\n    function _onlyOwner() internal view {\r\n        require(msg.sender == CohortHelper.owner(factory), 'ONA');\r\n    }\r\n\r\n    /**\r\n     * @dev function helps to compute Aggregate R value\r\n     * @param farmId farm id\r\n     * @param startEpoch start epoch\r\n     * @param currentEpoch current epoch\r\n     * @param stakedAmount user staked amount\r\n     * @param epochBlocks  number of block in epoch\r\n     * @param userStakedBlock user staked Block.\r\n     * @param totalStakeLimit total staking limit.\r\n     * @param isBoosterBuyed booster buying status\r\n     * @return r Aggregated R Value.\r\n     */\r\n\r\n    function computeRValue(\r\n        uint32 farmId,\r\n        uint256 startEpoch,\r\n        uint256 currentEpoch,\r\n        uint256 stakedAmount,\r\n        uint256 epochBlocks,\r\n        uint256 userStakedBlock,\r\n        uint256 totalStakeLimit,\r\n        bool isBoosterBuyed\r\n    ) internal view returns (uint256 r) {\r\n        uint256 i = startEpoch;\r\n        if (i == currentEpoch) {\r\n            r = 0;\r\n        }\r\n        while (i < currentEpoch) {\r\n            uint256 eligibleBlocks;\r\n            if (userStakedBlock > (i * epochBlocks)) {\r\n                eligibleBlocks = ((i + 1) * epochBlocks) - userStakedBlock;\r\n            } else {\r\n                eligibleBlocks = epochBlocks;\r\n            }\r\n            if (isBoosterBuyed == false) {\r\n                r += (stakedAmount * 1e12 * eligibleBlocks) / totalStakeLimit;\r\n            } else {\r\n                uint256 priorTotalStaking = priorEpochATVL[farmId][i];\r\n                uint256 priorEpochATotalStaking = priorTotalStaking > 0 ? priorTotalStaking : totalStaking[farmId];\r\n                r += (stakedAmount * 1e12 * eligibleBlocks) / priorEpochATotalStaking;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohort\r\n     */\r\n\r\n    function buyBooster(\r\n        address account,\r\n        uint256 bpid,\r\n        uint256 tokenId\r\n    ) external override {\r\n        (, address nftManager, ) = CohortHelper.getStorageContracts(factory);\r\n        require(msg.sender == nftManager || msg.sender == CohortHelper.owner(factory), 'IS');\r\n        require(stakes[tokenId].isBooster == false, 'AB');\r\n        stakes[tokenId].isBooster = true;\r\n        emit BoosterBuyHistory(tokenId, account, bpid);\r\n    }\r\n\r\n    /**\r\n     * @dev validate cohort staking is active or not.\r\n     * @param registry registry address\r\n     * @return epoch current epoch\r\n     */\r\n\r\n    function validateStake(address registry) internal view returns (uint256 epoch) {\r\n        (, uint256 startBlock, uint256 endBlock, uint256 epochBlocks, , , ) = CohortHelper.getCohort(registry, address(this));\r\n        require(block.number < endBlock, 'SC');\r\n        epoch = CheckPointReward.getCurrentCheckpoint(startBlock, endBlock, epochBlocks);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohort\r\n     */\r\n\r\n    function stake(\r\n        uint32 fid,\r\n        uint256 tokenId,\r\n        address user,\r\n        address referralAddress\r\n    ) external override {\r\n        (address registry, , ) = CohortHelper.verifyCaller(factory);\r\n\r\n        require(user != referralAddress, 'SRNA');\r\n        CohortHelper.validateStakeLock(registry, address(this), fid);\r\n\r\n        uint256 epoch = validateStake(registry);\r\n\r\n        (, address farmToken, uint256 userMinStake, uint256 userMaxStake, uint256 totalStakeLimit, , ) = CohortHelper.getCohortToken(\r\n            registry,\r\n            address(this),\r\n            fid\r\n        );\r\n\r\n        require(farmToken != address(0), 'FTNE');\r\n        uint256 stakeAmount = CohortHelper.getCohortBalance(farmToken, totalStaking[fid]);\r\n\r\n        {\r\n            userTotalStaking[user][fid] = userTotalStaking[user][fid] + stakeAmount;\r\n            totalStaking[fid] = totalStaking[fid] + stakeAmount;\r\n            require(stakeAmount >= userMinStake, 'UMF');\r\n            require(userTotalStaking[user][fid] <= userMaxStake, 'UMSF');\r\n            require(totalStaking[fid] <= totalStakeLimit, 'TSLF');\r\n            priorEpochATVL[fid][epoch] = totalStaking[fid];\r\n        }\r\n\r\n        stakes[tokenId].fid = fid;\r\n        stakes[tokenId].nftTokenId = tokenId;\r\n        stakes[tokenId].stakedAmount = stakeAmount;\r\n        stakes[tokenId].startBlock = block.number;\r\n        stakes[tokenId].originalOwner = user;\r\n        stakes[tokenId].referralAddress = referralAddress;\r\n\r\n        emit ReferedBy(tokenId, referralAddress, stakeAmount, fid);\r\n    }\r\n\r\n    /**\r\n     * @dev validate unstake or claim\r\n     * @param registry registry address\r\n     * @param userStakedBlock block when user staked\r\n     * @param flag 1, if owner is caller\r\n     * @return blocks data for cohort.\r\n     * @return true if WToken is included on Cohort Rewards.\r\n     */\r\n\r\n    function validateUnstakeOrClaim(\r\n        address registry,\r\n        uint256 userStakedBlock,\r\n        uint256 flag\r\n    ) internal view returns (uint256[5] memory, bool) {\r\n        uint256[5] memory blocksData;\r\n        (, uint256 startBlock, uint256 endBlock, uint256 epochBlocks, , bool hasContainWrappedToken, bool hasCohortLockinAvaliable) = CohortHelper\r\n            .getCohort(registry, address(this));\r\n\r\n        if (hasCohortLockinAvaliable && flag == 0) {\r\n            require(block.number > endBlock, 'CIL');\r\n        }\r\n\r\n        blocksData[0] = CheckPointReward.getStartCheckpoint(startBlock, userStakedBlock, epochBlocks);\r\n        blocksData[1] = CheckPointReward.getCurrentCheckpoint(startBlock, endBlock, epochBlocks);\r\n        blocksData[2] = endBlock;\r\n        blocksData[3] = epochBlocks;\r\n        blocksData[4] = startBlock;\r\n        return (blocksData, hasContainWrappedToken);\r\n    }\r\n\r\n    /**\r\n     * @dev update user totalStaking\r\n     * @param user The Wallet address of user.\r\n     * @param stakedAmount the amount staked by user.\r\n     * @param fid staked farm Id\r\n     */\r\n\r\n    function updateUserTotalStaking(\r\n        address user,\r\n        uint256 stakedAmount,\r\n        uint32 fid\r\n    ) internal {\r\n        userTotalStaking[user][fid] = userTotalStaking[user][fid] - stakedAmount;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohort\r\n     */\r\n\r\n    function unStake(\r\n        address user,\r\n        uint256 tokenId,\r\n        uint256 flag\r\n    ) external override {\r\n        (address registry, , address rewardRegistry) = CohortHelper.verifyCaller(factory);\r\n\r\n        Stakes memory staked = stakes[tokenId];\r\n\r\n        if (flag == 0) {\r\n            CohortHelper.validateUnStakeLock(registry, address(this), staked.fid);\r\n        }\r\n\r\n        stakes[tokenId].endBlock = block.number;\r\n\r\n        (, address farmToken, , , uint256 totalStakeLimit, , bool skip) = CohortHelper.getCohortToken(registry, address(this), staked.fid);\r\n\r\n        (uint256[5] memory blocksData, bool hasContainWrapToken) = validateUnstakeOrClaim(registry, staked.startBlock, flag);\r\n\r\n        uint256 rValue = computeRValue(\r\n            staked.fid,\r\n            blocksData[0],\r\n            blocksData[1],\r\n            staked.stakedAmount,\r\n            blocksData[3],\r\n            (staked.startBlock - (blocksData[4])),\r\n            totalStakeLimit,\r\n            staked.isBooster\r\n        );\r\n        {\r\n            totalStaking[staked.fid] = totalStaking[staked.fid] - staked.stakedAmount;\r\n\r\n            updateUserTotalStaking(staked.originalOwner, staked.stakedAmount, staked.fid);\r\n\r\n            if (CohortHelper.getBlockNumber() < blocksData[2]) {\r\n                priorEpochATVL[staked.fid][blocksData[1]] = totalStaking[staked.fid];\r\n            }\r\n            // transfer the stake token to user\r\n            if (skip == false) {\r\n                TransferHelpers.safeTransfer(farmToken, user, staked.stakedAmount);\r\n            }\r\n        }\r\n\r\n        if (rValue > 0) {\r\n            IUnifarmRewardRegistryUpgradeable(rewardRegistry).distributeRewards(\r\n                address(this),\r\n                user,\r\n                staked.referralAddress,\r\n                rValue,\r\n                hasContainWrapToken\r\n            );\r\n        }\r\n\r\n        emit Claim(staked.fid, tokenId, user, staked.referralAddress, rValue);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohort\r\n     */\r\n\r\n    function collectPrematureRewards(address user, uint256 tokenId) external override {\r\n        (address registry, , address rewardRegistry) = CohortHelper.verifyCaller(factory);\r\n        Stakes memory staked = stakes[tokenId];\r\n\r\n        CohortHelper.validateUnStakeLock(registry, address(this), staked.fid);\r\n\r\n        uint256 stakedAmount = staked.stakedAmount;\r\n\r\n        (uint256[5] memory blocksData, bool hasContainWrapToken) = validateUnstakeOrClaim(registry, staked.startBlock, 1);\r\n        require(blocksData[2] > block.number, 'FNA');\r\n\r\n        (, , , ,uint256 totalStakeLimit, , ) = CohortHelper.getCohortToken(registry, address(this), staked.fid);\r\n\r\n        stakes[tokenId].startBlock = block.number;\r\n\r\n        uint256 rValue = computeRValue(\r\n            staked.fid,\r\n            blocksData[0],\r\n            blocksData[1],\r\n            stakedAmount,\r\n            blocksData[3],\r\n            (staked.startBlock - blocksData[4]),\r\n            totalStakeLimit,\r\n            staked.isBooster\r\n        );\r\n\r\n        require(rValue > 0, 'NRM');\r\n\r\n        IUnifarmRewardRegistryUpgradeable(rewardRegistry).distributeRewards(address(this), user, staked.referralAddress, rValue, hasContainWrapToken);\r\n\r\n        emit Claim(staked.fid, tokenId, user, staked.referralAddress, rValue);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohort\r\n     */\r\n\r\n    function setPortionAmount(uint256 tokenId, uint256 stakedAmount) external onlyOwner {\r\n        stakes[tokenId].stakedAmount = stakedAmount;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohort\r\n     */\r\n\r\n    function disableBooster(uint256 tokenId) external onlyOwner {\r\n        stakes[tokenId].isBooster = false;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohort\r\n     */\r\n\r\n    function safeWithdrawEth(address withdrawableAddress, uint256 amount) external onlyOwner returns (bool) {\r\n        require(withdrawableAddress != address(0), 'IWA');\r\n        TransferHelpers.safeTransferParentChainToken(withdrawableAddress, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohort\r\n     */\r\n\r\n    function safeWithdrawAll(\r\n        address withdrawableAddress,\r\n        address[] memory tokens,\r\n        uint256[] memory amounts\r\n    ) external onlyOwner {\r\n        require(withdrawableAddress != address(0), 'IWA');\r\n        require(tokens.length == amounts.length, 'SF');\r\n        uint8 numberOfTokens = uint8(tokens.length);\r\n        uint8 i = 0;\r\n        while (i < numberOfTokens) {\r\n            TransferHelpers.safeTransfer(tokens[i], withdrawableAddress, amounts[i]);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohort\r\n     */\r\n\r\n    function viewStakingDetails(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint32 fid,\r\n            uint256 nftTokenId,\r\n            uint256 stakedAmount,\r\n            uint256 startBlock,\r\n            uint256 endBlock,\r\n            address originalOwner,\r\n            address referralAddress,\r\n            bool isBooster\r\n        )\r\n    {\r\n        Stakes memory userStake = stakes[tokenId];\r\n        return (\r\n            userStake.fid,\r\n            userStake.nftTokenId,\r\n            userStake.stakedAmount,\r\n            userStake.startBlock,\r\n            userStake.endBlock,\r\n            userStake.originalOwner,\r\n            userStake.referralAddress,\r\n            userStake.isBooster\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUnifarmCohortFactoryUpgradeable.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\ninterface IUnifarmCohortFactoryUpgradeable {\r\n    /**\r\n     * @notice set storage contracts for unifarm cohorts\r\n     * @dev called by only owner access\r\n     * @param registry_ registry address\r\n     * @param nftManager_ NFT manager address\r\n     * @param rewardRegistry_ reward registry address\r\n     */\r\n\r\n    function setStorageContracts(\r\n        address registry_,\r\n        address nftManager_,\r\n        address rewardRegistry_\r\n    ) external;\r\n\r\n    /**\r\n    @notice function helps to deploy unifarm cohort contracts\r\n    @dev only owner access can deploy new cohorts\r\n    @param salt random bytes\r\n    @return cohortId the deployed cohort contract address\r\n   */\r\n\r\n    function createUnifarmCohort(bytes32 salt) external returns (address cohortId);\r\n\r\n    /**\r\n     * @notice the function helps to derive deployed cohort address\r\n     * @dev calculate the deployed cohort contract address by salt\r\n     * @param salt random bytes\r\n     * @return deployed cohort address\r\n     */\r\n\r\n    function computeCohortAddress(bytes32 salt) external view returns (address);\r\n\r\n    /**\r\n     * @notice derive storage contracts\r\n     * @return registry the registry address\r\n     * @return  nftManager nft manager address\r\n     * @return  rewardRegistry reward registry address\r\n     */\r\n\r\n    function getStorageContracts()\r\n        external\r\n        view\r\n        returns (\r\n            address registry,\r\n            address nftManager,\r\n            address rewardRegistry\r\n        );\r\n\r\n    /**\r\n     * @notice get number of cohorts\r\n     * @return number of cohorts.\r\n     */\r\n\r\n    function obtainNumberOfCohorts() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/UnifarmCohortFactoryUpgradeable.sol\r\n\r\npragma solidity =0.8.9;\r\n\r\n\r\n\r\n/// @title UnifarmCohortFactoryUpgradeable Contract\r\n/// @author UNIFARM\r\n/// @notice deployer of unifarm cohort contracts\r\n\r\ncontract UnifarmCohortFactoryUpgradeable is IUnifarmCohortFactoryUpgradeable, Initializable {\r\n    /// @dev hold all the storage contract addresses for unifarm cohort\r\n    struct StorageContract {\r\n        // registry address\r\n        address registry;\r\n        // nft manager address\r\n        address nftManager;\r\n        // reward registry\r\n        address rewardRegistry;\r\n    }\r\n\r\n    /// @dev factory owner address\r\n    address private _owner;\r\n\r\n    /// @notice pointer of StorageContract\r\n    StorageContract internal storageContracts;\r\n\r\n    /// @notice all deployed cohorts will push on this array\r\n    address[] public cohorts;\r\n\r\n    /// @notice emit on each cohort deployment\r\n    event CohortConstructed(address cohortId);\r\n\r\n    /// @notice emit on each ownership transfers\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, 'ONA');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice initialize the cohort factory\r\n     */\r\n\r\n    function __UnifarmCohortFactoryUpgradeable_init() external initializer {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership of the contract to a new account (`newOwner`)\r\n     * @dev can only be called by the current owner\r\n     * @param newOwner - new owner\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), 'NOIA');\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers ownership of the contract to a new account (`newOwner`)\r\n     * @dev Internal function without access restriction\r\n     * @param newOwner new owner\r\n     */\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\r\n     */\r\n\r\n    function setStorageContracts(\r\n        address registry_,\r\n        address nftManager_,\r\n        address rewardRegistry_\r\n    ) external onlyOwner {\r\n        storageContracts = StorageContract({registry: registry_, nftManager: nftManager_, rewardRegistry: rewardRegistry_});\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner of the factory\r\n     * @return _owner owner address\r\n     */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\r\n     */\r\n\r\n    function createUnifarmCohort(bytes32 salt) external override onlyOwner returns (address cohortId) {\r\n        bytes memory bytecode = abi.encodePacked(type(UnifarmCohort).creationCode, abi.encode(address(this)));\r\n        assembly {\r\n            cohortId := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        cohorts.push(cohortId);\r\n        emit CohortConstructed(cohortId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\r\n     */\r\n\r\n    function computeCohortAddress(bytes32 salt) public view override returns (address) {\r\n        bytes memory bytecode = abi.encodePacked(type(UnifarmCohort).creationCode, abi.encode(address(this)));\r\n        bytes32 initCode = keccak256(bytecode);\r\n        return address(uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), address(this), salt, initCode)))));\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\r\n     */\r\n\r\n    function obtainNumberOfCohorts() public view override returns (uint256) {\r\n        return cohorts.length;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IUnifarmCohortFactoryUpgradeable\r\n     */\r\n\r\n    function getStorageContracts()\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            address,\r\n            address,\r\n            address\r\n        )\r\n    {\r\n        return (storageContracts.registry, storageContracts.nftManager, storageContracts.rewardRegistry);\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cohortId\",\"type\":\"address\"}],\"name\":\"CohortConstructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__UnifarmCohortFactoryUpgradeable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cohorts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"computeCohortAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createUnifarmCohort\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cohortId\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStorageContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"obtainNumberOfCohorts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardRegistry_\",\"type\":\"address\"}],\"name\":\"setStorageContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnifarmCohortFactoryUpgradeable", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://301d81219a1aa0bf004ef8657eba7697474a4d883ca76aa8de38bd7a199e065c"}]}