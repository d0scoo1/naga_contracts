{"status": "1", "message": "OK", "result": [{"SourceCode": "// File: contracts/AwooModels.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\nstruct AccrualDetails{\r\n    address ContractAddress;\r\n    uint256[] TokenIds;\r\n    uint256[] Accruals;\r\n    uint256 TotalAccrued;\r\n}\r\n\r\nstruct ClaimDetails{\r\n    address ContractAddress;\r\n    uint32[] TokenIds;\r\n}\r\n\r\nstruct SupportedContractDetails{\r\n    address ContractAddress;\r\n    uint256 BaseRate;\r\n    bool Active;\r\n}\r\n// File: contracts/IAwooClaimingV2.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ninterface IAwooClaimingV2{\r\n    function overrideTokenAccrualBaseRate(address contractAddress, uint32 tokenId, uint256 newBaseRate) external;\r\n    function claim(address holder, ClaimDetails[] calldata requestedClaims) external;\r\n}\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/IAwooToken.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ninterface IAwooToken is IERC20 {\r\n    function increaseVirtualBalance(address account, uint256 amount) external;\r\n    function mint(address account, uint256 amount) external;\r\n    function balanceOfVirtual(address account) external view returns(uint256);\r\n    function spendVirtualAwoo(bytes32 hash, bytes memory sig, string calldata nonce, address account, uint256 amount) external;\r\n}\r\n// File: @openzeppelin/contracts@4.4.1/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/OwnerAdminGuard.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ncontract OwnerAdminGuard is Ownable {\r\n    address[2] private _admins;\r\n    bool private _adminsSet;\r\n\r\n    /// @notice Allows the owner to specify two addresses allowed to administer this contract\r\n    /// @param admins A 2 item array of addresses\r\n    function setAdmins(address[2] calldata admins) public {\r\n        require(admins[0] != address(0) && admins[1] != address(0), \"Invalid admin address\");\r\n        _admins = admins;\r\n        _adminsSet = true;\r\n    }\r\n\r\n    function _isOwnerOrAdmin(address addr) internal virtual view returns(bool){\r\n        return addr == owner() || (\r\n            _adminsSet && (\r\n                addr == _admins[0] || addr == _admins[1]\r\n            )\r\n        );\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(_isOwnerOrAdmin(msg.sender), \"Not an owner or admin\");\r\n        _;\r\n    }\r\n}\r\n// File: contracts/AuthorizedCallerGuard.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ncontract AuthorizedCallerGuard is OwnerAdminGuard {\r\n\r\n    /// @dev Keeps track of which contracts are explicitly allowed to interact with certain super contract functionality\r\n    mapping(address => bool) public authorizedContracts;\r\n\r\n    event AuthorizedContractAdded(address contractAddress, address addedBy);\r\n    event AuthorizedContractRemoved(address contractAddress, address removedBy);\r\n\r\n    /// @notice Allows the owner or an admin to authorize another contract to override token accruals on an individual token level\r\n    /// @param contractAddress The authorized contract address\r\n    function addAuthorizedContract(address contractAddress) public onlyOwnerOrAdmin {\r\n        require(_isContract(contractAddress), \"Invalid contractAddress\");\r\n        authorizedContracts[contractAddress] = true;\r\n        emit AuthorizedContractAdded(contractAddress, _msgSender());\r\n    }\r\n\r\n    /// @notice Allows the owner or an admin to remove an authorized contract\r\n    /// @param contractAddress The contract address which should have its authorization revoked\r\n    function removeAuthorizedContract(address contractAddress) public onlyOwnerOrAdmin {\r\n        authorizedContracts[contractAddress] = false;\r\n        emit AuthorizedContractRemoved(contractAddress, _msgSender());\r\n    }\r\n\r\n    /// @dev Derived from @openzeppelin/contracts/utils/Address.sol\r\n    function _isContract(address account) internal virtual view returns (bool) {\r\n        if(account == address(0)) return false;\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _isAuthorizedContract(address addr) internal virtual view returns(bool){\r\n        return authorizedContracts[addr];\r\n    }\r\n\r\n    modifier onlyAuthorizedCaller() {\r\n        require(_isOwnerOrAdmin(_msgSender()) || _isAuthorizedContract(_msgSender()), \"Sender is not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorizedContract() {\r\n        require(_isAuthorizedContract(_msgSender()), \"Sender is not authorized\");\r\n        _;\r\n    }\r\n\r\n}\r\n// File: @openzeppelin/contracts@4.4.1/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/IAwooMintableCollection.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\ninterface IAwooMintableCollection is IERC1155 {\r\n    struct TokenDetail { bool SoftLimit; bool Active; }\r\n    struct TokenCount { uint256 TokenId; uint256 Count; }\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n    function mint(address to, uint256 id, uint256 qty) external;\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory quantities) external;\r\n    function burn(address from, uint256 id, uint256 qty) external;\r\n    function tokensOfOwner(address owner) external view returns (TokenCount[] memory);\r\n    function totalMinted(uint256 id) external view returns(uint256);\r\n    function totalSupply(uint256 id) external view returns (uint256);\r\n    function exists(uint256 id) external view returns (bool);\r\n    function addToken(TokenDetail calldata tokenDetail, string memory tokenUri) external returns(uint256);\r\n    function setTokenUri(uint256 id, string memory tokenUri) external;\r\n    function setTokenActive(uint256 id, bool active) external;\r\n    function setBaseUri(string memory baseUri) external;\r\n}\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC1155/ERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC1155/extensions/ERC1155Supply.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\r\n *\r\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\r\n * clearly identified. Note: While a totalSupply of 1 might mean the\r\n * corresponding is an NFT, there is no guarantees that no other token with the\r\n * same id are not going to be minted.\r\n */\r\nabstract contract ERC1155Supply is ERC1155 {\r\n    mapping(uint256 => uint256) private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total amount of tokens in with a given id.\r\n     */\r\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\r\n        return _totalSupply[id];\r\n    }\r\n\r\n    /**\r\n     * @dev Indicates whether any token exist with a given id, or not.\r\n     */\r\n    function exists(uint256 id) public view virtual returns (bool) {\r\n        return ERC1155Supply.totalSupply(id) > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC1155-_beforeTokenTransfer}.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        if (from == address(0)) {\r\n            for (uint256 i = 0; i < ids.length; ++i) {\r\n                _totalSupply[ids[i]] += amounts[i];\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            for (uint256 i = 0; i < ids.length; ++i) {\r\n                _totalSupply[ids[i]] -= amounts[i];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/AwooCollection.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract AwooCollection is IAwooMintableCollection, ERC1155Supply, AuthorizedCallerGuard {\r\n    using Strings for uint256;\r\n\r\n    string public constant name = \"Awoo Items\";\r\n    string public constant symbol = \"AWOOI\";\r\n\r\n    uint16 public currentTokenId;\r\n    bool public isActive;\r\n\r\n    /// @notice Maps the tokenId of a specific mintable item to the details that define that item\r\n    mapping(uint256 => TokenDetail) public tokenDetails;\r\n\r\n    /// @notice Keeps track of the number of tokens that were burned to support \"Soft\" limits\r\n    /// @dev Soft limits are the number of tokens available at any given time, so if 1 is burned, another can be minted\r\n    mapping(uint256 => uint256) public tokenBurnCounts;\r\n\r\n    /// @dev Allows us to have token-specific metadata uris that will override the baseUri\r\n    mapping(uint256 => string) private _tokenUris;\r\n\r\n    event TokenUriUpdated(uint256 indexed id, string newUri, address updatedBy);\r\n    \r\n    constructor(address awooStoreAddress, string memory baseUri) ERC1155(baseUri){\r\n        // Allow the Awoo Store contract to interact with this contract to faciliate minting and burning\r\n        addAuthorizedContract(awooStoreAddress);\r\n    }\r\n\r\n    /// @dev See {IERC165-supportsInterface}.\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IAwooMintableCollection) returns (bool) {\r\n        return super.supportsInterface(interfaceId) ||\r\n            interfaceId == type(IAwooMintableCollection).interfaceId ||\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == ERC1155Supply.totalSupply.selector ||\r\n            interfaceId == ERC1155Supply.exists.selector;\r\n    }\r\n\r\n    /// @notice Allows authorized contracts to mints tokens to the specified recipient\r\n    /// @param to The recipient address\r\n    /// @param id The Id of the specific token to mint\r\n    /// @param qty The number of specified tokens that should be minted\r\n    function mint(address to, uint256 id, uint256 qty\r\n    ) external whenActive onlyAuthorizedContract {\r\n        _mint(to, id, qty, \"\");\r\n    }\r\n\r\n    /// @notice Allows authorized contracts to mint multiple different tokens to the specified recipient\r\n    /// @param to The recipient address\r\n    /// @param ids The Ids of the specific tokens to mint\r\n    /// @param quantities The number of each of the specified tokens that should be minted\r\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory quantities\r\n    ) external whenActive onlyAuthorizedContract {\r\n        _mintBatch(to, ids, quantities, \"\");\r\n    }\r\n\r\n    /// @notice Burns the specified number of tokens.\r\n    /// @notice Only the holder or an approved operator is authorized to burn\r\n    /// @notice Operator approvals must have been explicitly allowed by the token holder\r\n    /// @param from The account from which the specified tokens will be burned\r\n    /// @param id The Id of the tokens that will be burned\r\n    /// @param qty The number of specified tokens that will be burned\r\n    function burn(address from, uint256 id, uint256 qty) external {\r\n        require(exists(id), \"Query for non-existent id\");\r\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \"Not owner or approved\");\r\n        _burn(from, id, qty);\r\n    }\r\n\r\n    /// @notice Burns the specified number of each of the specified tokens.\r\n    /// @notice Only the holder or an approved operator is authorized to burn\r\n    /// @notice Operator approvals must have been explicitly allowed by the token holder\r\n    /// @param from The account from which the specified tokens will be burned\r\n    /// @param ids The Ids of the tokens that will be burned\r\n    /// @param quantities The number of each of the specified tokens that will be burned\r\n    function burnBatch(address from, uint256[] memory ids, uint256[] memory quantities) external {\r\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \"Not owner or approved\");\r\n        \r\n        for(uint256 i; i < ids.length; i++){\r\n            require(exists(ids[i]), \"Query for non-existent id\");\r\n        }\r\n        \r\n        _burnBatch(from, ids, quantities);\r\n    }\r\n\r\n    /// @notice Returns the metadata uri for the specified token\r\n    /// @dev By default, token-specific uris are given preference\r\n    /// @param id The id of the token for which the uri should be returned\r\n    /// @return A uri string\r\n    function uri(uint256 id) public view override returns (string memory) {\r\n        require(exists(id), \"Query for non-existent id\");\r\n        return bytes(_tokenUris[id]).length > 0 ? _tokenUris[id] : string.concat(ERC1155.uri(id), id.toString(), \".json\");\r\n    }\r\n\r\n    /// @notice Returns the number of each token held by the specified owner address\r\n    /// @param owner The address of the token owner/holder\r\n    /// @return An array of Tuple(uint256,uint256) indicating the number of tokens held\r\n    function tokensOfOwner(address owner) external view returns (TokenCount[] memory) {\r\n        TokenCount[] memory ownerTokenCounts = new TokenCount[](currentTokenId);\r\n        \r\n        for(uint256 i = 1; i <= currentTokenId; i++){\r\n            uint256 count = balanceOf(owner, i);\r\n            ownerTokenCounts[i-1] = TokenCount(i, count);\r\n        }\r\n        return ownerTokenCounts;\r\n    }\r\n\r\n    /// @notice Returns the total number of tokens minted for the specified token id\r\n    /// @dev For tokens that have a soft limit, the number of burned tokens is included\r\n    /// so the result is based on the total number of tokens minted, regardless of whether\r\n    /// or not they were subsequently burned\r\n    /// @param id The id of the token to query\r\n    /// @return A uint256 value indicating the total number of tokens minted and burned for the specified token id \r\n    function totalMinted(uint256 id) isValidTokenId(id) external view returns(uint256) {\r\n        TokenDetail memory tokenDetail = tokenDetails[id];\r\n        \r\n        if(tokenDetail.SoftLimit){\r\n            return ERC1155Supply.totalSupply(id);\r\n        }\r\n        else {\r\n            return (ERC1155Supply.totalSupply(id) + tokenBurnCounts[id]);\r\n        }        \r\n    }\r\n\r\n    /// @notice Returns the current number of tokens that were minted and not burned\r\n    /// @param id The id of the token to query\r\n    /// @return A uint256 value indicating the number of tokens which have not been burned\r\n    function totalSupply(uint256 id) public view virtual override(ERC1155Supply,IAwooMintableCollection) returns (uint256) {\r\n        return ERC1155Supply.totalSupply(id);\r\n    }\r\n\r\n    /// @notice Determines whether or not the specified token id is valid and at least 1 has been minted\r\n    /// @param id The id of the token to validate\r\n    /// @return A boolean value indicating the existence of the specified token id\r\n    function exists(uint256 id) public view virtual override(ERC1155Supply,IAwooMintableCollection) returns (bool) {\r\n        return ERC1155Supply.exists(id);\r\n    }\r\n\r\n    /// @notice Allows authorized individuals or contracts to add new tokens that can be minted    \r\n    /// @param tokenDetail An object describing the token being added\r\n    /// @param tokenUri The specific uri to use for the token being added\r\n    /// @return A uint256 value representing the id of the token\r\n    function addToken(TokenDetail calldata tokenDetail, string memory tokenUri) external isAuthorized returns(uint256){\r\n        currentTokenId++;\r\n        if(bytes(tokenUri).length > 0) {\r\n            _tokenUris[currentTokenId] = tokenUri;\r\n        }\r\n        tokenDetails[currentTokenId] = tokenDetail;\r\n        return currentTokenId;\r\n    }\r\n\r\n    /// @notice Allows authorized individuals or contracts to set the base metadata uri\r\n    /// @dev It is assumed that the baseUri value will end with /\r\n    /// @param baseUri The uri to use as the base for all tokens that don't have a token-specific uri\r\n    function setBaseUri(string memory baseUri) external isAuthorized {\r\n        _setURI(baseUri);\r\n    }\r\n\r\n    /// @notice Allows authorized individuals or contracts to set the base metadata uri on a per token level\r\n    /// @param id The id of the token\r\n    /// @param tokenUri The uri to use for the specified token id\r\n    function setTokenUri(uint256 id, string memory tokenUri) external isAuthorized isValidTokenId(id) {        \r\n        _tokenUris[id] = tokenUri;\r\n        emit TokenUriUpdated(id, tokenUri, _msgSender());\r\n    }\r\n\r\n    /// @notice Allows authorized individuals or contracts to activate/deactivate minting of the specified token id\r\n    /// @param id The id of the token\r\n    /// @param active A boolean value indicating whether or not minting is allowed for this token\r\n    function setTokenActive(uint256 id, bool active) external isAuthorized isValidTokenId(id) {\r\n        tokenDetails[id].Active = active;\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to activate/deactivate minting of all tokens\r\n    /// @param active A boolean value indicating whether or not minting is allowed\r\n    function setActive(bool active) external onlyOwnerOrAdmin {\r\n        isActive = active;\r\n    }\r\n\r\n    function rescueEth() external onlyOwner {\r\n        require(payable(owner()).send(address(this).balance));\r\n    }\r\n\r\n    /// @dev Hook to allows us to count the burned tokens even if they're just transferred to the zero address\r\n    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids,\r\n        uint256[] memory amounts, bytes memory data\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        if (to == address(0)) {\r\n            for (uint256 i = 0; i < ids.length; ++i) {\r\n                tokenBurnCounts[ids[i]] += amounts[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier whenActive(){\r\n        require(isActive, \"Minting inactive\");\r\n        _;\r\n    }\r\n\r\n    modifier isValidTokenId(uint256 id) {\r\n        require(id <= currentTokenId, \"Invalid tokenId\");\r\n        _;\r\n    }\r\n\r\n    modifier isValidTokenIds(uint256[] memory ids){\r\n        for(uint256 i = 0; i < ids.length; i++){\r\n            require(ids[i] <= currentTokenId, \"Invalid tokenId\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isAuthorized() {\r\n        require(_isAuthorizedContract(_msgSender()) || _isOwnerOrAdmin(_msgSender()), \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n}\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.4.1/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: contracts/AwooStoreV2.sol\r\n\r\n\r\n\r\npragma solidity 0.8.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AwooStoreV2 is OwnerAdminGuard {\r\n    struct AwooSpendApproval {\r\n        bytes32 Hash;\r\n        bytes Sig;\r\n        string Nonce;\r\n    }\r\n\r\n    enum PaymentType {\r\n        AWOO,\r\n        ETHER,\r\n        AWOO_AND_ETHER,\r\n        FREE\r\n    }\r\n\r\n    struct UpgradeDetail {\r\n        uint8 ApplicableCollectionId;\r\n        bool UpgradeItem;\r\n        bool Stackable;\r\n        uint256 UpgradeBaseAccrualRate;\r\n    }\r\n\r\n    struct ItemDetail {\r\n        uint16 TotalAvailable;\r\n        uint16 PerAddressLimit;\r\n        uint16 PerTransactionLimit;\r\n        PaymentType PmtType;\r\n        bool Burnable;\r\n        bool NonMintable;\r\n        bool Active;\r\n        IAwooMintableCollection.TokenDetail TokenDetails;\r\n        UpgradeDetail UpgradeDetails;\r\n        string MetadataUri;\r\n        uint256 TokenId;\r\n        uint256 EtherPrice;\r\n        uint256 AWOOPrice;\r\n    }\r\n\r\n    address payable public withdrawAddress;\r\n    IAwooToken public awooContract;\r\n    IAwooClaimingV2 public awooClaimingContract;\r\n    IAwooMintableCollection public awooMintableCollectionContract;\r\n\r\n    bool public storeActive;\r\n\r\n    /// @dev Helps us track the supported ERC721Enumerable contracts so we can refer to them by their\r\n    /// \"id\" to save a bit of gas\r\n    uint8 public collectionCount;\r\n\r\n    /// @dev Helps us track the available items so we can refer to them by their \"id\" to save a bit of gas\r\n    uint16 public itemCount;\r\n\r\n    /// @notice Maps the supported ERC721Enumerable contracts to their Ids\r\n    mapping(uint8 => address) public collectionIdAddressMap;\r\n\r\n    /// @notice Maps the available items to their Ids\r\n    mapping(uint16 => ItemDetail) public itemIdDetailMap;\r\n\r\n    /// @notice Maps the number of purchased (not minted) items\r\n    mapping(uint16 => uint256) public purchasedItemCount;\r\n\r\n    /// @notice Maps item ownership counts\r\n    // owner => (itemId, count).  This is only relevant for items that weren't minted\r\n    mapping(address => mapping(uint16 => uint256))\r\n        public ownedItemCountsByOwner;\r\n\r\n    /// @notice Keeps track of how many of each token has been minted by a particular address\r\n    // owner => (itemId, count)\r\n    mapping(address => mapping(uint16 => uint256))\r\n        public mintedItemCountsByAddress;\r\n\r\n    /// @notice Keeps track of \"upgrade\" item applications\r\n    // itemId => (collectionId, applicationTokenIds)\r\n    mapping(uint16 => mapping(uint8 => uint256[])) public itemApplications;\r\n\r\n    /// @notice Keeps track of \"upgrade\" items by the collection that they were applied to\r\n    // collectionId => (tokenId, (itemId => count))\r\n    mapping(uint8 => mapping(uint32 => mapping(uint16 => uint256)))\r\n        public tokenAppliedItemCountsByCollection;\r\n\r\n    /// @notice A method that tells us that an \"upgrade\" item was applied so we can do some cool stuff\r\n    event UpgradeItemApplied(\r\n        uint16 itemId,\r\n        address applicationCollectionAddress,\r\n        uint256 appliedToTokenId\r\n    );\r\n    // ;)\r\n    event NonMintableItemUsed(uint16 itemId, address usedBy, uint256 qty);\r\n    event ItemPurchased(uint16 itemId, address purchasedBy, uint256 qty);\r\n\r\n    constructor(\r\n        address payable withdrawAddr,\r\n        IAwooToken awooTokenContract,\r\n        IAwooClaimingV2 claimingContract\r\n    ) {\r\n        require(withdrawAddr != address(0), \"Invalid address\");\r\n\r\n        withdrawAddress = withdrawAddr;\r\n        awooContract = awooTokenContract;\r\n        awooClaimingContract = claimingContract;\r\n    }\r\n\r\n    /// @notice Allows the specified item to be minted with AWOO\r\n    /// @param itemId The id of the item to mint\r\n    /// @param qty The number of items to mint\r\n    /// @param approval An object containing the signed message details authorizing us to spend the holders AWOO\r\n    /// @param requestedClaims An optional array of ClaimDetails so we can automagically claim the necessary\r\n    /// amount of AWOO, as specified through NFC\r\n    function mintWithAwoo(\r\n        uint16 itemId,\r\n        uint256 qty,\r\n        AwooSpendApproval calldata approval,\r\n        ClaimDetails[] calldata requestedClaims\r\n    ) public whenStoreActive nonZeroQuantity(qty) {\r\n        ItemDetail memory item = _validateItem(itemId, PaymentType.AWOO);\r\n        require(!item.NonMintable, \"Specified item is not mintable\");\r\n\r\n        _validateRequestedQuantity(itemId, item, qty);\r\n        _ensureAvailablity(item, itemId, qty);\r\n\r\n        _claimAwoo(requestedClaims);\r\n        awooContract.spendVirtualAwoo(\r\n            approval.Hash,\r\n            approval.Sig,\r\n            approval.Nonce,\r\n            _msgSender(),\r\n            qty * item.AWOOPrice\r\n        );\r\n        awooMintableCollectionContract.mint(_msgSender(), item.TokenId, qty);\r\n        mintedItemCountsByAddress[_msgSender()][itemId] += qty;\r\n    }\r\n\r\n    /// @notice Allows the specified item to be minted with Ether\r\n    /// @param itemId The id of the item to mint\r\n    /// @param qty The number of items to mint\r\n    function mintWithEth(uint16 itemId, uint256 qty)\r\n        public\r\n        payable\r\n        whenStoreActive\r\n        nonZeroQuantity(qty)\r\n    {\r\n        ItemDetail memory item = _validateItem(itemId, PaymentType.ETHER);\r\n        require(!item.NonMintable, \"Specified item is not mintable\");\r\n\r\n        _validateRequestedQuantity(itemId, item, qty);\r\n        _ensureAvailablity(item, itemId, qty);\r\n        _validateEtherValue(item, qty);\r\n\r\n        awooMintableCollectionContract.mint(_msgSender(), item.TokenId, qty);\r\n        mintedItemCountsByAddress[_msgSender()][itemId] += qty;\r\n    }\r\n\r\n    /// @notice Allows the specified item to be minted with both AWOO and Ether, if the item supports that\r\n    /// @param itemId The id of the item to mint\r\n    /// @param qty The number of items to mint\r\n    /// @param approval An object containing the signed message details authorizing us to spend the holders AWOO\r\n    /// @param requestedClaims An optional array of ClaimDetails so we can automagically claim the necessary\r\n    /// amount of AWOO, as specified through NFC\r\n    function mintWithEthAndAwoo(\r\n        uint16 itemId,\r\n        uint256 qty,\r\n        AwooSpendApproval calldata approval,\r\n        ClaimDetails[] calldata requestedClaims\r\n    ) public payable whenStoreActive nonZeroQuantity(qty) {\r\n        ItemDetail memory item = _validateItem(\r\n            itemId,\r\n            PaymentType.AWOO_AND_ETHER\r\n        );\r\n        require(!item.NonMintable, \"Specified item is not mintable\");\r\n        _validateRequestedQuantity(itemId, item, qty);\r\n        _ensureAvailablity(item, itemId, qty);\r\n        _validateEtherValue(item, qty);\r\n\r\n        _claimAwoo(requestedClaims);\r\n        awooContract.spendVirtualAwoo(\r\n            approval.Hash,\r\n            approval.Sig,\r\n            approval.Nonce,\r\n            _msgSender(),\r\n            qty * item.AWOOPrice\r\n        );\r\n\r\n        awooMintableCollectionContract.mint(_msgSender(), item.TokenId, qty);\r\n        mintedItemCountsByAddress[_msgSender()][itemId] += qty;\r\n    }\r\n\r\n    /// @notice Allows the specified item to be purchased with AWOO\r\n    /// @param itemId The id of the item to purchase\r\n    /// @param qty The number of items to purchase\r\n    /// @param approval An object containing the signed message details authorizing us to spend the holders AWOO\r\n    /// @param requestedClaims An optional array of ClaimDetails so we can automagically claim the necessary\r\n    /// amount of AWOO, as specified through NFC\r\n    function purchaseWithAwoo(\r\n        uint16 itemId,\r\n        uint256 qty,\r\n        AwooSpendApproval calldata approval,\r\n        ClaimDetails[] calldata requestedClaims\r\n    ) public whenStoreActive nonZeroQuantity(qty) {\r\n        ItemDetail memory item = _validateItem(itemId, PaymentType.AWOO);\r\n        _validateRequestedQuantity(itemId, item, qty);\r\n        _ensureAvailablity(item, itemId, qty);\r\n\r\n        _claimAwoo(requestedClaims);\r\n        awooContract.spendVirtualAwoo(\r\n            approval.Hash,\r\n            approval.Sig,\r\n            approval.Nonce,\r\n            _msgSender(),\r\n            qty * item.AWOOPrice\r\n        );\r\n\r\n        purchasedItemCount[itemId] += qty;\r\n        ownedItemCountsByOwner[_msgSender()][itemId] += qty;\r\n        emit ItemPurchased(itemId, _msgSender(), qty);\r\n    }\r\n\r\n    /// @notice Allows the specified item to be purchased with Ether\r\n    /// @param itemId The id of the item to purchase\r\n    /// @param qty The numbers of items to purchase\r\n    function purchaseWithEth(uint16 itemId, uint256 qty)\r\n        public\r\n        payable\r\n        whenStoreActive\r\n        nonZeroQuantity(qty)\r\n    {\r\n        ItemDetail memory item = _validateItem(itemId, PaymentType.ETHER);\r\n        _validateRequestedQuantity(itemId, item, qty);\r\n        _ensureAvailablity(item, itemId, qty);\r\n        _validateEtherValue(item, qty);\r\n\r\n        purchasedItemCount[itemId] += qty;\r\n        ownedItemCountsByOwner[_msgSender()][itemId] += qty;\r\n        emit ItemPurchased(itemId, _msgSender(), qty);\r\n    }\r\n\r\n    /// @notice Allows the specified item to be purchased with AWOO and Ether, if the item allows it\r\n    /// @param itemId The id of the item to purchase\r\n    /// @param qty The number of items to purchase\r\n    /// @param approval An object containing the signed message details authorizing us to spend the holders AWOO\r\n    /// @param requestedClaims An optional array of ClaimDetails so we can automagically claim the necessary\r\n    /// amount of AWOO, as specified through NFC\r\n    function purchaseWithEthAndAwoo(\r\n        uint16 itemId,\r\n        uint256 qty,\r\n        AwooSpendApproval calldata approval,\r\n        ClaimDetails[] calldata requestedClaims\r\n    ) public payable whenStoreActive nonZeroQuantity(qty) {\r\n        ItemDetail memory item = _validateItem(\r\n            itemId,\r\n            PaymentType.AWOO_AND_ETHER\r\n        );\r\n        _validateRequestedQuantity(itemId, item, qty);\r\n        _ensureAvailablity(item, itemId, qty);\r\n        _validateEtherValue(item, qty);\r\n\r\n        _claimAwoo(requestedClaims);\r\n        awooContract.spendVirtualAwoo(\r\n            approval.Hash,\r\n            approval.Sig,\r\n            approval.Nonce,\r\n            _msgSender(),\r\n            qty * item.AWOOPrice\r\n        );\r\n\r\n        purchasedItemCount[itemId] += qty;\r\n        ownedItemCountsByOwner[_msgSender()][itemId] += qty;\r\n        emit ItemPurchased(itemId, _msgSender(), qty);\r\n    }\r\n\r\n    /// @notice Allows the specified item to be purchased with AWOO and applied to the specified tokens\r\n    /// @param itemId The id of the item to purchase\r\n    /// @param approval An object containing the signed message details authorizing us to spend the holders AWOO\r\n    /// @param requestedClaims An optional array of ClaimDetails so we can automagically claim the necessary\r\n    /// amount of AWOO, as specified through NFC\r\n    /// @param applicationTokenIds An array of supported token ids to apply the purchased items to\r\n    function purchaseAndApplyWithAwoo(\r\n        uint16 itemId,\r\n        AwooSpendApproval calldata approval,\r\n        ClaimDetails[] calldata requestedClaims,\r\n        uint32[] calldata applicationTokenIds\r\n    ) public whenStoreActive {\r\n        ItemDetail memory item = _validateItem(itemId, PaymentType.AWOO);\r\n        _validateRequestedQuantity(itemId, item, applicationTokenIds.length);\r\n        _ensureAvailablity(item, itemId, applicationTokenIds.length);\r\n\r\n        _claimAwoo(requestedClaims);\r\n        awooContract.spendVirtualAwoo(\r\n            approval.Hash,\r\n            approval.Sig,\r\n            approval.Nonce,\r\n            _msgSender(),\r\n            applicationTokenIds.length * item.AWOOPrice\r\n        );\r\n\r\n        purchasedItemCount[itemId] += applicationTokenIds.length;\r\n        _applyItem(itemId, applicationTokenIds);\r\n    }\r\n\r\n    /// @notice Allows the specified item to be purchased with Ether and applied to the specified tokens\r\n    /// @param itemId The id of the item to purchase\r\n    /// @param applicationTokenIds An array of supported token ids to apply the purchased items to\r\n    function purchaseAndApplyWithEth(\r\n        uint16 itemId,\r\n        uint32[] calldata applicationTokenIds\r\n    ) public payable whenStoreActive {\r\n        ItemDetail memory item = _validateItem(itemId, PaymentType.ETHER);\r\n        _validateRequestedQuantity(itemId, item, applicationTokenIds.length);\r\n        _validateEtherValue(item, applicationTokenIds.length);\r\n        _ensureAvailablity(item, itemId, applicationTokenIds.length);\r\n\r\n        purchasedItemCount[itemId] += applicationTokenIds.length;\r\n        _applyItem(itemId, applicationTokenIds);\r\n    }\r\n\r\n    /// @notice Allows the specified item to be purchased with AWOO and Ether and applied\r\n    /// @param itemId The id of the item to purchase\r\n    /// @param approval An object containing the signed message details authorizing us to spend the holders AWOO\r\n    /// @param requestedClaims An optional array of ClaimDetails so we can automagically claim the necessary\r\n    /// amount of AWOO, as specified through NFC\r\n    /// @param applicationTokenIds An array of supported token ids to apply the purchased items to\r\n    function purchaseAndApplyWithEthAndAwoo(\r\n        uint16 itemId,\r\n        AwooSpendApproval calldata approval,\r\n        ClaimDetails[] calldata requestedClaims,\r\n        uint32[] calldata applicationTokenIds\r\n    ) public payable whenStoreActive {\r\n        ItemDetail memory item = _validateItem(\r\n            itemId,\r\n            PaymentType.AWOO_AND_ETHER\r\n        );\r\n        _validateRequestedQuantity(itemId, item, applicationTokenIds.length);\r\n        _validateEtherValue(item, applicationTokenIds.length);\r\n        _ensureAvailablity(item, itemId, applicationTokenIds.length);\r\n\r\n        _claimAwoo(requestedClaims);\r\n        awooContract.spendVirtualAwoo(\r\n            approval.Hash,\r\n            approval.Sig,\r\n            approval.Nonce,\r\n            _msgSender(),\r\n            applicationTokenIds.length * item.AWOOPrice\r\n        );\r\n\r\n        purchasedItemCount[itemId] += applicationTokenIds.length;\r\n        _applyItem(itemId, applicationTokenIds);\r\n    }\r\n\r\n    // TODO: Add the free mint/purchase functionality (V2)\r\n\r\n    /// @notice Applies the specified item to the list of \"upgradeable\" tokens\r\n    /// @param itemId The id of the item to apply\r\n    /// @param applicationTokenIds An array of token ids to which the specified item will be applied\r\n    function applyOwnedItem(\r\n        uint16 itemId,\r\n        uint32[] calldata applicationTokenIds\r\n    ) public whenStoreActive {\r\n        ItemDetail memory item = _getItem(itemId);\r\n        require(\r\n            applicationTokenIds.length <=\r\n                ownedItemCountsByOwner[_msgSender()][itemId],\r\n            \"Exceeds owned quantity\"\r\n        );\r\n\r\n        for (uint256 i; i < applicationTokenIds.length; i++) {\r\n            _applyItem(item, itemId, applicationTokenIds[i]);\r\n        }\r\n\r\n        if (item.Burnable) {\r\n            ownedItemCountsByOwner[_msgSender()][itemId] -= applicationTokenIds\r\n                .length;\r\n        }\r\n    }\r\n\r\n    /// @notice Allows the holder of a non-mintable item to \"use\" it for something (TBA) cool\r\n    /// @param itemId The id of the item to use\r\n    /// @param qty The number of items to use\r\n    function useOwnedItem(uint16 itemId, uint256 qty)\r\n        public\r\n        whenStoreActive\r\n        nonZeroQuantity(qty)\r\n    {\r\n        ItemDetail memory item = _getItem(itemId);\r\n        require(item.Active, \"Inactive item\");\r\n        require(\r\n            qty <= ownedItemCountsByOwner[_msgSender()][itemId],\r\n            \"Exceeds owned quantity\"\r\n        );\r\n\r\n        if (item.Burnable) {\r\n            ownedItemCountsByOwner[_msgSender()][itemId] -= qty;\r\n        }\r\n\r\n        emit NonMintableItemUsed(itemId, _msgSender(), qty);\r\n    }\r\n\r\n    /// @notice Applies the specified item to the list of \"upgradeable\" tokens, and burns the item if applicable\r\n    /// @dev Tokens can only be burned if the holder has explicitly allowed us to do so\r\n    /// @param itemId The id of the item to apply\r\n    /// @param applicationTokenIds An array of token ids to which the specified item will be applied\r\n    function applyMintedItem(\r\n        uint16 itemId,\r\n        uint32[] calldata applicationTokenIds\r\n    ) public whenStoreActive {\r\n        ItemDetail memory item = _getItem(itemId);\r\n        require(!item.NonMintable, \"Specified item is not mintable\");\r\n        require(\r\n            applicationTokenIds.length <=\r\n                awooMintableCollectionContract.balanceOf(\r\n                    _msgSender(),\r\n                    item.TokenId\r\n                ),\r\n            \"Invalid application qty\"\r\n        );\r\n\r\n        for (uint256 i; i < applicationTokenIds.length; i++) {\r\n            _applyItem(item, itemId, applicationTokenIds[i]);\r\n        }\r\n\r\n        if (item.Burnable) {\r\n            awooMintableCollectionContract.burn(\r\n                _msgSender(),\r\n                item.TokenId,\r\n                applicationTokenIds.length\r\n            );\r\n        }\r\n    }\r\n\r\n    function _applyItem(uint16 itemId, uint32[] calldata applicationTokenIds)\r\n        private\r\n    {\r\n        ItemDetail memory item = _getItem(itemId);\r\n        for (uint256 i; i < applicationTokenIds.length; i++) {\r\n            _applyItem(item, itemId, applicationTokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function _applyItem(\r\n        ItemDetail memory item,\r\n        uint16 itemId,\r\n        uint32 applicationTokenId\r\n    ) private {\r\n        require(item.UpgradeDetails.UpgradeItem, \"Item cannot be applied\");\r\n        require(item.Active, \"Inactive item\");\r\n        address collectionAddress = collectionIdAddressMap[\r\n            item.UpgradeDetails.ApplicableCollectionId\r\n        ];\r\n        // Items can only be applied to \"upgradable\" tokens held by the same account\r\n        require(\r\n            _msgSender() ==\r\n                ERC721Enumerable(collectionAddress).ownerOf(applicationTokenId),\r\n            \"Invalid application tokenId\"\r\n        );\r\n\r\n        // Don't allow the item to be applied mutiple times to the same token unless the item is stackable\r\n        if (!item.UpgradeDetails.Stackable) {\r\n            require(\r\n                tokenAppliedItemCountsByCollection[\r\n                    item.UpgradeDetails.ApplicableCollectionId\r\n                ][applicationTokenId][itemId] == 0,\r\n                \"Specified item already applied\"\r\n            );\r\n        }\r\n\r\n        // If the item should change the base AWOO accrual rate of the item that it is being applied to, do that\r\n        // now\r\n        if (item.UpgradeDetails.UpgradeBaseAccrualRate > 0) {\r\n            awooClaimingContract.overrideTokenAccrualBaseRate(\r\n                collectionAddress,\r\n                applicationTokenId,\r\n                item.UpgradeDetails.UpgradeBaseAccrualRate\r\n            );\r\n        }\r\n\r\n        tokenAppliedItemCountsByCollection[\r\n            item.UpgradeDetails.ApplicableCollectionId\r\n        ][applicationTokenId][itemId] += 1;\r\n        itemApplications[itemId][item.UpgradeDetails.ApplicableCollectionId]\r\n            .push(applicationTokenId);\r\n\r\n        // Tell NFC that we applied this upgrade so it can do some fun stuff\r\n        emit UpgradeItemApplied(itemId, collectionAddress, applicationTokenId);\r\n    }\r\n\r\n    function _claimAwoo(ClaimDetails[] calldata requestedClaims) private {\r\n        if (requestedClaims.length > 0) {\r\n            awooClaimingContract.claim(_msgSender(), requestedClaims);\r\n        }\r\n    }\r\n\r\n    function getItemApplications(uint16 itemId, uint8 applicableCollectionId)\r\n        external\r\n        view\r\n        returns (uint256 count, uint256[] memory appliedToTokenIds)\r\n    {\r\n        count = itemApplications[itemId][applicableCollectionId].length;\r\n        appliedToTokenIds = itemApplications[itemId][applicableCollectionId];\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to add supported ERC721Enumerable collections\r\n    function addCollection(address collectionAddress)\r\n        external\r\n        onlyOwnerOrAdmin\r\n        returns (uint8 collectionId)\r\n    {\r\n        collectionId = ++collectionCount;\r\n        collectionIdAddressMap[collectionId] = collectionAddress;\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to remove supported ERC721Enumerable collections\r\n    function removeCollection(uint8 collectionId) external onlyOwnerOrAdmin {\r\n        require(collectionId <= collectionCount, \"Invalid collectionId\");\r\n        delete collectionIdAddressMap[collectionId];\r\n        collectionCount--;\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to add new items\r\n    function addItem(ItemDetail memory item, uint16 purchasedQty)\r\n        external\r\n        onlyOwnerOrAdmin\r\n        returns (uint16)\r\n    {\r\n        _validateItem(item);\r\n\r\n        if (!item.NonMintable && item.TokenId == 0) {\r\n            uint256 tokenId = awooMintableCollectionContract.addToken(\r\n                item.TokenDetails,\r\n                item.MetadataUri\r\n            );\r\n            item.TokenId = tokenId;\r\n        }\r\n\r\n        itemIdDetailMap[++itemCount] = item;\r\n        purchasedItemCount[itemCount] = purchasedQty;\r\n        return itemCount;\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to update an existing item\r\n    function updateItem(\r\n        uint16 itemId,\r\n        ItemDetail memory newItem\r\n    ) external onlyOwnerOrAdmin {\r\n        _validateItem(newItem);\r\n        ItemDetail memory existingItem = _getItem(itemId);\r\n        require(\r\n            existingItem.NonMintable == newItem.NonMintable,\r\n            \"Item mintability cannot change\"\r\n        );\r\n        require(\r\n            newItem.TotalAvailable <= _availableQty(existingItem, itemId),\r\n            \"Total exceeds available quantity\"\r\n        );\r\n\r\n        if (!existingItem.NonMintable) {\r\n            newItem.TokenId = existingItem.TokenId;\r\n\r\n            if (\r\n                bytes(newItem.MetadataUri).length !=\r\n                bytes(existingItem.MetadataUri).length ||\r\n                keccak256(abi.encodePacked(newItem.MetadataUri)) !=\r\n                keccak256(abi.encodePacked(existingItem.MetadataUri))\r\n            ) {\r\n                awooMintableCollectionContract.setTokenUri(\r\n                    existingItem.TokenId,\r\n                    newItem.MetadataUri\r\n                );\r\n            }\r\n\r\n            if (newItem.Active != existingItem.Active) {\r\n                awooMintableCollectionContract.setTokenActive(\r\n                    existingItem.TokenId,\r\n                    newItem.Active\r\n                );\r\n            }\r\n        }\r\n\r\n        itemIdDetailMap[itemId] = newItem;\r\n    }\r\n\r\n    function _validateRequestedQuantity(\r\n        uint16 itemId,\r\n        ItemDetail memory item,\r\n        uint256 requestedQty\r\n    ) private view {\r\n        require(\r\n            _isWithinTransactionLimit(item, requestedQty),\r\n            \"Exceeds transaction limit\"\r\n        );\r\n        require(\r\n            _isWithinAddressLimit(itemId, item, requestedQty, _msgSender()),\r\n            \"Exceeds address limit\"\r\n        );\r\n    }\r\n\r\n    function _ensureAvailablity(\r\n        ItemDetail memory item,\r\n        uint16 itemId,\r\n        uint256 requestedQty\r\n    ) private view {\r\n        require(\r\n            requestedQty <= _availableQty(item, itemId),\r\n            \"Exceeds available quantity\"\r\n        );\r\n    }\r\n\r\n    function availableQty(uint16 itemId) public view returns (uint256) {\r\n        ItemDetail memory item = _getItem(itemId);\r\n        return _availableQty(item, itemId);\r\n    }\r\n\r\n    function _availableQty(ItemDetail memory item, uint16 itemId)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 mintedCount;\r\n\r\n        // If the item is mintable, get the minted quantity from the ERC-1155 contract.\r\n        // The minted count includes the quantity that was burned if the item does not have a soft limit\r\n        if (!item.NonMintable) {\r\n            mintedCount = awooMintableCollectionContract.totalMinted(\r\n                item.TokenId\r\n            );\r\n        }\r\n        return item.TotalAvailable - mintedCount - purchasedItemCount[itemId];\r\n    }\r\n\r\n    /// @notice Determines if the requested quantity is within the per-transaction limit defined by this item\r\n    function _isWithinTransactionLimit(\r\n        ItemDetail memory item,\r\n        uint256 requestedQty\r\n    ) private pure returns (bool) {\r\n        if (item.PerTransactionLimit > 0) {\r\n            return requestedQty <= item.PerTransactionLimit;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @notice Determines if the requested quantity is within the per-address limit defined by this item\r\n    function _isWithinAddressLimit(\r\n        uint16 itemId,\r\n        ItemDetail memory item,\r\n        uint256 requestedQty,\r\n        address recipient\r\n    ) private view returns (bool) {\r\n        if (item.PerAddressLimit > 0) {\r\n            uint256 tokenCountByOwner = item.NonMintable\r\n                ? ownedItemCountsByOwner[recipient][itemId]\r\n                : ownedItemCountsByOwner[recipient][itemId] +\r\n                    mintedItemCountsByAddress[recipient][itemId];\r\n\r\n            return tokenCountByOwner + requestedQty <= item.PerAddressLimit;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @notice Returns an array of tokenIds and application counts to indicate how many of the specified items\r\n    /// were applied to the specified tokenIds\r\n    function checkItemTokenApplicationStatus(\r\n        uint8 collectionId,\r\n        uint16 itemId,\r\n        uint256[] calldata tokenIds\r\n    ) external view returns (uint256[] memory, uint256[] memory) {\r\n        uint256[] memory checkedTokenIds = new uint256[](tokenIds.length);\r\n        uint256[] memory applicationCounts = new uint256[](tokenIds.length);\r\n\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            uint32 tokenId = uint32(tokenIds[i]);\r\n\r\n            checkedTokenIds[i] = tokenId;\r\n            applicationCounts[i] = tokenAppliedItemCountsByCollection[\r\n                collectionId\r\n            ][tokenId][itemId];\r\n        }\r\n\r\n        return (checkedTokenIds, applicationCounts);\r\n    }\r\n\r\n    function _validateEtherValue(ItemDetail memory item, uint256 qty) private {\r\n        require(msg.value == item.EtherPrice * qty, \"Incorrect amount\");\r\n    }\r\n\r\n    function _getItem(uint16 itemId)\r\n        private\r\n        view\r\n        returns (ItemDetail memory item)\r\n    {\r\n        require(itemId <= itemCount, \"Invalid itemId\");\r\n        item = itemIdDetailMap[itemId];\r\n    }\r\n\r\n    function _validateItem(uint16 itemId, PaymentType paymentType)\r\n        private\r\n        view\r\n        returns (ItemDetail memory item)\r\n    {\r\n        item = _getItem(itemId);\r\n        require(item.Active, \"Inactive item\");\r\n        require(item.PmtType == paymentType, \"Invalid item for payment type\");\r\n    }\r\n\r\n    function _validateItem(ItemDetail memory item) private view {\r\n        require(item.TotalAvailable > 0, \"Total available cannot be zero\");\r\n        require(\r\n            !(item.UpgradeDetails.Stackable && item.PerAddressLimit == 1),\r\n            \"Invalid per-address limit\"\r\n        );\r\n\r\n        if (!item.NonMintable) {\r\n            require(\r\n                bytes(item.MetadataUri).length > 0,\r\n                \"Item requires a metadata uri\"\r\n            );\r\n        }\r\n\r\n        if (item.UpgradeDetails.UpgradeItem) {\r\n            require(\r\n                item.UpgradeDetails.ApplicableCollectionId <= collectionCount,\r\n                \"Invalid applicableCollectionId\"\r\n            );\r\n        } else {\r\n            require(\r\n                item.UpgradeDetails.ApplicableCollectionId == 0,\r\n                \"Invalid applicableCollectionId\"\r\n            );\r\n        }\r\n\r\n        if (item.PmtType == PaymentType.ETHER) {\r\n            require(item.EtherPrice > 0, \"Invalid ether price\");\r\n            require(item.AWOOPrice == 0, \"Invalid AWOO price\");\r\n        } else if (item.PmtType == PaymentType.AWOO) {\r\n            require(item.EtherPrice == 0, \"Invalid ether price\");\r\n            require(\r\n                item.AWOOPrice == ((item.AWOOPrice / 1e18) * 1e18),\r\n                \"Invalid AWOO price\"\r\n            );\r\n        } else if (item.PmtType == PaymentType.AWOO_AND_ETHER) {\r\n            require(item.EtherPrice > 0, \"Invalid ether price\");\r\n            require(\r\n                item.AWOOPrice == ((item.AWOOPrice / 1e18) * 1e18),\r\n                \"Invalid AWOO price\"\r\n            );\r\n        }\r\n        // free\r\n        else {\r\n            revert(\"Not implemented, yet\");\r\n        }\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to swap out claiming contract\r\n    function setAwooClaimingContract(IAwooClaimingV2 awooClaiming)\r\n        external\r\n        onlyOwnerOrAdmin\r\n    {\r\n        awooClaimingContract = IAwooClaimingV2(awooClaiming);\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to swap out the ERC-1155 collection contract, if absolutely necessary\r\n    function setAwooCollection(IAwooMintableCollection awooCollectionContract)\r\n        external\r\n        onlyOwnerOrAdmin\r\n    {\r\n        awooMintableCollectionContract = awooCollectionContract;\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to swap out the ERC-20 AWOO contract, if absolutely necessary\r\n    function setAwooTokenContract(IAwooToken awooTokenContract)\r\n        external\r\n        onlyOwnerOrAdmin\r\n    {\r\n        awooContract = awooTokenContract;\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to activate/deactivate this contract\r\n    function setActive(bool active) external onlyOwnerOrAdmin {\r\n        if (active) {\r\n            require(\r\n                address(awooMintableCollectionContract) != address(0),\r\n                \"Awoo collection has not been set\"\r\n            );\r\n        }\r\n        storeActive = active;\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to activate/deactivate specific items\r\n    function setItemActive(uint16 itemId, bool isActive)\r\n        external\r\n        onlyOwnerOrAdmin\r\n    {\r\n        require(itemId > 0 && itemId <= itemCount, \"Invalid Item Id\");\r\n\r\n        itemIdDetailMap[itemId].Active = isActive;\r\n    }\r\n\r\n    /// @notice Allows authorized individuals to specify which address Ether and other arbitrary ERC-20 tokens\r\n    /// should be sent to during withdraw\r\n    function setWithdrawAddress(address payable addr)\r\n        external\r\n        onlyOwnerOrAdmin\r\n    {\r\n        require(addr != address(0), \"Invalid address\");\r\n        withdrawAddress = addr;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external onlyOwnerOrAdmin {\r\n        require(amount <= address(this).balance, \"Amount exceeds balance\");\r\n        require(payable(withdrawAddress).send(amount), \"Sending failed\");\r\n    }\r\n\r\n    /// @dev Any random ERC-20 tokens sent to this contract will be locked forever, unless we rescue them\r\n    function rescueArbitraryERC20(IERC20 token) external {\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        require(balance > 0, \"Contract has no balance\");\r\n        require(\r\n            token.transfer(payable(withdrawAddress), balance),\r\n            \"Transfer failed\"\r\n        );\r\n    }\r\n\r\n    modifier nonZeroQuantity(uint256 qty) {\r\n        require(qty > 0, \"Quantity cannot be zero\");\r\n        _;\r\n    }\r\n\r\n    modifier whenStoreActive() {\r\n        require(storeActive, \"Awoo Store is not active\");\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddr\",\"type\":\"address\"},{\"internalType\":\"contract IAwooToken\",\"name\":\"awooTokenContract\",\"type\":\"address\"},{\"internalType\":\"contract IAwooClaimingV2\",\"name\":\"claimingContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchasedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"ItemPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"NonMintableItemUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicationCollectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appliedToTokenId\",\"type\":\"uint256\"}],\"name\":\"UpgradeItemApplied\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"addCollection\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"collectionId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"TotalAvailable\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"PerAddressLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"PerTransactionLimit\",\"type\":\"uint16\"},{\"internalType\":\"enum AwooStoreV2.PaymentType\",\"name\":\"PmtType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"Burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"NonMintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"SoftLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"}],\"internalType\":\"struct IAwooMintableCollection.TokenDetail\",\"name\":\"TokenDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"ApplicableCollectionId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"UpgradeItem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Stackable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"UpgradeBaseAccrualRate\",\"type\":\"uint256\"}],\"internalType\":\"struct AwooStoreV2.UpgradeDetail\",\"name\":\"UpgradeDetails\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"MetadataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EtherPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AWOOPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct AwooStoreV2.ItemDetail\",\"name\":\"item\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"purchasedQty\",\"type\":\"uint16\"}],\"name\":\"addItem\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint32[]\",\"name\":\"applicationTokenIds\",\"type\":\"uint32[]\"}],\"name\":\"applyMintedItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint32[]\",\"name\":\"applicationTokenIds\",\"type\":\"uint32[]\"}],\"name\":\"applyOwnedItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"}],\"name\":\"availableQty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awooClaimingContract\",\"outputs\":[{\"internalType\":\"contract IAwooClaimingV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awooContract\",\"outputs\":[{\"internalType\":\"contract IAwooToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awooMintableCollectionContract\",\"outputs\":[{\"internalType\":\"contract IAwooMintableCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"collectionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkItemTokenApplicationStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"collectionIdAddressMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"applicableCollectionId\",\"type\":\"uint8\"}],\"name\":\"getItemApplications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"appliedToTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemApplications\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"itemIdDetailMap\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"TotalAvailable\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"PerAddressLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"PerTransactionLimit\",\"type\":\"uint16\"},{\"internalType\":\"enum AwooStoreV2.PaymentType\",\"name\":\"PmtType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"Burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"NonMintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"SoftLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"}],\"internalType\":\"struct IAwooMintableCollection.TokenDetail\",\"name\":\"TokenDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"ApplicableCollectionId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"UpgradeItem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Stackable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"UpgradeBaseAccrualRate\",\"type\":\"uint256\"}],\"internalType\":\"struct AwooStoreV2.UpgradeDetail\",\"name\":\"UpgradeDetails\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"MetadataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EtherPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AWOOPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"Hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"Sig\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"Nonce\",\"type\":\"string\"}],\"internalType\":\"struct AwooStoreV2.AwooSpendApproval\",\"name\":\"approval\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"TokenIds\",\"type\":\"uint32[]\"}],\"internalType\":\"struct ClaimDetails[]\",\"name\":\"requestedClaims\",\"type\":\"tuple[]\"}],\"name\":\"mintWithAwoo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"mintWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"Hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"Sig\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"Nonce\",\"type\":\"string\"}],\"internalType\":\"struct AwooStoreV2.AwooSpendApproval\",\"name\":\"approval\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"TokenIds\",\"type\":\"uint32[]\"}],\"internalType\":\"struct ClaimDetails[]\",\"name\":\"requestedClaims\",\"type\":\"tuple[]\"}],\"name\":\"mintWithEthAndAwoo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"mintedItemCountsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"ownedItemCountsByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"Hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"Sig\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"Nonce\",\"type\":\"string\"}],\"internalType\":\"struct AwooStoreV2.AwooSpendApproval\",\"name\":\"approval\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"TokenIds\",\"type\":\"uint32[]\"}],\"internalType\":\"struct ClaimDetails[]\",\"name\":\"requestedClaims\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32[]\",\"name\":\"applicationTokenIds\",\"type\":\"uint32[]\"}],\"name\":\"purchaseAndApplyWithAwoo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint32[]\",\"name\":\"applicationTokenIds\",\"type\":\"uint32[]\"}],\"name\":\"purchaseAndApplyWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"Hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"Sig\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"Nonce\",\"type\":\"string\"}],\"internalType\":\"struct AwooStoreV2.AwooSpendApproval\",\"name\":\"approval\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"TokenIds\",\"type\":\"uint32[]\"}],\"internalType\":\"struct ClaimDetails[]\",\"name\":\"requestedClaims\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32[]\",\"name\":\"applicationTokenIds\",\"type\":\"uint32[]\"}],\"name\":\"purchaseAndApplyWithEthAndAwoo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"Hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"Sig\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"Nonce\",\"type\":\"string\"}],\"internalType\":\"struct AwooStoreV2.AwooSpendApproval\",\"name\":\"approval\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"TokenIds\",\"type\":\"uint32[]\"}],\"internalType\":\"struct ClaimDetails[]\",\"name\":\"requestedClaims\",\"type\":\"tuple[]\"}],\"name\":\"purchaseWithAwoo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"purchaseWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"Hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"Sig\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"Nonce\",\"type\":\"string\"}],\"internalType\":\"struct AwooStoreV2.AwooSpendApproval\",\"name\":\"approval\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"TokenIds\",\"type\":\"uint32[]\"}],\"internalType\":\"struct ClaimDetails[]\",\"name\":\"requestedClaims\",\"type\":\"tuple[]\"}],\"name\":\"purchaseWithEthAndAwoo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"purchasedItemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"collectionId\",\"type\":\"uint8\"}],\"name\":\"removeCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueArbitraryERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[2]\",\"name\":\"admins\",\"type\":\"address[2]\"}],\"name\":\"setAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAwooClaimingV2\",\"name\":\"awooClaiming\",\"type\":\"address\"}],\"name\":\"setAwooClaimingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAwooMintableCollection\",\"name\":\"awooCollectionContract\",\"type\":\"address\"}],\"name\":\"setAwooCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAwooToken\",\"name\":\"awooTokenContract\",\"type\":\"address\"}],\"name\":\"setAwooTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setItemActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"tokenAppliedItemCountsByCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"TotalAvailable\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"PerAddressLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"PerTransactionLimit\",\"type\":\"uint16\"},{\"internalType\":\"enum AwooStoreV2.PaymentType\",\"name\":\"PmtType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"Burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"NonMintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"SoftLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"}],\"internalType\":\"struct IAwooMintableCollection.TokenDetail\",\"name\":\"TokenDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"ApplicableCollectionId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"UpgradeItem\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Stackable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"UpgradeBaseAccrualRate\",\"type\":\"uint256\"}],\"internalType\":\"struct AwooStoreV2.UpgradeDetail\",\"name\":\"UpgradeDetails\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"MetadataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EtherPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AWOOPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct AwooStoreV2.ItemDetail\",\"name\":\"newItem\",\"type\":\"tuple\"}],\"name\":\"updateItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"useOwnedItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AwooStoreV2", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000005e697c6f5cbebd6ca17bde80d684c226a1e223be000000000000000000000000ffe844169bfc6da1b87c9157f684e18e7f1663ad00000000000000000000000045b959c5409b780bbdccd7c090038038093fcb0d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b90355c79836f90542d0c8d33752921b152610b8194df56cbf80d2a34371348e"}]}