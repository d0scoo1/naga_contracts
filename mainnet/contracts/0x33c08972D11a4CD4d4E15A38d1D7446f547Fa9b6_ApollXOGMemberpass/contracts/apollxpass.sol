// SPDX-License-Identifier: MIT

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%###(%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%#%#((%####%#%%%&%%%%%((#&&&&&/.*&%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%(###%##(#/###//%%%&&%,&&&&&%%(#%&&,#%*#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%#*%%/(&&#%%%#%&&&@&%&&@@&&&@&&%%%&&%&%(#(,*#((%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%*((##(/*.    .//%&%%(%&&&&##(//#%&&&&&%#%(#&#%%(*&%&%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%#*,*%%#(%#(//*.,/*(%&%@@&&&&&&@&#&(&@&&%%&&#/*,(%(*.%#&*##%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%# /*(#%%#((###%%&%%(*(%&&&@&&&&&@&&&@&&%, /#%%#/(*,//((*##*##%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%% .*,*,,(#*(%#(%%%#(,(&&&%#%%%&#%&&@@&&&&&&&%/*.,,/((*,(%#%**%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%#(/,/(/*,#//#%#,,##%&&&%##%%##%&@&/(##%#,,//%&#%&%%##%(*&(,/#(%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%((*/.,##,,,*(((((%**/##*,/#%%%%%%%(##%&#&&&&#%%&%%%(%&%#%%&%%%&#  ,/%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%#%%/.,,/%%./#((#/, .*#%%&&%%%%%&%%%##&/,#%&&&&&&%%#*(#%#.,(     *    %%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%((*,** ,#//(#%/(#%%&&&@&%%%%&&&&%%%&%&&%*%&&&%(,(#*(%#/.%(,%#. */ ,%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%  /(%   ./,/#&&&&&&&%%%%&@@&&&%%%&&%&&&&//&(#&&%**%&(/(%*#%#(#.*%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%#*,.,#////.*(%&&&&&&%%%%&@@@@@@&%%%&&&&&&&&#*.,/(##%%##(/*,,###,*(#%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%    ... .*(**//**%%%%&@&&&@@@&&%%%&&&&&&&&&/..,,((#**,//,#(/##%*.,%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%,(/**(,*.*, /&%%%%/..#&&&&%%../%%%####(#%%#/,//,,,/#%%(*/#%#*.%&#.%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%/.*%%%%%%%%%##%%%%%%%%%%%%%%%%%%%%%%%%%%%#/*/(.//#%*. /%#/   .,//.#%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%* ./####%%%%#%%%%%&&#/%&&#(#%%&&%%%%##,*//##(/..*,.,*/.#,/( *%(*,.%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%*.*#/,/#%&%%%%&@@@%*%&&&(#&@@@@@%%%%%@@@@&%((((/. ,*, ///*     /%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%#.#,.,,(#%%%%&@&&#/*%&&%(%&@@@@@@&%%%&@&&%#//(#/#*(##(#(.,%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%# ,, .*%%%%&&@&%*,(&&&((#%&@@@@@@%%%%%&%#/**(/.,/%#*/%*,%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%   *#%%%&&&&%*,%@@&((#%#%&@@@@&&%%%##/**(*/.    *.  %%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%, .,((%%%&&#  .*/*,,.,*&&&&&&&%%#%%#(//,*((.(/*** .%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%% .,*#%%&&&%.    .#&&&@@&&&%%####%%%/*,. .,  .  %%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%.,*(#%%#/*,*%@&%&&&&&@@&&%###(//#%%/,  .*,.    %%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%#.,/(#&&%(%&@&%%#.  *%&&%#((((/*/#(,./*.,./#((/%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%#.,(#&&%%#/*,.,,*#&&@&%%##/**,,,.(,(////##(((((%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ,/%&&&&@&@@@@@@@&&&%(/**,...  #%#/#*(#####/*#%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#  *(%%%&&&@@@&&&%%#/*,..   /%%&&%(*##&&%%(#((/#%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    ,(####%&%%#(*,,.    ,&@@&@&&#//%&&%#&%%#((///*%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%(        .....       ,&@@@@@@@&%#(%&&%((#(#%####/%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                 .%&&&&&&@@@@%%((##(#(//*#(##%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%,*             /%%&&&@@@@@@%%%#((/*/(#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*%%,      .(%%%%%%%&&&%#((/.  #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/#%%#&@@&#%&%%%#%#%/**/,(%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/interfaces/IERC2981.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Address.sol";

contract ApollXOGMemberpass is ERC721, IERC2981, ReentrancyGuard, Ownable {
  using Counters for Counters.Counter;

  constructor()
    ERC721("ApollX OG Memberpass", "AXOGM")
  {
    customBaseURI = "https://apollx-og-pass.apollx.workers.dev/";
  }

  /** MINTING LIMITS **/
  mapping(address => uint256) private mintCountMap;
  mapping(address => uint256) private allowedMintCountMap;

  /** MINTING **/
  uint256 public constant MAX_SUPPLY = 1420;

  uint256 public constant PRICE = 200000000000000000;

  Counters.Counter private supplyCounter;

  function mint() public payable nonReentrant {
    require(saleIsActive, "Sale not active");
    require(totalSupply() < MAX_SUPPLY, "Exceeds max supply");
    require(msg.value >= PRICE, "Insufficient payment, 0.2 ETH per item");

    _mint(msg.sender, totalSupply() + 1);
    supplyCounter.increment();
  }

  function mintTo(address receiver, uint256 count) public nonReentrant onlyOwner {
    require(totalSupply() < MAX_SUPPLY, "Exceeds max supply");

    for (uint256 i = 0; i < count; i++) {
      _mint(receiver, totalSupply() + 1);
      supplyCounter.increment();
    }
  }

  function totalSupply() public view returns (uint256) {
    return supplyCounter.current();
  }

  /** ACTIVATION **/
  bool public saleIsActive = true;

  function setSaleIsActive(bool saleIsActive_) external onlyOwner {
    saleIsActive = saleIsActive_;
  }

  /** URI HANDLING **/
  string private customBaseURI;

  function setBaseURI(string memory customBaseURI_) external onlyOwner {
    customBaseURI = customBaseURI_;
  }

  function _baseURI() internal view virtual override returns (string memory) {
    return customBaseURI;
  }

  /** PAYOUT **/
  function withdraw() public nonReentrant {
    uint256 balance = address(this).balance;
    Address.sendValue(payable(owner()), balance);
  }

  /** ROYALTIES **/
  function royaltyInfo(uint256, uint256 salePrice) external view override
    returns (address receiver, uint256 royaltyAmount)
  {
    return (address(this), (salePrice * 420) / 10000);
  }

  function supportsInterface(bytes4 interfaceId)
    public
    view
    virtual
    override(ERC721, IERC165)
    returns (bool)
  {
    return (
      interfaceId == type(IERC2981).interfaceId ||
      super.supportsInterface(interfaceId)
    );
  }
}