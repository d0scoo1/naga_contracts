// SPDX-License-Identifier: MIT

pragma solidity 0.8.13;

import "./interfaces/INinfaERC721.sol";
import { IERC165, IERC2981 } from "@openzeppelin/contracts/interfaces/IERC2981.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";

/**
    ███    ██ ██ ███    ██ ███████  █████  
    ████   ██ ██ ████   ██ ██      ██   ██ 
    ██ ██  ██ ██ ██ ██  ██ █████   ███████ 
    ██  ██ ██ ██ ██  ██ ██ ██      ██   ██ 
    ██   ████ ██ ██   ████ ██      ██   ██                                                                               
 */

/// @custom:security-contact tech@ninfa.io
contract NinfaMarketplace is
    Initializable,
    AccessControlUpgradeable // {AccessControl} doesn’t allow enumerating role members, whereas {AccessControlEnumerable} allows it. The additional "enumerable" functions are getRoleMember(role, index) and getRoleMemberCount(role). The role member can be enumerated by frontend using events, therefore the enumerable extension is not needed to be read on-chain.
{
    INinfaERC721 public NinfaERC721;

    using CountersUpgradeable for CountersUpgradeable.Counter; // counters for marketplace offers and orders

    CountersUpgradeable.Counter private _orderCount; // orders counter
    CountersUpgradeable.Counter private _offerCount; // offers counter

    bytes32 private constant CURATOR_ROLE = 0x850d585eb7f024ccee5e68e55f2c26cc72e1e6ee456acf62135757a5eb9d4a10; // hardcoded hash equivalent to keccak256("CURATOR_ROLE"); CURATOR_ROLE is the "role admin" of ARTIST_ROLE, i.e. it is the only account that can grant and revoke roles to artists. This was added to avoid having a DEFAULT_ADMIN_ROLE approve artists, which would introduce security risks if different from a multisig, and usability issues if each time a multisig was needed to approve artists.
    bytes32 private constant ARTIST_ROLE = 0x877a78dc988c0ec5f58453b44888a55eb39755c3d5ed8d8ea990912aa3ef29c6; // hardcoded hash equivalent to keccak256("ARTIST_ROLE"); Since there isn't a getter function, it can be copied from the source code. The ARTIST_ROLE allows an address to mint tokens
    uint24 private ninfaPrimaryFee; // Ninfa Marketplace fee percentage for primary sales, expressed in basis points. It is not constant because primary sale fees are at 0% for 2022 and will need to be set afterwards to 10%.
    uint24 private constant NINFA_SECONDARY_FEE = 500; // 5% fee on all secondary sales paid to Ninfa (seller receives the remainder after paying 10% royalties to artist/gallery and 5% Ninfa, i.e. 85%)
    bytes4 private constant INTERFACE_ID_ERC2981 = 0x2a55205a; // https://eips.ethereum.org/EIPS/eip-2981
    address payable private feeAccount; // EOA or contract where to send trading fees generated by the marketplace
    mapping(address => mapping(uint256 => _Commission)) private _royaltiesCommission; // commission % amount out of any royalties received by an artist who choses to split with someone, normally a gallery. collection => tokenId => _Commission.
    mapping(uint256 => _Commission) private _primarySalesCommission; // The % amount on all primary sales income that an artist received from sales on the marketplacce, destined to a gallery chosen by the artist.
    mapping(address => mapping(uint256 => uint256)) private _tokenToOrderId; // mapping to find orderId given an ERC721 address and a tokenId.
    mapping(address => bool) private ERC721Whitelist; // in order to be traded on the Ninfa marketplace, collections need to be manually approved by a multisig contract.
    mapping(uint256 => bool) private secondarySale; // map token Id to bool indicating wether it has been sold before, only applies to the Ninfa collection NFTs, all other collections are considered as secondary sales.
    mapping(uint256 => _Invoice) private orders; // mapping order id to invoice struct
    mapping(uint256 => _Invoice) private offers; // mapping offer id to invoice struct

    struct _Invoice {
        address collection;
        uint256 tokenId;
        address from; // if invoice represents an order, `from` will correspond to the seller, if it represents an offer, `from` will correspond to the buyer
        uint256 price; // seller ask or buyer bid
    }

    struct _Commission {
        address receiver; // receiver of royalty fees commission
        uint24 feeBps; // royalties's commission receiver fees, expressed in basis points 0 - 10000
    }

	event Order(            address indexed collection, uint256 indexed tokenId, address indexed from, uint256 orderId, uint256 price);
    event Offer(            address indexed collection, uint256 indexed tokenId, address indexed from, uint256 offerId, uint256 price);
	event OrderCancelled(   address indexed collection, uint256 indexed tokenId, address indexed from, uint256 orderId);
    event OfferCancelled(   address indexed collection, uint256 indexed tokenId, address indexed from, uint256 offerId);
    event Trade(            address indexed collection, uint256 indexed tokenId, address indexed from, uint256 price, address to, uint256 orderId);
    event RoyaltyPayment(   address indexed collection, uint256 indexed tokenId, address indexed to, uint256 amount); // currency is eth for now, in the future it will include a parameter for currency as well. This event is also emitted when paying commissions on royalties.
    event Commission(       address indexed collection, uint256 indexed tokenId, address indexed to, uint24 primaryBps, uint24 royaltyBps); // using Commission event as cheap storage for commission info. In order to tell whether this event was emitted by `setRoyaltyCommission()` or by `setPrimarySaleCommission()` is given away by whichever "bps" parameter is not 0. E.g. if `primaryBps` has a value (1-10000) that means the commission was set on primary sales, therefore `royaltyBps` must be 0, and viceversa, they can also be both true.
    event FeeAccount(       address feeAccount); // emitted for transparency whenever the marketplace's fees receiver account changes

    modifier orderValid(uint256 _id) {
        require(_id > 0 && _id <= _orderCount.current(), "Order Id does not exist"); // check the order exists in order to avoid unhandled "index out of bound" errors
        // order structs are deleted after succesful trades, as well as after calling cancelOrder().
        // all functions using `orderValid` modifier (except for `fillOrder`) already check that offers[_id].from != 0 , i.e. there is no need to check this here duplicating code
        _;
    }

    modifier offerValid(uint256 _id) {
        require(_id > 0 && _id <= _offerCount.current(), "Offer Id does not exist"); // not strictly necessary, but prevents reverts like when accepting an inexistent offer would return "ERC721: transfer to the zero address" because the "from" is 0x0.
        // the offer struct is deleted after succesful trades, as well as after calling cancelOffer()
        _;
    }

    /***********
     * MINTING *
     **********/

    /**
     * @notice mint can only be called by approved add
     * @dev placed at the top of the contract to save a little gas as it will be called often.
     * @param _tokenURI the ipfs hash of the token, it needs to be base58 and hex encoded, removing the first two bytes "Qm", in order to fit exactly in 32 bytes.
     * const getBytes32FromIpfsHash = hash => {
     *      let bytes = bs58.decode(hash);
     *      bytes = bytes.slice(2, bytes.length);
     *      return web3.utils.bytesToHex(bytes)
     *  };
     */
    function mint(bytes32 _tokenURI) external onlyRole(ARTIST_ROLE) {
        NinfaERC721.mint(_tokenURI, msg.sender);
    }

    /**
     * @notice requires the artist setting approval for all token transfers from the Marketplace
     * @param _tokenURI the ipfs hash of the token, it needs to be base58 and hex encoded, removing the first two bytes "Qm", in order to fit exactly in 32 bytes.
     * @param _to after transfering the token to the artist (i.e. minting), the marketplace (needs to be approved) transfers the token from the artist to the `_to` address, normally a gallery.
     * @param _primaryBps maximum 85% of primary sales can be paid as commission, in order to avoid zero value transfers or reverting caused by underflow.
     * @param _primaryBps A frontent should disallow setting _primaryBps to 0, although it isn't enforced in this function, because the _trade() function will not pay any part of the primary sale to the artist if _primaryBps is set to 0, it will all go to the seller. It is assumed that whoever calls mintAndTransfer is tranfering to a gallery that will charge a commission on the sale and not do it for free.
     * @param _royaltyBps maximum 90% of royalties can be paid as commission, in order to avoid zero value transfers or reverting caused by underflow. It is assumed that the artist may not want to pay commissions on royalties to the gallery, so this may be left 0.
     */
    function mintAndTransfer(
        bytes32 _tokenURI,
        address _to,
        uint24 _primaryBps,
        uint24 _royaltyBps
        ) onlyRole(ARTIST_ROLE) external {

        require(_primaryBps <= 8500 && _royaltyBps <= 9000);
        uint256 _tokenId = NinfaERC721.totalSupply();

        NinfaERC721.mint(_tokenURI, msg.sender);

        NinfaERC721.transferFrom(msg.sender, _to, _tokenId);

        // this if check may seem redundant since we are checking both conditions again, but it is just so that the commision event is only emitted once in order to save a little gas, in case both primary and royalty sale commissions are set
        if (_primaryBps > 0 || _royaltyBps > 0) {

            if (_primaryBps > 0) {
                _primarySalesCommission[_tokenId] = _Commission(_to, _primaryBps);
            }

            if (_royaltyBps > 0) {
                _royaltiesCommission[address(NinfaERC721)][_tokenId] = _Commission(_to, _royaltyBps);
            }

            emit Commission(address(NinfaERC721), _tokenId, _to, _primaryBps, _royaltyBps);
        }

    }

    /***********
     * TRADING *
     ***********/

    /**
     * @notice create a new order on the marketplace by transfering an NFT to it.
     * @param _collection address of the ERC721 contract
     * @param _tokenId the NFT id, for now we only allow trading NINFA NFT's so no erc721 address is needed
     * @param _price the NFT's price. for now we support only ETH payments.
     */ 
    function submitOrder(address _collection, uint256 _tokenId, uint256 _price) external {
        require( _price > 0); // protecting the user from mistakenly submitting an order for free
        require( _collection == address(NinfaERC721) || ERC721Whitelist[_collection] == true); // ERC721 must be whitelisted. Comparing the collection to address(ninfa) first is cheaper than whitelisting the ninfa erc721 and then checking the whitelist, however if the collection is not ninfa then it might be slightly more expensive than if we just checked the whitelist
        require( INinfaERC721(_collection).ownerOf(_tokenId) == msg.sender); // it may seem safe to remove this require statement, since after transferFrom another require statement already checks that ownerOf tokenId is the marketplace, however imagine the ERC721 does not revert if sender isn't owner; somebody could create orders for NFTs already on sale (owned by marketplace)!

        INinfaERC721(_collection).transferFrom(msg.sender, address(this), _tokenId); // transfer NFT directly to this contract, reverts on failure. Only NFT owner can transfer the token, i.e. call this function.
        require( INinfaERC721(_collection).ownerOf(_tokenId) == address(this)); // According to the EIP, the transfer and transferFrom function will revert if the msg.sender is not the owner of the NFT. Consider what would happen if a non-standard implementation does not revert.

		_orderCount.increment(); // start _orderCount at 1
        orders[_orderCount.current()] = _Invoice(_collection, _tokenId, msg.sender, _price); // add order to orders mapping

        _tokenToOrderId[_collection][_tokenId] = _orderCount.current(); /// @dev map token Id to order Id. There is no need to reset back to zero when cancelling the order, as the frontend would determine whether the token is for sale first by checking if owned by the Marketplace, if it is then the order Id is valid.

		emit Order(_collection, _tokenId, msg.sender, _orderCount.current(), _price);
	}

    /**
     * @dev offers can be made independently of whether the token is on sale or not, the msg.value is used to determine the offer amount, so no function parameter is needed for that
     * @dev there is no require to check that an offer or offer doesn't already exist and if so, that the offer amount is not greater than the order itself, this was omitted in order to save gas; the frontend should check this in order to prevent mistakes from the user
     * @param _collection address of the erc721 implementation contract or proxy contract
     * @param _tokenId the token Id to make an offer to
     */
    function submitOffer(address _collection, uint256 _tokenId) external payable {
        require(msg.value > 0);
        require(INinfaERC721(_collection).ownerOf(_tokenId) != address(0x0)); // the nft id must exist already
        require( _collection == address(NinfaERC721) || ERC721Whitelist[_collection] == true);
        
        _offerCount.increment(); // start count at 1
        
        offers[_offerCount.current()] = _Invoice(_collection, _tokenId, msg.sender, msg.value); // add offer Struct to offers mapping

		emit Offer(_collection, _tokenId, msg.sender, _offerCount.current(), msg.value);
    }

    /**
     * @dev cancels order and transfers NFT back to owner
     * @param _orderId the Id of the order
     */
    function cancelOrder(uint256 _orderId) orderValid(_orderId) external {

		require(orders[_orderId].from == msg.sender);
        
        NinfaERC721.transferFrom(address(this), msg.sender, orders[_orderId].tokenId); // transfer NFT back to the owner

        delete _tokenToOrderId[ orders[_orderId].collection ][ orders[_orderId].tokenId ];

        emit OrderCancelled(orders[_orderId].collection, orders[_orderId].tokenId, msg.sender, _orderId);

        delete orders[_orderId]; // mark order as cancelled forever after event is emitted or else all values emitted will be 0
    }

    /**
     * @dev cancels offer and transfers ETH back to bidder. When an order gets filled, the offer isn't marked as cancelled, in order to allow users to claim back their money.
     * @param _offerId the Id of the offer.
     */
    function refundOffer(uint256 _offerId) offerValid(_offerId) external {

        _Invoice memory _offer = offers[_offerId]; // in memory copy needed so that it is possible to delete the struct inside the storage offers mapping, while keeping check effects interact pattern intact

		require(_offer.from == msg.sender); // this implicitly also checks that the offer exists, since msg.sender cannot be == 0x0

        delete offers[_offerId]; // mark offer as cancelled forever, updating offer price before external call, Checks Effects Interactions pattern
        (bool success, ) = payable(_offer.from).call{value: _offer.price}(""); // transfer the offer amount back to bidder
        require(success);

        emit OfferCancelled(_offer.collection, _offer.tokenId, msg.sender, _offerId);
    }

    function changeOrderPrice(uint256 _orderId, uint256 _newPrice) orderValid(_orderId) external {
        require(_newPrice > 0); // protecting the user from mistakenly submitting an order for free. We could also require that it is not the same as the previous price, but it is  probably spending gas for nothing as the chance is very low and doesn't res

        _Invoice storage _order = orders[_orderId];
		require(_order.from == msg.sender);

        _order.price = _newPrice;

        emit Order(_order.collection, _order.tokenId, msg.sender, _orderId, _order.price);
    }

    /**
     * @dev this is one of two functions called by a buyer in order to modify their offer, there are two functions, `increaseOffer()` and `decreaseOffer()`, because they expect different parameters depending on whether the offer is being increased or decreased.
     *      A `msg.value` is required, this function will add the amount sent to the old offer amount. The frontend needs to calculate the difference between the old and new offer.
     *      E.g. A buyer calls submitOffer() and pays 0.1 ETH. The same buyer later wants to increase the offer to 0.3 ETH, therefore they now need to send 0.2 ETH, because 0.1 was was sent before.
     * @param _offerId the id of the offer
     */
    function increaseOffer(uint256 _offerId) offerValid(_offerId) external payable {

        _Invoice storage _offer = offers[_offerId];
        require(_offer.from == msg.sender);
        require(msg.value > 0);

        _offer.price = _offer.price + msg.value; // transfer extra amount needed on top of older offer

        emit Offer(_offer.collection, _offer.tokenId, msg.sender, _offerId, _offer.price);
    }

    /**
     * @dev this is one of two functions called by a buyer in order to modify their offer, there are two functions, `increaseOffer()` and `decreaseOffer()`, because they expect different parameters depending on whether the offer is being increased or decreased.
     *      In contrast with `increaseOffer()`, instead of `msg.value` this function expects a uint parameter representing the new (lower) offer; the buyer will get refunded the difference.
     *      E.g. A buyer calls submitOffer() and pays 0.3 ETH. The same buyer later wants to decrease the offer to 0.1 ETH, therefore they will get refunded 0.2 ETH. I.e. The amount expected by the `_newAmount` paramer is 0.1 ETH (1^17).
     * @param _offerId the id of the offer
     * @param _newAmount the new offer amount in Ether, NOT the difference with the previous offer, just the new (lower) offer amount. E.g. 1 ETH = 1^18.
     */
    function decreaseOffer(uint256 _offerId, uint256 _newAmount) offerValid(_offerId) external {
        
        _Invoice storage _offer = offers[_offerId];
        require(_offer.from == msg.sender);
        require(_newAmount > 0 && _newAmount < _offer.price);

        uint256 _refund = _offer.price - _newAmount; // needed to store result before offer price is updated
        _offer.price = _newAmount; // updating offer price before external call, Checks Effects Interactions pattern

        (bool success, ) = payable(msg.sender).call{value: _refund}(""); // transfer the difference between old and new lower offer to the user
        require(success);

        emit Offer(_offer.collection, _offer.tokenId, msg.sender, _offerId, _offer.price);
    }

    /**
     * @notice the collector calls this function to buy an NFT at the ask price, only if an order exists
     */
    function fillOrder (uint256 _orderId) orderValid(_orderId) external payable {

        require(orders[_orderId].price > 0); // checking that the order wasn't deleted or filled

        require(msg.value >= orders[_orderId].price);

		_trade(_orderId, msg.sender, orders[_orderId].from, orders[_orderId].price, orders[_orderId].tokenId, orders[_orderId].collection);
	}

    /**
     * @dev this function can only be called by the owner of the NFT for sale, i.e. the address that created the order.
     * Eg. the order creator may be happy with an offer amount, so they call acceptOffer() passing in the offer Id as the only parameter;
     * the internal _trade() function will get called, where this smart contract will send the offer amount to the seller (minus fees) and send the NFT to the buyer.
     */
    function acceptOffer(uint256 _offerId) offerValid(_offerId) external {
        
        _Invoice memory _offer = offers[_offerId]; // creating an additional variable in this particular case is cheaper than calling `offers[_offerId].something` each time. See https://ethereum.org/en/developers/tutorials/downsizing-contracts-to-fight-the-contract-size-limit/#avoid-additional-variables
        require(_offer.price > 0); // checks that the offer exists, since offer price cannot be 0
        
        uint256 _orderId = _tokenToOrderId[_offer.collection][_offer.tokenId]; // If there is no order, the Id will be set to 0, else the order will be marked as filled by the _trade() function, orderFilled[_orderId] = true;

        if(_orderId != 0) {

            require(orders[_orderId].from == msg.sender); // if _orderId is different from 0, then automatically the order exists because otherwise the mapping would be deleted, i.e. no need to check the order is valid
        } else {
            // in theory, we could skip this check as the transaction should revert as token ownership is checked by the erc721 transferFrom function in `require(_isApprovedOrOwner(_msgSender(), tokenId))`,
            // however if the marketplace relied on this check, it would not revert if the owner had previously approved the marketplace, i.e. anyone could accept the offer and cash if we weren't performing this check because transferFrom would pass if the marketplace is set as operator for the token owner.
            // Also, given that Ninfa has no control over all of the accepted collections' implementations, there is no guarantee that the collection will follow the standard.
            require(INinfaERC721(_offer.collection).ownerOf(_offer.tokenId) == msg.sender);
        }
        
        delete offers[_offerId]; // mark offer as cancelled forever, so that user's can't claim a refund after their offer gets accepted
		
        _trade(_orderId, _offer.from, msg.sender, _offer.price , _offer.tokenId, _offer.collection); // we are passing offer amount instead of order price as function parameter
    }

    /**
     * @param _orderId order Id
     * @param _buyer order or offer creator, depending on who `msg.sender` is
     * @param _price NFT's price
     * @param _tokenId NFT's Id
     */
    function _trade(uint256 _orderId, address _buyer, address _seller, uint256 _price, uint256 _tokenId, address _collection) private {

        uint256 marketplaceFeeAmount = _price * NINFA_SECONDARY_FEE / 10000;
        uint256 sellerAmount;
        bool success;

        /**
         * Transfer NFT to buyer
         *
         * if _orderId is different from 0, there is an order; the marketplace is the owner of the nft, therefore the "from" parameter must be the marketplace's address
         * if _orderId is 0, there is no order; the marketplace is NOT the owner of the nft, therefore the "from" parameter must be the seller's address (whoever called acceptOffer()s)
         * i.e. _orderId will be 0 when _trade is called from acceptOffer AND no order exists corresponding to the token for which the offer was made
         * order-related information must be deleted here, otherwise state wouldn't be updated when the seller calls acceptOffer, but only when buyer calls fillOrder
         */
        if (_orderId != 0) {
            NinfaERC721.transferFrom(address(this), _buyer, _tokenId); // transfer NFT from Marketplace to buyer
            delete orders[_orderId]; // mark the order as filled
            delete _tokenToOrderId[_collection][_tokenId]; // delete old mapping
        } else {
            NinfaERC721.transferFrom(_seller, _buyer, _tokenId); // transfer NFT from seller to buyer
        }

        if ( IERC165(_collection).supportsInterface(INTERFACE_ID_ERC2981) ) {
            
            // If the collection supports the erc2981 royalties interface, store the receiver address and amount in memory. This is needed as all external collections are considered as secondary sales.
            ( address royaltyReceiver, uint256 royaltyAmount ) = IERC2981(_collection).royaltyInfo(_tokenId, _price);

            /**
             * if it is the NinfaERC721 collection, store the artist address and royalty amount in memory, if any.
             * commissionAmount may still end up being zero even if the basis points are set to be grater than 0, therefore before transfering any fees to it the contract must revert on zero value transfers.
             * if a collection doesn't support erc2981 then we know it's not Ninfa, therefore by placing this `if` check in here we avoid comparing every collection's address to Ninfa's unnecessarily.
             */
            if ( _collection == address(NinfaERC721) ) {
                
                /**
                 * if it is a primary sale; since primary sales only apply to the Ninfa collection
                 */
                if ( !secondarySale[_tokenId] ) {
                    // overrides the `marketplaceFeeAmount` that is by default calculated using NINFA_SECONDARY_FEE. There is a separate if case should fees be set to 0, in order to avoid dividing 0 by 10000 which would revert the transaction.
                    if ( ninfaPrimaryFee == 0 ) {
                        marketplaceFeeAmount = 0;
                    } else {
                        marketplaceFeeAmount = _price * ninfaPrimaryFee / 10000; 
                    }
                    
                    secondarySale[_tokenId] = true; // Set secondarySale bool to true after first sale on NinfaMarketplace.
                    
                    // store for later gallery address and commission amount, if any
                    address commissionReceiver = _primarySalesCommission[_tokenId].receiver;
                    uint256 commissionAmount = (_price * _primarySalesCommission[_tokenId].feeBps) / 10000; 
                    /**
                     * Pay commissions on primary sale, if any. sender must be gallery, i.e. the commission receiver, otherwise primary sales commissions cannot be paid.
                     */
                    if ( commissionAmount > 0 && _seller == commissionReceiver) {

                        delete _primarySalesCommission[_tokenId]; // since this struct is only ever used for primary sales once, it is possible to delete it
                        sellerAmount = commissionAmount; // swap `sellerAmount` for `commissionAmount`, because the seller being the `commissionReceiver` will receive `commissionAmount`, while the artist will receive the principal left after subtracting marketplace fees and gallery commission
                        
                        /**
                         * pay royalty receiver, i.e. the artist. Later pay the seller (gallery) only the `commissionAmount`
                         */
                        (success, ) = royaltyReceiver.call{ value: _price - marketplaceFeeAmount - commissionAmount }("");
                        require(success);
                        
                        emit RoyaltyPayment(_collection, _tokenId, royaltyReceiver, _price - marketplaceFeeAmount - commissionAmount);
                    } else {
                        // if there are no commissions, or if there are but the seller is not the commission receiver (gallery), set seller amount. If the seller is not the gallery it will not get paid commission on primary sale even if it was set.
                        sellerAmount = ( _price - marketplaceFeeAmount );
                    }

                } else {
                    // there is no need to check that royalties bps and receiver are not 0 for NinfaERC721, because all tokens will have a receiver and fixed 10% royalties. I.e. if the token exists, its royalties also exist. This is why this else condition exists, in order to avoid wasting gas checking royalty receiver and amount values
                    sellerAmount = ( _price - royaltyAmount - marketplaceFeeAmount );
                    payRoyalties(royaltyReceiver, royaltyAmount, _collection, _tokenId);
                }

            } else {
                if( royaltyReceiver != address(0) && royaltyAmount > 0 && royaltyAmount <= (_price - marketplaceFeeAmount) ) {
                    sellerAmount = ( _price - royaltyAmount - marketplaceFeeAmount );
                    payRoyalties(royaltyReceiver, royaltyAmount, _collection, _tokenId);
                }
            }

        }

        /**
         * Pay marketplace fee (primary or secondary)
         */
        (success, ) = feeAccount.call{ value: marketplaceFeeAmount }("");
        require(success);

        /**
         * Pay seller 
         */
        (success, ) = payable(_seller).call{ value: sellerAmount /*(_price - marketplaceFeeAmount - royaltyAmount)*/ }("");
        require(success);

        emit Trade(_collection, _tokenId, _seller, _price, _buyer, _orderId);
    }

    /**
     * @dev private function to remove code duplication
     */
    function payRoyalties(address _royaltyReceiver, uint256 _royaltyAmount, address _collection, uint256 _tokenId) private {

        address commissionReceiver = _royaltiesCommission[_collection][_tokenId].receiver;
        uint256 commissionAmount = ( _royaltyAmount * _royaltiesCommission[_collection][_tokenId].feeBps ) / 10000; 
        bool success;

        if (commissionAmount > 0) { // if there is a gallery commission on royalties, pay it. Even if an artist is associated to a gallery, they may chose to pay 0 commission on royalties.

            (success, ) = commissionReceiver.call{ value: commissionAmount }("");
            require(success);

            emit RoyaltyPayment(_collection, _tokenId, commissionReceiver, commissionAmount); // reusing the same event definition for both artist and gallery royalties, one may just filter events by address to find out which is which
        }

        (success, ) = _royaltyReceiver.call{ value: _royaltyAmount - commissionAmount }("");
        require(success);

        emit RoyaltyPayment(_collection, _tokenId, _royaltyReceiver, _royaltyAmount);
    }

    /********************
     * SALE COMMISSIONS *
     *******************/

    /**
     * @notice Update royalty commission info for collection
     * @dev "For precision purposes, it's better to express the royalty commission percentage as "basis points" (points per 10_000, e.g., 10% = 1000 bps) and compute the amount is `(royaltyBps[_tokenId] * _salePrice) / 10000`" - https://forum.openzeppelin.com/t/setting-erc2981/16065/2
     * @param _collection address of the NFT contract
     * @param _tokenId since the erc2981 standard allows setting royalties on a per-token basis, it is not possible to guarantee that one royalties receiver can decide royalties for the entire collection. Therefore the contract must also set fee info for each token rather than for the entire collection.
     * @param _receiver recipient of the royalty fee
     * @param _bps percentage (using 2 decimals - 10000 = 100, 0 = 0). No need to require that _bps be different from 0, because imagine somebody set it to 1, 1 in 10000 still returns 0 if the percentage is calculated on a number smaller than 10000 ( (9999 * 1) / 10000 = 0 ), therefore we cannot rely on this check to prevent 0 fee transfers.
     */
    function setRoyaltyCommission (
        address _collection,
        uint256 _tokenId,
        address _receiver,
        uint24  _bps
    ) external {
        require(_bps <= 9000); // max 90% of royalties to gallery.
        require( _collection == address(NinfaERC721) || ERC721Whitelist[_collection] == true);
        require(_receiver != address(0)); // placing this check here avoids checking it each time a sale occurs
        require( IERC165(_collection).supportsInterface(INTERFACE_ID_ERC2981) );

        (address royaltyReceiver, ) = IERC2981(_collection).royaltyInfo(_tokenId, 10000);
        require( msg.sender == royaltyReceiver ); // caller must be royalty receiver. Receiver corresponds to artist in Ninfa collection.

        _royaltiesCommission[_collection][_tokenId] = _Commission(_receiver, _bps);

        emit Commission(_collection, _tokenId, _receiver, 0, _bps);
    }

    /**
     * @param _bps is the basis points out of primary sale that are meant for the artist, NOT for the gallery.
     *      A frontent should disallow setting _primaryBps to 0, although it isn't enforced in this function, because if _primaryBps is set to 0 the _trade() function will not pay any part of the primary sale to the artist, it will all go to the seller. It is assumed that whoever calls setPrimarySaleCommission is tranfering to a gallery that will charge a commission on the sale and not do it for free.
     *      if an artist calls mintAndTransfer, the NFT is transferred to the gallery. So if the gallery creates an order, it will receive the profits; the gallery needs to send profits minius gallery primary sale commission.
     *      max 85% of profits to gallery, so that it is not possible to run into an underflow when subtracting commission plus trading fee (the trading fee is 10%) from price: royaltyReceiver.call{ value: _price - marketplaceFeeAmount - commissionAmount }("").
     *      still, if the artist gave 90% of primary sales commission, minus 10% primary fees (if any), it would result in a 0 value transfer to the artist. therefore we further reduce the limit to 85% of the sale value, so that the artist may get 5% minimum from a sale.
     *      If an artist may wish to give all profits to a gallery, then they should just call mintAndTransfer passing 0 as parameter for primary commission, so that the gallery gets all the profits minus fees.
     */
    function setPrimarySaleCommission (
        uint256 _tokenId,
        address _receiver,
        uint24  _bps
    ) external {
        require(_bps <= 8500); 
        require(_receiver != address(0)); // placing this check here avoids checking it each time a sale occurs
        (address royaltyReceiver, ) = IERC2981(address(NinfaERC721)).royaltyInfo(_tokenId, 10000);
        require( msg.sender == royaltyReceiver ); // caller must be royalty receiver. Receiver corresponds to artist in Ninfa collection.
        require( !secondarySale[_tokenId] ); // technically not needed to check, since it won't make a difference; the split will not be used if it is a secondary sale anyway. However, it avoids wasting gas by mistake should someone try it, this way they will get a "transaction will likely fail, are you sure?" message.

        _primarySalesCommission[_tokenId] = _Commission(_receiver, _bps);

        emit Commission(address(NinfaERC721), _tokenId, _receiver, _bps, 0);
    }

    /**
     * @notice deletes the struct containing gallery address and bps.
     * @dev more efficient then calling setGalleryFees(0,0) as deleting reimbourses gas + there are not `require` checks or writing to state.
     */
    function deleteRoyaltyCommission ( address _collection, uint256 _tokenId ) external {
        require( IERC165(_collection).supportsInterface(INTERFACE_ID_ERC2981) );
        (address royaltyReceiver, ) = IERC2981(_collection).royaltyInfo(_tokenId, 10000); // 10000 is just a placeholder uint as the royaltyAmount returned by royaltyInfo is not used
        require( msg.sender == royaltyReceiver ); // caller must be royalty receiver. Receiver corresponds to artist in Ninfa collection.
        
        delete _royaltiesCommission[_collection][_tokenId];
    }

    function deletePrimarySaleCommission ( uint256 _tokenId ) external {
        (address royaltyReceiver, ) = IERC2981(address(NinfaERC721)).royaltyInfo(_tokenId, 10000); // 10000 is just a placeholder uint as the royaltyAmount returned by royaltyInfo is not used
        require( msg.sender == royaltyReceiver ); // caller must be royalty receiver. Receiver corresponds to artist in Ninfa collection.

        delete _primarySalesCommission[_tokenId];
    }

    /*******************
     * ADMIN FUNCTIONS *
     ******************/

    /**
    * @dev setter function only callable by contract admin used to change the address to which fees are paid
    * @param _feeAccount is the address owned by NINFA that will collect sales fees 
    */
    function setFeeAccount(address payable _feeAccount) onlyRole(DEFAULT_ADMIN_ROLE) external {
        feeAccount = _feeAccount;
        emit FeeAccount(feeAccount);
    }

    /**
     * @notice whitelist collection to be traded on marketplace
     * @param _collection address of collection ERC721
     */
    function whitelistERC721(address _collection) onlyRole(DEFAULT_ADMIN_ROLE) external {
        ERC721Whitelist[_collection] = true;
    }

    function setPrimaryFee (uint24 _feeBps) onlyRole(DEFAULT_ADMIN_ROLE) external {
        ninfaPrimaryFee = _feeBps;
    }

    /**
     * @notice sets a new Instance of NinfaNFT
     * @dev totalSupply of new erc721 instance must equal current totalSupply, this could be done by implementing ERC721A
     */
    function setNinfaNFT(address _NFT) onlyRole(DEFAULT_ADMIN_ROLE) external {
        require(_NFT != address(0));

        NinfaERC721 = INinfaERC721(_NFT);

        emit FeeAccount(feeAccount);
    }

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, to the deployer and grants CURATOR_ROLE admin role of ARTIST_ROLE
     */
    function initialize(address _NFT, address _feeAccount) public initializer {
        require(_NFT != address(0));

        __AccessControl_init();
        
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setRoleAdmin(ARTIST_ROLE, CURATOR_ROLE);

        feeAccount = payable(_feeAccount);

        NinfaERC721 = INinfaERC721(_NFT);

        emit FeeAccount(feeAccount);
    }

    /***************************
     * EXTERNAL VIEW FUNCTIONS *
     **************************/

    /**
    * @notice external getter function useful for frontends
    * @dev it is put last in the contract because view functions don't cost any gas to view; putting it last will save some gas from all of the functions above.
    * @param _collection address of NFT collection
    * @param _tokenId collection's token id number
    */
    function getOrderId(address _collection, uint256 _tokenId) external view returns(uint256 orderId) {
        orderId = _tokenToOrderId[_collection][_tokenId];
    }

    /**
     * @notice Calculate royalty commission info for a collection address and a sale gross amount
     * @dev the function signature is different from ro
     * @param _collection collection address
     * @param _tokenId the token id
     * @param _amount amount received by artist from royalty payment
     * @return receiver address and amount to be paid for royalty payment commission to gallery
     */
    function getRoyaltyCommission(address _collection, uint256 _tokenId, uint256 _amount) external view returns (address receiver, uint256 commissionAmount) {
        receiver = _royaltiesCommission[_collection][_tokenId].receiver;
        commissionAmount = (_amount * _royaltiesCommission[_collection][_tokenId].feeBps) / 10000; 
    }

    /**
     * @notice Calculate royalty commission info for a token id from the Ninfa collection
     * @param _tokenId the token id
     * @param _amount amount received by artist from primary sale
     * @return receiver address and amount to be paid for primary sale commission to gallery
     */
    function getPrimaryCommission(uint256 _tokenId, uint256 _amount) external view returns (address receiver, uint256 commissionAmount) {
        receiver = _primarySalesCommission[_tokenId].receiver;
        commissionAmount = (_amount * _primarySalesCommission[_tokenId].feeBps) / 10000; 
    }
    
}