// SPDX-License-Identifier: MIT

/*
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&(   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& %%%%%%%%%%%%%%%%%%, &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& %%%%%%%%%%%%%%%%%%%%%%%%%% &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& %%%%%%% %%%%%% %%%%%%%%%%%%%%%%.&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&#              .%%%%%%%%% %%%%%%%%%%%%%%%% &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&, ////////////////////////////////   %%%%%%%%%%%% &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&  ////,&&&&%     ./////////////////////////.  %%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&   &&&&&&&&&&&&&&&&&(  //////////////////// &&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&&&&&& ///////////////// #&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& //////////////// &&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&, //////////////.&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&&&&&      &&&&&&&&&&&&&& ////////////&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&& &*           &&&&&&&&&&&       (#    (&&&&&&&&&&&& //////// &&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&/&&&&&&&&&&&&& %&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& &&&&&&  (&&&&&&&&&&&&&&&&&&&&&#    &&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& &&& @@@@@@ ,&&&&&&&&&&&&&&&& @@@  @&&&&&&&&&&&&&&& &&&&&&&& (&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& && .@    & &&&&&&.&&.&&&&&&  @(    @/ &&&&&&&&&&&&&&&&&&&&&&&%&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& &&  @@  (&&&&&&&&.&&.&&&&&& *@@@#@@ & &&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& &&& &&&&&& &&&&&..&&..&&&&&& &&&&&&.&&&&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&  &&&&& /&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& &&&  @@@@@@@@@ %%%%%,&&&&&&&&&&&&&&&&&&&&&&&&&&#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&& &&      &&&&&&&&&&&&&%&&&&&&&&&&&&&&&&&&&&&&%.&&&&& %%% &&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& &&&&&&&& %%%%% &&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&& *&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&* &&&&&&&&&&&#%%%%%%#&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&,   /&&&&&&&&&&&&&&&&&&&&&&&&  %&&&&&&&&&&&&&& %%%%%%%%%&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&/%%%%%%%%%%%%%%% &&&&&&&&&&&&&&&&&&&&&&&&&&&&& %%%%%%%%%% &&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&& %%%%%%%%%%%%%%%%%%%%%,   &&&&&&&&&&&&&&&&  %%%%%%%%%%%%% %,&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&& %%%%%%%%%%%%%%%%%%%%%%%%%%%%,,&&&&&&&& %%%%%%%%%%%%%%%% %%%% &&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&& %%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%./ %&& %%%%%%%%%%%%%%% %%%%%%%%%&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&& %%%%%%%# %%%%%%%%%%%%%%%%%%%%%%%%%%%%*&& %%%%%%%% %%%%%%%%%%%%%%%%% &&&&&&&&
&&&&&&&&&&&&&&&&&&&&&& %%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%%%%%%%%. %%%%%.%%%%%%%%%%%%%%%%%%%%% &&&&&&&
&&&&&&&&&&&&&&&&&&&&&#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%% %%% .%%%%%%%%%%%%% %%%%%%%%% &&&&&&
&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%/   %%%%%%   %%%%%%%%%%%%%%%%%%%%%%%% &&&&&
&&&&&&&&&&&&&&&&&&#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#   %%%%%%   %%%%%%%%%%%%%% %%%%%%%%%% &&&&
&&&&&&&&&&&&&&&&&.%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%#   %%%%%% @@%%%%%%%%%%%%%%%%%%%%%%%%%% &&&
&&&&&&&&&&&&&&&& %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@,%%%%%%%  %%%%%%%%%%%%%%% %%%%%%%%%%% &&
&&&&&&&&&&&&&&& %%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&
&&&&&&&&&&&&&&& %%%%█▄─▄▄▀█─▄▄─█─▄▄─█▄─▄▄▀█▄─▄▄─█▄─▄▄─█▄─▄███▄─▄████▀▄─██░▄▄░▄█%%%%%%%%%%%%%%%%%%%&&
&&&&&&&&&&&&&&& %%%%██─██─█─██─█─██─██─██─██─▄████─▄█▀██─██▀██─██▀██─▀─███▀▄█▀█%%%%%%%%%%%%%%%%%%%&&
&&&&&&&&&&&&&&& %%%%▀▄▄▄▄▀▀▄▄▄▄▀▄▄▄▄▀▄▄▄▄▀▀▄▄▄▀▀▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▀▄▄▀▄▄▄▄▄▀%%%%%%%%%%%%%%%%%%%&&
*/

// Written by @0xmend

pragma solidity ^0.8.9;
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";

contract Doodfellaz is ERC721Enumerable {
    using Strings for uint256;
    uint256 public maxSupply = 6969;
    uint256 public freeMints = 696;
    uint256 public cost =  0.039 ether;
    uint256 public maxMintsInOne = 10;
    address public owner;
    bool public salePaused = true;
    string public contractMetadata;
    string public baseTokenURI;
    address public constant teamWallet = 0x18085082520D146A55ff2c13DBACE47D6a101Ecc;
    string erm = "Unauthorized";

    constructor(string memory _contractMetadata, string memory _baseTokenURI) 
    ERC721("Doodfellaz", "DFL") {
        owner = msg.sender;
        contractMetadata = _contractMetadata;
        baseTokenURI = _baseTokenURI;
    }

    function _mint(address to, uint256 amount, uint256 supply) internal {
        for (uint256 i = 1; i <= amount; i++) {
            _safeMint(to, supply + i);
        }
    }

    function mint(uint256 _mintAmount) external payable {
        uint256 mintCost = cost;
        uint256 supply = totalSupply();
        if (msg.sender == owner) {
            mintCost = 0;
        } else {
            mintCost = ( supply + _mintAmount <= freeMints ) ? 0.00 : cost;
            require(!salePaused, "Sale Paused");
            require(_mintAmount <= maxMintsInOne, "Exceeded max mints in one TXN");
        }
        require(_mintAmount > 0, "Mint atleast 1");
        require(supply + _mintAmount <= maxSupply, "Sold out!");
        require(msg.value >= mintCost * _mintAmount, "Insufficient funds");
        _mint(msg.sender, _mintAmount, supply);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseTokenURI;
    }

    function contractURI() public view returns (string memory) {
        return contractMetadata;
    }

    function airdrop(address _to, uint256 _amount ) external {
        require(msg.sender == owner, erm);
        uint256 supply = totalSupply();
        require(supply + _amount <= maxSupply, "Sold out!");
        _mint(_to, _amount, supply);
    }

    function pauseSale(bool _state) external {
        require(msg.sender == owner, erm);
        salePaused = _state;
    }

    function setCost(uint256 _newCost) external {
        require(msg.sender == owner, erm);
        cost = _newCost;
    }

    function setMaxMints(uint256 _newMaxMints) external {
        require(msg.sender == owner, erm);
        maxMintsInOne = _newMaxMints;
    }

    function setBaseTokenUri(string memory _base) external {
        require(msg.sender == owner, erm);
        baseTokenURI = _base;
    }

    function setcontractMeta(string memory _newMeta) external {
        require(msg.sender == owner, erm);
        contractMetadata = _newMeta;
    }

    function withdraw() external {
        require(msg.sender == owner, erm);
        payable(teamWallet).transfer(address(this).balance);
    }
}
