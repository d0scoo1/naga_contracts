// SPDX-License-Identifier: MIT

pragma solidity ^0.8.7;

import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

import "./ERC721SUpgradeable.sol";

contract TokenhouseNFT is Initializable, ERC721SUpgradeable, ERC2981Upgradeable, PausableUpgradeable, OwnableUpgradeable, AccessControlUpgradeable, UUPSUpgradeable {

    // This role can upgrade the contract
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");
    // This role can pause the contract
    bytes32 public constant PAUSER_ROLE   = keccak256("PAUSER_ROLE");
    // This role can mint the NFT
    bytes32 public constant MINTER_ROLE   = keccak256("MINTER");   
    // This role can burn the NFT
    bytes32 public constant BURNER_ROLE   = keccak256("BURNER");   
    // This role can update NFT metadata, lock/unlock NFT and whitelisted/delisted address
    bytes32 public constant OPERATOR_ROLE = keccak256("OPERATOR"); 

    // AccessRight 
    struct AccessRight {
        address to;            
        bytes32 permission; 
    }

    event WhitelistAddress(address addr, bool whitelisted);
    event MetadataURI(uint256 tokenId, string uri);

    // Note MetadataId is generated by keccak256(name.upper())
    event StringMetadata (address operator, uint256 indexed tokenId, bytes32 indexed metadataId, string  value);    
    event Bytes32Metadata(address operator, uint256 indexed tokenId, bytes32 indexed metadataId, bytes32 value);

    // MetadatURI for each tokenId
    mapping(uint256 => string) private _metadataURI;    

    // Metadata for each token, the key is gerenated by keccak256(name.upper())
    mapping(uint256 => mapping(bytes32 => string )) private _stringMetadata;    
    mapping(uint256 => mapping(bytes32 => bytes32)) private _bytes32Metadata;

    // If this is true, transfer can only happend with approval from operator; 
    // If this is false, transfer can happend without operator approval (i.e. don't need to check _approveToTransfer[tokenId])
    bool public requiredTransferApproval;

    // Flag to indicate whether the address is whitelisted or not
    // Note: token can only be transferred to whitelisted address
    mapping(address => bool) private _whitelisted;         

    // Flag to indicate whether the tokenId is approve to transfer or not (use when requiredTransferApproval is true)    
    mapping(uint256 => bool) private _approveToTransfer;    

    // Flag to indicate whether the tokenId is locked for transfer or not
    // if _locked[id] is true, tokenId cannot be transferred
    mapping(uint256 => bool) private _locked;               

    // AccessRight of the tokenId
    mapping(uint256 => AccessRight[]) private _accessright;

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }
    
    function initialize() initializer public {
        __ERC721S_init("TokenhouseNFT", "TOKHOUSE");
        __ERC2981_init();
        __Pausable_init();
        __AccessControl_init();
        __UUPSUpgradeable_init();
        __Ownable_init_unchained();

        address owner = 0xF634B30A8F1E2238b197aE7e853Bc945011a069c; // msg.sender;
        if (owner != msg.sender) {
            transferOwnership(owner);
        }        
        _grantRole(DEFAULT_ADMIN_ROLE, owner);
        _grantRole(MINTER_ROLE, owner);
        _grantRole(BURNER_ROLE, owner);
        _grantRole(OPERATOR_ROLE, owner);
        _grantRole(PAUSER_ROLE, owner);
        _grantRole(UPGRADER_ROLE, owner);
        _setDefaultRoyalty(owner, 100);
    }

    function version() public pure virtual returns (string memory) {
        return "0.0.1";
    }

    function pause() public onlyRole(PAUSER_ROLE) {
        _pause();
    }

    function unpause() public onlyRole(PAUSER_ROLE) {
        _unpause();
    }    

    function _authorizeUpgrade(address newImplementation)
        internal
        onlyRole(UPGRADER_ROLE)
        override
    {}

    // Check whether the address is whitelisted or not
    function isWhiteListed(address addr) external view returns (bool) {
        return _whitelisted[addr];
    }

    // Check whether the tokenId is exist or not
    function isTokenExists(uint256 tokenId) external view returns (bool) {
        return _exists(tokenId);
    }

    // Check whether the tokenId is approved to transfer or not
    function isApprovedToTransfer(uint256 tokenId) external view returns (bool) {
        require (_exists(tokenId), "Query for nonexistent token");
        return _approveToTransfer[tokenId];
    }

    // Check whether the tokenId is locked for transfer or not
    function isLockedForTransfer(uint256 tokenId) external view returns (bool) {
        require (_exists(tokenId), "Query for nonexistent token");
        return _locked[tokenId];
    }

    // Update requiredTransferApproval
    function setRequiredTransferApproval(bool required) external onlyRole(DEFAULT_ADMIN_ROLE) {        
        requiredTransferApproval = required;
    }

    // Set approveToTransfer flag for the tokenId
    function approveToTransfer(uint256 tokenId) external onlyRole(OPERATOR_ROLE) {
        require (_exists(tokenId), "Set value for nonexistent token");
        _approveToTransfer[tokenId] = true;
    }

    // Unset approveToTransfer flag for the tokenId
    function unapproveToTransfer(uint256 tokenId) external onlyRole(OPERATOR_ROLE) {
        require (_exists(tokenId), "Set value for nonexistent token");
        _approveToTransfer[tokenId] = false;
    }
    
    // Set whitelsited flag for the address
    function whitelistAddress(address addr) external onlyRole(OPERATOR_ROLE) {
        _whitelisted[addr] = true;
        emit WhitelistAddress(addr, true);
    }

    // Unset whitelisted flag for the address
    function delistAddress(address addr)  external onlyRole(OPERATOR_ROLE) {
        _whitelisted[addr] = false;
        emit WhitelistAddress(addr, false);
    }

    // Set locked flag for the tokenId
    function lock(uint256 tokenId) external onlyRole(OPERATOR_ROLE) {
        require (_exists(tokenId), "Set value for nonexistent token");
        _locked[tokenId] = true;
    }

    // Unset locked flag for the tokenId
    function unlock(uint256 tokenId) external onlyRole(OPERATOR_ROLE) {
        require (_exists(tokenId), "Set value for nonexistent token");
        _locked[tokenId] = false;
    }

    // Mint tokenId to the address with specificed tokenURI
    function mint(address to, uint256 tokenId, string memory tokenURI_) external onlyRole(MINTER_ROLE) {        
        require(_valid(tokenId),"TokenId is invalid");
        // set _whitelisted[to] to true if it is not whitelisted
        if (!_whitelisted[to]) _whitelisted[to] = true;        
        _mint(to, uint32(tokenId));
        _metadataURI[tokenId] = tokenURI_;
        emit MetadataURI(tokenId, tokenURI_);
    }

    // Burn the tokenId
    function burn(uint256 tokenId) external onlyRole(BURNER_ROLE) {
        _burn(uint32(tokenId));
    }

    // Retreive tokenURI of the tokenId
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        return _metadataURI[tokenId];
    }

    // Update tokenURI of the tokenID
    function setTokenURI(uint256 tokenId, string memory tokenURI_) external onlyRole(OPERATOR_ROLE) {
        require (_exists(tokenId), "URI set for nonexistent token");
        _metadataURI[tokenId] = tokenURI_;        
        emit MetadataURI(tokenId, tokenURI_);
    }

    // Set AccessRight for the specificed tokenID; caller must be either operator or owner
    function setAccessRight(uint256 tokenId, address to, bytes32 permission) external {        
        require (_exists(tokenId), "Set access right for nonexistent token");        
        require ( _msgSender() == ownerOf(tokenId) || hasRole(OPERATOR_ROLE,_msgSender()),
                  "No permission to grant access" );        
        AccessRight memory right = AccessRight(to, permission);
        _accessright[tokenId].push(right);
    }

    // Reset AccessRight for the specificed tokenID; caller must be either operator or owner
    function resetAccessRight(uint256 tokenId) external {
        require (_exists(tokenId), "Set access right for nonexistent token");        
        require ( _msgSender() == ownerOf(tokenId) || hasRole(OPERATOR_ROLE,_msgSender()),
                  "No permission to grant access" );        
        delete _accessright[tokenId];
    }

    // Return AccessRight for the specficed tokenID (i.e. the last record in _accessright array)
    function getAccessRight(uint256 tokenId, address to) external view returns (bytes32)  {
        require (_exists(tokenId), "Get access right for nonexistent token");
        uint256 size = _accessright[tokenId].length;
        bytes32 permission;        
        for (uint256 i; i < size; ++i) {
            if (to == _accessright[tokenId][i].to)  {
                permission = _accessright[tokenId][i].permission;
            }
        }
        return permission;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal whenNotPaused override {
        // if not mint && burn
        if (from != address(0) && to != address(0)) {            
            // Can only transfer to whitelisted address
            require (_whitelisted[to], "Target address must be whitelisted");
            // Token must be approved to transfer
            if (requiredTransferApproval) {
                require (_approveToTransfer[tokenId], "Token is not approved for transfer");
            }
            // Token must not be locked for transfer
            require (!_locked[tokenId], "Token is locked");
            _approveToTransfer[tokenId] = false;
            delete _accessright[tokenId];
        }

        ERC721SUpgradeable._beforeTokenTransfer(from, to, tokenId);
    }
    
    // Get String Metadata of the tokenId, metadataId is keccak256(name.upper())
    function getStringMetadata(uint256 tokenId, bytes32 metadataId) external view returns (string memory) {
        require(_exists(tokenId), "Metadata query for nonexistent token");        
        return _stringMetadata[tokenId][metadataId];
    }

    // Get Bytes32 Metadata of the tokenId, metadataId is keccak256(name.upper())
    function getBytes32Metadata(uint256 tokenId, bytes32 metadataId) external view returns (bytes32) {
        require(_exists(tokenId), "Metadata query for nonexistent token");        
        return _bytes32Metadata[tokenId][metadataId];
    }

    // Save String Metadata on-chain ;; if save is false, we only publish the log without storing the value
    function setStringMetadata(uint256 tokenId, bytes32 metadataId, string calldata value, bool save) external onlyRole(OPERATOR_ROLE) {
        require (_exists(tokenId), "Set metadata for nonexistent token");        
        if (save) {
            _stringMetadata[tokenId][metadataId] = value;
        }
        emit StringMetadata(_msgSender(), tokenId, metadataId, value);       
    }

    // Save Bytes Metadata on-chain ;; if save is false, we only publish the log without storing the value
    function setBytes32Metadata(uint256 tokenId, bytes32 metadataId, bytes32 value, bool save) external onlyRole(OPERATOR_ROLE) {
        require (_exists(tokenId), "Set metadata for nonexistent token");
        if (save) {
            _bytes32Metadata[tokenId][metadataId] = value;
        }
        emit Bytes32Metadata(_msgSender(), tokenId, metadataId, value);
    }

    // Batch Save String Metadata on-chain ;; if save is false, we only publish the log without storing the value
    function setStringMetadatas(uint256 tokenId, bytes32[] calldata metadataId, string[] calldata value, bool[] calldata save) external onlyRole(OPERATOR_ROLE) {
        require (_exists(tokenId), "Set metadata for nonexistent token");
        require (metadataId.length == value.length && metadataId.length == save.length, "Invalid array dimension");
        for (uint i; i < metadataId.length; i++) {
            if (save[i]) {
                _stringMetadata[tokenId][metadataId[i]] = value[i];
            }
            emit StringMetadata(_msgSender(), tokenId, metadataId[i], value[i]);       
        }
    }

    // Batch Save Bytes32 Metadata on-chain ;; if save is false, we only publish the log without storing the value
    function setBytes32Metadatas(uint256 tokenId, bytes32[] calldata metadataId, bytes32[] calldata value, bool[] calldata save) external onlyRole(OPERATOR_ROLE) {
        require (_exists(tokenId), "Set metadata for nonexistent token");
        require (metadataId.length == value.length && metadataId.length == save.length, "Invalid array dimension");
        for (uint i; i < metadataId.length; i++) {
            if (save[i]) {
                _bytes32Metadata[tokenId][metadataId[i]] = value[i];
            }
            emit Bytes32Metadata(_msgSender(), tokenId, metadataId[i], value[i]);
        }
    }

    // Setting Royalty for the contract
    function setRoyalty(address payable addr, uint96 royalty) external onlyRole(DEFAULT_ADMIN_ROLE) {
        _setDefaultRoyalty(addr, royalty);            
    }

    //////////////////////////////////////////////////////////////////////////////////////
    // Function to withdraw fund from contract
    /////
    function withdraw(uint256 balance, address payable to) external onlyRole(DEFAULT_ADMIN_ROLE) {                    
        AddressUpgradeable.sendValue(to, balance);
    }    

    function transferERC20(IERC20Upgradeable token, uint256 amount, address to) external onlyRole(DEFAULT_ADMIN_ROLE) {        
        token.transfer(to, amount);        
    }        

    // The following functions are overrides required by Solidity
    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(AccessControlUpgradeable, ERC721SUpgradeable, ERC2981Upgradeable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

}   