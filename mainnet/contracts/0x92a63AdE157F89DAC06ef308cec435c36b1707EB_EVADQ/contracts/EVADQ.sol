// SPDX-License-Identifier: MIT

// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNNNNNNNNNNNNNNNNNNNNNNNNNNWMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl'''''''''''''''''''''''''''lXMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; .:lllllllllc. .:lllllllc. ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMWklxNMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNklkNMMMMMMMMMMMMMMMMMMMMMWklkNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNWMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOdl:'cXMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkdl;'.  .';xNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0kdoc;.. ..,:lxOKNMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xoc,..  ..;cok0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd,'...':ldk0KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; 'ldkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:,....,:lxkOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxl:,.   .';ldkKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOkxoc,.. ..;cok0XWMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0koc,.. ..,dNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0koc;lXMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkdOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc  .':ok0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX0xl:'. ..;clxOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKx'  .....,cdkKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,xO0xo:'...':ox0NWMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMWKOdl;'.',;xNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMMMMMN0xo; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMWX0xl:'...':xNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN: 'dkkoc,.  .,cokKNMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo.  .  ..;ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKko:,.  .':cox0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:  .,cdOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWNKOkkkOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMWNNWWX0kxxxxxokXWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMNXNWWN0xxOKXXXNWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMWWXXWWNNXXXNXXNWWWWWWWWWWWWWWWWWWWWWWNNXNWWMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMWNXXXKXXXXNNNNNNNXKXNNNWWWWWWWWWWWWWWWWWWWWNXXXWMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMWWWNNK0OO0000KKKXXXNNNNXKXNWWMMMWNNNWNNNWWWWWWWWWWWNNNWMMMMMMMMMMMMMM
// WWWWWWWWWWWWNNNXK0OkkkkkkO000KKKKKKKXK0KXXNNKKKKKXWX0XWWWWWWWWNNNNNNNNWMMMMMMMMMMMM
// WWWWWWWWNNNNNXXX0kxxxkOOOOOOO000K0000kkOOOOOxxOkkkOkddO000KXNNNNXXXXNNNWWMMMMMMMMMM
// WMMWWWWWNNNXXXXKkdddxkO0000000OOO0KXK0kkxxxkkkOkdl:;,;:loodkO0KKKKXXXXNXNWMMMMMMMMM
// WWWWWWNNXKKKKK0kooodxO00KKKKXNXOdONMMNKOxddxkO0Oxl;,,,,;:clddxkO0000KKXXKXWMMMMMMMM
// KKKK0OO00OOOkkdcclloxk0KXNNXXXNNOx0WMWNXK0OkOKXXKkl;;:::clloddxxkkkkO00KKKXMMMMMMMM
// kkkkkxxxxxddol:;:c::cldk0NWWX0O0NKxkNWNWNKkldKWWWNXKOkxxddooooooodxkkOOOOO0NMMMMMMM
// lllllllcc::;,'.',,,''',:ldkOOxlcdOkldO00OOl''o0XNNNWWNKOxocc::cllooodxkkkkkXMMMMMMM
// ;;,,,,,''................'',,,...,:,':lc;;;,'',:codddol:;;,,;;::::ccclodddx0WMMMMMM
// '.....................................''....................',,;;;;;;;:cclo0WMMMMMM
// ................................................................'''''..,;:oXMMMMMMM
// .........................................................................;OWMMMMMMM
// .........................................................................oNMMMMMMMM
// ........................................................................lXMMMMMMMMM
// ..........''',,'......................................................'dNMMMMMMMMMM
// lldddddoooll:;'.....................................................'l0WMMMMMMMMMMM
// MMMMMMMMMMMMWXKOxol:,'......,;,''.................................,cOWMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMWNKOdc;'.....''..............................',:dXMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMWKx;.................'''''..........',,;:ccdXMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMM0:.............',,,,,,'''...'',;cok00OkkkONMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMKl'.............;lllllloodxkO0KXWMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMWKkoc,.......:xNWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0kkOOOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:::::::::::::::::::::::::::dNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .,;,;;,,;;;;;;;;;;,;;,;,. ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;KWWWWWWWWWWWWWWWWWWWWWX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMN: '0MMMMMMMMMMMMMMMMMMMMM0' ;XMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd  oWMMMMMMMMMMMMMMMMMMMWo  oWMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX: .dNMMMMMMMMMMMMMMMMMNd. :XMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:  ;xXWMMMMMMMMMMMWXx;  cKMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk;. .;lddxkOOkxdl;. .;kNMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o:'.         .':d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNX0OOkkkkO0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXdcokKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.. .':lx0XWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xo:'.  .';ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0, .',.. .,cokKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKN0koc,...':lx0XWMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMWXOxl:,,,'oNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMMMWNKOxo; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMWXOdl;'...':oOWMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; .coo:,.  .,cdkKNMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOd:.    .';lx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOl:'.  .,codkKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;..;ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXXK00KXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOoc,.........,:oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l'  .,:clooool:,.  .l0WMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl. .lkXWMMMMMMMMMWXkl' .lXMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .oXMMMMMMMMMMMMMMMMMXo. ,KMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc .kWMMMMMMMMMMMMMMMMMMMWk. :XMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. lWMMMMMMMMMMMMMMMMMMMMMWo .kMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMd .xMMMMMMMMMMMMMMMMMMMMMMMx. dMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. oWMMMMMMMMMMMMMMMMMMMMMMd .xMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; '0MMMMMMMMMMMMMMMMMMMMM0, ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO. 'kWMMMMMMMMMMMMMMMMMWO, .kMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0; .;xXWMMMMMMMMMMMWXk:. ,OWMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx;. .;ldxxOOOOkdl;.  ,xNMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o:'.         .':oONMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNK0Okxxxxk0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM

pragma solidity ^0.8.0;

import "./IERC721Delegable.sol";
import "./BasisPoints.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol";
import "@openzeppelin/contracts/interfaces/IERC2981.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol";


interface IEVADQURI {
  function packSVG(uint256 _tokenId, uint256 _sourceTokenId, bool _valid) external view returns(string memory);
  function packName(uint256 _tokenId, bool _valid) external view returns(string memory);
  function packDescription(uint256 _tokenId, uint256 _sourceTokenId, bool _valid) external view returns(string memory);
  function renderURI(string memory _name, string memory _description, string memory _svg) external view returns(string memory);
}

interface IEVADAO is IERC721Delegable, IERC2981 {
  function getAdmin() external returns (address);
}


/**
 * @title EVADQ
 * @dev EVADQ delegate token contract.
 * @author 0xAnimist (kanon.art) for EVADAO
 */
contract EVADQ is ERC721Enumerable, Ownable {

  bool public initialized = false;
  address public EVADAOContract;
  IEVADAO private _evadao;
  IEVADQURI private evadqURI;//library/contract that generates the look of EVADQ NFTs


  struct RoyaltyInfo {
    address receiver;
    uint256 royaltyInBp;
  }

  mapping(uint256 => RoyaltyInfo) private _royaltyInfos;

  bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;

  modifier onlyEVADAOContract() {
    require(initialized, "Not initialized");
    require(_msgSender() == EVADAOContract, "Only EVADAO Contract");
    _;
  }

  modifier ifInitialized() {
    require(initialized, "EVADQ: not initialized");
    _;
  }

  modifier onlyAdmin() {
    require(initialized, "EVADQ: not initialized");
    require(_msgSender() == _evadao.getAdmin(), "Not admin");
    _;
  }

  /**  @notice ERC165-compliancy: checks if the contract supports a given interface id
    *  @param interfaceId interfaceId to check against the supported interfaces
    */
  function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
      return
          interfaceId == type(IERC721Enumerable).interfaceId ||
          interfaceId == _INTERFACE_ID_ERC2981 ||
          super.supportsInterface(interfaceId);
  }

  function setEVADQURI(address _evadqURIAddress) public onlyAdmin {
    evadqURI = IEVADQURI(_evadqURIAddress);
  }

  function tokenURI(uint256 _tokenId) override public view ifInitialized returns(string memory) {
    require(_exists(_tokenId), "EVADQ: token does not exist");
    require(initialized, "EVADQ: not initialized");

    uint256 evadaoTokenId = _tokenId;
    address delegateContract;
    uint256 delegateTokenId;

    try _evadao.getDelegateToken(evadaoTokenId) returns (address dC, uint256 dTId) {
      delegateContract = dC;
      delegateTokenId = dTId;
    } catch {}

    bool valid = false;

    if(delegateContract == address(this) && delegateTokenId == _tokenId){//still the delegate of the EVADAO token it was minted for
      valid = true;
    }

    string memory name_ = evadqURI.packName(_tokenId, valid);

    //require(false, name_);

    string memory description_ = evadqURI.packDescription(_tokenId, evadaoTokenId, valid);

    //require(false, description_);

    string memory svg_ = evadqURI.packSVG(_tokenId, evadaoTokenId, valid);

    //require(false, svg_);

    return evadqURI.renderURI(name_, description_, svg_);
  }

  function mint(address _owner, uint256 _tokenId) external onlyEVADAOContract {
    require(_msgSender() == EVADAOContract, "EVADQ: only EVADAO can mint");
    require(!_exists(_tokenId), "EVADQ: already minted");
    _safeMint(_owner, _tokenId);
    //_evadao.setDelegateToken(address(this), _tokenId, _tokenId);
    //_evadao.safeTransferFrom(address(this), _owner, _tokenId);

    (_royaltyInfos[_tokenId].receiver, _royaltyInfos[_tokenId].royaltyInBp) = _evadao.royaltyInfo(_tokenId, BasisPoints.BASE);
  }

  /*
  function onERC721Received(
    address _operator,
    address _from,
    uint256 _tokenId,
    bytes calldata _data) external override returns(bytes4) {

      return IERC721Receiver.onERC721Received.selector;
  }*/

  function royaltyInfo(
        uint256 _tokenId,
        uint256 _salePrice
    ) public view returns (
        address receiver,
        uint256 royaltyAmount
  ) {
    //defaults to (address(0), 0) if not set
    receiver = _royaltyInfos[_tokenId].receiver;
    royaltyAmount = BasisPoints.mulByBp(_salePrice, _royaltyInfos[_tokenId].royaltyInBp);
  }

  function updateRoyaltyReceiver(address _receiver, uint256 _tokenId) external {
    require(_msgSender() == _royaltyInfos[_tokenId].receiver, "EVADQ: only current receiver can change receiver");
    _royaltyInfos[_tokenId].receiver = _receiver;
  }

  function initialize(address _EVADAOContract, address _evadqURIAddress) external onlyOwner {
    require(!initialized, "Already initialized");
    EVADAOContract = _EVADAOContract;
    _evadao = IEVADAO(EVADAOContract);
    evadqURI = IEVADQURI(_evadqURIAddress);
    initialized = true;
  }

  constructor() ERC721("EVADQ", "EVADQ") Ownable() {
  }

}
