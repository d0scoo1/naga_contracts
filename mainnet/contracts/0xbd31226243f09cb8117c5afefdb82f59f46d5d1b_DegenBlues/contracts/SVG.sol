// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;
import "./Encoding.sol";
import "./Metadata.sol";

contract SVG {
    Metadata metadata;

    constructor(Metadata m) {
        metadata = m;
    }
    string internal constant svg1 = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 600" fill="none"><style>text{font-size:6px; font-family:Impact,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";fill:#fff;text-shadow:0 1px 5px rgba(0,0,0,10%)}.svgTokenId{font-size:27px;font-weight: bold}';
    string internal constant svg2 = '</style><defs><linearGradient id="bgGradient" gradientTransform="rotate(90)"><stop offset="0%" class="stop1"/><stop offset="33%" class="stop2"/><stop offset="67%" class="stop3"/><stop offset="100%" class="stop4"/></linearGradient></defs><path d="M0 0h6e2v6e2H0z" fill="url(#bgGradient)"/>';
    string internal constant svg5 = '<svg x="30" y="0" width="100%" height="100%" viewBox="0 0 600 600"><rect width="108.276" height="110" rx="4.34783" fill="#9F0D84"/><rect x="112.609" width="108.276" height="110" rx="4.34783" fill="#5200FF"/><path d="M15.5316 60.4759C16.7895 60.4759 18.0383 61.0957 19.2779 62.3354V53.2021H25.4853V98.7866H19.2779V96.8725C18.3664 98.5132 17.1359 99.3335 15.5863 99.3335C14.2008 99.3335 13.0888 98.9872 12.2502 98.2944C11.4116 97.5834 10.8374 96.6628 10.5274 95.5325C10.2358 94.4023 10.0899 92.9894 10.0899 91.294V68.5428C10.0899 65.9541 10.491 63.967 11.2931 62.5815C12.1135 61.1778 13.5263 60.4759 15.5316 60.4759ZM17.7739 93.8645C18.7766 93.8645 19.2779 93.117 19.2779 91.6222V68.324C19.2779 66.7927 18.7766 66.027 17.7739 66.027C16.8077 66.027 16.3246 66.7927 16.3246 68.324V91.5128C16.3246 93.0806 16.8077 93.8645 17.7739 93.8645ZM37.4899 84.4577H43.6973V91.294C43.6973 92.4972 43.597 93.5454 43.3965 94.4387C43.1959 95.3138 42.8313 96.1432 42.3026 96.9271C41.7922 97.711 41.0083 98.3126 39.951 98.7319C38.8936 99.133 37.5719 99.3335 35.9859 99.3335C34.7098 99.3335 33.6069 99.1877 32.6771 98.896C31.7474 98.6225 30.9999 98.2579 30.4348 97.8022C29.8879 97.3282 29.4504 96.7357 29.1222 96.0247C28.7941 95.2955 28.5753 94.5663 28.4659 93.8371C28.3566 93.0897 28.3019 92.242 28.3019 91.294V68.5428C28.3019 67.5948 28.3566 66.7562 28.4659 66.027C28.5753 65.2796 28.7941 64.5503 29.1222 63.8394C29.4504 63.1102 29.8879 62.5177 30.4348 62.0619C30.9817 61.5879 31.72 61.2051 32.6498 60.9134C33.5977 60.6217 34.7098 60.4759 35.9859 60.4759C37.262 60.4759 38.3649 60.6217 39.2947 60.9134C40.2426 61.2051 40.9901 61.5879 41.537 62.0619C42.1021 62.5177 42.5488 63.1102 42.8769 63.8394C43.205 64.5503 43.4238 65.2796 43.5332 66.027C43.6426 66.7562 43.6973 67.5948 43.6973 68.5428V81.9966H34.5366V91.5128C34.5366 93.0806 35.0197 93.8645 35.9859 93.8645C36.9886 93.8645 37.4899 93.0806 37.4899 91.5128V84.4577ZM34.5366 76.1174H37.4899V68.324C37.4899 66.7927 36.9886 66.027 35.9859 66.027C35.0197 66.027 34.5366 66.7927 34.5366 68.324V76.1174ZM55.7018 96.3802C54.8815 97.5287 53.6509 98.103 52.0102 98.103C50.9529 98.0848 50.0596 97.8933 49.3304 97.5287C48.6012 97.1459 48.036 96.5899 47.635 95.8607C47.2339 95.1315 46.9422 94.3111 46.7599 93.3996C46.5959 92.4699 46.5138 91.3761 46.5138 90.1182V68.5428C46.5138 67.2849 46.5959 66.1911 46.7599 65.2613C46.9422 64.3316 47.2339 63.493 47.635 62.7456C48.036 61.9981 48.6012 61.433 49.3304 61.0501C50.0596 60.6673 50.9529 60.4759 52.0102 60.4759C53.4139 60.4759 54.6445 61.1686 55.7018 62.5541V61.0501H61.8545V97.6108C61.8545 100.163 61.0342 102.105 59.3934 103.435C57.771 104.784 55.7383 105.459 53.2954 105.459C50.9255 105.459 48.7197 104.894 46.6779 103.763L48.8108 99.4156C49.8864 100.035 51.1534 100.345 52.6118 100.345C53.5051 100.345 54.2434 100.145 54.8268 99.7437C55.4101 99.3426 55.7018 98.7046 55.7018 97.8295V96.3802ZM54.1978 92.6886C55.2005 92.6886 55.7018 92.0688 55.7018 90.8291V68.324C55.7018 66.7927 55.2005 66.027 54.1978 66.027C53.177 66.027 52.6665 66.7927 52.6665 68.324V90.3369C52.6665 91.9047 53.177 92.6886 54.1978 92.6886ZM73.8591 84.4577H80.0665V91.294C80.0665 92.4972 79.9662 93.5454 79.7657 94.4387C79.5651 95.3138 79.2005 96.1432 78.6719 96.9271C78.1614 97.711 77.3775 98.3126 76.3202 98.7319C75.2628 99.133 73.9411 99.3335 72.3551 99.3335C71.079 99.3335 69.9761 99.1877 69.0463 98.896C68.1166 98.6225 67.3691 98.2579 66.804 97.8022C66.2571 97.3282 65.8196 96.7357 65.4914 96.0247C65.1633 95.2955 64.9445 94.5663 64.8352 93.8371C64.7258 93.0897 64.6711 92.242 64.6711 91.294V68.5428C64.6711 67.5948 64.7258 66.7562 64.8352 66.027C64.9445 65.2796 65.1633 64.5503 65.4914 63.8394C65.8196 63.1102 66.2571 62.5177 66.804 62.0619C67.3509 61.5879 68.0892 61.2051 69.019 60.9134C69.967 60.6217 71.079 60.4759 72.3551 60.4759C73.6312 60.4759 74.7341 60.6217 75.6639 60.9134C76.6119 61.2051 77.3593 61.5879 77.9062 62.0619C78.4713 62.5177 78.918 63.1102 79.2461 63.8394C79.5743 64.5503 79.793 65.2796 79.9024 66.027C80.0118 66.7562 80.0665 67.5948 80.0665 68.5428V81.9966H70.9058V91.5128C70.9058 93.0806 71.3889 93.8645 72.3551 93.8645C73.3578 93.8645 73.8591 93.0806 73.8591 91.5128V84.4577ZM70.9058 76.1174H73.8591V68.324C73.8591 66.7927 73.3578 66.027 72.3551 66.027C71.3889 66.027 70.9058 66.7927 70.9058 68.324V76.1174ZM92.8641 60.4759C94.8876 60.4759 96.2913 61.1595 97.0752 62.5268C97.8774 63.8941 98.2784 65.8811 98.2784 68.4881V98.7866H92.071V68.324C92.071 66.7927 91.5697 66.027 90.567 66.027C89.6008 66.027 89.1177 66.7927 89.1177 68.324V98.7866H82.883V61.0501H89.1177V62.9917C90.0475 61.3145 91.2963 60.4759 92.8641 60.4759Z" fill="white"/><path d="M134.101 60.4759C136.125 60.4759 137.538 61.1686 138.34 62.5541C139.16 63.9396 139.57 65.9358 139.57 68.5428V91.294C139.57 93.9009 139.169 95.888 138.367 97.2553C137.583 98.6225 136.179 99.3153 134.156 99.3335C132.552 99.3335 131.303 98.5314 130.41 96.9271V98.7866H124.175V53.2021H130.41V62.9917C131.376 61.3145 132.606 60.4759 134.101 60.4759ZM131.859 66.027C130.893 66.027 130.41 66.7927 130.41 68.324V91.5128C130.41 93.0806 130.893 93.8645 131.859 93.8645C132.862 93.8645 133.363 93.0806 133.363 91.5128V68.324C133.363 66.7927 132.862 66.027 131.859 66.027ZM142.387 53.2021H148.622V98.7866H142.387V53.2021ZM156.852 99.4156C154.847 99.4156 153.434 98.7228 152.614 97.3373C151.812 95.9336 151.411 93.9374 151.411 91.3487V61.0501H157.645V91.5128C157.645 93.0441 158.147 93.8098 159.149 93.8098C160.116 93.8098 160.599 93.0441 160.599 91.5128V61.0501H166.806V98.7866H160.599V96.8178C159.633 98.5496 158.384 99.4156 156.852 99.4156ZM178.811 84.4577H185.018V91.294C185.018 92.4972 184.918 93.5454 184.717 94.4387C184.517 95.3138 184.152 96.1432 183.623 96.9271C183.113 97.711 182.329 98.3126 181.272 98.7319C180.214 99.133 178.893 99.3335 177.307 99.3335C176.031 99.3335 174.928 99.1877 173.998 98.896C173.068 98.6225 172.321 98.2579 171.756 97.8022C171.209 97.3282 170.771 96.7357 170.443 96.0247C170.115 95.2955 169.896 94.5663 169.787 93.8371C169.677 93.0897 169.623 92.242 169.623 91.294V68.5428C169.623 67.5948 169.677 66.7562 169.787 66.027C169.896 65.2796 170.115 64.5503 170.443 63.8394C170.771 63.1102 171.209 62.5177 171.756 62.0619C172.303 61.5879 173.041 61.2051 173.971 60.9134C174.919 60.6217 176.031 60.4759 177.307 60.4759C178.583 60.4759 179.686 60.6217 180.616 60.9134C181.563 61.2051 182.311 61.5879 182.858 62.0619C183.423 62.5177 183.87 63.1102 184.198 63.8394C184.526 64.5503 184.745 65.2796 184.854 66.027C184.963 66.7562 185.018 67.5948 185.018 68.5428V81.9966H175.857V91.5128C175.857 93.0806 176.341 93.8645 177.307 93.8645C178.309 93.8645 178.811 93.0806 178.811 91.5128V84.4577ZM175.857 76.1174H178.811V68.324C178.811 66.7927 178.309 66.027 177.307 66.027C176.341 66.027 175.857 66.7927 175.857 68.324V76.1174ZM193.769 71.0038C193.769 71.9153 193.969 72.763 194.37 73.5469C194.789 74.3308 195.3 74.9871 195.902 75.5158C196.521 76.0445 197.187 76.637 197.898 77.2932C198.627 77.9495 199.292 78.6058 199.894 79.2621C200.514 79.9184 201.024 80.7843 201.425 81.8599C201.845 82.9172 202.054 84.1022 202.054 85.4148V92.798C202.054 94.7486 201.48 96.3255 200.331 97.5287C199.183 98.7319 197.351 99.3335 194.835 99.3335C192.301 99.3335 190.451 98.7319 189.284 97.5287C188.135 96.3073 187.561 94.7304 187.561 92.798V84.403H193.769V92.2238C193.769 93.3176 194.124 93.8645 194.835 93.8645C195.51 93.8645 195.847 93.3176 195.847 92.2238V87.0282C195.847 86.0437 195.692 85.1504 195.382 84.3483C195.09 83.5462 194.698 82.8626 194.206 82.2974C193.714 81.7323 193.176 81.1945 192.593 80.6841C192.009 80.1554 191.417 79.5994 190.815 79.016C190.232 78.4326 189.694 77.7946 189.202 77.1018C188.71 76.4091 188.309 75.534 187.999 74.4767C187.707 73.4193 187.561 72.2252 187.561 70.8944V67.0388C187.561 65.1064 188.135 63.5295 189.284 62.308C190.451 61.0866 192.301 60.4759 194.835 60.4759C197.351 60.4759 199.183 61.0866 200.331 62.308C201.48 63.5112 202.054 65.0881 202.054 67.0388V73.1914H195.847V67.6404C195.847 66.5648 195.51 66.027 194.835 66.027C194.124 66.027 193.769 66.5648 193.769 67.6404V71.0038Z" fill="white"/></svg><svg x="186" y="186" width="228" height="228" viewBox="0 0 409 409"><path d="m13 204.11c0-105.54 85.568-191.11 191.11-191.11 105.55 0 191.11 85.567 191.11 191.11 0 105.54-85.561 191.11-191.11 191.11-105.54 0-191.11-85.565-191.11-191.11z" fill="black" fill-opacity=".2" stroke="#fff" stroke-width="26"/><path d="m160.18 294.42 126.37-72.471c17.004-9.754 17.004-25.568 0-35.32l-126.37-72.466c-17.004-9.748-30.781-1.775-30.781 17.827v144.6c0 19.597 13.778 27.584 30.781 17.834z" fill="#fff"/></svg></svg>';
    
    function ethDotsSVG(int32[] memory ethPriceData) internal view returns (string memory) {
        (uint32 high, uint32 low, , ) = metadata.getStats(ethPriceData);

        uint span = high-low;
        string memory str = string(
            abi.encodePacked(
                '<svg x="10%" y="10%" width="80%" height="80%" viewBox="0 0 24 ',
                Encoding.uint2str(span),
                '" preserveAspectRatio="none">'
            )
        );


        for (uint i = 0; i < ethPriceData.length; i++) {
            uint32 hue = hueForPrice(uint32(ethPriceData[i])) + 180 % 360;
            str = string(
                abi.encodePacked(
                    str,
                    '<rect x="',
                    Encoding.uint2str(uint32(i)),
                    '" y="',
                    Encoding.uint2str(uint32(int32(high) - int32(ethPriceData[i]))),
                    '" width="1" height="5%" rx="0.5%" fill="hsl(', Encoding.uint2str(hue), ',100%,70%)"/>'
                )
            );
        }

        str = string(
            abi.encodePacked(
                str,
                '</svg>'
            )
        );
        
        return str;
    }

    function hueForPrice(uint32 price) internal pure returns (uint32) {
        uint32 num = price;
        while (num > 256) { // Bit shift the price until we get the two most significant hexadecimal digits
            num = num >> 1;
        }
        uint32 hue = 4 * (360 * num / 256) % 360;
        return hue;
    }

    function cssBackgroundGradient(int32[] memory ethPriceData) internal view returns (string memory) {
        (uint32 high, uint32 low, , ) = metadata.getStats(ethPriceData);

        uint256 bgHue1 = hueForPrice(high);
        uint256 bgHue2 = hueForPrice(low + 2*(high-low)/3);
        uint256 bgHue3 = hueForPrice(low + 1*(high-low)/3);
        uint256 bgHue4 = hueForPrice(low);

        return string(
            abi.encodePacked(
                '.stop1 { stop-color: hsl(', Encoding.uint2str(bgHue1), ',100%,60%); }',
                '.stop2 { stop-color: hsl(', Encoding.uint2str(bgHue2), ',100%,60%); }',
                '.stop3 { stop-color: hsl(', Encoding.uint2str(bgHue3), ',100%,60%); }',
                '.stop4 { stop-color: hsl(', Encoding.uint2str(bgHue4), ',100%,60%); }'
            )
        );
    }

    function printImageWith(int32[] memory ethPriceData, uint256 tokenId) external view returns (string memory) {

        return string(
            abi.encodePacked(
                svg1,
                cssBackgroundGradient(ethPriceData),
                svg2,
                ethDotsSVG(ethPriceData),
                '<text class="svgTokenId" x="95%" y="9%" text-anchor="end">#',
                Encoding.uint2str(tokenId),
                '</text>',
                svg5));
    }

    function masterImageWith() external pure returns (string memory) {
        return string(
            abi.encodePacked(
                svg1,
                '.stop1 { stop-color: hsl(0,0%,10%); }',
                '.stop2 { stop-color: hsl(0,0%,20%); }',
                svg2,
                '<text class="svgTokenId" x="95%" y="9%" text-anchor="end">#0</text>',
                svg5));
    }
}