/*


───────────────────────────────────────────────────────────────────────────────────────────────────────────────
─██████████████───██████████─██████████████────██████████████─██████████████─██████████████─████████──████████─
─██░░░░░░░░░░██───██░░░░░░██─██░░░░░░░░░░██────██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░██──██░░░░██─
─██░░██████░░██───████░░████─██░░██████████────██░░██████████─██░░██████░░██─██░░██████████─████░░██──██░░████─
─██░░██──██░░██─────██░░██───██░░██────────────██░░██─────────██░░██──██░░██─██░░██───────────██░░░░██░░░░██───
─██░░██████░░████───██░░██───██░░██────────────██░░██████████─██░░██████░░██─██░░██████████───████░░░░░░████───
─██░░░░░░░░░░░░██───██░░██───██░░██──██████────██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─────████░░████─────
─██░░████████░░██───██░░██───██░░██──██░░██────██░░██████████─██░░██████░░██─██████████░░██───────██░░██───────
─██░░██────██░░██───██░░██───██░░██──██░░██────██░░██─────────██░░██──██░░██─────────██░░██───────██░░██───────
─██░░████████░░██─████░░████─██░░██████░░██────██░░██████████─██░░██──██░░██─██████████░░██───────██░░██───────
─██░░░░░░░░░░░░██─██░░░░░░██─██░░░░░░░░░░██────██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░░░░░██───────██░░██───────
─████████████████─██████████─██████████████────██████████████─██████──██████─██████████████───────██████───────
───────────────────────────────────────────────────────────────────────────────────────────────────────────────
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
─██████████████─██████──██████─██████─────────██████████████─██████████─██████──██████─██████████████─██████████████─██████████████─████████████████───██████████████─
─██░░░░░░░░░░██─██░░██──██░░██─██░░██─────────██░░░░░░░░░░██─██░░░░░░██─██░░██──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░░░░░░░░░██─
─██░░██████████─██░░██──██░░██─██░░██─────────██████░░██████─████░░████─██░░██──██░░██─██░░██████░░██─██████░░██████─██░░██████░░██─██░░████████░░██───██░░██████████─
─██░░██─────────██░░██──██░░██─██░░██─────────────██░░██───────██░░██───██░░██──██░░██─██░░██──██░░██─────██░░██─────██░░██──██░░██─██░░██────██░░██───██░░██─────────
─██░░██─────────██░░██──██░░██─██░░██─────────────██░░██───────██░░██───██░░██──██░░██─██░░██████░░██─────██░░██─────██░░██──██░░██─██░░████████░░██───██░░██████████─
─██░░██─────────██░░██──██░░██─██░░██─────────────██░░██───────██░░██───██░░██──██░░██─██░░░░░░░░░░██─────██░░██─────██░░██──██░░██─██░░░░░░░░░░░░██───██░░░░░░░░░░██─
─██░░██─────────██░░██──██░░██─██░░██─────────────██░░██───────██░░██───██░░██──██░░██─██░░██████░░██─────██░░██─────██░░██──██░░██─██░░██████░░████───██████████░░██─
─██░░██─────────██░░██──██░░██─██░░██─────────────██░░██───────██░░██───██░░░░██░░░░██─██░░██──██░░██─────██░░██─────██░░██──██░░██─██░░██──██░░██─────────────██░░██─
─██░░██████████─██░░██████░░██─██░░██████████─────██░░██─────████░░████─████░░░░░░████─██░░██──██░░██─────██░░██─────██░░██████░░██─██░░██──██░░██████─██████████░░██─
─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─────██░░██─────██░░░░░░██───████░░████───██░░██──██░░██─────██░░██─────██░░░░░░░░░░██─██░░██──██░░░░░░██─██░░░░░░░░░░██─
─██████████████─██████████████─██████████████─────██████─────██████████─────██████─────██████──██████─────██████─────██████████████─██████──██████████─██████████████─
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
─██████─────────██████████████─██████████████─██████████████─██████████████─████████──████████────██████──────────██████─██████████████─██████████████─██████████████─
─██░░██─────────██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░██──██░░░░██────██░░██████████──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─
─██░░██─────────██░░██████████─██░░██████████─██░░██████░░██─██░░██████████─████░░██──██░░████────██░░░░░░░░░░██──██░░██─██░░██████████─██████░░██████─██░░██████████─
─██░░██─────────██░░██─────────██░░██─────────██░░██──██░░██─██░░██───────────██░░░░██░░░░██──────██░░██████░░██──██░░██─██░░██─────────────██░░██─────██░░██─────────
─██░░██─────────██░░██████████─██░░██─────────██░░██████░░██─██░░██───────────████░░░░░░████──────██░░██──██░░██──██░░██─██░░██████████─────██░░██─────██░░██████████─
─██░░██─────────██░░░░░░░░░░██─██░░██──██████─██░░░░░░░░░░██─██░░██─────────────████░░████────────██░░██──██░░██──██░░██─██░░░░░░░░░░██─────██░░██─────██░░░░░░░░░░██─
─██░░██─────────██░░██████████─██░░██──██░░██─██░░██████░░██─██░░██───────────────██░░██──────────██░░██──██░░██──██░░██─██░░██████████─────██░░██─────██████████░░██─
─██░░██─────────██░░██─────────██░░██──██░░██─██░░██──██░░██─██░░██───────────────██░░██──────────██░░██──██░░██████░░██─██░░██─────────────██░░██─────────────██░░██─
─██░░██████████─██░░██████████─██░░██████░░██─██░░██──██░░██─██░░██████████───────██░░██──────────██░░██──██░░░░░░░░░░██─██░░██─────────────██░░██─────██████████░░██─
─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░░░░░██───────██░░██──────────██░░██──██████████░░██─██░░██─────────────██░░██─────██░░░░░░░░░░██─
─██████████████─██████████████─██████████████─██████──██████─██████████████───────██████──────────██████──────────██████─██████─────────────██████─────██████████████─
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract BigEasyCultivatorsLegacyNFT is ERC721Enumerable, Ownable {
    using SafeMath for uint256;

    // Token Data
    uint256 public TOKEN_PRICE;
    uint256 public MAX_TOKENS;
    uint256 public MAX_MINTS;

    // Metadata
    string public _baseTokenURI;

    // Control
    bool public MINTING_PAUSED = false;

    constructor(
        string memory name,
        string memory symbol,
        string memory baseURI,
        uint256 tokenPrice,
        uint256 maxTokens,
        uint256 maxMints
    ) ERC721(name, symbol) {
        setTokenPrice(tokenPrice);
        setMaxTokens(maxTokens);
        setMaxMints(maxMints);
        setBaseURI(baseURI);
    }

    /* Setters */
    function setBaseURI(string memory baseURI) public onlyOwner {
        _baseTokenURI = baseURI;
    }

    function setMaxMints(uint256 maxMints_) public onlyOwner {
        MAX_MINTS = maxMints_;
    }

    function setTokenPrice(uint256 tokenPrice_) public onlyOwner {
        TOKEN_PRICE = tokenPrice_;
    }

    function setMaxTokens(uint256 maxTokens_) public onlyOwner {
        MAX_TOKENS = maxTokens_;
    }

    function setMintingPaused(bool pauseMinting_) public onlyOwner {
        MINTING_PAUSED = pauseMinting_;
    }

    /* Getters */
    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /* Withdraw funds */
    function withdrawFunds() public onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }

    /* Main Sale */
    function mintTokens(uint256 numberOfTokens) public payable {
        require(
            MINTING_PAUSED == false,
            "Minting is not available at this time"
        );
        require(
            numberOfTokens <= MAX_MINTS,
            "Can only mint max purchase of tokens at a time"
        );
        require(
            totalSupply().add(numberOfTokens) <= MAX_TOKENS,
            "Purchase would exceed max supply of Tokens"
        );
        require(
            TOKEN_PRICE.mul(numberOfTokens) <= msg.value,
            "Ether value sent is not correct"
        );

        for (uint256 i = 0; i < numberOfTokens; i++) {
            uint256 mintIndex = totalSupply();
            if (mintIndex < MAX_TOKENS) {
                _safeMint(msg.sender, mintIndex);
            }
        }
    }
}
