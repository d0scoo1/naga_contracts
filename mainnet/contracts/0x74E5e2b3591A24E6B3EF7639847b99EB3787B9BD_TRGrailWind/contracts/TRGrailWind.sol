// SPDX-License-Identifier: Unlicense

pragma solidity ^0.8.4;

import './TRKeys.sol';

/// @notice The Reliquary Grail of Wind
library TRGrailWind {

  function getElement() public pure returns (string memory) {
    return 'Wind';
  }

  function getPalette() public pure returns (string memory) {
    return 'Aero';
  }

  function getEssence() public pure returns (string memory) {
    return 'Electric';
  }

  function getStyle() public pure returns (string memory) {
    return 'Smooth';
  }

  function getSpeed() public pure returns (string memory) {
    return 'Swift';
  }

  function getGravity() public pure returns (string memory) {
    return 'Galactic';
  }

  function getDisplay() public pure returns (string memory) {
    return 'Normal';
  }

  function getColorCount() public pure returns (uint256) {
    return 3;
  }

  function getRelicType() public pure returns (string memory) {
    return TRKeys.RELIC_TYPE_GRAIL;
  }

  function getRuneflux() public pure returns (uint256) {
    return 799;
  }

  function getCorruption() public pure returns (uint256) {
    return 997;
  }

  function getGlyph() public pure returns (uint256[] memory) {
    uint256[] memory glyph = new uint256[](64);
    glyph[0]  = uint256(0);
    glyph[1]  = uint256(0);
    glyph[2]  = uint256(0);
    glyph[3]  = uint256(0);
    glyph[4]  = uint256(0);
    glyph[5]  = uint256(0);
    glyph[6]  = uint256(0);
    glyph[7]  = uint256(0);
    glyph[8]  = uint256(8888888888888888000000000000000000000000000000);
    glyph[9]  = uint256(8888888888888888000000000000000000000000000000);
    glyph[10] = uint256(8888888888888800000000000000000000000000);
    glyph[11] = uint256(8888888888888800000000000000000000000000);
    glyph[12] = uint256(8888888888888888888888880000000000000000000000);
    glyph[13] = uint256(8888888888888888888888880000000000000000000000);
    glyph[14] = uint256(88888888888888888888888800000000000000000000);
    glyph[15] = uint256(88888888888888888888888800000000000000000000);
    glyph[16] = uint256(8888888888888888888888888888000000000000000000);
    glyph[17] = uint256(8888888888888888888888888888000000000000000000);
    glyph[18] = uint256(8888888888888888888888888888000000000000000000);
    glyph[19] = uint256(8888888888888888888888888888000000000000000000);
    glyph[20] = uint256(8888888888888888888888888888880000000000000000);
    glyph[21] = uint256(8888888888888888888888888888880000000000000000);
    glyph[22] = uint256(888822222222222288333333333333880000000000000000);
    glyph[23] = uint256(888822222222222288333333333333880000000000000000);
    glyph[24] = uint256(888822111199992288331111999933880000000000000000);
    glyph[25] = uint256(888822111199992288331111999933880000000000000000);
    glyph[26] = uint256(33333322111199992233331111999933880000000000000000);
    glyph[27] = uint256(33333322111199992233331111999933880000000000000000);
    glyph[28] = uint256(22888822111199992288331111999933880000000000000000);
    glyph[29] = uint256(22888822111199992288331111999933880000000000000000);
    glyph[30] = uint256(22888822111199992288331111999933770000000000000000);
    glyph[31] = uint256(22888822111199992288331111999933770000000000000000);
    glyph[32] = uint256(888822222222222277333333333333777777777700000000);
    glyph[33] = uint256(888822222222222277333333333333777777777700000000);
    glyph[34] = uint256(888888888888887777777777777777777777777777770000);
    glyph[35] = uint256(888888888888887777777777777777777777777777770000);
    glyph[36] = uint256(888888888888887777777777777777777777777777770000);
    glyph[37] = uint256(888888888888887777777777777777777777777777770000);
    glyph[38] = uint256(888888888888887777777777777777777777777700000000);
    glyph[39] = uint256(888888888888887777777777777777777777777700000000);
    glyph[40] = uint256(888888888888888877777777777777777700000000000000);
    glyph[41] = uint256(888888888888888877777777777777777700000000000000);
    glyph[42] = uint256(3333332233333333333322333333000000000000000000);
    glyph[43] = uint256(3333332233333333333322333333000000000000000000);
    glyph[44] = uint256(3333333322333333332233333333000000000000000000);
    glyph[45] = uint256(3333333322333333332233333333000000000000000000);
    glyph[46] = uint256(3333333333223333223333333333000000000000000000);
    glyph[47] = uint256(3333333333223333223333333333000000000000000000);
    glyph[48] = uint256(3333333333332222333333333333000000000000000000);
    glyph[49] = uint256(3333333333332222333333333333000000000000000000);
    glyph[50] = uint256(3333003311111111111133333333000000000000000000);
    glyph[51] = uint256(3333003311111111111133333333000000000000000000);
    glyph[52] = uint256(3333003322222222111133333333000000000000000000);
    glyph[53] = uint256(3333003322222222111133333333000000000000000000);
    glyph[54] = uint256(3333003322222222111133333333000000000000000000);
    glyph[55] = uint256(3333003322222222111133333333000000000000000000);
    glyph[56] = uint256(3333003333333333333333333333000000000000000000);
    glyph[57] = uint256(3333003333333333333333333333000000000000000000);
    glyph[58] = uint256(3333003333333333333333333333000000000000000000);
    glyph[59] = uint256(3333003333333333333333333333000000000000000000);
    glyph[60] = uint256(3333003333333333333333333333000000000000000000);
    glyph[61] = uint256(3333003333333333333333333333000000000000000000);
    glyph[62] = uint256(3333003333333333333333333333000000000000000000);
    glyph[63] = uint256(3333003333333333333333333333000000000000000000);
    return glyph;
  }

  function getDescription() public pure returns (string memory) {
    return 'The Grail of Wind honors Nouns DAO, Noun 197, and its collector, Benoit Pagotto. Nouns have led by example in CC0 IP, true to the ethos of decentralization and property rights enforced by code. Benoit, and the entire RTFKT team, have led by example in building world-class products, delivering art and experiences to their community. Thank you both for leading the way!';
  }

}
