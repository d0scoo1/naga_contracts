// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/Data.sol";

library Materials {
    using Data for Data.Reader;

    struct Variant {
        uint256 nameId;
        uint256[] colorIds;
    }

    struct Material {
        uint256 colorCount;
        Variant[] variants;
    }

    function _load(uint256 i, bytes memory data)
        private
        pure
        returns (Material memory)
    {
        Material memory mat;
        Data.Reader memory reader = Data.Reader(i);
        uint256 header = reader.nextUint8(data);

        mat.variants = new Variant[](header >> 4);
        mat.colorCount = header & 0xF;

        for (uint256 j; j < mat.variants.length; j++) {
            mat.variants[j].nameId = reader.nextUint8(data);
            mat.variants[j].colorIds = reader.nextUint8Array(
                data,
                mat.colorCount
            );
        }

        return mat;
    }

    function get(uint256 i) internal pure returns (Material memory) {
        bytes
            memory data = "\x83\x31\x41\x42\x43\x32\x44\x45\x36\x33\x46\x47\x47\x34\x48\x49\x36\x35\x4a\x4b\x4b\x36\x4c\x4d\x36\x37\x4e\x4f\x50\x38\x51\x52\x36\x82\x01\x00\x01\x02\x02\x01\x03\x03\x01\x04\x04\x01\x05\x05\x01\x06\x06\x01\x07\x07\x01\x08\x08\x01\x81\x01\x00\x02\x02\x03\x03\x04\x04\x05\x05\x06\x06\x07\x07\x08\x08\x82\x01\x09\x0a\x02\x0b\x0c\x03\x0d\x03\x04\x0e\x0f\x05\x05\x10\x06\x11\x06\x07\x07\x12\x0b\x13\x14\x81\x01\x0a\x02\x0c\x03\x03\x04\x0f\x05\x10\x06\x06\x07\x07\x08\x08\x81\x01\x15\x02\x16\x03\x17\x04\x18\x05\x19\x06\x1a\x07\x12\x0b\x14\x82\x01\x0a\x15\x02\x0c\x16\x03\x03\x17\x04\x0f\x18\x05\x10\x19\x06\x06\x1a\x07\x1b\x07\x08\x08\x14\x83\x01\x1c\x1c\x0a\x02\x1d\x1d\x0c\x03\x0d\x0d\x03\x04\x1e\x1e\x0f\x05\x05\x05\x1f\x06\x11\x11\x06\x07\x07\x07\x12\x08\x08\x20\x14\x82\x01\x21\x22\x02\x23\x24\x03\x25\x26\x04\x27\x28\x05\x29\x2a\x06\x06\x2b\x07\x07\x1b\x08\x08\x14\x81\x01\x00\x02\x02\x03\x03\x04\x04\x05\x05\x06\x06\x07\x07\x08\x08\x85\x01\x00\x01\x03\x2c\x2d\x02\x02\x01\x03\x2c\x2e\x03\x03\x01\x03\x2c\x2f\x04\x04\x01\x03\x2c\x30\x05\x05\x01\x03\x2c\x31\x06\x06\x01\x03\x2c\x32\x07\x07\x01\x03\x2c\x12\x08\x08\x01\x03\x2c\x13\x82\x01\x0a\x15\x02\x0c\x16\x03\x03\x17\x04\x0f\x18\x05\x10\x19\x06\x06\x1a\x07\x07\x1b\x08\x08\x14\x81\x01\x15\x02\x16\x03\x17\x04\x18\x05\x19\x06\x1a\x07\x07\x0b\x14\x82\x01\x0a\x01\x02\x0c\x33\x03\x03\x0d\x04\x0f\x34\x05\x10\x05\x06\x06\x35\x07\x07\x1b\x08\x08\x14\x84\x01\x15\x0a\x01\x36\x02\x16\x0c\x2e\x36\x03\x17\x03\x2f\x36\x04\x18\x0f\x30\x36\x05\x19\x10\x31\x36\x06\x1a\x06\x32\x36\x07\x1b\x07\x12\x08\x08\x14\x08\x13\x36\x82\x01\x00\x01\x02\x02\x01\x03\x03\x01\x04\x04\x01\x05\x05\x01\x06\x06\x01\x07\x07\x01\x08\x08\x01\x82\x01\x00\x01\x02\x02\x01\x03\x03\x01\x04\x04\x01\x05\x05\x01\x06\x06\x01\x07\x07\x01\x08\x08\x01\x42\x07\x36\x2c\x08\x08\x36\x02\x0c\x36\x06\x37\x2c\x32\x06\x37\x2c\x03\x0d\x2c\x02\x23\x2c\x41\x03\x0d\x05\x38\x02\x0c\x06\x37\x32\x08\x08\x03\x03\x03\x39\x07\x36\x39\x42\x03\x03\x3a\x05\x10\x31\x02\x0c\x3b\x0b\x3c\x36\x11\x08\x2c\x11\x01\x00\x12\x1f\x3d\x2c\x11\x1f\x3e\x11\x20\x3f\x11\x1f\x40\x12\x08\x0c\x2c\x11\x07\x36";
        bytes
            memory index = "\x00\x00\x00\x21\x00\x3a\x00\x4b\x00\x64\x00\x75\x00\x86\x00\x9f\x00\xc0\x00\xd9\x00\xea\x01\x1b\x01\x34\x01\x45\x01\x5e\x01\x87\x01\xa0\x01\xb9\x01\xc6\x01\xd0\x01\xd9\x01\xe3\x01\xf0\x01\xf3\x01\xf6\x01\xfa\x01\xfd\x02\x00\x02\x03\x02\x07";
        Data.Reader memory reader = Data.Reader(i << 1);

        return _load(reader.nextUint16(index), data);
    }
}
