// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IShopXReserveNFT {
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
    event BeneficiaryAddressUpdate(address indexed _beneficiaryAddress);
    event ETHReceive(address indexed _from, uint256 _amount);
    event MerkleRootChange(bytes32 indexed merkleRoot);
    event NFTClaim(address indexed _claimant, uint256 indexed _tokenId, uint256 mintPrice);
    event Paused(address account);
    event PriceChange(uint256 indexed _price, uint256 indexed _tokenId);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event ShopxAddressUpdate(address indexed _shopxAddress);
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Unpaused(address account);

    function BRAND_ADMIN() external view returns (bytes32);
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);
    function SALE_ADMIN() external view returns (bytes32);
    function SHOPX_ADMIN() external view returns (bytes32);
    function addAdmin(bytes32 _role, address _address) external;
    function approve(address to, uint256 tokenId) external;
    function balanceOf(address owner) external view returns (uint256);
    function burn(uint256 tokenId) external;
    function exists(uint256 tokenId) external view returns (bool);
    function factory() external view returns (address);
    function getApproved(uint256 tokenId) external view returns (address);
    function getBalance() external view returns (uint256);
    function getBaseURI() external view returns (string memory);
    function getBrand() external view returns (string memory);
    function getClaimed(address _address) external view returns (uint256);
    function getInfo() external view returns (uint256 _balance, uint256 _maxSupply, uint256 _totalSupply, uint256 _mintPrice, bool _paused, address _royaltyRecipient, address _shopxAddress, address _beneficiaryAddress, uint256 _shopxFee);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function getShopXFee() external view returns (uint256);
    function grantRole(bytes32 role, address account) external;
    function hasRole(bytes32 role, address account) external view returns (bool);
    function initialize(string memory _baseURI, uint256[4] memory _uintArgs, address[2] memory _addressArgs, address[] memory _brandAdmins, address[] memory _saleAdmins, uint256 _shopxFee, address _shopxAddress, address[] memory _shopxAdmins) external;
    function isApprovedForAll(address owner, address operator) external view returns (bool);
    function merkleRoot() external view returns (bytes32);
    function mint(bytes32[] memory merkleProof) external payable;
    function mintTo(address to) external;
    function name() external view returns (string memory);
    function ownerOf(uint256 tokenId) external view returns (address);
    function pause() external;
    function paused() external view returns (bool);
    function removeAdmin(bytes32 _role, address _address) external;
    function renounceRole(bytes32 role, address account) external;
    function revokeRole(bytes32 role, address account) external;
    function royaltyInfo(uint256, uint256 value) external view returns (address receiver, uint256 royaltyAmount);
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;
    function setApprovalForAll(address operator, bool approved) external;
    function setBaseURI(string memory _baseURI) external;
    function setMaxSupply(uint256 _maxSupply) external;
    function setMerkleRoot(bytes32 _merkleRoot) external;
    function setMintPrice(uint256 _mintPrice) external;
    function setTokenURI(uint256 tokenId, string memory _tokenURI) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function symbol() external view returns (string memory);
    function tokenByIndex(uint256 index) external view returns (uint256);
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
    function tokenURI(uint256 tokenId) external view returns (string memory);
    function totalSupply() external view returns (uint256);
    function transferFrom(address from, address to, uint256 tokenId) external;
    function unpause() external;
    function updateBeneficiaryAddress(address _beneficiaryAddress) external;
    function updateRoyaltyAddress(address recipient) external;
    function updateShopxAddress(address _shopxAddress) external;
    receive() external payable;
}