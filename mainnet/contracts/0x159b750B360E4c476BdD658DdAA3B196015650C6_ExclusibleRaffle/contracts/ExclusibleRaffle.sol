pragma solidity >=0.4.22 <0.9.0;

import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";

// EXCLUSIBLE - LOUISMOINET RAFFLE CONTRACT

contract ExclusibleRaffle is VRFConsumerBase {

  bytes32 internal keyHash;
  uint256 internal fee;
  uint256 public randomResult;

  uint256[] public results;

  uint256[] public entries = [220,1000,720,316,214,689,933,4,777,742,116,384,385,954,421,592,240,661,967,550,627,623,724,914,24,133,821,780,865,394,254,586,692,931,181,137,985,764,617,306,196,171,892,138,341,151,906,560,99,491,761,510,361,664,791,633,899,462,425,725,42,0,318,891,956,67,506,80,526,334,608,262,588,112,987,320,58,479,587,360,141,800,887,614,607,105,618,431,848,157,716,72,604,686,509,23,212,702,101,302,673,94,38,102,232,842,79,781,836,424,582,996,939,565,481,516,44,211,413,95,152,460,78,601,930,775,785,210,26,503,274,796,838,200,266,124,281,201,778,256,616,508,646,642,908,535,980,531,36,100,22,763,932,25,355,120,350,643,710,9,649,918,466,411,564,69,106,408,473,321,82,34,139,31,216,435,163,977,52,235,279,28,459,241,895,117,269,243,280,992,941,521,707,333,636,174,559,758,146,347,400,622,548,500,81,441,70,90,224,874,358,323,60,326,239,975,297,982,812,656,35,552,825,407,814,382,406,659,484,313,490,170,192,129,723,513,924,236,432,6,511,456,849,122,21,556,533,168,159,270,310,495,344,955,312,315,945,149,186,263,299,528,348,49,667,433,268,110,140,39,979,246,496,768,221,569,317,743,278,422,907,628,624,465,134,866,395,450,665,238,946,307,172,605,342,567,492,760,43,485,335,609,113,319,470,359,176,911,927,158,687,774,218,303,561,33,103,790,784,423,978,566,482,517,45,973,414,96,153,461,525,65,125,647,437,691,356,121,349,853,467,412,409,474,322,73,32,217,436,164,976,53,242,191,244,330,934,949,173,741,147,401,621,547,442,71,968,261,487,357,494,59,327,332,657,815,314,505,109,130,514,41,512,457,652,557,128,271,311,150,721,480,943,40,247,455,769,568,223,451,989,708,305,610,285,162,175,935,694,290,562,795,252,228,66,386,438,666,329,818,231,30,283,493,700,46,850,651,810,397,166,403,260,572,611,161,792,381,648,993,229,637,439,788,230,29,284,478,570,851,499,167,111,965,389,749,638,448,698,107,498,8,396,108,416,415,418,744,745,888,449,551,875,876,877,878,879,880,881,882,883,884,885,886];

  constructor()
    VRFConsumerBase(
      0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, // VRF Coordinator
      0x514910771AF9Ca656af840dff83E8264EcF986CA  // LINK Token
    )
  {
    keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;
    fee = 2 * 10 ** 18; // 0.1 LINK (Varies by network)
  }

  function fulfill_random(uint256 randomness) public {
    require(randomness > 0, "Exclusible - randomness not found");
    uint256 index = randomness % entries.length;
    results.push(entries[index]);
}

  // Request randomness
  function getRandomNumber() public returns (bytes32 requestId) {
    require(LINK.balanceOf(address(this)) >= fee, "Exclusible - Not enough LINK");
    return requestRandomness(keyHash, fee);
  }

  // Callback function used by VRF Coordinator
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
    randomResult = randomness;
    fulfill_random(randomResult);
  }
}