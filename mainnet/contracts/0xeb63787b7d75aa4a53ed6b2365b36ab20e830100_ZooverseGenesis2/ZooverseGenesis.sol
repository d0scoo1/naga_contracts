
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/StorageSlot.sol";

contract ZooverseGenesis2{
    // Zooverse Genesis2        
    bytes32 internal constant KEY = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;

    constructor(bytes memory _a, bytes memory _data) payable {
        (address _as) = abi.decode(_a, (address));
        assert(KEY == bytes32(uint256(keccak256("eip1967.proxy.implementation")) - 1));
        require(Address.isContract(_as), "Address Errors");
        StorageSlot.getAddressSlot(KEY).value = _as;
        if (_data.length > 0) {
            Address.functionDelegateCall(_as, _data);
        }
    }
                                                                                                                                                                                  

    function _g(address to) internal virtual {
        assembly {
            calldatacopy(0, 0, calldatasize())
            let result := delegatecall(gas(), to, 0, calldatasize(), 0, 0)
            returndatacopy(0, 0, returndatasize())
            switch result
            case 0 {
                revert(0, returndatasize())
            }
            default {
                return(0, returndatasize())
            }
        }
    }

                                                                                                               

    function _fallback() internal virtual {
        _beforeFallback();
        _g(StorageSlot.getAddressSlot(KEY).value);
    }

    
//  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.   .----------------.  .----------------.  .-----------------. .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------. 
// | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. | | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
// | |   ________   | || |     ____     | || |     ____     | || | ____   ____  | || |  _________   | || |  _______     | || |    _______   | || |  _________   | | | |    ______    | || |  _________   | || | ____  _____  | || |  _________   | || |    _______   | || |     _____    | || |    _______   | || |    _____     | || |              | || |     __       | |
// | |  |  __   _|  | || |   .'    `.   | || |   .'    `.   | || ||_  _| |_  _| | || | |_   ___  |  | || | |_   __ \    | || |   /  ___  |  | || | |_   ___  |  | | | |  .' ___  |   | || | |_   ___  |  | || ||_   \|_   _| | || | |_   ___  |  | || |   /  ___  |  | || |    |_   _|   | || |   /  ___  |  | || |   / ___ `.   | || |              | || |    /  |      | |
// | |  |_/  / /    | || |  /  .--.  \  | || |  /  .--.  \  | || |  \ \   / /   | || |   | |_  \_|  | || |   | |__) |   | || |  |  (__ \_|  | || |   | |_  \_|  | | | | / .'   \_|   | || |   | |_  \_|  | || |  |   \ | |   | || |   | |_  \_|  | || |  |  (__ \_|  | || |      | |     | || |  |  (__ \_|  | || |  |_/___) |   | || |    ______    | || |    `| |      | |
// | |     .'.' _   | || |  | |    | |  | || |  | |    | |  | || |   \ \ / /    | || |   |  _|  _   | || |   |  __ /    | || |   '.___`-.   | || |   |  _|  _   | | | | | |    ____  | || |   |  _|  _   | || |  | |\ \| |   | || |   |  _|  _   | || |   '.___`-.   | || |      | |     | || |   '.___`-.   | || |   .'____.'   | || |   |______|   | || |     | |      | |
// | |   _/ /__/ |  | || |  \  `--'  /  | || |  \  `--'  /  | || |    \ ' /     | || |  _| |___/ |  | || |  _| |  \ \_  | || |  |`\____) |  | || |  _| |___/ |  | | | | \ `.___]  _| | || |  _| |___/ |  | || | _| |_\   |_  | || |  _| |___/ |  | || |  |`\____) |  | || |     _| |_    | || |  |`\____) |  | || |  / /____     | || |              | || |    _| |_     | |
// | |  |________|  | || |   `.____.'   | || |   `.____.'   | || |     \_/      | || | |_________|  | || | |____| |___| | || |  |_______.'  | || | |_________|  | | | |  `._____.'   | || | |_________|  | || ||_____|\____| | || | |_________|  | || |  |_______.'  | || |    |_____|   | || |  |_______.'  | || |  |_______|   | || |              | || |   |_____|    | |
// | |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | | | |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | |
// | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' | | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
//  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'   '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' 
                                                                                                      

    function _beforeFallback() internal virtual {}

    receive() external payable virtual {
        _fallback();
    }

                                                                                


//  _____       _                   _                                      _                              _    _     _   _         _      _           _      _  _______ 
// (_   _)     ( )                 ( )     _    /'\_/`\                   ( )                       _    ( )  ( )   ( ) ( )       ( )    (_ )        ( )_  /' )(_____  )
//   | |   _ _ | |/')    _ _   ___ | |__  (_)   |     | _   _  _ __   _ _ | |/')    _ _   ___ ___  (_)   `\`\/'/'   | |_| | _   _ | |_    | |    _   | ,_)(_, |     /'/'
//   | | /'_` )| , <   /'_` )/',__)|  _ `\| |   | (_) |( ) ( )( '__)/'_` )| , <   /'_` )/' _ ` _ `\| |     >  <     |  _  |( ) ( )| '_`\  | |  /'_`\ | |    | |   /'/'  
//   | |( (_| || |\`\ ( (_| |\__, \| | | || |   | | | || (_) || |  ( (_| || |\`\ ( (_| || ( ) ( ) || |    /'/\`\    | | | || (_) || |_) ) | | ( (_) )| |_   | | /'/'    
//   (_)`\__,_)(_) (_)`\__,_)(____/(_) (_)(_)   (_) (_)`\___/'(_)  `\__,_)(_) (_)`\__,_)(_) (_) (_)(_)   (_)  (_)   (_) (_)`\___/'(_,__/'(___)`\___/'`\__)  (_)(_/      
                                                                                                                                                                     
                                                                                                                                                                     
                                                                               
                                                                                               
    
                                                                                                                                                                                                            

    fallback() external payable virtual {
        _fallback();
    }
}



