// SPDX-License-Identifier: MIT

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/common/ERC2981.sol";
import "./ERC721A.sol";

pragma solidity 0.8.14;

// ........................................................................................................................
// ........................................................................................................................
// ........................................................................................................................
// .......................................................   ..............................................................
// .................................................................   .........   ........................................
// ..............................................  ...............       ..................................................
// ...........................................        ..............   ....................................................
// ..............................................  .......................................  ...............................
// ..................................................(@@@@@@@@@@@@@@@@@@@@@@@@@@@@(....        ............................
// ................................................@@(         ,,,,,,,,,,/////////%@.....  ...............................
// ................................................@@(       ,,,,,,,,,,,,,,///////%@......................................
// ................................................@@@&&&&&&&//////////////%&&&&&&@@......................................
// ................................................@@          _____  .___        @@
// ................................................@@         /  _  \ |   |       @@
// ................................................@@        /  /_\  \|   |       @@
// ................................................@@       /    |    \   |       @@
// ................................................@@       \____|__  /___|       @@
// ................................................@@               \/            @@
// ..................................................(@@/////,,,,,,,,,,,,,,/////@@(........................................
// .....................................................@@#////*,,,,,,,,,////#@@,..........................................
// .......................................................%@@/////,,,,*////&@%.............................................
// ........................................,@@@@%...........,@@(/////////@@/...............................................
// ......................................(@@////#@@............&@@////%@@...........,@@@@%.................................
// ....................................@@%((##(((//@@(,,.........,@@@@(.........,,#@@##((#@@...............................
// ....................................@@%(#@@#((////%@@........................@@%(#@@#(#@@...............................
// ....................................@@%(#@@@@&((//#&&**,................,*/&&(/(#%@@#(#@@...............................
// ....................................@@%(#@@@@@%%/////@@(****************%&%((((&@@@@#(#@@...............................
// ....................................@@%(#@@@@@@@(((//%%%%%&&&&&%%&&&&&%%(/(##%%&@@&&%%%##...............................
// ....................................@@%(#@@@@@@@((//////////(((////(((((///((@@@@@((@@%.................................
// ....................................@@&##%%@@@@@//////////**(((((***//(((((((##%%%((@@%.................................
// ....................................@@%//((@@&##(((/////////***(((((((*******(((((((@@%.................................
// ....................................@@%((**///*******((////////****/((((/////****/@@**,.................................
// .................................*@@/****((((((((((((@@@@@@@(///////****&@@@@#((((@@,...................................
// .................................*@@((((/*******((%@@  %@@##@@&///////@@%#%@@@@%((//@@%.................................
// ...............................%@&((*****/////((@@(    %@@  &@@///////((. *@@. (@@//@@%.................................
// ...............................%@&**//////////((       %@@((@@@((//(((//((%@@.    //@@%.................................
// ...............................%@&////////////((((,    /((//@@@(((((((/////((     ////#@@...............................
// .............................@@#/////////((*,,,,((((((((((((((((((((((,,*//(((((((((//#@@...............................
// .............................@@#//////(((,,,,,,,,,/(((((((((,,,,,,,,,,,,,,*//((((((((((//@@#............................
// .............................@@%((((((/,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,//((((((((((@@#............................
// .............................@@(******/((((*,,,,(((((,,,,,,,,,,,,@@@@@@@@@@@@,,*//((/////@@#............................
// ...............................%@&//((/,,,,,,,,,(((((,,,,,,,,,,,,%&@@@@@@@@&&,,*//(((((((@@#............................
// ...............................%@&****///((*,,,,,,,,,(((((,,,,,,,,,(&&@@&&#,,,,*//((//#@@...............................
// ...............................%@&((((/**,,,,,,,,,,,,,,/((((((((((((((&&#(/,,%&#((((((#@@...............................
// .............................@@#////((((((((((((,,,,,,,,,,&&&&&&&&&&&&&&&&&&&#((((((@@%.................................
// .............................@@#////(((((**//*,,,,,,,,,,,,,,,,*&&/*/((**#&#,,(((((//@@%.................................
// .............................@@%((//(((((**///**(((((((*,,,,,,*&&/*/((**#&%(((((((((@@%.................................
// ..........................(@@(((((//(((((**///(((((((,,,,,,,,,*%%///////#&%(((((////((#@@...............................
// ..........................(@@///////(((((**///**((/(((((((,,,,,,,%&&&&&&#((((/////((((#@@...............................
// ..........................(@@/////((((/**/////**/////,,,,,,,,,,,,,,,,,,,,,*((((((((((((//@@#............................
// ........................**#&&/////((((/**//***((((/////*,,**,,,,,,,,,,,,,**(((((((((/////&&#**..........................
// ........................@@%(((((((//**///**////////////***//,,,,,,,,,,,,/(((((((((//((///**#@@..........................
// ........................@@%/////////////*///(//////((**,,,,,,,,,,,,,,,,,**/(((((((//(((**//(%%##*.......................
// ........................@@%/////////**//////////(((//*****//,,,,,,,,,,,,//((((////((////////**@@/.......................

contract AIMoonRunners is Ownable, ERC721A, ERC2981 {
    error ErrorPreparedAlready();
    error ErrorNotRolling();
    error ErrorRollingAlready();
    error ErrorInvalidAmount();
    error ErrorExceedMaxSupply();
    error ErrorExceedFreeSupply();
    error ErrorExceedFreeMintCap();
    error ErrorExceedPaidMintCap();
    error ErrorPaymentDeficit(uint256 actual, uint256 expected);

    address public constant CAPTAIN =
        0x556ef85398E60E053955A74365773Ae06B1a8E1c;
    uint256 public constant MINTING_PRICE = 2e15;
    uint256 public constant MAX_SUPPLY = 10000;
    uint256 public constant FREE_SUPPLY = 4000;
    uint256 public constant MAX_FREE_PER_ADDRESS = 2;
    uint256 public constant MAX_PAID_PER_ADDRESS = 5;
    uint96 public constant DEFAULT_ROYALTY = 500;

    mapping(address => uint256) public freeMintedByAddress;
    mapping(address => uint256) public paidMintedByAddress;
    bool public rolling = false;
    string public baseURI;

    constructor() ERC721A("AI Moonrunners", "AIMOONR") {
        _setDefaultRoyalty(msg.sender, DEFAULT_ROYALTY);
    }

    function mint(uint256 amount) external payable {
        if (!rolling) {
            revert ErrorNotRolling();
        }
        if (amount == 0) {
            revert ErrorInvalidAmount();
        }
        if (_totalMinted() + amount > MAX_SUPPLY) {
            revert ErrorExceedMaxSupply();
        }

        bool isFreeMint = msg.value == 0;
        if (isFreeMint) {
            uint256 freeMintedUpdated = freeMintedByAddress[msg.sender] +
                amount;
            if (freeMintedUpdated > MAX_FREE_PER_ADDRESS) {
                revert ErrorExceedFreeMintCap();
            }
            if (_totalMinted() + amount > FREE_SUPPLY) {
                revert ErrorExceedFreeSupply();
            }
            freeMintedByAddress[msg.sender] = freeMintedUpdated;
        } else {
            uint256 paidMintedUpdated = paidMintedByAddress[msg.sender] +
                amount;
            if (paidMintedUpdated > MAX_PAID_PER_ADDRESS) {
                revert ErrorExceedPaidMintCap();
            }
            uint256 expectedPayment = amount * MINTING_PRICE;
            if (msg.value < expectedPayment) {
                revert ErrorPaymentDeficit(msg.value, expectedPayment);
            }
            paidMintedByAddress[msg.sender] = paidMintedUpdated;
        }

        _safeMint(msg.sender, amount);
    }

    function prepare() external onlyOwner {
        if (_totalMinted() != 0) {
            revert ErrorPreparedAlready();
        }
        _safeMint(CAPTAIN, 1);
    }

    function enableMinting() external onlyOwner {
        if (rolling) {
            revert ErrorRollingAlready();
        }
        rolling = true;
    }

    function disableMinting() external onlyOwner {
        if (!rolling) {
            revert ErrorNotRolling();
        }
        rolling = false;
    }

    function setBaseURI(string memory newBaseURI) external onlyOwner {
        baseURI = newBaseURI;
    }

    function withdraw() external onlyOwner {
        uint256 balance = address(this).balance;
        if (balance > 0) {
            payable(msg.sender).transfer(balance);
        }
    }

    function totalMinted() external view returns (uint256) {
        return _totalMinted();
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(ERC721A, ERC2981)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    function _baseURI() internal view override returns (string memory) {
        return baseURI;
    }
}
