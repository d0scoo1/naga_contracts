// SPDX-License-Identifier: MIT

// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNNNNNNNNNNNNNNNNNNNNNNNNNNWMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl'''''''''''''''''''''''''''lXMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; .:lllllllllc. .:lllllllc. ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMN: ,KMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMWklxNMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNklkNMMMMMMMMMMMMMMMMMMMMMWklkNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNWMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOdl:'cXMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkdl;'.  .';xNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0kdoc;.. ..,:lxOKNMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xoc,..  ..;cok0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd,'...':ldk0KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; 'ldkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:,....,:lxkOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxl:,.   .';ldkKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOkxoc,.. ..;cok0XWMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0koc,.. ..,dNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0koc;lXMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkdOKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc  .':ok0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX0xl:'. ..;clxOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKx'  .....,cdkKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,xO0xo:'...':ox0NWMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMWKOdl;'.',;xNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMMMMMN0xo; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMWX0xl:'...':xNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN: 'dkkoc,.  .,cokKNMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo.  .  ..;ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKko:,.  .':cox0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:  .,cdOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMWWWWNKOkkkOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMWNNWWX0kxxxxxokXWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMNXNWWN0xxOKXXXNWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMWWXXWWNNXXXNXXNWWWWWWWWWWWWWWWWWWWWWWNNXNWWMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMWNXXXKXXXXNNNNNNNXKXNNNWWWWWWWWWWWWWWWWWWWWNXXXWMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMWWWNNK0OO0000KKKXXXNNNNXKXNWWMMMWNNNWNNNWWWWWWWWWWWNNNWMMMMMMMMMMMMMM
// WWWWWWWWWWWWNNNXK0OkkkkkkO000KKKKKKKXK0KXXNNKKKKKXWX0XWWWWWWWWNNNNNNNNWMMMMMMMMMMMM
// WWWWWWWWNNNNNXXX0kxxxkOOOOOOO000K0000kkOOOOOxxOkkkOkddO000KXNNNNXXXXNNNWWMMMMMMMMMM
// WMMWWWWWNNNXXXXKkdddxkO0000000OOO0KXK0kkxxxkkkOkdl:;,;:loodkO0KKKKXXXXNXNWMMMMMMMMM
// WWWWWWNNXKKKKK0kooodxO00KKKKXNXOdONMMNKOxddxkO0Oxl;,,,,;:clddxkO0000KKXXKXWMMMMMMMM
// KKKK0OO00OOOkkdcclloxk0KXNNXXXNNOx0WMWNXK0OkOKXXKkl;;:::clloddxxkkkkO00KKKXMMMMMMMM
// kkkkkxxxxxddol:;:c::cldk0NWWX0O0NKxkNWNWNKkldKWWWNXKOkxxddooooooodxkkOOOOO0NMMMMMMM
// lllllllcc::;,'.',,,''',:ldkOOxlcdOkldO00OOl''o0XNNNWWNKOxocc::cllooodxkkkkkXMMMMMMM
// ;;,,,,,''................'',,,...,:,':lc;;;,'',:codddol:;;,,;;::::ccclodddx0WMMMMMM
// '.....................................''....................',,;;;;;;;:cclo0WMMMMMM
// ................................................................'''''..,;:oXMMMMMMM
// .........................................................................;OWMMMMMMM
// .........................................................................oNMMMMMMMM
// ........................................................................lXMMMMMMMMM
// ..........''',,'......................................................'dNMMMMMMMMMM
// lldddddoooll:;'.....................................................'l0WMMMMMMMMMMM
// MMMMMMMMMMMMWXKOxol:,'......,;,''.................................,cOWMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMWNKOdc;'.....''..............................',:dXMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMWKx;.................'''''..........',,;:ccdXMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMM0:.............',,,,,,'''...'',;cok00OkkkONMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMKl'.............;lllllloodxkO0KXWMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMWKkoc,.......:xNWWWWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0kkOOOKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx:::::::::::::::::::::::::::dNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .,;,;;,,;;;;;;;;;;,;;,;,. ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;KWWWWWWWWWWWWWWWWWWWWWX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ;XMMMMMMMMMMMMMMMMMMMMMX; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMN: '0MMMMMMMMMMMMMMMMMMMMM0' ;XMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd  oWMMMMMMMMMMMMMMMMMMMWo  oWMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX: .dNMMMMMMMMMMMMMMMMMNd. :XMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:  ;xXWMMMMMMMMMMMWXx;  cKMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNk;. .;lddxkOOkxdl;. .;kNMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0o:'.         .':d0WMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNX0OOkkkkO0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMXdcokKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo.. .':lx0XWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0xo:'.  .';ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0, .',.. .,cokKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKN0koc,...':lx0XWMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMWXOxl:,,,'oNMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMMMMMMWNKOxo; ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; ,kKMMWXOdl;'...':oOWMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; .coo:,.  .,cdkKNMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNKOd:.    .';lx0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWOl:'.  .,codkKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;..;ldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXXK00KXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOoc,.........,:oONMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l'  .,:clooool:,.  .l0WMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl. .lkXWMMMMMMMMMWXkl' .lXMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK; .oXMMMMMMMMMMMMMMMMMXo. ,KMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNc .kWMMMMMMMMMMMMMMMMMMMWk. :XMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. lWMMMMMMMMMMMMMMMMMMMMMWo .kMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMd .xMMMMMMMMMMMMMMMMMMMMMMMx. dMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMk. oWMMMMMMMMMMMMMMMMMMMMMMd .xMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMX; '0MMMMMMMMMMMMMMMMMMMMM0, ,KMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO. 'kWMMMMMMMMMMMMMMMMMWO, .kMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0; .;xXWMMMMMMMMMMMWXk:. ,OWMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx;. .;ldxxOOOOkdl;.  ,xNMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o:'.         .':oONMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNK0Okxxxxk0KNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM

pragma solidity ^0.8.0;

import "./ERC721EnumerableDelegable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/interfaces/IERC2981.sol";
import "./BasisPoints.sol";
import "./IERC721Dispatcher.sol";

interface IEVADQ {
  function mint(address _owner, uint256 _tokenId) external;
}

/**
 * @title EVADAO
 * @dev EVADAO ERC721Delegable NFT contract.
 * @author 0xAnimist (kanon.art) for EVADAO
 */
contract EVADAO is ERC721EnumerableDelegable, IERC2981, Ownable {

  IEVADQ private evaDQ;

  struct Artwork {
    address[] artists;
    string tokenUri;
    string gatedUri;
    bool gatedUriLocked;
  }

  mapping(uint256 => Artwork) private _artworks;

  struct RoyaltyInfo {
    address receiver;
    uint256 royaltyInBp;
  }

  mapping(uint256 => RoyaltyInfo) private _royaltyInfos;

  bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;

  struct Artist {
    address wallet;
    uint256 mintStartWindow;
    uint256 mintEndWindow;
  }

  mapping(uint256 => Artist) private _artists;

  mapping(address => uint256) private _artistIndexByWallet;

  uint256 public artistsAdded = 0;

  uint256 public artistsRemoved = 0;

  modifier onlyArtistDuringWindow() {
    (address wallet, uint256 mintStartWindow, uint256 mintEndWindow) = getArtistInfo(_msgSender());

    require(wallet != address(0), "EVADAO: not an artist");
    require(mintStartWindow <= block.timestamp, "EVADAO: window not yet open");
    require(mintEndWindow >= block.timestamp, "EVADAO: window has expired");

    _;
  }

  modifier onlyGated(uint256 _tokenId) {
    require(_exists(_tokenId), "EVADAO: token does not exist");
    bool eyesOnly = _msgSender() == ownerOf(_tokenId) || _msgSender() == owner() || _isArtistOfTokenId(_msgSender(), _tokenId);
    require(eyesOnly, "EVADAO: secret");
    _;
  }

  constructor(address _evaDQContract) ERC721("EVADAO", "EVA") Ownable() {
    evaDQ = IEVADQ(_evaDQContract);
  }

  /**
   * @dev See {IERC165-supportsInterface}.
   */
  function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721EnumerableDelegable) returns (bool) {
      return interfaceId == type(ERC721EnumerableDelegable).interfaceId || interfaceId == _INTERFACE_ID_ERC2981 || super.supportsInterface(interfaceId);
  }

  function getArtistsByTokenId(uint256 _tokenId) external view returns (address[] memory artists) {
    require(_exists(_tokenId), "EVADAO: token does not exist");
    return _artworks[_tokenId].artists;
  }

  function tokenURI(uint256 _tokenId) public view override returns (string memory tokenUri) {
    require(_exists(_tokenId), "EVADAO: token does not exist");
    return _artworks[_tokenId].tokenUri;
  }

  function gatedURI(uint256 _tokenId) external view onlyGated(_tokenId) returns (string memory gatedUri) {
    return _artworks[_tokenId].gatedUri;
  }

  function getArtists() external view returns (address[] memory artists) {
    artists = new address[](artistsAdded - artistsRemoved);
    uint256 count;
    for(uint256 i = 0; i < artistsAdded; i++){
      if(_artists[i].wallet != address(0)){
        artists[count++] = _artists[i].wallet;
      }
    }
  }

  function getArtistInfo(address _wallet) public view returns (address wallet, uint256 mintStartWindow, uint256 mintEndWindow) {
    uint256 i = _artistIndexByWallet[_wallet];
    if(_artists[i].wallet == _wallet){
      return (_wallet, _artists[i].mintStartWindow, _artists[i].mintEndWindow);
    }
  }

  function addArtist(address _wallet) external onlyOwner {
    addArtistWithWindow(_wallet, 0, 0);
  }

  function addArtistWithWindow(address _wallet, uint256 _mintStartWindow, uint256 _mintEndWindow) public onlyOwner {
    (address wallet,,) = getArtistInfo(_wallet);
    require(wallet == address(0), "EVADAO: already added");

    //return to same index if re-adding an artist
    if(_artistIndexByWallet[_wallet] != 0){
      _artists[_artistIndexByWallet[_wallet]] = Artist(_wallet, _mintStartWindow, _mintEndWindow);
    }else{
      _artistIndexByWallet[_wallet] = artistsAdded;
      _artists[_artistIndexByWallet[_wallet]] = Artist(_wallet, _mintStartWindow, _mintEndWindow);
      artistsAdded++;
    }
  }

  function updateArtistMintWindow(address _wallet, uint256 _mintStartWindow, uint256 _mintEndWindow) external onlyOwner {
    (address wallet,,) = getArtistInfo(_wallet);
    require(wallet != address(0), "EVADAO: artist does not exist");
    _artists[_artistIndexByWallet[_wallet]].mintStartWindow = _mintStartWindow;
    _artists[_artistIndexByWallet[_wallet]].mintEndWindow = _mintEndWindow;
  }

  function removeArtist(address _wallet) external onlyOwner {
    (address wallet,,) = getArtistInfo(_wallet);
    require(wallet != address(0), "EVADAO: artist does not exist");
    _artists[_artistIndexByWallet[_wallet]].wallet = address(0);
    artistsRemoved++;
  }

  function mint(address[] memory _artworkArtists, address _royaltyReceiver, uint256 _royaltyInBp, string memory _tokenUri) external onlyArtistDuringWindow {
    mintWithGatedUri(_artworkArtists, _royaltyReceiver, _royaltyInBp, _tokenUri, "");
  }

  function mintWithGatedUri(address[] memory _artworkArtists, address _royaltyReceiver, uint256 _royaltyInBp, string memory _tokenUri, string memory _gatedUri) public onlyArtistDuringWindow {
    uint256 tokenId = totalSupply();
    _artworks[tokenId] = Artwork(_artworkArtists, _tokenUri, _gatedUri, false);
    _royaltyInfos[tokenId] = RoyaltyInfo(_royaltyReceiver, _royaltyInBp);
    _safeMint(_msgSender(), tokenId);

    evaDQ.mint(_msgSender(), tokenId);
  }

  function setGatedUri(string memory _gatedUri, uint256 _tokenId) external {
    require(_exists(_tokenId), "EVADAO: token does not exist");
    require(!_artworks[_tokenId].gatedUriLocked, "EVADAO: gatedUri is locked");
    require(_isArtistOfTokenId(_msgSender(), _tokenId), "EVADAO: an artist can set");
    _artworks[_tokenId].gatedUri = _gatedUri;
  }


  function lockGatedUri(uint256 _tokenId) external {
    require(_exists(_tokenId), "EVADAO: token does not exist");
    require(_msgSender() == ownerOf(_tokenId) || _isArtistOfTokenId(_msgSender(), _tokenId), "EVADAO: only owner or an artist can lock");
    _artworks[_tokenId].gatedUriLocked = true;
  }

  function _isArtistOfTokenId(address _artist, uint256 _tokenId) internal view returns (bool isArtist) {
    for(uint256 i = 0; i < _artworks[_tokenId].artists.length; i++){
      if(_artist == _artworks[_tokenId].artists[i]){
        return true;
      }
    }
  }

  /**
   * @dev See {IERC2981-royaltyInfo}.
   */
  function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address receiver, uint256 royaltyAmount) {
    receiver = _royaltyInfos[tokenId].receiver;
    royaltyAmount = BasisPoints.mulByBp(salePrice, _royaltyInfos[tokenId].royaltyInBp);
  }

  function updateRoyaltyReceiver(address _receiver, uint256 _tokenId) external {
    require(_msgSender() == _royaltyInfos[_tokenId].receiver, "EVADAO: only current receiver can change receiver");
    _royaltyInfos[_tokenId].receiver = _receiver;
  }

  /**
   * @dev Requests safeTransferFrom() of `_tokenId` token by first
   * requesting approval be set by the owner of the delegate token
   * with `_terms` terms.
   * @param _to address to transfer the token to
   * @param _tokenId token to transfer
   * @param _terms terms of the delegate approval request
   * @param _data data
   */
  function requestSafeTransferFrom (
    address _to,
    uint256 _tokenId,
    bytes memory _terms,
    bytes calldata _data)
  external virtual {
    _requestApproval(_to, _tokenId, _terms, _data);
    safeTransferFrom(ownerOf(_tokenId), _to, _tokenId, _data);
  }

  /**
   * @dev Requests approval be set for `_to` address by the owner
   * of the delegate token with `_terms` terms.
   * @param _to address to transfer the token to
   * @param _tokenId token to transfer
   * @param _terms terms of the delegate approval request
   * @param _data data
   */
  function _requestApproval(address _to, uint256 _tokenId, bytes memory _terms, bytes calldata _data) internal virtual {
    (address delegateContract, uint256 delegateToken) = getDelegateToken(_tokenId);
    address delegate = IERC721(delegateContract).ownerOf(delegateToken);
    //require(IERC165(delegate).supportsInterface(type(IERC721Dispatcher)), "RQ: not a valid dispatcher");

    IERC721Dispatcher(delegate).requestApproval(_msgSender(), _to, address(this), _tokenId, _terms, _data);
  }
}
