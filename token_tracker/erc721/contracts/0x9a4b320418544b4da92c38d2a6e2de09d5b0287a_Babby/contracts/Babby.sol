// SPDX-License-Identifier: MIT
/*
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/......(&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&**,,,,///////&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@%#(#(&&/@@@@@@*****(((/((((((#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@////*(*&@@@@@((##((#%%%#((####%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@&/(/*,,(#*@@@%*...../(/%%%%###%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@#(((#%&@@@@@/,,*(##%////(#%%%#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@(//(#&@@@@@@&(/*(%%#(((((##%&&&%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@/##%&&@@@@@@@@%%#((#%%%%&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@(#%%%&&@@@@@@@@@&%%%%%%%&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@&%%%%&&%((/*,,,//(%%%%%%&&&&%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@%%%&&&&&&&&&%##//(#%&&%&&&&&%(((((/**(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@&%%%&%&%%&%%(***(#&&&&&%#((#(((%#(///@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%(/////((########(#&#(///(@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%(/////(((((((((((#&#(////%@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#((((((((((((((((#%%&#(//(#@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#///(((((######%%%%&@%#(///&@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##(////////(###%%%&&&@&(/////@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#(//////((##((####%%&@@@#/////(@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#(////////((##%%%%&&&@@@@@#////(&@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%(#((((((((((###%&&&&&@@@@@@@#/**(%@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*###((########%%%%&&&&@@@@@@@@@&(/..#@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%,*%%%%%%%%%%%%&&&&&&&@@@@@@@@@@@@@#/*..#@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(##%%%%%%%%%%&%&&&&&&%#&%@@@@@@@@@@@@@%%%(*&@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#((%%%%%%%%%%&%&&&&&%%&&@@@@@@@@@@@@@@@@&%%%@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@((%&%%%%%%&&&&&&%##((#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(//#%&&&&&%&##((((((#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%///(#&&&&%(//////(#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@((((#%%&&%//////(##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@####%%&&%/****(#%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%&&%////(#%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%&&&%##((%%&&%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%&&&%%%&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%&&&%%%%&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%&&@%&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#((%&&@@@%&&&%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@%&&%#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@            @@@@@@@@@@ @@@@@@@             @@@@           @@@     @@@@@@@    @@@@@@@
@@@@@@@@  @@@@@    @@@@@@@@   @@@@@@@@@  @@@@@    @@@@@  @@@@@   @@@@   @@@@@@@  @@@@@@@@@
@@@@@@@@  @@@@@@   @@@@@@@@   @@@@@@@@@  @@@@@@   @@@@@  @@@@@@   @@@@   @@@@@  @@@@@@@@@@
@@@@@@@@  @@@@@@   @@@@@@@ @   @@@@@@@@  @@@@@@   @@@@@  @@@@@@   @@@@    @@@  @@@@@@@@@@@
@@@@@@@@  @@@@@   @@@@@@@@ @   @@@@@@@@  @@@@@   @@@@@@  @@@@@   @@@@@@    @@  @@@@@@@@@@@
@@@@@@@@  @@     @@@@@@@@ @@@   @@@@@@@  @@     @@@@@@@  @@     @@@@@@@@   @  @@@@@@@@@@@@
@@@@@@@@  @@@@@   @@@@@@@ @@@   @@@@@@@  @@@@@   @@@@@@  @@@@@   @@@@@@@@    @@@@@@@@@@@@@
@@@@@@@@  @@@@@@   @@@@@         @@@@@@  @@@@@@   @@@@@  @@@@@@   @@@@@@@   @@@@@@@@@@@@@@
@@@@@@@@  @@@@@@@   @@@@ @@@@@   @@@@@@  @@@@@@@   @@@@  @@@@@@@   @@@@@@   @@@@@@@@@@@@@@
@@@@@@@@  @@@@@@@   @@@  @@@@@@   @@@@@  @@@@@@@   @@@@  @@@@@@@   @@@@@@   @@@@@@@@@@@@@@
@@@@@@@@  @@@@@@    @@@  @@@@@@   @@@@@  @@@@@@    @@@@  @@@@@@    @@@@@@   @@@@@@@@@@@@@@
@@@@@@@@  @@@@@    @@@  @@@@@@@    @@@@  @@@@@    @@@@@  @@@@@    @@@@@@@   @@@@@@@@@@@@@@
@@@@@@            @@      @@@@      @            @@@@            @@@@@@       @@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
pragma solidity ^0.8.4;

import "erc721a/contracts/ERC721A.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Babby is ERC721A, Ownable {
    // =================================Global Vars================================= //
    uint256 public constant MAX_SUPPLY = 6666; // Total number of mintable NFTs
    uint256 public constant MAX_MINTS_PER_TX = 10; // Max public mints per transaction
    uint256 public constant MAX_NFT_PER_WALLET = 100; // Max public NFTs per wallet
    uint256 public MINT_PRICE = 0.09 ether; // Mint price

    string private baseURI;

    address private deployer;
    address payable public dev = payable(0x19027E0221E25dfFd9F59D8586ea46811FEe4fbe); // dev address

    bool public livePublicSale = false;

    // =================================Constructor================================= //
    constructor() ERC721A("Babby", "BABBY") {
        deployer == msg.sender;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    // =================================Modifiers================================= //
    modifier duringPublicSale() {
        require(livePublicSale, "Public sale is not live!");
        _;
    }

    // anti-bot
    modifier callerIsUser() {
        require(tx.origin == msg.sender, "Cannot be called by a contract");
        _;
    }

    modifier onlyTeam() {
        require(msg.sender == deployer ||
                msg.sender == dev ||
                msg.sender == owner(),
            "Not authorized!"
        );
        _;
    }

    // =================================Owner Functions================================= //
    function setBaseUri(string memory newURI) external onlyTeam {
        baseURI = newURI;
    }

    function setPrice(uint256 newPrice) external onlyOwner() {
        MINT_PRICE = newPrice;
    }

    function setDevAddress(address payable newAddress) public {
        require(msg.sender == dev, "You are not the dev");
        dev = newAddress;
    }

    function withdraw() external onlyTeam {
        require(address(this).balance > 0, "Balance must be > 0!");

        uint256 currentBalance = address(this).balance;
        payable(dev).transfer(currentBalance / 4);
        payable(owner()).transfer(address(this).balance); //send remaining balance to owner
    }

    function ownerMint(address to, uint256  _quantity) external onlyOwner {
        require(totalSupply() + _quantity <= MAX_SUPPLY, "Exceeds max supply!");
        _safeMint(to, _quantity);
    }

    function togglePublicSale() public onlyTeam {
        livePublicSale = !livePublicSale;
    }

    // =================================Public Functions================================= //
    function birthBabby(uint256 _quantity) payable external duringPublicSale callerIsUser {
        require(_quantity <= MAX_MINTS_PER_TX, "Too many mints per tx");
        require(totalSupply() + _quantity <= MAX_SUPPLY, "Exceeds max supply!");
        require(msg.value >= MINT_PRICE * _quantity, "Wrong amount of ether sent!");
        require(_numberMinted(msg.sender) + _quantity <= MAX_NFT_PER_WALLET, "Address cannot mint more than 100 NFTs!");

        _safeMint(msg.sender, _quantity);
    }

    function tokensOfOwner(address address_) public view returns(uint256[] memory) {
        uint256 _tokenCount = balanceOf(address_);
        uint256[] memory _tokenIds = new uint256[] (_tokenCount);
        uint256 _index;
        uint256 _loopThrough = totalSupply();
        for(uint256 i = 0; i < _loopThrough; i++) {
            bool _exists = _exists(i);
            if (_exists) {
                if (ownerOf(i) == address_) {_tokenIds[_index] = i; _index++;}
                else if (!_exists && _tokenIds[_tokenCount - 1] == 0) {_loopThrough++;}
            }
        }
        return _tokenIds;
    }

    // =================================Recieve Payments================================= //
    receive () external payable {}
}