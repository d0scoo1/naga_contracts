// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "gwei-slim-nft-contracts/contracts/base/ERC721Base.sol";
import {ERC721Delegated} from "gwei-slim-nft-contracts/contracts/base/ERC721Delegated.sol";


//@creator: Timekeeper
//@author: secondstate
//
//
// &%&@###########@@@&%0&&@#############@@@@@############@@@@@@@###############################@@#@@@@@@##########################
// @%%@@#########@@#@&%0%@@#############@@&@###########@@@@@@@#@#################################@@@@##@@@@@@@####################
// @&%&@#########@##@@%0%@@#############@@&@@########@@@@@@@@@@#####################################@@@####@@&&&@@@#############@@
// #@%%@@#######@####@%%%&@#############@@%@@######@@@@@@@@@@@@@@@####@@@@#####@@#########@@@@################@@&&&&&@@###########
// #@@%&@@#####@#####@&&0&@@############@@%&@###########@@@@@@@@@@@@@###@@@@@@@@@@@@########@@@@@@@@#############@@&%%%&@@########
// ##@&%&@#####@####@@@&%%@@############@@&&@@@@@###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##############@@@@@@@@##########@@@@&%0%&@@#####
// ###@%%&@###@#####@#@@&%&@############@@&%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@##############@@@@@###@@####@@@@&%%%&@@###
// ###@@%&@@##@####@###@@%&@@##@#####@###@@%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@##############@@&@@@@########@@&%%&@@#
// ####@&%&@#@#####@####@&%@@@@@####@@###@&%&@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#############@@&&@@@#########@&&%&@
// #####@&%&@@####@@####@@&&@@@####@@####@&&%&@@@@@@@@@@&&@@@@@@@@@@@@@@&&&&&@@@@@@@@@@@@##@@@@@@@#############@@&@@##########@@&&
// ######@&%&@####@@####@#@&@&@####@####@@@@%&@@@@@@@&&&@@@@@&@&&&&&&&&&&&&&&@@@@@@@@@@@########@@@@@#############@&&@#########@#@
// #######@%%&@###@@#######@&&@########@@@@@&&&&@@@@&&&&&@@@&&&&&&&&&&&&&&&&&@@@&&&&&@@@@@########@@@&@#############@&@###########
// ########@%%@@##@@########@&########@@@@@@@&&@@&@&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@&&&&@@@@@####@###@@&@#############@@@#########
// #########@&&@##@#########@@@########@@@@@@&@@&&&&&&&&&&&&&&&%%%%%%%%%%%%%&&@@@@@@@@@&%&&@@@@###@#####@@@#############@@@#######
// ##########@&&@############@#########@@@@@@@@@&&&&&&&&&&&%%%00????0000000%%%%&@@@@@@@@&%%%&@&@###@######@@@#############@@######
// ###########@&&@###########@#########@@@@@@@@@@&%&&&&&&%%%00??=====??00%%00?00%&&@&@@@@&&&%%&&@@@#@#######@@@#############@@####
// #############@&@@#####@##@@##@@@#@@@@@@@@@@@&&&&&&&&%%%00?==      ==??00%%00?0%&&&&&&@@&@&&%&&@@@#########@@@#############@@@##
// @#############@&&@####@##@@@#@@@@@@@@@@@@@@@@@&&&&&&%%%0??=        ==?00%%%%0??%%&&&&@@@@@@&&%&@@###########@&@#############@@#
// @@@############@&&@#######@@####@@@##@@@@@@@@@@&&&&&&%%0??=        =??0%%%&&&%??0%&@@@@@@@@@@&%&@@###########@@@#############@@
// #@@@#############@&@@######@#####@@######@@@@@@@&&&&&&%%0??==    ==??0%%%%&&&&%0?0%&&@@@@@@@@@@%&@@###########@@@##############
// ##@@@#############@&&@@############@@@####@@@@@@@&&&%%&%%000???????0%%%%%%&&@&%%0?%&&@@@@@@###@@%&@@############@&@############
// #####@@#############@&&@@###########@@@@@@@@@@@@@@&&&&%%%%%000000%%%%%%%%&@@@&%&&%0%&@@@@&@####@@%&@@############@&@###########
// #######@@############@@%%@@##########@@@@@@@@@@@@@@@&&&&&&&&%%%&&&&&&&%%&&@@&%&&&&%%&@@@@&@###@#@@%%@#############@&@##########
// ########@@@####@#######@@%%&@@#@#######@@@@@@@@@@@@@@@@&&&&&&&&&&&&&&&&&@@@&%&@@@@&%@@@@&@####@##@@%&@#############@&@#########
// @#########@&@@##@########@@%%%&@@@##########@@@@@@@@@@@@@@&@@@@@&&&&@@@@&&&%&@@@@&&@@@@@@@########@@%@##############@&@########
// @@#########@@&&@@@#########@&&%0%&@@#########@@@@@@@@@@@@@&&&&@@@@@@@@&&&&&@@@@@&&@@@@@&@####@#####@@&@##############@&########
// &&&@#########@@&&&@@#########@@@&%%%&@@#########@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@&@####@@####@#@&&###############@&#######
// @&%&@#########@@@&&&&@##########@@@&&%%&@@@@@@@@@@#@@@####@@@@@@@@@@@@@@@@@@@@@@@@@@@&@####@@########@&@###############@@######
// #@@&%&@@###########@&&&@@#############@@&&&&&&@@@@@@@########@@@@@@@@@##@@@@@@####@@&@##@#@@#####@####@&################&@#####
// ####@&%%&@@###########@&&&&@@#@@#########@@@@@&&@@@@@####################@@@#####@&&@#####@#####@#####@&@##############@@&@####
// ######@@&%%&@@###########@&&&&@@@@@################@@@@@##############@@########@&@############@#######@&##############@@@@####
// #########@&&%&&@############@@@@@@@@@@########################################@@@#############@#@#######@@#############@##@@###
// ############@@&%&&@@###############@@@@@@###################################@@##########################@&@###########@###@@@##
// ################@&&&&@@#################################################@@@@#######@#####################&@################&@##



contract SouvenirOne is ERC721Delegated {
    uint256 tokenIndex;
    constructor(
        address baseFactory,
        uint16 royaltyBps
    ) 
     ERC721Delegated(
            baseFactory,
            "Souvenir One",
            "S1",
            ConfigSettings({
                royaltyBps: royaltyBps,
                uriBase: "https://arweave.net/Op_VSXFWGQ4WLGuwYIhxCkwnpFnHC7k8emhWyQB0y8Y#",
                uriExtension: "",
                hasTransferHook: true
            })
        )
{}  


    ////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////// Public Functions //////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////


    function RedeemSouvenir(uint256 tokenId) public {
        _burn(tokenId);
    }

    ////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////// Overrides /////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////

       function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
   ) external view {
        require(isOwnerOrZero(msg.sender,from) || _isApprovedOrOwner(msg.sender, tokenId), "Locked / Unauthorized");
    }

    ////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////// Admin Functions ///////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////


    function giftSouvenir(address[] calldata _addresses) external onlyOwner {
        for (uint256 i = 0; i < _addresses.length; ++i) {
            _mint(_addresses[i], ++tokenIndex);
        }
    }

    function setSticker(string memory newUri, string memory newExtension) external onlyOwner {
        _setBaseURI(newUri, newExtension);
   }

    function TimeWarp(uint256[] calldata _tokens) external onlyOwner {
        for (uint256 i = 0; i < _tokens.length; ++i) {
            _burn(_tokens[i]);
        }
   }


    ////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////// Checks ////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////


    function isOwnerOrZero(address _sender,address _addr) internal view returns (bool) {
        return _sender == _owner() || _addr == address(0);
    }

}



