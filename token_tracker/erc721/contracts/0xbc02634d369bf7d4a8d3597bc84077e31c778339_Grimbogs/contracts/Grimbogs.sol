//SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

//                                                                        '^^^^^^^^^.
//                                                                   t&&&&%$$$$$$$$$%&&&v,
//                                                              {k#$$$$$$Z///////////w$$$$$Wak]
//                                                          -0k$$$dnn|???????????????????/nnk$$$b+
//                                                       <zm$$hYj?????????????????????????????ra$$$Zi
//                                                     lL$$*0u???????????????????????????????????c#$$JI
//                                                   :z$$WX????????????????????????????????????????U&$$u,
//                                                  {$$8L????????????????????????????????????????????0%$t`
//                                                .)$$BZ??????????????????????????????????????????????w@$$]
//                                                }$$p[????????????????????????????????????????????????[b$%-
//                                               }$$b)??????????????????????????????????????????????????)h$o~
//                                              [$$p[????????????????????????????????????????????????????fo$pi
//                                             [$$d{??????????????????????????????????????????????????????n#$t^
//                                            IJ$Mc????????????????????????????????????????????????????????b$$-
//                                            ]$$p????????????????????????????????????/nnnnnn/[?????????????b$Ol
//                                           ]$$p??????????????????????????????1/m@$$$$$$$$$$$$$$$J/}???????b$$_
//                                           }$@w????????????????????????????[0$$$%&&|        Y&&B$$$c]??????b$$_
//                                          ?@$d????????????????????????????JB$$x^.              '^0$$u??????b$$_
//                                          ]$$p????????????????????????????L$$M)                uM@$U}??????b$$_
//                                          ]$#v?????????????????????????????|p$$$$h0000000000#$$$$0n1????????k$@+
//                                         ?$$d?????????????????????????????????fYYk$$$$$$$$$oQYY|????????????k$$+
//                                         ?$$d????????????????/YYYYYYYYYYYYYt???????????????????????xYYYYu{??k$$+
//                                         ?$$d?????????)nnO$$$$$$$$$$$$$$$$$$$$qu/[?????????/nca$$$$$$$$$$$$$$$$r"
//                                         ?$$d??????}va$$$WkkQ_             /kkW$$$U?????)p$$$@*kkk-      Xkk8$$$+
//                                         ?$@p?????{C$B&X                        c$$Y???Z$$%1               `w$$$+
//                                        >d$d]?????v$$J                         nB$$Y???Z$$(             _p&B$$$$+
//                                        -$$d??????}J$$&kx                  /kM$$$0{????)p$$$$*kkkkkk8$$$$$$X/a$$+
//                                        -$$d????????)0$$$$$$*000000000a$$$$$$$wn(????????|nnn0W$$$%Lnnnnr}???]h$L;
//                                        -$$d????????????|YYYOM$$$$$$MOYYYYYt??????????????????????????????????k$$~
//                                        -$$d??????????????????????????????????????????????????????????????????k$$~
//                                        -$$d?????????????????????????????????????????????????/k@u?????????????k$$~
//                                       `/$h1?????????????????????????????????L@0{???????????)p@@u?????????????k$$~
//                                       -$$d??????????????????????????????????L@@@J[????????[w@@%n?????????????k$$~
//                                       -$$d??????????????????????????????????[0@@@%z?????08B@@z]??????????????k$$~
//                                       -$$d????????????????????????????????????1m@@@@@@@@@@@J|}???????????????k$$~
//                                      ip$h(???????????????????????????????????????/nnnnnnnn)??????????????????k$$~
//                                      -$$b????????????????????????????????????????????????????????????????????k$$~
//                                      -$$b????????????????????????????????????????????????????????????????????k$$~
//                                      -$8L????????????????????????????????????????????????????????????????????k$$~
//                                     _$$b?????????????????????????????????????????????????????????????????????k$$~
//                                     _$$b?????????????????????????????????????????????????????????????????????k$$~
//                                     _$$b?????????????????????????????????????????????????????????????????????k$$~
//                                     _$*j?????????????????????????????????????????????????????????????????????k$$~
//                                    _$$b??????????????????????????????????????????????????????????????????????k$$~
//                                    _$$b??????????????????????????????????????????????????????????????????????k$$~
//                                    _$$b??????????????????????????????????????????????????????????????????????k$$~
//                                   !p$k???????????????????????????????????????????????????????????????????????k$$~
//                                   +$$k???????????????????????????????????????????????????????????????????????{a$1'
//                                  .]$@d????????????????????????????????????????????????????????????????????????h$$~
//                                  +$$k?????????????????????????????????????????????????????????????????????????h$$~
//                                 IZ$@p?????????????????????????????????????????????????????????????????????????]h$$o!
//                                 ~$$k????????????????????????????????????????????????????????????????????????????j#$$wI
//                                ~$$Mu??????????????????????????????????????????????????????????????????????????????vW$$L,
//                               <$$WY?????????????????????????????????????????????????????????????????????????????????U&$${'
//                             ^j$$8L???????????1Q$q??????????????????????????????????????????????????????p@$C{??????????o$$t`
//                           '{$$Bm????????????n$$8Q???????????????????????????????????????????????????????O%$$r??????????qB$$[.
//                          +$$@k?????????????n$$@m?????????????????????????????????????????????????????????p@$$r???????????a@$o;
//                        l8$$o[?????????????x%$$p???????????????????????????????????????????????????????????[k$Bj???????????#$$8;
//                     ;ka$$#(??????????????jM$$p?????????????????????????????????????????????????????????????(a$$j???????????|M$$a,
//                   ,m$$8Qr????????????????x$$p???????????????????????????????????????????????????????????????f*$$f????????????r&$8:
//                ^zJ$$&c??????????????????x$$d??????????????????????????????????????????????????????????????????h$$f????????????c8$$U^
//              `x$$BaJ???????????????????r$$d????????????????????????????????????????????????????????????????????h$$j]????????????C%$$x'
//            .)$$BZ?????????????????????rB$&J?????????????????????????????????????????????????????????????????????h$$j]?????????????W$$).
//          ._$$@b??????????????????????[X$%O???????????????????????????????????????????????????????????????????????h$$t??????????????b@$$_
//        .<$$@#????????????????????????r$$b?????????????????????????????????????????????????????????????????????????a$$t???????????????#@$$;
//       >%$$8}????????????????????????j%$k[?????????????????????????????????????????????????????????????????????????[o$%/???????????????}8$$8`
//     'h$$%/?????????????????????????tM$$b???????????????????????????????????????????????????????????????????????????(#$#(????????????????/%$$'
//   .O$$Bx???????????????????????????j$$b?????????????????????????????????????????????????????????????????????????????X&$k)????????????????xB$$'
//  .$$BX????????????????????????????j$$h}??????????????????????????????????????????????????????????????????????????????o$$w1?????????????????%$$'

// Contract by: @backseats_eth

// Audited by: @SuperShyGuy0

import "erc721a/contracts/ERC721A.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/common/ERC2981.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

contract Grimbogs is ERC721A, ERC2981, Ownable {
  using ECDSA for bytes32;

  // 10,000 Grimbogs that need a home
  uint256 public constant MAX_SUPPLY = 10_000;
  uint256 public constant TEAM_RESERVE = 50;

  uint256 public price = 0.125 ether;

  // The IPFS URI where our data can be found
  string public _baseTokenURI;

  // The Merkle root for our allow list
  bytes32 public merkleRoot;

  // Tracking if an address minted during the claim period
  mapping(address => bool) public claimMinted;

  // Tracking nonces used to provent botting
  mapping(string => bool) public usedNonces;

  // Tracks which token Ids from the below collections have been used to cliam Grimbogs. These can be used before you buy one of these collections off of secondary
  mapping(uint256 => bool) public warpyIdsUsed;
  mapping(uint256 => bool) public fiveFiveFiveIdsUsed;
  mapping(uint256 => bool) public euphoricWorldIdsUsed;

  // The address of the private key that creates nonces and signs signatures for mint
  address public systemAddress;

  // The contract or wallet this contract withdraws to
  address public withdrawAddress;

  // A boolean representing whether the team has reserved their allotment
  bool public teamReserveUsed;

  // An enum and associated variable tracking the state of the mint
  enum MintState {
    CLOSED,
    PRESALE,
    OPEN
  }

  MintState public _mintState;

  // Constructor

  constructor() ERC721A("Grimbogs", "GRIMBOG") {}

  // Mint Functions

  /**
  * @notice Presale mint. Free to claim. Requires you to either be on the allow list, be a holder of EuphoricWorld, 555, or Warpy collections, or both.
  */
  function claimYourGrimbog(
    bytes32[] calldata _merkleProof,
    string memory _nonce,
    bytes calldata _signature,
    uint256[] calldata _warpyIds,
    uint256[] calldata _555Ids,
    uint256[] calldata _euphoricWorldIds
  ) external {
    require(_mintState == MintState.PRESALE, "Presale closed");
    require(msg.sender == tx.origin, "Real users only");
    require(!usedNonces[_nonce], "Nonce already used");
    require(isValidSignature(
      keccak256(
        abi.encodePacked(
          msg.sender,
          _nonce,
          _warpyIds,
          _555Ids,
          _euphoricWorldIds
        )
      ), _signature
    ), "Invalid signature");

    // Begin the count at 0. Minter could be on the allow list and entitled to 1 or a collector from the other collections and entitled to 1 Grimbog
    // per piece they own
    uint256 count = 0;

    // If your address is in the Merkle tree and you haven't minted, increase count to 1.
    bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
    if (MerkleProof.verify(_merkleProof, merkleRoot, leaf) && !claimMinted[msg.sender]) {
      unchecked { ++count; }
      claimMinted[msg.sender] = true;
    }

    // Check that the token IDs you're sending into the contract haven't been used to claim already
    // The mint site will validate that your wallet owns these pieces before sending the IDs in the various arrays this function takes
    uint256 warpyLength = _warpyIds.length;
    for(uint256 i; i < warpyLength;) {
      if (warpyIdsUsed[_warpyIds[i]] == false) {
        unchecked { ++count; }
        warpyIdsUsed[_warpyIds[i]] = true;
      }
      unchecked { ++i; }
    }

    uint256 fiveFiveFiveLength = _555Ids.length;
    for(uint256 i; i < fiveFiveFiveLength;) {
      if (fiveFiveFiveIdsUsed[_555Ids[i]] == false) {
        unchecked { ++count; }
        fiveFiveFiveIdsUsed[_555Ids[i]] = true;
      }
      unchecked { ++i; }
    }

    uint256 euphoricWorldLength = _euphoricWorldIds.length;
    for(uint256 i; i < euphoricWorldLength;) {
      if (euphoricWorldIdsUsed[_euphoricWorldIds[i]] == false) {
        unchecked { ++count; }
        euphoricWorldIdsUsed[_euphoricWorldIds[i]] = true;
      }
      unchecked { ++i; }
    }

    // Ensure that the current supply + what you can mint will not exceed the 10,000 piece collection
    require(totalSupply() + count <= MAX_SUPPLY, "Exceeds max supply");

    // Ensure nonce isn't re-used
    usedNonces[_nonce] = true;

    require(count > 0, "Can't mint 0");

    // Protect the Grimbogs!
    _mint(msg.sender, count);
  }

  /**
  * @notice Public sale functionality. Can only be invoked from bedbugsnft.com since it requires private key signing
  */
  function mintYourGrimbog(string calldata _nonce, uint _amount, bytes calldata _signature) external payable {
    require(_mintState == MintState.OPEN, "Mint closed");
    require(msg.sender == tx.origin, "Real users only");
    require(_amount < 6, "Mint 1-5");
    require(totalSupply() + _amount <= MAX_SUPPLY, 'Exceeds max supply');
    require(price * _amount == msg.value, "Wrong ETH amount");
    require(!usedNonces[_nonce], "Nonce already used");
    require(isValidSignature(keccak256(abi.encodePacked(msg.sender, _amount, _nonce)), _signature), "Invalid signature");

    usedNonces[_nonce] = true;

    _mint(msg.sender, _amount);
  }

  /**
  * @notice Allows the team to mint directly to addresses for marketing or promotional purposes
  */
  function promoMint(address _to, uint256 _amount) external onlyOwner {
    require(totalSupply() + _amount <= MAX_SUPPLY, 'Exceeds max supply');
    _mint(_to, _amount);
  }

  /**
  * @notice Reserves 50 Grimbogs for the team for marketing and promotional purposes
  */
  function teamReserve() external onlyOwner {
    require(!teamReserveUsed, "Already reserved");
    require(totalSupply() + TEAM_RESERVE <= MAX_SUPPLY, 'Exceeds max supply');

    teamReserveUsed = true;
    _mint(msg.sender, TEAM_RESERVE);
  }

  // Setters

  /**
  * @notice Sets the system address that corresponds to the private key signing on the server.
  * @dev Ensure that you update the private key on the server between testnet and mainnet deploys and that the address used here reflects the correct private key
  */
  function setSystemAddress(address _systemAddress) external onlyOwner {
    systemAddress = _systemAddress;
  }

  /**
  * @notice Sets the withdraw address of the contract for fund withdrawal
  */
  function setWithdrawAddress(address _address) external onlyOwner {
    withdrawAddress = _address;
  }

  /**
  * @notice Sets the Merkle tree root for the presale/allowlist functionality
  */
  function setMerkleRoot(bytes32 _root) external onlyOwner {
    merkleRoot = _root;
  }

  /**
  @notice Sets the contract-wide royalty info
  */
  function setRoyaltyInfo(address receiver, uint96 feeBasisPoints) external onlyOwner {
    _setDefaultRoyalty(receiver, feeBasisPoints);
  }

  /**
  @notice Sets the baseURI for the collection
  */
  function setBaseURI(string calldata _baseURI) external onlyOwner {
    _baseTokenURI = _baseURI;
  }

  /**
  @notice Sets the mint state for the contract
  */
  function setMintState(uint256 status) external onlyOwner {
    require(status <= uint256(MintState.OPEN), "Bad status");

    _mintState = MintState(status);
  }

  /**
  * @notice Important: Set new price in wei (i.e. 50000000000000000 for 0.05 ETH)
  */
  function setPrice(uint _newPrice) external onlyOwner {
    price = _newPrice;
  }

  // View Functions

  /**
  * @notice Returns the starting token ID.
  */
  function _startTokenId() internal view virtual override returns (uint256) {
    return 1;
  }

  /**
  @notice Returns the baseURI of the collection
  */
  function _baseURI() internal view virtual override returns (string memory) {
    return _baseTokenURI;
  }

  /**
  * @notice Boilerplate to support ERC721A and ERC2981
  */
  function supportsInterface(bytes4 interfaceId) public view override (ERC721A, ERC2981) returns (bool) {
    return super.supportsInterface(interfaceId);
  }

  /**
  * @notice Checks if the private key that singed the nonce matches the system address of the contract
  */
  function isValidSignature(bytes32 hash, bytes calldata signature) internal view returns (bool) {
    require(systemAddress != address(0), "Missing system address");
    bytes32 signedHash = hash.toEthSignedMessageHash();
    return signedHash.recover(signature) == systemAddress;
  }

  // Withdraw

  function withdrawFunds() external onlyOwner {
    require(withdrawAddress != address(0), "Missing withdraw address");
    uint balance = address(this).balance;
    (bool sent, ) = withdrawAddress.call{value: balance}("");
    require(sent, "Withdraw failed");
  }

}
