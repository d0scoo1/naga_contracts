{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/perpetualManager/PerpetualManagerFront.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PerpetualManager.sol\\\";\\n\\n/// @title PerpetualManagerFront\\n/// @author Angle Core Team\\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents perpetuals\\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\\n/// @dev This file contains the functions of the `PerpetualManager` that can be directly interacted\\n/// with by external agents. These functions are the ones that need to be called to open, modify or close\\n/// perpetuals\\n/// @dev `PerpetualManager` naturally handles staking, the code allowing HAs to stake has been inspired from\\n/// https://github.com/SetProtocol/index-coop-contracts/blob/master/contracts/staking/StakingRewardsV2.sol\\n/// @dev Perpetuals at Angle protocol are treated as NFTs, this contract handles the logic for that\\ncontract PerpetualManagerFront is PerpetualManager, IPerpetualManagerFront {\\n    using SafeERC20 for IERC20;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    // =============================== Deployer ====================================\\n\\n    /// @notice Initializes the `PerpetualManager` contract\\n    /// @param poolManager_ Reference to the `PoolManager` contract handling the collateral associated to the `PerpetualManager`\\n    /// @param rewardToken_ Reference to the `rewardtoken` that can be distributed to HAs as they have open positions\\n    /// @dev The reward token is most likely going to be the ANGLE token\\n    /// @dev Since this contract is upgradeable, this function is an `initialize` and not a `constructor`\\n    /// @dev Zero checks are only performed on addresses for which no external calls are made, in this case just\\n    /// the `rewardToken_` is checked\\n    /// @dev After initializing this contract, all the fee parameters should be initialized by governance using\\n    /// the setters in this contract\\n    function initialize(IPoolManager poolManager_, IERC20 rewardToken_)\\n        external\\n        initializer\\n        zeroCheck(address(rewardToken_))\\n    {\\n        // Initializing contracts\\n        __Pausable_init();\\n        __AccessControl_init();\\n\\n        // Creating references\\n        poolManager = poolManager_;\\n        _token = IERC20(poolManager_.token());\\n        _stableMaster = IStableMaster(poolManager_.stableMaster());\\n        rewardToken = rewardToken_;\\n        _collatBase = 10**(IERC20Metadata(address(_token)).decimals());\\n        // The references to the `feeManager` and to the `oracle` contracts are to be set when the contract is deployed\\n\\n        // Setting up Access Control for this contract\\n        // There is no need to store the reference to the `PoolManager` address here\\n        // Once the `POOLMANAGER_ROLE` has been granted, no new addresses can be granted or revoked\\n        // from this role: a `PerpetualManager` contract can only have one `PoolManager` associated\\n        _setupRole(POOLMANAGER_ROLE, address(poolManager));\\n        // `PoolManager` is admin of all the roles. Most of the time, changes are propagated from it\\n        _setRoleAdmin(GUARDIAN_ROLE, POOLMANAGER_ROLE);\\n        _setRoleAdmin(POOLMANAGER_ROLE, POOLMANAGER_ROLE);\\n        // Pausing the contract because it is not functional till the collateral has really been deployed by the\\n        // `StableMaster`\\n        _pause();\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ================================= HAs =======================================\\n\\n    /// @notice Lets a HA join the protocol and create a perpetual\\n    /// @param owner Address of the future owner of the perpetual\\n    /// @param margin Amount of collateral brought by the HA\\n    /// @param committedAmount Amount of collateral covered by the HA\\n    /// @param maxOracleRate Maximum oracle value that the HA wants to see stored in the perpetual\\n    /// @param minNetMargin Minimum net margin that the HA is willing to see stored in the perpetual\\n    /// @return perpetualID The ID of the perpetual opened by this HA\\n    /// @dev The future owner of the perpetual cannot be the zero address\\n    /// @dev It is possible to open a perpetual on behalf of someone else\\n    /// @dev The `maxOracleRate` parameter serves as a protection against oracle manipulations for HAs opening perpetuals\\n    /// @dev `minNetMargin` is a protection against too big variations in the fees for HAs\\n    function openPerpetual(\\n        address owner,\\n        uint256 margin,\\n        uint256 committedAmount,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external override whenNotPaused zeroCheck(owner) returns (uint256 perpetualID) {\\n        // Transaction will revert anyway if `margin` is zero\\n        require(committedAmount > 0, \\\"27\\\");\\n\\n        // There could be a reentrancy attack as a call to an external contract is done before state variables\\n        // updates. Yet in this case, the call involves a transfer from the `msg.sender` to the contract which\\n        // eliminates the risk\\n        _token.safeTransferFrom(msg.sender, address(poolManager), margin);\\n\\n        // Computing the oracle value\\n        // Only the highest oracle value (between Chainlink and Uniswap) we get is stored in the perpetual\\n        (, uint256 rateUp) = _getOraclePrice();\\n        // Checking if the oracle rate is not too big: a too big oracle rate could mean for a HA that the price\\n        // has become too high to make it interesting to open a perpetual\\n        require(rateUp <= maxOracleRate, \\\"28\\\");\\n\\n        // Computing the total amount of stablecoins that this perpetual is going to hedge for the protocol\\n        uint256 totalHedgeAmountUpdate = (committedAmount * rateUp) / _collatBase;\\n        // Computing the net amount brought by the HAs to store in the perpetual\\n        uint256 netMargin = _getNetMargin(margin, totalHedgeAmountUpdate, committedAmount);\\n        require(netMargin >= minNetMargin, \\\"29\\\");\\n        // Checking if the perpetual is not too leveraged, even after computing the fees\\n        require((committedAmount * BASE_PARAMS) <= maxLeverage * netMargin, \\\"30\\\");\\n\\n        // ERC721 logic\\n        _perpetualIDcount.increment();\\n        perpetualID = _perpetualIDcount.current();\\n\\n        // In the logic of the staking contract, the `_updateReward` should be called\\n        // before the perpetual is opened\\n        _updateReward(perpetualID, 0);\\n\\n        // Updating the total amount of stablecoins hedged by HAs and creating the perpetual\\n        totalHedgeAmount += totalHedgeAmountUpdate;\\n\\n        perpetualData[perpetualID] = Perpetual(rateUp, block.timestamp, netMargin, committedAmount);\\n\\n        // Following ERC721 logic, the function `_mint(...)` calls `_checkOnERC721Received` and could then be used as\\n        // a reentrancy vector. Minting should then only be done at the very end after updating all variables.\\n        _mint(owner, perpetualID);\\n        emit PerpetualOpened(perpetualID, rateUp, netMargin, committedAmount);\\n    }\\n\\n    /// @notice Lets a HA close a perpetual owned or controlled for the stablecoin/collateral pair associated\\n    /// to this `PerpetualManager` contract\\n    /// @param perpetualID ID of the perpetual to close\\n    /// @param to Address which will receive the proceeds from this perpetual\\n    /// @param minCashOutAmount Minimum net cash out amount that the HA is willing to get for closing the\\n    /// perpetual\\n    /// @dev The HA gets the current amount of her position depending on the entry oracle value\\n    /// and current oracle value minus some transaction fees computed on the committed amount\\n    /// @dev `msg.sender` should be the owner of `perpetualID` or be approved for this perpetual\\n    /// @dev If the `PoolManager` does not have enough collateral, the perpetual owner will be converted to a SLP and\\n    /// receive sanTokens\\n    /// @dev The `minCashOutAmount` serves as a protection for HAs closing their perpetuals: it protects them both\\n    /// from fees that would have become too high and from a too big decrease in oracle value\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external override whenNotPaused onlyApprovedOrOwner(msg.sender, perpetualID) {\\n        // Loading perpetual data and getting the oracle price\\n        Perpetual memory perpetual = perpetualData[perpetualID];\\n        (uint256 rateDown, ) = _getOraclePrice();\\n        // The lowest oracle price between Chainlink and Uniswap is used to compute the perpetual's position at\\n        // the time of closing: it is the one that is most at the advantage of the protocol\\n        (uint256 cashOutAmount, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\\n        if (liquidated == 0) {\\n            // You need to wait `lockTime` before being able to withdraw funds from the protocol as a HA\\n            require(perpetual.entryTimestamp + lockTime <= block.timestamp, \\\"31\\\");\\n            // Cashing out the perpetual internally\\n            _closePerpetual(perpetualID, perpetual);\\n            // Computing exit fees: they depend on how much is already hedgeded by HAs compared with what's to hedge\\n            (uint256 netCashOutAmount, ) = _getNetCashOutAmount(\\n                cashOutAmount,\\n                perpetual.committedAmount,\\n                // The perpetual has already been cashed out when calling this function, so there is no\\n                // `committedAmount` to add to the `totalHedgeAmount` to get the `currentHedgeAmount`\\n                _computeHedgeRatio(totalHedgeAmount)\\n            );\\n            require(netCashOutAmount >= minCashOutAmount, \\\"32\\\");\\n            emit PerpetualClosed(perpetualID, netCashOutAmount);\\n            _secureTransfer(to, netCashOutAmount);\\n        }\\n    }\\n\\n    /// @notice Lets a HA increase the `margin` in a perpetual she controls for this\\n    /// stablecoin/collateral pair\\n    /// @param perpetualID ID of the perpetual to which amount should be added to `margin`\\n    /// @param amount Amount to add to the perpetual's `margin`\\n    /// @dev This decreases the leverage multiple of this perpetual\\n    /// @dev If this perpetual is to be liquidated, the HA is not going to be able to add liquidity to it\\n    /// @dev Since this function can be used to add liquidity to a perpetual, there is no need to restrict\\n    /// it to the owner of the perpetual\\n    /// @dev Calling this function on a non-existing perpetual makes it revert\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external override whenNotPaused {\\n        // Loading perpetual data and getting the oracle price\\n        Perpetual memory perpetual = perpetualData[perpetualID];\\n        (uint256 rateDown, ) = _getOraclePrice();\\n        (, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\\n        if (liquidated == 0) {\\n            // Overflow check\\n            _token.safeTransferFrom(msg.sender, address(poolManager), amount);\\n            perpetualData[perpetualID].margin += amount;\\n            emit PerpetualUpdated(perpetualID, perpetual.margin + amount);\\n        }\\n    }\\n\\n    /// @notice Lets a HA decrease the `margin` in a perpetual she controls for this\\n    /// stablecoin/collateral pair\\n    /// @param perpetualID ID of the perpetual from which collateral should be removed\\n    /// @param amount Amount to remove from the perpetual's `margin`\\n    /// @param to Address which will receive the collateral removed from this perpetual\\n    /// @dev This increases the leverage multiple of this perpetual\\n    /// @dev `msg.sender` should be the owner of `perpetualID` or be approved for this perpetual\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external override whenNotPaused onlyApprovedOrOwner(msg.sender, perpetualID) {\\n        // Loading perpetual data and getting the oracle price\\n        Perpetual memory perpetual = perpetualData[perpetualID];\\n        (uint256 rateDown, ) = _getOraclePrice();\\n\\n        (uint256 cashOutAmount, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\\n        if (liquidated == 0) {\\n            // Checking if money can be withdrawn from the perpetual\\n            require(\\n                // The perpetual should not have been opened too soon\\n                (perpetual.entryTimestamp + lockTime <= block.timestamp) &&\\n                    // The amount to withdraw should not be more important than the perpetual's `cashOutAmount` and `margin`\\n                    (amount < cashOutAmount) &&\\n                    (amount < perpetual.margin) &&\\n                    // Withdrawing collateral should not make the leverage of the perpetual too important\\n                    // Checking both on `cashOutAmount` and `perpetual.margin` (as we can have either\\n                    // `cashOutAmount >= perpetual.margin` or `cashOutAmount<perpetual.margin`)\\n                    // No checks are done on `maintenanceMargin`, as conditions on `maxLeverage` are more restrictive\\n                    perpetual.committedAmount * BASE_PARAMS <= (cashOutAmount - amount) * maxLeverage &&\\n                    perpetual.committedAmount * BASE_PARAMS <= (perpetual.margin - amount) * maxLeverage,\\n                \\\"33\\\"\\n            );\\n            perpetualData[perpetualID].margin -= amount;\\n            emit PerpetualUpdated(perpetualID, perpetual.margin - amount);\\n\\n            _secureTransfer(to, amount);\\n        }\\n    }\\n\\n    /// @notice Allows an outside caller to liquidate perpetuals if their margin ratio is\\n    /// under the maintenance margin\\n    /// @param perpetualIDs ID of the targeted perpetuals\\n    /// @dev Liquidation of a perpetual will succeed if the `cashOutAmount` of the perpetual is under the maintenance margin,\\n    /// and nothing will happen if the perpetual is still healthy\\n    /// @dev The outside caller (namely a keeper) gets a portion of the leftover cash out amount of the perpetual\\n    /// @dev As keepers may directly profit from this function, there may be front-running problems with miners bots,\\n    /// we may have to put an access control logic for this function to only allow white-listed addresses to act\\n    /// as keepers for the protocol\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external override whenNotPaused {\\n        // Getting the oracle price\\n        (uint256 rateDown, ) = _getOraclePrice();\\n        uint256 liquidationFees;\\n        for (uint256 i = 0; i < perpetualIDs.length; i++) {\\n            uint256 perpetualID = perpetualIDs[i];\\n            if (_exists(perpetualID)) {\\n                // Loading perpetual data\\n                Perpetual memory perpetual = perpetualData[perpetualID];\\n                (uint256 cashOutAmount, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\\n                if (liquidated == 1) {\\n                    // Computing the incentive for the keeper as a function of the `cashOutAmount` of the perpetual\\n                    // This incentivizes keepers to react fast when the price starts to go below the liquidation\\n                    // margin\\n                    liquidationFees += _computeKeeperLiquidationFees(cashOutAmount);\\n                }\\n            }\\n        }\\n        emit KeeperTransferred(msg.sender, liquidationFees);\\n        _secureTransfer(msg.sender, liquidationFees);\\n    }\\n\\n    /// @notice Allows an outside caller to close perpetuals if too much of the collateral from\\n    /// users is hedged by HAs\\n    /// @param perpetualIDs IDs of the targeted perpetuals\\n    /// @dev This function allows to make sure that the protocol will not have too much HAs for a long period of time\\n    /// @dev A HA that owns a targeted perpetual will get the current value of her perpetual\\n    /// @dev The call to the function above will revert if HAs cannot be cashed out\\n    /// @dev As keepers may directly profit from this function, there may be front-running problems with miners bots,\\n    /// we may have to put an access control logic for this function to only allow white-listed addresses to act\\n    /// as keepers for the protocol\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external override whenNotPaused {\\n        // Getting the oracle prices\\n        // `rateUp` is used to compute the cost of manipulation of the covered amounts\\n        (uint256 rateDown, uint256 rateUp) = _getOraclePrice();\\n\\n        // Fetching `stocksUsers` to check if perpetuals cover too much collateral\\n        uint256 stocksUsers = _stableMaster.getStocksUsers();\\n        uint256 targetHedgeAmount = (stocksUsers * targetHAHedge) / BASE_PARAMS;\\n\\n        // `totalHedgeAmount` should be greater than the limit hedge amount\\n        require(totalHedgeAmount > (stocksUsers * limitHAHedge) / BASE_PARAMS, \\\"34\\\");\\n        uint256 liquidationFees;\\n        uint256 cashOutFees;\\n\\n        // Array of pairs `(owner, netCashOutAmount)`\\n        Pairs[] memory outputPairs = new Pairs[](perpetualIDs.length);\\n\\n        for (uint256 i = 0; i < perpetualIDs.length; i++) {\\n            uint256 perpetualID = perpetualIDs[i];\\n            address owner = _owners[perpetualID];\\n            if (owner != address(0)) {\\n                // Loading perpetual data and getting the oracle price\\n                Perpetual memory perpetual = perpetualData[perpetualID];\\n                // First checking if the perpetual should not be liquidated\\n                (uint256 cashOutAmount, uint256 liquidated) = _checkLiquidation(perpetualID, perpetual, rateDown);\\n                if (liquidated == 1) {\\n                    // This results in the perpetual being liquidated and the keeper being paid the same amount of fees as\\n                    // what would have been paid if the perpetual had been liquidated using the `liquidatePerpetualFunction`\\n                    // Computing the incentive for the keeper as a function of the `cashOutAmount` of the perpetual\\n                    // This incentivizes keepers to react fast\\n                    liquidationFees += _computeKeeperLiquidationFees(cashOutAmount);\\n                } else if (perpetual.entryTimestamp + lockTime <= block.timestamp) {\\n                    // It is impossible to force the closing a perpetual that was just created: in the other case, this\\n                    // function could be used to do some insider trading and to bypass the `lockTime` limit\\n                    // If too much collateral is hedged by HAs, then the perpetual can be cashed out\\n                    _closePerpetual(perpetualID, perpetual);\\n                    uint64 ratioPostCashOut;\\n                    // In this situation, `totalHedgeAmount` is the `currentHedgeAmount`\\n                    if (targetHedgeAmount > totalHedgeAmount) {\\n                        ratioPostCashOut = uint64((totalHedgeAmount * BASE_PARAMS) / targetHedgeAmount);\\n                    } else {\\n                        ratioPostCashOut = uint64(BASE_PARAMS);\\n                    }\\n                    // Computing how much the HA will get and the amount of fees paid at closing\\n                    (uint256 netCashOutAmount, uint256 fees) = _getNetCashOutAmount(\\n                        cashOutAmount,\\n                        perpetual.committedAmount,\\n                        ratioPostCashOut\\n                    );\\n                    cashOutFees += fees;\\n                    // Storing the owners of perpetuals that were forced cash out in a memory array to avoid\\n                    // reentrancy attacks\\n                    outputPairs[i] = Pairs(owner, netCashOutAmount);\\n                }\\n\\n                // Checking if at this point enough perpetuals have been cashed out\\n                if (totalHedgeAmount <= targetHedgeAmount) break;\\n            }\\n        }\\n\\n        uint64 ratio = (targetHedgeAmount == 0)\\n            ? 0\\n            : uint64((totalHedgeAmount * BASE_PARAMS) / (2 * targetHedgeAmount));\\n        // Computing the rewards given to the keeper calling this function\\n        // and transferring the rewards to the keeper\\n        // Using a cache value of `cashOutFees` to save some gas\\n        // The value below is the amount of fees that should go to the keeper forcing the closing of perpetuals\\n        // In the linear by part function, if `xKeeperFeesClosing` is greater than 0.5 (meaning we are not at target yet)\\n        // then keepers should get almost no fees\\n        cashOutFees = (cashOutFees * _piecewiseLinear(ratio, xKeeperFeesClosing, yKeeperFeesClosing)) / BASE_PARAMS;\\n        // The amount of fees that can go to keepers is capped by a parameter set by governance\\n        cashOutFees = cashOutFees < keeperFeesClosingCap ? cashOutFees : keeperFeesClosingCap;\\n        // A malicious attacker could take advantage of this function to take a flash loan, burn agTokens\\n        // to diminish the stocks users and then force close some perpetuals. We also need to check that assuming\\n        // really small burn transaction fees (of 0.05%), an attacker could make a profit with such flash loan\\n        // if current hedge is below the target hedge by making such flash loan.\\n        // The formula for the cost of such flash loan is:\\n        // `fees * (limitHAHedge - targetHAHedge) * stocksUsers / oracle`\\n        // In order to avoid doing multiplications after divisions, and to get everything in the correct base, we do:\\n        uint256 estimatedCost = (5 * (limitHAHedge - targetHAHedge) * stocksUsers * _collatBase) /\\n            (rateUp * 10000 * BASE_PARAMS);\\n        cashOutFees = cashOutFees < estimatedCost ? cashOutFees : estimatedCost;\\n\\n        emit PerpetualsForceClosed(perpetualIDs, outputPairs, msg.sender, cashOutFees + liquidationFees);\\n\\n        // Processing transfers after all calculations have been performed\\n        for (uint256 j = 0; j < perpetualIDs.length; j++) {\\n            if (outputPairs[j].netCashOutAmount > 0) {\\n                _secureTransfer(outputPairs[j].owner, outputPairs[j].netCashOutAmount);\\n            }\\n        }\\n        _secureTransfer(msg.sender, cashOutFees + liquidationFees);\\n    }\\n\\n    // =========================== External View Function ==========================\\n\\n    /// @notice Returns the `cashOutAmount` of the perpetual owned by someone at a given oracle value\\n    /// @param perpetualID ID of the perpetual\\n    /// @param rate Oracle value\\n    /// @return The `cashOutAmount` of the perpetual\\n    /// @return Whether the position of the perpetual is now too small compared with its initial position and should hence\\n    /// be liquidated\\n    /// @dev This function is used by the Collateral Settlement contract\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view override returns (uint256, uint256) {\\n        Perpetual memory perpetual = perpetualData[perpetualID];\\n        return _getCashOutAmount(perpetual, rate);\\n    }\\n\\n    // =========================== Reward Distribution =============================\\n\\n    /// @notice Allows to check the amount of reward tokens earned by a perpetual\\n    /// @param perpetualID ID of the perpetual to check\\n    function earned(uint256 perpetualID) external view returns (uint256) {\\n        return _earned(perpetualID, perpetualData[perpetualID].committedAmount * perpetualData[perpetualID].entryRate);\\n    }\\n\\n    /// @notice Allows a perpetual owner to withdraw rewards\\n    /// @param perpetualID ID of the perpetual which accumulated tokens\\n    function getReward(uint256 perpetualID) external whenNotPaused {\\n        require(_exists(perpetualID), \\\"2\\\");\\n        _getReward(perpetualID, perpetualData[perpetualID].committedAmount * perpetualData[perpetualID].entryRate);\\n    }\\n\\n    // =============================== ERC721 logic ================================\\n\\n    /// @notice Gets the name of the NFT collection implemented by this contract\\n    function name() external pure override returns (string memory) {\\n        return \\\"AnglePerp\\\";\\n    }\\n\\n    /// @notice Gets the symbol of the NFT collection implemented by this contract\\n    function symbol() external pure override returns (string memory) {\\n        return \\\"AnglePerp\\\";\\n    }\\n\\n    /// @notice Gets the URI containing metadata\\n    /// @param perpetualID ID of the perpetual\\n    function tokenURI(uint256 perpetualID) external view override returns (string memory) {\\n        require(_exists(perpetualID), \\\"2\\\");\\n        // There is no perpetual with `perpetualID` equal to 0, so the following variable is\\n        // always greater than zero\\n        uint256 temp = perpetualID;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (perpetualID != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(perpetualID % 10)));\\n            perpetualID /= 10;\\n        }\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, string(buffer))) : \\\"\\\";\\n    }\\n\\n    /// @notice Gets the balance of an owner\\n    /// @param owner Address of the owner\\n    /// @dev Balance here represents the number of perpetuals owned by a HA\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"0\\\");\\n        return _balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of the perpetual with ID perpetualID\\n    /// @param perpetualID ID of the perpetual\\n    function ownerOf(uint256 perpetualID) external view override returns (address) {\\n        return _ownerOf(perpetualID);\\n    }\\n\\n    /// @notice Approves to an address specified by `to` a perpetual specified by `perpetualID`\\n    /// @param to Address to approve the perpetual to\\n    /// @param perpetualID ID of the perpetual\\n    /// @dev The approved address will have the right to transfer the perpetual, to cash it out\\n    /// on behalf of the owner, to add or remove collateral in it and to choose the destination\\n    /// address that will be able to receive the proceeds of the perpetual\\n    function approve(address to, uint256 perpetualID) external override {\\n        address owner = _ownerOf(perpetualID);\\n        require(to != owner, \\\"35\\\");\\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender), \\\"21\\\");\\n\\n        _approve(to, perpetualID);\\n    }\\n\\n    /// @notice Gets the approved address by a perpetual owner\\n    /// @param perpetualID ID of the concerned perpetual\\n    function getApproved(uint256 perpetualID) external view override returns (address) {\\n        require(_exists(perpetualID), \\\"2\\\");\\n        return _getApproved(perpetualID);\\n    }\\n\\n    /// @notice Sets approval on all perpetuals owned by the owner to an operator\\n    /// @param operator Address to approve (or block) on all perpetuals\\n    /// @param approved Whether the sender wants to approve or block the operator\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        require(operator != msg.sender, \\\"36\\\");\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Gets if the operator address is approved on all perpetuals by the owner\\n    /// @param owner Owner of perpetuals\\n    /// @param operator Address to check if approved\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /// @notice Gets if the sender address is approved for the perpetualId\\n    /// @param perpetualID ID of the perpetual\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view override returns (bool) {\\n        return _isApprovedOrOwner(spender, perpetualID);\\n    }\\n\\n    /// @notice Transfers the `perpetualID` from an address to another\\n    /// @param from Source address\\n    /// @param to Destination a address\\n    /// @param perpetualID ID of the perpetual to transfer\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 perpetualID\\n    ) external override onlyApprovedOrOwner(msg.sender, perpetualID) {\\n        _transfer(from, to, perpetualID);\\n    }\\n\\n    /// @notice Safely transfers the `perpetualID` from an address to another without data in it\\n    /// @param from Source address\\n    /// @param to Destination a address\\n    /// @param perpetualID ID of the perpetual to transfer\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 perpetualID\\n    ) external override {\\n        safeTransferFrom(from, to, perpetualID, \\\"\\\");\\n    }\\n\\n    /// @notice Safely transfers the `perpetualID` from an address to another with data in the transfer\\n    /// @param from Source address\\n    /// @param to Destination a address\\n    /// @param perpetualID ID of the perpetual to transfer\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 perpetualID,\\n        bytes memory _data\\n    ) public override onlyApprovedOrOwner(msg.sender, perpetualID) {\\n        _safeTransfer(from, to, perpetualID, _data);\\n    }\\n\\n    // =============================== ERC165 logic ================================\\n\\n    /// @notice Queries if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function uses less than 30,000 gas.\\n    /// Required by the ERC721 standard, so used to check that the IERC721 is implemented.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external pure override(IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IPerpetualManagerFront).interfaceId ||\\n            interfaceId == type(IPerpetualManagerFunctions).interfaceId ||\\n            interfaceId == type(IStakingRewards).interfaceId ||\\n            interfaceId == type(IStakingRewardsFunctions).interfaceId ||\\n            interfaceId == type(IAccessControl).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/perpetualManager/PerpetualManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PerpetualManagerInternal.sol\\\";\\n\\n/// @title PerpetualManager\\n/// @author Angle Core Team\\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents positions and perpetuals\\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\\n/// @dev This file contains the functions of the `PerpetualManager` that can be interacted with\\n/// by `StableMaster`, by the `PoolManager`, by the `FeeManager` and by governance\\ncontract PerpetualManager is\\n    PerpetualManagerInternal,\\n    IPerpetualManagerFunctions,\\n    IStakingRewardsFunctions,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Role for guardians, governors and `StableMaster`\\n    /// Made for the `StableMaster` to be able to update some parameters\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n    /// @notice Role for `PoolManager` only\\n    bytes32 public constant POOLMANAGER_ROLE = keccak256(\\\"POOLMANAGER_ROLE\\\");\\n\\n    // ============================== Modifiers ====================================\\n\\n    /// @notice Checks if the person interacting with the perpetual with `perpetualID` is approved\\n    /// @param caller Address of the person seeking to interact with the perpetual\\n    /// @param perpetualID ID of the concerned perpetual\\n    /// @dev Generally in `PerpetualManager`, perpetual owners should store the ID of the perpetuals\\n    /// they are able to interact with\\n    modifier onlyApprovedOrOwner(address caller, uint256 perpetualID) {\\n        require(_isApprovedOrOwner(caller, perpetualID), \\\"21\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if the message sender is the rewards distribution address\\n    modifier onlyRewardsDistribution() {\\n        require(msg.sender == rewardsDistribution, \\\"1\\\");\\n        _;\\n    }\\n\\n    // =============================== Deployer ====================================\\n\\n    /// @notice Notifies the address of the `_feeManager` and of the `oracle`\\n    /// to this contract and grants the correct roles\\n    /// @param governorList List of governor addresses of the protocol\\n    /// @param guardian Address of the guardian of the protocol\\n    /// @param feeManager_ Reference to the `FeeManager` contract which will be able to update fees\\n    /// @param oracle_ Reference to the `oracle` contract which will be able to update fees\\n    /// @dev Called by the `PoolManager` contract when it is activated by the `StableMaster`\\n    /// @dev The `governorList` and `guardian` here are those of the `Core` contract\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager_,\\n        IOracle oracle_\\n    ) external override onlyRole(POOLMANAGER_ROLE) {\\n        for (uint256 i = 0; i < governorList.length; i++) {\\n            _grantRole(GUARDIAN_ROLE, governorList[i]);\\n        }\\n        // In the end guardian should be revoked by governance\\n        _grantRole(GUARDIAN_ROLE, guardian);\\n        _grantRole(GUARDIAN_ROLE, address(_stableMaster));\\n        _feeManager = feeManager_;\\n        oracle = oracle_;\\n    }\\n\\n    // ========================== Rewards Distribution =============================\\n\\n    /// @notice Notifies the contract that rewards are going to be shared among HAs of this pool\\n    /// @param reward Amount of governance tokens to be distributed to HAs\\n    /// @dev Only the reward distributor contract is allowed to call this function which starts a staking cycle\\n    /// @dev This function is the equivalent of the `notifyRewardAmount` function found in all staking contracts\\n    function notifyRewardAmount(uint256 reward) external override onlyRewardsDistribution {\\n        rewardPerTokenStored = _rewardPerToken();\\n\\n        if (block.timestamp >= periodFinish) {\\n            // If the period is not done, then the reward rate changes\\n            rewardRate = reward / rewardsDuration;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            // If the period is not over, we compute the reward left and increase reward duration\\n            rewardRate = (reward + leftover) / rewardsDuration;\\n        }\\n        // Ensuring the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of `rewardRate` in the earned and `rewardsPerToken` functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n\\n        require(rewardRate <= balance / rewardsDuration, \\\"22\\\");\\n\\n        lastUpdateTime = block.timestamp;\\n        // Change the duration\\n        periodFinish = block.timestamp + rewardsDuration;\\n        emit RewardAdded(reward);\\n    }\\n\\n    /// @notice Supports recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    /// or tokens that were mistakenly\\n    /// @param tokenAddress Address of the token to transfer\\n    /// @param to Address to give tokens to\\n    /// @param tokenAmount Amount of tokens to transfer\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 tokenAmount\\n    ) external override onlyRewardsDistribution {\\n        require(tokenAddress != address(rewardToken), \\\"20\\\");\\n        IERC20(tokenAddress).safeTransfer(to, tokenAmount);\\n        emit Recovered(tokenAddress, to, tokenAmount);\\n    }\\n\\n    /// @notice Changes the `rewardsDistribution` associated to this contract\\n    /// @param _rewardsDistribution Address of the new rewards distributor contract\\n    /// @dev This function is part of the staking rewards interface and it is used to propagate\\n    /// a change of rewards distributor notified by the current `rewardsDistribution` address\\n    /// @dev It has already been checked in the `RewardsDistributor` contract calling\\n    /// this function that the `newRewardsDistributor` had a compatible reward token\\n    /// @dev With this function, everything is as if `rewardsDistribution` was admin of its own role\\n    function setNewRewardsDistribution(address _rewardsDistribution) external override onlyRewardsDistribution {\\n        rewardsDistribution = _rewardsDistribution;\\n        emit RewardsDistributionUpdated(_rewardsDistribution);\\n    }\\n\\n    // ================================= Keepers ===================================\\n\\n    /// @notice Updates all the fees not depending on individual HA conditions via keeper utils functions\\n    /// @param feeDeposit New deposit global fees\\n    /// @param feeWithdraw New withdraw global fees\\n    /// @dev Governance may decide to incorporate a collateral ratio dependence in the fees for HAs,\\n    /// in this case it will be done through the `FeeManager` contract\\n    /// @dev This dependence can either be a bonus or a malus\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feeWithdraw) external override {\\n        require(msg.sender == address(_feeManager), \\\"1\\\");\\n        haBonusMalusDeposit = feeDeposit;\\n        haBonusMalusWithdraw = feeWithdraw;\\n    }\\n\\n    // ======== Governance - Guardian Functions - Staking and Pauses ===============\\n\\n    /// @notice Pauses the `getReward` method as well as the functions allowing to open, modify or close perpetuals\\n    /// @dev After calling this function, it is going to be impossible for HAs to interact with their perpetuals\\n    /// or claim their rewards on it\\n    function pause() external override onlyRole(GUARDIAN_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses HAs functions\\n    function unpause() external override onlyRole(GUARDIAN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice Sets the conditions and specifies the duration of the reward distribution\\n    /// @param _rewardsDuration Duration for the rewards for this contract\\n    /// @param _rewardsDistribution Address which will give the reward tokens\\n    /// @dev It allows governance to directly change the rewards distribution contract and the conditions\\n    /// at which this distribution is done\\n    /// @dev The compatibility of the reward token is not checked here: it is checked\\n    /// in the rewards distribution contract when activating this as a staking contract,\\n    /// so if a reward distributor is set here but does not have a compatible reward token, then this reward\\n    /// distributor will not be able to set this contract as a staking contract\\n    function setRewardDistribution(uint256 _rewardsDuration, address _rewardsDistribution)\\n        external\\n        onlyRole(GUARDIAN_ROLE)\\n        zeroCheck(_rewardsDistribution)\\n    {\\n        rewardsDuration = _rewardsDuration;\\n        rewardsDistribution = _rewardsDistribution;\\n        emit RewardsDistributionDurationUpdated(rewardsDuration, rewardsDistribution);\\n    }\\n\\n    // ============ Governance - Guardian Functions - Parameters ===================\\n\\n    /// @notice Sets `baseURI` that is the URI to access ERC721 metadata\\n    /// @param _baseURI New `baseURI` parameter\\n    function setBaseURI(string memory _baseURI) external onlyRole(GUARDIAN_ROLE) {\\n        baseURI = _baseURI;\\n        emit BaseURIUpdated(_baseURI);\\n    }\\n\\n    /// @notice Sets `lockTime` that is the minimum amount of time HAs have to stay within the protocol\\n    /// @param _lockTime New `lockTime` parameter\\n    /// @dev This parameter is used to prevent HAs from exiting before a certain amount of time and taking advantage\\n    /// of insiders' information they may have due to oracle latency\\n    function setLockTime(uint64 _lockTime) external override onlyRole(GUARDIAN_ROLE) {\\n        lockTime = _lockTime;\\n        emit LockTimeUpdated(_lockTime);\\n    }\\n\\n    /// @notice Changes the maximum leverage authorized (commit/margin) and the maintenance margin under which\\n    /// perpetuals can be liquidated\\n    /// @param _maxLeverage New value of the maximum leverage allowed\\n    /// @param _maintenanceMargin The new maintenance margin\\n    /// @dev For a perpetual, the leverage is defined as the ratio between the committed amount and the margin\\n    /// @dev For a perpetual, the maintenance margin is defined as the ratio between the margin ratio / the committed amount\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n        onlyCompatibleFees(_maintenanceMargin)\\n    {\\n        // Checking the compatibility of the parameters\\n        require(BASE_PARAMS**2 > _maxLeverage * _maintenanceMargin, \\\"8\\\");\\n        maxLeverage = _maxLeverage;\\n        maintenanceMargin = _maintenanceMargin;\\n        emit BoundsPerpetualUpdated(_maxLeverage, _maintenanceMargin);\\n    }\\n\\n    /// @notice Sets `xHAFees` that is the thresholds of values of the ratio between what's covered (hedged)\\n    /// divided by what's to hedge with HAs at which fees will change as well as\\n    /// `yHAFees` that is the value of the deposit or withdraw fees at threshold\\n    /// @param _xHAFees Array of the x-axis value for the fees (deposit or withdraw)\\n    /// @param _yHAFees Array of the y-axis value for the fees (deposit or withdraw)\\n    /// @param deposit Whether deposit or withdraw fees should be updated\\n    /// @dev Evolution of the fees is linear between two values of thresholds\\n    /// @dev These x values should be ranked in ascending order\\n    /// @dev For deposit fees, the higher the x that is the ratio between what's to hedge and what's hedged\\n    /// the higher y should be (the more expensive it should be for HAs to come in)\\n    /// @dev For withdraw fees, evolution should follow an opposite logic\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external override onlyRole(GUARDIAN_ROLE) onlyCompatibleInputArrays(_xHAFees, _yHAFees) {\\n        if (deposit == 1) {\\n            xHAFeesDeposit = _xHAFees;\\n            yHAFeesDeposit = _yHAFees;\\n        } else {\\n            xHAFeesWithdraw = _xHAFees;\\n            yHAFeesWithdraw = _yHAFees;\\n        }\\n        emit HAFeesUpdated(_xHAFees, _yHAFees, deposit);\\n    }\\n\\n    /// @notice Sets the target and limit proportions of collateral from users that can be insured by HAs\\n    /// @param _targetHAHedge Proportion of collateral from users that HAs should hedge\\n    /// @param _limitHAHedge Proportion of collateral from users above which HAs can see their perpetuals\\n    /// cashed out\\n    /// @dev `targetHAHedge` equal to `BASE_PARAMS` means that all the collateral from users should be insured by HAs\\n    /// @dev `targetHAHedge` equal to 0 means HA should not cover (hedge) anything\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n        onlyCompatibleFees(_targetHAHedge)\\n        onlyCompatibleFees(_limitHAHedge)\\n    {\\n        require(_targetHAHedge <= _limitHAHedge, \\\"8\\\");\\n        limitHAHedge = _limitHAHedge;\\n        targetHAHedge = _targetHAHedge;\\n        // Updating the value in the `stableMaster` contract\\n        _stableMaster.setTargetHAHedge(_targetHAHedge);\\n        emit TargetAndLimitHAHedgeUpdated(_targetHAHedge, _limitHAHedge);\\n    }\\n\\n    /// @notice Sets the portion of the leftover cash out amount of liquidated perpetuals that go to keepers\\n    /// @param _keeperFeesLiquidationRatio Proportion to keepers\\n    /// @dev This proportion should be inferior to `BASE_PARAMS`\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n        onlyCompatibleFees(_keeperFeesLiquidationRatio)\\n    {\\n        keeperFeesLiquidationRatio = _keeperFeesLiquidationRatio;\\n        emit KeeperFeesLiquidationRatioUpdated(keeperFeesLiquidationRatio);\\n    }\\n\\n    /// @notice Sets the maximum amounts going to the keepers when closing perpetuals\\n    /// because too much was hedged by HAs or when liquidating a perpetual\\n    /// @param _keeperFeesLiquidationCap Maximum reward going to the keeper liquidating a perpetual\\n    /// @param _keeperFeesClosingCap Maximum reward going to the keeper forcing the closing of an ensemble\\n    /// of perpetuals\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n    {\\n        keeperFeesLiquidationCap = _keeperFeesLiquidationCap;\\n        keeperFeesClosingCap = _keeperFeesClosingCap;\\n        emit KeeperFeesCapUpdated(keeperFeesLiquidationCap, keeperFeesClosingCap);\\n    }\\n\\n    /// @notice Sets the x-array (ie thresholds) for `FeeManager` when closing perpetuals and the y-array that is the\\n    /// value of the proportions of the fees going to keepers closing perpetuals\\n    /// @param _xKeeperFeesClosing Thresholds for closing fees\\n    /// @param _yKeeperFeesClosing Value of the fees at the different threshold values specified in `xKeeperFeesClosing`\\n    /// @dev The x thresholds correspond to values of the hedge ratio divided by two\\n    /// @dev `xKeeperFeesClosing` and `yKeeperFeesClosing` should have the same length\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing)\\n        external\\n        override\\n        onlyRole(GUARDIAN_ROLE)\\n        onlyCompatibleInputArrays(_xKeeperFeesClosing, _yKeeperFeesClosing)\\n    {\\n        xKeeperFeesClosing = _xKeeperFeesClosing;\\n        yKeeperFeesClosing = _yKeeperFeesClosing;\\n        emit KeeperFeesClosingUpdated(xKeeperFeesClosing, yKeeperFeesClosing);\\n    }\\n\\n    // ================ Governance - `PoolManager` Functions =======================\\n\\n    /// @notice Changes the reference to the `FeeManager` contract\\n    /// @param feeManager_ New `FeeManager` contract\\n    /// @dev This allows the `PoolManager` contract to propagate changes to the `PerpetualManager`\\n    /// @dev This is the only place where the `_feeManager` can be changed, it is as if there was\\n    /// a `FEEMANAGER_ROLE` for which `PoolManager` was the admin\\n    function setFeeManager(IFeeManager feeManager_) external override onlyRole(POOLMANAGER_ROLE) {\\n        _feeManager = feeManager_;\\n    }\\n\\n    // ======================= `StableMaster` Function =============================\\n\\n    /// @notice Changes the oracle contract used to compute collateral price with respect to the stablecoin's price\\n    /// @param oracle_ Oracle contract\\n    /// @dev The collateral `PoolManager` does not store a reference to an oracle, the value of the oracle\\n    /// is hence directly set by the `StableMaster`\\n    function setOracle(IOracle oracle_) external override {\\n        require(msg.sender == address(_stableMaster), \\\"1\\\");\\n        oracle = oracle_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/perpetualManager/PerpetualManagerInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PerpetualManagerStorage.sol\\\";\\n\\n/// @title PerpetualManagerInternal\\n/// @author Angle Core Team\\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents perpetuals\\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\\n/// @dev This file contains all the internal functions of the `PerpetualManager` contract\\ncontract PerpetualManagerInternal is PerpetualManagerStorage {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    // ======================== State Modifying Functions ==========================\\n\\n    /// @notice Cashes out a perpetual, which means that it simply deletes the references to the perpetual\\n    /// in the contract\\n    /// @param perpetualID ID of the perpetual\\n    /// @param perpetual Data of the perpetual\\n    function _closePerpetual(uint256 perpetualID, Perpetual memory perpetual) internal {\\n        // Handling the staking logic\\n        // Reward should always be updated before the `totalHedgeAmount`\\n        // Rewards are distributed to the perpetual which is liquidated\\n        uint256 hedge = perpetual.committedAmount * perpetual.entryRate;\\n        _getReward(perpetualID, hedge);\\n        delete perpetualRewardPerTokenPaid[perpetualID];\\n\\n        // Updating `totalHedgeAmount` to represent the fact that less money is insured\\n        totalHedgeAmount -= hedge / _collatBase;\\n\\n        _burn(perpetualID);\\n    }\\n\\n    /// @notice Allows the protocol to transfer collateral to an address while handling the case where there are\\n    /// not enough reserves\\n    /// @param owner Address of the receiver\\n    /// @param amount The amount of collateral sent\\n    /// @dev If there is not enough collateral in balance (this can happen when money has been lent to strategies),\\n    /// then the owner is reimbursed by receiving what is missing in sanTokens at the correct value\\n    function _secureTransfer(address owner, uint256 amount) internal {\\n        uint256 curBalance = poolManager.getBalance();\\n        if (curBalance >= amount && amount > 0) {\\n            // Case where there is enough in reserves to reimburse the person\\n            _token.safeTransferFrom(address(poolManager), owner, amount);\\n        } else if (amount > 0) {\\n            // When there is not enough to reimburse the entire amount, the protocol reimburses\\n            // what it can using its reserves and the rest is paid in sanTokens at the current\\n            // exchange rate\\n            uint256 amountLeft = amount - curBalance;\\n            _token.safeTransferFrom(address(poolManager), owner, curBalance);\\n            _stableMaster.convertToSLP(amountLeft, owner);\\n        }\\n    }\\n\\n    /// @notice Checks whether the perpetual should be liquidated or not, and if so liquidates the perpetual\\n    /// @param perpetualID ID of the perpetual to check and potentially liquidate\\n    /// @param perpetual Data of the perpetual to check\\n    /// @param rateDown Oracle value to compute the cash out amount of the perpetual\\n    /// @return Cash out amount of the perpetual\\n    /// @return Whether the perpetual was liquidated or not\\n    /// @dev Generally, to check for the liquidation of a perpetual, we use the lowest oracle value possible:\\n    /// it's the one that is most at the advantage of the protocol, hence the `rateDown` parameter\\n    function _checkLiquidation(\\n        uint256 perpetualID,\\n        Perpetual memory perpetual,\\n        uint256 rateDown\\n    ) internal returns (uint256, uint256) {\\n        uint256 liquidated;\\n        (uint256 cashOutAmount, uint256 reachMaintenanceMargin) = _getCashOutAmount(perpetual, rateDown);\\n        if (cashOutAmount == 0 || reachMaintenanceMargin == 1) {\\n            _closePerpetual(perpetualID, perpetual);\\n            // No need for an event to find out that a perpetual is liquidated\\n            liquidated = 1;\\n        }\\n        return (cashOutAmount, liquidated);\\n    }\\n\\n    // ========================= Internal View Functions ===========================\\n\\n    /// @notice Gets the current cash out amount of a perpetual\\n    /// @param perpetual Data of the concerned perpetual\\n    /// @param rate Value of the oracle\\n    /// @return cashOutAmount Amount that the HA could get by closing this perpetual\\n    /// @return reachMaintenanceMargin Whether the position of the perpetual is now too small\\n    /// compared with its initial position\\n    /// @dev Refer to the whitepaper or the doc for the formulas of the cash out amount\\n    /// @dev The notion of `maintenanceMargin` is standard in centralized platforms offering perpetual futures\\n    function _getCashOutAmount(Perpetual memory perpetual, uint256 rate)\\n        internal\\n        view\\n        returns (uint256 cashOutAmount, uint256 reachMaintenanceMargin)\\n    {\\n        // All these computations are made just because we are working with uint and not int\\n        // so we cannot do x-y if x<y\\n        uint256 newCommit = (perpetual.committedAmount * perpetual.entryRate) / rate;\\n        // Checking if a liquidation is needed: for this to happen the `cashOutAmount` should be inferior\\n        // to the maintenance margin of the perpetual\\n        reachMaintenanceMargin;\\n        if (newCommit >= perpetual.committedAmount + perpetual.margin) cashOutAmount = 0;\\n        else {\\n            // The definition of the margin ratio is `(margin + PnL) / committedAmount`\\n            // where `PnL = commit * (1-entryRate/currentRate)`\\n            // So here: `newCashOutAmount = margin + PnL`\\n            cashOutAmount = perpetual.committedAmount + perpetual.margin - newCommit;\\n            if (cashOutAmount * BASE_PARAMS <= perpetual.committedAmount * maintenanceMargin)\\n                reachMaintenanceMargin = 1;\\n        }\\n    }\\n\\n    /// @notice Calls the oracle to read both Chainlink and Uniswap rates\\n    /// @return The lowest oracle value (between Chainlink and Uniswap) is the first outputted value\\n    /// @return The highest oracle value is the second output\\n    /// @dev If the oracle only involves a single oracle fees (like just Chainlink for USD-EUR),\\n    /// the same value is returned twice\\n    function _getOraclePrice() internal view returns (uint256, uint256) {\\n        return oracle.readAll();\\n    }\\n\\n    /// @notice Computes the incentive for the keeper as a function of the cash out amount of a liquidated perpetual\\n    /// which value falls below its maintenance margin\\n    /// @param cashOutAmount Value remaining in the perpetual\\n    /// @dev By computing keeper fees as a fraction of the cash out amount of a perpetual rather than as a fraction\\n    /// of the `committedAmount`, keepers are incentivized to react fast when a perpetual is below the maintenance margin\\n    /// @dev Perpetual exchange protocols typically compute liquidation fees using an equivalent of the `committedAmount`,\\n    /// this is not the case here\\n    function _computeKeeperLiquidationFees(uint256 cashOutAmount) internal view returns (uint256 keeperFees) {\\n        keeperFees = (cashOutAmount * keeperFeesLiquidationRatio) / BASE_PARAMS;\\n        keeperFees = keeperFees < keeperFeesLiquidationCap ? keeperFees : keeperFeesLiquidationCap;\\n    }\\n\\n    /// @notice Gets the value of the hedge ratio that is the ratio between the amount currently hedged by HAs\\n    /// and the target amount that should be hedged by them\\n    /// @param currentHedgeAmount Amount currently covered by HAs\\n    /// @return ratio Ratio between the amount of collateral (in stablecoin value) currently hedged\\n    /// and the target amount to hedge\\n    function _computeHedgeRatio(uint256 currentHedgeAmount) internal view returns (uint64 ratio) {\\n        // Fetching info from the `StableMaster`: the amount to hedge is based on the `stocksUsers`\\n        // of the given collateral\\n        uint256 targetHedgeAmount = (_stableMaster.getStocksUsers() * targetHAHedge) / BASE_PARAMS;\\n        if (currentHedgeAmount < targetHedgeAmount)\\n            ratio = uint64((currentHedgeAmount * BASE_PARAMS) / targetHedgeAmount);\\n        else ratio = uint64(BASE_PARAMS);\\n    }\\n\\n    // =========================== Fee Computation =================================\\n\\n    /// @notice Gets the net margin corrected from the fees at perpetual opening\\n    /// @param margin Amount brought in the perpetual at creation\\n    /// @param totalHedgeAmountUpdate Amount of stablecoins that this perpetual is going to insure\\n    /// @param committedAmount Committed amount in the perpetual, we need it to compute the fees\\n    /// paid by the HA\\n    /// @return netMargin Amount that will be written in the perpetual as the `margin`\\n    /// @dev The amount of stablecoins insured by a perpetual is `committedAmount * oracleRate / _collatBase`\\n    function _getNetMargin(\\n        uint256 margin,\\n        uint256 totalHedgeAmountUpdate,\\n        uint256 committedAmount\\n    ) internal view returns (uint256 netMargin) {\\n        // Checking if the HA has the right to open a perpetual with such amount\\n        // If HAs hedge more than the target amount, then new HAs will not be able to create perpetuals\\n        // The amount hedged by HAs after opening the perpetual is going to be:\\n        uint64 ratio = _computeHedgeRatio(totalHedgeAmount + totalHedgeAmountUpdate);\\n        require(ratio < uint64(BASE_PARAMS), \\\"25\\\");\\n        // Computing the net margin of HAs to store in the perpetual: it consists simply in deducing fees\\n        // Those depend on how much is already hedged by HAs compared with what's to hedge\\n        uint256 haFeesDeposit = (haBonusMalusDeposit * _piecewiseLinear(ratio, xHAFeesDeposit, yHAFeesDeposit)) /\\n            BASE_PARAMS;\\n        // Fees are rounded to the advantage of the protocol\\n        haFeesDeposit = committedAmount - (committedAmount * (BASE_PARAMS - haFeesDeposit)) / BASE_PARAMS;\\n        // Fees are computed based on the committed amount of the perpetual\\n        // The following reverts if fees are too big compared to the margin\\n        netMargin = margin - haFeesDeposit;\\n    }\\n\\n    /// @notice Gets the net amount to give to a HA (corrected from the fees) in case of a perpetual closing\\n    /// @param committedAmount Committed amount in the perpetual\\n    /// @param cashOutAmount The current cash out amount of the perpetual\\n    /// @param ratio What's hedged divided by what's to hedge\\n    /// @return netCashOutAmount Amount that will be distributed to the HA\\n    /// @return feesPaid Amount of fees paid by the HA at perpetual closing\\n    /// @dev This function is called by the `closePerpetual` and by the `forceClosePerpetuals`\\n    /// function\\n    /// @dev The amount of fees paid by the HA is used to compute the incentive given to HAs closing perpetuals\\n    /// when too much is covered\\n    function _getNetCashOutAmount(\\n        uint256 cashOutAmount,\\n        uint256 committedAmount,\\n        uint64 ratio\\n    ) internal view returns (uint256 netCashOutAmount, uint256 feesPaid) {\\n        feesPaid = (haBonusMalusWithdraw * _piecewiseLinear(ratio, xHAFeesWithdraw, yHAFeesWithdraw)) / BASE_PARAMS;\\n        // Rounding the fees at the protocol's advantage\\n        feesPaid = committedAmount - (committedAmount * (BASE_PARAMS - feesPaid)) / BASE_PARAMS;\\n        if (feesPaid >= cashOutAmount) {\\n            netCashOutAmount = 0;\\n            feesPaid = cashOutAmount;\\n        } else {\\n            netCashOutAmount = cashOutAmount - feesPaid;\\n        }\\n    }\\n\\n    // ========================= Reward Distribution ===============================\\n\\n    /// @notice View function to query the last timestamp at which a reward was distributed\\n    /// @return Current timestamp if a reward is being distributed or the last timestamp\\n    function _lastTimeRewardApplicable() internal view returns (uint256) {\\n        uint256 returnValue = block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n        return returnValue;\\n    }\\n\\n    /// @notice Used to actualize the `rewardPerTokenStored`\\n    /// @dev It adds to the reward per token: the time elapsed since the `rewardPerTokenStored`\\n    /// was last updated multiplied by the `rewardRate` divided by the number of tokens\\n    /// @dev Specific attention should be placed on the base here: `rewardRate` is in the base of the reward token\\n    /// and `totalHedgeAmount` is in `BASE_TOKENS` here: as this function concerns an amount of reward\\n    /// tokens, the output of this function should be in the base of the reward token too\\n    function _rewardPerToken() internal view returns (uint256) {\\n        if (totalHedgeAmount == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            ((_lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * BASE_TOKENS) /\\n            totalHedgeAmount;\\n    }\\n\\n    /// @notice Allows a perpetual owner to withdraw rewards\\n    /// @param perpetualID ID of the perpetual which accumulated tokens\\n    /// @param hedge Perpetual commit amount times the entry rate\\n    /// @dev Internal version of the `getReward` function\\n    /// @dev In case where an approved address calls to close a perpetual, rewards are still going to get distributed\\n    /// to the owner of the perpetual, and not necessarily to the address getting the proceeds of the perpetual\\n    function _getReward(uint256 perpetualID, uint256 hedge) internal {\\n        _updateReward(perpetualID, hedge);\\n        uint256 reward = rewards[perpetualID];\\n        if (reward > 0) {\\n            rewards[perpetualID] = 0;\\n            address owner = _owners[perpetualID];\\n            // Attention here, there may be reentrancy attacks because of the following call\\n            // to an external contract done before other things are modified. Yet since the `rewardToken`\\n            // is mostly going to be a trusted contract controlled by governance (namely the ANGLE token), then\\n            // there is no point in putting an expensive `nonReentrant` modifier in the functions in `PerpetualManagerFront`\\n            // that allow indirect interactions with `_updateReward`. If new `rewardTokens` are set, we could think about\\n            // upgrading the `PerpetualManagerFront` contract\\n            rewardToken.safeTransfer(owner, reward);\\n            emit RewardPaid(owner, reward);\\n        }\\n    }\\n\\n    /// @notice Allows to check the amount of gov tokens earned by a perpetual\\n    /// @param perpetualID ID of the perpetual which accumulated tokens\\n    /// @param hedge Perpetual commit amount times the entry rate\\n    /// @return Amount of gov tokens earned by the perpetual\\n    /// @dev A specific attention should be paid to have the base here: we consider that each HA stakes an amount\\n    /// equal to `committedAmount * entryRate / _collatBase`, here as the `hedge` corresponds to `committedAmount * entryRate`,\\n    /// we just need to divide by `_collatBase`\\n    /// @dev HAs earn reward tokens which are in base `BASE_TOKENS`\\n    function _earned(uint256 perpetualID, uint256 hedge) internal view returns (uint256) {\\n        return\\n            (hedge * (_rewardPerToken() - perpetualRewardPerTokenPaid[perpetualID])) /\\n            BASE_TOKENS /\\n            _collatBase +\\n            rewards[perpetualID];\\n    }\\n\\n    /// @notice Updates the amount of gov tokens earned by a perpetual\\n    /// @param perpetualID of the perpetual which earns tokens\\n    /// @param hedge Perpetual commit amount times the entry rate\\n    /// @dev When this function is called in the code, it has already been checked that the `perpetualID`\\n    /// exists\\n    function _updateReward(uint256 perpetualID, uint256 hedge) internal {\\n        rewardPerTokenStored = _rewardPerToken();\\n        lastUpdateTime = _lastTimeRewardApplicable();\\n        // No need to check if the `perpetualID` exists here, it has already been checked\\n        // in the code before when this internal function is called\\n        rewards[perpetualID] = _earned(perpetualID, hedge);\\n        perpetualRewardPerTokenPaid[perpetualID] = rewardPerTokenStored;\\n    }\\n\\n    // =============================== ERC721 Logic ================================\\n\\n    /// @notice Gets the owner of a perpetual\\n    /// @param perpetualID ID of the concerned perpetual\\n    /// @return owner Owner of the perpetual\\n    function _ownerOf(uint256 perpetualID) internal view returns (address owner) {\\n        owner = _owners[perpetualID];\\n        require(owner != address(0), \\\"2\\\");\\n    }\\n\\n    /// @notice Gets the addresses approved for a perpetual\\n    /// @param perpetualID ID of the concerned perpetual\\n    /// @return Address approved for this perpetual\\n    function _getApproved(uint256 perpetualID) internal view returns (address) {\\n        return _perpetualApprovals[perpetualID];\\n    }\\n\\n    /// @notice Safely transfers `perpetualID` token from `from` to `to`, checking first that contract recipients\\n    /// are aware of the ERC721 protocol to prevent tokens from being forever locked\\n    /// @param perpetualID ID of the concerned perpetual\\n    /// @param _data Additional data, it has no specified format and it is sent in call to `to`\\n    /// @dev This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n    /// implement alternative mechanisms to perform token transfer, such as signature-based\\n    /// @dev Requirements:\\n    ///     - `from` cannot be the zero address.\\n    ///     - `to` cannot be the zero address.\\n    ///     - `perpetualID` token must exist and be owned by `from`.\\n    ///     - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 perpetualID,\\n        bytes memory _data\\n    ) internal {\\n        _transfer(from, to, perpetualID);\\n        require(_checkOnERC721Received(from, to, perpetualID, _data), \\\"24\\\");\\n    }\\n\\n    /// @notice Returns whether `perpetualID` exists\\n    /// @dev Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}\\n    /// @dev Tokens start existing when they are minted (`_mint`),\\n    /// and stop existing when they are burned (`_burn`)\\n    function _exists(uint256 perpetualID) internal view returns (bool) {\\n        return _owners[perpetualID] != address(0);\\n    }\\n\\n    /// @notice Returns whether `spender` is allowed to manage `perpetualID`\\n    /// @dev `perpetualID` must exist\\n    function _isApprovedOrOwner(address spender, uint256 perpetualID) internal view returns (bool) {\\n        // The following checks if the perpetual exists\\n        address owner = _ownerOf(perpetualID);\\n        return (spender == owner || _getApproved(perpetualID) == spender || _operatorApprovals[owner][spender]);\\n    }\\n\\n    /// @notice Mints `perpetualID` and transfers it to `to`\\n    /// @dev This method is equivalent to the `_safeMint` method used in OpenZeppelin ERC721 contract\\n    /// @dev `perpetualID` must not exist and `to` cannot be the zero address\\n    /// @dev Before calling this function it is checked that the `perpetualID` does not exist as it\\n    /// comes from a counter that has been incremented\\n    /// @dev Emits a {Transfer} event\\n    function _mint(address to, uint256 perpetualID) internal {\\n        _balances[to] += 1;\\n        _owners[perpetualID] = to;\\n        emit Transfer(address(0), to, perpetualID);\\n        require(_checkOnERC721Received(address(0), to, perpetualID, \\\"\\\"), \\\"24\\\");\\n    }\\n\\n    /// @notice Destroys `perpetualID`\\n    /// @dev `perpetualID` must exist\\n    /// @dev Emits a {Transfer} event\\n    function _burn(uint256 perpetualID) internal {\\n        address owner = _ownerOf(perpetualID);\\n\\n        // Clear approvals\\n        _approve(address(0), perpetualID);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[perpetualID];\\n        delete perpetualData[perpetualID];\\n\\n        emit Transfer(owner, address(0), perpetualID);\\n    }\\n\\n    /// @notice Transfers `perpetualID` from `from` to `to` as opposed to {transferFrom},\\n    /// this imposes no restrictions on msg.sender\\n    /// @dev `to` cannot be the zero address and `perpetualID` must be owned by `from`\\n    /// @dev Emits a {Transfer} event\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 perpetualID\\n    ) internal {\\n        require(_ownerOf(perpetualID) == from, \\\"1\\\");\\n        require(to != address(0), \\\"26\\\");\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), perpetualID);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[perpetualID] = to;\\n\\n        emit Transfer(from, to, perpetualID);\\n    }\\n\\n    /// @notice Approves `to` to operate on `perpetualID`\\n    function _approve(address to, uint256 perpetualID) internal {\\n        _perpetualApprovals[perpetualID] = to;\\n        emit Approval(_ownerOf(perpetualID), to, perpetualID);\\n    }\\n\\n    /// @notice Internal function to invoke {IERC721Receiver-onERC721Received} on a target address\\n    /// The call is not executed if the target address is not a contract\\n    /// @param from Address representing the previous owner of the given token ID\\n    /// @param to Target address that will receive the tokens\\n    /// @param perpetualID ID of the token to be transferred\\n    /// @param _data Bytes optional data to send along with the call\\n    /// @return Bool whether the call correctly returned the expected magic value\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 perpetualID,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(msg.sender, from, perpetualID, _data) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"24\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/perpetualManager/PerpetualManagerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PerpetualManagerEvents.sol\\\";\\n\\nstruct Perpetual {\\n    // Oracle value at the moment of perpetual opening\\n    uint256 entryRate;\\n    // Timestamp at which the perpetual was opened\\n    uint256 entryTimestamp;\\n    // Amount initially brought in the perpetual (net from fees) + amount added - amount removed from it\\n    // This is the only element that can be modified in the perpetual after its creation\\n    uint256 margin;\\n    // Amount of collateral covered by the perpetual. This cannot be modified once the perpetual is opened.\\n    // The amount covered is used interchangeably with the amount hedged\\n    uint256 committedAmount;\\n}\\n\\n/// @title PerpetualManagerStorage\\n/// @author Angle Core Team\\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents positions and perpetuals\\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\\n/// @dev This file contains all the parameters and references used in the `PerpetualManager` contract\\n// solhint-disable-next-line max-states-count\\ncontract PerpetualManagerStorage is PerpetualManagerEvents, FunctionUtils {\\n    // Base used in the collateral implementation (ERC20 decimal)\\n    uint256 internal _collatBase;\\n\\n    // ============================== Perpetual Variables ==========================\\n\\n    /// @notice Total amount of stablecoins that are insured (i.e. that could be redeemed against\\n    /// collateral thanks to HAs)\\n    /// When a HA opens a perpetual, it covers/hedges a fixed amount of stablecoins for the protocol, equal to\\n    /// the committed amount times the entry rate\\n    /// `totalHedgeAmount` is the sum of all these hedged amounts\\n    uint256 public totalHedgeAmount;\\n\\n    // Counter to generate a unique `perpetualID` for each perpetual\\n    CountersUpgradeable.Counter internal _perpetualIDcount;\\n\\n    // ========================== Mutable References ============================\\n\\n    /// @notice `Oracle` to give the rate feed, that is the price of the collateral\\n    /// with respect to the price of the stablecoin\\n    /// This reference can be modified by the corresponding `StableMaster` contract\\n    IOracle public oracle;\\n\\n    // `FeeManager` address allowed to update the way fees are computed for this contract\\n    // This reference can be modified by the `PoolManager` contract\\n    IFeeManager internal _feeManager;\\n\\n    // ========================== Immutable References ==========================\\n\\n    /// @notice Interface for the `rewardToken` distributed as a reward\\n    /// As of Angle V1, only a single `rewardToken` can be distributed to HAs who own a perpetual\\n    /// This implementation assumes that reward tokens have a base of 18 decimals\\n    IERC20 public rewardToken;\\n\\n    /// @notice Address of the `PoolManager` instance\\n    IPoolManager public poolManager;\\n\\n    // Address of the `StableMaster` instance\\n    IStableMaster internal _stableMaster;\\n\\n    // Interface for the underlying token accepted by this contract\\n    // This reference cannot be changed, it is taken from the `PoolManager`\\n    IERC20 internal _token;\\n\\n    // ======================= Fees and other Parameters ===========================\\n\\n    /// Deposit fees for HAs depend on the hedge ratio that is the ratio between what is hedged\\n    /// (or covered, this is a synonym) by HAs compared with the total amount to hedge\\n    /// @notice Thresholds for the ratio between to amount hedged and the amount to hedge\\n    /// The bigger the ratio the bigger the fees will be because this means that the max amount\\n    /// to insure is soon to be reached\\n    uint64[] public xHAFeesDeposit;\\n\\n    /// @notice Deposit fees at threshold values\\n    /// This array should have the same length as the array above\\n    /// The evolution of the fees between two threshold values is linear\\n    uint64[] public yHAFeesDeposit;\\n\\n    /// Withdraw fees for HAs also depend on the hedge ratio\\n    /// @notice Thresholds for the hedge ratio\\n    uint64[] public xHAFeesWithdraw;\\n\\n    /// @notice Withdraw fees at threshold values\\n    uint64[] public yHAFeesWithdraw;\\n\\n    /// @notice Maintenance Margin (in `BASE_PARAMS`) for each perpetual\\n    /// The margin ratio is defined for a perpetual as: `(initMargin + PnL) / committedAmount` where\\n    /// `PnL = committedAmount * (1 - initRate/currentRate)`\\n    /// If the `marginRatio` is below `maintenanceMargin`: then the perpetual can be liquidated\\n    uint64 public maintenanceMargin;\\n\\n    /// @notice Maximum leverage multiplier authorized for HAs (`in BASE_PARAMS`)\\n    /// Leverage for a perpetual here corresponds to the ratio between the amount committed\\n    /// and the margin of the perpetual\\n    uint64 public maxLeverage;\\n\\n    /// @notice Target proportion of stablecoins issued using this collateral to insure with HAs.\\n    /// This variable is exactly the same as the one in the `StableMaster` contract for this collateral.\\n    /// Above this hedge ratio, HAs cannot open new perpetuals\\n    /// When keepers are forcing the closing of some perpetuals, they are incentivized to bringing\\n    /// the hedge ratio to this proportion\\n    uint64 public targetHAHedge;\\n\\n    /// @notice Limit proportion of stablecoins issued using this collateral that HAs can insure\\n    /// Above this ratio `forceCashOut` is activated and anyone can see its perpetual cashed out\\n    uint64 public limitHAHedge;\\n\\n    /// @notice Extra parameter from the `FeeManager` contract that is multiplied to the fees from above and that\\n    /// can be used to change deposit fees. It works as a bonus - malus fee, if `haBonusMalusDeposit > BASE_PARAMS`,\\n    /// then the fee will be larger than `haFeesDeposit`, if `haBonusMalusDeposit < BASE_PARAMS`, fees will be smaller.\\n    /// This parameter, updated by keepers in the `FeeManager` contract, could most likely depend on the collateral ratio\\n    uint64 public haBonusMalusDeposit;\\n\\n    /// @notice Extra parameter from the `FeeManager` contract that is multiplied to the fees from above and that\\n    /// can be used to change withdraw fees. It works as a bonus - malus fee, if `haBonusMalusWithdraw > BASE_PARAMS`,\\n    /// then the fee will be larger than `haFeesWithdraw`, if `haBonusMalusWithdraw < BASE_PARAMS`, fees will be smaller\\n    uint64 public haBonusMalusWithdraw;\\n\\n    /// @notice Amount of time before HAs are allowed to withdraw funds from their perpetuals\\n    /// either using `removeFromPerpetual` or `closePerpetual`. New perpetuals cannot be forced closed in\\n    /// situations where the `forceClosePerpetuals` function is activated before this `lockTime` elapsed\\n    uint64 public lockTime;\\n\\n    // ================================= Keeper fees ======================================\\n    // All these parameters can be modified by their corresponding governance function\\n\\n    /// @notice Portion of the leftover cash out amount of liquidated perpetuals that go to\\n    /// liquidating keepers\\n    uint64 public keeperFeesLiquidationRatio;\\n\\n    /// @notice Cap on the fees that go to keepers liquidating a perpetual\\n    /// If a keeper liquidates n perpetuals in a single transaction, then this keeper is entitled to get as much as\\n    /// `n * keeperFeesLiquidationCap` as a reward\\n    uint256 public keeperFeesLiquidationCap;\\n\\n    /// @notice Cap on the fees that go to keepers closing perpetuals when too much collateral is hedged by HAs\\n    /// (hedge ratio above `limitHAHedge`)\\n    /// If a keeper forces the closing of n perpetuals in a single transaction, then this keeper is entitled to get\\n    /// as much as `keeperFeesClosingCap`. This cap amount is independent of the number of perpetuals closed\\n    uint256 public keeperFeesClosingCap;\\n\\n    /// @notice Thresholds on the values of the rate between the current hedged amount (`totalHedgeAmount`) and the\\n    /// target hedged amount by HAs (`targetHedgeAmount`) divided by 2. A value of `0.5` corresponds to a hedge ratio\\n    /// of `1`. Doing this allows to maintain an array with values of `x` inferior to `BASE_PARAMS`.\\n    uint64[] public xKeeperFeesClosing;\\n\\n    /// @notice Values at thresholds of the proportions of the fees that should go to keepers closing perpetuals\\n    uint64[] public yKeeperFeesClosing;\\n\\n    // =========================== Staking Parameters ==============================\\n\\n    /// @notice Below are parameters that can also be found in other staking contracts\\n    /// to be able to compute rewards from staking (having perpetuals here) correctly\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public rewardsDuration;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    address public rewardsDistribution;\\n\\n    // ============================== ERC721 Base URI ==============================\\n\\n    /// @notice URI used for the metadata of the perpetuals\\n    string public baseURI;\\n\\n    // =============================== Mappings ====================================\\n\\n    /// @notice Mapping from `perpetualID` to perpetual data\\n    mapping(uint256 => Perpetual) public perpetualData;\\n\\n    /// @notice Mapping used to compute the rewards earned by a perpetual in a timeframe\\n    mapping(uint256 => uint256) public perpetualRewardPerTokenPaid;\\n\\n    /// @notice Mapping used to get how much rewards in governance tokens are gained by a perpetual\\n    // identified by its ID\\n    mapping(uint256 => uint256) public rewards;\\n\\n    // Mapping from `perpetualID` to owner address\\n    mapping(uint256 => address) internal _owners;\\n\\n    // Mapping from owner address to perpetual owned count\\n    mapping(address => uint256) internal _balances;\\n\\n    // Mapping from `perpetualID` to approved address\\n    mapping(uint256 => address) internal _perpetualApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n}\\n\"\r\n    },\r\n    \"contracts/perpetualManager/PerpetualManagerEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../external/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IFeeManager.sol\\\";\\nimport \\\"../interfaces/IPoolManager.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IPerpetualManager.sol\\\";\\nimport \\\"../interfaces/IRewardsDistributor.sol\\\";\\nimport \\\"../interfaces/IStableMaster.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\n\\nimport \\\"../utils/FunctionUtils.sol\\\";\\n\\n// Used in the `forceCashOutPerpetuals` function to store owners of perpetuals which have been force cashed\\n// out, along with the amount associated to it\\nstruct Pairs {\\n    address owner;\\n    uint256 netCashOutAmount;\\n}\\n\\n/// @title PerpetualManagerEvents\\n/// @author Angle Core Team\\n/// @notice `PerpetualManager` is the contract handling all the Hedging Agents perpetuals\\n/// @dev There is one `PerpetualManager` contract per pair stablecoin/collateral in the protocol\\n/// @dev This file contains all the events of the `PerpetualManager` contract\\ncontract PerpetualManagerEvents {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event PerpetualUpdated(uint256 _perpetualID, uint256 _margin);\\n\\n    event PerpetualOpened(uint256 _perpetualID, uint256 _entryRate, uint256 _margin, uint256 _committedAmount);\\n\\n    event PerpetualClosed(uint256 _perpetualID, uint256 _closeAmount);\\n\\n    event PerpetualsForceClosed(uint256[] perpetualIDs, Pairs[] ownerAndCashOut, address keeper, uint256 reward);\\n\\n    event KeeperTransferred(address keeperAddress, uint256 liquidationFees);\\n\\n    // ============================== Parameters ===================================\\n\\n    event BaseURIUpdated(string _baseURI);\\n\\n    event LockTimeUpdated(uint64 _lockTime);\\n\\n    event KeeperFeesCapUpdated(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap);\\n\\n    event TargetAndLimitHAHedgeUpdated(uint64 _targetHAHedge, uint64 _limitHAHedge);\\n\\n    event BoundsPerpetualUpdated(uint64 _maxLeverage, uint64 _maintenanceMargin);\\n\\n    event HAFeesUpdated(uint64[] _xHAFees, uint64[] _yHAFees, uint8 deposit);\\n\\n    event KeeperFeesLiquidationRatioUpdated(uint64 _keeperFeesLiquidationRatio);\\n\\n    event KeeperFeesClosingUpdated(uint64[] xKeeperFeesClosing, uint64[] yKeeperFeesClosing);\\n\\n    // =============================== Reward ======================================\\n\\n    event RewardAdded(uint256 _reward);\\n\\n    event RewardPaid(address indexed _user, uint256 _reward);\\n\\n    event RewardsDistributionUpdated(address indexed _rewardsDistributor);\\n\\n    event RewardsDistributionDurationUpdated(uint256 _rewardsDuration, address indexed _rewardsDistributor);\\n\\n    event Recovered(address indexed tokenAddress, address indexed to, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/external/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IAccessControl.sol\\\";\\n\\n/**\\n * @dev This contract is fully forked from OpenZeppelin `AccessControlUpgradeable`.\\n * The only difference is the removal of the ERC165 implementation as it's not\\n * needed in Angle.\\n *\\n * Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, IAccessControl {\\n    function __AccessControl_init() internal initializer {\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {}\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external override {\\n        require(account == msg.sender, \\\"71\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title IFeeManagerFunctions\\n/// @author Angle Core Team\\n/// @dev Interface for the `FeeManager` contract\\ninterface IFeeManagerFunctions is IAccessControl {\\n    // ================================= Keepers ===================================\\n\\n    function updateUsersSLP() external;\\n\\n    function updateHA() external;\\n\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        address _perpetualManager\\n    ) external;\\n\\n    function setFees(\\n        uint256[] memory xArray,\\n        uint64[] memory yArray,\\n        uint8 typeChange\\n    ) external;\\n\\n    function setHAFees(uint64 _haFeeDeposit, uint64 _haFeeWithdraw) external;\\n}\\n\\n/// @title IFeeManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev We need these getters as they are used in other contracts of the protocol\\ninterface IFeeManager is IFeeManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// Struct for the parameters associated to a strategy interacting with a collateral `PoolManager`\\n// contract\\nstruct StrategyParams {\\n    // Timestamp of last report made by this strategy\\n    // It is also used to check if a strategy has been initialized\\n    uint256 lastReport;\\n    // Total amount the strategy is expected to have\\n    uint256 totalStrategyDebt;\\n    // The share of the total assets in the `PoolManager` contract that the `strategy` can access to.\\n    uint256 debtRatio;\\n}\\n\\n/// @title IPoolManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the collateral poolManager contracts handling each one type of collateral for\\n/// a given stablecoin\\n/// @dev Only the functions used in other contracts of the protocol are left here\\ninterface IPoolManagerFunctions {\\n    // ============================ Constructor ====================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IPerpetualManager _perpetualManager,\\n        IFeeManager feeManager,\\n        IOracle oracle\\n    ) external;\\n\\n    // ============================ Yield Farming ==================================\\n\\n    function creditAvailable() external view returns (uint256);\\n\\n    function debtOutstanding() external view returns (uint256);\\n\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external;\\n\\n    // ============================ Governance =====================================\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address _guardian, address guardian) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function setFeeManager(IFeeManager _feeManager) external;\\n\\n    // ============================= Getters =======================================\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getTotalAsset() external view returns (uint256);\\n}\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\n/// @dev Used in other contracts of the protocol\\ninterface IPoolManager is IPoolManagerFunctions {\\n    function stableMaster() external view returns (address);\\n\\n    function perpetualManager() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function feeManager() external view returns (address);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function strategies(address _strategy) external view returns (StrategyParams memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's oracle contracts reading oracle rates from both UniswapV3 and Chainlink\\n/// from just UniswapV3 or from just Chainlink\\ninterface IOracle {\\n    function read() external view returns (uint256);\\n\\n    function readAll() external view returns (uint256 lowerRate, uint256 upperRate);\\n\\n    function readLower() external view returns (uint256);\\n\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuote(uint256 baseAmount) external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n\\n    function inBase() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPerpetualManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev Front interface, meaning only user-facing functions\\ninterface IPerpetualManagerFront is IERC721Metadata {\\n    function openPerpetual(\\n        address owner,\\n        uint256 amountBrought,\\n        uint256 amountCommitted,\\n        uint256 maxOracleRate,\\n        uint256 minNetMargin\\n    ) external returns (uint256 perpetualID);\\n\\n    function closePerpetual(\\n        uint256 perpetualID,\\n        address to,\\n        uint256 minCashOutAmount\\n    ) external;\\n\\n    function addToPerpetual(uint256 perpetualID, uint256 amount) external;\\n\\n    function removeFromPerpetual(\\n        uint256 perpetualID,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function liquidatePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    function forceClosePerpetuals(uint256[] memory perpetualIDs) external;\\n\\n    // ========================= External View Functions =============================\\n\\n    function getCashOutAmount(uint256 perpetualID, uint256 rate) external view returns (uint256, uint256);\\n\\n    function isApprovedOrOwner(address spender, uint256 perpetualID) external view returns (bool);\\n}\\n\\n/// @title Interface of the contract managing perpetuals\\n/// @author Angle Core Team\\n/// @dev This interface does not contain user facing functions, it just has functions that are\\n/// interacted with in other parts of the protocol\\ninterface IPerpetualManagerFunctions is IAccessControl {\\n    // ================================= Governance ================================\\n\\n    function deployCollateral(\\n        address[] memory governorList,\\n        address guardian,\\n        IFeeManager feeManager,\\n        IOracle oracle_\\n    ) external;\\n\\n    function setFeeManager(IFeeManager feeManager_) external;\\n\\n    function setHAFees(\\n        uint64[] memory _xHAFees,\\n        uint64[] memory _yHAFees,\\n        uint8 deposit\\n    ) external;\\n\\n    function setTargetAndLimitHAHedge(uint64 _targetHAHedge, uint64 _limitHAHedge) external;\\n\\n    function setKeeperFeesLiquidationRatio(uint64 _keeperFeesLiquidationRatio) external;\\n\\n    function setKeeperFeesCap(uint256 _keeperFeesLiquidationCap, uint256 _keeperFeesClosingCap) external;\\n\\n    function setKeeperFeesClosing(uint64[] memory _xKeeperFeesClosing, uint64[] memory _yKeeperFeesClosing) external;\\n\\n    function setLockTime(uint64 _lockTime) external;\\n\\n    function setBoundsPerpetual(uint64 _maxLeverage, uint64 _maintenanceMargin) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    // ==================================== Keepers ================================\\n\\n    function setFeeKeeper(uint64 feeDeposit, uint64 feesWithdraw) external;\\n\\n    // =============================== StableMaster ================================\\n\\n    function setOracle(IOracle _oracle) external;\\n}\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IPerpetualManager is IPerpetualManagerFunctions {\\n    function poolManager() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function totalHedgeAmount() external view returns (uint256);\\n}\\n\\n/// @title Interface of the contract managing perpetuals with claim function\\n/// @author Angle Core Team\\n/// @dev Front interface with rewards function, meaning only user-facing functions\\ninterface IPerpetualManagerFrontWithClaim is IPerpetualManagerFront, IPerpetualManager {\\n    function getReward(uint256 perpetualID) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IStakingRewards.sol\\\";\\n\\n/// @title IRewardsDistributor\\n/// @author Angle Core Team, inspired from Fei protocol\\n/// (https://github.com/fei-protocol/fei-protocol-core/blob/master/contracts/staking/IRewardsDistributor.sol)\\n/// @notice Rewards Distributor interface\\ninterface IRewardsDistributor {\\n    // ========================= Public Parameter Getter ===========================\\n\\n    function rewardToken() external view returns (IERC20);\\n\\n    // ======================== External User Available Function ===================\\n\\n    function drip(IStakingRewards stakingContract) external returns (uint256);\\n\\n    // ========================= Governor Functions ================================\\n\\n    function governorWithdrawRewardToken(uint256 amount, address governance) external;\\n\\n    function governorRecover(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount,\\n        IStakingRewards stakingContract\\n    ) external;\\n\\n    function setUpdateFrequency(uint256 _frequency, IStakingRewards stakingContract) external;\\n\\n    function setIncentiveAmount(uint256 _incentiveAmount, IStakingRewards stakingContract) external;\\n\\n    function setAmountToDistribute(uint256 _amountToDistribute, IStakingRewards stakingContract) external;\\n\\n    function setDuration(uint256 _duration, IStakingRewards stakingContract) external;\\n\\n    function setStakingContract(\\n        address _stakingContract,\\n        uint256 _duration,\\n        uint256 _incentiveAmount,\\n        uint256 _dripFrequency,\\n        uint256 _amountToDistribute\\n    ) external;\\n\\n    function setNewRewardsDistributor(address newRewardsDistributor) external;\\n\\n    function removeStakingContract(IStakingRewards stakingContract) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Normally just importing `IPoolManager` should be sufficient, but for clarity here\\n// we prefer to import all concerned interfaces\\nimport \\\"./IPoolManager.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./ISanToken.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMasterFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `StableMaster` contract\\ninterface IStableMasterFunctions {\\n    function deploy(\\n        address[] memory _governorList,\\n        address _guardian,\\n        address _agToken\\n    ) external;\\n\\n    // ============================== Lending ======================================\\n\\n    function accumulateInterest(uint256 gain) external;\\n\\n    function signalLoss(uint256 loss) external;\\n\\n    // ============================== HAs ==========================================\\n\\n    function getStocksUsers() external view returns (uint256 maxCAmountInStable);\\n\\n    function convertToSLP(uint256 amount, address user) external;\\n\\n    // ============================== Keepers ======================================\\n\\n    function getCollateralRatio() external returns (uint256);\\n\\n    function setFeeKeeper(\\n        uint64 feeMint,\\n        uint64 feeBurn,\\n        uint64 _slippage,\\n        uint64 _slippageFee\\n    ) external;\\n\\n    // ============================== AgToken ======================================\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    // ============================= Governance ====================================\\n\\n    function setCore(address newCore) external;\\n\\n    function addGovernor(address _governor) external;\\n\\n    function removeGovernor(address _governor) external;\\n\\n    function setGuardian(address newGuardian, address oldGuardian) external;\\n\\n    function revokeGuardian(address oldGuardian) external;\\n\\n    function setCapOnStableAndMaxInterests(\\n        uint256 _capOnStableMinted,\\n        uint256 _maxInterestsDistributed,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setIncentivesForSLPs(\\n        uint64 _feesForSLPs,\\n        uint64 _interestsForSLPs,\\n        IPoolManager poolManager\\n    ) external;\\n\\n    function setUserFees(\\n        IPoolManager poolManager,\\n        uint64[] memory _xFee,\\n        uint64[] memory _yFee,\\n        uint8 _mint\\n    ) external;\\n\\n    function setTargetHAHedge(uint64 _targetHAHedge) external;\\n\\n    function pause(bytes32 agent, IPoolManager poolManager) external;\\n\\n    function unpause(bytes32 agent, IPoolManager poolManager) external;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables and mappings\\ninterface IStableMaster is IStableMasterFunctions {\\n    function agToken() external view returns (address);\\n\\n    function collateralMap(IPoolManager poolManager)\\n        external\\n        view\\n        returns (\\n            IERC20 token,\\n            ISanToken sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracle oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IStakingRewardsFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the staking rewards contract that interact with the `RewardsDistributor` contract\\ninterface IStakingRewardsFunctions {\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 tokenAmount\\n    ) external;\\n\\n    function setNewRewardsDistribution(address newRewardsDistribution) external;\\n}\\n\\n/// @title IStakingRewards\\n/// @author Angle Core Team\\n/// @notice Previous interface with additionnal getters for public variables\\ninterface IStakingRewards is IStakingRewardsFunctions {\\n    function rewardToken() external view returns (IERC20);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/FunctionUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title FunctionUtils\\n/// @author Angle Core Team\\n/// @notice Contains all the utility functions that are needed in different places of the protocol\\n/// @dev Functions in this contract should typically be pure functions\\n/// @dev This contract is voluntarily a contract and not a library to save some gas cost every time it is used\\ncontract FunctionUtils {\\n    /// @notice Base that is used to compute ratios and floating numbers\\n    uint256 public constant BASE_TOKENS = 10**18;\\n    /// @notice Base that is used to define parameters that need to have a floating value (for instance parameters\\n    /// that are defined as ratios)\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    /// @notice Computes the value of a linear by part function at a given point\\n    /// @param x Point of the function we want to compute\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev The evolution of the linear by part function between two breaking points is linear\\n    /// @dev Before the first breaking point and after the last one, the function is constant with a value\\n    /// equal to the first or last value of the yArray\\n    /// @dev This function is relevant if `x` is between O and `BASE_PARAMS`. If `x` is greater than that, then\\n    /// everything will be as if `x` is equal to the greater element of the `xArray`\\n    function _piecewiseLinear(\\n        uint64 x,\\n        uint64[] memory xArray,\\n        uint64[] memory yArray\\n    ) internal pure returns (uint64) {\\n        if (x >= xArray[xArray.length - 1]) {\\n            return yArray[xArray.length - 1];\\n        } else if (x <= xArray[0]) {\\n            return yArray[0];\\n        } else {\\n            uint256 lower;\\n            uint256 upper = xArray.length - 1;\\n            uint256 mid;\\n            while (upper - lower > 1) {\\n                mid = lower + (upper - lower) / 2;\\n                if (xArray[mid] <= x) {\\n                    lower = mid;\\n                } else {\\n                    upper = mid;\\n                }\\n            }\\n            if (yArray[upper] > yArray[lower]) {\\n                // There is no risk of overflow here as in the product of the difference of `y`\\n                // with the difference of `x`, the product is inferior to `BASE_PARAMS**2` which does not\\n                // overflow for `uint64`\\n                return\\n                    yArray[lower] +\\n                    ((yArray[upper] - yArray[lower]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            } else {\\n                return\\n                    yArray[lower] -\\n                    ((yArray[lower] - yArray[upper]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if the input arrays given by governance to update the fee structure is valid\\n    /// @param xArray List of breaking points (in ascending order) that define the linear by part function\\n    /// @param yArray List of values at breaking points (not necessarily in ascending order)\\n    /// @dev This function is a way to avoid some governance attacks or errors\\n    /// @dev The modifier checks if the arrays have a non null length, if their length is the same, if the values\\n    /// in the `xArray` are in ascending order and if the values in the `xArray` and in the `yArray` are not superior\\n    /// to `BASE_PARAMS`\\n    modifier onlyCompatibleInputArrays(uint64[] memory xArray, uint64[] memory yArray) {\\n        require(xArray.length == yArray.length && xArray.length > 0, \\\"5\\\");\\n        for (uint256 i = 0; i <= yArray.length - 1; i++) {\\n            require(yArray[i] <= uint64(BASE_PARAMS) && xArray[i] <= uint64(BASE_PARAMS), \\\"6\\\");\\n            if (i > 0) {\\n                require(xArray[i] > xArray[i - 1], \\\"7\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @notice Checks if the new value given for the parameter is consistent (it should be inferior to 1\\n    /// if it corresponds to a ratio)\\n    /// @param fees Value of the new parameter to check\\n    modifier onlyCompatibleFees(uint64 fees) {\\n        require(fees <= BASE_PARAMS, \\\"4\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks if the new address given is not null\\n    /// @param newAddress Address to check\\n    /// @dev Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation\\n    modifier zeroCheck(address newAddress) {\\n        require(newAddress != address(0), \\\"0\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\n/// @title IAccessControl\\n/// @author Forked from OpenZeppelin\\n/// @notice Interface for `AccessControl` contracts\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721 is IERC165 {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Metadata is IERC721 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISanToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ISanToken\\n/// @author Angle Core Team\\n/// @notice Interface for Angle's `SanToken` contract that handles sanTokens, tokens that are given to SLPs\\n/// contributing to a collateral for a given stablecoin\\ninterface ISanToken is IERC20Upgradeable {\\n    // ================================== StableMaster =============================\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    function stableMaster() external view returns (address);\\n\\n    function poolManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 260\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_maxLeverage\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_maintenanceMargin\",\"type\":\"uint64\"}],\"name\":\"BoundsPerpetualUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_xHAFees\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"_yHAFees\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"deposit\",\"type\":\"uint8\"}],\"name\":\"HAFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_keeperFeesLiquidationCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_keeperFeesClosingCap\",\"type\":\"uint256\"}],\"name\":\"KeeperFeesCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"xKeeperFeesClosing\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"yKeeperFeesClosing\",\"type\":\"uint64[]\"}],\"name\":\"KeeperFeesClosingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_keeperFeesLiquidationRatio\",\"type\":\"uint64\"}],\"name\":\"KeeperFeesLiquidationRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeperAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFees\",\"type\":\"uint256\"}],\"name\":\"KeeperTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"LockTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_perpetualID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_closeAmount\",\"type\":\"uint256\"}],\"name\":\"PerpetualClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_perpetualID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_entryRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_committedAmount\",\"type\":\"uint256\"}],\"name\":\"PerpetualOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_perpetualID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_margin\",\"type\":\"uint256\"}],\"name\":\"PerpetualUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"perpetualIDs\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"netCashOutAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Pairs[]\",\"name\":\"ownerAndCashOut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"PerpetualsForceClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributionDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_targetHAHedge\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_limitHAHedge\",\"type\":\"uint64\"}],\"name\":\"TargetAndLimitHAHedgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLMANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToPerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minCashOutAmount\",\"type\":\"uint256\"}],\"name\":\"closePerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"governorList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"contract IFeeManager\",\"name\":\"feeManager_\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle_\",\"type\":\"address\"}],\"name\":\"deployCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"perpetualIDs\",\"type\":\"uint256[]\"}],\"name\":\"forceClosePerpetuals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"getCashOutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haBonusMalusDeposit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haBonusMalusWithdraw\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"poolManager_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFeesClosingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFeesLiquidationCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperFeesLiquidationRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitHAHedge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"perpetualIDs\",\"type\":\"uint256[]\"}],\"name\":\"liquidatePerpetuals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceMargin\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeverage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOracleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minNetMargin\",\"type\":\"uint256\"}],\"name\":\"openPerpetual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"perpetualData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"perpetualRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeFromPerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maxLeverage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maintenanceMargin\",\"type\":\"uint64\"}],\"name\":\"setBoundsPerpetual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"feeDeposit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feeWithdraw\",\"type\":\"uint64\"}],\"name\":\"setFeeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"feeManager_\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_xHAFees\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_yHAFees\",\"type\":\"uint64[]\"},{\"internalType\":\"uint8\",\"name\":\"deposit\",\"type\":\"uint8\"}],\"name\":\"setHAFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keeperFeesLiquidationCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keeperFeesClosingCap\",\"type\":\"uint256\"}],\"name\":\"setKeeperFeesCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_xKeeperFeesClosing\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"_yKeeperFeesClosing\",\"type\":\"uint64[]\"}],\"name\":\"setKeeperFeesClosing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_keeperFeesLiquidationRatio\",\"type\":\"uint64\"}],\"name\":\"setKeeperFeesLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setNewRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle_\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_targetHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_limitHAHedge\",\"type\":\"uint64\"}],\"name\":\"setTargetAndLimitHAHedge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetHAHedge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHedgeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"perpetualID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xHAFeesDeposit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xHAFeesWithdraw\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xKeeperFeesClosing\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yHAFeesDeposit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yHAFeesWithdraw\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yKeeperFeesClosing\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PerpetualManagerFront", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "260", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}