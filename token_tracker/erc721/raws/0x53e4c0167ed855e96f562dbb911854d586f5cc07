{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"tests/SilkRoad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\n// .-\\\"\\\"\\\"\\\"\\\"\\\"\\\"---,.               n,                                      ..--------..\\n// \\\\-          ,,'''-..      n   '\\\\.                ,.n           ..--''           )\\n//  \\\\-     . .,;))     ''-,   \\\\     ''.. .'\\\"'. .,-''    .n   ..-''   (( o         _/\\n//   \\\\- ' ''''':'          ''-.'\\\"|'--_  '     '  ,.--'''..-''         ' ' ' - .  _/\\n//    \\\\-                       ''->.  \\\\'  ,--. '/' >..''                        _/\\n//     \\\\                     (,       /  /.  .\\\\ \\\\ ''    ,)                     ./\\n//      ''.    .  ..         ')          \\\\ .. /         ('          ..       ./\\n//         ''-... . ._ .__         .''.  //..\\\\\\\\  ,'.            __ _ _,__.--'\\n//             /' ((    ..'' ' ' '-'  6  \\\\/__\\\\/  ' '- - -' ' ',''   - '\\\\\\n//            '(.  6,    '..          /.   ''  .'          ,,'     ) )  )\\n//             '\\\\  \\\\'C_,_   ==,      / '_      _|\\\\       ,'', ,,_.;-' _/\\n//               '._ ,   ')   E     /'|_ ')()('_' \\\\     C  ,I'''  _.-'\\n//                  ''''''\\\\ (('   ,/  ''  (()) ''  '-._ _ __---'''\\n//                         '' '' '    '==='()'=='\\n//                                    '(       )'\\n//                                    '6        '     JM 10/28\\n//                                     \\\\       /\\n//                                     '       '\\n//          Silk Road                  '       '\\n//             by                       '      '\\n// Ezra Miller and Steve Klebanoff       '    '\\n//         silkroad.art                   '..'\\n\\n// ERC721A Creator: Chiru Labs\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Does not support burning tokens to address(0).\\n *\\n * Assumes that an owner cannot have more than the 2**128 (max value of uint128) of supply\\n */\\ncontract ERC721A is\\n    Context,\\n    ERC165,\\n    IERC721,\\n    IERC721Metadata,\\n    IERC721Enumerable\\n{\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    struct TokenOwnership {\\n        address addr;\\n        uint64 startTimestamp;\\n    }\\n\\n    struct AddressData {\\n        uint128 balance;\\n        uint128 numberMinted;\\n    }\\n\\n    uint256 internal currentIndex = 0;\\n\\n    uint256 internal immutable maxBatchSize;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev\\n     * `maxBatchSize` refers to how much a minter can mint at a time.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 maxBatchSize_\\n    ) {\\n        require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\n        _name = name_;\\n        _symbol = symbol_;\\n        maxBatchSize = maxBatchSize_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return currentIndex;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\n        return index;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\n        uint256 numMintedSoFar = totalSupply();\\n        uint256 tokenIdsIdx = 0;\\n        address currOwnershipAddr = address(0);\\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\\n            TokenOwnership memory ownership = _ownerships[i];\\n            if (ownership.addr != address(0)) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            if (currOwnershipAddr == owner) {\\n                if (tokenIdsIdx == index) {\\n                    return i;\\n                }\\n                tokenIdsIdx++;\\n            }\\n        }\\n        revert(\\\"ERC721A: unable to get token of owner by index\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721A: balance query for the zero address\\\"\\n        );\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721A: number minted query for the zero address\\\"\\n        );\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function ownershipOf(uint256 tokenId)\\n        internal\\n        view\\n        returns (TokenOwnership memory)\\n    {\\n        require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\n\\n        uint256 lowestTokenToCheck;\\n        if (tokenId >= maxBatchSize) {\\n            lowestTokenToCheck = tokenId - maxBatchSize + 1;\\n        }\\n\\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\n            TokenOwnership memory ownership = _ownerships[curr];\\n            if (ownership.addr != address(0)) {\\n                return ownership;\\n            }\\n        }\\n\\n        revert(\\\"ERC721A: unable to determine the owner of token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721A: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721A: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < currentIndex;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` cannot be larger than the max batch size.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = currentIndex;\\n        require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\n        require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\n        require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        AddressData memory addressData = _addressData[to];\\n        _addressData[to] = AddressData(\\n            addressData.balance + uint128(quantity),\\n            addressData.numberMinted + uint128(quantity)\\n        );\\n        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n        uint256 updatedIndex = startTokenId;\\n\\n        for (uint256 i = 0; i < quantity; i++) {\\n            emit Transfer(address(0), to, updatedIndex);\\n            require(\\n                _checkOnERC721Received(address(0), to, updatedIndex, _data),\\n                \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n            );\\n            updatedIndex++;\\n        }\\n\\n        currentIndex = updatedIndex;\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            getApproved(tokenId) == _msgSender() ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\\n\\n        require(\\n            isApprovedOrOwner,\\n            \\\"ERC721A: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        require(\\n            prevOwnership.addr == from,\\n            \\\"ERC721A: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n        }\\n\\n        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n        uint256 nextTokenId = tokenId + 1;\\n        if (_ownerships[nextTokenId].addr == address(0)) {\\n            if (_exists(nextTokenId)) {\\n                _ownerships[nextTokenId] = TokenOwnership(\\n                    prevOwnership.addr,\\n                    prevOwnership.startTimestamp\\n                );\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\\n/*\\n * String shenanigans\\n * Author: Zac Williamson, AZTEC\\n * Licensed under the Unlicense\\n */\\n\\ncontract StringUtils {\\n    /**\\n     * Convert an integer into an ASCII encoded base10 string\\n     * @param input integer\\n     * @return result base10-encoded string\\n     */\\n    function toString(uint256 input)\\n        public\\n        pure\\n        returns (string memory result)\\n    {\\n        if (input < 10) {\\n            assembly {\\n                result := mload(0x40)\\n                mstore(result, 0x01)\\n                mstore8(add(result, 0x20), add(input, 0x30))\\n                mstore(0x40, add(result, 0x40))\\n            }\\n            return result;\\n        }\\n        assembly {\\n            result := mload(0x40)\\n            let mptr := add(result, 0x80)\\n            let table := add(result, 0xe0)\\n\\n            // Store lookup table that maps an integer from 0 to 99 into a 2-byte ASCII equivalent\\n            mstore(\\n                table,\\n                0x0000000000000000000000000000000000000000000000000000000000003030\\n            )\\n            mstore(\\n                add(table, 0x20),\\n                0x3031303230333034303530363037303830393130313131323133313431353136\\n            )\\n            mstore(\\n                add(table, 0x40),\\n                0x3137313831393230323132323233323432353236323732383239333033313332\\n            )\\n            mstore(\\n                add(table, 0x60),\\n                0x3333333433353336333733383339343034313432343334343435343634373438\\n            )\\n            mstore(\\n                add(table, 0x80),\\n                0x3439353035313532353335343535353635373538353936303631363236333634\\n            )\\n            mstore(\\n                add(table, 0xa0),\\n                0x3635363636373638363937303731373237333734373537363737373837393830\\n            )\\n            mstore(\\n                add(table, 0xc0),\\n                0x3831383238333834383538363837383838393930393139323933393439353936\\n            )\\n            mstore(\\n                add(table, 0xe0),\\n                0x3937393839390000000000000000000000000000000000000000000000000000\\n            )\\n\\n            /**\\n             * Convert `input` into ASCII.\\n             *\\n             * Slice 2 base-10  digits off of the input, use to index the ASCII lookup table.\\n             *\\n             * We start from the least significant digits, write results into mem backwards,\\n             * this prevents us from overwriting memory despite the fact that each mload\\n             * only contains 2 byteso f useful data.\\n             **/\\n            {\\n                let v := input\\n                mstore(0x1e, mload(add(table, shl(1, mod(v, 100)))))\\n                mstore(0x1c, mload(add(table, shl(1, mod(div(v, 100), 100)))))\\n                mstore(0x1a, mload(add(table, shl(1, mod(div(v, 10000), 100)))))\\n                mstore(\\n                    0x18,\\n                    mload(add(table, shl(1, mod(div(v, 1000000), 100))))\\n                )\\n                mstore(\\n                    0x16,\\n                    mload(add(table, shl(1, mod(div(v, 100000000), 100))))\\n                )\\n                mstore(\\n                    0x14,\\n                    mload(add(table, shl(1, mod(div(v, 10000000000), 100))))\\n                )\\n                mstore(\\n                    0x12,\\n                    mload(add(table, shl(1, mod(div(v, 1000000000000), 100))))\\n                )\\n                mstore(\\n                    0x10,\\n                    mload(add(table, shl(1, mod(div(v, 100000000000000), 100))))\\n                )\\n                mstore(\\n                    0x0e,\\n                    mload(\\n                        add(table, shl(1, mod(div(v, 10000000000000000), 100)))\\n                    )\\n                )\\n                mstore(\\n                    0x0c,\\n                    mload(\\n                        add(\\n                            table,\\n                            shl(1, mod(div(v, 1000000000000000000), 100))\\n                        )\\n                    )\\n                )\\n                mstore(\\n                    0x0a,\\n                    mload(\\n                        add(\\n                            table,\\n                            shl(1, mod(div(v, 100000000000000000000), 100))\\n                        )\\n                    )\\n                )\\n                mstore(\\n                    0x08,\\n                    mload(\\n                        add(\\n                            table,\\n                            shl(1, mod(div(v, 10000000000000000000000), 100))\\n                        )\\n                    )\\n                )\\n                mstore(\\n                    0x06,\\n                    mload(\\n                        add(\\n                            table,\\n                            shl(1, mod(div(v, 1000000000000000000000000), 100))\\n                        )\\n                    )\\n                )\\n                mstore(\\n                    0x04,\\n                    mload(\\n                        add(\\n                            table,\\n                            shl(\\n                                1,\\n                                mod(div(v, 100000000000000000000000000), 100)\\n                            )\\n                        )\\n                    )\\n                )\\n                mstore(\\n                    0x02,\\n                    mload(\\n                        add(\\n                            table,\\n                            shl(\\n                                1,\\n                                mod(div(v, 10000000000000000000000000000), 100)\\n                            )\\n                        )\\n                    )\\n                )\\n                mstore(\\n                    0x00,\\n                    mload(\\n                        add(\\n                            table,\\n                            shl(\\n                                1,\\n                                mod(\\n                                    div(v, 1000000000000000000000000000000),\\n                                    100\\n                                )\\n                            )\\n                        )\\n                    )\\n                )\\n\\n                mstore(add(mptr, 0x40), mload(0x1e))\\n\\n                v := div(v, 100000000000000000000000000000000)\\n                if v {\\n                    mstore(0x1e, mload(add(table, shl(1, mod(v, 100)))))\\n                    mstore(\\n                        0x1c,\\n                        mload(add(table, shl(1, mod(div(v, 100), 100))))\\n                    )\\n                    mstore(\\n                        0x1a,\\n                        mload(add(table, shl(1, mod(div(v, 10000), 100))))\\n                    )\\n                    mstore(\\n                        0x18,\\n                        mload(add(table, shl(1, mod(div(v, 1000000), 100))))\\n                    )\\n                    mstore(\\n                        0x16,\\n                        mload(add(table, shl(1, mod(div(v, 100000000), 100))))\\n                    )\\n                    mstore(\\n                        0x14,\\n                        mload(add(table, shl(1, mod(div(v, 10000000000), 100))))\\n                    )\\n                    mstore(\\n                        0x12,\\n                        mload(\\n                            add(table, shl(1, mod(div(v, 1000000000000), 100)))\\n                        )\\n                    )\\n                    mstore(\\n                        0x10,\\n                        mload(\\n                            add(\\n                                table,\\n                                shl(1, mod(div(v, 100000000000000), 100))\\n                            )\\n                        )\\n                    )\\n                    mstore(\\n                        0x0e,\\n                        mload(\\n                            add(\\n                                table,\\n                                shl(1, mod(div(v, 10000000000000000), 100))\\n                            )\\n                        )\\n                    )\\n                    mstore(\\n                        0x0c,\\n                        mload(\\n                            add(\\n                                table,\\n                                shl(1, mod(div(v, 1000000000000000000), 100))\\n                            )\\n                        )\\n                    )\\n                    mstore(\\n                        0x0a,\\n                        mload(\\n                            add(\\n                                table,\\n                                shl(1, mod(div(v, 100000000000000000000), 100))\\n                            )\\n                        )\\n                    )\\n                    mstore(\\n                        0x08,\\n                        mload(\\n                            add(\\n                                table,\\n                                shl(\\n                                    1,\\n                                    mod(div(v, 10000000000000000000000), 100)\\n                                )\\n                            )\\n                        )\\n                    )\\n                    mstore(\\n                        0x06,\\n                        mload(\\n                            add(\\n                                table,\\n                                shl(\\n                                    1,\\n                                    mod(div(v, 1000000000000000000000000), 100)\\n                                )\\n                            )\\n                        )\\n                    )\\n                    mstore(\\n                        0x04,\\n                        mload(\\n                            add(\\n                                table,\\n                                shl(\\n                                    1,\\n                                    mod(\\n                                        div(v, 100000000000000000000000000),\\n                                        100\\n                                    )\\n                                )\\n                            )\\n                        )\\n                    )\\n                    mstore(\\n                        0x02,\\n                        mload(\\n                            add(\\n                                table,\\n                                shl(\\n                                    1,\\n                                    mod(\\n                                        div(v, 10000000000000000000000000000),\\n                                        100\\n                                    )\\n                                )\\n                            )\\n                        )\\n                    )\\n                    mstore(\\n                        0x00,\\n                        mload(\\n                            add(\\n                                table,\\n                                shl(\\n                                    1,\\n                                    mod(\\n                                        div(v, 1000000000000000000000000000000),\\n                                        100\\n                                    )\\n                                )\\n                            )\\n                        )\\n                    )\\n\\n                    mstore(add(mptr, 0x20), mload(0x1e))\\n                }\\n                v := div(v, 100000000000000000000000000000000)\\n                if v {\\n                    mstore(0x1e, mload(add(table, shl(1, mod(v, 100)))))\\n                    mstore(\\n                        0x1c,\\n                        mload(add(table, shl(1, mod(div(v, 100), 100))))\\n                    )\\n                    mstore(\\n                        0x1a,\\n                        mload(add(table, shl(1, mod(div(v, 10000), 100))))\\n                    )\\n                    mstore(\\n                        0x18,\\n                        mload(add(table, shl(1, mod(div(v, 1000000), 100))))\\n                    )\\n                    mstore(\\n                        0x16,\\n                        mload(add(table, shl(1, mod(div(v, 100000000), 100))))\\n                    )\\n                    mstore(\\n                        0x14,\\n                        mload(add(table, shl(1, mod(div(v, 10000000000), 100))))\\n                    )\\n                    mstore(\\n                        0x12,\\n                        mload(\\n                            add(table, shl(1, mod(div(v, 1000000000000), 100)))\\n                        )\\n                    )\\n\\n                    mstore(mptr, mload(0x1e))\\n                }\\n            }\\n\\n            // get the length of the input\\n            let len := 1\\n            {\\n                if gt(input, 999999999999999999999999999999999999999) {\\n                    len := add(len, 39)\\n                    input := div(\\n                        input,\\n                        1000000000000000000000000000000000000000\\n                    )\\n                }\\n                if gt(input, 99999999999999999999) {\\n                    len := add(len, 20)\\n                    input := div(input, 100000000000000000000)\\n                }\\n                if gt(input, 9999999999) {\\n                    len := add(len, 10)\\n                    input := div(input, 10000000000)\\n                }\\n                if gt(input, 99999) {\\n                    len := add(len, 5)\\n                    input := div(input, 100000)\\n                }\\n                if gt(input, 999) {\\n                    len := add(len, 3)\\n                    input := div(input, 1000)\\n                }\\n                if gt(input, 99) {\\n                    len := add(len, 2)\\n                    input := div(input, 100)\\n                }\\n                len := add(len, gt(input, 9))\\n            }\\n\\n            let offset := sub(96, len)\\n            mstore(result, len)\\n            mstore(add(result, 0x20), mload(add(mptr, offset)))\\n            mstore(add(result, 0x40), mload(add(add(mptr, 0x20), offset)))\\n            mstore(add(result, 0x60), mload(add(add(mptr, 0x40), offset)))\\n\\n            // clear the junk off at the end of the string. Probs not neccessary but might confuse some debuggers\\n            mstore(add(result, add(0x20, len)), 0x00)\\n            mstore(0x40, add(result, 0x80))\\n        }\\n    }\\n\\n    /**\\n     * Convert a bytes32 into an ASCII encoded hex string\\n     * @param input bytes32 variable\\n     * @return result hex-encoded string\\n     */\\n    function toHexString(bytes32 input)\\n        public\\n        pure\\n        returns (string memory result)\\n    {\\n        if (uint256(input) == 0x00) {\\n            assembly {\\n                result := mload(0x40)\\n                mstore(result, 0x40)\\n                mstore(\\n                    add(result, 0x20),\\n                    0x3030303030303030303030303030303030303030303030303030303030303030\\n                )\\n                mstore(\\n                    add(result, 0x40),\\n                    0x3030303030303030303030303030303030303030303030303030303030303030\\n                )\\n                mstore(0x40, add(result, 0x60))\\n            }\\n            return result;\\n        }\\n        assembly {\\n            result := mload(0x40)\\n            let table := add(result, 0x60)\\n\\n            // Store lookup table that maps an integer from 0 to 99 into a 2-byte ASCII equivalent\\n            // Store lookup table that maps an integer from 0 to ff into a 2-byte ASCII equivalent\\n            mstore(\\n                add(table, 0x1e),\\n                0x3030303130323033303430353036303730383039306130623063306430653066\\n            )\\n            mstore(\\n                add(table, 0x3e),\\n                0x3130313131323133313431353136313731383139316131623163316431653166\\n            )\\n            mstore(\\n                add(table, 0x5e),\\n                0x3230323132323233323432353236323732383239326132623263326432653266\\n            )\\n            mstore(\\n                add(table, 0x7e),\\n                0x3330333133323333333433353336333733383339336133623363336433653366\\n            )\\n            mstore(\\n                add(table, 0x9e),\\n                0x3430343134323433343434353436343734383439346134623463346434653466\\n            )\\n            mstore(\\n                add(table, 0xbe),\\n                0x3530353135323533353435353536353735383539356135623563356435653566\\n            )\\n            mstore(\\n                add(table, 0xde),\\n                0x3630363136323633363436353636363736383639366136623663366436653666\\n            )\\n            mstore(\\n                add(table, 0xfe),\\n                0x3730373137323733373437353736373737383739376137623763376437653766\\n            )\\n            mstore(\\n                add(table, 0x11e),\\n                0x3830383138323833383438353836383738383839386138623863386438653866\\n            )\\n            mstore(\\n                add(table, 0x13e),\\n                0x3930393139323933393439353936393739383939396139623963396439653966\\n            )\\n            mstore(\\n                add(table, 0x15e),\\n                0x6130613161326133613461356136613761386139616161626163616461656166\\n            )\\n            mstore(\\n                add(table, 0x17e),\\n                0x6230623162326233623462356236623762386239626162626263626462656266\\n            )\\n            mstore(\\n                add(table, 0x19e),\\n                0x6330633163326333633463356336633763386339636163626363636463656366\\n            )\\n            mstore(\\n                add(table, 0x1be),\\n                0x6430643164326433643464356436643764386439646164626463646464656466\\n            )\\n            mstore(\\n                add(table, 0x1de),\\n                0x6530653165326533653465356536653765386539656165626563656465656566\\n            )\\n            mstore(\\n                add(table, 0x1fe),\\n                0x6630663166326633663466356636663766386639666166626663666466656666\\n            )\\n            /**\\n             * Convert `input` into ASCII.\\n             *\\n             * Slice 2 base-10  digits off of the input, use to index the ASCII lookup table.\\n             *\\n             * We start from the least significant digits, write results into mem backwards,\\n             * this prevents us from overwriting memory despite the fact that each mload\\n             * only contains 2 byteso f useful data.\\n             **/\\n\\n            let base := input\\n            function slice(v, tableptr) {\\n                mstore(0x1e, mload(add(tableptr, shl(1, and(v, 0xff)))))\\n                mstore(0x1c, mload(add(tableptr, shl(1, and(shr(8, v), 0xff)))))\\n                mstore(\\n                    0x1a,\\n                    mload(add(tableptr, shl(1, and(shr(16, v), 0xff))))\\n                )\\n                mstore(\\n                    0x18,\\n                    mload(add(tableptr, shl(1, and(shr(24, v), 0xff))))\\n                )\\n                mstore(\\n                    0x16,\\n                    mload(add(tableptr, shl(1, and(shr(32, v), 0xff))))\\n                )\\n                mstore(\\n                    0x14,\\n                    mload(add(tableptr, shl(1, and(shr(40, v), 0xff))))\\n                )\\n                mstore(\\n                    0x12,\\n                    mload(add(tableptr, shl(1, and(shr(48, v), 0xff))))\\n                )\\n                mstore(\\n                    0x10,\\n                    mload(add(tableptr, shl(1, and(shr(56, v), 0xff))))\\n                )\\n                mstore(\\n                    0x0e,\\n                    mload(add(tableptr, shl(1, and(shr(64, v), 0xff))))\\n                )\\n                mstore(\\n                    0x0c,\\n                    mload(add(tableptr, shl(1, and(shr(72, v), 0xff))))\\n                )\\n                mstore(\\n                    0x0a,\\n                    mload(add(tableptr, shl(1, and(shr(80, v), 0xff))))\\n                )\\n                mstore(\\n                    0x08,\\n                    mload(add(tableptr, shl(1, and(shr(88, v), 0xff))))\\n                )\\n                mstore(\\n                    0x06,\\n                    mload(add(tableptr, shl(1, and(shr(96, v), 0xff))))\\n                )\\n                mstore(\\n                    0x04,\\n                    mload(add(tableptr, shl(1, and(shr(104, v), 0xff))))\\n                )\\n                mstore(\\n                    0x02,\\n                    mload(add(tableptr, shl(1, and(shr(112, v), 0xff))))\\n                )\\n                mstore(\\n                    0x00,\\n                    mload(add(tableptr, shl(1, and(shr(120, v), 0xff))))\\n                )\\n            }\\n\\n            mstore(result, 0x40)\\n            slice(base, table)\\n            mstore(add(result, 0x40), mload(0x1e))\\n            base := shr(128, base)\\n            slice(base, table)\\n            mstore(add(result, 0x20), mload(0x1e))\\n            mstore(0x40, add(result, 0x60))\\n        }\\n    }\\n}\\n\\ninterface IHashGenerator {\\n    function generateHash(uint256 i) external returns (bytes32);\\n}\\n\\ninterface IRonin {\\n    function mint() external;\\n}\\n\\ncontract SilkRoad is ERC721A, IERC2981, Ownable, StringUtils {\\n    uint256 public constant MAX_MINTS_PER_PRESALE = 2;\\n    uint256 public constant MAX_MINTS_PER_PUBLIC_SALE = 5;\\n    uint256 public constant NUM_ARTIST_PROOFS = 28;\\n\\n    address public presaleAuthorizer;\\n    address payable public withdrawalAddress;\\n\\n    bool public artLocked;\\n\\n    IHashGenerator public hashGenerator;\\n\\n    mapping(address => uint256) public presalesUsed;\\n    mapping(uint256 => bytes32) public tokenIdToHash;\\n\\n    string public arweaveId;\\n    string public baseUri;\\n    string public artLicense;\\n\\n    uint256 public immutable maxSupply;\\n    uint256 public presaleStartTime;\\n    uint256 public immutable pricePerPiece;\\n    uint256 public publicStartTime;\\n    uint256 public royaltyFeeBp = 750;\\n\\n    event ArtCreated(address sentTo, uint256 amount, uint256 startIndex);\\n\\n    constructor(\\n        string memory _baseUri,\\n        string memory _arweaveId,\\n        uint256 _pricePerPiece,\\n        uint256 _maxSupply,\\n        address payable _withdrawalAddress,\\n        address _presaleAuthorizer,\\n        IHashGenerator _hashGenerator,\\n        uint256 _presaleStartTime,\\n        uint256 _publicStartTime\\n    ) ERC721A(\\\"Silk Road by Ezra Miller\\\", \\\"SILK\\\", NUM_ARTIST_PROOFS) {\\n        require(\\n            _presaleStartTime < _publicStartTime,\\n            \\\"presale must be before public sale\\\"\\n        );\\n        require(\\n            _presaleStartTime > block.timestamp,\\n            \\\"presale must be in future\\\"\\n        );\\n\\n        baseUri = _baseUri;\\n        arweaveId = _arweaveId;\\n        pricePerPiece = _pricePerPiece;\\n        maxSupply = _maxSupply;\\n        withdrawalAddress = _withdrawalAddress;\\n        hashGenerator = _hashGenerator;\\n        presaleAuthorizer = _presaleAuthorizer;\\n        presaleStartTime = _presaleStartTime;\\n        publicStartTime = _publicStartTime;\\n    }\\n\\n    function presale(\\n        uint256 numPieces,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public payable {\\n        require(presaleActive(), \\\"presale not active\\\");\\n        require(msg.sender == tx.origin, \\\"can not mint via contract\\\");\\n        require(\\n            (getSigner(msg.sender, r, s, v) == presaleAuthorizer),\\n            \\\"signature must match\\\"\\n        );\\n        require(\\n            (presalesUsed[msg.sender] + numPieces) <= MAX_MINTS_PER_PRESALE,\\n            \\\"already minted max amout of presales\\\"\\n        );\\n        presalesUsed[msg.sender] += numPieces;\\n        _makeArt(numPieces, msg.sender, true);\\n    }\\n\\n    function publicSale(uint256 numPieces) public payable {\\n        require(\\n            publicSaleActive() || msg.sender == owner(),\\n            \\\"sale must be active\\\"\\n        );\\n        require(\\n            numPieces <= MAX_MINTS_PER_PUBLIC_SALE,\\n            \\\"cant mint that many at once\\\"\\n        );\\n        require(msg.sender == tx.origin, \\\"can not mint via contract\\\");\\n        _makeArt(numPieces, msg.sender, true);\\n    }\\n\\n    function amountLeft() public view returns (uint256) {\\n        return maxSupply - currentIndex;\\n    }\\n\\n    function arweaveURI(uint256 tokenId) public view returns (string memory) {\\n        bytes32 seed = tokenIdToHash[tokenId];\\n        require(!(seed == bytes32(0)), \\\"no hash found\\\");\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"ar://\\\",\\n                    arweaveId,\\n                    \\\"/?seed=0x\\\",\\n                    toHexString(seed)\\n                )\\n            );\\n    }\\n\\n    function withdrawEth() public {\\n        (bool sent, ) = withdrawalAddress.call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent, \\\"send failed\\\");\\n    }\\n\\n    function tokenInfo(uint256 tokenId) public view returns (address, bytes32) {\\n        return (ownerOf(tokenId), tokenIdToHash[tokenId]);\\n    }\\n\\n    function getOwners(uint256 start, uint256 end)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory re = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            re[i - start] = ownerOf(i);\\n        }\\n        return re;\\n    }\\n\\n    function getTokenHashes(uint256 start, uint256 end)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        bytes32[] memory re = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            re[i - start] = tokenIdToHash[i];\\n        }\\n        return re;\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        require(_exists(tokenId), \\\"Nonexistent token\\\");\\n        return (withdrawalAddress, (salePrice * royaltyFeeBp) / 10000);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function getSigner(\\n        address aCustomAddress,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public pure returns (address) {\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 hash = keccak256(abi.encodePacked(aCustomAddress));\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\\n        return ecrecover(prefixedHash, v, r, s);\\n    }\\n\\n    function presaleActive() public view returns (bool) {\\n        return block.timestamp >= presaleStartTime;\\n    }\\n\\n    function publicSaleActive() public view returns (bool) {\\n        return block.timestamp >= publicStartTime;\\n    }\\n\\n    // admin functions\\n    function setPresaleAuthorizer(address newAddress) public onlyOwner {\\n        presaleAuthorizer = newAddress;\\n    }\\n\\n    function mintArtistProofs(address roninAddress) public onlyOwner {\\n        if (roninAddress != address(0)) {\\n            IRonin(roninAddress).mint();\\n        }\\n        require(totalSupply() == 0, \\\"cant mint proofs more than once\\\");\\n        _makeArt(NUM_ARTIST_PROOFS, msg.sender, false);\\n    }\\n\\n    function setWithdrawalAddress(address payable givenWithdrawalAddress)\\n        public\\n        onlyOwner\\n    {\\n        withdrawalAddress = givenWithdrawalAddress;\\n    }\\n\\n    function setArtLicense(string memory _artLicense) public onlyOwner {\\n        artLicense = _artLicense;\\n    }\\n\\n    function setBaseUri(string memory newBaseUri) public onlyOwner {\\n        require(!artLocked, \\\"metadata locked\\\");\\n        baseUri = newBaseUri;\\n    }\\n\\n    function setPresaleStartTime(uint256 _presaleStartTime) public onlyOwner {\\n        presaleStartTime = _presaleStartTime;\\n    }\\n\\n    function setPublicStartTime(uint256 _publicStartTime) public onlyOwner {\\n        publicStartTime = _publicStartTime;\\n    }\\n\\n    function setArweaveId(string memory newArweaveId) public onlyOwner {\\n        require(!artLocked, \\\"metadata locked\\\");\\n        arweaveId = newArweaveId;\\n    }\\n\\n    function lockArt() public onlyOwner {\\n        artLocked = true;\\n    }\\n\\n    function setRoyaltyFeeBp(uint256 _royaltyFeeBp) public onlyOwner {\\n        royaltyFeeBp = _royaltyFeeBp;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseUri;\\n    }\\n\\n    function _makeArt(\\n        uint256 numPieces,\\n        address mintTo,\\n        bool requirePayment\\n    ) private {\\n        require(amountLeft() >= numPieces, \\\"sold out\\\");\\n        if (requirePayment) {\\n            require(\\n                msg.value == numPieces * pricePerPiece,\\n                \\\"must send in correct amount\\\"\\n            );\\n        }\\n\\n        uint256 startIndex = currentIndex;\\n        uint256 endIndex = startIndex + numPieces;\\n        _safeMint(mintTo, numPieces);\\n        _assignPsuedoRandomHashes(startIndex, endIndex);\\n        emit ArtCreated(mintTo, numPieces, startIndex);\\n    }\\n\\n    function _assignPsuedoRandomHashes(uint256 startIndex, uint256 endIndex)\\n        private\\n    {\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            tokenIdToHash[i] = hashGenerator.generateHash(i);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_arweaveId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerPiece\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presaleAuthorizer\",\"type\":\"address\"},{\"internalType\":\"contract IHashGenerator\",\"name\":\"_hashGenerator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_presaleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sentTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"ArtCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINTS_PER_PRESALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MINTS_PER_PUBLIC_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_ARTIST_PROOFS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artLicense\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arweaveId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"arweaveURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aCustomAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getTokenHashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashGenerator\",\"outputs\":[{\"internalType\":\"contract IHashGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"roninAddress\",\"type\":\"address\"}],\"name\":\"mintArtistProofs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numPieces\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleAuthorizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presalesUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerPiece\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numPieces\",\"type\":\"uint256\"}],\"name\":\"publicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeBp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_artLicense\",\"type\":\"string\"}],\"name\":\"setArtLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newArweaveId\",\"type\":\"string\"}],\"name\":\"setArweaveId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setPresaleAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_presaleStartTime\",\"type\":\"uint256\"}],\"name\":\"setPresaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicStartTime\",\"type\":\"uint256\"}],\"name\":\"setPublicStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyFeeBp\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFeeBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"givenWithdrawalAddress\",\"type\":\"address\"}],\"name\":\"setWithdrawalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"input\",\"type\":\"bytes32\"}],\"name\":\"toHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"}],\"name\":\"toString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SilkRoad", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000000000000000000000000000000000000000000404000000000000000000000000c1566143287cc4f2626b36a1f7f43ed95b9f731d0000000000000000000000002bae342e4b36a768c386ae15b8dfcb04362c8d63000000000000000000000000ca8868d659ef9c649e9288104214e14abb61403e00000000000000000000000000000000000000000000000000000000625701900000000000000000000000000000000000000000000000000000000062585310000000000000000000000000000000000000000000000000000000000000001968747470733a2f2f73696c6b726f61642e6172742f6170692f00000000000000000000000000000000000000000000000000000000000000000000000000002b6d3167737953413145366663355445386c7a514652655f467756554e76484864696c71432d6d504b334773000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}