{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"MoneyBags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Proprietary\\r\\n// Creator: Ant\u00f3nio Nunes Duarte;\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Imports\\r\\nimport \\\"./ERC721A.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n\\t@dev Implementation of MoneyBags Token, using the [ERC721A] standard for optimized\\r\\n\\tgas costs, specially when batch minting Tokens.\\r\\n\\r\\n\\tThis token works exclusively in a Whitelist so there is no need to close and open whitelist.\\r\\n */\\r\\ncontract MoneyBags is ERC721A, Ownable {\\r\\n\\tconstructor(address _adminSigner) ERC721A(\\\"MoneyBags\\\", \\\"MBG\\\") {\\r\\n\\t\\tadminSigner = _adminSigner;\\r\\n\\t}\\r\\n\\r\\n\\t// Chainlink related configs.\\r\\n\\taddress vrfCoordinator = 0x6168499c0cFfCaCD319c818142124B7A15E857ab;\\r\\n\\taddress link = 0x01BE23585060835E02B77ef475b0Cc51aA1e0709;\\r\\n\\tbytes32 keyHash = 0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc;\\r\\n\\tuint32 callbackGasLimit = 100000;\\r\\n\\tuint16 requestConfirmations = 3;\\r\\n\\tuint32 numWords =  1;\\r\\n\\tuint256[] public s_randomWords; // Where the random values are stored \\r\\n\\tuint256 public s_requestId;\\r\\n\\taddress s_owner;\\r\\n\\t\\t\\r\\n\\t// Minting related variables\\r\\n\\tuint private mintPrice = 100000000;\\r\\n\\tuint16 private numberOfTokens = 5555;\\r\\n\\tuint private numberPrizes = 0;\\r\\n\\tmapping(uint => bool) alreadySelected;\\r\\n\\r\\n\\tstring private baseURI; \\r\\n\\r\\n\\t/**\\r\\n\\t *  \\r\\n\\t *\\t0 -> [Closed]\\r\\n\\t *\\t1 -> [Whitelist]\\r\\n\\t *\\t\\tBallers -> Mint (2)\\r\\n\\t *\\t\\tStacked -> Mint (1)\\r\\n\\t *\\t\\r\\n\\t * \\t2 -> [Community FFA]\\r\\n\\t *\\t\\tBallers -> Mint (2)\\r\\n\\t * \\t\\tStacked -> Mint (1)\\r\\n\\t *\\t\\tCommunity -> Mint (1)\\r\\n\\t *\\t\\t\\r\\n\\t *\\t3 -> [Public]\\r\\n\\t *\\t\\tEveryone -> Mint (3)\\r\\n\\t*/\\r\\n\\tuint16 private mintingPhase = 0;\\r\\n\\r\\n\\tbool private withdrawSelected = false;\\r\\n\\tbool private isWinnerSelected = false;\\r\\n\\r\\n\\t// The time at which the collection \\r\\n\\tuint256 private withdrawTime = 0;\\r\\n\\r\\n\\t// Coupon for signature verification\\r\\n\\tstruct Coupon {\\r\\n\\t\\tbytes32 r;\\r\\n\\t\\tbytes32 s;\\r\\n\\t\\tuint8 v;\\r\\n\\t}\\r\\n\\r\\n\\tenum CouponType {\\r\\n\\t\\tBallers,\\r\\n\\t\\tStacked,\\r\\n\\t\\tCommunity\\r\\n\\t}\\r\\n\\r\\n\\tstruct Winner {\\r\\n\\t\\tuint winner; // winner NFT index in the ERC721A array  \\r\\n\\t\\tbool prizeClaimed; // was the prize already claimed?\\r\\n\\t}\\r\\n\\r\\n\\t// The list of participations\\r\\n\\tWinner[] public winners;\\r\\n\\r\\n\\tuint16 constant NUMBER_PRIZES = 556;\\r\\n\\r\\n\\tuint constant NUMBER_FIRST_PRIZE = 1;\\r\\n\\tuint constant NUMBER_SECOND_PRIZE = 5;\\r\\n\\tuint constant NUMBER_THIRD_PRIZE = 50;\\r\\n\\tuint constant NUMBER_FOURTH_PRIZE = 500;\\r\\n\\r\\n\\tuint firstPrize; // [ASSIGN] [DONE]\\r\\n\\tuint secondPrize; // [ASSIGN] [DONE]\\r\\n\\tuint thirdPrize; // [ASSIGN] [DONE]\\r\\n\\tuint fourthPrize; // [ASSIGN] [DONE]\\r\\n\\r\\n\\t// The signer address (Whitelist)\\r\\n\\taddress private adminSigner;\\r\\n\\r\\n\\t/* ---------------- */\\r\\n\\t/* Public Functions */\\r\\n\\t/* ---------------- */\\r\\n\\r\\n\\tfunction setAdminSigner(address _signer) public onlyOwner {\\r\\n\\t\\tadminSigner = _signer;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t\\t@dev Function that allows minting of an NFT.\\r\\n\\t */\\r\\n\\tfunction mint(\\r\\n\\t\\taddress _to,\\r\\n\\t\\tuint _quantity,\\r\\n\\t\\tCoupon calldata _coupon\\r\\n\\t) public payable {\\r\\n\\t\\tuint quantityCanMint = 0;\\r\\n\\r\\n\\t\\tif (!(mintingPhase == 3)) {\\r\\n\\t\\t\\trequire(mintingPhase > 0, \\\"Error: Minting Closed\\\");\\r\\n\\r\\n\\t\\t\\tCouponType personalCoupon;\\r\\n\\t\\t\\tbool couponVerified = false;\\r\\n\\t\\r\\n\\t\\t\\tbytes32 digestBallers = keccak256(abi.encode(CouponType.Ballers, _to));\\r\\n\\t\\t\\tbytes32 digestStacked = keccak256(abi.encode(CouponType.Stacked, _to));\\r\\n\\t\\t\\tbytes32 digestCommunity = keccak256(abi.encode(CouponType.Community, _to));\\r\\n\\r\\n\\t\\t\\tif (_isVerifiedCoupon(digestBallers, _coupon)) {\\r\\n\\t\\t\\t\\tpersonalCoupon = CouponType.Ballers;\\r\\n\\t\\t\\t\\tquantityCanMint = 2;\\r\\n\\t\\t\\t\\tcouponVerified = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (_isVerifiedCoupon(digestStacked, _coupon)) {\\r\\n\\t\\t\\t\\tpersonalCoupon = CouponType.Stacked;\\r\\n\\t\\t\\t\\tquantityCanMint = 1;\\r\\n\\t\\t\\t\\tcouponVerified = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (_isVerifiedCoupon(digestCommunity, _coupon)) {\\r\\n\\t\\t\\t\\tpersonalCoupon = CouponType.Community;\\r\\n\\t\\t\\t\\tquantityCanMint = 3;\\r\\n\\t\\t\\t\\tcouponVerified = true;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\trequire(couponVerified, \\\"Error: You have no key, wait for the public mint\\\"); \\r\\n\\r\\n\\t\\t\\tif (mintingPhase == 1) {\\r\\n\\t\\t\\t\\trequire(personalCoupon == CouponType.Ballers || personalCoupon == CouponType.Stacked, \\\"Error: Invalid token\\\");\\r\\n\\t\\t\\t} \\r\\n\\t\\t\\telse if (mintingPhase == 2) {\\r\\n\\t\\t\\t\\trequire(personalCoupon == CouponType.Ballers || personalCoupon == CouponType.Stacked || personalCoupon == CouponType.Community, \\\"Error: Invalid token\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t} else require (mintingPhase == 3, \\\"Error: Invalid token\\\");\\r\\n\\r\\n\\t\\tif (mintingPhase == 3) quantityCanMint = 3;\\r\\n\\t\\t\\r\\n\\t\\trequire(_quantity > 0, \\\"Error: You need to Mint more than one Token.\\\");\\r\\n\\t\\trequire((_quantity + totalSupply()) < 5555, \\\"Error: The quantity you're trying to mint excceeds the total supply\\\");\\r\\n\\t\\trequire(_quantity + _addressData[_to].numberMinted <= quantityCanMint, \\\"Error: You can't mint that quantity of tokens.\\\");\\r\\n\\t\\trequire(msg.value >= ((_quantity * mintPrice) * (1 gwei)), \\\"Error: You aren't paying enough.\\\");\\r\\n\\r\\n\\t\\t_mint(_to, _quantity, \\\"\\\", false);\\r\\n\\t}\\r\\n\\r\\n\\tfunction selectWinnerWithdraw() public payable {\\r\\n\\t\\trequire(!isWinnerSelected); // If winner is selected can't re-run it\\r\\n\\t\\t\\r\\n\\t\\t// The owners have a 24h grace period to call it themselves\\r\\n\\t\\tif ((block.timestamp - withdrawTime) < 1 days) {\\r\\n\\t\\t\\trequire(msg.sender == owner());\\r\\n\\t\\t} \\r\\n\\r\\n\\t\\tuint random = super.chainlinkFullFillRandom();\\r\\n\\r\\n\\t\\tif (NUMBER_PRIZES < super.totalSupply()) {\\r\\n\\t\\t\\tnumberPrizes = NUMBER_PRIZES;\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tnumberPrizes = super.totalSupply();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Expand one random value into x random values by encoding and hashing\\r\\n\\t\\tfor (uint i = 0; i < numberPrizes; i++) {\\r\\n\\t\\t\\tuint256 winnerIndex = uint256(keccak256(abi.encode(random, i))) % super.totalSupply();\\r\\n\\r\\n\\t\\t\\twhile (alreadySelected[winnerIndex]) {\\r\\n\\t\\t\\t\\twinnerIndex++;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tWinner memory winner = Winner(winnerIndex, false);\\r\\n\\t\\t\\talreadySelected[winnerIndex] = true;\\r\\n\\t\\t\\twinners.push(winner);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Prize value selection logic:\\r\\n\\t\\tfirstPrize = (address(this).balance *  90009000900090000 / 1000000000000000000);\\r\\n\\t\\tsecondPrize = (address(this).balance * 18001800180018002 / 1000000000000000000);\\r\\n\\t\\tthirdPrize = (address(this).balance *  18001800180018002 / 10000000000000000000);\\r\\n\\t\\tfourthPrize = (address(this).balance * 18001800180018002 / 100000000000000000000);\\r\\n\\r\\n\\t\\t// Comission distribution:\\r\\n\\t\\tdistributeComissions();\\r\\n\\r\\n\\t\\tisWinnerSelected = true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Distribute the comissions to the members of the team.\\r\\n\\t*/\\r\\n\\tfunction distributeComissions() public onlyOwner {\\r\\n\\t\\tuint balance = address(this).balance;\\r\\n\\r\\n\\t\\tuint firstValue = balance * 1530153015 / 10000000000;\\r\\n\\t\\tuint secondValue = balance * 7200720072007201 / 100000000000000000;\\r\\n\\t\\tuint thirdValue = balance * 36003600360036003 / 10000000000000000000;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  \\r\\n\\t\\tuint fourthValue = balance * 35 / 1000;\\r\\n\\t\\tuint fifthValue = balance * 45 / 1000;\\r\\n\\t\\tuint devValue = balance * 25 / 1000;\\r\\n\\t\\t\\r\\n\\t\\tuint sixthValue = balance * 18001800180018002 / 10000000000000000000;\\r\\n\\r\\n\\t\\tpayable(0xAE503cB1F8c5F1b999623b66A31c84122e123Ae7).call{ value: firstValue }(\\\"\\\");\\r\\n\\r\\n\\t\\tpayable(0x0359C701895Db8FCBc5e6CaE023d508fa309EeD4).call{ value: firstValue }(\\\"\\\");\\r\\n\\t\\tpayable(0x55C8D0ef52494690E829e8246dDdaE58b5CA0186).call{ value: secondValue }(\\\"\\\");\\r\\n\\t\\tpayable(0xd7f87f147c895454c256d242A8379869a98aac6a).call{ value: thirdValue }(\\\"\\\");\\r\\n\\r\\n\\t\\tpayable(0x29D44168b2C576930086FF412B94A9cB2A07cA50).call{ value: fourthValue }(\\\"\\\");\\r\\n\\t\\tpayable(0xeD6875a961D38076ADb27226aa0865b09225dc7e).call{ value: fifthValue }(\\\"\\\");\\r\\n\\t\\tpayable(0xc8fab3b8753984b7D8f413b730A211b0eDde3B7c).call{ value: devValue }(\\\"\\\");\\r\\n\\r\\n\\t\\tpayable(0x46d11DC635e3d772Beda70E3fa49a5242ad763b1).call{ value: sixthValue }(\\\"\\\");\\r\\n\\t\\tpayable(0xcE34f4A7A2E7E76440110220856e8C822886B205).call{ value: sixthValue }(\\\"\\\");\\r\\n\\t\\tpayable(0x1bE2e5c277f77679888B11c9311680fe873d3a3b).call{ value: sixthValue }(\\\"\\\");\\r\\n\\t\\tpayable(0xe84Dd44483Fe46AB108748D20FDE5040c5AA857C).call{ value: sixthValue }(\\\"\\\");\\r\\n\\t\\tpayable(0xCa1d749457109cfc162DD4FDaB7E1956DFeBDfB0).call{ value: sixthValue }(\\\"\\\");\\r\\n\\t\\tpayable(0xc7F90cf9033bA51C166002A960bc276274bB7769).call{ value: sixthValue }(\\\"\\\");\\r\\n\\t\\tpayable(0xd87697D737DD4E51347677fBCCA92a2BB4C4c756).call{ value: sixthValue }(\\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction getWinners() public view returns(Winner[] memory)  {\\r\\n\\t\\treturn winners;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Function that allows the owner of the contract to withdraw the funds\\r\\n\\t* x days after the winner is selected.\\r\\n\\t*/\\r\\n\\tfunction withdrawFunds() payable public onlyOwner {\\r\\n\\t\\trequire(block.timestamp > withdrawTime + 7 days);\\r\\n\\t\\t(bool success, ) = payable(owner()).call{ value: address(this).balance }(\\\"\\\");\\r\\n\\t\\trequire(success);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t// [MOST IMPORTANT FUNCTION]\\r\\n\\tfunction claimPrize() payable external {\\r\\n\\t\\trequire(isWinnerSelected); // Require that the winner is already selected.\\r\\n\\r\\n\\t\\tuint totalPrize = 0;\\t\\t\\r\\n\\t\\tfor (uint i = 0; i < numberPrizes; i++) {\\r\\n\\t\\t\\tif (msg.sender == ownerOf(winners[i].winner)) {\\r\\n\\t\\t\\t\\tif (!winners[i].prizeClaimed) {\\r\\n\\t\\t\\t\\t\\tif (i == 0) {\\r\\n\\t\\t\\t\\t\\t\\ttotalPrize += firstPrize;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse if (i == 1 || i == 2 || i == 3 || i == 4 || i == 5) {\\r\\n\\t\\t\\t\\t\\t\\ttotalPrize += secondPrize;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse if (i >= 6 && i <= 56) {\\r\\n\\t\\t\\t\\t\\t\\ttotalPrize += thirdPrize;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\ttotalPrize += fourthPrize;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\twinners[i].prizeClaimed = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// transfer prize\\r\\n\\t\\tif (totalPrize > 0) {\\r\\n\\t\\t\\t(bool success, ) = payable(msg.sender).call{ value: totalPrize }(\\\"\\\");\\r\\n\\t\\t\\trequire(success);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Selects minting phase\\r\\n\\t*/\\r\\n\\tfunction selectMintingPhase(uint16 phase) external onlyOwner {\\r\\n\\t\\tmintingPhase = phase;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t\\t@dev Sets the withdraw time and starts the lottery.\\r\\n\\t*/\\r\\n\\tfunction setWithdrawTime(uint _date) external onlyOwner {\\r\\n\\t\\trequire(!withdrawSelected);\\r\\n\\r\\n\\t\\twithdrawSelected = true;\\r\\n\\t\\twithdrawTime = _date;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBaseURI(string memory _uri) public onlyOwner {\\r\\n\\t\\tbaseURI = _uri;\\r\\n\\t}\\r\\n\\r\\n\\t/* ------------------- */\\r\\n\\t/* Auxiliary Functions */\\r\\n\\t/* ------------------- */\\r\\n\\r\\n\\t/**\\r\\n\\t\\t@dev Function to indicate the base URI of the metadata.\\r\\n\\t */\\r\\n\\tfunction _baseURI() internal view virtual override returns (string memory) {\\r\\n\\t\\treturn baseURI; // TODO: Replace with true metadata\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t \\t@dev check that the coupon sent was signed by the admin signer\\r\\n\\t*/\\r\\n\\tfunction _isVerifiedCoupon(bytes32 _digest, Coupon memory _coupon)\\r\\n\\t\\tinternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (bool)\\r\\n\\t{\\r\\n\\t\\taddress signer = ecrecover(_digest, _coupon.v, _coupon.r, _coupon.s);\\r\\n\\t\\trequire(signer != address(0), 'ECDSA: Invalid signature'); // Added check for zero address\\r\\n\\t\\treturn signer == adminSigner;\\r\\n\\t}\\r\\n\\r\\n\\t/* --------- */\\r\\n\\t/* Modifiers */\\r\\n\\t/* --------- */\\r\\n\\r\\n\\t/**\\r\\n\\t\\t@dev Modifier to ensure that the owner can only trigger the function before the lottery starts.\\r\\n\\t*/\\r\\n\\tmodifier ownerCanTrigger() {\\r\\n\\t\\trequire(withdrawTime < block.timestamp, \\\"Lottery: You can't trigger the function before the lottery ends.\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\r\\nimport '@openzeppelin/contracts/utils/Address.sol';\\r\\nimport '@openzeppelin/contracts/utils/Context.sol';\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Does not support burning tokens to address(0).\\r\\n *\\r\\n * Assumes that an owner cannot have more than the 2**128 - 1 (max value of uint128) of supply\\r\\n */\\r\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct TokenOwnership {\\r\\n        address addr;\\r\\n        uint64 startTimestamp;\\r\\n    }\\r\\n\\r\\n    struct AddressData {\\r\\n        uint128 balance;\\r\\n        uint128 numberMinted;\\r\\n    }\\r\\n\\r\\n    uint256 internal currentIndex;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\r\\n\\r\\n    // Mapping owner address to address data\\r\\n    mapping(address => AddressData) internal _addressData;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return currentIndex;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\r\\n        require(index < totalSupply(), 'ERC721A: global index out of bounds');\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\r\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\r\\n        require(index < balanceOf(owner), 'ERC721A: owner index out of bounds');\\r\\n        uint256 numMintedSoFar = totalSupply();\\r\\n        uint256 tokenIdsIdx;\\r\\n        address currOwnershipAddr;\\r\\n\\r\\n        // Counter overflow is impossible as the loop breaks when uint256 i is equal to another uint256 numMintedSoFar.\\r\\n        unchecked {\\r\\n            for (uint256 i; i < numMintedSoFar; i++) {\\r\\n                TokenOwnership memory ownership = _ownerships[i];\\r\\n                if (ownership.addr != address(0)) {\\r\\n                    currOwnershipAddr = ownership.addr;\\r\\n                }\\r\\n                if (currOwnershipAddr == owner) {\\r\\n                    if (tokenIdsIdx == index) {\\r\\n                        return i;\\r\\n                    }\\r\\n                    tokenIdsIdx++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert('ERC721A: unable to get token of owner by index');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view override returns (uint256) {\\r\\n        require(owner != address(0), 'ERC721A: balance query for the zero address');\\r\\n        return uint256(_addressData[owner].balance);\\r\\n    }\\r\\n\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        require(owner != address(0), 'ERC721A: number minted query for the zero address');\\r\\n        return uint256(_addressData[owner].numberMinted);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n     */\\r\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\r\\n        require(_exists(tokenId), 'ERC721A: owner query for nonexistent token');\\r\\n\\r\\n        unchecked {\\r\\n            for (uint256 curr = tokenId; curr >= 0; curr--) {\\r\\n                TokenOwnership memory ownership = _ownerships[curr];\\r\\n                if (ownership.addr != address(0)) {\\r\\n                    return ownership;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert('ERC721A: unable to determine the owner of token');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return ownershipOf(tokenId).addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return '';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public override {\\r\\n        address owner = ERC721A.ownerOf(tokenId);\\r\\n        require(to != owner, 'ERC721A: approval to current owner');\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            'ERC721A: approve caller is not owner nor approved for all'\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n        require(_exists(tokenId), 'ERC721A: approved query for nonexistent token');\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public override {\\r\\n        require(operator != _msgSender(), 'ERC721A: approve to caller');\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override {\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override {\\r\\n        safeTransferFrom(from, to, tokenId, '');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public override {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(from, to, tokenId, _data),\\r\\n            'ERC721A: transfer to non ERC721Receiver implementer'\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\t\\tfunction chainlinkFullFillRandom() internal returns (uint) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return tokenId < currentIndex;\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 quantity) internal {\\r\\n        _safeMint(to, quantity, '');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        _mint(to, quantity, _data, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data,\\r\\n        bool safe\\r\\n    ) internal {\\r\\n        uint256 startTokenId = currentIndex;\\r\\n        require(to != address(0), 'ERC721A: mint to the zero address');\\r\\n        require(quantity != 0, 'ERC721A: quantity must be greater than 0');\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\r\\n        // updatedIndex overflows if currentIndex + quantity > 1.56e77 (2**256) - 1\\r\\n        unchecked {\\r\\n            _addressData[to].balance += uint128(quantity);\\r\\n            _addressData[to].numberMinted += uint128(quantity);\\r\\n\\r\\n            _ownerships[startTokenId].addr = to;\\r\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\r\\n\\r\\n            uint256 updatedIndex = startTokenId;\\r\\n\\r\\n            for (uint256 i; i < quantity; i++) {\\r\\n                emit Transfer(address(0), to, updatedIndex);\\r\\n                if (safe) {\\r\\n                    require(\\r\\n                        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\r\\n                        'ERC721A: transfer to non ERC721Receiver implementer'\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                updatedIndex++;\\r\\n            }\\r\\n\\r\\n            currentIndex = updatedIndex;\\r\\n        }\\r\\n\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) private {\\r\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n            getApproved(tokenId) == _msgSender() ||\\r\\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\\r\\n\\r\\n        require(isApprovedOrOwner, 'ERC721A: transfer caller is not owner nor approved');\\r\\n\\r\\n        require(prevOwnership.addr == from, 'ERC721A: transfer from incorrect owner');\\r\\n        require(to != address(0), 'ERC721A: transfer to the zero address');\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            _addressData[from].balance -= 1;\\r\\n            _addressData[to].balance += 1;\\r\\n\\r\\n            _ownerships[tokenId].addr = to;\\r\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\r\\n\\r\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n            uint256 nextTokenId = tokenId + 1;\\r\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n                if (_exists(nextTokenId)) {\\r\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\r\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        address owner\\r\\n    ) private {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert('ERC721A: transfer to non ERC721Receiver implementer');\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n     * minting.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeComissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"prizeClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct MoneyBags.Winner[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct MoneyBags.Coupon\",\"name\":\"_coupon\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"phase\",\"type\":\"uint16\"}],\"name\":\"selectMintingPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectWinnerWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setAdminSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"setWithdrawTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"prizeClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MoneyBags", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000402a4189b1d72edfbc9dfeb7771e4a5549b43531", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}