{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/StakingV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\r\\npragma solidity >=0.8;\\r\\n\\r\\nimport { Initializable }            from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport {AccessControlUpgradeable}   from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport { PausableUpgradeable }      from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport { ERC721Upgradeable }        from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport { FixedPointMathLib }        from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\r\\nimport { TransferHelper }           from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport { IERC20Permit }             from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\nimport { IERC20 }                   from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport { IAccrualBondsV1 }          from \\\"../interfaces/IAccrualBondsV1.sol\\\";\\r\\nimport { StakingStorageV1, Position, Pool } from \\\"./StakingStorageV1.sol\\\";\\r\\n\\r\\ninterface ICNV is IERC20, IERC20Permit {\\r\\n    function mint(address guy, uint256 input) external;\\r\\n}\\r\\n\\r\\ninterface IValueShuttle {\\r\\n    function shuttleValue() external returns(uint256);\\r\\n}\\r\\n\\r\\ninterface IERC721 {\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\ncontract StakingV1 is StakingStorageV1, Initializable, AccessControlUpgradeable, PausableUpgradeable, ERC721Upgradeable {\\r\\n\\r\\n    using FixedPointMathLib for uint256;\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n    // ACCESS CONTROL ROLES\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    bytes32 public constant TREASURY_ROLE           = DEFAULT_ADMIN_ROLE;\\r\\n    bytes32 public constant POLICY_ROLE             = bytes32(keccak256(\\\"POLICY_ROLE\\\"));\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n    // EVENTS\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /// @notice             emitted when a user locks\\r\\n    /// @param _amount      amount of CNV locked\\r\\n    /// @param _poolID      ID of the pool locked into\\r\\n    /// @param _tokenId     ID of token generated\\r\\n    /// @param _sender      address of sender\\r\\n    event Lock(\\r\\n        uint256 indexed _amount,\\r\\n        uint256 indexed _poolID,\\r\\n        uint256 indexed _tokenId,\\r\\n        address _sender\\r\\n    );\\r\\n\\r\\n    /// @notice             emitted when a user unlocks\\r\\n    /// @param _amount      amount of CNV unlocked (principal + anti-dilutive + excess)\\r\\n    /// @param _poolID      ID of the pool locked into\\r\\n    /// @param _owner       address of NFT owner\\r\\n    event Unlock(\\r\\n        uint256 indexed _amount,\\r\\n        uint256 indexed _poolID,\\r\\n        address indexed _owner\\r\\n    );\\r\\n\\r\\n    /// @notice             emitted when a rebase occurs\\r\\n    /// @param eStakers     emissions for stakes (anti-dilutive + excess)\\r\\n    /// @param eCOOP        emissions for COOP\\r\\n    /// @param CNVS         CNV supply used for anti-dilution calculation\\r\\n    event Rebase(\\r\\n        uint256 indexed eStakers,\\r\\n        uint256 indexed eCOOP,\\r\\n        uint256 indexed CNVS\\r\\n    );\\r\\n\\r\\n    /// @notice                     emitted during rebase for each pool\\r\\n    /// @param poolID               ID of pool\\r\\n    /// @param baseObligation       anti-dilution rewards for pool\\r\\n    /// @param excessObligation     excess rewards for pool\\r\\n    /// @param balance              pool balance before rebase\\r\\n    event PoolRewarded(\\r\\n        uint256 indexed poolID,\\r\\n        uint256 indexed baseObligation,\\r\\n        uint256 indexed excessObligation,\\r\\n        uint256 balance\\r\\n    );\\r\\n\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n    // ADMIN MGMT EVENTS\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /// @notice                 emitted when MGMT creates a new pool\\r\\n    /// @param _term            length of pool term in seconds\\r\\n    /// @param _g               amount of CNV supply growth matched to pool\\r\\n    /// @param _excessRatio     ratio to calculate excess rewards for this pool\\r\\n    /// @param _poolID          ID of the pool\\r\\n    event PoolOpened(\\r\\n        uint64  indexed _term,\\r\\n        uint256 indexed _g,\\r\\n        uint256 indexed _excessRatio,\\r\\n        uint256 _poolID\\r\\n    );\\r\\n\\r\\n    /// @notice                 emitted when MGMT manages a pool\\r\\n    /// @param _term            length of pool term in seconds\\r\\n    /// @param _g               amount of CNV supply growth matched to pool\\r\\n    /// @param _excessRatio     ratio to calculate excess rewards for this pool\\r\\n    /// @param _poolID          ID of the pool\\r\\n    event PoolManaged(\\r\\n        uint64 indexed  _term,\\r\\n        uint256 indexed _g,\\r\\n        uint256 indexed _excessRatio,\\r\\n        uint256 _poolID\\r\\n    );\\r\\n\\r\\n    /// @notice                         emitted when MGMT manages COOP rate\\r\\n    /// @param _coopRatePriceControl    used for COOP rate calc\\r\\n    /// @param _haogegeControl          used for COOP rate calc\\r\\n    /// @param _coopRateMax             used for COOP rate calc\\r\\n    event CoopRateManaged(\\r\\n        uint256 indexed _coopRatePriceControl,\\r\\n        uint256 indexed _haogegeControl,\\r\\n        uint256 indexed _coopRateMax\\r\\n    );\\r\\n\\r\\n    event ExcessRewardsDistributed(\\r\\n        uint256 indexed amountDistributed,\\r\\n        uint256 indexed globalExcess\\r\\n    );\\r\\n\\r\\n    /// @notice                         emitted when MGMT manages rebase excess apy\\r\\n    /// @param apy                      apy\\r\\n    event RebaseAPYManaged(\\r\\n        uint256 indexed apy\\r\\n    );\\r\\n\\r\\n    /// @notice                         emitted when MGMT manages rebase incentive\\r\\n    /// @param rebaseIncentive          incentive (in CNV) for calling rebase method\\r\\n    event RebaseIncentiveManaged(\\r\\n        uint256 indexed rebaseIncentive\\r\\n    );\\r\\n\\r\\n    /// @notice                         emitted when MGMT manages rebase interval\\r\\n    /// @param rebaseInterval           interval (in seconds) between rebases\\r\\n    event RebaseIntervalManaged(\\r\\n        uint256 indexed rebaseInterval\\r\\n    );\\r\\n\\r\\n    /// @notice                         emitted when MGMT manages minPrice\\r\\n    /// @param minPrice                 minPrice used for rebase calculations\\r\\n    event MinPriceManaged(\\r\\n        uint256 indexed minPrice\\r\\n    );\\r\\n\\r\\n    /// @notice                         emitted when MGMT manages an address\\r\\n    /// @param _what                    index of address managed\\r\\n    /// @param _address                 updated address\\r\\n    event AddressManaged(\\r\\n        uint8 indexed _what,\\r\\n        address _address\\r\\n    );\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                  MODIFIERS                                 */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    modifier onlyRoles(bytes32 role0, bytes32 role1) {\\r\\n        require(hasRole(role0, msg.sender) || hasRole(role1, msg.sender));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                               INITIALIZATION                               */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    /// @notice                 called instead of constructor on upgradeable contracts,\\r\\n    ///                         sets initial storage variables, initializes inherited\\r\\n    ///                         contracts, and pauses.\\r\\n    /// @param _CNV             address of CNV token\\r\\n    /// @param _COOP            address of COOP\\r\\n    /// @param _BONDS           address of BONDS contract\\r\\n    /// @param _VALUESHUTTLE    address of ValueShuttle contract\\r\\n    function initialize(\\r\\n        address _CNV,\\r\\n        address _COOP,\\r\\n        address _BONDS,\\r\\n        address _VALUESHUTTLE,\\r\\n        address _treasury,\\r\\n        address _policy,\\r\\n        uint256 _coopRatePriceControl,\\r\\n        uint256 _haogegeControl,\\r\\n        uint256 _coopRateMax,\\r\\n        uint256 _minPrice,\\r\\n        uint256 _rebaseInterval\\r\\n    ) external virtual initializer {\\r\\n\\r\\n        require(CNV == address(0), \\\"!initialized\\\");\\r\\n\\r\\n        CNV = _CNV;\\r\\n        COOP = _COOP;\\r\\n        BONDS = _BONDS;\\r\\n        VALUESHUTTLE = _VALUESHUTTLE;\\r\\n\\r\\n        coopRatePriceControl = _coopRatePriceControl;\\r\\n        haogegeControl = _haogegeControl;\\r\\n        coopRateMax = _coopRateMax;\\r\\n        minPrice = _minPrice;\\r\\n        rebaseInterval = _rebaseInterval;\\r\\n\\r\\n        lastRebaseTime = block.timestamp;\\r\\n\\r\\n        __Context_init();\\r\\n        __AccessControl_init();\\r\\n        __ERC165_init();\\r\\n        __Pausable_init();\\r\\n        __ERC721_init(\\\"Liquid Staked CNV\\\", \\\"lsdCNV\\\");\\r\\n\\r\\n        _grantRole(TREASURY_ROLE, _treasury);\\r\\n        _grantRole(POLICY_ROLE, _policy);\\r\\n\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                              LOCK/UNLOCK LOGIC                             */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    /// @notice                  lock CNV into a pool using eip-2612 permit\\r\\n    ///                          (https://eips.ethereum.org/EIPS/eip-2612)\\r\\n    /// @param  to               address to which lock position will be assigned to\\r\\n    /// @param  input            amount of CNV to lock\\r\\n    /// @param  pid              pool ID to lock into\\r\\n    /// @param  permitDeadline   deadline for eip-2612 signature\\r\\n    /// @param  v                eip-2612 signature\\r\\n    /// @param  r                eip-2612 signature\\r\\n    /// @param  s                eip-2612 signature\\r\\n    /// @return tokenId          ERC721 token ID of lock\\r\\n    function lockWithPermit(\\r\\n        address to,\\r\\n        uint256 input,\\r\\n        uint256 pid,\\r\\n        uint256 permitDeadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual whenNotPaused returns(uint256 tokenId) {\\r\\n        // Approve tokens for spender - https://eips.ethereum.org/EIPS/eip-2612\\r\\n        ICNV(CNV).permit(msg.sender, address(this), input, permitDeadline, v, r, s);\\r\\n\\r\\n        tokenId = _lock(to,input,pid);\\r\\n    }\\r\\n\\r\\n    /// @notice                  lock CNV into a pool\\r\\n    /// @param  to               address to which lock position will be assigned to\\r\\n    /// @param  input            amount of CNV to lock\\r\\n    /// @param  pid              pool ID to lock into\\r\\n    /// @return tokenId          ERC721 token ID of lock\\r\\n    function lock(\\r\\n        address to,\\r\\n        uint256 input,\\r\\n        uint256 pid\\r\\n    ) external virtual whenNotPaused returns(uint256 tokenId) {\\r\\n        tokenId = _lock(to,input,pid);\\r\\n    }\\r\\n\\r\\n    /// @notice                  unlock position and withdraw due CNV\\r\\n    /// @param  to               address to which due CNV will be sent to\\r\\n    /// @param  tokenId          ERC721 token ID of lock\\r\\n    /// @return amountOut        amount of CNV due\\r\\n    function unlock(\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external virtual whenNotPaused returns (uint256 amountOut) {\\r\\n        // F6: CHECKS\\r\\n\\r\\n        // Check that caller is owner of position to be unlocked\\r\\n        require(ownerOf(tokenId) == msg.sender, \\\"!OWNER\\\");\\r\\n        // Fetch position storage to memory\\r\\n        Position memory position = positions[tokenId];\\r\\n        // Check that position has matured\\r\\n        require(position.maturity <= block.timestamp, \\\"!TIME\\\");\\r\\n\\r\\n        // F6: EFFECTS\\r\\n\\r\\n        // C2: avoid reading state multiple times\\r\\n        uint256 shares = position.shares;\\r\\n        uint256 poolID = position.poolID;\\r\\n        Pool storage pool = pools[poolID];\\r\\n        // Calculate base amount obligated to user\\r\\n        uint256 baseObligation = shares.fmul(_poolIndex(pool.balance, pool.supply), 1e18);\\r\\n        // Calculate excess amount obligated to user\\r\\n        uint256 excessObligation = shares.fmul(pool.rewardsPerShare, 1e18) - position.rewardDebt;\\r\\n        // Calculate \\\"amountOut\\\" due to user\\r\\n        amountOut = baseObligation + excessObligation;\\r\\n\\r\\n        lockedExcessRewards -= excessObligation;\\r\\n\\r\\n        // Subtract users baseObligation and shares from pool storage\\r\\n        pool.balance -= baseObligation;\\r\\n        pool.supply -= shares;\\r\\n        // C38: Delete keyword used when setting a variable to a zero value for refund\\r\\n        delete positions[tokenId];\\r\\n        // Transfer user \\\"amountOut\\\" (baseObligation + excessObligation rewards)\\r\\n        TransferHelper.safeTransfer(CNV, to, amountOut);\\r\\n        // T2: Events emitted for every storage mutating function.\\r\\n        emit Unlock(amountOut, poolID, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice             called to assign anti-dilution and excess rewards to\\r\\n    ///                     locks based on bonding that occured since last rebase\\r\\n    /// returns vebase      whether a rebase took place\\r\\n    function rebase() external virtual whenNotPaused returns (bool vebase) {\\r\\n        if (block.timestamp >= lastRebaseTime + rebaseInterval) {\\r\\n            uint256 incentive = rebaseIncentive;\\r\\n            (uint256 eCOOP, uint256 eStakers, uint256 CNVS) = _rebase(incentive);\\r\\n            ICNV(CNV).mint(COOP, eCOOP);\\r\\n            ICNV(CNV).mint(address(this), eStakers);\\r\\n            ICNV(CNV).mint(msg.sender, incentive);\\r\\n            emit Rebase(eStakers, eCOOP, CNVS);\\r\\n            vebase = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n    // UTILS\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /// @notice     to view length of pools array\\r\\n    /// returns     length of pools array\\r\\n    function lockPoolsLength() external virtual view returns (uint256) {\\r\\n        return pools.length;\\r\\n    }\\r\\n\\r\\n    /// @notice             calculate index of a pool based on balance and supply\\r\\n    /// @param   _bal       balance of CNV in pool\\r\\n    /// @param   _supply    supply of shares in pool\\r\\n    /// returns index       pool index\\r\\n    function _poolIndex(\\r\\n        uint256 _bal,\\r\\n        uint256 _supply\\r\\n    ) public pure virtual returns (uint256) {\\r\\n        if (_bal + _supply == 0) return 1e18;\\r\\n        return uint256(1e18).fmul(_bal, _supply);\\r\\n    }\\r\\n\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n    // _lock logic\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n\\r\\n    function viewPositionRewards(\\r\\n        uint256 tokenId\\r\\n    ) external virtual view returns(\\r\\n        uint256 amountDeposited,\\r\\n        uint256 baseRewards,\\r\\n        uint256 excessRewards,\\r\\n        uint256 totalRewards\\r\\n    ) {\\r\\n        // Fetch position storage to memory\\r\\n        Position memory position = positions[tokenId];\\r\\n\\r\\n        uint256 shares = position.shares;\\r\\n        uint256 poolID = position.poolID;\\r\\n\\r\\n        amountDeposited = position.deposit;\\r\\n\\r\\n        Pool memory pool = pools[poolID];\\r\\n\\r\\n        // Calculate base amount obligated to user\\r\\n        baseRewards = shares.fmul(_poolIndex(pool.balance, pool.supply), 1e18);\\r\\n        // Calculate excess amount obligated to user\\r\\n        excessRewards = shares.fmul(pool.rewardsPerShare, 1e18) - position.rewardDebt;\\r\\n        // Calculate \\\"totalRewards\\\" due to user\\r\\n        totalRewards = baseRewards + excessRewards;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice             calculate how many CNV can be locked into a pool before\\r\\n    ///                     it reaches a cap.\\r\\n    /// @param   poolNum    index of pool\\r\\n    /// returns cap         number of CNV that can be locked in pool\\r\\n    /// @dev\\r\\n    /// 1 - coopRateMax - (1 - coopRateMax)/minPrice > lg/cnvs\\r\\n    /// (1 - coopRateMax - (1 - coopRateMax)/minPrice)*cnvs > lg1 + lg2 + lg3 + lg4\\r\\n    /// (1 - coopRateMax - (1 - coopRateMax)/minPrice)*cnvs - lg1 - lg2 - lg3 > bal_4*g_4\\r\\n    /// ((1 - coopRateMax - (1 - coopRateMax)/minPrice)*cnvs - lg1 - lg2 - lg3)/g_4 > bal_4\\r\\n    /// 1 - coopRateMax - (1 - coopRateMax)/minPrice > lg/cnvs\\r\\n    /// lhs > lg/cnvs\\r\\n    /// lhs * cnvs - lg > bal_n * g_n\\r\\n    /// (lhs * cnvs - lg)/g_n - bal_n > 0\\r\\n    function viewStakingCap(uint256 poolNum) public view virtual returns(uint256) {\\r\\n\\r\\n        uint256 lhs = 1e18 - coopRateMax - uint256(1e18 - coopRateMax).fmul(1e18, minPrice);\\r\\n\\r\\n        uint256 lgm;\\r\\n        // Avoid fetching length each loop to save gas\\r\\n        uint256 poolsLength = pools.length;\\r\\n        // Iterate through pool balances to calculate lgm\\r\\n        for (uint256 i; i < poolsLength;) {\\r\\n            // calculate lgm for all pools except selected pool since that will\\r\\n            // be solved for\\r\\n            if (poolNum != i) {\\r\\n                Pool memory lp = pools[i];\\r\\n                uint256 _balance = lp.balance;\\r\\n                if (_balance != 0) lgm += _balance.fmul(lp.g, 1e18);\\r\\n            }\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n        Pool memory lp = pools[poolNum];\\r\\n        return (lhs * (circulatingSupply() - IAccrualBondsV1(BONDS).cnvEmitted()) / 1e18 - lgm) * 1e18/lp.g - lp.balance;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _lock(\\r\\n        address to,\\r\\n        uint256 input,\\r\\n        uint256 pid\\r\\n    ) internal virtual returns(uint256 tokenId) {\\r\\n        // F6: CHECKS\\r\\n\\r\\n        // Fetch pool storage from pools mapping\\r\\n        Pool storage pool = pools[pid];\\r\\n        // C2: avoid reading state multiple times\\r\\n        uint256 shares = input.fmul(1e18, _poolIndex(pool.balance, pool.supply));\\r\\n        uint256 rewardDebt = shares.fmul(pool.rewardsPerShare, 1e18);\\r\\n        // Pull users stake (CNV) to this contract\\r\\n        TransferHelper.safeTransferFrom(CNV, msg.sender, address(this), input);\\r\\n        // Optimistically mutate state to calculate lgm, REVIEW F6: possible reentrance issue\\r\\n        pool.balance += input;\\r\\n        pool.supply += shares;\\r\\n        // Create lgm variable to be used in below calculation\\r\\n        uint256 lgm;\\r\\n        // Avoid fetching length each loop to save gas\\r\\n        uint256 poolsLength = pools.length;\\r\\n\\r\\n        // Iterate through pool balances to calculate lgm\\r\\n        for (uint256 i; i < poolsLength;) {\\r\\n            Pool memory lp = pools[i];\\r\\n            uint256 _balance = lp.balance;\\r\\n            if (_balance != 0) lgm += _balance.fmul(lp.g, 1e18);\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n\\r\\n        // Check that staking cap is still satisfied\\r\\n        uint256 lhs = 1e18 - coopRateMax - uint256(1e18 - coopRateMax).fmul(1e18, minPrice);\\r\\n        uint256 rhs = lgm.fmul(1e18, circulatingSupply() - IAccrualBondsV1(BONDS).cnvEmitted());\\r\\n        require(lhs > rhs, \\\"CAP\\\");\\r\\n\\r\\n        // F6: EFFECTS\\r\\n\\r\\n        // Increment totalSupply to account for new nft\\r\\n        unchecked { ++totalSupply; }\\r\\n        // Set return value, users nft id\\r\\n        tokenId = totalSupply;\\r\\n        // Store users position info\\r\\n        positions[tokenId] = Position(\\r\\n            uint32(pid),\\r\\n            uint224(shares),\\r\\n            uint32(block.timestamp + pool.term),\\r\\n            uint224(rewardDebt),\\r\\n            input\\r\\n        );\\r\\n        // Mint caller nft that represents their stake\\r\\n        _mint(to, tokenId);\\r\\n        // T2: Events emitted for every storage mutating function.\\r\\n        emit Lock(input, pid, tokenId, msg.sender);\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n    // REBASE\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    function _rebase(\\r\\n        uint256 eRI\\r\\n    ) internal virtual returns (uint256 eCOOP, uint256 eStakers, uint256 CNVS) {\\r\\n\\r\\n        uint256 value = IValueShuttle(VALUESHUTTLE).shuttleValue();\\r\\n        uint256 amountOut = IAccrualBondsV1(BONDS).cnvEmitted();\\r\\n        uint256 poolsLength = pools.length;\\r\\n        CNVS = circulatingSupply() - amountOut;\\r\\n        eCOOP = uint256(value - amountOut).fmul(_calculateCOOPRate(value, amountOut), 1e18);\\r\\n        uint256 lgm;\\r\\n        uint256 erm;\\r\\n\\r\\n        for (uint256 i; i < poolsLength;) {\\r\\n            Pool memory lp = pools[i];\\r\\n            uint256 balance = lp.balance;\\r\\n            if (balance != 0) {\\r\\n                lgm += balance.fmul(lp.g, 1e18);\\r\\n                erm += balance.fmul(lp.excessRatio, 1e18);\\r\\n            }\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n\\r\\n        uint256 emissions = uint256(amountOut + eCOOP + eRI).fmul(1e18, 1e18 - lgm.fmul(1e18, CNVS));\\r\\n        uint256 g = emissions.fmul(1e18, CNVS);\\r\\n        uint256 excessObligation = (value - emissions) + globalExcess;\\r\\n        uint256 excessRewards = CNVS.fmul(apyPerRebase, 1e18);\\r\\n        if (excessRewards > excessObligation) excessRewards = excessObligation;\\r\\n        uint256 excessMultiplier = erm != 0 ? excessRewards.fmul(1e18, erm) : 0;\\r\\n        (uint256 eStakersAD, uint256 excessConsumed) = _distribute(poolsLength, g, excessMultiplier);\\r\\n\\r\\n        lockedExcessRewards += excessConsumed;\\r\\n        globalExcess = excessObligation - excessConsumed;\\r\\n\\r\\n        // delete cnvEmitted;\\r\\n        require(IAccrualBondsV1(BONDS).vebase());\\r\\n        lastRebaseTime = block.timestamp;\\r\\n        eStakers = eStakersAD + excessConsumed;\\r\\n    }\\r\\n\\r\\n    function _distribute(\\r\\n        uint256 poolsLength,\\r\\n        uint256 g,\\r\\n        uint256 excessMultiplier\\r\\n    ) internal virtual returns(uint256 eStakers, uint256 excessConsumed) {\\r\\n        for (uint256 i; i < poolsLength;) {\\r\\n            Pool storage pool =  pools[i];\\r\\n            uint256 balance = pool.balance;\\r\\n            uint256 supply = pool.supply;\\r\\n\\r\\n            if (balance != 0 && supply != 0) {\\r\\n                uint256 baseObligation = g.fmul(pool.g.fmul(balance, 1e18), 1e18);\\r\\n                uint256 excessObligation = excessMultiplier.fmul(balance, 1e18).fmul(pool.excessRatio, 1e18);\\r\\n                emit PoolRewarded(\\r\\n                    i,\\r\\n                    baseObligation,\\r\\n                    excessObligation,\\r\\n                    pool.balance\\r\\n                );\\r\\n                pool.balance = balance + baseObligation;\\r\\n                pool.rewardsPerShare += excessObligation.fmul(1e18, supply);\\r\\n                eStakers += baseObligation;\\r\\n                excessConsumed += excessObligation;\\r\\n            }\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice             calculates the effective rate of CNV for COOP on rebase\\r\\n    /// @param   _value     amount of value accumulated during rebase\\r\\n    /// @param   _cnvOut    amount of CNV emmitted during rebase\\r\\n    /// returns coopRate    effective rate of amount distributed to COOP\\r\\n    function _calculateCOOPRate(\\r\\n        uint256 _value,\\r\\n        uint256 _cnvOut\\r\\n    ) public view virtual returns (uint256) {\\r\\n\\r\\n        if (_cnvOut == 0) return _value;\\r\\n        uint256 _bondPrice = _value.fmul(1e18, _cnvOut);\\r\\n\\r\\n        uint256 coopRate = (coopRatePriceControl * 1e18 / _bondPrice * haogegeControl) / 1e18;\\r\\n        if (coopRate > coopRateMax) return coopRateMax;\\r\\n        return coopRate;\\r\\n    }\\r\\n\\r\\n    /// @notice          calculates available circulating CNV supply. This number\\r\\n    ///                  is equal to the total amount of minted CNV minus the amount\\r\\n    ///                  of CNV that has been minted to the Bond contract but has\\r\\n    ///                  not yet been sold.\\r\\n    /// returns supply   available supply\\r\\n    function circulatingSupply() public view virtual returns(uint256) {\\r\\n        return ICNV(CNV).totalSupply() - IAccrualBondsV1(BONDS).getAvailableSupply() - lockedExcessRewards;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                              ERC721.tokenURI()                             */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n\\r\\n    /// @notice             returns data for NFT display of lock position\\r\\n    /// @param id           ID of lock position\\r\\n    /// returns             returns lock position NFT image\\r\\n    function tokenURI(uint256 id) public view override returns (string memory) {\\r\\n        if (URI_ADDRESS != address(0)) return IERC721(URI_ADDRESS).tokenURI(id);\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                              MANAGEMENT LOGIC                              */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n\\r\\n    /// @notice                 used by MGMT to open a new lock pool\\r\\n    /// @param _term            length of lock period in seconds\\r\\n    /// @param _g               CNV supply growth assigned to this pool\\r\\n    /// @param _excessRatio     ratio of excess rewards for this pool\\r\\n    function openLockPool(\\r\\n        uint64 _term,\\r\\n        uint256 _g,\\r\\n        uint256 _excessRatio\\r\\n    ) external virtual onlyRole(TREASURY_ROLE) {\\r\\n        pools.push(Pool(_term, _g, _excessRatio, 0, 0, 0));\\r\\n\\r\\n        emit PoolOpened(_term,_g,_excessRatio,pools.length-1);\\r\\n    }\\r\\n\\r\\n    /// @notice                 used by MGMT to edit an existing lock pool\\r\\n    /// @param poolID           ID of pool to manage\\r\\n    /// @param _term            length of lock period in seconds\\r\\n    /// @param _g               CNV supply growth assigned to this pool\\r\\n    /// @param _excessRatio     ratio of excess rewards for this pool\\r\\n    function manageLockPool(\\r\\n        uint256 poolID,\\r\\n        uint64 _term,\\r\\n        uint256 _g,\\r\\n        uint256 _excessRatio\\r\\n    ) external virtual onlyRoles(POLICY_ROLE, TREASURY_ROLE) {\\r\\n\\r\\n        Pool storage pool = pools[poolID];\\r\\n        (pool.term, pool.g, pool.excessRatio) = (_term, _g, _excessRatio);\\r\\n\\r\\n        emit PoolOpened(_term,_g,_excessRatio,poolID);\\r\\n    }\\r\\n\\r\\n    /// @notice                         used by MGMT to edit parameters used\\r\\n    ///                                 to calculate dynamic COOP rate\\r\\n    /// @param _coopRatePriceControl    price control\\r\\n    /// @param _haogegeControl          rate control\\r\\n    /// @param _coopRateMax             max rate\\r\\n    function setCOOPParameters(\\r\\n        uint256 _coopRatePriceControl,\\r\\n        uint256 _haogegeControl,\\r\\n        uint256 _coopRateMax\\r\\n    ) external virtual onlyRoles(POLICY_ROLE, TREASURY_ROLE) {\\r\\n\\r\\n        coopRatePriceControl = _coopRatePriceControl;\\r\\n        haogegeControl = _haogegeControl;\\r\\n        coopRateMax = _coopRateMax;\\r\\n\\r\\n        emit CoopRateManaged(_coopRatePriceControl,_haogegeControl,_coopRateMax);\\r\\n    }\\r\\n\\r\\n    function manualExcessDistribution(\\r\\n        uint256[] memory amounts\\r\\n    ) external virtual onlyRoles(POLICY_ROLE, TREASURY_ROLE) {\\r\\n\\r\\n        uint256 length = amounts.length;\\r\\n        uint256 toDistribute;\\r\\n        for (uint256 i; i < length;) {\\r\\n            Pool storage pool = pools[i];\\r\\n            uint256 amount = amounts[i];\\r\\n            pool.rewardsPerShare += amount.fmul(1e18, pool.supply);\\r\\n            toDistribute += amount;\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n        uint256 ge = globalExcess;\\r\\n        require(toDistribute <= ge,\\\"EXCEEDS_EXCESS\\\");\\r\\n        globalExcess = ge - toDistribute;\\r\\n        ICNV(CNV).mint(address(this), toDistribute);\\r\\n\\r\\n        emit ExcessRewardsDistributed(toDistribute,globalExcess);\\r\\n    }\\r\\n\\r\\n    /// @notice         used by MGMT to update APY per rebase parameter\\r\\n    /// @param  _apy    updated APY parameter\\r\\n    function setAPYPerRebase(\\r\\n        uint256 _apy\\r\\n    ) external virtual onlyRoles(POLICY_ROLE, TREASURY_ROLE) {\\r\\n        apyPerRebase = _apy;\\r\\n\\r\\n        emit RebaseAPYManaged(_apy);\\r\\n    }\\r\\n\\r\\n    /// @notice                     used by MGMT to update rebase incentive\\r\\n    /// @param  _rebaseIncentive    updated rebase incentive\\r\\n    function setRebaseIncentive(\\r\\n        uint256 _rebaseIncentive\\r\\n    ) external virtual onlyRoles(POLICY_ROLE, TREASURY_ROLE) {\\r\\n        rebaseIncentive = _rebaseIncentive;\\r\\n\\r\\n        emit RebaseIncentiveManaged(rebaseIncentive);\\r\\n    }\\r\\n\\r\\n    /// @notice                     used by MGMT to update rebase interval\\r\\n    /// @param  _rebaseInterval     updated rebase interval (seconds)\\r\\n    function setRebaseInterval(\\r\\n        uint256 _rebaseInterval\\r\\n    ) external virtual onlyRoles(POLICY_ROLE, TREASURY_ROLE) {\\r\\n        rebaseInterval = _rebaseInterval;\\r\\n\\r\\n        emit RebaseIntervalManaged(rebaseInterval);\\r\\n    }\\r\\n\\r\\n    /// @notice                 used by MGMT to update min price for anti-dilution\\r\\n    ///                         calculations\\r\\n    /// @param  _minPrice       updated min price\\r\\n    function setMinPrice(\\r\\n        uint256 _minPrice\\r\\n    ) external virtual onlyRoles(POLICY_ROLE, TREASURY_ROLE) {\\r\\n        minPrice = _minPrice;\\r\\n\\r\\n        emit MinPriceManaged(minPrice);\\r\\n    }\\r\\n\\r\\n    /// @notice             used by MGMT to pause/unpause contract\\r\\n    /// @param  _toPause    whether contract is paused\\r\\n    function setPause(\\r\\n        bool _toPause\\r\\n    ) external virtual onlyRoles(POLICY_ROLE, TREASURY_ROLE) {\\r\\n        if (_toPause) _pause();\\r\\n        else _unpause();\\r\\n    }\\r\\n\\r\\n    /// @notice             used by MGMT to update an address.\\r\\n    ///                     0 = CNV\\r\\n    ///                     1 = BONDS\\r\\n    ///                     2 = COOP\\r\\n    ///                     3 = VALUESHUTTLE\\r\\n    ///                     4 = URI_ADDRESS\\r\\n    /// @param  _what       index of address to update\\r\\n    /// @param  _address    updated address\\r\\n    function setAddress(\\r\\n        uint8 _what,\\r\\n        address _address\\r\\n    ) external virtual onlyRoles(POLICY_ROLE, TREASURY_ROLE) {\\r\\n\\r\\n        require(_what < 5,\\\"BAD\\\");\\r\\n\\r\\n        if (_what == 0) {\\r\\n            CNV = _address;\\r\\n        } else if (_what == 1) {\\r\\n            BONDS = _address;\\r\\n        } else if (_what == 2) {\\r\\n            COOP = _address;\\r\\n        } else if (_what == 3) {\\r\\n            VALUESHUTTLE = _address;\\r\\n        } else {\\r\\n            URI_ADDRESS = _address;\\r\\n        }\\r\\n\\r\\n        emit AddressManaged(_what, _address);\\r\\n    }\\r\\n\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, AccessControlUpgradeable) returns (bool) {\\r\\n        return ERC721Upgradeable.supportsInterface(interfaceId) || AccessControlUpgradeable.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*///////////////////////////////////////////////////////////////\\n                            COMMON BASE UNITS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant YAD = 1e8;\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant RAD = 1e45;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                         FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function fmul(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(x == 0 || (x * y) / x == y)\\n            if iszero(or(iszero(x), eq(div(z, x), y))) {\\n                revert(0, 0)\\n            }\\n\\n            // If baseUnit is zero this will return zero instead of reverting.\\n            z := div(z, baseUnit)\\n        }\\n    }\\n\\n    function fdiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * baseUnit in z for now.\\n            z := mul(x, baseUnit)\\n\\n            // Equivalent to require(y != 0 && (x == 0 || (x * baseUnit) / x == baseUnit))\\n            if iszero(and(iszero(iszero(y)), or(iszero(x), eq(div(z, x), baseUnit)))) {\\n                revert(0, 0)\\n            }\\n\\n            // We ensure y is not zero above, so there is never division by zero here.\\n            z := div(z, y)\\n        }\\n    }\\n\\n    function fpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 baseUnit\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := baseUnit\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store baseUnit in z for now.\\n                    z := baseUnit\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, baseUnit)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, baseUnit)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, baseUnit)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z)\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z)\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z)\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAccrualBondsV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IAccrualBondsV1 {\\n\\n  /// @notice Access Control Roles\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n  function POLICY_ROLE() external view returns (bytes32);\\n  function STAKING_ROLE() external view returns (bytes32);\\n  function TREASURY_ROLE() external view returns (bytes32);\\n\\n  /// @notice Treasury Methods\\n  function setBeneficiary(address accrualTo) external;\\n  function setPolicyMintAllowance(uint256 mintAllowance) external;\\n  function addQuoteAsset(address token, uint256 virtualReserves, uint256 halfLife, uint256 levelBips) external;\\n  function grantRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function pause() external;\\n  function unpause() external;\\n\\n  /// @notice Treasury + Policy Methods\\n  function removeQuoteAsset(address token) external;\\n  function policyUpdate(uint256 supplyDelta, bool positiveDelta, uint256 percentToConvert, uint256 newVirtualOutputReserves, address[] memory tokens, uint256[] memory virtualReserves, uint256[] memory halfLives, uint256[] memory levelBips, bool[] memory updateElapsed) external;\\n\\n  /// @notice User Methods\\n  function purchaseBond(address recipient, address token, uint256 input, uint256 minOutput) external returns (uint256 output);\\n  function purchaseBondUsingPermit(address recipient, address token, uint256 input, uint256 minOutput, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (uint256 output);\\n  function redeemBond(address recipient, uint256 bondId) external returns (uint256 output);\\n  function redeemBondBatch(address recipient, uint256[] memory bondIds) external returns (uint256 output);\\n  function transferBond(address recipient, uint256 bondId) external;\\n\\n  /// @notice View Methods\\n  function getAmountOut(address token, uint256 input) external view returns (uint256 output);\\n  function getAvailableSupply() external view returns (uint256);\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n  function getSpotPrice(address token) external view returns (uint256);\\n  function getUserPositionCount(address guy) external view returns (uint256);\\n  function paused() external view returns (bool);\\n  function outputToken() external view returns (address);\\n  function term() external view returns (uint256);\\n  function totalAssets() external view returns (uint256);\\n  function totalDebt() external view returns (uint256);\\n  function beneficiary() external view returns (address);\\n  function cnvEmitted() external view returns (uint256);\\n  function virtualOutputReserves() external view returns (uint256);\\n  function policyMintAllowance() external view returns (uint256);\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n  function positions(address, uint256) external view returns (uint256 owed, uint256 redeemed, uint256 creation);\\n  function quoteInfo(address) external view returns (uint256 virtualReserves, uint256 lastUpdate, uint256 halfLife, uint256 levelBips);\\n\\n  /// @notice Staking Methods\\n  function vebase() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/StakingStorageV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >= 0.8.0;\\r\\n\\r\\n/// @dev\\r\\n/// A `Pool` refers to the different \\\"pools\\\" users can lock their CNV into.\\r\\n///\\r\\n/// When a user locks into a `Pool`, their CNV cannot be withdrawn for a duration\\r\\n/// of `term` seconds. The amount a user locks determines the amount of shares\\r\\n/// they get of this `Pool`. This amount of shares is calculated by:\\r\\n///\\r\\n/// shares = amount * (pool.balance / pool.supply)\\r\\n///\\r\\n/// The pool `balance` is then increased by the amount locked, and the pool\\r\\n/// `supply` is increased by the amount of shares.\\r\\n///\\r\\n/// On each rebase the percent change in CNV since last rebase is calculated,\\r\\n/// and `g` determines how much of that percent change will be assigned to the\\r\\n/// Pool. For example - if CNV supply increased by 10%, and `g` for a specific\\r\\n/// pool is g=100%, then that pool will obtain a 10% increase in supply. These\\r\\n/// are referred to as \\\"anti-dilutive rewards\\\". This increase in supply is\\r\\n/// reflected by increasing the `balance` of the pool.\\r\\n///\\r\\n/// Additionally, on each rebase there are \\\"excess rewards\\\" given to each pool.\\r\\n/// The amount of excess rewards each pool gets is determined by `excessRatio`,\\r\\n/// and unlike \\\"anti-dilutive rewards\\\" these rewards are reflected by increasing\\r\\n/// the `rewardsPerShare`.\\r\\n///\\r\\n/// When users unlock, the amount of shares they own is converted to an amount\\r\\n/// of CNV:\\r\\n///\\r\\n/// amount = shares / (pool.balance / pool.supply)\\r\\n///\\r\\n/// this amount is then reduced from pool.balance, and the shares are reduced\\r\\n/// from pool.supply.\\r\\nstruct Pool {\\r\\n    uint64  term;                   // length in seconds a user must lock\\r\\n    uint256 g;                      // pct of CNV supply growth to be matched to this pool on each rebase\\r\\n    uint256 excessRatio;            // ratio of excess rewards for this pool on each rebase\\r\\n    uint256 balance;                // balance of CNV locked (amount locked + anti-dilutive rewards)\\r\\n    uint256 supply;                 // supply of shares of this pool assigned to users when they lock\\r\\n    uint256 rewardsPerShare;        // index of excess rewards for each share\\r\\n}\\r\\n\\r\\n/// @dev\\r\\n/// A `Position` refers to a users \\\"position\\\" when they lock into a Pool.\\r\\n///\\r\\n/// When a user locks into a Pool, they obtain a `Position` which contains the\\r\\n/// `maturity` which is used to check when they can unlock their CNV, a `poolID`\\r\\n/// which is used to then convert the amount of `shares` they own of that pool\\r\\n/// into CNV, `shares` which is the number of shares they own of that pool to be\\r\\n/// later converted into CNV, and `rewardDebt` which reflects the index of\\r\\n/// pool rewardsPerShare at the time they entered the pool. This value is used\\r\\n/// so that when they unlock, they only get the difference of current rewardsPerShare\\r\\n/// and `rewardDebt`, thus only getting excess rewards for the time they were in\\r\\n/// the pool and not for rewards distrobuted before they entered the Pool.\\r\\nstruct Position {\\r\\n    uint32  poolID;                  // ID of pool to which position belongs to\\r\\n    uint224 shares;                  // amount of pool shares assigned to this position\\r\\n    uint32  maturity;                // timestamp when lock position can be unlocked\\r\\n    uint224 rewardDebt;              // index of rewardsPerShare at time of entering pool\\r\\n    uint256 deposit;                 // amount of CNV initially deposited on lock\\r\\n}\\r\\n\\r\\ncontract StakingStorageV1 {\\r\\n\\r\\n    /// @notice address of CNV ERC20 token, used to mint CNV rewards to this contract.\\r\\n    address public CNV;\\r\\n\\r\\n    /// @notice address of Bonding contract, used to retrieve information regarding\\r\\n    /// bonding activity in a given rebase interval.\\r\\n    address public BONDS;\\r\\n\\r\\n    /// @notice address of COOP to send COOP funds to.\\r\\n    address public COOP;\\r\\n\\r\\n    /// @notice address of `ValueShuttle` contract. When Bonding occurs on\\r\\n    /// `Bonding` contract, it sends all incoming bonded value to `VALUESHUTTLE`.\\r\\n    /// Then during rebase, this contract calls `VALUESHUTTLE` to obtain\\r\\n    /// the USD denominated value of bonding activity during rebase and instructs\\r\\n    /// `ValueShuttle` to empty the funds to the Treasury.\\r\\n    address public VALUESHUTTLE;\\r\\n\\r\\n    /// @notice address of contract in charge of displaying lock position NFT\\r\\n    address public URI_ADDRESS;\\r\\n\\r\\n    /// @notice array containing pool info\\r\\n    Pool[] public pools;\\r\\n\\r\\n    /// @notice time in seconds that must pass before next rebase\\r\\n    uint256 public rebaseInterval;\\r\\n\\r\\n    /// @notice as an incentive for the public to call the \\\"rebase()\\\" method, and\\r\\n    /// to not increase the gas of lock() and unlock() methods by including rebase\\r\\n    /// in those methods, a rebase incentive is provided. This is an amount of CNV\\r\\n    /// that will be transferred to callers of the \\\"rebase()\\\" method.\\r\\n    uint256 public rebaseIncentive;\\r\\n\\r\\n    /// @notice pct of CNV supply to be rewarded as excess rewards.\\r\\n    /// @dev\\r\\n    /// During each rebase, after anti-dilution rewards have been assigned, an\\r\\n    /// additional \\\"excess rewards\\\" are distributed. The total amount of excess\\r\\n    /// rewards to be distributed among all pools is given as a percentage of\\r\\n    /// total CNV supply. For example - if apyPerRebase = 10%, then 10% of total\\r\\n    /// CNV supply will be distributed to pools as \\\"excess rewards\\\".\\r\\n    uint256 public apyPerRebase;\\r\\n\\r\\n    /// @notice amount of CNV available to mint without breaking backing.\\r\\n    /// @dev\\r\\n    /// During Bonding activity, by design there is more value being received\\r\\n    /// than CNV minted. This difference is accounted for in `globalExcess`.\\r\\n    /// For example, if during bonding activity $100 has been accumulated and\\r\\n    /// 70 CNV has been minted (for bonders, DAO, and anti-dilution rewards),\\r\\n    /// then `globalExcess` will be increased by 30.\\r\\n    ///\\r\\n    /// This number also determines the availability of \\\"excess rewards\\\" as\\r\\n    /// determined by `apyPerRebase`. For example - if a current rebase only\\r\\n    /// produced an excess of 10 CNV, and `apyPerRebase` indicates that 20 CNV\\r\\n    /// should be distributed, and `globalExcess` is 30, then rebasing will\\r\\n    /// use from `globalExcess` to distribute those rewards and thus reduce\\r\\n    /// globalExcess to 20.\\r\\n    /// For this same logic - this numbers serves as a floor on excess rewards\\r\\n    /// to prevent the protocol from minting more CNV than there is value in\\r\\n    /// the Treasury.\\r\\n    uint256 public globalExcess;\\r\\n\\r\\n    //////////////////////////////\\r\\n\\r\\n    /// @dev\\r\\n    /// used to calculate the amount of CNV during each rebase that goes to COOP.\\r\\n    /// see _calculateCOOPRate\\r\\n    uint256 public coopRatePriceControl;\\r\\n\\r\\n    /// @dev\\r\\n    /// used to calculate the amount of CNV during each rebase that goes to COOP.\\r\\n    /// see _calculateCOOPRate\\r\\n    uint256 public haogegeControl;\\r\\n\\r\\n    /// @dev\\r\\n    /// used to calculate the amount of CNV during each rebase that goes to COOP.\\r\\n    /// see _calculateCOOPRate\\r\\n    uint256 public coopRateMax;\\r\\n\\r\\n    /// @notice minimum CNV bond price denominated in USD (wad)\\r\\n    /// used to calculate staking cap during _lock()\\r\\n    uint256 public minPrice;\\r\\n\\r\\n    /// @notice time of last rebase, used to determine whether a rebase is due.\\r\\n    uint256 public lastRebaseTime;\\r\\n\\r\\n    /// @notice supply of lock position NFTs, used for positionID\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    /// @notice amount of excess rewards in lock positions\\r\\n    uint256 public lockedExcessRewards;\\r\\n\\r\\n    /// @notice mapping that returns position info for a given NFT\\r\\n    mapping(uint256 => Position) public positions;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"_what\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coopRatePriceControl\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_haogegeControl\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coopRateMax\",\"type\":\"uint256\"}],\"name\":\"CoopRateManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountDistributed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"globalExcess\",\"type\":\"uint256\"}],\"name\":\"ExcessRewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"MinPriceManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_term\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_g\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_excessRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"PoolManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"_term\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_g\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_excessRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"PoolOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"baseObligation\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"excessObligation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"PoolRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eStakers\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eCOOP\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"CNVS\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"RebaseAPYManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rebaseIncentive\",\"type\":\"uint256\"}],\"name\":\"RebaseIncentiveManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rebaseInterval\",\"type\":\"uint256\"}],\"name\":\"RebaseIntervalManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONDS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CNV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COOP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALUESHUTTLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cnvOut\",\"type\":\"uint256\"}],\"name\":\"_calculateCOOPRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"_poolIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apyPerRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coopRateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coopRatePriceControl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalExcess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haogegeControl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CNV\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_COOP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BONDS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_VALUESHUTTLE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coopRatePriceControl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_haogegeControl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coopRateMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseInterval\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"lockWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedExcessRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_term\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_g\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_excessRatio\",\"type\":\"uint256\"}],\"name\":\"manageLockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"manualExcessDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_term\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_g\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_excessRatio\",\"type\":\"uint256\"}],\"name\":\"openLockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"term\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"g\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excessRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"poolID\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"shares\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"maturity\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"rewardDebt\",\"type\":\"uint224\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"vebase\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"setAPYPerRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_what\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coopRatePriceControl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_haogegeControl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coopRateMax\",\"type\":\"uint256\"}],\"name\":\"setCOOPParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"}],\"name\":\"setMinPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_toPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseIncentive\",\"type\":\"uint256\"}],\"name\":\"setRebaseIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseInterval\",\"type\":\"uint256\"}],\"name\":\"setRebaseInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"viewPositionRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excessRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolNum\",\"type\":\"uint256\"}],\"name\":\"viewStakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingV1", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}