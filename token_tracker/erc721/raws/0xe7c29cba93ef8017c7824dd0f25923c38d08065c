{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FNDNFT721.sol\": {\r\n      \"content\": \"/*\\n  \uff65\\n   *\u3000\u2605\\n      \uff65 \uff61\\n        \u3000\uff65\u3000\uff9f\u2606 \uff61\\n  \u3000\u3000\u3000 *\u3000\u2605 \uff9f\uff65\uff61 *  \uff61\\n          \u3000\u3000* \u2606 \uff61\uff65\uff9f*.\uff61\\n      \u3000\u3000\u3000\uff9f *.\uff61\u2606\uff61\u2605\u3000\uff65\\n\u200b\\n                      `                     .-:::::-.`              `-::---...```\\n                     `-:`               .:+ssssoooo++//:.`       .-/+shhhhhhhhhhhhhyyyssooo:\\n                    .--::.            .+ossso+/////++/:://-`   .////+shhhhhhhhhhhhhhhhhhhhhy\\n                  `-----::.         `/+////+++///+++/:--:/+/-  -////+shhhhhhhhhhhhhhhhhhhhhy\\n                 `------:::-`      `//-.``.-/+ooosso+:-.-/oso- -////+shhhhhhhhhhhhhhhhhhhhhy\\n                .--------:::-`     :+:.`  .-/osyyyyyyso++syhyo.-////+shhhhhhhhhhhhhhhhhhhhhy\\n              `-----------:::-.    +o+:-.-:/oyhhhhhhdhhhhhdddy:-////+shhhhhhhhhhhhhhhhhhhhhy\\n             .------------::::--  `oys+/::/+shhhhhhhdddddddddy/-////+shhhhhhhhhhhhhhhhhhhhhy\\n            .--------------:::::-` +ys+////+yhhhhhhhddddddddhy:-////+yhhhhhhhhhhhhhhhhhhhhhy\\n          `----------------::::::-`.ss+/:::+oyhhhhhhhhhhhhhhho`-////+shhhhhhhhhhhhhhhhhhhhhy\\n         .------------------:::::::.-so//::/+osyyyhhhhhhhhhys` -////+shhhhhhhhhhhhhhhhhhhhhy\\n       `.-------------------::/:::::..+o+////+oosssyyyyyyys+`  .////+shhhhhhhhhhhhhhhhhhhhhy\\n       .--------------------::/:::.`   -+o++++++oooosssss/.     `-//+shhhhhhhhhhhhhhhhhhhhyo\\n     .-------   ``````.......--`        `-/+ooooosso+/-`          `./++++///:::--...``hhhhyo\\n                                              `````\\n   *\u3000\\n      \uff65 \uff61\\n\u3000\u3000\u3000\u3000\uff65\u3000\u3000\uff9f\u2606 \uff61\\n  \u3000\u3000\u3000 *\u3000\u2605 \uff9f\uff65\uff61 *  \uff61\\n          \u3000\u3000* \u2606 \uff61\uff65\uff9f*.\uff61\\n      \u3000\u3000\u3000\uff9f *.\uff61\u2606\uff61\u2605\u3000\uff65\\n    *\u3000\u3000\uff9f\uff61\u00b7*\uff65\uff61 \uff9f*\\n  \u3000\u3000\u3000\u2606\uff9f\uff65\uff61\u00b0*. \uff9f\\n\u3000 \uff65 \uff9f*\uff61\uff65\uff9f\u2605\uff61\\n\u3000\u3000\uff65 *\uff9f\uff61\u3000\u3000 *\\n\u3000\uff65\uff9f*\uff61\u2605\uff65\\n \u2606\u2234\uff61\u3000*\\n\uff65 \uff61\\n*/\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./mixins/OZ/ERC721Upgradeable.sol\\\";\\n\\nimport \\\"./mixins/FoundationTreasuryNode.sol\\\";\\nimport \\\"./mixins/roles/FoundationAdminRole.sol\\\";\\nimport \\\"./mixins/roles/FoundationOperatorRole.sol\\\";\\nimport \\\"./mixins/NFT721Core.sol\\\";\\nimport \\\"./mixins/NFT721Market.sol\\\";\\nimport \\\"./mixins/NFT721Creator.sol\\\";\\nimport \\\"./mixins/NFT721Metadata.sol\\\";\\nimport \\\"./mixins/NFT721Mint.sol\\\";\\nimport \\\"./mixins/NFT721ProxyCall.sol\\\";\\nimport \\\"./mixins/ERC165UpgradeableGap.sol\\\";\\n\\n/**\\n * @title Foundation NFTs implemented using the ERC-721 standard.\\n * @dev This top level file holds no data directly to ease future upgrades.\\n */\\ncontract FNDNFT721 is\\n  FoundationTreasuryNode,\\n  FoundationAdminRole,\\n  FoundationOperatorRole,\\n  ERC165UpgradeableGap,\\n  ERC165,\\n  ERC721Upgradeable,\\n  NFT721Core,\\n  NFT721ProxyCall,\\n  NFT721Creator,\\n  NFT721Market,\\n  NFT721Metadata,\\n  NFT721Mint\\n{\\n  /**\\n   * @notice Called once to configure the contract after the initial deployment.\\n   * @dev This farms the initialize call out to inherited contracts as needed.\\n   */\\n  function initialize(address payable treasury) public initializer {\\n    FoundationTreasuryNode._initializeFoundationTreasuryNode(treasury);\\n    ERC721Upgradeable.__ERC721_init();\\n    NFT721Mint._initializeNFT721Mint();\\n  }\\n\\n  /**\\n   * @notice Allows a Foundation admin to update NFT config variables.\\n   * @dev This must be called right after the initial call to `initialize`.\\n   */\\n  function adminUpdateConfig(\\n    address _nftMarket,\\n    string memory baseURI,\\n    address proxyCallContract\\n  ) public onlyFoundationAdmin {\\n    _updateNFTMarket(_nftMarket);\\n    _updateBaseURI(baseURI);\\n    _updateProxyCall(proxyCallContract);\\n  }\\n\\n  /**\\n   * @dev This is a no-op, just an explicit override to address compile errors due to inheritance.\\n   */\\n  function _burn(uint256 tokenId) internal override(ERC721Upgradeable, NFT721Creator, NFT721Metadata, NFT721Mint) {\\n    super._burn(tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC165, NFT721Mint, ERC721Upgradeable, NFT721Creator, NFT721Market)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/OZ/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable\\n\\n/**\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v3.4.0/contracts/token/ERC721/ERC721Upgradeable.sol\\n * Modified in order to:\\n *  - make `_tokenURIs` internal instead of private.\\n *  - replace ERC165Upgradeable with ERC165.\\n *  - set the name/symbol with constants.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../ERC165UpgradeableGap.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721Upgradeable is\\n  Initializable,\\n  ContextUpgradeable,\\n  ERC165UpgradeableGap,\\n  ERC165,\\n  IERC721,\\n  IERC721Metadata,\\n  IERC721Enumerable\\n{\\n  using AddressUpgradeable for address;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n  using Strings for uint256;\\n\\n  // Mapping from holder address to their (enumerable) set of owned tokens\\n  mapping(address => EnumerableSet.UintSet) private _holderTokens;\\n\\n  // Enumerable mapping from token ids to their owners\\n  EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  // Token name\\n  string private ____gap_was_name;\\n\\n  // Token symbol\\n  string private ____gap_was_symbol;\\n\\n  // Optional mapping for token URIs\\n  mapping(uint256 => string) internal _tokenURIs;\\n\\n  // Base URI\\n  string private _baseURI;\\n\\n  /**\\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n   */\\n  function __ERC721_init() internal onlyInitializing {\\n    __Context_init_unchained();\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n    if (\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      interfaceId == type(IERC721Enumerable).interfaceId\\n    ) {\\n      return true;\\n    }\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n    return _holderTokens[owner].length();\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public pure virtual override returns (string memory) {\\n    return \\\"Foundation\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public pure virtual override returns (string memory) {\\n    return \\\"FND\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n    string memory _tokenURI = _tokenURIs[tokenId];\\n\\n    // If there is no base URI, return the token URI.\\n    if (bytes(_baseURI).length == 0) {\\n      return _tokenURI;\\n    }\\n    // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n    if (bytes(_tokenURI).length > 0) {\\n      return string(abi.encodePacked(_baseURI, _tokenURI));\\n    }\\n    // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n    return string(abi.encodePacked(_baseURI, tokenId.toString()));\\n  }\\n\\n  /**\\n   * @dev Returns the base URI set via {_setBaseURI}. This will be\\n   * automatically added as a prefix in {tokenURI} to each token's URI, or\\n   * to the token ID if no specific URI is set for that token ID.\\n   */\\n  function baseURI() public view returns (string memory) {\\n    return _baseURI;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n    return _holderTokens[owner].at(index);\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n    return _tokenOwners.length();\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\n   */\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\n    (uint256 tokenId, ) = _tokenOwners.at(index);\\n    return tokenId;\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    address owner = ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    //solhint-disable-next-line max-line-length\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override {\\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n    _safeTransfer(from, to, tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n   *\\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) internal virtual {\\n    _transfer(from, to, tokenId);\\n    require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   * and stop existing when they are burned (`_burn`).\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return _tokenOwners.contains(tokenId);\\n  }\\n\\n  /**\\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n    require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n    address owner = ownerOf(tokenId);\\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n  }\\n\\n  /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n  function _safeMint(address to, uint256 tokenId) internal virtual {\\n    _safeMint(to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) internal virtual {\\n    _mint(to, tokenId);\\n    require(\\n      _checkOnERC721Received(address(0), to, tokenId, _data),\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Mints `tokenId` and transfers it to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must not exist.\\n   * - `to` cannot be the zero address.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _mint(address to, uint256 tokenId) internal virtual {\\n    require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n    _beforeTokenTransfer(address(0), to, tokenId);\\n\\n    _holderTokens[to].add(tokenId);\\n\\n    _tokenOwners.set(tokenId, to);\\n\\n    emit Transfer(address(0), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    address owner = ownerOf(tokenId);\\n\\n    _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n    // Clear approvals\\n    _approve(address(0), tokenId);\\n\\n    // Clear metadata (if any)\\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\\n      delete _tokenURIs[tokenId];\\n    }\\n\\n    _holderTokens[owner].remove(tokenId);\\n\\n    _tokenOwners.remove(tokenId);\\n\\n    emit Transfer(owner, address(0), tokenId);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {\\n    require(ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n    require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, tokenId);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    _holderTokens[from].remove(tokenId);\\n    _holderTokens[to].add(tokenId);\\n\\n    _tokenOwners.set(tokenId, to);\\n\\n    emit Transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n    _tokenURIs[tokenId] = _tokenURI;\\n  }\\n\\n  /**\\n   * @dev Internal function to set the base URI for all token IDs. It is\\n   * automatically added as a prefix to the value returned in {tokenURI},\\n   * or to the token ID if {tokenURI} is empty.\\n   */\\n  function _setBaseURI(string memory baseURI_) internal virtual {\\n    _baseURI = baseURI_;\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    if (!to.isContract()) {\\n      return true;\\n    }\\n    bytes memory returndata = to.functionCall(\\n      abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, tokenId, _data),\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n    );\\n    bytes4 retval = abi.decode(returndata, (bytes4));\\n    return (retval == type(IERC721Receiver).interfaceId);\\n  }\\n\\n  function _approve(address to, uint256 tokenId) private {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {}\\n\\n  uint256[41] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/FoundationTreasuryNode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @notice A mixin that stores a reference to the Foundation treasury contract.\\n */\\nabstract contract FoundationTreasuryNode is Initializable {\\n  using AddressUpgradeable for address payable;\\n\\n  address payable private treasury;\\n\\n  /**\\n   * @dev Called once after the initial deployment to set the Foundation treasury address.\\n   */\\n  function _initializeFoundationTreasuryNode(address payable _treasury) internal onlyInitializing {\\n    require(_treasury.isContract(), \\\"FoundationTreasuryNode: Address is not a contract\\\");\\n    treasury = _treasury;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the Foundation treasury.\\n   */\\n  function getFoundationTreasury() public view returns (address payable) {\\n    return treasury;\\n  }\\n\\n  // `______gap` is added to each mixin to allow adding new data slots or additional mixins in an upgrade-safe way.\\n  uint256[2000] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/roles/FoundationAdminRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IAdminRole.sol\\\";\\n\\nimport \\\"../FoundationTreasuryNode.sol\\\";\\n\\n/**\\n * @notice Allows a contract to leverage the admin role defined by the Foundation treasury.\\n */\\nabstract contract FoundationAdminRole is FoundationTreasuryNode {\\n  // This file uses 0 data slots (other than what's included via FoundationTreasuryNode)\\n\\n  modifier onlyFoundationAdmin() {\\n    require(isAdmin(msg.sender), \\\"FoundationAdminRole: caller does not have the Admin role\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the user is a Foundation admin.\\n   * @dev This API may be consumed by 3rd party contracts.\\n   */\\n  function isAdmin(address user) public view returns (bool) {\\n    return IAdminRole(getFoundationTreasury()).isAdmin(user);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/roles/FoundationOperatorRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IOperatorRole.sol\\\";\\n\\nimport \\\"../FoundationTreasuryNode.sol\\\";\\n\\n/**\\n * @notice Allows a contract to leverage the operator role defined by the Foundation treasury.\\n */\\nabstract contract FoundationOperatorRole is FoundationTreasuryNode {\\n  // This file uses 0 data slots (other than what's included via FoundationTreasuryNode)\\n\\n  function _isFoundationOperator() internal view returns (bool) {\\n    return IOperatorRole(getFoundationTreasury()).isOperator(msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFT721Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice A place for common modifiers and functions used by various NFT721 mixins, if any.\\n * @dev This also leaves a gap which can be used to add a new mixin to the top of the inheritance tree.\\n */\\nabstract contract NFT721Core {\\n  // 100 slots used when adding NFT721ProxyCall\\n  uint256[900] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFT721Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IFNDNFTMarket.sol\\\";\\nimport \\\"../interfaces/IGetRoyalties.sol\\\";\\nimport \\\"../interfaces/IGetFees.sol\\\";\\nimport \\\"../interfaces/IRoyaltyInfo.sol\\\";\\n\\nimport \\\"./FoundationTreasuryNode.sol\\\";\\nimport \\\"./NFT721Creator.sol\\\";\\n\\n/**\\n * @notice Holds a reference to the Foundation Market and communicates fees to 3rd party marketplaces.\\n */\\nabstract contract NFT721Market is IGetRoyalties, IGetFees, IRoyaltyInfo, FoundationTreasuryNode, NFT721Creator {\\n  using AddressUpgradeable for address;\\n\\n  uint256 private constant ROYALTY_IN_BASIS_POINTS = 1000;\\n  uint256 private constant ROYALTY_RATIO = 10;\\n\\n  IFNDNFTMarket private nftMarket;\\n\\n  event NFTMarketUpdated(address indexed nftMarket);\\n\\n  /**\\n   * @notice Returns the address of the Foundation NFTMarket contract.\\n   */\\n  function getNFTMarket() public view returns (address) {\\n    return address(nftMarket);\\n  }\\n\\n  function _updateNFTMarket(address _nftMarket) internal {\\n    require(_nftMarket.isContract(), \\\"NFT721Market: Market address is not a contract\\\");\\n    nftMarket = IFNDNFTMarket(_nftMarket);\\n\\n    emit NFTMarketUpdated(_nftMarket);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    if (\\n      interfaceId == type(IGetRoyalties).interfaceId ||\\n      interfaceId == type(IGetFees).interfaceId ||\\n      interfaceId == type(IRoyaltyInfo).interfaceId\\n    ) {\\n      return true;\\n    }\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @notice Returns an array of recipient addresses to which fees should be sent.\\n   * The expected fee amount is communicated with `getFeeBps`.\\n   */\\n  function getFeeRecipients(uint256 id) public view override returns (address payable[] memory) {\\n    require(_exists(id), \\\"ERC721Metadata: Query for nonexistent token\\\");\\n\\n    address payable[] memory result = new address payable[](1);\\n    result[0] = getTokenCreatorPaymentAddress(id);\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Returns an array of fees in basis points.\\n   * The expected recipients is communicated with `getFeeRecipients`.\\n   */\\n  function getFeeBps(\\n    uint256 /* id */\\n  ) public pure override returns (uint256[] memory) {\\n    uint256[] memory result = new uint256[](1);\\n    result[0] = ROYALTY_IN_BASIS_POINTS;\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Get fee recipients and fees in a single call.\\n   * The data is the same as when calling getFeeRecipients and getFeeBps separately.\\n   */\\n  function getRoyalties(uint256 tokenId)\\n    public\\n    view\\n    returns (address payable[] memory recipients, uint256[] memory feesInBasisPoints)\\n  {\\n    require(_exists(tokenId), \\\"ERC721Metadata: Query for nonexistent token\\\");\\n    recipients = new address payable[](1);\\n    recipients[0] = getTokenCreatorPaymentAddress(tokenId);\\n    feesInBasisPoints = new uint256[](1);\\n    feesInBasisPoints[0] = ROYALTY_IN_BASIS_POINTS;\\n  }\\n\\n  /**\\n   * @notice Returns the receiver and the amount to be sent for a secondary sale.\\n   */\\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n    external\\n    view\\n    returns (address receiver, uint256 royaltyAmount)\\n  {\\n    receiver = getTokenCreatorPaymentAddress(_tokenId);\\n    unchecked {\\n      royaltyAmount = _salePrice / ROYALTY_RATIO;\\n    }\\n  }\\n\\n  uint256[1000] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFT721Creator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./OZ/ERC721Upgradeable.sol\\\";\\nimport \\\"./AccountMigration.sol\\\";\\nimport \\\"../libraries/BytesLibrary.sol\\\";\\nimport \\\"./NFT721ProxyCall.sol\\\";\\nimport \\\"../interfaces/ITokenCreator.sol\\\";\\n\\n/**\\n * @notice Allows each token to be associated with a creator.\\n */\\nabstract contract NFT721Creator is Initializable, AccountMigration, ERC721Upgradeable, ITokenCreator, NFT721ProxyCall {\\n  using BytesLibrary for bytes;\\n\\n  mapping(uint256 => address payable) private tokenIdToCreator;\\n\\n  /**\\n   * @dev Stores an optional alternate address to receive creator revenue and royalty payments.\\n   * The target address may be a contract which could split or escrow payments.\\n   */\\n  mapping(uint256 => address payable) private tokenIdToCreatorPaymentAddress;\\n\\n  event TokenCreatorUpdated(address indexed fromCreator, address indexed toCreator, uint256 indexed tokenId);\\n  event TokenCreatorPaymentAddressSet(\\n    address indexed fromPaymentAddress,\\n    address indexed toPaymentAddress,\\n    uint256 indexed tokenId\\n  );\\n  event NFTCreatorMigrated(uint256 indexed tokenId, address indexed originalAddress, address indexed newAddress);\\n  event NFTOwnerMigrated(uint256 indexed tokenId, address indexed originalAddress, address indexed newAddress);\\n  event PaymentAddressMigrated(\\n    uint256 indexed tokenId,\\n    address indexed originalAddress,\\n    address indexed newAddress,\\n    address originalPaymentAddress,\\n    address newPaymentAddress\\n  );\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    if (interfaceId == type(ITokenCreator).interfaceId) {\\n      return true;\\n    }\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @notice Returns the creator's address for a given tokenId.\\n   */\\n  function tokenCreator(uint256 tokenId) public view override returns (address payable) {\\n    return tokenIdToCreator[tokenId];\\n  }\\n\\n  /**\\n   * @notice Returns the payment address for a given tokenId.\\n   * @dev If an alternate address was not defined, the creator is returned instead.\\n   */\\n  function getTokenCreatorPaymentAddress(uint256 tokenId)\\n    public\\n    view\\n    returns (address payable tokenCreatorPaymentAddress)\\n  {\\n    tokenCreatorPaymentAddress = tokenIdToCreatorPaymentAddress[tokenId];\\n    if (tokenCreatorPaymentAddress == address(0)) {\\n      tokenCreatorPaymentAddress = tokenIdToCreator[tokenId];\\n    }\\n  }\\n\\n  function _updateTokenCreator(uint256 tokenId, address payable creator) internal {\\n    emit TokenCreatorUpdated(tokenIdToCreator[tokenId], creator, tokenId);\\n\\n    tokenIdToCreator[tokenId] = creator;\\n  }\\n\\n  /**\\n   * @dev Allow setting a different address to send payments to for both primary sale revenue\\n   * and secondary sales royalties.\\n   */\\n  function _setTokenCreatorPaymentAddress(uint256 tokenId, address payable tokenCreatorPaymentAddress) internal {\\n    emit TokenCreatorPaymentAddressSet(tokenIdToCreatorPaymentAddress[tokenId], tokenCreatorPaymentAddress, tokenId);\\n    tokenIdToCreatorPaymentAddress[tokenId] = tokenCreatorPaymentAddress;\\n  }\\n\\n  /**\\n   * @notice Allows the creator to burn if they currently own the NFT.\\n   */\\n  function burn(uint256 tokenId) public {\\n    require(tokenIdToCreator[tokenId] == msg.sender, \\\"NFT721Creator: Caller is not creator\\\");\\n    require(_isApprovedOrOwner(msg.sender, tokenId), \\\"NFT721Creator: Caller is not owner nor approved\\\");\\n    _burn(tokenId);\\n  }\\n\\n  /**\\n   * @notice Allows an NFT owner or creator and Foundation to work together in order to update the creator\\n   * to a new account and/or transfer NFTs to that account.\\n   * @param signature Message `I authorize Foundation to migrate my account to ${newAccount.address.toLowerCase()}`\\n   * signed by the original account.\\n   * @dev This will gracefully skip any NFTs that have been burned or transferred.\\n   */\\n  function adminAccountMigration(\\n    uint256[] calldata createdTokenIds,\\n    uint256[] calldata ownedTokenIds,\\n    address originalAddress,\\n    address payable newAddress,\\n    bytes calldata signature\\n  ) public onlyAuthorizedAccountMigration(originalAddress, newAddress, signature) {\\n    for (uint256 i = 0; i < ownedTokenIds.length; i++) {\\n      uint256 tokenId = ownedTokenIds[i];\\n      // Check that the token exists and still owned by the originalAddress\\n      // so that frontrunning a burn or transfer will not cause the entire tx to revert\\n      if (_exists(tokenId) && ownerOf(tokenId) == originalAddress) {\\n        _transfer(originalAddress, newAddress, tokenId);\\n        emit NFTOwnerMigrated(tokenId, originalAddress, newAddress);\\n      }\\n    }\\n\\n    for (uint256 i = 0; i < createdTokenIds.length; i++) {\\n      uint256 tokenId = createdTokenIds[i];\\n      // The creator would be 0 if the token was burned before this call\\n      if (tokenIdToCreator[tokenId] != address(0)) {\\n        require(\\n          tokenIdToCreator[tokenId] == originalAddress,\\n          \\\"NFT721Creator: Token was not created by the given address\\\"\\n        );\\n        _updateTokenCreator(tokenId, newAddress);\\n        emit NFTCreatorMigrated(tokenId, originalAddress, newAddress);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows a split recipient and Foundation to work together in order to update the payment address\\n   * to a new account.\\n   * @param signature Message `I authorize Foundation to migrate my account to ${newAccount.address.toLowerCase()}`\\n   * signed by the original account.\\n   */\\n  function adminAccountMigrationForPaymentAddresses(\\n    uint256[] calldata paymentAddressTokenIds,\\n    address paymentAddressFactory,\\n    bytes memory paymentAddressCallData,\\n    uint256 addressLocationInCallData,\\n    address originalAddress,\\n    address payable newAddress,\\n    bytes calldata signature\\n  ) public onlyAuthorizedAccountMigration(originalAddress, newAddress, signature) {\\n    _adminAccountRecoveryForPaymentAddresses(\\n      paymentAddressTokenIds,\\n      paymentAddressFactory,\\n      paymentAddressCallData,\\n      addressLocationInCallData,\\n      originalAddress,\\n      newAddress\\n    );\\n  }\\n\\n  /**\\n   * @dev Split into a second function to avoid stack too deep errors\\n   */\\n  function _adminAccountRecoveryForPaymentAddresses(\\n    uint256[] calldata paymentAddressTokenIds,\\n    address paymentAddressFactory,\\n    bytes memory paymentAddressCallData,\\n    uint256 addressLocationInCallData,\\n    address originalAddress,\\n    address payable newAddress\\n  ) private {\\n    // Call the factory and get the originalPaymentAddress\\n    address payable originalPaymentAddress = _proxyCallAndReturnContractAddress(\\n      paymentAddressFactory,\\n      paymentAddressCallData\\n    );\\n\\n    // Confirm the original address and swap with the new address\\n    paymentAddressCallData.replaceAtIf(addressLocationInCallData, originalAddress, newAddress);\\n\\n    // Call the factory and get the newPaymentAddress\\n    address payable newPaymentAddress = _proxyCallAndReturnContractAddress(\\n      paymentAddressFactory,\\n      paymentAddressCallData\\n    );\\n\\n    // For each token, confirm the expected payment address and then update to the new one\\n    for (uint256 i = 0; i < paymentAddressTokenIds.length; i++) {\\n      uint256 tokenId = paymentAddressTokenIds[i];\\n      require(\\n        tokenIdToCreatorPaymentAddress[tokenId] == originalPaymentAddress,\\n        \\\"NFT721Creator: Payment address is not the expected value\\\"\\n      );\\n\\n      _setTokenCreatorPaymentAddress(tokenId, newPaymentAddress);\\n      emit PaymentAddressMigrated(tokenId, originalAddress, newAddress, originalPaymentAddress, newPaymentAddress);\\n    }\\n  }\\n\\n  /**\\n   * @dev Remove the creator record when burned.\\n   */\\n  function _burn(uint256 tokenId) internal virtual override {\\n    delete tokenIdToCreator[tokenId];\\n    delete tokenIdToCreatorPaymentAddress[tokenId];\\n\\n    super._burn(tokenId);\\n  }\\n\\n  uint256[999] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFT721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./NFT721Core.sol\\\";\\nimport \\\"./NFT721Creator.sol\\\";\\n\\n/**\\n * @notice A mixin to extend the OpenZeppelin metadata implementation.\\n */\\nabstract contract NFT721Metadata is NFT721Creator {\\n  using Strings for uint256;\\n\\n  /**\\n   * @dev Stores hashes minted by a creator to prevent duplicates.\\n   */\\n  mapping(address => mapping(string => bool)) private creatorToIPFSHashToMinted;\\n\\n  event BaseURIUpdated(string baseURI);\\n  // These events were used in an older version of the contract\\n  event TokenIPFSPathUpdated(uint256 indexed tokenId, string indexed indexedTokenIPFSPath, string tokenIPFSPath);\\n  event NFTMetadataUpdated(string name, string symbol, string baseURI);\\n\\n  /**\\n   * @notice Returns the IPFSPath to the metadata JSON file for a given NFT.\\n   */\\n  function getTokenIPFSPath(uint256 tokenId) public view returns (string memory) {\\n    return _tokenURIs[tokenId];\\n  }\\n\\n  /**\\n   * @notice Checks if the creator has already minted a given NFT.\\n   */\\n  function getHasCreatorMintedIPFSHash(address creator, string memory tokenIPFSPath) public view returns (bool) {\\n    return creatorToIPFSHashToMinted[creator][tokenIPFSPath];\\n  }\\n\\n  function _updateBaseURI(string memory _baseURI) internal {\\n    _setBaseURI(_baseURI);\\n\\n    emit BaseURIUpdated(_baseURI);\\n  }\\n\\n  /**\\n   * @dev The IPFS path should be the CID + file.extension, e.g.\\n   * `QmfPsfGwLhiJrU8t9HpG4wuyjgPo9bk8go4aQqSu9Qg4h7/metadata.json`\\n   */\\n  function _setTokenIPFSPath(uint256 tokenId, string memory _tokenIPFSPath) internal {\\n    // 46 is the minimum length for an IPFS content hash, it may be longer if paths are used\\n    require(bytes(_tokenIPFSPath).length >= 46, \\\"NFT721Metadata: Invalid IPFS path\\\");\\n    require(!creatorToIPFSHashToMinted[msg.sender][_tokenIPFSPath], \\\"NFT721Metadata: NFT was already minted\\\");\\n\\n    creatorToIPFSHashToMinted[msg.sender][_tokenIPFSPath] = true;\\n    _setTokenURI(tokenId, _tokenIPFSPath);\\n  }\\n\\n  /**\\n   * @dev When a token is burned, remove record of it allowing that creator to re-mint the same NFT again in the future.\\n   */\\n  function _burn(uint256 tokenId) internal virtual override {\\n    delete creatorToIPFSHashToMinted[msg.sender][_tokenURIs[tokenId]];\\n    super._burn(tokenId);\\n  }\\n\\n  uint256[999] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFT721Mint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OZ/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./NFT721Creator.sol\\\";\\nimport \\\"./NFT721Market.sol\\\";\\nimport \\\"./NFT721Metadata.sol\\\";\\nimport \\\"./NFT721ProxyCall.sol\\\";\\n\\n/**\\n * @notice Allows creators to mint NFTs.\\n */\\nabstract contract NFT721Mint is\\n  Initializable,\\n  ERC721Upgradeable,\\n  NFT721ProxyCall,\\n  NFT721Creator,\\n  NFT721Market,\\n  NFT721Metadata\\n{\\n  uint256 private nextTokenId;\\n\\n  event Minted(\\n    address indexed creator,\\n    uint256 indexed tokenId,\\n    string indexed indexedTokenIPFSPath,\\n    string tokenIPFSPath\\n  );\\n\\n  /**\\n   * @notice Gets the tokenId of the next NFT minted.\\n   */\\n  function getNextTokenId() public view returns (uint256) {\\n    return nextTokenId;\\n  }\\n\\n  /**\\n   * @dev Called once after the initial deployment to set the initial tokenId.\\n   */\\n  function _initializeNFT721Mint() internal onlyInitializing {\\n    // Use ID 1 for the first NFT tokenId\\n    nextTokenId = 1;\\n  }\\n\\n  /**\\n   * @notice Allows a creator to mint an NFT.\\n   */\\n  function mint(string memory tokenIPFSPath) public returns (uint256 tokenId) {\\n    tokenId = nextTokenId++;\\n    _mint(msg.sender, tokenId);\\n    _updateTokenCreator(tokenId, payable(msg.sender));\\n    _setTokenIPFSPath(tokenId, tokenIPFSPath);\\n    emit Minted(msg.sender, tokenId, tokenIPFSPath, tokenIPFSPath);\\n  }\\n\\n  /**\\n   * @notice Allows a creator to mint an NFT and set approval for the Foundation marketplace.\\n   * This can be used by creators the first time they mint an NFT to save having to issue a separate\\n   * approval transaction before starting an auction.\\n   */\\n  function mintAndApproveMarket(string memory tokenIPFSPath) public returns (uint256 tokenId) {\\n    tokenId = mint(tokenIPFSPath);\\n    setApprovalForAll(getNFTMarket(), true);\\n  }\\n\\n  /**\\n   * @notice Allows a creator to mint an NFT and have creator revenue/royalties sent to an alternate address.\\n   */\\n  function mintWithCreatorPaymentAddress(string memory tokenIPFSPath, address payable tokenCreatorPaymentAddress)\\n    public\\n    returns (uint256 tokenId)\\n  {\\n    require(tokenCreatorPaymentAddress != address(0), \\\"NFT721Mint: tokenCreatorPaymentAddress is required\\\");\\n    tokenId = mint(tokenIPFSPath);\\n    _setTokenCreatorPaymentAddress(tokenId, tokenCreatorPaymentAddress);\\n  }\\n\\n  /**\\n   * @notice Allows a creator to mint an NFT and have creator revenue/royalties sent to an alternate address.\\n   * Also sets approval for the Foundation marketplace.  This can be used by creators the first time they mint an NFT to\\n   * save having to issue a separate approval transaction before starting an auction.\\n   */\\n  function mintWithCreatorPaymentAddressAndApproveMarket(\\n    string memory tokenIPFSPath,\\n    address payable tokenCreatorPaymentAddress\\n  ) public returns (uint256 tokenId) {\\n    tokenId = mintWithCreatorPaymentAddress(tokenIPFSPath, tokenCreatorPaymentAddress);\\n    setApprovalForAll(getNFTMarket(), true);\\n  }\\n\\n  /**\\n   * @notice Allows a creator to mint an NFT and have creator revenue/royalties sent to an alternate address\\n   * which is defined by a contract call, typically a proxy contract address representing the payment terms.\\n   */\\n  function mintWithCreatorPaymentFactory(\\n    string memory tokenIPFSPath,\\n    address paymentAddressFactory,\\n    bytes memory paymentAddressCallData\\n  ) public returns (uint256 tokenId) {\\n    address payable tokenCreatorPaymentAddress = _proxyCallAndReturnContractAddress(\\n      paymentAddressFactory,\\n      paymentAddressCallData\\n    );\\n    tokenId = mintWithCreatorPaymentAddress(tokenIPFSPath, tokenCreatorPaymentAddress);\\n  }\\n\\n  /**\\n   * @notice Allows a creator to mint an NFT and have creator revenue/royalties sent to an alternate address\\n   * which is defined by a contract call, typically a proxy contract address representing the payment terms.\\n   * Also sets approval for the Foundation marketplace.  This can be used by creators the first time they mint an NFT to\\n   * save having to issue a separate approval transaction before starting an auction.\\n   */\\n  function mintWithCreatorPaymentFactoryAndApproveMarket(\\n    string memory tokenIPFSPath,\\n    address paymentAddressFactory,\\n    bytes memory paymentAddressCallData\\n  ) public returns (uint256 tokenId) {\\n    tokenId = mintWithCreatorPaymentFactory(tokenIPFSPath, paymentAddressFactory, paymentAddressCallData);\\n    setApprovalForAll(getNFTMarket(), true);\\n  }\\n\\n  /**\\n   * @dev Explicit override to address compile errors.\\n   */\\n  function _burn(uint256 tokenId) internal virtual override(ERC721Upgradeable, NFT721Creator, NFT721Metadata) {\\n    super._burn(tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721Upgradeable, NFT721Creator, NFT721Market)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  uint256[1000] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFT721ProxyCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"../interfaces/IProxyCall.sol\\\";\\n\\n/**\\n * @notice Forwards arbitrary calls to an external contract to be processed.\\n * @dev This is used so that the from address of the calling contract does not have\\n * any special permissions (e.g. ERC-20 transfer).\\n */\\nabstract contract NFT721ProxyCall {\\n  using AddressUpgradeable for address payable;\\n  using AddressUpgradeable for address;\\n\\n  IProxyCall private proxyCall;\\n\\n  event ProxyCallContractUpdated(address indexed proxyCallContract);\\n\\n  /**\\n   * @dev Called by the adminUpdateConfig function to set the address of the proxy call contract.\\n   */\\n  function _updateProxyCall(address proxyCallContract) internal {\\n    require(proxyCallContract.isContract(), \\\"NFT721ProxyCall: Proxy call address is not a contract\\\");\\n    proxyCall = IProxyCall(proxyCallContract);\\n\\n    emit ProxyCallContractUpdated(proxyCallContract);\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current proxy call contract.\\n   */\\n  function proxyCallAddress() external view returns (address) {\\n    return address(proxyCall);\\n  }\\n\\n  /**\\n   * @dev Used by other mixins to make external calls through the proxy contract.\\n   * This will fail if the proxyCall address is address(0).\\n   */\\n  function _proxyCallAndReturnContractAddress(address externalContract, bytes memory callData)\\n    internal\\n    returns (address payable result)\\n  {\\n    result = proxyCall.proxyCallAndReturnAddress(externalContract, callData);\\n    require(result.isContract(), \\\"NFT721ProxyCall: address returned is not a contract\\\");\\n  }\\n\\n  // This mixin uses a total of 100 slots\\n  uint256[99] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/ERC165UpgradeableGap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A gap to represent the space previously consumed by the use of ERC165Upgradeable.\\n */\\nabstract contract ERC165UpgradeableGap {\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/OZ/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * From https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/v3.4.2-solc-0.7\\n * Modified to support solc 8.\\n * Using this due to storage slot changes in OZ 4.*\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Map type with\\n  // bytes32 keys and values.\\n  // The Map implementation uses private functions, and user-facing\\n  // implementations (such as Uint256ToAddressMap) are just wrappers around\\n  // the underlying Map.\\n  // This means that we can only create new EnumerableMaps for types that fit\\n  // in bytes32.\\n\\n  struct MapEntry {\\n    bytes32 _key;\\n    bytes32 _value;\\n  }\\n\\n  struct Map {\\n    // Storage of map keys and values\\n    MapEntry[] _entries;\\n    // Position of the entry defined by a key in the `entries` array, plus 1\\n    // because index 0 means a key is not in the map.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function _set(\\n    Map storage map,\\n    bytes32 key,\\n    bytes32 value\\n  ) private returns (bool) {\\n    // We read and store the key's index to prevent multiple reads from the same storage slot\\n    uint256 keyIndex = map._indexes[key];\\n\\n    if (keyIndex == 0) {\\n      // Equivalent to !contains(map, key)\\n      map._entries.push(MapEntry({ _key: key, _value: value }));\\n      // The entry is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      map._indexes[key] = map._entries.length;\\n      return true;\\n    } else {\\n      map._entries[keyIndex - 1]._value = value;\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a key-value pair from a map. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function _remove(Map storage map, bytes32 key) private returns (bool) {\\n    // We read and store the key's index to prevent multiple reads from the same storage slot\\n    uint256 keyIndex = map._indexes[key];\\n\\n    if (keyIndex != 0) {\\n      // Equivalent to contains(map, key)\\n      // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n      // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = keyIndex - 1;\\n      uint256 lastIndex = map._entries.length - 1;\\n\\n      // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n      // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n      MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n      // Move the last entry to the index where the entry to delete is\\n      map._entries[toDeleteIndex] = lastEntry;\\n      // Update the index for the moved entry\\n      map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n      // Delete the slot where the moved entry was stored\\n      map._entries.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete map._indexes[key];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n    return map._indexes[key] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of key-value pairs in the map. O(1).\\n   */\\n  function _length(Map storage map) private view returns (uint256) {\\n    return map._entries.length;\\n  }\\n\\n  /**\\n   * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of entries inside the\\n   * array, and it may change when more entries are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n    require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n    MapEntry storage entry = map._entries[index];\\n    return (entry._key, entry._value);\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`.  O(1).\\n   * Does not revert if `key` is not in the map.\\n   */\\n  function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n    uint256 keyIndex = map._indexes[key];\\n    if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n    return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`.  O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n    uint256 keyIndex = map._indexes[key];\\n    require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n    return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n  }\\n\\n  /**\\n   * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {_tryGet}.\\n   */\\n  function _get(\\n    Map storage map,\\n    bytes32 key,\\n    string memory errorMessage\\n  ) private view returns (bytes32) {\\n    uint256 keyIndex = map._indexes[key];\\n    require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n    return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n  }\\n\\n  // UintToAddressMap\\n\\n  struct UintToAddressMap {\\n    Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    UintToAddressMap storage map,\\n    uint256 key,\\n    address value\\n  ) internal returns (bool) {\\n    return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n    return _remove(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n    return _contains(map._inner, bytes32(key));\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n   */\\n  function length(UintToAddressMap storage map) internal view returns (uint256) {\\n    return _length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the set. O(1).\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n    (bytes32 key, bytes32 value) = _at(map._inner, index);\\n    return (uint256(key), address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`.  O(1).\\n   * Does not revert if `key` is not in the map.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n    (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n    return (success, address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`.  O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n    return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n  }\\n\\n  /**\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\n   */\\n  function get(\\n    UintToAddressMap storage map,\\n    uint256 key,\\n    string memory errorMessage\\n  ) internal view returns (address) {\\n    return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdminRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface for AdminRole which wraps the default admin role from\\n * OpenZeppelin's AccessControl for easy integration.\\n */\\ninterface IAdminRole {\\n  function isAdmin(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperatorRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface for OperatorRole which wraps a role from\\n * OpenZeppelin's AccessControl for easy integration.\\n */\\ninterface IOperatorRole {\\n  function isOperator(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFNDNFTMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n// solhint-disable\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFNDNFTMarket {\\n  function getFeeConfig()\\n    external\\n    view\\n    returns (\\n      uint256 primaryFoundationFeeBasisPoints,\\n      uint256 secondaryFoundationFeeBasisPoints,\\n      uint256 secondaryCreatorFeeBasisPoints\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGetRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGetRoyalties {\\n  function getRoyalties(uint256 tokenId)\\n    external\\n    view\\n    returns (address payable[] memory recipients, uint256[] memory feesInBasisPoints);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGetFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice An interface for communicating fees to 3rd party marketplaces.\\n * @dev Originally implemented in mainnet contract 0x44d6e8933f8271abcf253c72f9ed7e0e4c0323b3\\n */\\ninterface IGetFees {\\n  function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\\n\\n  function getFeeBps(uint256 id) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRoyaltyInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface for EIP-2981: NFT Royalty Standard.\\n * For more see: https://eips.ethereum.org/EIPS/eip-2981.\\n */\\ninterface IRoyaltyInfo {\\n  /// @notice Called with the sale price to determine how much royalty\\n  //          is owed and to whom.\\n  /// @param _tokenId - the NFT asset queried for royalty information\\n  /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n  /// @return receiver - address of who should be sent the royalty payment\\n  /// @return royaltyAmount - the royalty payment amount for _salePrice\\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n    external\\n    view\\n    returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/AccountMigration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/AccountMigrationLibrary.sol\\\";\\nimport \\\"./roles/FoundationOperatorRole.sol\\\";\\n\\nabstract contract AccountMigration is FoundationOperatorRole {\\n  using AccountMigrationLibrary for address;\\n\\n  modifier onlyAuthorizedAccountMigration(\\n    address originalAddress,\\n    address payable newAddress,\\n    bytes memory signature\\n  ) {\\n    require(_isFoundationOperator(), \\\"AccountMigration: Caller is not an operator\\\");\\n    originalAddress.requireAuthorizedAccountMigration(newAddress, signature);\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BytesLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice A library for manipulation of byte arrays.\\n */\\nlibrary BytesLibrary {\\n  /**\\n   * @dev Replace the address at the given location in a byte array if the contents at that location\\n   * match the expected address.\\n   */\\n  function replaceAtIf(\\n    bytes memory data,\\n    uint256 startLocation,\\n    address expectedAddress,\\n    address newAddress\\n  ) internal pure {\\n    bytes memory expectedData = abi.encodePacked(expectedAddress);\\n    bytes memory newData = abi.encodePacked(newAddress);\\n    // An address is 20 bytes long\\n    for (uint256 i = 0; i < 20; i++) {\\n      uint256 dataLocation = startLocation + i;\\n      require(data[dataLocation] == expectedData[i], \\\"Bytes: Data provided does not include the expectedAddress\\\");\\n      data[dataLocation] = newData[i];\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks if the call data starts with the given function signature.\\n   */\\n  function startsWith(bytes memory callData, bytes4 functionSig) internal pure returns (bool) {\\n    // A signature is 4 bytes long\\n    if (callData.length < 4) {\\n      return false;\\n    }\\n    for (uint256 i = 0; i < 4; i++) {\\n      if (callData[i] != functionSig[i]) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITokenCreator {\\n  function tokenCreator(uint256 tokenId) external view returns (address payable);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AccountMigrationLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @notice Checks for a valid signature authorizing the migration of an account to a new address.\\n * @dev This is shared by both the NFT contracts and FNDNFTMarket, and the same signature authorizes both.\\n */\\nlibrary AccountMigrationLibrary {\\n  using ECDSA for bytes;\\n  using SignatureChecker for address;\\n  using Strings for uint256;\\n\\n  // From https://ethereum.stackexchange.com/questions/8346/convert-address-to-string\\n  function _toAsciiString(address x) private pure returns (string memory) {\\n    bytes memory s = new bytes(42);\\n    s[0] = \\\"0\\\";\\n    s[1] = \\\"x\\\";\\n    for (uint256 i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i + 2] = _char(hi);\\n      s[2 * i + 3] = _char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function _char(bytes1 b) private pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  /**\\n   * @dev Confirms the msg.sender is a Foundation operator and that the signature provided is valid.\\n   * @param signature Message `I authorize Foundation to migrate my account to ${newAccount.address.toLowerCase()}`\\n   * signed by the original account.\\n   */\\n  function requireAuthorizedAccountMigration(\\n    address originalAddress,\\n    address newAddress,\\n    bytes memory signature\\n  ) internal view {\\n    require(originalAddress != newAddress, \\\"AccountMigration: Cannot migrate to the same account\\\");\\n    bytes32 hash = abi\\n      .encodePacked(\\\"I authorize Foundation to migrate my account to \\\", _toAsciiString(newAddress))\\n      .toEthSignedMessageHash();\\n    require(\\n      originalAddress.isValidSignatureNow(hash, signature),\\n      \\\"AccountMigration: Signature must be from the original account\\\"\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\\n * ERC1271 contract signatures. Using this instead of ECDSA.recover in your contract will make them compatible with\\n * smart contract wallets such as Argent and Gnosis.\\n *\\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\\n * through time. It could return true at block N and false at block N+1 (or the opposite).\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxyCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IProxyCall {\\n  function proxyCallAndReturnAddress(address externalContract, bytes calldata callData)\\n    external\\n    returns (address payable result);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1337\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedTokenIPFSPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenIPFSPath\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NFTCreatorMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftMarket\",\"type\":\"address\"}],\"name\":\"NFTMarketUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"NFTMetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NFTOwnerMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalPaymentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPaymentAddress\",\"type\":\"address\"}],\"name\":\"PaymentAddressMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyCallContract\",\"type\":\"address\"}],\"name\":\"ProxyCallContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromPaymentAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toPaymentAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenCreatorPaymentAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenCreatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedTokenIPFSPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenIPFSPath\",\"type\":\"string\"}],\"name\":\"TokenIPFSPathUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"createdTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownedTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"originalAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"adminAccountMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"paymentAddressTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"paymentAddressFactory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymentAddressCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"addressLocationInCallData\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"adminAccountMigrationForPaymentAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftMarket\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proxyCallContract\",\"type\":\"address\"}],\"name\":\"adminUpdateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getFeeBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getFeeRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFoundationTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenIPFSPath\",\"type\":\"string\"}],\"name\":\"getHasCreatorMintedIPFSHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feesInBasisPoints\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenCreatorPaymentAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"tokenCreatorPaymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIPFSPath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenIPFSPath\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenIPFSPath\",\"type\":\"string\"}],\"name\":\"mintAndApproveMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenIPFSPath\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"tokenCreatorPaymentAddress\",\"type\":\"address\"}],\"name\":\"mintWithCreatorPaymentAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenIPFSPath\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"tokenCreatorPaymentAddress\",\"type\":\"address\"}],\"name\":\"mintWithCreatorPaymentAddressAndApproveMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenIPFSPath\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentAddressFactory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymentAddressCallData\",\"type\":\"bytes\"}],\"name\":\"mintWithCreatorPaymentFactory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenIPFSPath\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentAddressFactory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymentAddressCallData\",\"type\":\"bytes\"}],\"name\":\"mintWithCreatorPaymentFactoryAndApproveMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyCallAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenCreator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FNDNFT721", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1337", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}