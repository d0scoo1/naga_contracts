{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PublicLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport './interfaces/IPublicLock.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol';\\nimport './mixins/MixinDisable.sol';\\nimport './mixins/MixinERC721Enumerable.sol';\\nimport './mixins/MixinFunds.sol';\\nimport './mixins/MixinGrantKeys.sol';\\nimport './mixins/MixinKeys.sol';\\nimport './mixins/MixinLockCore.sol';\\nimport './mixins/MixinLockMetadata.sol';\\nimport './mixins/MixinPurchase.sol';\\nimport './mixins/MixinRefunds.sol';\\nimport './mixins/MixinTransfer.sol';\\nimport './mixins/MixinRoles.sol';\\nimport './mixins/MixinConvenienceOwnable.sol';\\n\\n/**\\n * @title The Lock contract\\n * @author Julien Genestoux (unlock-protocol.com)\\n * @dev ERC165 allows our contract to be queried to determine whether it implements a given interface.\\n * Every ERC-721 compliant contract must implement the ERC165 interface.\\n * https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract PublicLock is\\n  Initializable,\\n  ERC165StorageUpgradeable,\\n  MixinRoles,\\n  MixinFunds,\\n  MixinDisable,\\n  MixinLockCore,\\n  MixinKeys,\\n  MixinLockMetadata,\\n  MixinERC721Enumerable,\\n  MixinGrantKeys,\\n  MixinPurchase,\\n  MixinTransfer,\\n  MixinRefunds,\\n  MixinConvenienceOwnable\\n{\\n  function initialize(\\n    address payable _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) public\\n    initializer()\\n  {\\n    MixinFunds._initializeMixinFunds(_tokenAddress);\\n    MixinLockCore._initializeMixinLockCore(_lockCreator, _expirationDuration, _keyPrice, _maxNumberOfKeys);\\n    MixinLockMetadata._initializeMixinLockMetadata(_lockName);\\n    MixinERC721Enumerable._initializeMixinERC721Enumerable();\\n    MixinRefunds._initializeMixinRefunds();\\n    MixinRoles._initializeMixinRoles(_lockCreator);\\n    MixinConvenienceOwnable._initializeMixinConvenienceOwnable(_lockCreator);\\n    // registering the interface for erc721 with ERC165.sol using\\n    // the ID specified in the standard: https://eips.ethereum.org/EIPS/eip-721\\n    _registerInterface(0x80ac58cd);\\n  }\\n\\n  /**\\n   * @notice Allow the contract to accept tips in ETH sent directly to the contract.\\n   * @dev This is okay to use even if the lock is priced in ERC-20 tokens\\n   */\\n  receive() external payable {}\\n  \\n  /**\\n   Overrides\\n  */\\n  function supportsInterface(bytes4 interfaceId) \\n    public \\n    view \\n    virtual \\n    override(\\n      MixinERC721Enumerable,\\n      MixinLockMetadata,\\n      AccessControlUpgradeable, \\n      ERC165StorageUpgradeable\\n    ) \\n    returns (bool) \\n    {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPublicLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n* @title The PublicLock Interface\\n* @author Nick Furfaro (unlock-protocol.com)\\n */\\n\\n\\ninterface IPublicLock\\n{\\n\\n// See indentationissue description here:\\n// https://github.com/duaraghav8/Ethlint/issues/268\\n// solium-disable indentation\\n\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n  /**\\n   * @notice Allow the contract to accept tips in ETH sent directly to the contract.\\n   * @dev This is okay to use even if the lock is priced in ERC-20 tokens\\n   */\\n  // receive() external payable;\\n\\n  // roles\\n  function DEFAULT_ADMIN_ROLE() external pure returns (bytes32);\\n  function KEY_GRANTER_ROLE() external pure returns (bytes32);\\n  function LOCK_MANAGER_ROLE() external pure returns (bytes32);\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @dev Called by a lock manager or beneficiary to withdraw all funds from the lock and send them to the `beneficiary`.\\n   * @dev Throws if called by other than a lock manager or beneficiary\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\\n   *  -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor`\\n   * use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * @notice An ERC-20 style approval, allowing the spender to transfer funds directly from this lock.\\n   */\\n  function approveBeneficiary(\\n    address _spender,\\n    uint _amount\\n  ) external\\n    returns (bool);\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * A function to change the default duration of each key in the lock\\n   * @notice keys previously bought are unaffected by this change (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased \\n   * or type(uint).max for a non-expiring key\\n   */\\n  function setExpirationDuration(uint _newExpirationDuration) external;\\n\\n  /**\\n   * A function which lets a Lock manager update the beneficiary account,\\n   * which receives funds on withdrawal.\\n   * @dev Throws if called by other than a Lock manager or beneficiary\\n   * @dev Throws if _beneficiary is address(0)\\n   * @param _beneficiary The new address to set as the beneficiary\\n   */\\n  function updateBeneficiary( address _beneficiary ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _tokenId the id of the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) external view returns (uint timestamp);\\n  \\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows a Lock manager to assign a descriptive name for this Lock.\\n   * @param _lockName The new name for the lock\\n   * @dev Throws if called by other than a Lock manager\\n   */\\n  function updateLockName(\\n    string calldata _lockName\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to assign a Symbol for this Lock.\\n   * @param _lockSymbol The new Symbol for the lock\\n   * @dev Throws if called by other than a Lock manager\\n   */\\n  function updateLockSymbol(\\n    string calldata _lockSymbol\\n  ) external;\\n\\n  /**\\n    * @dev Gets the token symbol\\n    * @return string representing the token symbol\\n    */\\n  function symbol()\\n    external view\\n    returns(string memory);\\n\\n    /**\\n   * Allows a Lock manager to update the baseTokenURI for this Lock.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _baseTokenURI String representing the base of the URI for this lock.\\n   */\\n  function setBaseTokenURI(\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * @notice Allows a Lock manager to add or remove an event hook\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_values is ignored when using ETH)\\n  * @param _recipients array of addresses of the recipients of the purchased key\\n  * @param _referrers array of addresses of the users making the referral\\n  * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n  * @param _data array of arbitrary data populated by the front-end which initiated the sale\\n  * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored \\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  */\\n  function purchase(\\n    uint256[] calldata _values,\\n    address[] calldata _recipients,\\n    address[] calldata _referrers,\\n    address[] calldata _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable;\\n  \\n  /**\\n  * @dev Extend function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _tokenId the id of the key to extend\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n  */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(uint _tokenIdFrom, uint _tokenIdTo, uint _amount) external;\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) external;\\n\\n  /**\\n  * @param _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Set the value to be refunded to the sender on purchase\\n  */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n  \\n  /**\\n  * _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Returns the value/rpice to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes \\n   * down overtime.\\n   * @dev Throws if _tokenId does not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key \\n   * and perform a refund and cancellation of the key\\n   * @param _tokenId The key id we wish to refund to\\n   * @param _amount The amount to refund to the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    uint _tokenId,\\n    uint _amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _keyOwner The key owner to get the refund value for.\\n   * a cancelAndRefund block.timestamp.\\n   * Note that due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   */\\n  function getCancelAndRefundValue(\\n    address _keyOwner\\n  ) external view returns (uint refund);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  function onKeyPurchaseHook() external view returns(address);\\n\\n  function onKeyCancelHook() external view returns(address);\\n  \\n  function onValidKeyHook() external view returns(bool);\\n\\n  function onTokenURIHook() external view returns(string memory);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @dev Change the maximum number of keys the lock can edit\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   */\\n  function setMaxNumberOfKeys (uint _maxNumberOfKeys) external;\\n\\n   /**\\n   * Set the maximum number of keys a specific address can use\\n   * @param _maxKeysPerAddress the maximum amount of key a user can own\\n   */\\n  function setMaxKeysPerAddress (uint _maxKeysPerAddress) external;\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint);\\n\\n\\n  ///===================================================================\\n  /// Auto-generated getter functions from public state variables\\n\\n  function beneficiary() external view returns (address );\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n  \\n  /**\\n  * Check if a certain key is valid\\n  * @param _tokenId the id of the key to check validity\\n  * @notice this makes use of the onValidKeyHook if it is set\\n  */\\n  function isValidKey(\\n    uint _tokenId\\n  )\\n    external\\n    view\\n    returns (bool);\\n  \\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n    * @dev Returns the number of NFTs in `owner`'s account.\\n    */\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  /**\\n    * @dev Returns the owner of the NFT specified by `tokenId`.\\n    */\\n  function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n  /**\\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Requirements:\\n    * - `from`, `to` cannot be zero.\\n    * - `tokenId` must be owned by `from`.\\n    * - If the caller is not `from`, it must be have been allowed to move this\\n    * NFT by either {approve} or {setApprovalForAll}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  \\n  /**\\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Requirements:\\n    * - If the caller is not `from`, it must be approved to move this NFT by\\n    * either {approve} or {setApprovalForAll}.\\n    */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n    * @notice Get the approved address for a single NFT\\n    * @dev Throws if `_tokenId` is not a valid NFT.\\n    * @param _tokenId The NFT to find the approved address for\\n    * @return operator The approved address for this NFT, or the zero address if there is none\\n    */\\n  function getApproved(uint256 _tokenId) external view returns (address operator);\\n\\n   /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _operator operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n   /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n  function totalSupply() external view returns (uint256);\\n  function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  /**\\n    * Innherited from Open Zeppelin AccessControl.sol\\n    */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n  function grantRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n    * @notice An ERC-20 style transfer.\\n    * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n    * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n    * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n    */\\n  function transfer(\\n    address _to,\\n    uint _value\\n  ) external\\n    returns (bool success);\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n    * The `Ownable` logic is used by many 3rd party services to determine\\n    * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n    * \\n    * @notice This logic is NOT used internally by the Unlock Protocol and is made \\n    * available only as a convenience helper.\\n    */\\n  function owner() external view returns (address);\\n  function setOwner(address account) external;\\n  function isOwner(address account) external returns (bool);\\n\\n  /**\\n  * Migrate data from the previous single owner => key mapping to \\n  * the new data structure w multiple tokens.\\n  * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\\n  * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\\n  * variable to the latest/current lock version\\n  */\\n  function migrate(bytes calldata _calldata) external;\\n\\n  /**\\n  * Returns the version number of the data schema currently used by the lock\\n  * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\\n  * or extend keys is disabled.\\n  * @dev will return 0 if no ;igration has ever been run\\n  */\\n  function schemaVersion() external view returns (uint);\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() external;\\n\\n    /**\\n  * Renew a given token\\n  * @notice only works for non-free, expiring, ERC20 locks\\n  * @param _tokenId the ID fo the token to renew\\n  * @param _referrer the address of the person to be granted UDT\\n  */\\n  function renewMembershipFor(\\n    uint _tokenId,\\n    address _referrer\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165StorageUpgradeable is Initializable, ERC165Upgradeable {\\n    function __ERC165Storage_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC165Storage_init_unchained();\\n    }\\n\\n    function __ERC165Storage_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/MixinDisable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * The ability to disable locks has been removed on v10 to decrease contract code size.\\n * Disabling locks can be achieved by setting `setMaxNumberOfKeys` to `totalSupply`\\n * and expire all existing keys.\\n * @dev the variables are kept to prevent conflicts in storage layout during upgrades\\n */\\ncontract MixinDisable {\\n  bool isAlive;\\n  uint256[1000] private __safe_upgrade_gap;\\n}\"\r\n    },\r\n    \"contracts/mixins/MixinERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './MixinKeys.sol';\\nimport './MixinLockCore.sol';\\n// import '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol';\\n\\n\\n/**\\n * @title Implements the ERC-721 Enumerable extension.\\n */\\ncontract MixinERC721Enumerable is\\n  ERC165StorageUpgradeable,\\n  MixinLockCore, // Implements totalSupply\\n  MixinKeys\\n{\\n  function _initializeMixinERC721Enumerable() internal\\n  {\\n    /**\\n     * register the supported interface to conform to ERC721Enumerable via ERC165\\n     * 0x780e9d63 ===\\n     *     bytes4(keccak256('totalSupply()')) ^\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\\n     *     bytes4(keccak256('tokenByIndex(uint256)'))\\n     */\\n    _registerInterface(0x780e9d63);\\n  }\\n\\n  /// @notice Enumerate valid NFTs\\n  /// @dev Throws if `_index` >= `totalSupply()`.\\n  /// @param _index A counter less than `totalSupply()`\\n  /// @return The token identifier for the `_index`th NFT,\\n  ///  (sort order not specified)\\n  function tokenByIndex(\\n    uint256 _index\\n  ) public view\\n    returns (uint256)\\n  {\\n    require(_index < _totalSupply, 'OUT_OF_RANGE');\\n    return _index;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) \\n    public \\n    view \\n    virtual \\n    override(\\n      AccessControlUpgradeable,\\n      ERC165StorageUpgradeable\\n    ) \\n    returns (bool) \\n    {\\n    return super.supportsInterface(interfaceId);\\n  }\\n  \\n  uint256[1000] private __safe_upgrade_gap;\\n}\"\r\n    },\r\n    \"contracts/mixins/MixinFunds.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\n/**\\n * @title An implementation of the money related functions.\\n * @author HardlyDifficult (unlock-protocol.com)\\n */\\ncontract MixinFunds\\n{\\n  using AddressUpgradeable for address payable;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /**\\n   * The token-type that this Lock is priced in.  If 0, then use ETH, else this is\\n   * a ERC20 token address.\\n   */\\n  address public tokenAddress;\\n\\n  function _initializeMixinFunds(\\n    address _tokenAddress\\n  ) internal\\n  {\\n    _isValidToken(_tokenAddress);\\n    tokenAddress = _tokenAddress;\\n  }\\n\\n  function _isValidToken(\\n    address _tokenAddress\\n  ) \\n  internal \\n  view\\n  {\\n    require(\\n      _tokenAddress == address(0) || IERC20Upgradeable(_tokenAddress).totalSupply() > 0,\\n      'INVALID_TOKEN'\\n    );\\n  }\\n\\n  /**\\n   * Transfers funds from the contract to the account provided.\\n   *\\n   * Security: be wary of re-entrancy when calling this function.\\n   */\\n  function _transfer(\\n    address _tokenAddress,\\n    address payable _to,\\n    uint _amount\\n  ) internal\\n  {\\n    if(_amount > 0) {\\n      if(_tokenAddress == address(0)) {\\n        // https://diligence.consensys.net/blog/2019/09/stop-using-soliditys-transfer-now/\\n        _to.sendValue(_amount);\\n      } else {\\n        IERC20Upgradeable token = IERC20Upgradeable(_tokenAddress);\\n        token.safeTransfer(_to, _amount);\\n      }\\n    }\\n  }\\n\\n  uint256[1000] private __safe_upgrade_gap;\\n}\"\r\n    },\r\n    \"contracts/mixins/MixinGrantKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './MixinKeys.sol';\\nimport './MixinRoles.sol';\\n\\n\\n/**\\n * @title Mixin allowing the Lock owner to grant / gift keys to users.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinGrantKeys is\\n  MixinRoles,\\n  MixinKeys\\n{\\n  /**\\n   * Allows the Lock owner to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external {\\n    _lockIsUpToDate();\\n    require(isKeyGranter(msg.sender) || isLockManager(msg.sender), 'ONLY_LOCK_MANAGER_OR_KEY_GRANTER');\\n\\n    for(uint i = 0; i < _recipients.length; i++) {\\n      require(_recipients[i] != address(0), 'INVALID_ADDRESS');\\n\\n      // an event is triggered\\n      _createNewKey(\\n        _recipients[i],\\n        _keyManagers[i],  \\n        _expirationTimestamps[i]\\n      ); \\n    }\\n  }\\n\\n  uint256[1000] private __safe_upgrade_gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/MixinKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './MixinLockCore.sol';\\n\\n/**\\n * @title Mixin for managing `Key` data, as well as the * Approval related functions needed to meet the ERC721\\n * standard.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinKeys is\\n  MixinLockCore\\n{\\n  // The struct for a key\\n  struct Key {\\n    uint tokenId;\\n    uint expirationTimestamp;\\n  }\\n\\n  // Emitted when the Lock owner expires a user's Key\\n  event ExpireKey(uint indexed tokenId);\\n\\n  // Emitted when the expiration of a key is modified\\n  event ExpirationChanged(\\n    uint indexed _tokenId,\\n    uint _amount,\\n    bool _timeAdded\\n  );\\n\\n  // fire when a key is extended\\n  event KeyExtended(\\n    uint indexed tokenId,\\n    uint newTimestamp\\n  );\\n\\n  \\n  event KeyManagerChanged(uint indexed _tokenId, address indexed _newManager);\\n\\n  event KeysMigrated(\\n    uint updatedRecordsCount\\n  );\\n\\n  // Deprecated: don't use this anymore as we know enable multiple keys per owner.\\n  mapping (address => Key) internal keyByOwner;\\n\\n  // Each tokenId can have at most exactly one owner at a time.\\n  // Returns address(0) if the token does not exist\\n  mapping (uint => address) internal _ownerOf;\\n\\n  // Keep track of the total number of unique owners for this lock (both expired and valid).\\n  // This may be larger than totalSupply\\n  uint public numberOfOwners;\\n\\n  // A given key has both an owner and a manager.\\n  // If keyManager == address(0) then the key owner is also the manager\\n  // Each key can have at most 1 keyManager.\\n  mapping (uint => address) public keyManagerOf;\\n\\n  // Keeping track of approved transfers\\n  // This is a mapping of addresses which have approved\\n  // the transfer of a key to another address where their key can be transferred\\n  // Note: the approver may actually NOT have a key... and there can only\\n  // be a single approved address\\n  mapping (uint => address) private approved;\\n\\n  // Keeping track of approved operators for a given Key manager.\\n  // This approves a given operator for all keys managed by the calling \\\"keyManager\\\"\\n  // The caller may not currently be the keyManager for ANY keys.\\n  // These approvals are never reset/revoked automatically, unlike \\\"approved\\\",\\n  // which is reset on transfer.\\n  mapping (address => mapping (address => bool)) internal managerToOperatorApproved;\\n\\n  // store all keys: tokenId => token\\n  mapping(uint256 => Key) internal _keys;\\n  \\n  // store ownership: owner => array of tokens owned by that owner\\n  mapping(address => mapping(uint256 => uint256)) private _ownedKeyIds;\\n  \\n  // store indexes: owner => list of tokenIds\\n  mapping(uint256 => uint256) private _ownedKeysIndex;\\n\\n  // Mapping owner address to token count\\n  mapping(address => uint256) private _balances;\\n  \\n  /** \\n   * Ensure that the caller is the keyManager of the key\\n   * or that the caller has been approved\\n   * for ownership of that key\\n   * @dev This is a modifier\\n   */ \\n  function _onlyKeyManagerOrApproved(\\n    uint _tokenId\\n  )\\n  internal\\n  view\\n  {\\n    require(\\n      _isKeyManager(_tokenId, msg.sender) ||\\n      approved[_tokenId] == msg.sender ||\\n      isApprovedForAll(_ownerOf[_tokenId], msg.sender),\\n      'ONLY_KEY_MANAGER_OR_APPROVED'\\n    );\\n  }\\n\\n  /**\\n   * Ensures that an owner has a valid key\\n   * @param _user the account to check\\n   * @dev This is a modifier\\n   */ \\n  function _hasValidKey(\\n    address _user\\n  ) \\n  internal \\n  view \\n  {\\n    require(\\n      getHasValidKey(_user), 'KEY_NOT_VALID'\\n    );\\n  }\\n\\n  /**\\n   * Check if a key is expired or not\\n   * @dev This is a modifier\\n   */\\n  function _isValidKey(\\n    uint _tokenId\\n  ) \\n  internal\\n  view\\n  {\\n    require(\\n      isValidKey(_tokenId),\\n      'KEY_NOT_VALID'\\n    );\\n  }\\n\\n  /**\\n   * Check if a key actually exists\\n   * @dev This is a modifier\\n   */\\n  function _isKey(\\n    uint _tokenId\\n  ) \\n  internal\\n  view \\n  {\\n    require(\\n      _keys[_tokenId].expirationTimestamp != 0, 'NO_SUCH_KEY'\\n    );\\n  }\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) public {\\n    _isKey(_tokenId);\\n    _onlyKeyManagerOrApproved(_tokenId);\\n\\n    emit Transfer(_ownerOf[_tokenId], address(0), _tokenId);\\n\\n    // delete ownership and expire key\\n    _cancelKey(_tokenId);\\n  }\\n\\n  /**\\n    * Migrate data from the previous single owner => key mapping to \\n    * the new data structure w multiple tokens.\\n    * @param _calldata an ABI-encoded representation of the params \\n    * for v10: `(uint _startIndex, uint nbRecordsToUpdate)`\\n    * -  `_startIndex` : the index of the first record to migrate\\n    * -  `_nbRecordsToUpdate` : number of records to migrate\\n    * @dev if all records can be processed at once, the `schemaVersion` will be updated\\n    * if not, you will have to call `updateSchemaVersion`\\n    * variable to the latest/current lock version\\n    */\\n  function migrate(\\n    bytes calldata _calldata\\n  ) virtual public {\\n    \\n    // make sure we have correct data version before migrating\\n    require(\\n      (\\n        (schemaVersion == publicLockVersion() - 1)\\n        ||\\n        schemaVersion == 0\\n      ),\\n      'SCHEMA_VERSION_NOT_CORRECT'\\n    );\\n\\n    // set default value to 1\\n    if(_maxKeysPerAddress == 0) {\\n      _maxKeysPerAddress = 1;\\n    }\\n\\n    // count the records that are actually migrated\\n    uint startIndex = 0;\\n    \\n    // count the records that are actually migrated\\n    uint updatedRecordsCount;\\n\\n    // the index of the last record to migrate in this call\\n    uint nbRecordsToUpdate;\\n\\n    // the total number of records to migrate\\n    uint totalSupply = totalSupply();\\n    \\n    // default to 100 when sent from Unlock, as this is called by default in the upgrade script.\\n    // If there are more than 100 keys, the migrate function will need to be called again until all keys have been migrated.\\n    if( msg.sender == address(unlockProtocol) ) {\\n      nbRecordsToUpdate = 100;\\n    } else {\\n      // decode param\\n      (startIndex, nbRecordsToUpdate) = abi.decode(_calldata, (uint, uint));\\n    }\\n\\n    // cap the number of records to migrate to totalSupply\\n    if(nbRecordsToUpdate > totalSupply) nbRecordsToUpdate = totalSupply;\\n\\n    for (uint256 i = startIndex; i < startIndex + nbRecordsToUpdate; i++) {\\n      // tokenId starts at 1\\n      uint tokenId = i + 1;\\n      address keyOwner = _ownerOf[tokenId];\\n      Key memory k = keyByOwner[keyOwner];\\n\\n      // make sure key exists\\n      if(k.tokenId != 0 && k.expirationTimestamp != 0) {\\n\\n        // copy key in new mapping\\n        _keys[i + 1] = Key(k.tokenId, k.expirationTimestamp);\\n        \\n        // delete token from previous owner\\n        delete keyByOwner[keyOwner];\\n\\n        // record new owner\\n        _createOwnershipRecord(\\n          tokenId,\\n          keyOwner\\n        );\\n\\n        // keep track of updated records\\n        updatedRecordsCount++;\\n      }\\n    }\\n    \\n    // enable lock if all keys has been migrated in a single run\\n    if(nbRecordsToUpdate >= totalSupply) {\\n      schemaVersion = publicLockVersion();\\n    }\\n\\n    emit KeysMigrated(\\n      updatedRecordsCount // records that have been migrated\\n    );\\n  }\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() public {\\n    _onlyLockManager();\\n    schemaVersion = publicLockVersion();\\n  }\\n\\n  /**\\n    * Returns the id of a key for a specific owner at a specific index\\n    * @notice Enumerate keys assigned to an owner\\n    * @dev Throws if `_index` >= `balanceOf(_keyOwner)` or if\\n    *  `_keyOwner` is the zero address, representing invalid keys.\\n    * @param _keyOwner address of the owner\\n    * @param _index position index in the array of all keys - less than `balanceOf(_keyOwner)`\\n    * @return The token identifier for the `_index`th key assigned to `_keyOwner`,\\n    *   (sort order not specified)\\n    * NB: name kept to be ERC721 compatible\\n    */\\n  function tokenOfOwnerByIndex(\\n    address _keyOwner,\\n    uint256 _index\\n  ) \\n    public \\n    view\\n    returns (uint256)\\n  {\\n      require(_index < balanceOf(_keyOwner), \\\"OWNER_INDEX_OUT_OF_BOUNDS\\\");\\n      return _ownedKeyIds[_keyOwner][_index];\\n  }\\n\\n  /**\\n   * Create a new key with a new tokenId and store it \\n   * \\n   */\\n  function _createNewKey(\\n    address _recipient,\\n    address _keyManager,\\n    uint expirationTimestamp\\n  ) \\n  internal \\n  returns (uint tokenId) {\\n    \\n    // We increment the tokenId counter\\n    _totalSupply++;\\n    tokenId = _totalSupply;\\n\\n    // create the key\\n    _keys[tokenId] = Key(tokenId, expirationTimestamp);\\n    \\n    // increase total number of unique owners\\n    if(balanceOf(_recipient) == 0 ) {\\n      numberOfOwners++;\\n    }\\n\\n    // store ownership\\n    _createOwnershipRecord(tokenId, _recipient);\\n\\n    // set key manager\\n    _setKeyManagerOf(tokenId, _keyManager);\\n\\n    // trigger event\\n    emit Transfer(\\n      address(0), // This is a creation.\\n      _recipient,\\n      tokenId\\n    );\\n  }\\n\\n  function _extendKey(\\n    uint _tokenId\\n  ) internal \\n    returns (\\n      uint newTimestamp\\n    )\\n  {\\n    uint expirationTimestamp = _keys[_tokenId].expirationTimestamp;\\n\\n    // prevent extending a valid non-expiring key\\n    require(expirationTimestamp != type(uint).max, 'CANT_EXTEND_NON_EXPIRING_KEY');\\n    \\n    // if non-expiring but not valid then extend\\n    if(expirationDuration == type(uint).max) {\\n      newTimestamp = type(uint).max;\\n    } else {\\n      if (expirationTimestamp > block.timestamp) {\\n        // extends a valid key  \\n        newTimestamp = expirationTimestamp + expirationDuration;\\n      } else {\\n        // renew an expired or cancelled key\\n        newTimestamp = block.timestamp + expirationDuration;\\n      }\\n    }\\n\\n    _keys[_tokenId].expirationTimestamp = newTimestamp;\\n\\n    emit KeyExtended(_tokenId, newTimestamp);\\n  } \\n\\n  /**\\n   * Record ownership info and udpate balance for new owner\\n   * @param _tokenId the id of the token to cancel\\n   * @param _recipient the address of the new owner\\n   */\\n  function _createOwnershipRecord(\\n   uint _tokenId,\\n   address _recipient\\n  ) internal { \\n    uint length = balanceOf(_recipient);\\n    \\n    // make sure address does not have more keys than allowed\\n    require(length < _maxKeysPerAddress, 'MAX_KEYS');\\n\\n    // record new owner\\n    _ownedKeysIndex[_tokenId] = length;\\n    _ownedKeyIds[_recipient][length] = _tokenId;\\n\\n    // update ownership mapping\\n    _ownerOf[_tokenId] = _recipient;\\n    _balances[_recipient] += 1;\\n  }\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(\\n    uint _tokenIdFrom, \\n    uint _tokenIdTo, \\n    uint _amount\\n    ) public {\\n\\n    // checks\\n    _isKey(_tokenIdFrom);\\n    _isValidKey(_tokenIdFrom);\\n    _onlyKeyManagerOrApproved(_tokenIdFrom);\\n    _isKey(_tokenIdTo);\\n    \\n    // make sure there is enough time remaining\\n    require(keyExpirationTimestampFor(_tokenIdFrom) - block.timestamp >= _amount, 'NOT_ENOUGH_TIME');\\n\\n    // deduct time from parent key\\n    _timeMachine(_tokenIdFrom, _amount, false);\\n\\n    // add time to destination key\\n    _timeMachine(_tokenIdTo, _amount, true);\\n\\n  }\\n\\n  /**\\n   * Delete ownership info and udpate balance for previous owner\\n   * @param _tokenId the id of the token to cancel\\n   */\\n  function _deleteOwnershipRecord(\\n    uint _tokenId\\n  ) internal {\\n    // get owner\\n    address previousOwner = _ownerOf[_tokenId];\\n\\n    // delete previous ownership\\n    uint lastTokenIndex = balanceOf(previousOwner) - 1;\\n    uint index = _ownedKeysIndex[_tokenId];\\n\\n    // When the token to delete is the last token, the swap operation is unnecessary\\n    if (index != lastTokenIndex) {\\n        uint256 lastTokenId = _ownedKeyIds[previousOwner][lastTokenIndex];\\n        _ownedKeyIds[previousOwner][index] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _ownedKeysIndex[lastTokenId] = index; // Update the moved token's index\\n    }\\n\\n    // Deletes the contents at the last position of the array\\n    delete _ownedKeyIds[previousOwner][lastTokenIndex];\\n\\n    // remove from owner count if thats the only key \\n    if(balanceOf(previousOwner) == 1 ) {\\n      numberOfOwners--;\\n    }\\n    // update balance\\n    _balances[previousOwner] -= 1;\\n  }\\n\\n  /**\\n   * Delete ownership info about a key and expire the key\\n   * @param _tokenId the id of the token to cancel\\n   * @notice this won't 'burn' the token, as it would still exist in the record\\n   */\\n  function _cancelKey(\\n    uint _tokenId\\n  ) internal {\\n    \\n    // Deletes the contents at the last position of the array\\n    _deleteOwnershipRecord(_tokenId);\\n\\n    // expire the key\\n    _keys[_tokenId].expirationTimestamp = block.timestamp;\\n\\n    // delete previous owner\\n    _ownerOf[_tokenId] = address(0);\\n  }\\n\\n  /**\\n   * In the specific case of a Lock, each owner can own only at most 1 key.\\n   * @return The number of NFTs owned by `_keyOwner`, either 0 or 1.\\n  */\\n  function balanceOf(\\n    address _keyOwner\\n  )\\n    public\\n    view\\n    returns (uint)\\n  {\\n    require(_keyOwner != address(0), 'INVALID_ADDRESS');\\n    return _balances[_keyOwner];\\n  }\\n\\n  /**\\n   * Check if a certain key is valid\\n   * @param _tokenId the id of the key to check validity\\n   * @notice this makes use of the onValidKeyHook if it is set\\n   */\\n  function isValidKey(\\n    uint _tokenId\\n  )\\n    public\\n    view\\n    returns (bool)\\n  { \\n    bool isValid = _keys[_tokenId].expirationTimestamp > block.timestamp;\\n    return isValid;\\n  }   \\n\\n  /**\\n   * Checks if the user has at least one non-expired key.\\n   * @param _keyOwner the \\n   */\\n  function getHasValidKey(\\n    address _keyOwner\\n  )\\n    public\\n    view\\n    returns (bool isValid)\\n  { \\n    uint length = balanceOf(_keyOwner);\\n    if(length > 0) {\\n      for (uint i = 0; i < length; i++) {\\n        if(isValidKey(tokenOfOwnerByIndex(_keyOwner, i))) {\\n          return true; // stop looping at the first valid key\\n        }\\n      }\\n    }\\n\\n    // use hook if it exists\\n    if(address(onValidKeyHook) != address(0)) {\\n      isValid = onValidKeyHook.hasValidKey(\\n        address(this),\\n        _keyOwner,\\n        0, // no timestamp needed (we use tokenId)\\n        isValid\\n      );\\n    }\\n    return isValid;   \\n  }\\n\\n  /**\\n    * Returns the key's ExpirationTimestamp field for a given token.\\n    * @param _tokenId the tokenId of the key\\n    * @dev Returns 0 if the owner has never owned a key for this lock\\n    */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) public view\\n    returns (uint)\\n  {\\n    return _keys[_tokenId].expirationTimestamp;\\n  }\\n \\n  /** \\n   *  Returns the owner of a given tokenId\\n   * @param _tokenId the id of the token\\n   * @return the address of the owner\\n   */ \\n  function ownerOf(\\n    uint _tokenId\\n  ) public view\\n    returns(address)\\n  {\\n    return _ownerOf[_tokenId];\\n  }\\n\\n  /**\\n   * @notice Public function for updating transfer and cancel rights for a given key\\n   * @param _tokenId The id of the key to assign rights for\\n   * @param _keyManager The address with the manager's rights for the given key.\\n   * Setting _keyManager to address(0) means the keyOwner is also the keyManager\\n   */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) public\\n  {\\n    _isKey(_tokenId);\\n    require(\\n      _isKeyManager(_tokenId, msg.sender) ||\\n      isLockManager(msg.sender),\\n      'UNAUTHORIZED_KEY_MANAGER_UPDATE'\\n    );\\n    _setKeyManagerOf(_tokenId, _keyManager);\\n  }\\n\\n  function _setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) internal\\n  {\\n    if(keyManagerOf[_tokenId] != _keyManager) {\\n      keyManagerOf[_tokenId] = _keyManager;\\n      _clearApproval(_tokenId);\\n      emit KeyManagerChanged(_tokenId, _keyManager);\\n    }\\n  }\\n\\n    /**\\n   * This approves _approved to get ownership of _tokenId.\\n   * Note: that since this is used for both purchase and transfer approvals\\n   * the approved token may not exist.\\n   */\\n  function approve(\\n    address _approved,\\n    uint _tokenId\\n  )\\n    public\\n  {\\n    _onlyKeyManagerOrApproved(_tokenId);\\n    require(msg.sender != _approved, 'APPROVE_SELF');\\n\\n    approved[_tokenId] = _approved;\\n    emit Approval(_ownerOf[_tokenId], _approved, _tokenId);\\n  }\\n\\n    /**\\n   * @notice Get the approved address for a single NFT\\n   * @dev Throws if `_tokenId` is not a valid NFT.\\n   * @param _tokenId The NFT to find the approved address for\\n   * @return The approved address for this NFT, or the zero address if there is none\\n   */\\n  function getApproved(\\n    uint _tokenId\\n  ) public view\\n    returns (address)\\n  {\\n    _isKey(_tokenId);\\n    address approvedRecipient = approved[_tokenId];\\n    return approvedRecipient;\\n  }\\n\\n    /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(\\n    address _owner,\\n    address _operator\\n  ) public view\\n    returns (bool)\\n  {\\n    return managerToOperatorApproved[_owner][_operator];\\n  }\\n\\n  /**\\n   * Returns true if _keyManager is the manager of the key\\n   * identified by _tokenId\\n   */\\n  function _isKeyManager(\\n    uint _tokenId,\\n    address _keyManager\\n  ) internal view\\n    returns (bool)\\n  {\\n    if(keyManagerOf[_tokenId] == _keyManager ||\\n      (keyManagerOf[_tokenId] == address(0) && ownerOf(_tokenId) == _keyManager)) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n    * @notice Modify the expirationTimestamp of a key\\n    * by a given amount.\\n    * @param _tokenId The ID of the key to modify.\\n    * @param _deltaT The amount of time in seconds by which\\n    * to modify the keys expirationTimestamp\\n    * @param _addTime Choose whether to increase or decrease\\n    * expirationTimestamp (false == decrease, true == increase)\\n    * @dev Throws if owner does not have a valid key.\\n    */\\n  function _timeMachine(\\n    uint _tokenId,\\n    uint256 _deltaT,\\n    bool _addTime\\n  ) internal\\n  {\\n    _isKey(_tokenId);\\n\\n    uint formerTimestamp = _keys[_tokenId].expirationTimestamp;\\n\\n    if(_addTime) {\\n      if(formerTimestamp > block.timestamp) {\\n        // append to valid key\\n        _keys[_tokenId].expirationTimestamp = formerTimestamp + _deltaT;\\n      } else {\\n        // add from now if key is expired\\n        _keys[_tokenId].expirationTimestamp = block.timestamp + _deltaT;\\n      }\\n    } else {\\n        _keys[_tokenId].expirationTimestamp = formerTimestamp - _deltaT;\\n    }\\n\\n    emit ExpirationChanged(_tokenId, _deltaT, _addTime);\\n  }\\n\\n  /**\\n   * @dev Function to clear current approval of a given token ID\\n   * @param _tokenId uint256 ID of the token to be transferred\\n   */\\n  function _clearApproval(\\n    uint256 _tokenId\\n  ) internal\\n  {\\n    if (approved[_tokenId] != address(0)) {\\n      approved[_tokenId] = address(0);\\n    }\\n  }\\n\\n  /**\\n   * @notice Change the maximum number of keys the lock can edit\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   * @dev Can't be smaller than the existing supply\\n   */\\n  function setMaxNumberOfKeys (uint _maxNumberOfKeys) external {\\n     _onlyLockManager();\\n     require (_maxNumberOfKeys >= _totalSupply, \\\"SMALLER_THAN_SUPPLY\\\");\\n     maxNumberOfKeys = _maxNumberOfKeys;\\n  }\\n\\n  /**\\n   * A function to change the default duration of each key in the lock\\n   * @notice keys previously bought are unaffected by this change (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased \\n   * or type(uint).max for a non-expiring key\\n   */\\n  function setExpirationDuration(uint _newExpirationDuration) external {\\n     _onlyLockManager();\\n     expirationDuration = _newExpirationDuration;\\n  }\\n  \\n  /**\\n   * Set the maximum number of keys a specific address can use\\n   * @param _maxKeys the maximum amount of key a user can own\\n   */\\n  function setMaxKeysPerAddress(uint _maxKeys) external {\\n     _onlyLockManager();\\n     require(_maxKeys != 0, 'NULL_VALUE');\\n     _maxKeysPerAddress = _maxKeys;\\n  }\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint) {\\n    return _maxKeysPerAddress;\\n  }\\n  \\n  // decrease 1000 to 996 when adding new tokens/owners mappings in v10\\n  uint256[996] private __safe_upgrade_gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/MixinLockCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// import '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport './MixinDisable.sol';\\nimport './MixinRoles.sol';\\nimport '../interfaces/IUnlock.sol';\\nimport './MixinFunds.sol';\\nimport '../interfaces/hooks/ILockKeyCancelHook.sol';\\nimport '../interfaces/hooks/ILockKeyPurchaseHook.sol';\\nimport '../interfaces/hooks/ILockValidKeyHook.sol';\\nimport '../interfaces/hooks/ILockTokenURIHook.sol';\\n\\n/**\\n * @title Mixin for core lock data and functions.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinLockCore is\\n  MixinRoles,\\n  MixinFunds,\\n  MixinDisable\\n{\\n  using AddressUpgradeable for address;\\n\\n  event Withdrawal(\\n    address indexed sender,\\n    address indexed tokenAddress,\\n    address indexed beneficiary,\\n    uint amount\\n  );\\n\\n  event PricingChanged(\\n    uint oldKeyPrice,\\n    uint keyPrice,\\n    address oldTokenAddress,\\n    address tokenAddress\\n  );\\n\\n   /**\\n    * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n    */\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n  /**\\n    * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n    */\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n  /**\\n    * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n    */\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  // Unlock Protocol address\\n  // TODO: should we make that private/internal?\\n  IUnlock public unlockProtocol;\\n\\n  // Duration in seconds for which the keys are valid, after creation\\n  // should we take a smaller type use less gas?\\n  uint public expirationDuration;\\n\\n  // price in wei of the next key\\n  // TODO: allow support for a keyPriceCalculator which could set prices dynamically\\n  uint public keyPrice;\\n\\n  // Max number of keys sold if the keyReleaseMechanism is public\\n  uint public maxNumberOfKeys;\\n\\n  // A count of how many new key purchases there have been\\n  uint internal _totalSupply;\\n\\n  // The account which will receive funds on withdrawal\\n  address payable public beneficiary;\\n\\n  // The denominator component for values specified in basis points.\\n  uint internal constant BASIS_POINTS_DEN = 10000;\\n\\n  ILockKeyPurchaseHook public onKeyPurchaseHook;\\n  ILockKeyCancelHook public onKeyCancelHook;\\n  ILockValidKeyHook public onValidKeyHook;\\n  ILockTokenURIHook public onTokenURIHook;\\n\\n  // use to check data version\\n  uint public schemaVersion;\\n\\n  // keep track of how many key a single address can use\\n  uint internal _maxKeysPerAddress;\\n\\n  // modifier to check if data has been upgraded\\n  function _lockIsUpToDate() internal view {\\n    require(\\n      schemaVersion == publicLockVersion(),\\n      'MIGRATION_REQUIRED'\\n    );\\n  }\\n\\n  // modifier\\n  function _onlyLockManagerOrBeneficiary() \\n  internal \\n  view\\n  {\\n    require(\\n      isLockManager(msg.sender) || msg.sender == beneficiary,\\n      'ONLY_LOCK_MANAGER_OR_BENEFICIARY'\\n    );\\n  }\\n  \\n  function _initializeMixinLockCore(\\n    address payable _beneficiary,\\n    uint _expirationDuration,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys\\n  ) internal\\n  {\\n    unlockProtocol = IUnlock(msg.sender); // Make sure we link back to Unlock's smart contract.\\n    beneficiary = _beneficiary;\\n    expirationDuration = _expirationDuration;\\n    keyPrice = _keyPrice;\\n    maxNumberOfKeys = _maxNumberOfKeys;\\n\\n    // update only when initialized\\n    schemaVersion = publicLockVersion();\\n\\n    // only a single key per address is allowed by default\\n    _maxKeysPerAddress = 1;\\n  }\\n\\n  // The version number of the current implementation on this network\\n  function publicLockVersion(\\n  ) public pure\\n    returns (uint16)\\n  {\\n    return 10;\\n  }\\n\\n  /**\\n   * @dev Called by owner to withdraw all funds from the lock and send them to the `beneficiary`.\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    uint _amount\\n  ) external\\n  {\\n    _onlyLockManagerOrBeneficiary();\\n\\n    // get balance\\n    uint balance;\\n    if(_tokenAddress == address(0)) {\\n      balance = address(this).balance;\\n    } else {\\n      balance = IERC20Upgradeable(_tokenAddress).balanceOf(address(this));\\n    }\\n\\n    uint amount;\\n    if(_amount == 0 || _amount > balance)\\n    {\\n      require(balance > 0, 'NOT_ENOUGH_FUNDS');\\n      amount = balance;\\n    }\\n    else\\n    {\\n      amount = _amount;\\n    }\\n\\n    emit Withdrawal(msg.sender, _tokenAddress, beneficiary, amount);\\n    // Security: re-entrancy not a risk as this is the last line of an external function\\n    _transfer(_tokenAddress, beneficiary, amount);\\n  }\\n\\n  /**\\n   * A function which lets the owner of the lock change the pricing for future purchases.\\n   * This consists of 2 parts: The token address and the price in the given token.\\n   * In order to set the token to ETH, use 0 for the token Address.\\n   */\\n  function updateKeyPricing(\\n    uint _keyPrice,\\n    address _tokenAddress\\n  )\\n    external\\n  {\\n    _onlyLockManager();\\n    _isValidToken(_tokenAddress);\\n    uint oldKeyPrice = keyPrice;\\n    address oldTokenAddress = tokenAddress;\\n    keyPrice = _keyPrice;\\n    tokenAddress = _tokenAddress;\\n    emit PricingChanged(oldKeyPrice, keyPrice, oldTokenAddress, tokenAddress);\\n  }\\n\\n  /**\\n   * A function which lets the owner of the lock update the beneficiary account,\\n   * which receives funds on withdrawal.\\n   */\\n  function updateBeneficiary(\\n    address payable _beneficiary\\n  ) external {\\n    _onlyLockManagerOrBeneficiary();\\n    require(_beneficiary != address(0), 'INVALID_ADDRESS');\\n    beneficiary = _beneficiary;\\n  }\\n\\n  /**\\n   * @notice Allows a lock manager to add or remove an event hook\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook\\n  ) external\\n  {\\n    _onlyLockManager();\\n    require(_onKeyPurchaseHook == address(0) || _onKeyPurchaseHook.isContract(), 'INVALID_ON_KEY_SOLD_HOOK');\\n    require(_onKeyCancelHook == address(0) || _onKeyCancelHook.isContract(), 'INVALID_ON_KEY_CANCEL_HOOK');\\n    require(_onValidKeyHook == address(0) || _onValidKeyHook.isContract(), 'INVALID_ON_VALID_KEY_HOOK');\\n    require(_onTokenURIHook == address(0) || _onTokenURIHook.isContract(), 'INVALID_ON_TOKEN_URI_HOOK');\\n    onKeyPurchaseHook = ILockKeyPurchaseHook(_onKeyPurchaseHook);\\n    onKeyCancelHook = ILockKeyCancelHook(_onKeyCancelHook);\\n    onTokenURIHook = ILockTokenURIHook(_onTokenURIHook);\\n    onValidKeyHook = ILockValidKeyHook(_onValidKeyHook);\\n  }\\n\\n  function totalSupply()\\n    public\\n    view returns(uint256)\\n  {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @notice An ERC-20 style approval, allowing the spender to transfer funds directly from this lock.\\n   */\\n  function approveBeneficiary(\\n    address _spender,\\n    uint _amount\\n  ) public\\n    returns (bool)\\n  {\\n    _onlyLockManagerOrBeneficiary();\\n    return IERC20Upgradeable(tokenAddress).approve(_spender, _amount);\\n  }\\n\\n\\n  // decreased from 1000 to 998 when adding `schemaVersion` and `maxKeysPerAddress` in v10 \\n  uint256[998] private __safe_upgrade_gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/MixinLockMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol';\\n// import '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol';\\nimport '../UnlockUtils.sol';\\nimport './MixinKeys.sol';\\nimport './MixinLockCore.sol';\\nimport './MixinRoles.sol';\\n\\n/**\\n * @title Mixin for metadata about the Lock.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinLockMetadata is\\n  ERC165StorageUpgradeable,\\n  MixinRoles,\\n  MixinLockCore,\\n  MixinKeys\\n{\\n  using UnlockUtils for uint;\\n  using UnlockUtils for address;\\n  using UnlockUtils for string;\\n\\n  /// A descriptive name for a collection of NFTs in this contract.Defaults to \\\"Unlock-Protocol\\\" but is settable by lock owner\\n  string public name;\\n\\n  /// An abbreviated name for NFTs in this contract. Defaults to \\\"KEY\\\" but is settable by lock owner\\n  string private lockSymbol;\\n\\n  // the base Token URI for this Lock. If not set by lock owner, the global URI stored in Unlock is used.\\n  string private baseTokenURI;\\n\\n  event NewLockSymbol(\\n    string symbol\\n  );\\n\\n  function _initializeMixinLockMetadata(\\n    string calldata _lockName\\n  ) internal\\n  {\\n    ERC165StorageUpgradeable.__ERC165Storage_init();\\n    name = _lockName;\\n    // registering the optional erc721 metadata interface with ERC165.sol using\\n    // the ID specified in the standard: https://eips.ethereum.org/EIPS/eip-721\\n    _registerInterface(0x5b5e139f);\\n  }\\n\\n  /**\\n   * Allows the Lock owner to assign a descriptive name for this Lock.\\n   */\\n  function updateLockName(\\n    string calldata _lockName\\n  ) external\\n  {\\n    _onlyLockManager();\\n    name = _lockName;\\n  }\\n\\n  /**\\n   * Allows the Lock owner to assign a Symbol for this Lock.\\n   */\\n  function updateLockSymbol(\\n    string calldata _lockSymbol\\n  ) external\\n  {\\n    _onlyLockManager();\\n    lockSymbol = _lockSymbol;\\n    emit NewLockSymbol(_lockSymbol);\\n  }\\n\\n  /**\\n    * @dev Gets the token symbol\\n    * @return string representing the token name\\n    */\\n  function symbol()\\n    external view\\n    returns(string memory)\\n  {\\n    if(bytes(lockSymbol).length == 0) {\\n      return unlockProtocol.globalTokenSymbol();\\n    } else {\\n      return lockSymbol;\\n    }\\n  }\\n\\n  /**\\n   * Allows the Lock owner to update the baseTokenURI for this Lock.\\n   */\\n  function setBaseTokenURI(\\n    string calldata _baseTokenURI\\n  ) external\\n  {\\n    _onlyLockManager();\\n    baseTokenURI = _baseTokenURI;\\n  }\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @param _tokenId The iD of the token  for which we want to retrieve the URI.\\n   * If 0 is passed here, we just return the appropriate baseTokenURI.\\n   * If a custom URI has been set we don't return the lock address.\\n   * It may be included in the custom baseTokenURI if needed.\\n   * @dev  URIs are defined in RFC 3986. The URI may point to a JSON file\\n   * that conforms to the \\\"ERC721 Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external\\n    view\\n    returns(string memory)\\n  {\\n    string memory URI;\\n    string memory tokenId;\\n    string memory lockAddress = address(this).address2Str();\\n    string memory seperator;\\n\\n    if(_tokenId != 0) {\\n      tokenId = _tokenId.uint2Str();\\n    } else {\\n      tokenId = '';\\n    }\\n\\n    if(address(onTokenURIHook) != address(0))\\n    {\\n      uint expirationTimestamp = keyExpirationTimestampFor(_tokenId);\\n      return onTokenURIHook.tokenURI(\\n        address(this),\\n        msg.sender,\\n        ownerOf(_tokenId),\\n        _tokenId,\\n        expirationTimestamp\\n        );\\n    }\\n\\n    if(bytes(baseTokenURI).length == 0) {\\n      URI = unlockProtocol.globalBaseTokenURI();\\n      seperator = '/';\\n    } else {\\n      URI = baseTokenURI;\\n      seperator = '';\\n      lockAddress = '';\\n    }\\n\\n    return URI.strConcat(\\n        lockAddress,\\n        seperator,\\n        tokenId\\n      );\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) \\n    public \\n    view \\n    virtual \\n    override(\\n      AccessControlUpgradeable,\\n      ERC165StorageUpgradeable\\n    ) \\n    returns (bool) \\n    {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  uint256[1000] private __safe_upgrade_gap;\\n}\"\r\n    },\r\n    \"contracts/mixins/MixinPurchase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './MixinDisable.sol';\\nimport './MixinKeys.sol';\\nimport './MixinLockCore.sol';\\nimport './MixinFunds.sol';\\n\\n/**\\n * @title Mixin for the purchase-related functions.\\n * @author HardlyDifficult\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinPurchase is\\n  MixinFunds,\\n  MixinDisable,\\n  MixinLockCore,\\n  MixinKeys\\n{\\n  event RenewKeyPurchase(address indexed owner, uint newExpiration);\\n\\n  event GasRefunded(address indexed receiver, uint refundedAmount, address tokenAddress);\\n  \\n  event UnlockCallFailed(address indexed lockAddress, address unlockAddress);\\n\\n  // default to 0 \\n  uint256 internal _gasRefundValue;\\n\\n  // Keep track of ERC20 price when purchased\\n  mapping(uint256 => uint256) private _originalPrices;\\n  \\n  // Keep track of duration when purchased\\n  mapping(uint256 => uint256) internal _originalDurations;\\n  \\n  // keep track of token pricing when purchased\\n  mapping(uint256 => address) private _originalTokens;\\n\\n  /**\\n  * @dev Set the value/price to be refunded to the sender on purchase\\n  */\\n\\n  function setGasRefundValue(uint256 _refundValue) external {\\n    _onlyLockManager();\\n    _gasRefundValue = _refundValue;\\n  }\\n  \\n  /**\\n  * @dev Returns value/price to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _refundValue) {\\n    return _gasRefundValue;\\n  }\\n\\n  /**\\n  * @dev Helper to communicate with Unlock (record GNP and mint UDT tokens)\\n  */\\n  function _recordKeyPurchase (uint _keyPrice, address _referrer) internal  {\\n    // make sure unlock is a contract, and we catch possible reverts\\n      if (address(unlockProtocol).code.length > 0) {\\n        // call Unlock contract to record GNP\\n        // the function is capped by gas to prevent running out of gas\\n        try unlockProtocol.recordKeyPurchase{gas: 300000}(_keyPrice, _referrer) \\n        {} \\n        catch {\\n          // emit missing unlock\\n          emit UnlockCallFailed(address(this), address(unlockProtocol));\\n        }\\n      } else {\\n        // emit missing unlock\\n        emit UnlockCallFailed(address(this), address(unlockProtocol));\\n      }\\n  }\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_values is ignored when using ETH)\\n  * @param _recipients array of addresses of the recipients of the purchased key\\n  * @param _referrers array of addresses of the users making the referral\\n  * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored \\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  */\\n  function purchase(\\n    uint256[] memory _values,\\n    address[] memory _recipients,\\n    address[] memory _referrers,\\n    address[] memory _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable\\n  {\\n    _lockIsUpToDate();\\n    require(maxNumberOfKeys > _totalSupply, 'LOCK_SOLD_OUT');\\n    require(_recipients.length == _referrers.length, 'INVALID_REFERRERS_LENGTH');\\n    require(_recipients.length == _keyManagers.length, 'INVALID_KEY_MANAGERS_LENGTH');\\n\\n    uint totalPriceToPay;\\n    uint tokenId;\\n\\n    for (uint256 i = 0; i < _recipients.length; i++) {\\n      // check recipient address\\n      address _recipient = _recipients[i];\\n      require(_recipient != address(0), 'INVALID_ADDRESS');\\n      \\n      // check for a non-expiring key\\n      if (expirationDuration == type(uint).max) {\\n        // create a new key\\n        tokenId = _createNewKey(\\n          _recipient,\\n          _keyManagers[i],\\n          type(uint).max\\n        );\\n      } else {\\n        tokenId = _createNewKey(\\n          _recipient,\\n          _keyManagers[i],\\n          block.timestamp + expirationDuration\\n        );\\n      }\\n\\n      // price      \\n\\n      uint inMemoryKeyPrice = purchasePriceFor(_recipient, _referrers[i], _data[i]);\\n      totalPriceToPay = totalPriceToPay + inMemoryKeyPrice;\\n\\n      // store values at purchase time\\n      _originalPrices[tokenId] = inMemoryKeyPrice;\\n      _originalDurations[tokenId] = expirationDuration;\\n      _originalTokens[tokenId] = tokenAddress;\\n      \\n      if(tokenAddress != address(0)) {\\n        require(inMemoryKeyPrice <= _values[i], 'INSUFFICIENT_ERC20_VALUE');\\n      }\\n\\n      // store in unlock\\n      _recordKeyPurchase(inMemoryKeyPrice, _referrers[i]);\\n\\n      // fire hook\\n      uint pricePaid = tokenAddress == address(0) ? msg.value : _values[i];\\n      if(address(onKeyPurchaseHook) != address(0)) {\\n        onKeyPurchaseHook.onKeyPurchase(\\n          msg.sender, \\n          _recipient, \\n          _referrers[i], \\n          _data[i], \\n          inMemoryKeyPrice, \\n          pricePaid\\n        );\\n      }\\n    }\\n\\n    // transfer the ERC20 tokens\\n    if(tokenAddress != address(0)) {\\n      IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\\n      token.transferFrom(msg.sender, address(this), totalPriceToPay);\\n    } else {\\n      // We explicitly allow for greater amounts of ETH or tokens to allow 'donations'\\n      require(totalPriceToPay <= msg.value, 'INSUFFICIENT_VALUE');\\n    }\\n\\n    // refund gas\\n    _refundGas();\\n  }\\n\\n  /**\\n  * @dev Extend function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _tokenId id of the key to extend\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n  */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) \\n    public \\n    payable\\n  {\\n    _lockIsUpToDate();\\n    _isKey(_tokenId);\\n\\n    // extend key duration\\n    _extendKey(_tokenId);\\n\\n    // transfer the tokens\\n    uint inMemoryKeyPrice = purchasePriceFor(ownerOf(_tokenId), _referrer, _data);\\n\\n    if(tokenAddress != address(0)) {\\n      require(inMemoryKeyPrice <= _value, 'INSUFFICIENT_ERC20_VALUE');\\n      IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\\n      token.transferFrom(msg.sender, address(this), inMemoryKeyPrice);\\n    } else {\\n      // We explicitly allow for greater amounts of ETH or tokens to allow 'donations'\\n      require(inMemoryKeyPrice <= msg.value, 'INSUFFICIENT_VALUE');\\n    }\\n\\n    // refund gas (if applicable)\\n    _refundGas();\\n  }\\n\\n  /**\\n  * Renew a given token\\n  * @notice only works for non-free, expiring, ERC20 locks\\n  * @param _tokenId the ID fo the token to renew\\n  * @param _referrer the address of the person to be granted UDT\\n  */\\n  function renewMembershipFor(\\n    uint _tokenId,\\n    address _referrer\\n  ) public {\\n    _lockIsUpToDate();\\n    _isKey(_tokenId);\\n\\n    // check the lock\\n    require(_originalDurations[_tokenId] != type(uint).max, 'NON_EXPIRING_LOCK');\\n    require(tokenAddress != address(0), 'NON_ERC20_LOCK');\\n\\n    // make sure duration and pricing havent changed  \\n    uint keyPrice = purchasePriceFor(ownerOf(_tokenId), _referrer, '');\\n    require(_originalPrices[_tokenId] == keyPrice, 'PRICE_CHANGED');\\n    require(_originalDurations[_tokenId] == expirationDuration, 'DURATION_CHANGED');\\n    require(_originalTokens[_tokenId] == tokenAddress, 'TOKEN_CHANGED');\\n\\n    // make sure key is ready for renewal\\n    require(isValidKey(_tokenId) == false, 'NOT_READY');\\n\\n    // extend key duration\\n    _extendKey(_tokenId);\\n\\n    // store in unlock\\n    _recordKeyPurchase(keyPrice, _referrer);\\n\\n    // transfer the tokens\\n    IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\\n    token.transferFrom(ownerOf(_tokenId), address(this), keyPrice);\\n\\n    // refund gas if applicable\\n    _refundGas();\\n  }\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev minKeyPrice considers any discount from Unlock or the OnKeyPurchase hook\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes memory _data\\n  ) public view\\n    returns (uint minKeyPrice)\\n  {\\n    if(address(onKeyPurchaseHook) != address(0))\\n    {\\n      minKeyPrice = onKeyPurchaseHook.keyPurchasePrice(msg.sender, _recipient, _referrer, _data);\\n    }\\n    else\\n    {\\n      minKeyPrice = keyPrice;\\n    }\\n  }\\n\\n  /**\\n   * Refund the specified gas amount and emit an event\\n   * @notice this does sth only if `_gasRefundValue` is non-null\\n   */\\n  function _refundGas() internal {\\n    if (_gasRefundValue != 0) { \\n      if(tokenAddress != address(0)) {\\n        IERC20Upgradeable token = IERC20Upgradeable(tokenAddress);\\n        token.transferFrom(address(this), msg.sender, _gasRefundValue);\\n      } else {\\n        (bool success, ) = msg.sender.call{value: _gasRefundValue}(\\\"\\\");\\n        require(success, \\\"REFUND_FAILED\\\");\\n      }\\n      emit GasRefunded(msg.sender, _gasRefundValue, tokenAddress);\\n    }\\n  }\\n\\n  // decreased from 1000 to 997 when added mappings for initial purchases pricing and duration on v10 \\n  uint256[997] private __safe_upgrade_gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/MixinRefunds.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './MixinKeys.sol';\\nimport './MixinLockCore.sol';\\nimport './MixinRoles.sol';\\nimport './MixinFunds.sol';\\nimport './MixinPurchase.sol';\\n\\ncontract MixinRefunds is\\n  MixinRoles,\\n  MixinFunds,\\n  MixinLockCore,\\n  MixinKeys,\\n  MixinPurchase\\n{\\n  // CancelAndRefund will return funds based on time remaining minus this penalty.\\n  // This is calculated as `proRatedRefund * refundPenaltyBasisPoints / BASIS_POINTS_DEN`.\\n  uint public refundPenaltyBasisPoints;\\n\\n  uint public freeTrialLength;\\n\\n  event CancelKey(\\n    uint indexed tokenId,\\n    address indexed owner,\\n    address indexed sendTo,\\n    uint refund\\n  );\\n\\n  event RefundPenaltyChanged(\\n    uint freeTrialLength,\\n    uint refundPenaltyBasisPoints\\n  );\\n\\n  function _initializeMixinRefunds() internal\\n  {\\n    // default to 10%\\n    refundPenaltyBasisPoints = 1000;\\n  }\\n\\n  /**\\n   * @dev Invoked by the lock owner to destroy the user's key and perform a refund and cancellation\\n   * of the key\\n   * @param _tokenId The id of the key to expire\\n   * @param _amount The amount to refund\\n   */\\n  function expireAndRefundFor(\\n    uint _tokenId,\\n    uint _amount\\n  ) external {\\n    _isKey(_tokenId);\\n    _isValidKey(_tokenId);\\n    _onlyLockManager();\\n    _cancelAndRefund(_tokenId, _amount);\\n  }\\n\\n  /**\\n   * @dev Destroys the key and sends a refund based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId)\\n    external\\n  {\\n    _isKey(_tokenId);\\n    _isValidKey(_tokenId);\\n    _onlyKeyManagerOrApproved(_tokenId);\\n    uint refund = getCancelAndRefundValue(_tokenId);\\n    _cancelAndRefund(_tokenId, refund);\\n  }\\n\\n  /**\\n   * Allow the owner to change the refund penalty.\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external {\\n    _onlyLockManager();\\n    emit RefundPenaltyChanged(\\n      _freeTrialLength,\\n      _refundPenaltyBasisPoints\\n    );\\n\\n    freeTrialLength = _freeTrialLength;\\n    refundPenaltyBasisPoints = _refundPenaltyBasisPoints;\\n  }\\n\\n  /**\\n   * @dev cancels the key for the given keyOwner and sends the refund to the msg.sender.\\n   * @notice this deletes ownership info and expire the key, but doesnt 'burn' it\\n   */\\n  function _cancelAndRefund(\\n    uint _tokenId,\\n    uint refund\\n  ) internal\\n  {\\n    address payable keyOwner = payable(ownerOf(_tokenId));\\n    \\n    // delete ownership info and expire the key\\n    _cancelKey(_tokenId);\\n    \\n    // emit event\\n    emit CancelKey(_tokenId, keyOwner, msg.sender, refund);\\n    \\n    if (refund > 0) {\\n      _transfer(tokenAddress, keyOwner, refund);\\n    }\\n\\n    // make future reccuring transactions impossible\\n    _originalDurations[_tokenId] = 0;\\n    \\n    // inform the hook if there is one registered\\n    if(address(onKeyCancelHook) != address(0))\\n    {\\n      onKeyCancelHook.onKeyCancel(msg.sender, keyOwner, refund);\\n    }\\n  }\\n\\n  /**\\n   * @dev Determines how much of a refund a key would be worth if a cancelAndRefund\\n   * is issued now.\\n   * @param _tokenId the key to check the refund value for.\\n   * @notice due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   */\\n  function getCancelAndRefundValue(\\n    uint _tokenId\\n  )\\n    public view\\n    returns (uint refund)\\n  {\\n    _isValidKey(_tokenId);\\n\\n    // return entire purchased price if key is non-expiring\\n    if(expirationDuration == type(uint).max) {\\n      return keyPrice;\\n    }\\n\\n    // substract free trial value\\n    uint timeRemaining = keyExpirationTimestampFor(_tokenId) - block.timestamp;\\n    if(timeRemaining + freeTrialLength >= expirationDuration) {\\n      refund = keyPrice;\\n    } else {\\n      refund = keyPrice * timeRemaining / expirationDuration;\\n    }\\n\\n    // Apply the penalty if this is not a free trial\\n    if(freeTrialLength == 0 || timeRemaining + freeTrialLength < expirationDuration)\\n    {\\n      uint penalty = keyPrice * refundPenaltyBasisPoints / BASIS_POINTS_DEN;\\n      if (refund > penalty) {\\n        refund -= penalty;\\n      } else {\\n        refund = 0;\\n      }\\n    }\\n  }\\n\\n  uint256[1000] private __safe_upgrade_gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/MixinTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './MixinRoles.sol';\\nimport './MixinDisable.sol';\\nimport './MixinKeys.sol';\\nimport './MixinFunds.sol';\\nimport './MixinLockCore.sol';\\nimport './MixinPurchase.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\n\\n/**\\n * @title Mixin for the transfer-related functions needed to meet the ERC721\\n * standard.\\n * @author Nick Furfaro\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\n\\ncontract MixinTransfer is\\n  MixinRoles,\\n  MixinFunds,\\n  MixinLockCore,\\n  MixinKeys,\\n  MixinPurchase\\n{\\n  using AddressUpgradeable for address;\\n\\n  event TransferFeeChanged(\\n    uint transferFeeBasisPoints\\n  );\\n\\n  // 0x150b7a02 == bytes4(keccak256('onERC721Received(address,address,uint256,bytes)'))\\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n  // The fee relative to keyPrice to charge when transfering a Key to another account\\n  // (potentially on a 0x marketplace).\\n  // This is calculated as `keyPrice * transferFeeBasisPoints / BASIS_POINTS_DEN`.\\n  uint public transferFeeBasisPoints;\\n\\n  /**\\n  * @notice Allows the key owner to safely transfer a portion of the remaining time \\n  * from their key to a new key\\n  * @param _tokenIdFrom the key to share\\n  * @param _to The recipient of the shared time\\n  * @param _timeShared The amount of time shared\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenIdFrom,\\n    uint _timeShared\\n  ) public\\n  {\\n    _lockIsUpToDate();\\n    require(maxNumberOfKeys > _totalSupply, 'LOCK_SOLD_OUT');\\n    _onlyKeyManagerOrApproved(_tokenIdFrom);\\n    _isValidKey(_tokenIdFrom);\\n    require(transferFeeBasisPoints < BASIS_POINTS_DEN, 'KEY_TRANSFERS_DISABLED');\\n    require(_to != address(0), 'INVALID_ADDRESS');\\n    address keyOwner = _ownerOf[_tokenIdFrom];\\n    require(keyOwner != _to, 'TRANSFER_TO_SELF');\\n\\n    // store time to be added\\n    uint time;\\n\\n    // get the remaining time for the origin key\\n    uint timeRemaining = keyExpirationTimestampFor(_tokenIdFrom) - block.timestamp;\\n\\n    // get the transfer fee based on amount of time wanted share\\n    uint fee = getTransferFee(_tokenIdFrom, _timeShared);\\n    uint timePlusFee = _timeShared + fee;\\n\\n    // ensure that we don't try to share too much\\n    if(timePlusFee < timeRemaining) {\\n      // now we can safely set the time\\n      time = _timeShared;\\n      // deduct time from parent key, including transfer fee\\n      _timeMachine(_tokenIdFrom, timePlusFee, false);\\n    } else {\\n      // we have to recalculate the fee here\\n      fee = getTransferFee(_tokenIdFrom, timeRemaining);\\n      time = timeRemaining - fee;\\n      _keys[_tokenIdFrom].expirationTimestamp = block.timestamp; // Effectively expiring the key\\n      emit ExpireKey(_tokenIdFrom);\\n    }\\n\\n    // create new key\\n    uint tokenIdTo = _createNewKey(\\n      _to,\\n      address(0),\\n      block.timestamp + time\\n    );\\n    \\n    // trigger event\\n    emit Transfer(\\n      keyOwner,\\n      _to,\\n      tokenIdTo\\n    );\\n\\n    require(_checkOnERC721Received(keyOwner, _to, tokenIdTo, ''), 'NON_COMPLIANT_ERC721_RECEIVER');\\n  }\\n\\n\\n  function transferFrom(\\n    address _from,\\n    address _recipient,\\n    uint _tokenId\\n  )\\n    public\\n  {\\n    _isValidKey(_tokenId);\\n    _onlyKeyManagerOrApproved(_tokenId);\\n    require(ownerOf(_tokenId) == _from, 'TRANSFER_FROM: NOT_KEY_OWNER');\\n    require(transferFeeBasisPoints < BASIS_POINTS_DEN, 'KEY_TRANSFERS_DISABLED');\\n    require(_recipient != address(0), 'INVALID_ADDRESS');\\n    require(_from != _recipient, 'TRANSFER_TO_SELF');\\n\\n    // subtract the fee from the senders key before the transfer\\n    _timeMachine(_tokenId, getTransferFee(_tokenId, 0), false);  \\n\\n    // transfer a token\\n    Key storage key = _keys[_tokenId];\\n\\n    // update expiration\\n    key.expirationTimestamp = keyExpirationTimestampFor(_tokenId);\\n\\n    // increase total number of unique owners\\n    if(balanceOf(_recipient) == 0 ) {\\n      numberOfOwners++;\\n    }\\n\\n    // delete token from previous owner\\n    _deleteOwnershipRecord(_tokenId);\\n    \\n    // record new owner\\n    _createOwnershipRecord(_tokenId, _recipient);\\n\\n    // clear any previous approvals\\n    _setKeyManagerOf(_tokenId, address(0));\\n    _clearApproval(_tokenId);\\n\\n    // make future reccuring transactions impossible\\n    _originalDurations[_tokenId] = 0;\\n\\n    // trigger event\\n    emit Transfer(\\n      _from,\\n      _recipient,\\n      _tokenId\\n    );\\n  }\\n\\n  /**\\n   * @notice An ERC-20 style transfer.\\n   * @param _tokenId the Id of the token to send\\n   * @param _to the destination address\\n   * @param _valueBasisPoint a percentage (expressed as basis points) of the time to be transferred\\n   * @return success bool success/failure of the transfer\\n   */\\n  function transfer(\\n    uint _tokenId,\\n    address _to,\\n    uint _valueBasisPoint\\n  ) public\\n    returns (bool success)\\n  {\\n    _isValidKey(_tokenId);\\n    uint timeShared = ( keyExpirationTimestampFor(_tokenId) - block.timestamp ) * _valueBasisPoint / BASIS_POINTS_DEN;\\n    shareKey( _to, _tokenId, timeShared);\\n    // Errors will cause a revert\\n    return true;\\n  }\\n\\n  /**\\n  * @notice Transfers the ownership of an NFT from one address to another address\\n  * @dev This works identically to the other function with an extra data parameter,\\n  *  except this function just sets data to ''\\n  * @param _from The current owner of the NFT\\n  * @param _to The new owner\\n  * @param _tokenId The NFT to transfer\\n  */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint _tokenId\\n  )\\n    public\\n  {\\n    safeTransferFrom(_from, _to, _tokenId, '');\\n  }\\n\\n   /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _to operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(\\n    address _to,\\n    bool _approved\\n  ) public\\n  {\\n    require(_to != msg.sender, 'APPROVE_SELF');\\n    require(transferFeeBasisPoints < BASIS_POINTS_DEN, 'KEY_TRANSFERS_DISABLED');\\n    managerToOperatorApproved[msg.sender][_to] = _approved;\\n    emit ApprovalForAll(msg.sender, _to, _approved);\\n  }\\n\\n  /**\\n  * @notice Transfers the ownership of an NFT from one address to another address.\\n  * When transfer is complete, this functions\\n  *  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  *  `onERC721Received` on `_to` and throws if the return value is not\\n  *  `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @param _from The current owner of the NFT\\n  * @param _to The new owner\\n  * @param _tokenId The NFT to transfer\\n  * @param _data Additional data with no specified format, sent in call to `_to`\\n  */\\n  function safeTransferFrom(\\n    address _from,\\n    address _to,\\n    uint _tokenId,\\n    bytes memory _data\\n  )\\n    public\\n  {\\n    transferFrom(_from, _to, _tokenId);\\n    require(_checkOnERC721Received(_from, _to, _tokenId, _data), 'NON_COMPLIANT_ERC721_RECEIVER');\\n\\n  }\\n\\n  /**\\n   * Allow the Lock owner to change the transfer fee.\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external {\\n    _onlyLockManager();\\n    emit TransferFeeChanged(\\n      _transferFeeBasisPoints\\n    );\\n    transferFeeBasisPoints = _transferFeeBasisPoints;\\n  }\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes \\n   * down overtime.\\n   * @dev Throws if _tokenId is not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  )\\n    public view\\n    returns (uint)\\n  {\\n    _isKey(_tokenId);\\n    uint expirationTimestamp = keyExpirationTimestampFor(_tokenId);\\n    if(expirationTimestamp < block.timestamp) {\\n      return 0;\\n    } else {\\n      uint timeToTransfer;\\n      if(_time == 0) {\\n        timeToTransfer = expirationTimestamp - block.timestamp;\\n      } else {\\n        timeToTransfer = _time;\\n      }\\n      return timeToTransfer * transferFeeBasisPoints / BASIS_POINTS_DEN;\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke `onERC721Received` on a target address\\n   * The call is not executed if the target address is not a contract\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  )\\n    internal\\n    returns (bool)\\n  {\\n    if (!to.isContract()) {\\n      return true;\\n    }\\n    bytes4 retval = IERC721ReceiverUpgradeable(to).onERC721Received(\\n      msg.sender, from, tokenId, _data);\\n    return (retval == _ERC721_RECEIVED);\\n  }\\n\\n  uint256[1000] private __safe_upgrade_gap;\\n}\"\r\n    },\r\n    \"contracts/mixins/MixinRoles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// This contract mostly follows the pattern established by openzeppelin in\\n// openzeppelin/contracts-ethereum-package/contracts/access/roles\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\ncontract MixinRoles is AccessControlUpgradeable {\\n\\n  // roles\\n  bytes32 public constant LOCK_MANAGER_ROLE = keccak256(\\\"LOCK_MANAGER\\\");\\n  bytes32 public constant KEY_GRANTER_ROLE = keccak256(\\\"KEY_GRANTER\\\");\\n\\n  // events\\n  event LockManagerAdded(address indexed account);\\n  event LockManagerRemoved(address indexed account);\\n  event KeyGranterAdded(address indexed account);\\n  event KeyGranterRemoved(address indexed account);\\n\\n  // initializer\\n  function _initializeMixinRoles(address sender) internal {\\n\\n    // for admin mamangers to add other lock admins\\n    _setRoleAdmin(LOCK_MANAGER_ROLE, LOCK_MANAGER_ROLE);\\n\\n    // for lock managers to add/remove key granters\\n    _setRoleAdmin(KEY_GRANTER_ROLE, LOCK_MANAGER_ROLE);\\n\\n    if (!isLockManager(sender)) {\\n      _setupRole(LOCK_MANAGER_ROLE, sender);  \\n    }\\n    if (!isKeyGranter(sender)) {\\n      _setupRole(KEY_GRANTER_ROLE, sender);\\n    }\\n\\n  }\\n\\n  // modifiers\\n  function _onlyLockManager() \\n  internal \\n  view\\n  {\\n    require( hasRole(LOCK_MANAGER_ROLE, msg.sender), 'ONLY_LOCK_MANAGER');\\n  }\\n\\n  // lock manager functions\\n  function isLockManager(address account) public view returns (bool) {\\n    return hasRole(LOCK_MANAGER_ROLE, account);\\n  }\\n\\n  function addLockManager(address account) public {\\n    _onlyLockManager();\\n    grantRole(LOCK_MANAGER_ROLE, account);\\n    emit LockManagerAdded(account);\\n  }\\n\\n  function renounceLockManager() public {\\n    renounceRole(LOCK_MANAGER_ROLE, msg.sender);\\n    emit LockManagerRemoved(msg.sender);\\n  }\\n\\n\\n  // key granter functions\\n  function isKeyGranter(address account) public view returns (bool) {\\n    return hasRole(KEY_GRANTER_ROLE, account);\\n  }\\n\\n  function addKeyGranter(address account) public {\\n    _onlyLockManager();\\n    grantRole(KEY_GRANTER_ROLE, account);\\n    emit KeyGranterAdded(account);\\n  }\\n\\n  function revokeKeyGranter(address _granter) public {\\n    _onlyLockManager();\\n    revokeRole(KEY_GRANTER_ROLE, _granter);\\n    emit KeyGranterRemoved(_granter);\\n  }\\n\\n  uint256[1000] private __safe_upgrade_gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/MixinConvenienceOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './MixinLockCore.sol';\\n\\n/**\\n * @title Mixin to add support for `ownable()`\\n * @dev `Mixins` are a design pattern seen in the 0x contracts.  It simply\\n * separates logically groupings of code to ease readability.\\n */\\ncontract MixinConvenienceOwnable is MixinLockCore {\\n\\n  // used for `owner()`convenience helper\\n  address private _convenienceOwner;\\n\\n  // events\\n  event OwnershipTransferred(address previousOwner, address newOwner);\\n\\n  function _initializeMixinConvenienceOwnable(address _sender) internal {\\n    _convenienceOwner = _sender;\\n  }\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n    * The `Ownable` logic is used by many 3rd party services to determine\\n    * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n    * \\n    * @notice This logic is NOT used internally by the Unlock Protocol and is made \\n    * available only as a convenience helper.\\n   */\\n  function owner() public view returns (address) {\\n    return _convenienceOwner;\\n  }\\n\\n  /** Setter for the `owner` convenience helper (see `owner()` docstring for more).\\n    * @notice This logic is NOT used internally by the Unlock Protocol ans is made \\n    * available only as a convenience helper.\\n    * @param account address returned by the `owner()` helper\\n   */ \\n  function setOwner(address account) public {\\n    _onlyLockManager();\\n    require(account != address(0), 'OWNER_CANT_BE_ADDRESS_ZERO');\\n    address _previousOwner = _convenienceOwner;\\n    _convenienceOwner = account;\\n    emit OwnershipTransferred(_previousOwner, account);\\n  }\\n\\n  function isOwner(address account) public view returns (bool) {\\n    return _convenienceOwner == account;\\n  }\\n\\n  uint256[1000] private __safe_upgrade_gap;\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnlock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n\\n/**\\n * @title The Unlock Interface\\n * @author Nick Furfaro (unlock-protocol.com)\\n**/\\n\\ninterface IUnlock\\n{\\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\\n  function initialize(address _unlockOwner) external;\\n\\n  /**\\n  * @dev deploy a ProxyAdmin contract used to upgrade locks\\n  */\\n  function initializeProxyAdmin() external;\\n\\n  // store contract proxy admin address\\n  function proxyAdminAddress() external view;\\n\\n  /**\\n  * @notice Create lock (legacy)\\n  * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n  * @param _expirationDuration the duration of the lock (pass 0 for unlimited duration)\\n  * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n  * @param _keyPrice the price of each key\\n  * @param _maxNumberOfKeys the maximum nimbers of keys to be edited\\n  * @param _lockName the name of the lock\\n  * param _salt [deprec] -- kept only for backwards copatibility\\n  * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n  * to know the lock's address before the transaction is mined.\\n  * @dev internally call `createUpgradeableLock`\\n  */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 // _salt\\n  ) external returns(address);\\n\\n  /**\\n  * @notice Create lock (default)\\n  * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n  * @param data bytes containing the call to initialize the lock template\\n  * @dev this call is passed as encoded function - for instance:\\n  *  bytes memory data = abi.encodeWithSignature(\\n  *    'initialize(address,uint256,address,uint256,uint256,string)',\\n  *    msg.sender,\\n  *    _expirationDuration,\\n  *    _tokenAddress,\\n  *    _keyPrice,\\n  *    _maxNumberOfKeys,\\n  *    _lockName\\n  *  );\\n  * @return address of the create lock\\n  */\\n  function createUpgradeableLock(\\n    bytes memory data\\n  ) external returns(address);\\n\\n  /**\\n   * Create an upgradeable lock using a specific PublicLock version\\n   * @param data bytes containing the call to initialize the lock template\\n   * (refer to createUpgradeableLock for more details)\\n   * @param _lockVersion the version of the lock to use\\n  */\\n  function createUpgradeableLockAtVersion(\\n    bytes memory data,\\n    uint16 _lockVersion\\n  ) external returns (address);\\n\\n  /**\\n  * @notice Upgrade a lock to a specific version\\n  * @dev only available for publicLockVersion > 10 (proxyAdmin /required)\\n  * @param lockAddress the existing lock address\\n  * @param version the version number you are targeting\\n  * Likely implemented with OpenZeppelin TransparentProxy contract\\n  */\\n  function upgradeLock(\\n    address payable lockAddress, \\n    uint16 version\\n  ) external returns(address);\\n\\n    /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer // solhint-disable-line no-unused-vars\\n  )\\n    external;\\n\\n    /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function will keep track of consumed discounts by a given user.\\n   * It will also grant discount tokens to the creator who is granting the discount based on the\\n   * amount of discount and compensation rate.\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordConsumedDiscount(\\n    uint _discount,\\n    uint _tokens // solhint-disable-line no-unused-vars\\n  )\\n    external;\\n\\n    /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function returns the discount available for a user, when purchasing a\\n   * a key from a lock.\\n   * This does not modify the state. It returns both the discount and the number of tokens\\n   * consumed to grant that discount.\\n   */\\n  function computeAvailableDiscountFor(\\n    address _purchaser, // solhint-disable-line no-unused-vars\\n    uint _keyPrice // solhint-disable-line no-unused-vars\\n  )\\n    external\\n    view\\n    returns(uint discount, uint tokens);\\n\\n  // Function to read the globalTokenURI field.\\n  function globalBaseTokenURI()\\n    external\\n    view\\n    returns(string memory);\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the globalTokenSymbol field.\\n  function globalTokenSymbol()\\n    external\\n    view\\n    returns(string memory);\\n\\n  // Function to read the chainId field.\\n  function chainId()\\n    external\\n    view\\n    returns(uint);\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  )\\n    external;\\n\\n  /**\\n   * @notice Add a PublicLock template to be used for future calls to `createLock`.\\n   * @dev This is used to upgrade conytract per version number\\n   */\\n  function addLockTemplate(address impl, uint16 version) external;\\n\\n  // match lock templates addresses with version numbers\\n  function publicLockImpls(uint16 _version) external view;\\n  \\n  // match version numbers with lock templates addresses \\n  function publicLockVersions(address _impl) external view;\\n\\n  // the latest existing lock template version\\n  function publicLockLatestVersion() external view;\\n\\n  /**\\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function setLockTemplate(\\n    address payable _publicLockAddress\\n  ) external;\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external;\\n\\n  function grossNetworkProduct() external view returns(uint);\\n\\n  function totalDiscountGranted() external view returns(uint);\\n\\n  function locks(address) external view returns(bool deployed, uint totalSales, uint yieldedDiscountTokens);\\n\\n  // The address of the public lock template, used when `createLock` is called\\n  function publicLockAddress() external view returns(address);\\n\\n  // Map token address to exchange contract address if the token is supported\\n  // Used for GDP calculations\\n  function uniswapOracles(address) external view returns(address);\\n\\n  // The WETH token address, used for value calculations\\n  function weth() external view returns(address);\\n\\n  // The UDT token address, used to mint tokens on referral\\n  function udt() external view returns(address);\\n\\n  // The approx amount of gas required to purchase a key\\n  function estimatedGasForPurchase() external view returns(uint);\\n\\n  /**\\n   * Helper to get the network mining basefee as introduced in EIP-1559\\n   * @dev this helper can be wrapped in try/catch statement to avoid \\n   * revert in networks where EIP-1559 is not implemented\\n   */\\n  function networkBaseFee() external view returns (uint);\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns(uint16);\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(\\n    address _tokenAddress,\\n    address _oracleAddress\\n  ) external;\\n\\n  // Initialize the Ownable contract, granting contract ownership to the specified sender\\n  function __initializeOwnable(address sender) external;\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() external view returns(bool);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns(address);\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/hooks/ILockKeyCancelHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n\\n/**\\n * @notice Functions to be implemented by a keyCancelHook.\\n * @dev Lock hooks are configured by calling `setEventHooks` on the lock.\\n */\\ninterface ILockKeyCancelHook\\n{\\n  /**\\n   * @notice If the lock owner has registered an implementer\\n   * then this hook is called with every key cancel.\\n   * @param operator the msg.sender issuing the cancel\\n   * @param to the account which had the key canceled\\n   * @param refund the amount sent to the `to` account (ETH or a ERC-20 token)\\n   */\\n  function onKeyCancel(\\n    address operator,\\n    address to,\\n    uint256 refund\\n  ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/hooks/ILockKeyPurchaseHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n\\n/**\\n * @notice Functions to be implemented by a keyPurchaseHook.\\n * @dev Lock hooks are configured by calling `setEventHooks` on the lock.\\n */\\ninterface ILockKeyPurchaseHook\\n{\\n  /**\\n   * @notice Used to determine the purchase price before issueing a transaction.\\n   * This allows the hook to offer a discount on purchases.\\n   * This may revert to prevent a purchase.\\n   * @param from the msg.sender making the purchase\\n   * @param recipient the account which will be granted a key\\n   * @param referrer the account which referred this key sale\\n   * @param data arbitrary data populated by the front-end which initiated the sale\\n   * @return minKeyPrice the minimum value/price required to purchase a key with these settings\\n   * @dev the lock's address is the `msg.sender` when this function is called via\\n   * the lock's `purchasePriceFor` function\\n   */\\n  function keyPurchasePrice(\\n    address from,\\n    address recipient,\\n    address referrer,\\n    bytes calldata data\\n  ) external view\\n    returns (uint minKeyPrice);\\n\\n  /**\\n   * @notice If the lock owner has registered an implementer then this hook\\n   * is called with every key sold.\\n   * @param from the msg.sender making the purchase\\n   * @param recipient the account which will be granted a key\\n   * @param referrer the account which referred this key sale\\n   * @param data arbitrary data populated by the front-end which initiated the sale\\n   * @param minKeyPrice the price including any discount granted from calling this\\n   * hook's `keyPurchasePrice` function\\n   * @param pricePaid the value/pricePaid included with the purchase transaction\\n   * @dev the lock's address is the `msg.sender` when this function is called\\n   */\\n  function onKeyPurchase(\\n    address from,\\n    address recipient,\\n    address referrer,\\n    bytes calldata data,\\n    uint minKeyPrice,\\n    uint pricePaid\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/hooks/ILockValidKeyHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n\\n/**\\n * @notice Functions to be implemented by a hasValidKey Hook.\\n * @dev Lock hooks are configured by calling `setEventHooks` on the lock.\\n */\\ninterface ILockValidKeyHook\\n{\\n\\n  /**\\n   * @notice If the lock owner has registered an implementer then this hook\\n   * is called every time balanceOf is called\\n   * @param lockAddress the address of the current lock\\n   * @param keyOwner the potential owner of the key for which we are retrieving the `balanceof`\\n   * @param expirationTimestamp the key expiration timestamp\\n   */\\n  function hasValidKey(\\n    address lockAddress,\\n    address keyOwner,\\n    uint256 expirationTimestamp,\\n    bool isValidKey\\n  ) \\n  external view\\n  returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/hooks/ILockTokenURIHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n/**\\n * @notice Functions to be implemented by a tokenURIHook.\\n * @dev Lock hooks are configured by calling `setEventHooks` on the lock.\\n */\\ninterface ILockTokenURIHook\\n{\\n  /**\\n   * @notice If the lock owner has registered an implementer\\n   * then this hook is called every time `tokenURI()` is called\\n   * @param lockAddress the address of the lock\\n   * @param operator the msg.sender issuing the call\\n   * @param owner the owner of the key for which we are retrieving the `tokenUri`\\n   * @param keyId the id (tokenId) of the key (if applicable)\\n   * @param expirationTimestamp the key expiration timestamp\\n   * @return the tokenURI\\n   */\\n  function tokenURI(\\n    address lockAddress,\\n    address operator,\\n    address owner,\\n    uint256 keyId,\\n    uint expirationTimestamp\\n  ) external view returns(string memory);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/UnlockUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <=0.8.7;\\n\\n// This contract provides some utility methods for use with the unlock protocol smart contracts.\\n// Borrowed from:\\n// https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol#L943\\n\\nlibrary UnlockUtils {\\n\\n  function strConcat(\\n    string memory _a,\\n    string memory _b,\\n    string memory _c,\\n    string memory _d\\n  ) internal pure\\n    returns (string memory _concatenatedString)\\n  {\\n    return string(abi.encodePacked(_a, _b, _c, _d));\\n  }\\n\\n  function uint2Str(\\n    uint _i\\n  ) internal pure\\n    returns (string memory _uintAsString)\\n  {\\n    // make a copy of the param to avoid security/no-assign-params error\\n    uint c = _i;\\n    if (_i == 0) {\\n      return '0';\\n    }\\n    uint j = _i;\\n    uint len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint k = len;\\n    while (c != 0) {\\n        k = k-1;\\n        uint8 temp = (48 + uint8(c - c / 10 * 10));\\n        bytes1 b1 = bytes1(temp);\\n        bstr[k] = b1;\\n        c /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function address2Str(\\n    address _addr\\n  ) internal pure\\n    returns(string memory)\\n  {\\n    bytes32 value = bytes32(uint256(uint160(_addr)));\\n    bytes memory alphabet = '0123456789abcdef';\\n    bytes memory str = new bytes(42);\\n    str[0] = '0';\\n    str[1] = 'x';\\n    for (uint i = 0; i < 20; i++) {\\n      str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\\n      str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n    }\\n    return string(str);\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 80\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"CancelKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_timeAdded\",\"type\":\"bool\"}],\"name\":\"ExpirationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ExpireKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"GasRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"KeyExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeyGranterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KeyGranterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"KeyManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedRecordsCount\",\"type\":\"uint256\"}],\"name\":\"KeysMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LockManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LockManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"NewLockSymbol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldKeyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"PricingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeTrialLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundPenaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"RefundPenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiration\",\"type\":\"uint256\"}],\"name\":\"RenewKeyPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"TransferFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unlockAddress\",\"type\":\"address\"}],\"name\":\"UnlockCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEY_GRANTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKeyGranter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAndRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expirationDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"expireAndRefundFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"extend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeTrialLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasRefundValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_refundValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCancelAndRefundValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"}],\"name\":\"getHasValidKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"getTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_expirationTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_keyManagers\",\"type\":\"address[]\"}],\"name\":\"grantKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_lockCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxNumberOfKeys\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_lockName\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKeyGranter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLockManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isValidKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"keyExpirationTimestampFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keyManagerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxKeysPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfKeys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mergeKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onKeyCancelHook\",\"outputs\":[{\"internalType\":\"contract ILockKeyCancelHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onKeyPurchaseHook\",\"outputs\":[{\"internalType\":\"contract ILockKeyPurchaseHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onTokenURIHook\",\"outputs\":[{\"internalType\":\"contract ILockTokenURIHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onValidKeyHook\",\"outputs\":[{\"internalType\":\"contract ILockValidKeyHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicLockVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_referrers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_keyManagers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"purchasePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundPenaltyBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"renewMembershipFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_granter\",\"type\":\"address\"}],\"name\":\"revokeKeyGranter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onKeyPurchaseHook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onKeyCancelHook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onValidKeyHook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onTokenURIHook\",\"type\":\"address\"}],\"name\":\"setEventHooks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newExpirationDuration\",\"type\":\"uint256\"}],\"name\":\"setExpirationDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refundValue\",\"type\":\"uint256\"}],\"name\":\"setGasRefundValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_keyManager\",\"type\":\"address\"}],\"name\":\"setKeyManagerOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxKeys\",\"type\":\"uint256\"}],\"name\":\"setMaxKeysPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumberOfKeys\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberOfKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeShared\",\"type\":\"uint256\"}],\"name\":\"shareKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keyOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_valueBasisPoint\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockProtocol\",\"outputs\":[{\"internalType\":\"contract IUnlock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"updateBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keyPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"updateKeyPricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lockName\",\"type\":\"string\"}],\"name\":\"updateLockName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lockSymbol\",\"type\":\"string\"}],\"name\":\"updateLockSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freeTrialLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundPenaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"updateRefundPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSchemaVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PublicLock", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "80", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}