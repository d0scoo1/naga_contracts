{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/* ERC721I - ERC721I (ERC721 0xInuarashi Edition) - Gas Optimized\r\n    Open Source: with the efforts of the [0x Collective] <3 */\r\n\r\ncontract ERC721I {\r\n\r\n    string public name; string public symbol;\r\n    string internal baseTokenURI; string internal baseTokenURI_EXT;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_; symbol = symbol_; \r\n    }\r\n\r\n    uint256 public totalSupply; \r\n    mapping(uint256 => address) public ownerOf; \r\n    mapping(address => uint256) public balanceOf; \r\n\r\n    mapping(uint256 => address) public getApproved; \r\n    mapping(address => mapping(address => bool)) public isApprovedForAll; \r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Mint(address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, \r\n    uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, \r\n    bool approved);\r\n\r\n    // // internal write functions\r\n    // mint\r\n    function _mint(address to_, uint256 tokenId_) internal virtual {\r\n        require(to_ != address(0x0), \r\n            \"ERC721I: _mint() Mint to Zero Address\");\r\n        require(ownerOf[tokenId_] == address(0x0), \r\n            \"ERC721I: _mint() Token to Mint Already Exists!\");\r\n\r\n        balanceOf[to_]++;\r\n        ownerOf[tokenId_] = to_;\r\n\r\n        emit Transfer(address(0x0), to_, tokenId_);\r\n    }\r\n\r\n    // transfer\r\n    function _transfer(address from_, address to_, uint256 tokenId_) internal virtual {\r\n        require(from_ == ownerOf[tokenId_], \r\n            \"ERC721I: _transfer() Transfer Not Owner of Token!\");\r\n        require(to_ != address(0x0), \r\n            \"ERC721I: _transfer() Transfer to Zero Address!\");\r\n\r\n        // checks if there is an approved address clears it if there is\r\n        if (getApproved[tokenId_] != address(0x0)) { \r\n            _approve(address(0x0), tokenId_); \r\n        } \r\n\r\n        ownerOf[tokenId_] = to_; \r\n        balanceOf[from_]--;\r\n        balanceOf[to_]++;\r\n\r\n        emit Transfer(from_, to_, tokenId_);\r\n    }\r\n\r\n    // approve\r\n    function _approve(address to_, uint256 tokenId_) internal virtual {\r\n        if (getApproved[tokenId_] != to_) {\r\n            getApproved[tokenId_] = to_;\r\n            emit Approval(ownerOf[tokenId_], to_, tokenId_);\r\n        }\r\n    }\r\n    function _setApprovalForAll(address owner_, address operator_, bool approved_)\r\n    internal virtual {\r\n        require(owner_ != operator_, \r\n            \"ERC721I: _setApprovalForAll() Owner must not be the Operator!\");\r\n        isApprovedForAll[owner_][operator_] = approved_;\r\n        emit ApprovalForAll(owner_, operator_, approved_);\r\n    }\r\n\r\n    // token uri\r\n    function _setBaseTokenURI(string memory uri_) internal virtual {\r\n        baseTokenURI = uri_;\r\n    }\r\n    function _setBaseTokenURI_EXT(string memory ext_) internal virtual {\r\n        baseTokenURI_EXT = ext_;\r\n    }\r\n\r\n    // // Internal View Functions\r\n    // Embedded Libraries\r\n    function _toString(uint256 value_) internal pure returns (string memory) {\r\n        if (value_ == 0) { return \"0\"; }\r\n        uint256 _iterate = value_; uint256 _digits;\r\n        while (_iterate != 0) { _digits++; _iterate /= 10; } // get digits in value_\r\n        bytes memory _buffer = new bytes(_digits);\r\n        while (value_ != 0) { _digits--; _buffer[_digits] = bytes1(uint8(\r\n            48 + uint256(value_ % 10 ))); value_ /= 10; } // create bytes of value_\r\n        return string(_buffer); // return string converted bytes of value_\r\n    }\r\n\r\n    // Functional Views\r\n    function _isApprovedOrOwner(address spender_, uint256 tokenId_) internal \r\n    view virtual returns (bool) {\r\n        require(ownerOf[tokenId_] != address(0x0), \r\n            \"ERC721I: _isApprovedOrOwner() Owner is Zero Address!\");\r\n        address _owner = ownerOf[tokenId_];\r\n        return (spender_ == _owner \r\n            || spender_ == getApproved[tokenId_] \r\n            || isApprovedForAll[_owner][spender_]);\r\n    }\r\n    function _exists(uint256 tokenId_) internal view virtual returns (bool) {\r\n        return ownerOf[tokenId_] != address(0x0);\r\n    }\r\n\r\n    // // public write functions\r\n    function approve(address to_, uint256 tokenId_) public virtual {\r\n        address _owner = ownerOf[tokenId_];\r\n        require(to_ != _owner, \r\n            \"ERC721I: approve() Cannot approve yourself!\");\r\n        require(msg.sender == _owner || isApprovedForAll[_owner][msg.sender],\r\n            \"ERC721I: Caller not owner or Approved!\");\r\n        _approve(to_, tokenId_);\r\n    }\r\n    function setApprovalForAll(address operator_, bool approved_) public virtual {\r\n        _setApprovalForAll(msg.sender, operator_, approved_);\r\n    }\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) \r\n    public virtual {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId_), \r\n            \"ERC721I: transferFrom() _isApprovedOrOwner = false!\");\r\n        _transfer(from_, to_, tokenId_);\r\n    }\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_, \r\n    bytes memory data_) public virtual {\r\n        transferFrom(from_, to_, tokenId_);\r\n        if (to_.code.length != 0) {\r\n            (, bytes memory _returned) = to_.staticcall(abi.encodeWithSelector(\r\n                0x150b7a02, msg.sender, from_, tokenId_, data_));\r\n            bytes4 _selector = abi.decode(_returned, (bytes4));\r\n            require(_selector == 0x150b7a02, \r\n                \"ERC721I: safeTransferFrom() to_ not ERC721Receivable!\");\r\n        }\r\n    }\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_) \r\n    public virtual {\r\n        safeTransferFrom(from_, to_, tokenId_, \"\");\r\n    }\r\n\r\n    // 0xInuarashi Custom Functions\r\n    function multiTransferFrom(address from_, address to_, uint256[] memory tokenIds_)\r\n    public virtual {\r\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\r\n            transferFrom(from_, to_, tokenIds_[i]);\r\n        }\r\n    }\r\n    function multiSafeTransferFrom(address from_, address to_, \r\n    uint256[] memory tokenIds_, bytes memory data_) public virtual {\r\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\r\n            safeTransferFrom(from_, to_, tokenIds_[i], data_);\r\n        }\r\n    }\r\n\r\n    // OZ Standard Stuff\r\n    function supportsInterface(bytes4 interfaceId_) public pure returns (bool) {\r\n        return (interfaceId_ == 0x80ac58cd || interfaceId_ == 0x5b5e139f);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId_) public view virtual returns (string memory) {\r\n        require(ownerOf[tokenId_] != address(0x0), \r\n            \"ERC721I: tokenURI() Token does not exist!\");\r\n        return string(abi.encodePacked(\r\n            baseTokenURI, _toString(tokenId_), baseTokenURI_EXT));\r\n    }\r\n    // // public view functions\r\n    // never use these for functions ever, they are expensive af and for view only \r\n    function walletOfOwner(address address_) public virtual view \r\n    returns (uint256[] memory) {\r\n        uint256 _balance = balanceOf[address_];\r\n        uint256[] memory _tokens = new uint256[] (_balance);\r\n        uint256 _index;\r\n        uint256 _loopThrough = totalSupply;\r\n        for (uint256 i = 0; i < _loopThrough; i++) {\r\n            if (ownerOf[i] == address(0x0) && _tokens[_balance - 1] == 0) {\r\n                _loopThrough++; \r\n            }\r\n            if (ownerOf[i] == address_) { \r\n                _tokens[_index] = i; _index++; \r\n            }\r\n        }\r\n        return _tokens;\r\n    }\r\n\r\n    // not sure when this will ever be needed but it conforms to erc721 enumerable\r\n    function tokenOfOwnerByIndex(address address_, uint256 index_) public \r\n    virtual view returns (uint256) {\r\n        uint256[] memory _wallet = walletOfOwner(address_);\r\n        return _wallet[index_];\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed oldOwner_, address indexed newOwner_);\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function _transferOwnership(address newOwner_) internal virtual {\r\n        address _oldOwner = owner;\r\n        owner = newOwner_;\r\n        emit OwnershipTransferred(_oldOwner, newOwner_);    \r\n    }\r\n    function transferOwnership(address newOwner_) public virtual onlyOwner {\r\n        require(newOwner_ != address(0x0), \"Ownable: new owner is the zero address!\");\r\n        _transferOwnership(newOwner_);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0x0));\r\n    }\r\n}\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId_) external view returns (address);\r\n    function transferfrom(address from_, address to_, uint256 tokenId_) external;\r\n}\r\n\r\ninterface iPlasma {\r\n    function balanceOf(address address_) external view returns (uint256);\r\n    // function transferFrom(address from_, address to_, uint256 amount_) external;\r\n    function burnByController(address from_, uint256 amount_) external;\r\n}\r\n\r\nabstract contract PublicMint {\r\n    // Public Minting\r\n    bool public _publicMintEnabled; uint256 public _publicMintTime;\r\n    function _setPublicMint(bool bool_, uint256 time_) internal {\r\n        _publicMintEnabled = bool_; _publicMintTime = time_; }\r\n    modifier publicMintEnabled { \r\n        require(_publicMintEnabled && _publicMintTime <= block.timestamp, \r\n            \"Public Mint is not enabled yet!\"); _; }\r\n    function publicMintStatus() external view returns (bool) {\r\n        return _publicMintEnabled && _publicMintTime <= block.timestamp; }\r\n}\r\n\r\ncontract CyborgYetis is ERC721I, Ownable, PublicMint {\r\n    constructor() ERC721I(\"Cyborg Yetis\", \"CYETI\") {}\r\n\r\n    // Constraints\r\n    uint256 public maxTokens = 5555;\r\n    uint256 public fusionCost = 650 ether;\r\n    function setMaxTokens(uint256 maxTokens_) external onlyOwner {\r\n        maxTokens = maxTokens_;\r\n    }\r\n    function setFusionCost(uint256 fusionCost_) external onlyOwner {\r\n        fusionCost = fusionCost_;\r\n    }\r\n\r\n    // Interfaces\r\n    IERC721 public SpaceYetis = IERC721(0x33a39af0F83E9D46a055e6eEbde3296D26d916F4);\r\n    iPlasma public Plasma = iPlasma(0xC3aF7Bb38999e8A1db7849e30706Efbf8FFd57Fa);\r\n    function setSpaceYetis(address address_) external onlyOwner {\r\n        SpaceYetis = IERC721(address_);\r\n    }\r\n    function setPlasma(address address_) external onlyOwner {\r\n        Plasma = iPlasma(address_);\r\n    }\r\n\r\n    // Administration\r\n    function setBaseTokenURI(string calldata uri_) external onlyOwner { \r\n        _setBaseTokenURI(uri_);\r\n    }\r\n    function setBaseTokenURI_EXT(string calldata ext_) external onlyOwner {\r\n        _setBaseTokenURI_EXT(ext_);\r\n    }\r\n    function setPublicMint(bool bool_, uint256 time_) external onlyOwner {\r\n        _setPublicMint(bool_, time_);\r\n    }\r\n\r\n    // Internal Mint\r\n    function _mintMany(address to_, uint256 amount_) internal {\r\n        require(maxTokens >= totalSupply + amount_,\r\n            \"Not enough remaining Cyborg Yetis!\");\r\n\r\n        // TokenId Starts at 1\r\n        uint256 _startId = totalSupply + 1;\r\n        \r\n        for (uint256 i = 0; i < amount_; i++) {\r\n            _mint(to_, _startId + i);\r\n        }\r\n        totalSupply += amount_;\r\n    }\r\n\r\n    // Fusion Mechanism\r\n    function fusion(uint256 parent1_, uint256 parent2_, uint256 amount_) external publicMintEnabled {\r\n        require(parent1_ != parent2_,\r\n            \"Parents can't be the same!\");\r\n        require(msg.sender == SpaceYetis.ownerOf(parent1_) \r\n            && msg.sender == SpaceYetis.ownerOf(parent2_),\r\n            \"You do not own these Yetis!\");\r\n        \r\n        uint256 _totalFusionCost = fusionCost * amount_;\r\n\r\n        require(Plasma.balanceOf(msg.sender) >= _totalFusionCost,\r\n            \"You don't have enough $PLASMA!\");\r\n        \r\n        // Now, msg.sender is owner of both yetis. It is not the same yeti, and they\r\n        // have enough $PLASMA for the fusion.\r\n        Plasma.burnByController(msg.sender, _totalFusionCost); // Burn\r\n        _mintMany(msg.sender, amount_); // Breed\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Plasma\",\"outputs\":[{\"internalType\":\"contract iPlasma\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SpaceYetis\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_publicMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_publicMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parent1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parent2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"fusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fusionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"multiSafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"multiTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ext_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI_EXT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fusionCost_\",\"type\":\"uint256\"}],\"name\":\"setFusionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokens_\",\"type\":\"uint256\"}],\"name\":\"setMaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setPlasma\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"setPublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setSpaceYetis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CyborgYetis", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8d79e77cf40ea0e6748a785172e9255a873807219c7f55d45509c4b41eabd96f"}]}