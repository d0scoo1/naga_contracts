{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Polys.sol\": {\r\n      \"content\": \"//\\\"SPDX-License-Identifier: GPL-3.0\\n\\n/*******************************************\\n              _                       _\\n             | |                     | |\\n  _ __   ___ | |_   _ ___   __ _ _ __| |_\\n | '_ \\\\ / _ \\\\| | | | / __| / _` | '__| __|\\n | |_) | (_) | | |_| \\\\__ \\\\| (_| | |  | |_\\n | .__/ \\\\___/|_|\\\\__, |___(_)__,_|_|   \\\\__|\\n | |             __/ |\\n |_|            |___/\\n\\n a homage to math, geometry and cryptography.\\n\\n********************************************/\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./SSTORE2.sol\\\";\\nimport \\\"./Base64.sol\\\";\\nimport \\\"./PolyRenderer.sol\\\";\\n\\n\\ncontract Polys is ERC721, ReentrancyGuard, Ownable {\\n    using ECDSA for bytes32;\\n    using Strings for uint256;\\n    using Base64 for bytes;\\n\\n    // Token structs and types\\n    // -------------------------------------------\\n    enum TokenType {Original, Offspring, Circle}\\n\\n    struct Parents {\\n        uint16 polyIdA;\\n        uint16 polyIdB;\\n    }\\n\\n    struct TokenMetadata {\\n        string name;\\n        address creator;\\n        uint8 remainingChildren;\\n        bool wasCircled;\\n        TokenType tokenType;\\n    }\\n\\n    struct Counters {\\n        uint8 originals;\\n        uint16 offspring;\\n    }\\n\\n    // Events\\n    // -------------------------------------------\\n    event AuctionStarted(uint256 startTime);\\n    event BreedingStarted();\\n    event CirclingStarted();\\n\\n    // Constants\\n    // -------------------------------------------\\n    // all eth in this wallet will be used for charity actions\\n    address private constant _charityWallet = 0xE00327f0f5f5F55d01C2FC6a87ddA1B8E292Ac79;\\n\\n    uint8 private constant _MAX_NUM_ORIGINALS = 100;\\n    uint8 private constant _MAX_NUM_OFFSPRING = 16;\\n    uint8 private constant _MAX_PER_EARLY_ACCESS_ADDRESS = 4;\\n    uint8 private constant _MAX_CIRCLES_PER_WALLET = 5;\\n\\n    uint private constant _START_PRICE = 16 ether;\\n    uint private constant _RESERVE_PRICE = 0.25 ether;\\n    uint private constant _AUCTION_DURATION = 1 days;\\n    uint private constant _HALVING_PERIOD = 4 hours; // price halves every halving period\\n\\n\\n    // State variables\\n    // -------------------------------------------\\n\\n    // We always return the on-chain image, but currently some platforms can't render on-chain images\\n    // so we will also provide an off-chain version. Once the majority of the platforms upgrade and start rendering\\n    // on-chain images, we will stop providing the off-chain version.\\n    bool private _alsoShowOffChainVersion;\\n\\n    // We might want to add the animation we used on the website to the NFT itself sometime in the future.\\n    bool private _alsoShowAnimationUrl;\\n\\n    uint public auctionStartTime;\\n    bool public isBreedingSeason;\\n    bool public isCirclingSeason;\\n    mapping(address => uint) public availableBalance;\\n\\n    Counters private _counters;\\n    mapping(address => uint) private _circlesMinted;\\n\\n    address private _openSeaProxyRegistryAddress;\\n    bool private _isOpenSeaProxyActive = true;\\n    string private _baseUrl = \\\"https://polys.art/poly/\\\";\\n\\n    // Original Variables\\n    // -------------------------------------------\\n    // @dev only originals have data\\n    mapping(uint256 => TokenMetadata) public tokenMetadata;\\n    mapping(uint256 => address) private _tokenDataPointers;\\n    mapping(address => string) private _creatorsName;\\n\\n    // Offspring Variables\\n    // -------------------------------------------\\n    mapping(uint256 => Parents) private _tokenIdToParents;\\n    mapping(bytes32 => bool) private _tokenPairs;\\n    mapping(address => uint8) private _mintedOnPreSale;\\n\\n    constructor(address openSeaProxyRegistryAddress) ERC721(\\\"Polys\\\", \\\"POLY\\\") {\\n        _openSeaProxyRegistryAddress = openSeaProxyRegistryAddress;\\n    }\\n\\n    // Creation Functions\\n    // -------------------------------------------\\n    function mint(bytes calldata polyData, string calldata name, uint256 tokenId,\\n        address creator, bytes calldata signature) nonReentrant payable external {\\n        require(tokenId <= _MAX_NUM_ORIGINALS && tokenId > 0, \\\"1\\\");\\n        require(verify(abi.encodePacked(polyData, name, tokenId, creator), signature), \\\"2\\\");\\n        require(polyData.length > 19 && polyData.length < 366, \\\"3\\\");\\n        require(polyData.length % 5 == 0, \\\"4\\\");\\n        require(bytes(name).length > 0 && bytes(name).length < 11, \\\"5\\\");\\n        require(auctionStartTime != 0, \\\"13\\\");\\n\\n        if (msg.sender != creator) {\\n            require(msg.value >= price(), \\\"6\\\");\\n            uint256 tenPercent = msg.value / 10;\\n            availableBalance[owner()] += tenPercent;\\n            availableBalance[creator] += (msg.value-tenPercent);\\n        } else if (msg.sender != owner()) {\\n            // artists can mint their own pieces for 10%, and the founder can mint his pieces for free\\n            // so in practise each artist sets the minimum price of their NFTs,\\n            // if price goes lower than their minimum, they will mint them themselves.\\n            require(msg.value >= (price() / 10), \\\"6\\\");\\n            availableBalance[owner()] += msg.value;\\n        }\\n\\n        TokenMetadata memory metadata;\\n        metadata.name = name;\\n        metadata.remainingChildren = _MAX_NUM_OFFSPRING;\\n        metadata.creator = creator;\\n        metadata.tokenType = TokenType.Original;\\n\\n        // SSTORE2 significantly reduces the gas costs. Kudos to hypnobrando for showing me this solution.\\n        _tokenDataPointers[tokenId] = SSTORE2.write(polyData);\\n        tokenMetadata[tokenId] = metadata;\\n        _counters.originals += 1;\\n\\n        _mint(msg.sender, tokenId);\\n    }\\n\\n    // State changing functions\\n    // -------------------------------------------\\n    function startAuction() external onlyOwner {\\n        require(auctionStartTime == 0); // can't start the auction twice.\\n        auctionStartTime = block.timestamp;\\n        emit AuctionStarted(auctionStartTime);\\n    }\\n\\n    function alsoShowOffChainVersion(bool state) external onlyOwner {\\n        _alsoShowOffChainVersion = state;\\n    }\\n\\n    function alsoShowAnimationUrl(bool state) external onlyOwner {\\n        _alsoShowAnimationUrl = state;\\n    }\\n\\n    function setBaseUrl(string calldata baseUrl) external onlyOwner {\\n        _baseUrl = baseUrl;\\n    }\\n\\n    function startBreedingSeason() public onlyOwner {\\n        isBreedingSeason = true;\\n        emit BreedingStarted();\\n    }\\n\\n    function startCirclingSeason() public onlyOwner {\\n        isCirclingSeason = true;\\n        emit CirclingStarted();\\n    }\\n\\n    function signPieces(string calldata name) public {\\n        require(bytes(name).length < 16);\\n        _creatorsName[msg.sender] = name;\\n    }\\n\\n    // Disable gas-less listings to OpenSea. Kudos to Crypto Coven!\\n    function setIsOpenSeaProxyActive(bool isOpenSeaProxyActive) external onlyOwner {\\n        _isOpenSeaProxyActive = isOpenSeaProxyActive;\\n    }\\n\\n    // Circling and Mixing\\n    // -------------------------------------------\\n    function mintCircle(uint256 polyId) external nonReentrant payable {\\n        require(isCirclingSeason, \\\"7\\\");\\n        require(tokenIsOriginal(polyId), \\\"8\\\");\\n        require(tokenMetadata[polyId].wasCircled == false, \\\"9\\\");\\n        require(msg.value == 0.314 ether, \\\"6\\\");\\n        require(_circlesMinted[msg.sender] < _MAX_CIRCLES_PER_WALLET);\\n        _circlesMinted[msg.sender] += 1;\\n\\n        uint256 circleTokenId = _MAX_NUM_ORIGINALS + polyId;\\n\\n        tokenMetadata[polyId].wasCircled = true;\\n\\n        _safeMint(msg.sender, circleTokenId);\\n\\n        availableBalance[creatorOf(polyId)] += 0.2512 ether;\\n        availableBalance[owner()] += 0.0314 ether;\\n        availableBalance[_charityWallet] += 0.0314 ether;\\n    }\\n\\n    function preSaleOffspring(uint256 polyIdA, uint256 polyIdB, bytes calldata signature) external nonReentrant payable {\\n        require(_mintedOnPreSale[msg.sender] < _MAX_PER_EARLY_ACCESS_ADDRESS, \\\"10\\\");\\n        require(verify(abi.encodePacked(msg.sender), signature), \\\"2\\\");\\n        _mintedOnPreSale[msg.sender] += 1;\\n        _mintOffspring(polyIdA, polyIdB);\\n    }\\n\\n    function publicSaleOffspring(uint256 polyIdA, uint256 polyIdB) external nonReentrant payable {\\n        require(isBreedingSeason, \\\"11\\\");\\n        _mintOffspring(polyIdA, polyIdB);\\n    }\\n\\n    // Internal\\n    // -------------------------------------------\\n    function verify(bytes memory message, bytes calldata signature) internal view returns (bool){\\n        return keccak256(message).toEthSignedMessageHash().recover(signature) == owner();\\n    }\\n\\n    function description(bool isCircle) internal pure returns (string memory) {\\n        string memory shape = isCircle ? '\\\"Circles' : '\\\"Regular polygons';\\n        return string(abi.encodePacked(shape, ' on an infinitely scalable canvas.\\\"'));\\n    }\\n\\n    // Shout out to blitmap for coming up with this breeding mechanic\\n    function _mintOffspring(uint256 polyIdA, uint256 polyIdB) internal {\\n        require(tokenIsOriginal(polyIdA) && tokenIsOriginal(polyIdB), \\\"16\\\");\\n        require(polyIdA != polyIdB, \\\"17\\\");\\n        require(tokenMetadata[polyIdA].remainingChildren > 0, \\\"18\\\");\\n        require(msg.value == 0.08 ether, \\\"6\\\");\\n\\n        // a given pair can only be minted once\\n        bytes32 pairHash = keccak256(abi.encodePacked(polyIdA, polyIdB));\\n        require(_tokenPairs[pairHash] == false, \\\"19\\\");\\n\\n        _counters.offspring += 1;\\n        uint256 offspringTokenId = 2 * _MAX_NUM_ORIGINALS + _counters.offspring;\\n\\n        Parents memory parents;\\n        parents.polyIdA = uint16(polyIdA);\\n        parents.polyIdB = uint16(polyIdB);\\n\\n        tokenMetadata[polyIdA].remainingChildren--;\\n\\n        _tokenIdToParents[offspringTokenId] = parents;\\n        _tokenPairs[pairHash] = true;\\n        _safeMint(msg.sender, offspringTokenId);\\n\\n        availableBalance[creatorOf(polyIdA)] += 0.056 ether;\\n        availableBalance[creatorOf(polyIdB)] += 0.008 ether;\\n        availableBalance[owner()] += 0.008 ether;\\n        availableBalance[_charityWallet] += 0.008 ether;\\n    }\\n\\n    // Withdraw\\n    // -------------------------------------------\\n    function withdraw() public nonReentrant {\\n        uint256 withdrawAmount = availableBalance[msg.sender];\\n        availableBalance[msg.sender] = 0;\\n        (bool success,) = msg.sender.call{value: withdrawAmount}('');\\n        require(success, \\\"12\\\");\\n    }\\n\\n    // Getters\\n    // -------------------------------------------\\n    function numMintedOriginals() public view returns (uint) {\\n        return _counters.originals;\\n    }\\n\\n    function pairIsTaken(uint256 polyIdA, uint256 polyIdB) public view returns (bool) {\\n        bytes32 pairHash = keccak256(abi.encodePacked(polyIdA, polyIdB));\\n        return _tokenPairs[pairHash];\\n    }\\n\\n    function price() public view returns (uint256) {\\n        require(block.timestamp >= auctionStartTime);\\n        uint timeElapsed = block.timestamp - auctionStartTime; // timeElapsed since start of the auction\\n        if (timeElapsed > _AUCTION_DURATION)\\n            return _RESERVE_PRICE;\\n        uint period = timeElapsed/_HALVING_PERIOD;\\n        uint start_price = _START_PRICE >> period;  // start price for current period\\n        uint end_price = _START_PRICE >> (period + 1);  // end price for current period\\n        timeElapsed = timeElapsed % _HALVING_PERIOD; // timeElapsed since the start of the current period\\n        return ((_HALVING_PERIOD - timeElapsed)*start_price + timeElapsed * end_price)/_HALVING_PERIOD;\\n    }\\n\\n    function parentOfCircle(uint circleId) public view returns (uint256){\\n        require(tokenIsCircle(circleId), \\\"14\\\");\\n        return circleId - _MAX_NUM_ORIGINALS;\\n    }\\n\\n    function creatorNameOf(uint polyId) public view returns(string memory){\\n        return _creatorsName[creatorOf(polyId)];\\n    }\\n\\n    function creatorOf(uint polyId) public view returns (address){\\n        uint tokenId;\\n        if (tokenIsOriginal(polyId)){\\n            tokenId = polyId;\\n        } else if (tokenIsCircle(polyId)){\\n            tokenId = parentOfCircle(polyId);\\n        } else {\\n            tokenId = _tokenIdToParents[polyId].polyIdA;\\n        }\\n        return tokenMetadata[tokenId].creator;\\n    }\\n\\n    function tokenIsOriginal(uint256 polyId) public view returns (bool) {\\n        return _exists(polyId) && (polyId <= _MAX_NUM_ORIGINALS);\\n    }\\n\\n    function tokenIsCircle(uint256 polyId) public view returns (bool) {\\n        return _exists(polyId) && polyId > _MAX_NUM_ORIGINALS && polyId <= 2*_MAX_NUM_ORIGINALS;\\n    }\\n\\n    function parentsOfMix(uint256 mixId) public view returns (uint256, uint256) {\\n        require(!tokenIsOriginal(mixId) && !tokenIsCircle(mixId));\\n        return (_tokenIdToParents[mixId].polyIdA, _tokenIdToParents[mixId].polyIdB);\\n    }\\n\\n    function tokenNameOf(uint polyId) public view returns (string memory) {\\n        require(_exists(polyId), \\\"15\\\");\\n        if (tokenIsOriginal(polyId)) {\\n            return tokenMetadata[polyId].name;\\n        }\\n        if (tokenIsCircle(polyId)) {\\n            return string(abi.encodePacked(\\\"Circled \\\", tokenMetadata[parentOfCircle(polyId)].name));\\n        }\\n        Parents memory parents = _tokenIdToParents[polyId];\\n        return string(abi.encodePacked(tokenMetadata[parents.polyIdA].name, \\\" \\\",\\n            tokenMetadata[parents.polyIdB].name));\\n    }\\n\\n    function tokenDataOf(uint256 polyId) public view returns (bytes memory) {\\n        if (tokenIsOriginal(polyId)) {\\n            return SSTORE2.read(_tokenDataPointers[polyId]);\\n        }\\n        if (tokenIsCircle(polyId)) {\\n            return SSTORE2.read(_tokenDataPointers[parentOfCircle(polyId)]);\\n        }\\n        bytes memory composition = SSTORE2.read(_tokenDataPointers[_tokenIdToParents[polyId].polyIdA]);\\n        bytes memory palette = SSTORE2.read(_tokenDataPointers[_tokenIdToParents[polyId].polyIdB]);\\n\\n        // Is the first palette colour equal to the background color:\\n        bool compositionUsesNegativeTechnique = (composition[0] == composition[3]) && (composition[1] == composition[4])\\n                                                && (composition[2] == composition[5]);\\n        // Some compositions use a few polys with the colour of the background to remove foreground from the image.\\n        // We call this, the \\\"negative technique\\\", because adding polys subtracts foreground instead of adding.\\n        // For this technique to be correctly translated to mixings, we do two things:\\n        // 1) we ordered (off-chain) all the colours in the palette according to their distance to the background color\\n        // so that the most similar colour to the background is the first.\\n        // 2) if the composition uses the \\\"negative technique\\\", then on the palette we replace the closest colour to the\\n        // background with the actual background so that this technique is applied perfectly.\\n\\n        for (uint8 i = 0; i < 15; ++i) {\\n            if (compositionUsesNegativeTechnique && i > 2 && i < 6){\\n                // make the first palette colour the same as the background\\n                composition[i] = palette[i-3];\\n            } else {\\n                composition[i] = palette[i];\\n            }\\n        }\\n        return composition;\\n    }\\n\\n    function tokenURI(uint polyId) override public view returns (string memory) {\\n        require(_exists(polyId), \\\"15\\\");\\n        bytes memory polyData = tokenDataOf(polyId);\\n        bool isCircle = tokenIsCircle(polyId);\\n        string memory idStr = polyId.toString();\\n        string memory svg = PolyRenderer.svgOf(polyData, isCircle);\\n\\n        bytes memory media = abi.encodePacked('data:image/svg+xml;base64,', bytes(svg).encode());\\n        if (_alsoShowOffChainVersion) {\\n            media = abi.encodePacked(',\\\"image_data\\\":\\\"', media, '\\\",\\\"image\\\":\\\"', _baseUrl, idStr);\\n        } else {\\n            media = abi.encodePacked(',\\\"image\\\":\\\"', media);\\n        }\\n        if (_alsoShowAnimationUrl) {\\n            media = abi.encodePacked(',\\\"animation_url\\\":\\\"', _baseUrl, \\\"anim/\\\", idStr, '\\\"', media);\\n        }\\n\\n        string memory json = abi.encodePacked('{\\\"name\\\":\\\"#', idStr, \\\" \\\", tokenNameOf(polyId),\\n            '\\\",\\\"description\\\":', description(isCircle), media, '\\\",\\\"attributes\\\":',\\n            PolyRenderer.attributesOf(polyData, isCircle), '}').encode();\\n        return string(abi.encodePacked('data:application/json;base64,', json));\\n    }\\n\\n    // Allow gas-less listings on OpenSea.\\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n        ProxyRegistry proxyRegistry = ProxyRegistry(\\n            _openSeaProxyRegistryAddress\\n        );\\n        if (_isOpenSeaProxyActive && address(proxyRegistry.proxies(owner)) == operator) {\\n            return true;\\n        }\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n}\\n\\n// Used to Allow gas-less listings on OpenSea\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/*\\nerrors:\\n1: Original token id should be between 1 and 100.\\n2: Invalid signature.\\n3: Poly data length should be between 20 and 365 bytes.\\n4: Poly data length should be a multiple of 5.\\n5: The poly name needs to be between 1 and 10 characters.\\n6: ETH value is incorrect.\\n7: It is not circle season.\\n8: Token id is not original.\\n9: That parent was already circled.\\n10: No more pre-sale mints left.\\n11: It is not breeding season.\\n12: Withdraw failed.\\n13: Auction has not started yet.\\n14: That token is not a circle.\\n15: Poly does not exist.\\n16: One or two parents are not original\\n17: The parents can't be the same.\\n18: The first parent has 0 remaining children\\n19: That combination was already minted.\\n*/\"\r\n    },\r\n    \"/contracts/utils/Bytecode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n    error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n    /**\\n      @notice Generate a creation code that results on a contract with `_code` as bytecode\\n      @param _code The returning value of the resulting `creationCode`\\n      @return creationCode (constructor) for new contract\\n    */\\n    function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n        /*\\n          0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n          0x01    0x80         0x80        DUP1                size size\\n          0x02    0x60         0x600e      PUSH1 14            14 size size\\n          0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n          0x04    0x39         0x39        CODECOPY            size\\n          0x05    0x60         0x6000      PUSH1 00            0 size\\n          0x06    0xf3         0xf3        RETURN\\n          <CODE>\\n        */\\n\\n        return abi.encodePacked(\\n            hex\\\"63\\\",\\n            uint32(_code.length),\\n            hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n            _code\\n        );\\n    }\\n\\n    /**\\n      @notice Returns the size of the code on a given address\\n      @param _addr Address that may or may not contain code\\n      @return size of the code on the given `_addr`\\n    */\\n    function codeSize(address _addr) internal view returns (uint256 size) {\\n        assembly { size := extcodesize(_addr) }\\n    }\\n\\n    /**\\n      @notice Returns the code of a given address\\n      @dev It will fail if `_end < _start`\\n      @param _addr Address that may or may not contain code\\n      @param _start number of bytes of code to skip on read\\n      @param _end index before which to end extraction\\n      @return oCode read from `_addr` deployed bytecode\\n      Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n    */\\n    function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n        uint256 csize = codeSize(_addr);\\n        if (csize == 0) return bytes(\\\"\\\");\\n\\n        if (_start > csize) return bytes(\\\"\\\");\\n        if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\\n\\n    unchecked {\\n        uint256 reqSize = _end - _start;\\n        uint256 maxSize = csize - _start;\\n\\n        uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n        assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n            oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n            mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n            mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n            extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n        }\\n    }\\n    }\\n}\"\r\n    },\r\n    \"/contracts/Trigonometry.sol\": {\r\n      \"content\": \"//\\\"SPDX-License-Identifier: BSD3\\n/**\\n * Basic trigonometry functions\\n *\\n * Solidity library offering the functionality of basic trigonometry functions\\n * with both input and output being integer approximated.\\n *\\n * This is useful since:\\n * - At the moment no floating/fixed point math can happen in solidity\\n * - Should be (?) cheaper than the actual operations using floating point\\n *   if and when they are implemented.\\n *\\n * The implementation is based off Dave Dribin's trigint C library\\n * http://www.dribin.org/dave/trigint/\\n * Which in turn is based from a now deleted article which can be found in\\n * the internet wayback machine:\\n * http://web.archive.org/web/20120301144605/http://www.dattalo.com/technical/software/pic/picsine.html\\n *\\n * @author Lefteris Karapetsas\\n * @license BSD3\\n */\\npragma solidity ^0.8.4;\\n\\nlibrary Trigonometry {\\n\\n    // Table index into the trigonometric table\\n    uint constant INDEX_WIDTH = 4;\\n    // Interpolation between successive entries in the tables\\n    uint constant INTERP_WIDTH = 8;\\n    uint constant INDEX_OFFSET = 12 - INDEX_WIDTH;\\n    uint constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\\n    uint16 constant ANGLES_IN_CYCLE = 16384;\\n    uint16 constant QUADRANT_HIGH_MASK = 8192;\\n    uint16 constant QUADRANT_LOW_MASK = 4096;\\n    uint constant SINE_TABLE_SIZE = 16;\\n\\n    // constant sine lookup table generated by gen_tables.py\\n    // We have no other choice but this since constant arrays don't yet exist\\n    uint8 constant entry_bytes = 2;\\n    bytes constant sin_table = \\\"\\\\x00\\\\x00\\\\x0c\\\\x8c\\\\x18\\\\xf9\\\\x25\\\\x28\\\\x30\\\\xfb\\\\x3c\\\\x56\\\\x47\\\\x1c\\\\x51\\\\x33\\\\x5a\\\\x82\\\\x62\\\\xf1\\\\x6a\\\\x6d\\\\x70\\\\xe2\\\\x76\\\\x41\\\\x7a\\\\x7c\\\\x7d\\\\x89\\\\x7f\\\\x61\\\\x7f\\\\xff\\\";\\n\\n    /**\\n     * Convenience function to apply a mask on an integer to extract a certain\\n     * number of bits. Using exponents since solidity still does not support\\n     * shifting.\\n     *\\n     * @param _value The integer whose bits we want to get\\n     * @param _width The width of the bits (in bits) we want to extract\\n     * @param _offset The offset of the bits (in bits) we want to extract\\n     * @return An integer containing _width bits of _value starting at the\\n     *         _offset bit\\n     */\\n    function bits(uint _value, uint _width, uint _offset) pure internal returns (uint) {\\n        return (_value / (2 ** _offset)) & (((2 ** _width)) - 1);\\n    }\\n\\n    function sin_table_lookup(uint index) pure internal returns (uint16) {\\n        bytes memory table = sin_table;\\n        uint offset = (index + 1) * entry_bytes;\\n        uint16 trigint_value;\\n        assembly {\\n            trigint_value := mload(add(table, offset))\\n        }\\n\\n        return trigint_value;\\n    }\\n\\n    /**\\n     * Return the sine of an integer approximated angle as a signed 16-bit\\n     * integer.\\n     *\\n     * @param _angle A 14-bit angle. This divides the circle into 16384\\n     *               angle units, instead of the standard 360 degrees.\\n     * @return The sine result as a number in the range -32767 to 32767.\\n     */\\n    function sin(uint16 _angle) internal pure returns (int) {\\n        uint interp = bits(_angle, INTERP_WIDTH, INTERP_OFFSET);\\n        uint index = bits(_angle, INDEX_WIDTH, INDEX_OFFSET);\\n\\n        bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\\n        bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\\n\\n        if (!is_odd_quadrant) {\\n            index = SINE_TABLE_SIZE - 1 - index;\\n        }\\n\\n        uint x1 = sin_table_lookup(index);\\n        uint x2 = sin_table_lookup(index + 1);\\n        uint approximation = ((x2 - x1) * interp) / (2 ** INTERP_WIDTH);\\n\\n        int sine;\\n        if (is_odd_quadrant) {\\n            sine = int(x1) + int(approximation);\\n        } else {\\n            sine = int(x2) - int(approximation);\\n        }\\n\\n        if (is_negative_quadrant) {\\n            sine *= -1;\\n        }\\n\\n        return sine;\\n    }\\n\\n    /**\\n     * Return the cos of an integer approximated angle.\\n     * It functions just like the sin() method but uses the trigonometric\\n     * identity sin(x + pi/2) = cos(x) to quickly calculate the cos.\\n     */\\n    function cos(uint16 _angle) internal pure returns (int) {\\n        _angle = (_angle + QUADRANT_LOW_MASK) % ANGLES_IN_CYCLE;\\n\\n        return sin(_angle);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/SSTORE2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n    error WriteError();\\n\\n    /**\\n      @notice Stores `_data` and returns `pointer` as key for later retrieval\\n      @dev The pointer is a contract address with `_data` as code\\n      @param _data to be written\\n      @return pointer Pointer to the written `_data`\\n    */\\n    function write(bytes memory _data) internal returns (address pointer) {\\n        // Append 00 to _data so contract can't be called\\n        // Build init code\\n        bytes memory code = Bytecode.creationCodeFor(\\n            abi.encodePacked(\\n                hex'00',\\n                _data\\n            )\\n        );\\n\\n        // Deploy contract using create\\n        assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n        // Address MUST be non-zero\\n        if (pointer == address(0)) revert WriteError();\\n    }\\n\\n    /**\\n      @notice Reads the contents of the `_pointer` code as data, skips the first byte\\n      @dev The function is intended for reading pointers generated by `write`\\n      @param _pointer to be read\\n      @return data read from `_pointer` contract\\n    */\\n    function read(address _pointer) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n    }\\n\\n    /**\\n      @notice Reads the contents of the `_pointer` code as data, skips the first byte\\n      @dev The function is intended for reading pointers generated by `write`\\n      @param _pointer to be read\\n      @param _start number of bytes to skip\\n      @return data read from `_pointer` contract\\n    */\\n    function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n    }\\n\\n    /**\\n      @notice Reads the contents of the `_pointer` code as data, skips the first byte\\n      @dev The function is intended for reading pointers generated by `write`\\n      @param _pointer to be read\\n      @param _start number of bytes to skip\\n      @param _end index before which to end extraction\\n      @return data read from `_pointer` contract\\n    */\\n    function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/PolyRenderer.sol\": {\r\n      \"content\": \"//\\\"SPDX-License-Identifier: GPL-3.0\\n\\n/*******************************************\\n              _                       _\\n             | |                     | |\\n  _ __   ___ | |_   _ ___   __ _ _ __| |_\\n | '_ \\\\ / _ \\\\| | | | / __| / _` | '__| __|\\n | |_) | (_) | | |_| \\\\__ \\\\| (_| | |  | |_\\n | .__/ \\\\___/|_|\\\\__, |___(_)__,_|_|   \\\\__|\\n | |             __/ |\\n |_|            |___/\\n a homage to math, geometry and cryptography.\\n********************************************/\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Trigonometry.sol\\\";\\nimport \\\"./Fixed.sol\\\";\\n\\n\\nlibrary PolyRenderer {\\n    using Trigonometry for uint16;\\n    using Fixed for int64;\\n\\n    struct Polygon {\\n        uint8 sides;\\n        uint8 color;\\n        uint64 size;\\n        uint16 rotation;\\n        uint64 top;\\n        uint64 left;\\n        uint64 opacity;\\n    }\\n\\n    struct Circle {\\n        uint8 color;\\n        uint64 radius;\\n        uint64 c_y;\\n        uint64 c_x;\\n        uint64 opacity;\\n    }\\n\\n    function svgOf(bytes calldata data, bool isCircle) external pure returns (string memory){\\n        // initialise svg\\n        string memory svg = '<svg width=\\\"256\\\" height=\\\"256\\\" viewBox=\\\"0 0 256 256\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">';\\n\\n        // fill it with the background colour\\n        string memory bgColor = string(abi.encodePacked(\\\"rgb(\\\", uint2str(uint8(data[0]), 0, 1), \\\",\\\", uint2str(uint8(data[1]), 0, 1), \\\",\\\", uint2str(uint8(data[2]), 0, 1), \\\")\\\"));\\n        svg = string(abi.encodePacked(svg, '<rect width=\\\"256\\\" height=\\\"256\\\" fill=\\\"', bgColor, '\\\"/>'));\\n\\n        // load Palette\\n        string[4] memory colors;\\n        for (uint8 i = 0; i < 4; i++) {\\n            colors[i] = string(abi.encodePacked(uint2str(uint8(data[3 + i * 3]), 0, 1), \\\",\\\", uint2str(uint8(data[4 + i * 3]), 0, 1), \\\",\\\", uint2str(uint8(data[5 + i * 3]), 0, 1), \\\",\\\"));\\n        }\\n\\n        // Fill it with Polygons or Circles\\n        uint polygons = (data.length - 15) / 5;\\n        string memory poly = '';\\n        Polygon memory polygon;\\n        for (uint i = 0; i < polygons; i++) {\\n            polygon = polygonFromBytes(data[15 + i * 5 : 15 + (i + 1) * 5]);\\n            poly = string(abi.encodePacked(poly,\\n                isCircle\\n                ? renderCircle(polygon, colors)\\n                : renderPolygon(polygon, colors))\\n            );\\n        }\\n        return string(abi.encodePacked(svg, poly, '</svg>'));\\n    }\\n\\n    function attributesOf(bytes calldata data, bool isCircle) external pure returns (string memory){\\n        uint elements = (data.length - 15) / 5;\\n        if (isCircle) {\\n            return string(abi.encodePacked('[{\\\"trait_type\\\":\\\"Circles\\\",\\\"value\\\":', uint2str(elements, 0, 1), '}]'));\\n        }\\n        string[4] memory types = [\\\"Triangles\\\", \\\"Squares\\\", \\\"Pentagons\\\", \\\"Hexagons\\\"];\\n        uint256[4] memory sides_count;\\n        for (uint i = 0; i < elements; i++) {\\n            sides_count[uint8(data[15 + i * 5] >> 6)]++;\\n        }\\n        string memory result = '[';\\n        string memory last;\\n        for (uint i = 0; i < 4; i++) {\\n            last = i == 3 ? '}' : '},';\\n            result = string(abi.encodePacked(result, '{\\\"trait_type\\\":\\\"', types[i], '\\\",\\\"value\\\":',\\n                uint2str(sides_count[i], 0, 1), last));\\n        }\\n        return string(abi.encodePacked(result, ']'));\\n    }\\n\\n    function renderCircle(Polygon memory polygon, string[4] memory colors) internal pure returns (string memory){\\n        int64 radius = getRadius(polygon.sides, polygon.size);\\n        return string(abi.encodePacked('<circle cx=\\\"', fixedToString(int64(polygon.left).toFixed(), 1), '\\\" cy=\\\"',\\n            fixedToString(int64(polygon.top).toFixed(), 1), '\\\" r=\\\"', fixedToString(radius, 1), '\\\" style=\\\"fill:rgba(',\\n            colors[polygon.color], opacityToString(polygon.opacity), ')\\\"/>'));\\n    }\\n\\n    function opacityToString(uint64 opacity) internal pure returns (string memory) {\\n        return opacity == 31\\n        ? '1'\\n        : string(abi.encodePacked('0.', uint2str(uint64(int64(opacity).div(31).fractionPart()), 5, 1)));\\n    }\\n\\n    function polygonFromBytes(bytes calldata data) internal pure returns (Polygon memory) {\\n        Polygon memory polygon;\\n        // read first two bits from the left and add 3\\n        polygon.sides = (uint8(data[0]) >> 6) + 3;\\n        // read the next two bits\\n        polygon.color = (uint8(data[0]) >> 4) & 3;\\n        // read the next 5 bits\\n        polygon.opacity = ((uint8(data[0]) % 16) << 1) + (uint8(data[1]) >> 7);\\n        // read the last 7 bits.\\n        polygon.rotation = uint8(data[1]) % 128;\\n        polygon.top = uint8(data[2]);\\n        polygon.left = uint8(data[3]);\\n        polygon.size = uint64(uint8(data[4])) + 1;\\n        return polygon;\\n    }\\n\\n    function renderPolygon(Polygon memory polygon, string[4] memory colors) internal pure returns (string memory){\\n        int64[] memory points = getVertices(polygon);\\n\\n        int64 v;\\n        int8 sign;\\n        string memory last;\\n        string memory result = '<polygon points=\\\"';\\n        for (uint j = 0; j < points.length; j++) {\\n            v = points[j];\\n            sign = v < 0 ? - 1 : int8(1);\\n            last = j == points.length - 1 ? '\\\" style=\\\"fill:rgba(' : \\\",\\\";\\n            result = string(abi.encodePacked(result, fixedToString(v, sign), last));\\n        }\\n        return string(abi.encodePacked(result, colors[polygon.color], opacityToString(polygon.opacity), ')\\\"/>'));\\n    }\\n\\n    function fixedToString(int64 fPoint, int8 sign) internal pure returns (bytes memory){\\n        return abi.encodePacked(uint2str(uint64(sign * fPoint.wholePart()), 0, sign), \\\".\\\",\\n            uint2str(uint64(fPoint.fractionPart()), 5, 1));\\n    }\\n\\n    function getRotationVector(uint16 angle) internal pure returns (int64[2] memory){\\n        // returns [cos(angle), -sin(angle)]\\n        return [\\n            int64(angle.cos()).div(32767), //-32767 to 32767.\\n            int64(-angle.sin()).div(32767)\\n        ];\\n    }\\n\\n    function rotate(int64[2] memory R, int64[2] memory pos) internal pure returns (int64[2] memory){\\n        // R = [cos(angle), -sin(angle)]\\n        // rotation_matrix = [[cos(angle), -sin(angle)], [sin(angle), cos(angle)]]\\n        // this function returns rotation_matrix.dot(pos)\\n        int64[2] memory result;\\n        result[0] = R[0].mul(pos[0]) + R[1].mul(pos[1]);\\n        result[1] = - R[1].mul(pos[0]) + R[0].mul(pos[1]);\\n        return result;\\n    }\\n\\n    function vectorSum(int64[2] memory a, int64[2] memory b) internal pure returns (int64[2] memory){\\n        return [a[0] + b[0], a[1] + b[1]];\\n    }\\n\\n    function getRadius(uint8 sides, uint64 size) internal pure returns (int64){\\n        // the radius of the circumscribed circle is equal to the length of the regular poly edge divided by\\n        // cos(internal_angle/2).\\n        int64 cos_ang_2 = int64(uint64([7439101574, 6074001000, 5049036871, 4294967296][sides - 3]));\\n        return int64(size).toFixed().div(cos_ang_2);\\n    }\\n\\n    function getVertices(Polygon memory polygon) internal pure returns (int64[] memory) {\\n        int64[] memory result = new int64[](2 * polygon.sides);\\n        uint16 internalAngle = [1365, 2048, 2458, 2731][polygon.sides - 3]; // Note: 16384 is 2pi\\n        uint16 angle = [5461, 4096, 3277, 2731][polygon.sides - 3]; // 16384/sides\\n        int64 radius = getRadius(polygon.sides, polygon.size);\\n\\n        // We map our rotation that goes from [0, 128[, to [0, 16384/sides[. 16384 is 2pi on the Trigonometry package.\\n        // We say 128 = 16384/sides because if you rotate a regular polygon by 2pi/number_of_sides it will be exactly the\\n        // same as rotating it by 2pi (due to the symmetries of regular polys).\\n        // We gain more precision by taking advantage of these symmetries.\\n\\n        uint16 rotation = uint16((polygon.rotation << 7) / polygon.sides + internalAngle);\\n\\n        int64[2] memory R = getRotationVector(rotation);\\n        int64[2] memory vector = rotate(R, [radius, 0]);\\n        int64[2] memory center = [int64(polygon.left).toFixed(), int64(polygon.top).toFixed()];\\n        int64[2] memory pos = vectorSum(center, vector);\\n        result[0] = pos[0];\\n        result[1] = pos[1];\\n        R = getRotationVector(angle);\\n        for (uint8 i = 0; i < polygon.sides - 1; i++) {\\n            vector = rotate(R, vector);\\n            pos = vectorSum(center, vector);\\n            result[(i + 1) * 2] = pos[0];\\n            result[(i + 1) * 2 + 1] = pos[1];\\n        }\\n        return result;\\n    }\\n\\n    function uint2str(uint _i, uint8 zero_padding, int8 sign) internal pure returns (string memory str) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint length;\\n        while (j != 0) {\\n            length++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(length);\\n        uint k = length;\\n        j = _i;\\n        while (j != 0) {\\n            bstr[--k] = bytes1(uint8(48 + j % 10));\\n            j /= 10;\\n        }\\n        if ((zero_padding > 0) && (zero_padding > length)) {\\n            uint pad_length = zero_padding - length;\\n            bytes memory pad = new bytes(pad_length);\\n            k = 0;\\n            while (k < pad_length) {\\n                pad[k++] = bytes1(uint8(48));\\n            }\\n            bstr = abi.encodePacked(pad, bstr);\\n        }\\n        if (sign < 0) {\\n            return string(abi.encodePacked(\\\"-\\\", bstr));\\n        } else {\\n            return string(bstr);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/contracts/Fixed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*******************************************\\n              _                       _\\n             | |                     | |\\n  _ __   ___ | |_   _ ___   __ _ _ __| |_\\n | '_ \\\\ / _ \\\\| | | | / __| / _` | '__| __|\\n | |_) | (_) | | |_| \\\\__ \\\\| (_| | |  | |_\\n | .__/ \\\\___/|_|\\\\__, |___(_)__,_|_|   \\\\__|\\n | |             __/ |\\n |_|            |___/\\n\\n a homage to math, geometry and cryptography.\\n********************************************/\\npragma solidity ^0.8.4;\\n\\n\\nlibrary Fixed {\\n    uint8 constant scale = 32;\\n\\n    function toFixed(int64 i) internal pure returns (int64){\\n        return i << scale;\\n    }\\n\\n    function toInt(int64 f) internal pure returns (int64){\\n        return f >> scale;\\n    }\\n\\n    /// @notice outputs the first 5 decimal places\\n    function fractionPart(int64 f) internal pure returns (int64){\\n        int8 sign = f < 0 ? - 1 : int8(1);\\n        // zero out the digits before the comma\\n        int64 fraction = (sign * f) & 2 ** 32 - 1;\\n        // Get the first 5 decimals\\n        return int64(int128(fraction) * 1e5 >> scale);\\n    }\\n\\n    function wholePart(int64 f) internal pure returns (int64){\\n        return f >> scale;\\n    }\\n\\n    function mul(int64 a, int64 b) internal pure returns (int64) {\\n        return int64(int128(a) * int128(b) >> scale);\\n    }\\n\\n    function div(int64 a, int64 b) internal pure returns (int64){\\n        return int64((int128(a) << scale) / b);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/Base64.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.4;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\n\\n// SPDX-License-Identifier: MIT\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"/contracts/PolyRenderer.sol\": {\r\n        \"PolyRenderer\": \"0x44A2B58082cb8436AC2abbbFdb2032f4EA0fa815\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"openSeaProxyRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BreedingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CirclingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"alsoShowAnimationUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"alsoShowOffChainVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyId\",\"type\":\"uint256\"}],\"name\":\"creatorNameOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyId\",\"type\":\"uint256\"}],\"name\":\"creatorOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBreedingSeason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCirclingSeason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"polyData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyId\",\"type\":\"uint256\"}],\"name\":\"mintCircle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numMintedOriginals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyIdA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"polyIdB\",\"type\":\"uint256\"}],\"name\":\"pairIsTaken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"circleId\",\"type\":\"uint256\"}],\"name\":\"parentOfCircle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mixId\",\"type\":\"uint256\"}],\"name\":\"parentsOfMix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyIdA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"polyIdB\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"preSaleOffspring\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyIdA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"polyIdB\",\"type\":\"uint256\"}],\"name\":\"publicSaleOffspring\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUrl\",\"type\":\"string\"}],\"name\":\"setBaseUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOpenSeaProxyActive\",\"type\":\"bool\"}],\"name\":\"setIsOpenSeaProxyActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"signPieces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBreedingSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCirclingSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyId\",\"type\":\"uint256\"}],\"name\":\"tokenDataOf\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyId\",\"type\":\"uint256\"}],\"name\":\"tokenIsCircle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyId\",\"type\":\"uint256\"}],\"name\":\"tokenIsOriginal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"remainingChildren\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"wasCircled\",\"type\":\"bool\"},{\"internalType\":\"enum Polys.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyId\",\"type\":\"uint256\"}],\"name\":\"tokenNameOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"polyId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Polys", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}