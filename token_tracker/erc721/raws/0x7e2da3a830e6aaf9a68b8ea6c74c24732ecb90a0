{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Heroes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\nimport { ERC721MM } from \\\"./ERC721MM.sol\\\";\\n\\n\\ncontract Heroes is ERC721MM {\\n\\n    string constant public name   = \\\"Meta & Magic Heroes\\\";\\n    string constant public symbol = \\\"HEROES\\\";\\n\\n    mapping(uint256 => uint256) bossSupplies;\\n\\n    address stats;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        INITIALIZATION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function initialize(address stats_, address renderer_) external {\\n        require(msg.sender == _owner(), \\\"not authorized\\\");\\n\\n        stats    = stats_;\\n        renderer = renderer_;\\n\\n        bossSupplies[10] = 100;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        VIEW FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getStats(uint256 id_) external view virtual returns(bytes10[6] memory stats_) {    // [][]\\n        uint256 seed = entropySeed;\\n        require(seed != 0, \\\"Not revealed\\\");\\n\\n        stats_ = StatsLike(stats).getStats(_traits(seed, id_));\\n    }\\n\\n    function isSpecial(uint256 id) external view returns(bool sp) {\\n        return _isSpecial(id, entropySeed);\\n    }\\n    function tokenURI(uint256 id) external view returns (string memory) {\\n        uint256 seed = entropySeed;\\n        if (seed == 0) return RendererLike(renderer).getPlaceholder(1);\\n        return RendererLike(renderer).getUri(id, _traits(seed, id), _getCategory(id,seed));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        MINT FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mintDrop(uint256 boss, address to) external virtual returns(uint256 id) {\\n        require(auth[msg.sender], \\\"not authorized\\\");\\n\\n        id = 3000 + bossSupplies[boss]--; // Note boss drops are predictable because the entropy seed is known\\n\\n        _mint(to, id, 2);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            INTERNAL FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _traits(uint256 seed_, uint256 id_) internal pure override returns (uint256[6] memory t ) {\\n        require(seed_ != uint256(0), \\\"seed not set\\\");\\n        if (_isSpecial(id_, seed_)) return _getSpecialTraits(seed_, id_);\\n        \\n        t = [ _getTier(id_,  seed_, \\\"LEVEL\\\"), \\n               _getClass(id_, seed_, \\\"CLASS\\\"), \\n               _getTier(id_,  seed_, \\\"RANK\\\"), \\n               _getTier(id_,  seed_, \\\"RARITY\\\"), \\n               _getTier(id_,  seed_, \\\"PET\\\"),\\n               _getItem(id_,  seed_, \\\"ITEM\\\")];\\n            \\n        if (id_ > 3000) t[1] = 8;\\n    }\\n\\n    function _getSpecialTraits(uint256 seed_, uint256 id_) internal pure returns (uint256[6] memory t) {\\n        uint256 spc = (id_ / 428) + 1;\\n        \\n        uint256 traitIndcator = (spc) * 10 + spc;\\n\\n        t = [traitIndcator,traitIndcator,traitIndcator,traitIndcator,traitIndcator,traitIndcator];\\n    }\\n\\n    function _getClass(uint256 id_, uint256 seed, bytes32 salt) internal pure returns (uint256 class_) {\\n        uint256 rdn = uint256(keccak256(abi.encode(id_, seed, salt))) % 100_0000 + 1; \\n\\n        if (rdn <= 79_8160) return (rdn % 5) + 1;\\n        if (rdn <= 91_7884) return 6;\\n        return 7;\\n    }\\n\\n    function _getItem(uint256 id_, uint256 seed, bytes32 salt) internal pure returns (uint256 item_) {\\n        uint256 rdn = uint256(keccak256(abi.encode(id_, seed, salt))) % 100_0000 + 1; \\n        if (rdn <= 24_9425) return 0;\\n\\n        return _getTier(id_, seed, salt) + ((rdn % 3) * 6);\\n    }\\n\\n    function _isSpecial(uint256 id, uint256 seed_) internal pure returns (bool special) {\\n        uint256 rdn = _getRndForSpecial(seed_);\\n        for (uint256 i = 0; i < 8; i++) {\\n            if (id == rdn + (428 * i)) {\\n                special = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _getSpecialCategory(uint256 id, uint256 seed_) internal pure returns (uint256 spc) {\\n        uint256 num = (id / 428) + 1;\\n        spc = num + 4 + (num - 1);\\n    }\\n\\n    function _getCategory(uint256 id, uint256 seed) internal pure returns (uint256 cat) {\\n        // Boss Drop\\n        if (id > 3000) return cat = 3;\\n        if (_isSpecial(id, seed)) return _getSpecialCategory(id, seed);\\n        return 1;\\n    }\\n\\n    function _getRndForSpecial(uint256 seed) internal pure virtual returns (uint256 rdn) {\\n        rdn = uint256(keccak256(abi.encode(seed, \\\"SPECIAL\\\"))) % 428 + 1;\\n    }\\n\\n}\\n\\ninterface StatsLike {\\n    function getStats(uint256[6] calldata attributes) external view returns (bytes10[6] memory stats_); \\n}\\n\\ninterface RendererLike {\\n    function getUri(uint256 id, uint256[6] calldata traits, uint256 cat) external view returns (string memory meta);\\n    function getPlaceholder(uint256 cat) external pure returns (string memory meta);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC721MM.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.7;\\n\\n/// @notice Modern and gas efficient ERC-721 + ERC-20/EIP-2612-like implementation,\\n/// Modified version inspired by ERC721A\\nabstract contract ERC721MM {\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    \\n    event Approval(address indexed owner, address indexed spender, uint256 indexed tokenId);\\n    \\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    \\n    \\n    /*///////////////////////////////////////////////////////////////\\n                             ERC-721 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    struct AddressData { uint128 balance; uint64 listMinted; uint64 publicMinted; }\\n\\n    uint256 public totalSupply;\\n    uint256 public entropySeed;\\n    \\n    mapping(address => bool)    public auth;\\n\\n    mapping(address => AddressData) public datas;\\n    \\n    mapping(uint256 => address) public ownerOf;\\n        \\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    // Rendering information\\n    address public renderer;\\n\\n    // Oracle information\\n    address public VRFcoord;\\n\\n    uint64  public subId;\\n\\n    bytes32 public keyhash;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                VIRTUAL FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _traits(uint256 entropy_, uint256 id_) internal pure virtual returns (uint256[6] memory traits_);\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                             VIEW FUNCTION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function owner() external view returns (address owner_) {\\n        return _owner();\\n    }\\n\\n    function balanceOf(address add) external view returns(uint256 balance_) {\\n        balance_ = datas[add].balance;\\n    }\\n\\n    function listMinted(address add) external view returns(uint256 minted_) {\\n        minted_ = datas[add].listMinted;\\n    }\\n\\n    function publicMinted(address add) external view returns(uint256 minted_) {\\n        minted_ = datas[add].publicMinted;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            M&M SPECIFIC LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setAuth(address add_, bool auth_) external {\\n        require(_owner() == msg.sender, \\\"not authorized\\\");\\n        auth[add_] = auth_;\\n    }\\n\\n    function mint(address to, uint256 amount, uint256 stage) external virtual returns(uint256 id) {\\n        require(auth[msg.sender], \\\"not authorized\\\");\\n        for (uint256 i = 0; i < amount; i++) {\\n            id = totalSupply + 1;\\n            _mint(to, id, stage);     \\n        }\\n    }\\n\\n     function setUpOracle(address vrf_, bytes32 keyHash, uint64 subscriptionId) external {\\n        require(msg.sender == _owner());\\n\\n        VRFcoord = vrf_;\\n        keyhash  = keyHash;\\n        subId    = subscriptionId;\\n    }\\n\\n    function requestEntropy() external {\\n        require(msg.sender == _owner(), \\\"not auth\\\");\\n        require(entropySeed == 0,       \\\"already requested\\\");\\n\\n        VRFCoordinatorV2Interface(VRFcoord).requestRandomWords(keyhash, subId, 3, 200000, 1);\\n    }\\n\\n    function rawFulfillRandomWords(uint256 , uint256[] memory randomWords) external {\\n        require(msg.sender == VRFcoord, \\\"not allowed\\\");\\n        require(entropySeed == 0);\\n        entropySeed = randomWords[0];\\n   }\\n\\n   function getTraits(uint256 id_) external view returns (uint256[6] memory traits_) {\\n        return _traits(entropySeed, id_);\\n    }\\n\\n    function _getTier(uint256 id_, uint256 seed, bytes32 salt) internal pure returns (uint256 t_) {\\n        uint256 rdn = uint256(keccak256(abi.encode(id_, seed, salt))) % 100_0000 + 1; \\n        if (rdn <= 28_9333) return 1;\\n        if (rdn <= 52_8781) return 2;\\n        if (rdn <= 71_8344) return 3;\\n        if (rdn <= 85_8022) return 4;\\n        if (rdn <= 94_7815) return 5;\\n        return 6;\\n    }\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                              ERC-721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    function transfer(address to, uint256 tokenId) external returns (bool) {\\n        require(msg.sender == ownerOf[tokenId], \\\"NOT_OWNER\\\");\\n        \\n        _transfer(msg.sender, to, tokenId);\\n        return true;\\n    }\\n    \\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool supported) {\\n        supported = interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\n    }\\n    \\n    function approve(address spender, uint256 tokenId) external {\\n        address owner_ = ownerOf[tokenId];\\n        \\n        require(msg.sender == owner_ || isApprovedForAll[owner_][msg.sender], \\\"NOT_APPROVED\\\");\\n        \\n        getApproved[tokenId] = spender;\\n        \\n        emit Approval(owner_, spender, tokenId); \\n    }\\n    \\n    function setApprovalForAll(address operator, bool approved) external {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n        \\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenId) public returns (bool){        \\n        require(\\n            msg.sender == from \\n            || msg.sender == getApproved[tokenId]\\n            || isApprovedForAll[from][msg.sender]\\n            || auth[msg.sender],\\n            \\\"NOT_APPROVED\\\"\\n        );\\n        \\n        _transfer(from, to, tokenId);\\n        return true;\\n    }\\n    \\n    function safeTransferFrom(address from, address to, uint256 tokenId) external {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n    \\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public {\\n        transferFrom(from, to, tokenId); \\n        \\n        if (to.code.length != 0) {\\n            // selector = `onERC721Received(address,address,uint,bytes)`\\n            (, bytes memory returned) = to.staticcall(abi.encodeWithSelector(0x150b7a02,\\n                msg.sender, address(0), tokenId, data));\\n                \\n            bytes4 selector = abi.decode(returned, (bytes4));\\n            \\n            require(selector == 0x150b7a02, \\\"NOT_ERC721_RECEIVER\\\");\\n        }\\n    }\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                          INTERNAL UTILS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _owner() internal view returns (address owner_) {\\n        bytes32 slot = bytes32(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103);\\n        assembly {\\n            owner_ := sload(slot)\\n        }\\n    } \\n\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        require(ownerOf[tokenId] == from, \\\"not owner\\\");\\n\\n        datas[from].balance--; \\n        datas[to].balance++;\\n        \\n        delete getApproved[tokenId];\\n        \\n        ownerOf[tokenId] = to;\\n        emit Transfer(from, to, tokenId); \\n\\n    }\\n\\n    function _mint(address to, uint256 tokenId, uint256 stage) internal { \\n        require(ownerOf[tokenId] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        totalSupply++;\\n        \\n        // This is safe because the sum of all user\\n        // balances can't exceed type(uint256).max!\\n        unchecked {\\n            datas[to].balance++;\\n            stage == 1 ? datas[to].listMinted++ : datas[to].publicMinted++;\\n        }\\n        \\n        ownerOf[tokenId] = to;\\n                \\n        emit Transfer(address(0), to, tokenId); \\n    }\\n    \\n    function _burn(address acc, uint256 tokenId) internal { \\n        address owner_ = ownerOf[tokenId];\\n        \\n        require(acc == owner_, \\\"NOT_OWNER\\\");\\n        require(ownerOf[tokenId] != address(0), \\\"NOT_MINTED\\\");\\n        \\n        totalSupply--;\\n        datas[owner_].balance--;\\n        \\n        delete ownerOf[tokenId];\\n                \\n        emit Transfer(owner_, address(0), tokenId); \\n    }\\n}\\n\\ninterface VRFCoordinatorV2Interface {\\n    function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VRFcoord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"datas\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"listMinted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"publicMinted\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entropySeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"bytes10[6]\",\"name\":\"stats_\",\"type\":\"bytes10[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getTraits\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"traits_\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stats_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"renderer_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isSpecial\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sp\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyhash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"listMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minted_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boss\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"publicMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minted_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestEntropy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"auth_\",\"type\":\"bool\"}],\"name\":\"setAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrf_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setUpOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Heroes", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}