{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Frame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// @author jolan.eth\\ncontract FRAME is Ownable {\\n    string public symbol = \\\"FRAME\\\";\\n    string public name = \\\"0N1 Frame\\\";\\n    string public CID;\\n\\n    address public NANOHUB;\\n\\n    uint public totalSupply = 0;\\n\\n    mapping (uint => address) owners;\\n    mapping (address => uint) balances;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\\n\\n    constructor() {}\\n\\n    function setCID(string memory _CID)\\n    public onlyOwner {\\n        CID = _CID;\\n    }\\n\\n    function setNANOHUB(address _NANOHUB)\\n    public onlyOwner {\\n        NANOHUB = _NANOHUB;\\n    }\\n\\n    function mintFRAME(address to, uint tokenId)\\n    public {\\n        require(msg.sender == NANOHUB, \\\"error NANOHUB\\\");\\n        _mint(to, tokenId);\\n    }\\n\\n    function transferFrom(address from, address to, uint tokenId)\\n    public {\\n        require(msg.sender == NANOHUB, \\\"error NANOHUB\\\");\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function exist(uint tokenId)\\n    public view returns (bool) {\\n        return owners[tokenId] != address(0);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n    public pure returns (bool) {\\n        return interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\n    }\\n\\n    function balanceOf(address owner)\\n    public view returns (uint) {\\n        require(address(0) != owner, \\\"error owner\\\");\\n        return balances[owner];\\n    }\\n\\n    function ownerOf(uint id)\\n    public view returns (address) {\\n        require(exist(id), \\\"error exist\\\");\\n        return owners[id];\\n    }\\n\\n    function tokenURI(uint id)\\n    public view returns (string memory) {\\n        require(exist(id), \\\"error exist\\\");\\n        return string(\\n            abi.encodePacked(\\\"ipfs://\\\", CID, \\\"/\\\", _toString(id))\\n        );\\n    }\\n\\n    function _mint(address to, uint id)\\n    private {\\n        address from = address(0);\\n        require(to != address(0), \\\"error to\\\");\\n        require(owners[id] == address(0), \\\"error owner\\\");\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(id);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, id);\\n        }\\n\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(id);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, id);\\n        }\\n\\n        balances[to]++;\\n        owners[id] = to;\\n        totalSupply++;\\n\\n        emit Transfer(address(0), to, id);\\n        require(_checkOnERC721Received(address(0), to, id, \\\"\\\"), \\\"error ERC721Receiver\\\");\\n    }\\n\\n    function _transfer(address from, address to, uint id)\\n    private {\\n        require(exist(id), \\\"error exist\\\");\\n        require(to != address(0), \\\"error to\\\");\\n        require(from == ownerOf(id), \\\"error owner\\\");\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(id);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, id);\\n        }\\n\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(id);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, id);\\n        }\\n\\n        balances[from]--;\\n        balances[to]++;\\n        owners[id] = to;\\n\\n        emit Transfer(from, to, id);\\n        require(_checkOnERC721Received(address(0), to, id, \\\"\\\"), \\\"error ERC721Receiver\\\");\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n    public view virtual returns (uint256) {\\n        require(index < balanceOf(owner), \\\"error balanceOf\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n    public view virtual returns (uint256) {\\n        require(index < totalSupply, \\\"error totalSupply\\\");\\n        return _allTokens[index];\\n    }\\n\\n    function _addTokenToOwnerEnumeration(address to, uint256 id)\\n    private {\\n        uint256 length = balanceOf(to);\\n        _ownedTokens[to][length] = id;\\n        _ownedTokensIndex[id] = length;\\n    }\\n\\n    function _addTokenToAllTokensEnumeration(uint256 id)\\n    private {\\n        _allTokensIndex[id] = _allTokens.length;\\n        _allTokens.push(id);\\n    }\\n\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 id)\\n    private {\\n        uint256 lastTokenIndex = balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[id];\\n\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId;\\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\\n        }\\n\\n        delete _ownedTokensIndex[id];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    function _removeTokenFromAllTokensEnumeration(uint256 id)\\n    private {\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[id];\\n\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId;\\n        _allTokensIndex[lastTokenId] = tokenIndex;\\n\\n        delete _allTokensIndex[id];\\n        _allTokens.pop();\\n    }\\n\\n    function _checkOnERC721Received(address from, address to, uint id, bytes memory _data)\\n    internal returns (bool) {\\n        uint size;\\n\\n        assembly {\\n            size := extcodesize(to)\\n        }\\n\\n        if (size > 0)\\n            try ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, _data) returns (bytes4 retval) {\\n                return retval == ERC721TokenReceiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) revert(\\\"error ERC721Receiver\\\");\\n                else assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n            }\\n        else return true;\\n    }\\n\\n    function _toString(uint value)\\n    private pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n\\n        uint digits;\\n        uint tmp = value;\\n\\n        while (tmp != 0) {\\n            digits++;\\n            tmp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8;\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n    \\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"error owner()\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() { _transferOwnership(msg.sender); }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"error newOwner\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NANOHUB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintFRAME\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_CID\",\"type\":\"string\"}],\"name\":\"setCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NANOHUB\",\"type\":\"address\"}],\"name\":\"setNANOHUB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FRAME", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}