{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StarfallVillage.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./FoundersTokensV2.sol\\\";\\r\\n//import \\\"./CollabFaker.sol\\\";\\r\\nimport \\\"./StakingContract.sol\\\";\\r\\n\\r\\ncontract StarFallVillage is ERC721, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIds;\\r\\n\\r\\n    address private _owner;\\r\\n\\r\\n    uint256 private MAX_TOKENS;\\r\\n\\r\\n    uint256 private MAX_GENESIS = 3333;\\r\\n\\r\\n    uint256 private SALE_PRICE = 0.08 ether;\\r\\n\\r\\n    uint256 private WL_LIMIT = 1111;\\r\\n\\r\\n    uint256 private AL_AMOUNT = 10;\\r\\n\\r\\n    uint256 private FP_AMOUNT = 2;\\r\\n\\r\\n    uint256 private balance = 0;\\r\\n\\r\\n    uint256 private _wlStartDateTime;\\r\\n\\r\\n    uint256 private _wlEndDateTime;\\r\\n\\r\\n    uint256 private _alStartDateTime;\\r\\n\\r\\n    uint256 private _alEndDateTime;\\r\\n\\r\\n    uint256 private _publicSaleTime;\\r\\n\\r\\n    bool private publicSaleActive = true;\\r\\n\\r\\n    bool private isGenesis = true;\\r\\n\\r\\n    string private baseURI = \\\"https://sfvpfp.s3.amazonaws.com/preview/\\\";\\r\\n\\r\\n    mapping (address => uint256) private _mappingWhiteList;\\r\\n\\r\\n    mapping (address => uint256) private _mappingAllowList;\\r\\n\\r\\n    mapping (address => uint256) private _mappingFPSpots;\\r\\n\\r\\n    mapping (address => bool) private _mappingPartnerChecked;\\r\\n\\r\\n    address fp_address;\\r\\n\\r\\n    mapping(string => uint256) discountNum;\\r\\n    \\r\\n    //mapping(string => uint256) discountDen;\\r\\n\\r\\n    uint256 wlSaleCount = 0;\\r\\n\\r\\n    uint256 public offsetGenesis = 0;\\r\\n\\r\\n    uint256 public offsetNext = 0;\\r\\n\\r\\n    bool public genesisOffsetSet = false;\\r\\n\\r\\n    bool public nextOffsetSet = false;\\r\\n\\r\\n    address[10] partner_tokens_721 = [0xf36446105fF682999a442b003f2224BcB3D82067, \\r\\n    0xb072114151f32D85223aE7B00Ac0528d1F56aa6E, 0xf36446105fF682999a442b003f2224BcB3D82067, 0x521f9C7505005CFA19A8E5786a9c3c9c9F5e6f42, \\r\\n    0x9690b63Eb85467BE5267A3603f770589Ab12Dc95, 0xe26F2c3547123B5FDaE0bfD52419D71BdFb0c4EF, 0x67421C8622F8E38Fe9868b4636b8dC855347d570, \\r\\n    0x8c3FB10693B228E8b976FF33cE88f97Ce2EA9563, 0x364C828eE171616a39897688A831c2499aD972ec, 0x8Cd8155e1af6AD31dd9Eec2cEd37e04145aCFCb3];\\r\\n\\r\\n    //address[2] partner_tokens_721 = [0x6a033F4680069BB66D99Dab5Bf97C6D2c663d4A7, 0x0C296728a1B309a8f7043F22349c1874e63cF37f];  // for dev\\r\\n\\r\\n    address[2] staking_partners = [0x0C565d28364a2C073AF3E270444476C19e8b986c, 0x682F6Fa7dBf3ea6CAd1533E4acd9B5E6f67372C9];\\r\\n\\r\\n    //address[2] staking_partners = [0xBf8a4dF45F98386852b1Ae1aDb7F5e1fFa8d9200, 0xBf8a4dF45F98386852b1Ae1aDb7F5e1fFa8d9200]; // for dev\\r\\n\\r\\n    address[2] partner_tokens_1155 = [0x495f947276749Ce646f68AC8c248420045cb7b5e, 0x495f947276749Ce646f68AC8c248420045cb7b5e];\\r\\n\\r\\n    uint256[2] start_token_ids = [108510973921457929967077298367545831468135648058682555520544970183838078599169,\\r\\n    108510973921457929967077298367545831468135648058682555520544981071202216837121];\\r\\n\\r\\n    uint256[2] token_deltas = [1099511627776, 1099511627776];\\r\\n\\r\\n    constructor(address _fp, uint256 supply) ERC721(\\\"StarFall Village PFP\\\", \\\"SVPFP\\\") public {\\r\\n        _owner = msg.sender;\\r\\n\\r\\n        MAX_TOKENS = supply;\\r\\n\\r\\n        fp_address = _fp;\\r\\n\\r\\n        _tokenIds.increment();\\r\\n\\r\\n        discountNum[\\\"Paper\\\"] = 90;\\r\\n        discountNum[\\\"Bronze\\\"] = 85;\\r\\n        discountNum[\\\"Silver\\\"] = 80;\\r\\n        discountNum[\\\"Gold\\\"] = 75;\\r\\n        discountNum[\\\"Ghostly\\\"] = 50;\\r\\n\\r\\n        FoundersTokensV2 fp = FoundersTokensV2(fp_address);\\r\\n        uint256 total = fp.itemsMinted();\\r\\n        for (uint256 i=1; i <= total; i++) {\\r\\n            _mappingFPSpots[fp.ownerOf(i)] += FP_AMOUNT;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /** Sale helper functions */\\r\\n\\r\\n    function hasPartnerTokenStaked(address owner) \\r\\n    public \\r\\n    view \\r\\n    returns(bool) {\\r\\n        for(uint i=0; i < staking_partners.length; i ++) {\\r\\n            StakingContract sc = StakingContract(staking_partners[i]);\\r\\n            if (sc.depositsOf(owner).length > 0) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function hasPartnerToken(address owner) \\r\\n    public \\r\\n    view \\r\\n    returns(bool) {\\r\\n        for(uint i=0; i < partner_tokens_721.length; i ++) {\\r\\n            ERC721 token = ERC721(partner_tokens_721[i]);\\r\\n            if (token.balanceOf(owner) > 0) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function hasSemiPartnerToken(address owner) \\r\\n    public \\r\\n    view \\r\\n    returns(bool) {\\r\\n        for(uint i=0; i < partner_tokens_1155.length; i ++) {\\r\\n            ERC1155 token = ERC1155(partner_tokens_1155[i]);\\r\\n            uint256 token_id = start_token_ids[i];\\r\\n            for (uint i= 0; i < 9900; i++) {\\r\\n                if (token.balanceOf(owner, token_id) > 0) {\\r\\n                    return true;\\r\\n                }\\r\\n                token_id += token_deltas[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getWLPrice(uint256 numberOfMints, address wallet) \\r\\n    public \\r\\n    view \\r\\n    returns (uint256) {\\r\\n        uint256 price = 0;\\r\\n        if (numberOfMints > _mappingFPSpots[wallet]) {\\r\\n            price = (numberOfMints - _mappingFPSpots[wallet]) * SALE_PRICE;\\r\\n        }\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    function getDiscountPrice(uint256 numberOfMints, uint256 fpTokenId) \\r\\n    public \\r\\n    view \\r\\n    returns (uint256) {\\r\\n        FoundersTokensV2 fp = FoundersTokensV2(fp_address);\\r\\n        //require(wallet == fp.ownerOf(fpTokenId), \\\"not owner\\\");\\r\\n        (, string memory trait) = fp.getTraits(fpTokenId);\\r\\n        uint256 discountPrice = (SALE_PRICE * numberOfMints * discountNum[trait]) / 100;\\r\\n        return discountPrice;\\r\\n    }\\r\\n\\r\\n    function getDiscountPriceWL(uint256 numberOfMints, uint256 fpTokenId, address wallet)\\r\\n    public \\r\\n    view \\r\\n    returns (uint256) {\\r\\n        uint256 discountPrice = 0;\\r\\n        if (numberOfMints > _mappingFPSpots[wallet]) {\\r\\n            FoundersTokensV2 fp = FoundersTokensV2(fp_address);\\r\\n            (, string memory trait) = fp.getTraits(fpTokenId);\\r\\n            discountPrice = ((numberOfMints - _mappingFPSpots[wallet]) * SALE_PRICE * discountNum[trait]) / 100;\\r\\n        }\\r\\n        return discountPrice;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) \\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        //string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        //string(abi.encodePacked(\\\"ipfs://\\\"));\\r\\n        if (tokenId <= MAX_GENESIS) {\\r\\n            uint256 tokenIdGenesis = tokenId + offsetGenesis;\\r\\n            if (tokenIdGenesis > MAX_GENESIS) {\\r\\n                tokenIdGenesis = tokenIdGenesis - MAX_GENESIS;\\r\\n            }\\r\\n            return string(abi.encodePacked(\\\"https://sfvpfp.s3.amazonaws.com/preview/\\\", Strings.toString(tokenIdGenesis), \\\".json\\\"));\\r\\n        }\\r\\n        uint256 tokenIdNext = tokenId + offsetNext;\\r\\n        if (tokenIdNext > MAX_TOKENS) {\\r\\n            tokenIdNext = tokenIdNext - MAX_TOKENS + MAX_GENESIS;\\r\\n        }\\r\\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenIdNext), \\\".json\\\"));\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /** Owner methods */\\r\\n\\r\\n    function createMintEvent(uint256 wlStartTime, uint256 wlEndTime, uint256 alStartTime, uint256 alEndTime, uint256 publicStartTime) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        _wlStartDateTime = wlStartTime;\\r\\n        _wlEndDateTime = wlEndTime; //wlStartTime + WL_SALE_LENGTH;\\r\\n        _alStartDateTime = alStartTime;\\r\\n        _alEndDateTime = alEndTime; //alStartTime + AL_SALE_LENGTH;\\r\\n        _publicSaleTime = publicStartTime;\\r\\n    }\\r\\n\\r\\n    function setWhiteList(address[] calldata whiteListAddress, uint256[] calldata amount) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        for (uint256 i = 0; i < whiteListAddress.length; i++) {\\r\\n            _mappingWhiteList[whiteListAddress[i]] = amount[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAllowList(address[] calldata allowListAddress) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        for (uint256 i = 0; i < allowListAddress.length; i++) {\\r\\n            _mappingAllowList[allowListAddress[i]] = AL_AMOUNT;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setFPList() \\r\\n    external \\r\\n    onlyOwner {\\r\\n        FoundersTokensV2 fp = FoundersTokensV2(fp_address);\\r\\n        uint256 total = fp.itemsMinted();\\r\\n        for (uint256 i=1; i <= total; i++) {\\r\\n            _mappingFPSpots[fp.ownerOf(i)] += FP_AMOUNT;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _uri) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        baseURI = _uri;\\r\\n    }\\r\\n\\r\\n    function changePrice(uint256 _salePrice) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        SALE_PRICE = _salePrice;\\r\\n    }\\r\\n\\r\\n    function changeWLLimit(uint256 limit) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        WL_LIMIT = limit;\\r\\n    }\\r\\n\\r\\n    function changeALAmount(uint256 amount) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        AL_AMOUNT = amount;\\r\\n    }\\r\\n\\r\\n    function changeFPAmount(uint256 amount) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        FP_AMOUNT = amount;\\r\\n    }\\r\\n\\r\\n    function setPublicSaleActive(bool active) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        publicSaleActive = active;\\r\\n    }\\r\\n\\r\\n    function setGenisis(bool genesis) \\r\\n    external \\r\\n    onlyOwner {\\r\\n        isGenesis = genesis;\\r\\n    }\\r\\n\\r\\n    function getRandom(uint256 limit) \\r\\n    private \\r\\n    view \\r\\n    returns(uint16) {\\r\\n        uint256 totalMinted = itemsMinted();\\r\\n        address owner1 = ownerOf(totalMinted/5);\\r\\n        address owner2 = ownerOf(totalMinted*2/5);\\r\\n        address owner3 = ownerOf(totalMinted*3/5);\\r\\n        address owner4 = ownerOf(totalMinted*4/5);\\r\\n        address owner5 = ownerOf(totalMinted - 1);\\r\\n        uint256 pseudoRandom = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), owner1, owner2, owner3, owner4, owner5)));\\r\\n        return uint16(uint16(pseudoRandom >> 1) % limit);\\r\\n    }\\r\\n\\r\\n    function revealGenesis() \\r\\n    external \\r\\n    onlyOwner { \\r\\n        require(\\r\\n            !genesisOffsetSet, \\r\\n            \\\"already revealed\\\"\\r\\n        );\\r\\n        offsetGenesis = uint256(getRandom(MAX_GENESIS));\\r\\n        genesisOffsetSet = true;\\r\\n    }\\r\\n\\r\\n    function revealNext() \\r\\n    external \\r\\n    onlyOwner { \\r\\n        require(\\r\\n            !nextOffsetSet, \\r\\n            \\\"already revealed\\\"\\r\\n        );\\r\\n        offsetNext = uint256(getRandom(MAX_TOKENS - MAX_GENESIS));\\r\\n        nextOffsetSet = true;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /** Minting methods */\\r\\n\\r\\n    function mintWhiteList(uint256 numberOfMints) \\r\\n    public \\r\\n    payable {\\r\\n        uint256 reserved = _mappingWhiteList[msg.sender] + _mappingFPSpots[msg.sender];\\r\\n        require(\\r\\n            isWhiteListSale(), \\r\\n            \\\"No presale active\\\"\\r\\n        );\\r\\n        require(\\r\\n            reserved > 0 || \\r\\n            msg.sender == _owner, \\r\\n            \\\"This address is not authorized for presale\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberOfMints <= reserved \\r\\n            || msg.sender == _owner, \\r\\n            \\\"Exceeded allowed amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            wlSaleCount + numberOfMints <= WL_LIMIT, \\r\\n            \\\"This would exceed the max number of allowed for wl sale\\\"\\r\\n        );\\r\\n        require(\\r\\n            _tokenIds.current() - 1 + numberOfMints <= MAX_TOKENS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            !isGenesis || _tokenIds.current() - 1 + numberOfMints <= MAX_GENESIS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            getWLPrice(numberOfMints, msg.sender) <= msg.value \\r\\n            || msg.sender == _owner, \\r\\n            \\\"Amount of ether is not enough\\\"\\r\\n        );\\r\\n\\r\\n        uint256 usedSpots = 0;\\r\\n\\r\\n        if (numberOfMints >= _mappingFPSpots[msg.sender]) {\\r\\n            usedSpots = _mappingFPSpots[msg.sender];\\r\\n            _mappingFPSpots[msg.sender] = 0;\\r\\n        } else {\\r\\n            _mappingFPSpots[msg.sender] = _mappingFPSpots[msg.sender] - numberOfMints;\\r\\n        }\\r\\n        if ((numberOfMints > usedSpots) && _mappingFPSpots[msg.sender] == 0) {\\r\\n            _mappingWhiteList[msg.sender] = _mappingWhiteList[msg.sender] - (numberOfMints - usedSpots);\\r\\n        }\\r\\n\\r\\n        wlSaleCount = wlSaleCount + numberOfMints;\\r\\n\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n\\r\\n        for (uint256 i=0; i < numberOfMints; i++) {\\r\\n            _safeMint(msg.sender, newItemId);\\r\\n\\r\\n            _tokenIds.increment();\\r\\n            newItemId = _tokenIds.current();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function mintWhiteListWithDiscount(uint256 numberOfMints, uint256 fpTokenId) \\r\\n    public \\r\\n    payable {\\r\\n        uint256 reserved = _mappingWhiteList[msg.sender] + _mappingFPSpots[msg.sender];\\r\\n        require(\\r\\n            isWhiteListSale(), \\r\\n            \\\"No presale active\\\"\\r\\n        );\\r\\n        require(\\r\\n            reserved > 0 \\r\\n            || msg.sender == _owner, \\r\\n            \\\"This address is not authorized for presale\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberOfMints <= reserved \\r\\n            || msg.sender == _owner, \\r\\n            \\\"Exceeded allowed amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            wlSaleCount + numberOfMints <= WL_LIMIT, \\r\\n            \\\"This would exceed the max number of allowed for wl sale\\\"\\r\\n        );\\r\\n        require(\\r\\n            _tokenIds.current() - 1 + numberOfMints <= MAX_TOKENS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            !isGenesis \\r\\n            || _tokenIds.current() - 1 + numberOfMints <= MAX_GENESIS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n        uint256 discountPrice = getDiscountPriceWL(numberOfMints, fpTokenId, msg.sender);\\r\\n        require(\\r\\n            msg.value >= discountPrice, \\r\\n            \\\"not enough money\\\"\\r\\n        );\\r\\n\\r\\n        uint256 usedSpots = 0;\\r\\n\\r\\n        if (numberOfMints >= _mappingFPSpots[msg.sender]) {\\r\\n            usedSpots = _mappingFPSpots[msg.sender];\\r\\n            _mappingFPSpots[msg.sender] = 0;\\r\\n        } else {\\r\\n            _mappingFPSpots[msg.sender] = _mappingFPSpots[msg.sender] - numberOfMints;\\r\\n        }\\r\\n        if ((numberOfMints > usedSpots) && _mappingFPSpots[msg.sender] == 0) {\\r\\n            _mappingWhiteList[msg.sender] = _mappingWhiteList[msg.sender] - (numberOfMints - usedSpots);\\r\\n        }\\r\\n\\r\\n        wlSaleCount = wlSaleCount + numberOfMints;\\r\\n\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n\\r\\n        for (uint256 i=0; i < numberOfMints; i++) {\\r\\n            _safeMint(msg.sender, newItemId);\\r\\n\\r\\n            _tokenIds.increment();\\r\\n            newItemId = _tokenIds.current();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function mintAllowList(uint256 numberOfMints) public payable {\\r\\n        uint256 reserved = _mappingAllowList[msg.sender];\\r\\n        require(\\r\\n            isAllowListSale(), \\r\\n            \\\"No presale active\\\"\\r\\n        );\\r\\n        //require(hasPartnerToken(msg.sender), \\\"No partner token\\\");\\r\\n        require(\\r\\n            reserved > 0 \\r\\n            || hasPartnerToken(msg.sender) \\r\\n            || hasPartnerTokenStaked(msg.sender)\\r\\n            || hasSemiPartnerToken(msg.sender),\\r\\n            \\\"This address is not authorized for presale\\\"\\r\\n        );\\r\\n        if (reserved == 0 && (hasPartnerToken(msg.sender) || hasPartnerTokenStaked(msg.sender) || hasSemiPartnerToken(msg.sender))) {\\r\\n            if (!_mappingPartnerChecked[msg.sender]) {\\r\\n                _mappingAllowList[msg.sender] = AL_AMOUNT;\\r\\n                _mappingPartnerChecked[msg.sender] = true;\\r\\n            }\\r\\n            reserved = _mappingAllowList[msg.sender];\\r\\n            require(\\r\\n                reserved > 0, \\r\\n                \\\"This address is not authorized for presale\\\"\\r\\n            );\\r\\n        }\\r\\n        require(\\r\\n            numberOfMints <= reserved, \\r\\n            \\\"Exceeded allowed amount\\\"\\r\\n        );\\r\\n        //require(alSaleCount < AL_LIMIT, \\\"This would exceed the max number of allowed for allow sale\\\");\\r\\n        require(\\r\\n            _tokenIds.current() - 1 + numberOfMints <= MAX_TOKENS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            !isGenesis \\r\\n            || _tokenIds.current() - 1 + numberOfMints <= MAX_GENESIS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberOfMints * SALE_PRICE <= msg.value, \\r\\n            \\\"Amount of ether is not enough\\\"\\r\\n        );\\r\\n\\r\\n        _mappingAllowList[msg.sender] = reserved - numberOfMints;\\r\\n\\r\\n        _mappingPartnerChecked[msg.sender] = true;\\r\\n\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n\\r\\n        for (uint256 i=0; i < numberOfMints; i++) {\\r\\n            _safeMint(msg.sender, newItemId);\\r\\n\\r\\n            _tokenIds.increment();\\r\\n            newItemId = _tokenIds.current();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function mintAllowListWithDiscount(uint256 numberOfMints, uint256 fpTokenId) public payable {\\r\\n        uint256 reserved = _mappingAllowList[msg.sender];\\r\\n        require(\\r\\n            isAllowListSale(), \\r\\n            \\\"No presale active\\\"\\r\\n        );\\r\\n        //require(hasPartnerToken(msg.sender), \\\"No partner token\\\");\\r\\n        require(\\r\\n            reserved > 0 \\r\\n            || hasPartnerToken(msg.sender) \\r\\n            || hasPartnerTokenStaked(msg.sender)\\r\\n            || hasSemiPartnerToken(msg.sender), \\r\\n            \\\"This address is not authorized for presale\\\"\\r\\n        );\\r\\n        if (reserved == 0 && (hasPartnerTokenStaked(msg.sender)  || hasPartnerToken(msg.sender) || hasSemiPartnerToken(msg.sender))) {\\r\\n            if (!_mappingPartnerChecked[msg.sender]) {\\r\\n                _mappingAllowList[msg.sender] = AL_AMOUNT;\\r\\n                _mappingPartnerChecked[msg.sender] = true;\\r\\n            }\\r\\n            reserved = _mappingAllowList[msg.sender];\\r\\n            require(\\r\\n                reserved > 0, \\r\\n                \\\"This address is not authorized for presale\\\"\\r\\n            );\\r\\n        }\\r\\n        require(\\r\\n            numberOfMints <= reserved, \\r\\n            \\\"Exceeded allowed amount\\\"\\r\\n        );\\r\\n        //require(alSaleCount < AL_LIMIT, \\\"This would exceed the max number of allowed for allow sale\\\");\\r\\n        require(\\r\\n            _tokenIds.current() - 1 + numberOfMints <= MAX_TOKENS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n        require(\\r\\n            !isGenesis \\r\\n            || _tokenIds.current() - 1 + numberOfMints <= MAX_GENESIS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n\\r\\n        FoundersTokensV2 fp = FoundersTokensV2(fp_address);\\r\\n        require(\\r\\n            msg.sender == fp.ownerOf(fpTokenId), \\r\\n            \\\"not owner\\\"\\r\\n        );\\r\\n        uint256 discountPrice = getDiscountPrice(numberOfMints, fpTokenId);\\r\\n        require(\\r\\n            msg.value >= discountPrice, \\r\\n            \\\"not enough money\\\"\\r\\n        );\\r\\n\\r\\n        _mappingAllowList[msg.sender] = reserved - numberOfMints;\\r\\n\\r\\n        _mappingPartnerChecked[msg.sender] = true;\\r\\n\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n\\r\\n        for (uint256 i=0; i < numberOfMints; i++) {\\r\\n            _safeMint(msg.sender, newItemId);\\r\\n\\r\\n            _tokenIds.increment();\\r\\n            newItemId = _tokenIds.current();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function createItem(uint256 numberOfTokens) public payable returns (uint256) {\\r\\n        require(\\r\\n            (\\r\\n                (block.timestamp >= _publicSaleTime && publicSaleActive) \\r\\n                || msg.sender == _owner\\r\\n            ), \\r\\n            \\\"sale not active\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value >= (SALE_PRICE * numberOfTokens) \\r\\n            || msg.sender == _owner, \\r\\n            \\\"not enough money\\\"\\r\\n        );\\r\\n\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        //_setTokenURI(newItemId, string(abi.encodePacked(\\\"ipfs://\\\", _hash)));\\r\\n        require(\\r\\n            (newItemId - 1 + numberOfTokens) <= MAX_TOKENS, \\r\\n            \\\"collection fully minted\\\"\\r\\n        );\\r\\n        require(\\r\\n            !isGenesis \\r\\n            || _tokenIds.current() - 1 + numberOfTokens <= MAX_GENESIS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i=0; i < numberOfTokens; i++) {\\r\\n\\r\\n            _safeMint(msg.sender, newItemId);\\r\\n\\r\\n            _tokenIds.increment();\\r\\n            newItemId = _tokenIds.current();\\r\\n        }\\r\\n\\r\\n\\r\\n        //payable(address(this)).transfer(SALE_PRICE);\\r\\n\\r\\n        return newItemId;\\r\\n    }\\r\\n\\r\\n    function createItemWithDiscount(uint256 numberOfTokens, uint256 fpTokenId) public payable returns (uint256) {\\r\\n        require(\\r\\n            (\\r\\n                (block.timestamp >= _publicSaleTime && publicSaleActive) \\r\\n                || msg.sender == _owner\\r\\n            ), \\r\\n            \\\"sale not active\\\"\\r\\n        );\\r\\n        FoundersTokensV2 fp = FoundersTokensV2(fp_address);\\r\\n        require(\\r\\n            msg.sender == fp.ownerOf(fpTokenId), \\r\\n            \\\"not owner\\\"\\r\\n        );\\r\\n        uint256 discountPrice = getDiscountPrice(numberOfTokens, fpTokenId);\\r\\n        require(\\r\\n            msg.value >= discountPrice, \\r\\n            \\\"not enough money\\\"\\r\\n        );\\r\\n\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        //_setTokenURI(newItemId, string(abi.encodePacked(\\\"ipfs://\\\", _hash)));\\r\\n        require(\\r\\n            (newItemId - 1 + numberOfTokens) <= MAX_TOKENS, \\r\\n            \\\"collection fully minted\\\"\\r\\n        );\\r\\n        require(\\r\\n            !isGenesis \\r\\n            || _tokenIds.current() - 1 + numberOfTokens <= MAX_GENESIS, \\r\\n            \\\"This would exceed the max number of allowed nft\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i=0; i < numberOfTokens; i++) {\\r\\n\\r\\n            _safeMint(msg.sender, newItemId);\\r\\n\\r\\n            _tokenIds.increment();\\r\\n            newItemId = _tokenIds.current();\\r\\n        }\\r\\n\\r\\n\\r\\n        //payable(address(this)).transfer(SALE_PRICE);\\r\\n\\r\\n        return newItemId;\\r\\n    }\\r\\n\\r\\n\\r\\n    /** Public View methods */\\r\\n\\r\\n    function withdraw() onlyOwner public {\\r\\n        require(\\r\\n            address(this).balance > 0, \\r\\n            \\\"0 balance\\\"\\r\\n        );\\r\\n        payable(_owner).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function getRemainingWLSpots(address wl) \\r\\n    public \\r\\n    view \\r\\n    returns (uint256) {\\r\\n        return _mappingWhiteList[wl];\\r\\n    }\\r\\n\\r\\n    function getRemainingFPSpots(address wl) \\r\\n    public \\r\\n    view \\r\\n    returns (uint256) {\\r\\n        return _mappingFPSpots[wl];\\r\\n    }\\r\\n\\r\\n    function getRemainingAllowListSpots(address wl) \\r\\n    public \\r\\n    view \\r\\n    returns (uint256) {\\r\\n        return _mappingAllowList[wl];\\r\\n    }\\r\\n\\r\\n    function getParterChecked(address wl) \\r\\n    public \\r\\n    view \\r\\n    returns (bool) {\\r\\n        return _mappingPartnerChecked[wl];\\r\\n    }\\r\\n\\r\\n    function getCurrentPrice() \\r\\n    public \\r\\n    view \\r\\n    returns (uint256) {\\r\\n        return SALE_PRICE;\\r\\n    }\\r\\n\\r\\n    function getWLSaleCount() \\r\\n    public \\r\\n    view \\r\\n    returns (uint256) {\\r\\n        return wlSaleCount;\\r\\n    }\\r\\n\\r\\n    function itemsMinted() \\r\\n    public \\r\\n    view \\r\\n    returns(uint) {\\r\\n        return _tokenIds.current() - 1;\\r\\n    }\\r\\n\\r\\n    function ownerBalance() \\r\\n    public \\r\\n    view \\r\\n    returns(uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function isWhiteListSale() \\r\\n    public \\r\\n    view \\r\\n    returns(bool) {\\r\\n        return (block.timestamp >= _wlStartDateTime && block.timestamp <= _wlEndDateTime);\\r\\n    }\\r\\n\\r\\n    function isAllowListSale() \\r\\n    public \\r\\n    view \\r\\n    returns(bool) {\\r\\n        return (block.timestamp >= _alStartDateTime && block.timestamp <= _alEndDateTime);\\r\\n    }\\r\\n\\r\\n    function isPublicSale() \\r\\n    public \\r\\n    view \\r\\n    returns(bool) {\\r\\n        return (block.timestamp >= _publicSaleTime);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FoundersTokensV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n//import \\\"./FoundersTokens.sol\\\";\\r\\n\\r\\n\\r\\ncontract FoundersTokensV2 is ERC721, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIds;\\r\\n\\r\\n    address private _owner;\\r\\n\\r\\n    uint32 private MAX_TOKENS = 3999;\\r\\n\\r\\n    //uint256 SEED_NONCE = 0;\\r\\n\\r\\n    uint256 private SALE_PRICE = 0.08 ether;\\r\\n\\r\\n    uint256 private balance = 0;\\r\\n\\r\\n    bool private isActive = false;\\r\\n    \\r\\n    //bool private REVEAL = false;\\r\\n\\r\\n    string private baseURI = \\\"https://gtsdfp.s3.amazonaws.com/preview/\\\";\\r\\n\\r\\n    mapping(uint256 => Trait) private tokenIdTrait;\\r\\n\\r\\n    //uint arrays\\r\\n    //uint16[][2] TIERS;\\r\\n\\r\\n    uint16[][4] RARITIES; // = [[695, 695, 695, 695], [150, 150, 150, 150], [100, 100, 100, 100], [50, 50, 50, 50], [5, 5, 5, 5]];\\r\\n\\r\\n\\r\\n    struct Trait {\\r\\n        uint16 artType;\\r\\n        uint16 materialType;\\r\\n    }\\r\\n\\r\\n    string[] private artTypeValues = [\\r\\n        'Mean Cat',\\r\\n        'Mouse',\\r\\n        'Marshal',\\r\\n        'Hero'\\r\\n    ];\\r\\n\\r\\n    string[] private materialTypeValues = [\\r\\n        'Paper',\\r\\n        'Bronze',\\r\\n        'Silver',\\r\\n        'Gold',\\r\\n        'Ghostly'\\r\\n    ];\\r\\n\\r\\n    mapping(string=>uint16) artMap; //= {'Mean Cat': 0, 'Mouse': 1, 'Marshal': 2, 'Hero': 3];\\r\\n    \\r\\n    mapping(string=>uint16) materialMap;\\r\\n\\r\\n    address v1Contract;\\r\\n\\r\\n    constructor() ERC721(\\\"Ghost Town Founders Pass V2\\\", \\\"GTFP\\\") public {\\r\\n        _owner = msg.sender;\\r\\n\\r\\n        //v1Contract = _v1Contract;\\r\\n\\r\\n        _tokenIds.increment();\\r\\n\\r\\n        artMap['MeanCat'] = 0;\\r\\n        artMap['Mouse'] = 1;\\r\\n        artMap['Marshal'] = 2;\\r\\n        artMap['Hero'] = 3;\\r\\n\\r\\n        materialMap['Paper'] = 0;\\r\\n        materialMap['Bronze'] = 1;\\r\\n        materialMap['Silver'] = 2;\\r\\n        materialMap['Gold'] = 3;\\r\\n        materialMap['Ghostly'] = 4;\\r\\n\\r\\n        //Declare all the rarity tiers\\r\\n\\r\\n        //Art\\r\\n        //TIERS[0] = [5, 5, 5, 5];//TIERS[0] = [1000, 1000, 1000, 1000]; // Mean Cat, MM, FM, Landscape\\r\\n        //material\\r\\n        //TIERS[1] = [10, 4, 3, 2, 1]; // paper, bronze, silver, gold, ghostly\\r\\n\\r\\n        //RARITIES[0] = [695, 695, 695, 695]; //, [150, 150, 150, 150], [100, 100, 100, 100], [50, 50, 50, 50], [5, 5, 5, 5]];\\r\\n        //RARITIES[1] = [150, 150, 150, 150];\\r\\n        //RARITIES[2] = [100, 100, 100, 100];\\r\\n        //RARITIES[3] = [50, 50, 50, 50];\\r\\n        //RARITIES[4] = [5, 5, 5, 5];\\r\\n\\r\\n        RARITIES[0] = [695, 150, 100, 50, 5]; // rotating creates a better overall random distribution\\r\\n        RARITIES[1] = [695, 150, 100, 50, 5];\\r\\n        RARITIES[2] = [695, 150, 100, 50, 5];\\r\\n        RARITIES[3] = [695, 150, 100, 50, 5];\\r\\n        //RARITIES = _RARITIES;\\r\\n    }\\r\\n\\r\\n\\r\\n    function tokenURI(uint256 tokenId) \\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n    {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        //string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        //string(abi.encodePacked(\\\"ipfs://\\\"));\\r\\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenId), \\\".json\\\"));\\r\\n    }\\r\\n\\r\\n    function activate(bool active) external onlyOwner {\\r\\n        isActive = active;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _uri) external onlyOwner {\\r\\n        baseURI = _uri;\\r\\n    }\\r\\n\\r\\n    /*function setReveal(bool _reveal) external onlyOwner {\\r\\n        REVEAL = _reveal;\\r\\n    }*/\\r\\n\\r\\n    function changePrice(uint256 _salePrice) external onlyOwner {\\r\\n        SALE_PRICE = _salePrice;\\r\\n    }\\r\\n\\r\\n    function mintV1(uint256 numberOfMints, string[] calldata artList, string[] calldata matList, address[] calldata addrList) public {\\r\\n\\r\\n        require(msg.sender == _owner, \\\"not owner\\\");\\r\\n\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n\\r\\n        require((newItemId - 1 + numberOfMints <= 247), \\\"v1 limit exceeded\\\");\\r\\n\\r\\n        //FoundersTokens fpV1 = FoundersTokens(v1Contract);\\r\\n\\r\\n        for (uint256 i=0; i < numberOfMints; i++) {\\r\\n\\r\\n            //(string memory artType, string memory materialType) = fpV1.getTraits(newItemId);\\r\\n\\r\\n            //require(RARITIES[artMap[artType]][materialMap[materialType]], \\\"no rare\\\");\\r\\n\\r\\n            RARITIES[artMap[artList[i]]][materialMap[matList[i]]] -= 1;\\r\\n\\r\\n            //tokenIdTrait[newItemId] = createTraits(newItemId, addresses[i]);\\r\\n            tokenIdTrait[newItemId] = Trait({artType: artMap[artList[i]], materialType: materialMap[matList[i]]});\\r\\n\\r\\n            _safeMint(addrList[i], newItemId);\\r\\n\\r\\n            _tokenIds.increment();\\r\\n            newItemId = _tokenIds.current();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function createItem(uint256 numberOfTokens) public payable returns (uint256) {\\r\\n        //require(((block.timestamp >= _startDateTime && block.timestamp < _endDateTime  && !isWhiteListSale) || msg.sender == _owner), \\\"sale not active\\\");\\r\\n        require(isActive || msg.sender == _owner, \\\"sale not active\\\");\\r\\n        require(msg.value >= SALE_PRICE || msg.sender == _owner, \\\"not enough money\\\");\\r\\n        //require(((mintTracker[msg.sender] + numberOfTokens) <= MAXQ || msg.sender == _owner), \\\"ALready minted during sale\\\");\\r\\n\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        //_setTokenURI(newItemId, string(abi.encodePacked(\\\"ipfs://\\\", _hash)));\\r\\n        require(newItemId > 247, \\\"need to transfer v1\\\");\\r\\n        require((newItemId - 1 + numberOfTokens) <= MAX_TOKENS, \\\"collection fully minted\\\");\\r\\n\\r\\n        //mintTracker[msg.sender] = mintTracker[msg.sender] + numberOfTokens;\\r\\n\\r\\n        for (uint256 i=0; i < numberOfTokens; i++) {\\r\\n            tokenIdTrait[newItemId] = createTraits(newItemId, msg.sender);\\r\\n\\r\\n            _safeMint(msg.sender, newItemId);\\r\\n\\r\\n            _tokenIds.increment();\\r\\n            newItemId = _tokenIds.current();\\r\\n        }\\r\\n\\r\\n\\r\\n        //payable(address(this)).transfer(SALE_PRICE);\\r\\n\\r\\n        return newItemId;\\r\\n    }\\r\\n\\r\\n    function weightedRarityGenerator(uint16 pseudoRandomNumber) private returns (uint8, uint8) {\\r\\n        uint16 lowerBound = 0;\\r\\n\\r\\n        for (uint8 i = 0; i < RARITIES.length; i++) {\\r\\n            for (uint8 j = 0; j < RARITIES[i].length; j++) {\\r\\n                uint16 weight = RARITIES[i][j];\\r\\n\\r\\n                if (pseudoRandomNumber >= lowerBound && pseudoRandomNumber < lowerBound + weight) {\\r\\n                    RARITIES[i][j] -= 1;\\r\\n                    return (i, j);\\r\\n                }\\r\\n\\r\\n                lowerBound = lowerBound + weight;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert();\\r\\n    }\\r\\n\\r\\n    function createTraits(uint256 tokenId, address _msgSender) private returns (Trait memory) {\\r\\n        uint256 pseudoRandomBase = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), _msgSender, tokenId)));\\r\\n\\r\\n        uint256 tokensMinted = itemsMinted();\\r\\n        (uint8 a, uint8 m) = weightedRarityGenerator(uint16(uint16(pseudoRandomBase >> 1) % (1 + MAX_TOKENS - tokensMinted)));\\r\\n        return\\r\\n            Trait({\\r\\n                artType: a,\\r\\n                materialType: m\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function withdraw() onlyOwner public {\\r\\n        require(address(this).balance > 0, \\\"0 balance\\\");\\r\\n        payable(_owner).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function getTraits(uint256 tokenId) public view returns (string memory artType, string memory materialType) {\\r\\n        //require(REVEAL, \\\"reveal not set yet\\\");\\r\\n        Trait memory trait = tokenIdTrait[tokenId];\\r\\n        artType = artTypeValues[trait.artType];\\r\\n        materialType = materialTypeValues[trait.materialType];\\r\\n    }\\r\\n\\r\\n\\r\\n    function itemsMinted() public view returns(uint) {\\r\\n        return _tokenIds.current() - 1;\\r\\n    }\\r\\n\\r\\n    function ownerBalance() public view returns(uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/StakingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface StakingContract {\\r\\n    function depositsOf(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory);\\r\\n}\\r\\n\\r\\n/*\\r\\ncontract CollabFaker2 {\\r\\n    StakingContract public stakingContract =\\r\\n        StakingContract(0x8D8A3e7EAdA138523c2dcB78FDbbF51A63A3faAD);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\r\\n        return stakingContract.depositsOf(owner).length;\\r\\n    }\\r\\n}*/\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeALAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeFPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"changeWLLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"createItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpTokenId\",\"type\":\"uint256\"}],\"name\":\"createItemWithDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wlStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wlEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicStartTime\",\"type\":\"uint256\"}],\"name\":\"createMintEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisOffsetSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpTokenId\",\"type\":\"uint256\"}],\"name\":\"getDiscountPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getDiscountPriceWL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wl\",\"type\":\"address\"}],\"name\":\"getParterChecked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wl\",\"type\":\"address\"}],\"name\":\"getRemainingAllowListSpots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wl\",\"type\":\"address\"}],\"name\":\"getRemainingFPSpots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wl\",\"type\":\"address\"}],\"name\":\"getRemainingWLSpots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWLPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWLSaleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasPartnerToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasPartnerTokenStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasSemiPartnerToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllowListSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhiteListSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"}],\"name\":\"mintAllowList\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpTokenId\",\"type\":\"uint256\"}],\"name\":\"mintAllowListWithDiscount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"}],\"name\":\"mintWhiteList\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fpTokenId\",\"type\":\"uint256\"}],\"name\":\"mintWhiteListWithDiscount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOffsetSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offsetGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offsetNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"allowListAddress\",\"type\":\"address[]\"}],\"name\":\"setAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFPList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"genesis\",\"type\":\"bool\"}],\"name\":\"setGenisis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setPublicSaleActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"whiteListAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StarFallVillage", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d8f4f61001256def1908e0ec724c541b38b8ec280000000000000000000000000000000000000000000000000000000000002710", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}