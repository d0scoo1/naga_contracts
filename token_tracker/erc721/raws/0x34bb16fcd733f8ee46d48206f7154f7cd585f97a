{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Heroes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./Traits.sol\\\";\\nimport \\\"./Traits2.sol\\\";\\n\\ncontract Heroes is ERC721Enumerable, Ownable, ReentrancyGuard {\\n  using ECDSA for bytes32;\\n\\n  uint256 PRICE_PER_TOKEN = 0.08 ether;\\n  uint256 MAX_SUPPLY = 3333;\\n  address SIGNER;\\n  uint256 currentId;\\n  string BASE_URI;\\n\\n  mapping(uint256 => uint256) public tokenIdToSeed;\\n\\n  HeroTraits traitStorage;\\n  HeroTraits2 traitStorage2;\\n\\n  constructor(\\n    string memory baseUri,\\n    string memory name,\\n    address traits,\\n    address traits2\\n  ) ERC721(name, \\\"HERO\\\") {\\n    BASE_URI = baseUri;\\n    traitStorage = HeroTraits(traits);\\n    traitStorage2 = HeroTraits2(traits2);\\n  }\\n\\n  function withdraw(address sendTo) public onlyOwner {\\n    uint256 balance = address(this).balance;\\n    payable(sendTo).transfer(balance);\\n  }\\n\\n  struct Traits {\\n    uint256 race;\\n    uint256 pants;\\n    uint256 weapon;\\n    uint256 shield;\\n    uint256 clothes;\\n    uint256 head;\\n    uint256 shoes;\\n    uint256 hair;\\n    uint256 bg;\\n    uint256 magic;\\n    uint256 strength;\\n    uint256 intelligence;\\n    uint256 stamina;\\n    uint256 dexterity;\\n    uint256 creativity;\\n  }\\n\\n  function getSeed(uint256 tokenId) public view returns (uint256) {\\n    return tokenIdToSeed[tokenId];\\n  }\\n\\n  // get trait modulo 10 and then have a percentage\\n  function _getRandomMod(uint256 rand, uint256 chance)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((rand % 1000) + 1) <= chance;\\n  }\\n\\n  function genTraits(uint256 tokenId) public view returns (Traits memory) {\\n    uint256 seed = getSeed(tokenId);\\n\\n    Traits memory traits = Traits({\\n      race: uint256(keccak256(abi.encode(seed, 1))),\\n      pants: uint256(keccak256(abi.encode(seed, 2))),\\n      weapon: uint256(keccak256(abi.encode(seed, 3))),\\n      shield: uint256(keccak256(abi.encode(seed, 4))),\\n      clothes: uint256(keccak256(abi.encode(seed, 5))),\\n      head: uint256(keccak256(abi.encode(seed, 6))),\\n      shoes: uint256(keccak256(abi.encode(seed, 7))),\\n      hair: uint256(keccak256(abi.encode(seed, 8))),\\n      bg: uint256(keccak256(abi.encode(seed, 9))),\\n      magic: uint256(keccak256(abi.encode(seed, 10))),\\n      strength: uint256(keccak256(abi.encode(seed, 11))),\\n      intelligence: uint256(keccak256(abi.encode(seed, 12))),\\n      stamina: uint256(keccak256(abi.encode(seed, 13))),\\n      dexterity: uint256(keccak256(abi.encode(seed, 14))),\\n      creativity: uint256(keccak256(abi.encode(seed, 15)))\\n    });\\n\\n    uint256 head = _getRandomMod(traits.head, 500)\\n      ? traits.head % traitStorage.getHeadLength()\\n      : 0;\\n\\n    bool isHood = head >= 1 && head <= 5;\\n\\n    // default is human1\\n    uint256 race = 0;\\n    bool isHuman1 = _getRandomMod(traits.race, 500);\\n    bool isHuman2 = _getRandomMod(traits.race, 340);\\n    bool isHuman3 = _getRandomMod(traits.race, 180);\\n    bool isZombie = _getRandomMod(traits.race, 600);\\n    bool isSkeleton = _getRandomMod(traits.race, 700);\\n    bool isWizard = _getRandomMod(traits.race, 800);\\n    bool isGhost = _getRandomMod(traits.race, 900);\\n    bool isFrog = _getRandomMod(traits.race, 960);\\n    bool isPizza = _getRandomMod(traits.race, 970);\\n\\n    if (isHuman3) {\\n      race = 2;\\n    } else if (isHuman2) {\\n      race = 1;\\n    } else if (isHuman1) {\\n      race = 0;\\n    } else if (isZombie) {\\n      race = 3;\\n    } else if (isSkeleton) {\\n      race = 4;\\n    } else if (isWizard) {\\n      race = 5;\\n    } else if (isGhost) {\\n      race = 6;\\n    } else if (isFrog) {\\n      race = 7;\\n    } else if (isPizza) {\\n      race = 8;\\n      // monkies\\n    } else if (_getRandomMod(traits.race, 972)) {\\n      race = 9;\\n    } else if (_getRandomMod(traits.race, 974)) {\\n      race = 10;\\n    } else if (_getRandomMod(traits.race, 976)) {\\n      race = 11;\\n    } else if (_getRandomMod(traits.race, 978)) {\\n      race = 12;\\n    } else if (_getRandomMod(traits.race, 980)) {\\n      race = 13;\\n    } else if (_getRandomMod(traits.race, 982)) {\\n      race = 14;\\n    } else if (_getRandomMod(traits.race, 984)) {\\n      race = 15;\\n    } else if (_getRandomMod(traits.race, 986)) {\\n      race = 16;\\n    } else if (_getRandomMod(traits.race, 988)) {\\n      race = 17;\\n    } else if (_getRandomMod(traits.race, 990)) {\\n      race = 18;\\n    } else if (_getRandomMod(traits.race, 993)) {\\n      race = 19;\\n    } else if (_getRandomMod(traits.race, 997)) {\\n      race = 20;\\n    } else if (_getRandomMod(traits.race, 1000)) {\\n      race = 21;\\n    }\\n\\n    return\\n      Traits({\\n        race: race,\\n        weapon: _getRandomMod(traits.weapon, 800)\\n          ? traits.weapon % traitStorage.getWeaponsLength()\\n          : 0,\\n        clothes: traits.clothes % traitStorage.getClothesLength(),\\n        shield: _getRandomMod(traits.shield, 100)\\n          ? traits.shield % traitStorage.getShieldsLength()\\n          : 0,\\n        head: head,\\n        pants: traits.pants % traitStorage.getPantsLength(),\\n        bg: traits.bg % traitStorage.getBgLength(),\\n        hair: isHood ? 0 : _getRandomMod(traits.weapon, 950)\\n          ? traits.hair % traitStorage2.getHairLength()\\n          : 0,\\n        shoes: traits.shoes % traitStorage.getShoesLength(),\\n        magic: (traits.magic % 1000) + 1,\\n        strength: (traits.strength % 1000) + 1,\\n        intelligence: (traits.intelligence % 1000) + 1,\\n        stamina: (traits.stamina % 1000) + 1,\\n        dexterity: (traits.dexterity % 1000) + 1,\\n        creativity: (traits.creativity % 1000) + 1\\n      });\\n  }\\n\\n  function genSvg(uint256 tokenId) public view returns (string memory) {\\n    require(_exists(tokenId), \\\"Token ID does not exist\\\");\\n\\n    Traits memory traits = genTraits(tokenId);\\n\\n    string[9] memory parts;\\n\\n    // bg\\n    // shadow\\n    // base\\n    // shoes\\n    // pants\\n    // clothes\\n    // hair\\n    // hats\\n    // shield\\n    // weapons\\n\\n    // bg, shadow\\n    parts[0] = string(\\n      abi.encodePacked(\\n        '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"',\\n        traitStorage.getBg()[traits.bg],\\n        '\\\" />',\\n        '<image width=\\\"100%\\\" height=\\\"100%\\\" href=\\\"',\\n        _baseURI(),\\n        traitStorage.getShadow(),\\n        '\\\" />'\\n      )\\n    );\\n\\n    // race\\n    parts[1] = string(\\n      abi.encodePacked(\\n        '<g transform=\\\"\\\"><image width=\\\"100%\\\" height=\\\"100%\\\" href=\\\"',\\n        _baseURI(),\\n        traitStorage.getRace()[traits.race][1],\\n        '\\\" />'\\n      )\\n    );\\n\\n    // shoes\\n    parts[2] = traits.shoes == 0\\n      ? \\\"\\\"\\n      : string(\\n        abi.encodePacked(\\n          '<image width=\\\"100%\\\" height=\\\"100%\\\" href=\\\"',\\n          _baseURI(),\\n          traitStorage.getShoes()[traits.shoes][1],\\n          '\\\" />'\\n        )\\n      );\\n\\n    // pants\\n    parts[3] = string(\\n      abi.encodePacked(\\n        '<image width=\\\"100%\\\" height=\\\"100%\\\" href=\\\"',\\n        _baseURI(),\\n        traitStorage.getPants()[traits.pants][1],\\n        '\\\" />'\\n      )\\n    );\\n\\n    // clothes\\n    parts[4] = traits.clothes == 0\\n      ? \\\"\\\"\\n      : string(\\n        abi.encodePacked(\\n          '<image width=\\\"100%\\\" height=\\\"100%\\\" href=\\\"',\\n          _baseURI(),\\n          traitStorage.getClothes()[traits.clothes][1],\\n          '\\\" />'\\n        )\\n      );\\n\\n    parts[5] = traits.hair == 0\\n      ? \\\"\\\"\\n      : string(\\n        abi.encodePacked(\\n          '<image width=\\\"100%\\\" height=\\\"100%\\\" href=\\\"',\\n          _baseURI(),\\n          traitStorage2.getHair()[traits.hair][1],\\n          '\\\" />'\\n        )\\n      );\\n\\n    // hats\\n    parts[6] = traits.head == 0\\n      ? \\\"\\\"\\n      : string(\\n        abi.encodePacked(\\n          '<image width=\\\"100%\\\" height=\\\"100%\\\" href=\\\"',\\n          _baseURI(),\\n          traitStorage.getHead()[traits.head][1],\\n          '\\\" />'\\n        )\\n      );\\n\\n    // shield\\n    parts[7] = traits.shield == 0\\n      ? \\\"\\\"\\n      : string(\\n        abi.encodePacked(\\n          '<image width=\\\"100%\\\" height=\\\"100%\\\" href=\\\"',\\n          _baseURI(),\\n          traitStorage.getShields()[traits.shield][1],\\n          '\\\" />'\\n        )\\n      );\\n\\n    // weapon\\n    parts[8] = traits.weapon == 0\\n      ? \\\"\\\"\\n      : string(\\n        abi.encodePacked(\\n          '<image width=\\\"100%\\\" height=\\\"100%\\\" href=\\\"',\\n          _baseURI(),\\n          traitStorage.getWeapons()[traits.weapon][1],\\n          '\\\" />'\\n        )\\n      );\\n\\n    string memory svg = string(\\n      abi.encodePacked(\\n        '<svg version=\\\"1.1\\\" viewBox=\\\"0 0 800 800\\\" width=\\\"800\\\" height=\\\"800\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n        parts[0],\\n        parts[1],\\n        parts[2],\\n        parts[3],\\n        parts[4],\\n        parts[5],\\n        parts[6],\\n        parts[7],\\n        parts[8],\\n        \\\"</g></svg>\\\"\\n      )\\n    );\\n\\n    return svg;\\n  }\\n\\n  function getSeedPart(uint256 tokenId, uint256 num)\\n    public\\n    view\\n    returns (uint16)\\n  {\\n    return uint16(getSeed(tokenId) >> num);\\n  }\\n\\n  function setBaseUri(string memory baseUri) public onlyOwner {\\n    BASE_URI = baseUri;\\n  }\\n\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return BASE_URI;\\n  }\\n\\n  string DESCRIPTION;\\n\\n  function updateDescription(string memory d) public onlyOwner {\\n    DESCRIPTION = d;\\n  }\\n\\n  function uintToStr(uint256 _i)\\n    internal\\n    pure\\n    returns (string memory _uintAsString)\\n  {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function updateSigner(address signer) public onlyOwner {\\n    SIGNER = signer;\\n  }\\n\\n  function _genOptionalTraits(Traits memory traits)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    // 0 weapon\\n    // 1 shield\\n    // 2 head\\n    // 3 hair\\n    // 4 clothes\\n    // 5 shoes\\n    string[6] memory parts;\\n\\n    if (traits.weapon != 0) {\\n      parts[0] = string(\\n        abi.encodePacked(\\n          ',{\\\"trait_type\\\":\\\"Weapon\\\",\\\"value\\\":\\\"',\\n          traitStorage.getWeapons()[traits.weapon][0],\\n          '\\\"}'\\n        )\\n      );\\n    }\\n\\n    if (traits.shield != 0) {\\n      parts[1] = string(\\n        abi.encodePacked(\\n          ',{\\\"trait_type\\\":\\\"Shield\\\",\\\"value\\\":\\\"',\\n          traitStorage.getShields()[traits.shield][0],\\n          '\\\"}'\\n        )\\n      );\\n    }\\n\\n    if (traits.head != 0) {\\n      parts[2] = string(\\n        abi.encodePacked(\\n          ',{\\\"trait_type\\\":\\\"Head\\\",\\\"value\\\":\\\"',\\n          traitStorage.getHead()[traits.head][0],\\n          '\\\"}'\\n        )\\n      );\\n    }\\n\\n    if (traits.hair != 0) {\\n      parts[3] = string(\\n        abi.encodePacked(\\n          ',{\\\"trait_type\\\":\\\"Hair\\\",\\\"value\\\":\\\"',\\n          traitStorage2.getHair()[traits.hair][0],\\n          '\\\"}'\\n        )\\n      );\\n    }\\n\\n    if (traits.clothes != 0) {\\n      parts[4] = string(\\n        abi.encodePacked(\\n          ',{\\\"trait_type\\\":\\\"Clothes\\\",\\\"value\\\":\\\"',\\n          traitStorage.getClothes()[traits.clothes][0],\\n          '\\\"}'\\n        )\\n      );\\n    }\\n\\n    if (traits.shoes != 0) {\\n      parts[5] = string(\\n        abi.encodePacked(\\n          ',{\\\"trait_type\\\":\\\"Shoes\\\",\\\"value\\\":\\\"',\\n          traitStorage.getShoes()[traits.shoes][0],\\n          '\\\"}'\\n        )\\n      );\\n    }\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          parts[0],\\n          parts[1],\\n          parts[2],\\n          parts[3],\\n          parts[4],\\n          parts[5]\\n        )\\n      );\\n  }\\n\\n  function _genTraitString(uint256 tokenId)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    Traits memory traits = genTraits(tokenId);\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          '\\\"attributes\\\": [',\\n          '{\\\"trait_type\\\":\\\"Race\\\",\\\"value\\\":\\\"',\\n          traitStorage.getRace()[traits.race][0],\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Pants\\\",\\\"value\\\":\\\"',\\n          traitStorage.getPants()[traits.pants][0],\\n          '\\\"}',\\n          _genOptionalTraits(traits)\\n        )\\n      );\\n  }\\n\\n  function _genStatsString(uint256 tokenId)\\n    internal\\n    view\\n    returns (string memory)\\n  {\\n    Traits memory traits = genTraits(tokenId);\\n    string[8] memory parts;\\n    parts[0] = ',{\\\"trait_type\\\":\\\"Magic\\\",\\\"value\\\":';\\n    parts[1] = uintToStr(traits.magic);\\n    parts[2] = '},{\\\"trait_type\\\":\\\"Strength\\\",\\\"value\\\":';\\n    parts[3] = uintToStr(traits.strength);\\n\\n    parts[4] = '},{\\\"trait_type\\\":\\\"Intelligence\\\",\\\"value\\\":';\\n    parts[5] = uintToStr(traits.intelligence);\\n    parts[6] = '},{\\\"trait_type\\\":\\\"Stamina\\\",\\\"value\\\":';\\n    parts[7] = string(\\n      abi.encodePacked(\\n        uintToStr(traits.stamina),\\n        '},{\\\"trait_type\\\":\\\"Dexterity\\\",\\\"value\\\":',\\n        uintToStr(traits.dexterity),\\n        '},{\\\"trait_type\\\":\\\"Creativity\\\",\\\"value\\\":',\\n        uintToStr(traits.creativity),\\n        \\\"}\\\"\\n      )\\n    );\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          parts[0],\\n          parts[1],\\n          parts[2],\\n          parts[3],\\n          parts[4],\\n          parts[5],\\n          parts[6],\\n          parts[7]\\n        )\\n      );\\n  }\\n\\n  bool public CDN_ENABLED = false;\\n  string public CDN_PREFIX = \\\"\\\";\\n\\n  // Smart contract creates inline SVG, however due to browser security\\n  // protocols SVGs may not show up in NFT marketplaces. CDN is a back up\\n  // Smart contract is source of truth for all traits and stats.\\n  function enableCdn(bool value, string memory prefix) public onlyOwner {\\n    CDN_ENABLED = value;\\n    CDN_PREFIX = prefix;\\n  }\\n\\n  function getJsonString(uint256 tokenId) public view returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '{\\\"name\\\": \\\"Hero #',\\n          uintToStr(tokenId),\\n          '\\\", \\\"description\\\": \\\"',\\n          DESCRIPTION,\\n          '\\\",',\\n          '\\\"image\\\": \\\"data:image/svg+xml;base64,',\\n          Base64.encode(bytes(genSvg(tokenId))),\\n          '\\\",',\\n          _genTraitString(tokenId),\\n          _genStatsString(tokenId),\\n          \\\"]}\\\"\\n        )\\n      );\\n  }\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    require(_exists(tokenId), \\\"Token ID does not exist\\\");\\n\\n    if (CDN_ENABLED) {\\n      return string(abi.encodePacked(CDN_PREFIX, uintToStr(tokenId)));\\n    }\\n\\n    if (tokenId >= 10000) {\\n      return string(abi.encodePacked(_baseURI(), customs[tokenId].uriHash));\\n    }\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(bytes(getJsonString(tokenId)))\\n        )\\n      );\\n  }\\n\\n  function _mint(uint256 amount) internal {\\n    for (uint256 i = 0; i < amount; i++) {\\n      uint256 tokenId = ++currentId;\\n      _safeMint(msg.sender, tokenId);\\n      tokenIdToSeed[tokenId] = uint256(\\n        keccak256(\\n          abi.encodePacked(tokenId, blockhash(block.number - 1), msg.sender)\\n        )\\n      );\\n    }\\n  }\\n\\n  function mint(uint256 amount) public payable nonReentrant {\\n    require(amount <= 10, \\\"Can only mint up to 10\\\");\\n    require(currentId + amount <= MAX_SUPPLY, \\\"Not allowed\\\");\\n    require(currentId < MAX_SUPPLY, \\\"All minted\\\");\\n    require(amount * PRICE_PER_TOKEN == msg.value, \\\"Invalid value\\\");\\n    _mint(amount);\\n  }\\n\\n  uint256 merlinMinted = 0;\\n\\n  function merlinMint(uint256 amount) public payable onlyOwner {\\n    require(merlinMinted + amount <= 100, \\\"Merlin can only summon 100 heroes\\\");\\n    require(currentId < MAX_SUPPLY, \\\"All minted\\\");\\n    merlinMinted += amount;\\n    _mint(amount);\\n  }\\n\\n  uint256 customMintId = 10000;\\n  struct Custom {\\n    bool exists;\\n    string uriHash;\\n  }\\n  mapping(uint256 => Custom) customs;\\n\\n  function mintCustom(string memory tokenUriHash, address to) public onlyOwner {\\n    customs[customMintId] = Custom({ exists: true, uriHash: tokenUriHash });\\n    _safeMint(to, customMintId);\\n    customMintId += 1;\\n  }\\n}\\n\\nlibrary Base64 {\\n  bytes internal constant TABLE =\\n    \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(\\n          out,\\n          and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\n        )\\n        out := shl(8, out)\\n        out := add(\\n          out,\\n          and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\n        )\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/Traits2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ncontract HeroTraits2 {\\n  function getHairLength() public pure returns (uint256) {\\n    return getHair().length;\\n  }\\n\\n  function getHair() public pure returns (string[2][109] memory) {\\n    return [\\n      [\\\"\\\", \\\"\\\"],\\n      [\\\"Hair 1\\\", \\\"QmVR4Agrosv1FUsYUL3VazA6U6iKP8TsjpnSt9i8b3rWo6\\\"],\\n      [\\\"Hair 2\\\", \\\"QmdzHAR6kvwzNtTFc4K7Si3JYu2HK7nMWjJHYqjGg8UGey\\\"],\\n      [\\\"Hair 3\\\", \\\"QmbSETVbdXvxYzfnmWqje7JhrTyzuBs78cmNtkDMjRX8UD\\\"],\\n      [\\\"Hair 4\\\", \\\"QmTq6YusqEtE49K2FskYhhhkYudXG3eycfuFEtX93CkQqt\\\"],\\n      [\\\"Hair 5\\\", \\\"QmY1MUML2xeQrjJMtGqamMaJNmbNpsYrpj7SimfgPu6kMG\\\"],\\n      [\\\"Hair 6\\\", \\\"QmSuu6bKH49g8PLdiKWAeUeZBcirVvp6FtVRa6a3AVGCD8\\\"],\\n      [\\\"Hair 7\\\", \\\"QmSfCFqsKsC5YfEfhGuvNWUfppEQtc97kEg2DaMAbk7P1T\\\"],\\n      [\\\"Hair 8\\\", \\\"QmbgFJyFvVoNV6GwH7JVmCBXUJRmth4sZA6eCHvGD9Ayst\\\"],\\n      [\\\"Hair 9\\\", \\\"QmaNm9SkL13mBbztEGEAYLhGFD9PVuVNgrNE1wEQgdnCYb\\\"],\\n      [\\\"Hair 10\\\", \\\"QmcSHYeCh3TDxLuUHZeL1bXpPzf3s1KP2zDkw74b55vgx9\\\"],\\n      [\\\"Hair 11\\\", \\\"QmVeJPSR6CxAXUyfqXxijxHxVNSVPu4bXL12C4X2tt2JpM\\\"],\\n      [\\\"Hair 12\\\", \\\"QmV94RyUbvYZZRRh9R5pzYgRf1Lfd5qy69J6qgSShYpfAB\\\"],\\n      [\\\"Hair 13\\\", \\\"QmNXikU6eU6xCkLkR3apued1gbU2r1upFk3eyWvj9jXxuZ\\\"],\\n      [\\\"Hair 14\\\", \\\"QmZTTegdX9hhnQy3HqTMpBfMzkWKdodm88hnzAij3ATqEq\\\"],\\n      [\\\"Hair 15\\\", \\\"QmaAieRfrDZVzzSUWbbNoJH4JS3hkdy2ziHQqH5LYyUrWk\\\"],\\n      [\\\"Hair 16\\\", \\\"QmQPvYaQfVZv8NJgUyyVRejeab6GAwdVzQEgznDejvsWGS\\\"],\\n      [\\\"Hair 17\\\", \\\"QmYMB68YQtgUptCuUZFUjkY8z3ACVXQLbYQ3EtjnGF9EWQ\\\"],\\n      [\\\"Hair 18\\\", \\\"QmR6HC7R3VKK9o6FUMsGDdH4QW2XRXijZxDRtt2eDQ4cfq\\\"],\\n      [\\\"Hair 19\\\", \\\"QmNT4AyAo3Wo5EnToCqGdMqeEEY27YWY2945K5LW8FyCUV\\\"],\\n      [\\\"Hair 20\\\", \\\"Qmb8skGpSyiu8qMstcpz1t58a437en8UKEysiFpqmRanCC\\\"],\\n      [\\\"Hair 21\\\", \\\"QmeGczhaEDt4XGJPU85yEqpQTu6P6uXzZ3nYkF4W9bxsxp\\\"],\\n      [\\\"Hair 22\\\", \\\"Qma3aqjuJFiezXRcJV7DmJJ4Lqx17TGuXrEu6ceRgKfs8W\\\"],\\n      [\\\"Hair 23\\\", \\\"QmTowaiJ9TYSomNVd5En1UCQfmtbMW9zxbkxi8JXHAizGu\\\"],\\n      [\\\"Hair 24\\\", \\\"QmZahpiQvGR9z5VvNtTVe8htiGPRdyiRBJs5btoMattmMx\\\"],\\n      [\\\"Hair 25\\\", \\\"QmTifJ8MF1bA1BCoSkCcWNkVEgs5rTzgcHEVJVJgN2f63q\\\"],\\n      [\\\"Hair 26\\\", \\\"QmYbqFoGv8g3CTnvYJiL9vUZCki1XjkRt1NGND1DZse9XP\\\"],\\n      [\\\"Hair 27\\\", \\\"QmUwuPGpuSqiGFz5S4SmEKNs7BVB4eUFtCbapu7UZqWMVb\\\"],\\n      [\\\"Hair 28\\\", \\\"QmegmyWNx6jxD7Hubrsyt7s8yPBavPSp9DoV87tmZUw8oM\\\"],\\n      [\\\"Hair 29\\\", \\\"QmShV3vwUjgxViYMbL8tAsei4QXE9oCT55hNeYHJPN46Hv\\\"],\\n      [\\\"Hair 30\\\", \\\"QmR8NbJzAmM4idNC63se3iz5ovCW3xQ8Qr7io86hHKEDbd\\\"],\\n      [\\\"Hair 31\\\", \\\"QmRgqEYE8KKkvbVW6L9xtZM4BTWkQqoyArQrN5PKWbj4fC\\\"],\\n      [\\\"Hair 32\\\", \\\"QmTohKmQXEYp3EGBX9ux7nJhGnm1ceUhJCFajMfSqUvUF5\\\"],\\n      [\\\"Hair 33\\\", \\\"QmWJvgkV5kGAWqoeUAwt6cuMiSdi3R52k7bs53vXnEHVNW\\\"],\\n      [\\\"Hair 34\\\", \\\"QmbLHLXW6BwnSoWdrHqLGwR9kqLSQBQLDp9cJMdyM8T7Ti\\\"],\\n      [\\\"Hair 35\\\", \\\"QmNVxTU8MpPE4xzx4DS3rBMcQ4dn65Ya1CVL7GL17HmB45\\\"],\\n      [\\\"Hair 36\\\", \\\"QmarD1Z6brfx1ABbQdejCK844D6sdCx9TV5K3sfJZVea8x\\\"],\\n      [\\\"Hair 37\\\", \\\"Qme3QWm2Z2LDorfFQ129mHfHFjhdw8HPpKphdDowmmW1t7\\\"],\\n      [\\\"Hair 38\\\", \\\"QmZGsagUe78rk3AiryQ5qoS8rH3jiEGQnQc5iSuEjCd1Ud\\\"],\\n      [\\\"Hair 39\\\", \\\"QmSfVDqsHqbQtHPUk7U7iKmybHia4dp2vxCNfjroWhkXqw\\\"],\\n      [\\\"Hair 40\\\", \\\"QmdjShCw7LiKEDpYUPW3FHpNiuepiZEAFb7otR9SCorFX5\\\"],\\n      [\\\"Hair 41\\\", \\\"QmTPv8esjqKb17fPTf3kpdEbbXcH591wzTeVFBXeKVqJCd\\\"],\\n      [\\\"Hair 42\\\", \\\"Qmd43EPyY6g6pXXDpCAxyMjtR5VHbrK7zLarTyPjd4K6Cw\\\"],\\n      [\\\"Hair 43\\\", \\\"QmYD2WyJGqe7SKwKxe5drmGhzxN6741NfGgQhX8ASBG7We\\\"],\\n      [\\\"Hair 44\\\", \\\"QmeXappknixDZ95Bw64ifeTuKYAdmLrEtu6cdsVJ395Lps\\\"],\\n      [\\\"Hair 45\\\", \\\"QmNQcRV79PHPAEue75PcjE6DuQLUeoNTEbdkKMhdvgNmT6\\\"],\\n      [\\\"Hair 46\\\", \\\"QmfKHZecgh4JsY3N7q6qf3r3C4Wj9xNYT3xRPohbX7idY5\\\"],\\n      [\\\"Hair 47\\\", \\\"QmaDTiRVmqusHowbg4ij4Yw82EVdjUe5EbFe1UDc55eEfz\\\"],\\n      [\\\"Hair 48\\\", \\\"QmWNcABFm7xRVzzbpQhfYGUbSz4mfaQkJjfaBpUnPVX9NX\\\"],\\n      [\\\"Hair 49\\\", \\\"Qmcqmq4FMXedKRZ1DmC8TBNh5nS32m3mXvXhw4pukLCrdE\\\"],\\n      [\\\"Hair 50\\\", \\\"QmaQ2LBn9feY8vzxUDXZK44cMb5mn3cxAunoFfZ6R4ANrL\\\"],\\n      [\\\"Hair 51\\\", \\\"QmfR5C4hxMDNLgySiGYnLxMfrdzunbhzfyxUGmfTr6ZqTy\\\"],\\n      [\\\"Hair 52\\\", \\\"QmUmCDgFYnm3y1xyhJg5GSeQtXqqzC11vAhgfVb5kBj4P5\\\"],\\n      [\\\"Hair 53\\\", \\\"QmdAD2f1nTuAtY4z5XzVE3xP1unRQjf1M55u4FNkv8ERWo\\\"],\\n      [\\\"Hair 54\\\", \\\"QmajUPh1zkNDy919LHi1bLaVZTbzHXv4JGZ7Try2QmhNSx\\\"],\\n      [\\\"Hair 55\\\", \\\"QmeNCwHvqrNH81gcsvSeD335iZga1fR6SCZ2avSGBfLe2N\\\"],\\n      [\\\"Hair 56\\\", \\\"QmfXU1KCRCuBf5NBAZVV9xxKndQxaGsbhfQR443XUb6VYE\\\"],\\n      [\\\"Hair 57\\\", \\\"QmZrkxM7Wc2STa3tdk4nfBq2o2JG4nvMdEnxyEUvhb2xGg\\\"],\\n      [\\\"Hair 58\\\", \\\"Qmcqes6SnpLP228UzQbEigJNVHXZzwEwkXHbrVSBXvpwZp\\\"],\\n      [\\\"Hair 59\\\", \\\"QmSgPWVS7HqhUGonuw4uxBXjP6mRKMH4SpoWbDTf5Nogre\\\"],\\n      [\\\"Hair 60\\\", \\\"QmfP9FWjgJzeivFhknACVMTyCU8Mtse7VsMZYDR6P6dmLE\\\"],\\n      [\\\"Hair 61\\\", \\\"QmPwcmqrDMHHt73MZ4Aga1EGg5KCduo7wcMRC7Hms5nyfh\\\"],\\n      [\\\"Hair 62\\\", \\\"QmbbVkDt7Y6K3pnt6m79obn61MwsoeW1NHqYgW2poAYWvz\\\"],\\n      [\\\"Hair 63\\\", \\\"QmcKATVT8NUpWRwBhuLJgFhQX1yxUeGyRhsfJtzkPGFR6W\\\"],\\n      [\\\"Hair 64\\\", \\\"QmRB2Np8aih7LfvfLFGbPu7R2X3nCerJvJgBiYzECUFguT\\\"],\\n      [\\\"Hair 65\\\", \\\"QmUAyjR8TzV53Uatwgja2WBkVqaCQ36ZMwW45Wfv7vyTKB\\\"],\\n      [\\\"Hair 66\\\", \\\"QmTcaK9nghZV6LuMBruaa7nq9WXic6W5hiC5Ech755Myx4\\\"],\\n      [\\\"Hair 67\\\", \\\"QmbipeCH6nLmqSrx12UM9FMXVjRbrVicveJbGtoqFrCQPi\\\"],\\n      [\\\"Hair 68\\\", \\\"QmTPvtSd7kykCVVd7zMy5wTKBPMWXW4a1sivzaCrG4L3yy\\\"],\\n      [\\\"Hair 69\\\", \\\"QmQ4bfdYJqiCRjK7xqZB1Jmnhr7h5ghnR11MTAUtiwcr6G\\\"],\\n      [\\\"Hair 70\\\", \\\"QmV3Wi2N78DQDXcVTBYeYwfUp8ijWe7Ce43e4JEbSSHPLV\\\"],\\n      [\\\"Hair 71\\\", \\\"QmcaFf4MN3NJ1jDFcH9n7czPSCcnQ5L86Me5FvRZxBs59E\\\"],\\n      [\\\"Hair 72\\\", \\\"QmQdTwNiEqnebVdYh5Bcepr4WwgZDLmZEVRnGLPXtexgzH\\\"],\\n      [\\\"Hair 73\\\", \\\"QmaSM75ikFySmNyA5ZGVWPjfScLycRjioTaRne8WKibBsc\\\"],\\n      [\\\"Hair 74\\\", \\\"QmNWmpyciad8YtR3KKtLssPpM1mDQYGUaA5wF5XZ3dturg\\\"],\\n      [\\\"Hair 75\\\", \\\"QmW5rJbTHRS8K1RcYDGXsMfrTwMqvbx8pVX75ZeLSWKJ5G\\\"],\\n      [\\\"Hair 76\\\", \\\"QmU2oooeZUnAUCcPUTqDLL6WeGLoGBq77Sari2kDsxfV24\\\"],\\n      [\\\"Hair 77\\\", \\\"QmTgfbD9NAfppAXGwod4XQmaD5Wc63mVSL3UXxSJrBDRU9\\\"],\\n      [\\\"Hair 78\\\", \\\"QmaimS11NaXAb3wvKtCs3BZZryvCcswAHCe6kTPD2fva87\\\"],\\n      [\\\"Hair 79\\\", \\\"QmVD1ekc7gfUuYaJ7yiEFpGRcVAD1nbBpvYQbv5wRPcuWR\\\"],\\n      [\\\"Hair 80\\\", \\\"QmSTrw4zyrRjt8kdpaPRHV5qeyvm6qDAtZz7qqBD8Cxi1v\\\"],\\n      [\\\"Hair 81\\\", \\\"QmfZ7LkgjARn6H7JV5pS4iPTjXcxwP5NmmWviCq4oMpXfk\\\"],\\n      [\\\"Hair 82\\\", \\\"QmbFu7FMm9u3ic7nZQp2SDRUALFnKudLZyXk3hjsTiRtCL\\\"],\\n      [\\\"Hair 83\\\", \\\"QmbAF7TdKvoWYkNQsL1TKxmih3yArVUH4ubyEiCCvcJaWr\\\"],\\n      [\\\"Hair 84\\\", \\\"QmR9n4981fVdQ4K7m8HJbB9pdxP2q8PmoWABDpe684grP3\\\"],\\n      [\\\"Hair 85\\\", \\\"QmTPbfaPAgyTdX1ppo8frxGBN4CQrs5WjFuLtMVKTsYZ84\\\"],\\n      [\\\"Hair 86\\\", \\\"QmYcyYG2TeHbDGGK5PMPyV61ye5SbnaMoAkvfqNBc9GCox\\\"],\\n      [\\\"Hair 87\\\", \\\"QmP4ZXYa7g9ZmHuVh5w9iQWp7m9Vm2uVsni1VZNmva16ca\\\"],\\n      [\\\"Hair 88\\\", \\\"QmedG9KE12FePh4TGbFEecCws3PubmoWDqVVW7GeyP439B\\\"],\\n      [\\\"Hair 89\\\", \\\"Qmb8KJnrfM3SFZyXd7ZXCZVrcweohcXLpRmomZgQ7uxvx4\\\"],\\n      [\\\"Hair 90\\\", \\\"Qmc1593Mkjhs9dxYw8Z4bH63QZ1jXEtmsuj4ugxnP2DKS2\\\"],\\n      [\\\"Hair 91\\\", \\\"QmeQ7HfbfQRFManSHa49AvXyVFv8Z4uRwN3n85FedbbKiF\\\"],\\n      [\\\"Hair 92\\\", \\\"QmTBbq66ufbjo4RQ5kM18AHkjK9fbXnX1UcAwFijUSGHYn\\\"],\\n      [\\\"Hair 93\\\", \\\"QmRocj4DoqMzdaGFrosD8Gjf42oH227GZgpCQFFyubQCRL\\\"],\\n      [\\\"Hair 94\\\", \\\"QmUoEZdnsm8tDHmEMrE2TzoNbkbsMX5JpXx9mVNLupz5hv\\\"],\\n      [\\\"Hair 95\\\", \\\"QmRBST9zT92eDLCY9qDWrFquRoY3gjPKs1vqcZA9u6xCKq\\\"],\\n      [\\\"Hair 96\\\", \\\"QmZEoxDe67kN34LxWQnHKBhHDkXuWj3ZCoPugLwXjqyyJo\\\"],\\n      [\\\"Hair 97\\\", \\\"QmWf1fL3uuFPAGTjy6uyKUjt88yFBLZvMwapXwcGi39bJR\\\"],\\n      [\\\"Hair 98\\\", \\\"QmTUeMeKB8HFRc7QhUq1sWb851H7Ru3c614M31XuUDzr9Y\\\"],\\n      [\\\"Hair 99\\\", \\\"QmTfXVdNcWwFBL6dzzgH6APpaUD8L7P5fFkHRWtJaVJRad\\\"],\\n      [\\\"Hair 100\\\", \\\"QmNxdDQ8oQ3kiFwmkY5zx1j14MmuGr4KrN9UoCH8PM227q\\\"],\\n      [\\\"Hair 101\\\", \\\"QmVP865PD44yX6NjRXtMLqmWP634fzgWYdDRRU4mrPvFHn\\\"],\\n      [\\\"Hair 102\\\", \\\"QmVi8pzkHqjgYXgkkvL3qXjNvP1BmH7UTyP1CAt2P5PP1N\\\"],\\n      [\\\"Hair 103\\\", \\\"QmPPGbaDeetLKc1QFXRNXP8WVSazyniSMZM2Dyhqp9mZgK\\\"],\\n      [\\\"Hair 104\\\", \\\"QmY5iQcSzG8cChzVbVNWPRzcK1ETXbP7heSSfwEdHmn3CX\\\"],\\n      [\\\"Hair 105\\\", \\\"QmddMPzse52GK7wh3BWAkpA5BmXxVA2rkzBV27RNAqRLQ5\\\"],\\n      [\\\"Hair 106\\\", \\\"QmP1KfmDzDaSFkQ7Pw4ZkWLhjmgzN4w8W5SznP3SC4WgFb\\\"],\\n      [\\\"Hair 107\\\", \\\"QmVd8UUu2ApmjxeTkt672nf5vdoojTfjmJw77rfgXF9moh\\\"],\\n      [\\\"Hair 108\\\", \\\"QmdDtkeqd2dMLFtwFAK6Yq4johr8SyY1MLc61VhD9FwduJ\\\"]\\n    ];\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/Traits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\ncontract HeroTraits {\\n  function getPantsLength() public pure returns (uint256) {\\n    return getPants().length;\\n  }\\n\\n  function getPants() public pure returns (string[2][5] memory) {\\n    return [\\n      [\\\"White Pants\\\", \\\"QmS1ugwVyGemvvcu8xhvYPLJcM9XiCzev19hL5S4118mvY\\\"],\\n      [\\\"Red Pants\\\", \\\"QmQRw479rzessc1ms2kcnKQCvCs2aQ1Ep25vK7xgo9cEJt\\\"],\\n      [\\\"Blue Pants\\\", \\\"QmePEJz87mRjQt9BmYib14Fcxn8j13Xkdj6MfYoUZbQi79\\\"],\\n      [\\\"Green Pants\\\", \\\"QmZ6sjTg936aJCM67NPsPcCjMphAYEWoyQXHNHduKzLyf7\\\"],\\n      [\\\"Purple Pants\\\", \\\"QmPP9edeKhcJAM2YKxVfJhLaFHmLxJLm3WGcwWBvNvGXkZ\\\"]\\n    ];\\n  }\\n\\n  function getWeaponsLength() public pure returns (uint256) {\\n    return getWeapons().length;\\n  }\\n\\n  function getWeapons() public pure returns (string[2][19] memory) {\\n    return [\\n      [\\\"\\\", \\\"\\\"],\\n      [\\\"Boomerang of Wood\\\", \\\"QmeZpiK4w2G4nQnEsm9m83h1oZXSaxX5P9tg1ai7cEzCvc\\\"],\\n      [\\\"Bow of Focus\\\", \\\"QmNSq5KzbDhRJNuFkUmLc3MZBe5fcVKbvQcNSfThsG4KXw\\\"],\\n      [\\\"Mythal Short Sword\\\", \\\"Qmbbz8kkycoEK4r3oMUyw3aqrTQbCfdTno9i9eCKfFTCmz\\\"],\\n      [\\\"Bow of Honor\\\", \\\"QmNMApPhGawYMQtCsVNbkD2tSsyA7wfHeNuspw8jSrFaBL\\\"],\\n      [\\\"Axe of Honor\\\", \\\"QmeLEVz3Jy2FhWRBrQqN8szyUhYtjFxDPGVHxnTJY1xd2h\\\"],\\n      [\\\"Wood Long Sword\\\", \\\"QmXnwjgest5CZVz5ZhUyNnLo1diWFhkKhBck98xY4cpvRP\\\"],\\n      [\\\"Boomerang of Flight\\\", \\\"QmPeNnTj25uXJz67mFrJr4ro1zxENYXAGX6kfSxAC9GBxs\\\"],\\n      [\\\"Axe of Wonder\\\", \\\"QmT32TRmyg1xJCA9n7oFBRcuRW5vbb5TboXh5LygyLTXbi\\\"],\\n      [\\\"Bow of Mystery\\\", \\\"QmbQLEKE1QbGnqNjKeBLLVwcDEoQNB98fsoEQgUbVgrPJk\\\"],\\n      [\\\"Axe of Strength\\\", \\\"QmRfhpxsSQHCmsxGPbSDAD7rTKAjVfqgHVBfdoVZBALWFC\\\"],\\n      [\\n        \\\"Elvish Staff of the Forest\\\",\\n        \\\"QmZTTFEmaGu54yj9kUwH3xL4mZrfXJXp8RtzqYMHMYww6p\\\"\\n      ],\\n      [\\\"Staff of the Sea\\\", \\\"QmUsxTdawFhmWPEbBwqRUi9SGpNBeUN8RwxUUQczxVP8TX\\\"],\\n      [\\\"Universe Staff\\\", \\\"Qmab3zQ2n1ZPYpTEgkivDHuryM6A5P1sTjCQoWN5N9ADWE\\\"],\\n      [\\\"Mythal Long Sword\\\", \\\"QmSx6MiY29hFoYV2pnehEdbmuFipwupz2y2DJZyCN54jdZ\\\"],\\n      [\\\"Wood Short Sword\\\", \\\"QmWFFLygzSa9UXNJAtthRAurazVXjhfZ1ZsDAAsFrKWSQm\\\"],\\n      [\\\"Boomerang of Focus\\\", \\\"QmXPDw8pxgnsFsGoz4bw7cWA2G1ZK1MDXArNKHr1VPv3GQ\\\"],\\n      [\\\"Iron Short Sword\\\", \\\"QmTqDh8schE195bh6HSsoPfYLVYZLRrXaRen92nJfZcFDC\\\"],\\n      [\\\"Iron Long Sword\\\", \\\"QmfYEHBEReGSDKWZuRUBMRiHGhiBo1jTFwpWnVaAG11saw\\\"]\\n    ];\\n  }\\n\\n  function getBgLength() public pure returns (uint256) {\\n    return getBg().length;\\n  }\\n\\n  function getBg() public pure returns (string[26] memory) {\\n    return [\\n      \\\"#FEDD00\\\",\\n      \\\"#74D1EA\\\",\\n      \\\"#9DE7D7\\\",\\n      \\\"#9E978E\\\",\\n      \\\"#84754E\\\",\\n      \\\"#00B08B\\\",\\n      \\\"#222223\\\",\\n      \\\"#6B4C4C\\\",\\n      \\\"#ff2424\\\",\\n      \\\"#FF808B\\\",\\n      \\\"#DF1995\\\",\\n      \\\"#C1A7E2\\\",\\n      \\\"#685BC7\\\",\\n      \\\"#DDDAE8\\\",\\n      \\\"#1B365D\\\",\\n      \\\"#A4BCC2\\\",\\n      \\\"#407EC9\\\",\\n      \\\"#009CDE\\\",\\n      \\\"#003865\\\",\\n      \\\"#40C1AC\\\",\\n      \\\"#279989\\\",\\n      \\\"#00BFB3\\\",\\n      \\\"#006F62\\\",\\n      \\\"#ADDC91\\\",\\n      \\\"#007041\\\",\\n      \\\"#58eb34\\\"\\n    ];\\n  }\\n\\n  function getRaceLength() public pure returns (uint256) {\\n    return getRace().length;\\n  }\\n\\n  function getRace() public pure returns (string[2][22] memory) {\\n    return [\\n      [\\\"Human\\\", \\\"QmbVrpTTEciNQPxb8TjntcmpQMDLrzgEsJxYrpGanCmH88\\\"],\\n      [\\\"Human\\\", \\\"QmWTzCYevtrCY9Yu9HZ1RudJ5DZ3ySMbbb6V8j1GMoFd2W\\\"],\\n      [\\\"Human\\\", \\\"QmYhchiEeh4iJPYSksxoUAoy9SZCCEU21UQzEyeFxWBcBj\\\"],\\n      [\\\"Undead\\\", \\\"QmTtNfnd3HZ7moKrzaJaYyUM5idGbKy2sgHE14fpeyU9UL\\\"],\\n      [\\\"Skeleton\\\", \\\"QmcMDNnc8SNjwvPBpcb6hXG3yjz9WSiQ5qzbJTZre7N2uB\\\"],\\n      [\\\"Wizard\\\", \\\"QmYotarEMJ98MHfZGDKhsgCcZU54EzTRPCuS88vG9PBUtd\\\"],\\n      [\\\"Ghost\\\", \\\"QmTuv44nHYMAix3L36HuBkPV5sQ6NPiGhxSFGSTnAHipJk\\\"],\\n      [\\\"Frogling\\\", \\\"QmPXTBPcjrxrjwAaH9VaLzV8uZVpHuy2VnytHT1LWsYWuX\\\"],\\n      [\\\"Pizza\\\", \\\"QmaJFAM6iV473UUcEQUPP7hCtP1Zh5jspvMHb9sJYiyutJ\\\"],\\n      [\\\"Slate Monkey\\\", \\\"QmNZezfUXKEQZkrXfobHsudcqqAECt97yYZQRUV12jkNbj\\\"],\\n      [\\\"Emerald Monkey\\\", \\\"Qmdy1tBPBa85TeDMYb9KVPHanU7Wor39yLEpAJwEUDfgK8\\\"],\\n      [\\\"Red Monkey\\\", \\\"Qmb23Pp17Xg5nBQJnfkzQ4rMWPKYnNNWqJcYDaDoJJnwSN\\\"],\\n      [\\\"Gold Slate Monkey\\\", \\\"QmNn3agjVqz4WFNvcm3Srzg2EuKJoJi2W2t32E1aDVhAwg\\\"],\\n      [\\\"White Monkey\\\", \\\"QmTH9fLyHLzbP6KXUFdJKCKYZqPUHEv7vrYeP95s8AZ57B\\\"],\\n      [\\\"Emerald Red Monkey\\\", \\\"QmZJQQE2QS9kMHhUe1PbCNnG1QvGH7hiW6sPETZtqpeEZK\\\"],\\n      [\\\"Yellow Monkey\\\", \\\"QmRdNLRMzuTmEuQZVtJAXj9ydxs3Ztb1EdCcF8eqRFQBBe\\\"],\\n      [\\\"Honey Monkey\\\", \\\"QmbgrRnunnkJSS9L945bvbP9gd54nRJ8D6YMi1jECvHhei\\\"],\\n      [\\\"Red Furred Monkey\\\", \\\"QmdHwSAhmthUbTUfSTqD7EMFWcZ13LLZbvoNTYgKjJb5Vj\\\"],\\n      [\\\"Snow Monkey\\\", \\\"QmYvjKEGeSZH2dMhSvgooPt5AatSZzQm2UvMBNhoKvUvER\\\"],\\n      [\\\"Brown Monkey\\\", \\\"QmehwhevsQdDyAoG2maHFA7Pip4x6KLVRU1KVfmV4pfDmu\\\"],\\n      [\\\"Gold Monkey\\\", \\\"QmTsvwBm7MTRgZBhLmV2GFtC7FzBggwcNNWDmk5iNyk2oP\\\"],\\n      [\\\"Tree Monkey\\\", \\\"QmYJBTHYE8WjNFV2udVre3yXTy9Y5xwScBW4bgHvaoPL5r\\\"]\\n    ];\\n  }\\n\\n  function getClothesLength() public pure returns (uint256) {\\n    return getClothes().length;\\n  }\\n\\n  function getClothes() public pure returns (string[2][25] memory) {\\n    return [\\n      [\\\"\\\", \\\"\\\"],\\n      [\\\"Robe of Fire\\\", \\\"QmUH91Yysb2SsDNKZSrkUMevUcoSU3dmcvpcozWAuEvr18\\\"],\\n      [\\\"Shirt of Mystery\\\", \\\"QmXRYw9yfgDYAU27KMQafT41hKQFVGJZBqwjs3nkWEUpAp\\\"],\\n      [\\\"Vest of Fire\\\", \\\"QmZDeqtzajKwxV9YgfzcZ8Wfap1zARUicUWjTJmJBMdQdw\\\"],\\n      [\\\"Tunic of Wonder\\\", \\\"QmaS95LAjXoF3EWxPowwbybBvhG7NtqAA6KeWLYpAzKUVZ\\\"],\\n      [\\\"Tunic of Mystery\\\", \\\"QmYJ1xzvptgSVakpUGQgaXjF4w8nnZyNCoDz9v9TJKEcpz\\\"],\\n      [\\\"Shirt of Fire\\\", \\\"QmQc1ThSSgbdC6z5nwLDyMyPYqrUC6JBDhfu7WWkyyx9QP\\\"],\\n      [\\\"Vest of White\\\", \\\"QmYXx2ihhkFWbjHGkyyfSsQf5jnHPojmo1cWBS9RNjLo8R\\\"],\\n      [\\\"Tunic of Fire\\\", \\\"QmcfVUUiFDNoJnZP8W8eSHPq11WRj99oeK4LLaJQtQ1fb8\\\"],\\n      [\\\"Robe of Mystery\\\", \\\"QmW9xSXtHfikeScmhpB56kWHdNSDPJaA2F4DRiRdS1gt96\\\"],\\n      [\\\"Robe of White\\\", \\\"QmRdTAV3jspvFCdWuTL1wYvz34BS1BXhUY9ctsouy11vfR\\\"],\\n      [\\\"Shirt of Emerald\\\", \\\"QmU3i6M3JgPUSFMzfwCjgAkcFtwtmEvwgdSvTEN9gBQ2Ld\\\"],\\n      [\\\"Vest of Mystery\\\", \\\"Qme5ZavY4PMvt5bSmrLJErrnDyUckaNH9FrgT5aYqdnnBf\\\"],\\n      [\\\"Robe of Emerald\\\", \\\"QmZynRUwPjL6Du9LsGyPA3u1fYabmKuefjRnyTgAm99S8D\\\"],\\n      [\\\"Vest of Wishing\\\", \\\"QmUWNR2XF8dAgPXyakxUmpbr5SWz3kytzu49dAhRBo3gLZ\\\"],\\n      [\\\"Gown of Magic\\\", \\\"QmQBvcfZ1tsue32nerkpRCsYzDJfNpy466zAhwZ7jWENLw\\\"],\\n      [\\\"Robe of Wonder\\\", \\\"Qmbidcgmae5LJqcQKoVwF1832maJ7nMdScNr79hkvMtkkd\\\"],\\n      [\\n        \\\"Gown of the Universe\\\",\\n        \\\"Qmehwi2m5aqrZcqUxBjeJbXRcfWjErxywu3HbwXKPZXa2p\\\"\\n      ],\\n      [\\\"Tunic of Light\\\", \\\"QmQvhTVqSFRo4zm8uye1f6tYUSUoNvksdgrDzKychyDTKR\\\"],\\n      [\\\"Snow Gown\\\", \\\"QmZRoMDJFGr7umyFhH6KBporsrqG7mS1d65xMtzcTHipLj\\\"],\\n      [\\\"Blue Vest\\\", \\\"QmXnYYxyexqF7qcYkPDhzrrzbLkwSTeHEDfwobQLvwMd75\\\"],\\n      [\\\"Gown of Flowers\\\", \\\"QmaG7srwBaMSUBsExqhUuAUtQbKG12qjcmT1KKoihk7n34\\\"],\\n      [\\\"White Shirt\\\", \\\"Qmb7iqzgFA3NcJJQutWYFgT946bcy5JwfGHevzc9TFFXt1\\\"],\\n      [\\\"Blue Shirt\\\", \\\"QmQosecPGEQ8qhP1AvPNrphzrga8f3jkpNvB7HPku49cej\\\"],\\n      [\\\"Tunic of Emerald\\\", \\\"Qmb6yH7Ss23kL75LfrJTGZXb4oNTXx8A9Uhdr18txKFbqQ\\\"]\\n    ];\\n  }\\n\\n  function getHeadLength() public pure returns (uint256) {\\n    return getHead().length;\\n  }\\n\\n  function getHead() public pure returns (string[2][24] memory) {\\n    return [\\n      [\\\"\\\", \\\"\\\"],\\n      [\\\"Dark Hood\\\", \\\"QmecUFzdxqbhzQGQzpoxqWViFXybMA4amKC9vcwddEzj3y\\\"],\\n      [\\\"Emerald Hood\\\", \\\"QmQR7CLWNY66kicK51cPjzpf7tcZVEVjZm8PhMtHjBJthi\\\"],\\n      [\\\"Blue Hood\\\", \\\"QmUEhNvJQ5PmPWvJfABNJ5mwZg9s9uANgeFh8wBfwnftk1\\\"],\\n      [\\\"White Hood\\\", \\\"QmSNTEq8GsBkzRq19T3Rh9jdULr46KCtKJxVEKTgUQajAo\\\"],\\n      [\\\"Red Hood\\\", \\\"Qmc4VPaLnV1JPUvpzsYxsKaYofaCbrhgKK3TaDcnf6tW3L\\\"],\\n      [\\\"Helmet 1\\\", \\\"QmcuWWeEsqWMh6ESKEi4BpbicnoqpQt5WQcLhqC9kggj2M\\\"],\\n      [\\\"Phrygian Cap\\\", \\\"QmRYZTTanct9LqJw6Mr4EjuTN5iGvySnbgB3GAviy9QAaX\\\"],\\n      [\\\"Reddish Hat\\\", \\\"QmemYuaZ6ti3f9hZB6sMnCZ9CyHnPRsBCTsSBrTGp7jgFS\\\"],\\n      [\\\"Hat of Luck\\\", \\\"Qmed5Ebw2HqfeDBn845Sb6UJdSFeedZvwcF2eDeDVTt5Q8\\\"],\\n      [\\\"Purple Hat\\\", \\\"QmTaet5S2Q8tRa6fa4REPQ3USdn7G6Ptemm4nMb3BpLhZ5\\\"],\\n      [\\\"Wizard Hat\\\", \\\"QmTAoe4qpfHsER7swyzbGj1zSR6GuRTsMfBaWdWQtsVUAu\\\"],\\n      [\\\"Helmet 2\\\", \\\"QmQd9zjzVbCEG3HTsnLSjfj4D8g2YbVAwJD9jLnf6x3SqH\\\"],\\n      [\\\"Helmet of Nebulous\\\", \\\"QmWEvHZyBXuezBcAFKvM55MdVWDnqQCXQXL4xDUzPCVYY6\\\"],\\n      [\\\"Helmet of Valoria\\\", \\\"QmZX3jJVEhJNTtQM5mTJNkfCSZxqfULsZ88bHg1ekELiGT\\\"],\\n      [\\\"Hat of White\\\", \\\"Qma6pcKWCwCbLdQfbLqYA8vNr8jr74uTM2dNiK5Ga6GSQL\\\"],\\n      [\\\"Helmet of Thulium\\\", \\\"QmWWFXsfSuSNRTN4qVdjPH9cf6bccZ3mUbJz8MXXY7Ky8n\\\"],\\n      [\\\"Helmet of Wonder\\\", \\\"QmNQQ9rZUscy6fLHdhqndmDm43dSe1xo45JBqkiKNN95qz\\\"],\\n      [\\\"Helmet of Valoria 2\\\", \\\"Qmd1Xza7bLMXNdHmpCP2Dt2Fo7YkyECnQxnsbNgPPEkipK\\\"],\\n      [\\\"Beep Bop\\\", \\\"QmaPxQGtBVHp7HWDmc7hjnHXCWbubNHFb3dctqetfT5S8S\\\"],\\n      [\\\"Helmet of Power\\\", \\\"Qmaqi98rt2oFwzjwJxbWmVgdbrjQshCPt5cCpmLUHsM9Cn\\\"],\\n      [\\\"Beep Bop 2\\\", \\\"QmTNiTTa7BZdAHNni9AgVdcQ86GNkDrDcmreLRRCVHnE4V\\\"],\\n      [\\\"Beep Bop 3\\\", \\\"QmXnP7hifqudavHmH92o9eDATz8qvpZef7CtGZDdgi5Hoz\\\"],\\n      [\\\"Helmet of the Sea\\\", \\\"QmXQBQtsdaM5CNC84r3LvjqsQPcBWnmsKvP2U1SdnGdHph\\\"]\\n    ];\\n  }\\n\\n  function getShoesLength() public pure returns (uint256) {\\n    return getShoes().length;\\n  }\\n\\n  function getShoes() public pure returns (string[2][5] memory) {\\n    return [\\n      [\\\"\\\", \\\"\\\"],\\n      [\\\"Shoes\\\", \\\"QmZuWKcMRRRP28eCFq7oZ19VHp5fKsHfKeLPvRh9AhQw3G\\\"],\\n      [\\\"Golden Runners\\\", \\\"QmSBkmnuG4N8GXMRhAMyYEqoajApFwHymt1aPcDaQXoiX8\\\"],\\n      [\\\"Blue Shoes\\\", \\\"QmXrspeWB4J3kSYovtuGCz6FqAs5KgxpZs13obSUoSBW3D\\\"],\\n      [\\\"Blue Boots\\\", \\\"QmZVtB16f6Z8MgEzkv2XCE9ayFe34tTRwouRPKbVZiNjF1\\\"]\\n    ];\\n  }\\n\\n  function getShieldsLength() public pure returns (uint256) {\\n    return getShields().length;\\n  }\\n\\n  function getShadow() public pure returns (string memory) {\\n    return \\\"QmcRNVeYU1CeMe2yD1HKpg5bvBQCfcW5xZp67HYSstAzSZ\\\";\\n  }\\n\\n  function getShields() public pure returns (string[2][11] memory) {\\n    return [\\n      [\\\"\\\", \\\"\\\"],\\n      [\\n        \\\"Shield of the Forest 1\\\",\\n        \\\"QmVSwjgTzn7w9jYFvmzadBmFYDaTFi5H9JK8hUW5EJ6Uq3\\\"\\n      ],\\n      [\\\"Shield of Iron 1\\\", \\\"QmZWnaVywirur14yBBGfBJdQiqit6rQwB5NUAzkdJzqnPS\\\"],\\n      [\\\"Mythal Shield 2\\\", \\\"QmebyDHQq24xgLEjoN33aSSQUCFX3vTpf9koRo62GCB6bM\\\"],\\n      [\\\"Mythal Shield 3\\\", \\\"QmbVKssPYZS1V9bZmkDfpU1EqKyFSKkVLunqQasiipQCkD\\\"],\\n      [\\\"Shield of Iron 2\\\", \\\"QmYpmqDQZvPPQoNsiH4jDUksozTgWiK13KfWT24YorFsY7\\\"],\\n      [\\\"Mythal Shield 1\\\", \\\"QmT21FSftCYKcSvjK262vyw79zqQpzxuPCvPNKY23CbNzn\\\"],\\n      [\\\"Shield of Absolute\\\", \\\"QmPGtk89gzqK93hV8v1noqJthoB3QAccxZGVw9TZUKrKmZ\\\"],\\n      [\\n        \\\"Shield of the Forest 2\\\",\\n        \\\"QmcDwGHTrcdFusDAagX3632cDjAczawoWL6uChv4Y68gF2\\\"\\n      ],\\n      [\\\"Shield of Iron 3\\\", \\\"QmPvccz4cMBh3589fht4hCdwRJYyNAHMRggy4YUwKzGKv4\\\"],\\n      [\\n        \\\"Shield of the Forest 3\\\",\\n        \\\"QmRPvKjbSQafzLcxwU4CFBKuemNRxGBS8U3ra8rGFJRRGy\\\"\\n      ]\\n    ];\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"traits2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CDN_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CDN_PREFIX\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"}],\"name\":\"enableCdn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"genSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"genTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"race\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weapon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clothes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shoes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hair\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bg\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"magic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stamina\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexterity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creativity\",\"type\":\"uint256\"}],\"internalType\":\"struct Heroes.Traits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getJsonString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"getSeedPart\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"merlinMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenUriHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintCustom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"d\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"updateSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Heroes", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000008c86326090e16c461c971dde1fd75f522f179e3c0000000000000000000000002ffc4ef58a8ba17bcdd1b751f277a369c84b8503000000000000000000000000000000000000000000000000000000000000002368747470733a2f2f6865726f65732e6d7970696e6174612e636c6f75642f697066732f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064865726f65730000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}