{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n+  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +\r\n+                                                                                                                          +\r\n+                                                                                                                          +\r\n+                                                                     iiii  lllllll   1111111   55555555SEASON:ONE         +\r\n+                                                                    i::::i l:::::l  1::::::1   5::::::::::::::::5         +\r\n+                                                                     iiii  l:::::l 1:::::::1   5::::::::::::::::5         +\r\n+                                                                           l:::::l 111:::::1   5:::::555555555555         +\r\n+          aaaaaaaaaaaaavvvvvvv           vvvvvvvrrrrr   rrrrrrrrr  iiiiiii  l::::l    1::::1   5:::::5                    +\r\n+          a::::::::::::av:::::v         v:::::v r::::rrr:::::::::r i:::::i  l::::l    1::::1   5:::::5                    +\r\n+          aaaaaaaaa:::::av:::::v       v:::::v  r:::::::::::::::::r i::::i  l::::l    1::::1   5:::::5555555555           +\r\n+                   a::::a v:::::v     v:::::v   rr::::::rrrrr::::::ri::::i  l::::l    1::::l   5:::::::::::::::5          +\r\n+            aaaaaaa:::::a  v:::::v   v:::::v     r:::::r     r:::::ri::::i  l::::l    1::::l   555555555555:::::5         +\r\n+          aa::::::::::::a   v:::::v v:::::v      r:::::r     rrrrrrri::::i  l::::l    1::::l               5:::::5        +\r\n+         a::::aaaa::::::a    v:::::v:::::v       r:::::r            i::::i  l::::l    1::::l               5:::::5        +\r\n+        a::::a    a:::::a     v:::::::::v        r:::::r            i::::i  l::::l    1::::l   5555555     5:::::5        +\r\n+        a::::a    a:::::a      v:::::::v         r:::::r           i::::::il::::::l111::::::1115::::::55555::::::5        +\r\n+        a:::::aaaa::::::a       v:::::v          r:::::r           i::::::il::::::l1::::::::::1 55:::::::::::::55         +\r\n+         a::::::::::aa:::a       v:::v           r:::::r           i::::::il::::::l1::::::::::1   55:::::::::55           +\r\n+          aaaaaaaaaa  aaaa        vvv            rrrrrrr           SEASON:ONEllllll111111111111     555555555             +\r\n+                                                                                                                          +\r\n+                                                                                                                          +\r\n+  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +  +\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\npragma solidity ^0.8.1;\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\npragma solidity ^0.8.0;\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: erc721a/contracts/ERC721A.sol\r\n// Creator: Chiru Labs\r\npragma solidity ^0.8.4;\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\nerror ApprovalQueryForNonexistentToken();\r\nerror ApproveToCaller();\r\nerror ApprovalToCurrentOwner();\r\nerror BalanceQueryForZeroAddress();\r\nerror MintToZeroAddress();\r\nerror MintZeroQuantity();\r\nerror OwnerQueryForNonexistentToken();\r\nerror TransferCallerNotOwnerNorApproved();\r\nerror TransferFromIncorrectOwner();\r\nerror TransferToNonERC721ReceiverImplementer();\r\nerror TransferToZeroAddress();\r\nerror URIQueryForNonexistentToken();\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n *\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\r\n\tusing Address for address;\r\n\tusing Strings for uint256;\r\n\r\n\t// Compiler will pack this into a single 256bit word.\r\n\tstruct TokenOwnership {\r\n\t\t// The address of the owner.\r\n\t\taddress addr;\r\n\t\t// Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n\t\tuint64 startTimestamp;\r\n\t\t// Whether the token has been burned.\r\n\t\tbool burned;\r\n\t}\r\n\r\n\t// Compiler will pack this into a single 256bit word.\r\n\tstruct AddressData {\r\n\t\t// Realistically, 2**64-1 is more than enough.\r\n\t\tuint64 balance;\r\n\t\t// Keeps track of mint count with minimal overhead for tokenomics.\r\n\t\tuint64 numberMinted;\r\n\t\t// Keeps track of burn count with minimal overhead for tokenomics.\r\n\t\tuint64 numberBurned;\r\n\t\t// For miscellaneous variable(s) pertaining to the address\r\n\t\t// (e.g. number of whitelist mint slots used).\r\n\t\t// If there are multiple variables, please pack them into a uint64.\r\n\t\tuint64 aux;\r\n\t}\r\n\r\n\t// The tokenId of the next token to be minted.\r\n\tuint256 internal _currentIndex;\r\n\r\n\t// The number of tokens burned.\r\n\tuint256 internal _burnCounter;\r\n\r\n\t// Token name\r\n\tstring private _name;\r\n\r\n\t// Token symbol\r\n\tstring private _symbol;\r\n\r\n\t// Mapping from token ID to ownership details\r\n\t// An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\r\n\tmapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n\t// Mapping owner address to address data\r\n\tmapping(address => AddressData) private _addressData;\r\n\r\n\t// Mapping from token ID to approved address\r\n\tmapping(uint256 => address) private _tokenApprovals;\r\n\r\n\t// Mapping from owner to operator approvals\r\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t\t_currentIndex = _startTokenId();\r\n\t}\r\n\r\n\t/**\r\n\t * To change the starting tokenId, please override this function.\r\n\t */\r\n\tfunction _startTokenId() internal view virtual returns (uint256) {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\r\n\t */\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\t// Counter underflow is impossible as _burnCounter cannot be incremented\r\n\t\t// more than _currentIndex - _startTokenId() times\r\n\t\tunchecked {\r\n\t\t\treturn _currentIndex - _burnCounter - _startTokenId();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the total amount of tokens minted in the contract.\r\n\t */\r\n\tfunction _totalMinted() internal view returns (uint256) {\r\n\t\t// Counter underflow is impossible as _currentIndex does not decrement,\r\n\t\t// and it is initialized to _startTokenId()\r\n\t\tunchecked {\r\n\t\t\treturn _currentIndex - _startTokenId();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC165-supportsInterface}.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n\t\treturn\r\n\t\t\tinterfaceId == type(IERC721).interfaceId ||\r\n\t\t\tinterfaceId == type(IERC721Metadata).interfaceId ||\r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address owner) public view override returns (uint256) {\r\n\t\tif (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n\t\treturn uint256(_addressData[owner].balance);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of tokens minted by `owner`.\r\n\t */\r\n\tfunction _numberMinted(address owner) internal view returns (uint256) {\r\n\t\treturn uint256(_addressData[owner].numberMinted);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of tokens burned by or on behalf of `owner`.\r\n\t */\r\n\tfunction _numberBurned(address owner) internal view returns (uint256) {\r\n\t\treturn uint256(_addressData[owner].numberBurned);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n\t */\r\n\tfunction _getAux(address owner) internal view returns (uint64) {\r\n\t\treturn _addressData[owner].aux;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n\t * If there are multiple variables, please pack them into a uint64.\r\n\t */\r\n\tfunction _setAux(address owner, uint64 aux) internal {\r\n\t\t_addressData[owner].aux = aux;\r\n\t}\r\n\r\n\t/**\r\n\t * Gas spent here starts off proportional to the maximum mint batch size.\r\n\t * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n\t */\r\n\tfunction _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n\t\tuint256 curr = tokenId;\r\n\r\n\t\tunchecked {\r\n\t\t\tif (_startTokenId() <= curr && curr < _currentIndex) {\r\n\t\t\t\tTokenOwnership memory ownership = _ownerships[curr];\r\n\t\t\t\tif (!ownership.burned) {\r\n\t\t\t\t\tif (ownership.addr != address(0)) {\r\n\t\t\t\t\t\treturn ownership;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Invariant:\r\n\t\t\t\t\t// There will always be an ownership that has an address and is not burned\r\n\t\t\t\t\t// before an ownership that does not have an address and is not burned.\r\n\t\t\t\t\t// Hence, curr will not underflow.\r\n\t\t\t\t\twhile (true) {\r\n\t\t\t\t\t\tcurr--;\r\n\t\t\t\t\t\townership = _ownerships[curr];\r\n\t\t\t\t\t\tif (ownership.addr != address(0)) {\r\n\t\t\t\t\t\t\treturn ownership;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\trevert OwnerQueryForNonexistentToken();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-ownerOf}.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\r\n\t\treturn _ownershipOf(tokenId).addr;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-name}.\r\n\t */\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-symbol}.\r\n\t */\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-tokenURI}.\r\n\t */\r\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n\t\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n\t\tstring memory baseURI = _baseURI();\r\n\t\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n\t * by default, can be overriden in child contracts.\r\n\t */\r\n\tfunction _baseURI() internal view virtual returns (string memory) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-approve}.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) public override {\r\n\t\taddress owner = ERC721A.ownerOf(tokenId);\r\n\t\tif (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n\t\tif (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n\t\t\trevert ApprovalCallerNotOwnerNorApproved();\r\n\t\t}\r\n\r\n\t\t_approve(to, tokenId, owner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-getApproved}.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) public view override returns (address) {\r\n\t\tif (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n\t\treturn _tokenApprovals[tokenId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-setApprovalForAll}.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\r\n\t\tif (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n\t\t_operatorApprovals[_msgSender()][operator] = approved;\r\n\t\temit ApprovalForAll(_msgSender(), operator, approved);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-isApprovedForAll}.\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n\t\treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-transferFrom}.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) public virtual override {\r\n\t\t_transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) public virtual override {\r\n\t\tsafeTransferFrom(from, to, tokenId, '');\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) public virtual override {\r\n\t\t_transfer(from, to, tokenId);\r\n\t\tif (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n\t\t\trevert TransferToNonERC721ReceiverImplementer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns whether `tokenId` exists.\r\n\t *\r\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Tokens start existing when they are minted (`_mint`),\r\n\t */\r\n\tfunction _exists(uint256 tokenId) internal view returns (bool) {\r\n\t\treturn _startTokenId() <= tokenId && tokenId < _currentIndex &&\r\n\t\t\t!_ownerships[tokenId].burned;\r\n\t}\r\n\r\n\tfunction _safeMint(address to, uint256 quantity) internal {\r\n\t\t_safeMint(to, quantity, '');\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n\t * - `quantity` must be greater than 0.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _safeMint(\r\n\t\taddress to,\r\n\t\tuint256 quantity,\r\n\t\tbytes memory _data\r\n\t) internal {\r\n\t\t_mint(to, quantity, _data, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Mints `quantity` tokens and transfers them to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t * - `quantity` must be greater than 0.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _mint(\r\n\t\taddress to,\r\n\t\tuint256 quantity,\r\n\t\tbytes memory _data,\r\n\t\tbool safe\r\n\t) internal {\r\n\t\tuint256 startTokenId = _currentIndex;\r\n\t\tif (to == address(0)) revert MintToZeroAddress();\r\n\t\tif (quantity == 0) revert MintZeroQuantity();\r\n\r\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n\t\t// Overflows are incredibly unrealistic.\r\n\t\t// balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n\t\t// updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n\t\tunchecked {\r\n\t\t\t_addressData[to].balance += uint64(quantity);\r\n\t\t\t_addressData[to].numberMinted += uint64(quantity);\r\n\r\n\t\t\t_ownerships[startTokenId].addr = to;\r\n\t\t\t_ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n\t\t\tuint256 updatedIndex = startTokenId;\r\n\t\t\tuint256 end = updatedIndex + quantity;\r\n\r\n\t\t\tif (safe && to.isContract()) {\r\n\t\t\t\tdo {\r\n\t\t\t\t\temit Transfer(address(0), to, updatedIndex);\r\n\t\t\t\t\tif (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\r\n\t\t\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\r\n\t\t\t\t\t}\r\n\t\t\t\t} while (updatedIndex != end);\r\n\t\t\t\t// Reentrancy protection\r\n\t\t\t\tif (_currentIndex != startTokenId) revert();\r\n\t\t\t} else {\r\n\t\t\t\tdo {\r\n\t\t\t\t\temit Transfer(address(0), to, updatedIndex++);\r\n\t\t\t\t} while (updatedIndex != end);\r\n\t\t\t}\r\n\t\t\t_currentIndex = updatedIndex;\r\n\t\t}\r\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` from `from` to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) private {\r\n\t\tTokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n\t\tif (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\r\n\r\n\t\tbool isApprovedOrOwner = (_msgSender() == from ||\r\n\t\t\tisApprovedForAll(from, _msgSender()) ||\r\n\t\t\tgetApproved(tokenId) == _msgSender());\r\n\r\n\t\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n\t\tif (to == address(0)) revert TransferToZeroAddress();\r\n\r\n\t\t_beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n\t\t// Clear approvals from the previous owner\r\n\t\t_approve(address(0), tokenId, from);\r\n\r\n\t\t// Underflow of the sender's balance is impossible because we check for\r\n\t\t// ownership above and the recipient's balance can't realistically overflow.\r\n\t\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n\t\tunchecked {\r\n\t\t\t_addressData[from].balance -= 1;\r\n\t\t\t_addressData[to].balance += 1;\r\n\r\n\t\t\tTokenOwnership storage currSlot = _ownerships[tokenId];\r\n\t\t\tcurrSlot.addr = to;\r\n\t\t\tcurrSlot.startTimestamp = uint64(block.timestamp);\r\n\r\n\t\t\t// If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n\t\t\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n\t\t\tuint256 nextTokenId = tokenId + 1;\r\n\t\t\tTokenOwnership storage nextSlot = _ownerships[nextTokenId];\r\n\t\t\tif (nextSlot.addr == address(0)) {\r\n\t\t\t\t// This will suffice for checking _exists(nextTokenId),\r\n\t\t\t\t// as a burned slot cannot contain the zero address.\r\n\t\t\t\tif (nextTokenId != _currentIndex) {\r\n\t\t\t\t\tnextSlot.addr = from;\r\n\t\t\t\t\tnextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\temit Transfer(from, to, tokenId);\r\n\t\t_afterTokenTransfers(from, to, tokenId, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev This is equivalent to _burn(tokenId, false)\r\n\t */\r\n\tfunction _burn(uint256 tokenId) internal virtual {\r\n\t\t_burn(tokenId, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `tokenId`.\r\n\t * The approval is cleared when the token is burned.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n\t\tTokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n\t\taddress from = prevOwnership.addr;\r\n\r\n\t\tif (approvalCheck) {\r\n\t\t\tbool isApprovedOrOwner = (_msgSender() == from ||\r\n\t\t\t\tisApprovedForAll(from, _msgSender()) ||\r\n\t\t\t\tgetApproved(tokenId) == _msgSender());\r\n\r\n\t\t\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n\t\t}\r\n\r\n\t\t_beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n\t\t// Clear approvals from the previous owner\r\n\t\t_approve(address(0), tokenId, from);\r\n\r\n\t\t// Underflow of the sender's balance is impossible because we check for\r\n\t\t// ownership above and the recipient's balance can't realistically overflow.\r\n\t\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n\t\tunchecked {\r\n\t\t\tAddressData storage addressData = _addressData[from];\r\n\t\t\taddressData.balance -= 1;\r\n\t\t\taddressData.numberBurned += 1;\r\n\r\n\t\t\t// Keep track of who burned the token, and the timestamp of burning.\r\n\t\t\tTokenOwnership storage currSlot = _ownerships[tokenId];\r\n\t\t\tcurrSlot.addr = from;\r\n\t\t\tcurrSlot.startTimestamp = uint64(block.timestamp);\r\n\t\t\tcurrSlot.burned = true;\r\n\r\n\t\t\t// If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\r\n\t\t\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n\t\t\tuint256 nextTokenId = tokenId + 1;\r\n\t\t\tTokenOwnership storage nextSlot = _ownerships[nextTokenId];\r\n\t\t\tif (nextSlot.addr == address(0)) {\r\n\t\t\t\t// This will suffice for checking _exists(nextTokenId),\r\n\t\t\t\t// as a burned slot cannot contain the zero address.\r\n\t\t\t\tif (nextTokenId != _currentIndex) {\r\n\t\t\t\t\tnextSlot.addr = from;\r\n\t\t\t\t\tnextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\temit Transfer(from, address(0), tokenId);\r\n\t\t_afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n\t\t// Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n\t\tunchecked {\r\n\t\t\t_burnCounter++;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve `to` to operate on `tokenId`\r\n\t *\r\n\t * Emits a {Approval} event.\r\n\t */\r\n\tfunction _approve(\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\taddress owner\r\n\t) private {\r\n\t\t_tokenApprovals[tokenId] = to;\r\n\t\temit Approval(owner, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n\t *\r\n\t * @param from address representing the previous owner of the given token ID\r\n\t * @param to target address that will receive the tokens\r\n\t * @param tokenId uint256 ID of the token to be transferred\r\n\t * @param _data bytes optional data to send along with the call\r\n\t * @return bool whether the call correctly returned the expected magic value\r\n\t */\r\n\tfunction _checkContractOnERC721Received(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) private returns (bool) {\r\n\t\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n\t\t\treturn retval == IERC721Receiver(to).onERC721Received.selector;\r\n\t\t} catch (bytes memory reason) {\r\n\t\t\tif (reason.length == 0) {\r\n\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\r\n\t\t\t} else {\r\n\t\t\t\tassembly {\r\n\t\t\t\t\trevert(add(32, reason), mload(reason))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n\t * And also called before burning one token.\r\n\t *\r\n\t * startTokenId - the first token id to be transferred\r\n\t * quantity - the amount to be transferred\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n\t * transferred to `to`.\r\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\r\n\t * - When `to` is zero, `tokenId` will be burned by `from`.\r\n\t * - `from` and `to` are never both zero.\r\n\t */\r\n\tfunction _beforeTokenTransfers(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 startTokenId,\r\n\t\tuint256 quantity\r\n\t) internal virtual {}\r\n\r\n\t/**\r\n\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n\t * minting.\r\n\t * And also called after one token has been burned.\r\n\t *\r\n\t * startTokenId - the first token id to be transferred\r\n\t * quantity - the amount to be transferred\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n\t * transferred to `to`.\r\n\t * - When `from` is zero, `tokenId` has been minted for `to`.\r\n\t * - When `to` is zero, `tokenId` has been burned by `from`.\r\n\t * - `from` and `to` are never both zero.\r\n\t */\r\n\tfunction _afterTokenTransfers(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 startTokenId,\r\n\t\tuint256 quantity\r\n\t) internal virtual {}\r\n}\r\n\r\n// File: avril15_s1.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract avril15_SeasonOne is ERC721A, Ownable {\r\n\tuint256 maxSupply = 160;\r\n\r\n\tstring public baseURI = \"ipfs://QmQrkhzQeVSLvFN9oUCJ4PJhkDfQPMfj8zmu5Nc2JCsqq6/\";\r\n\tbool public revealed = true;\r\n\r\n\tconstructor() ERC721A(\"avril15.eth season one\", \"AVRIL15_S1\") {}\r\n\r\n\tfunction ownerMint(uint256 quantity) external payable onlyOwner {\r\n\t\trequire(totalSupply() + quantity <= maxSupply, \"Exceeded maxSupply of 160.\");\r\n\t\t_safeMint(msg.sender, quantity);\r\n\t}\r\n\r\n    function _baseURI() internal view override returns (string memory) {\r\n\t\treturn baseURI;\r\n\t}\r\n\r\n\tfunction changeBaseURI(string memory baseURI_) public onlyOwner {\r\n\t\tbaseURI = baseURI_;\r\n\t}\r\n\r\n    function changeRevealed(bool _revealed) public onlyOwner {\r\n        revealed = _revealed;\r\n    }\r\n\r\n\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n\t\tstring memory baseURI_ = _baseURI();\r\n\r\n\t\tif (revealed) {\r\n\t\t\treturn bytes(baseURI_).length > 0 ? string(abi.encodePacked(baseURI_, Strings.toString(tokenId), \".json\")) : \"\";\r\n\t\t} else {\r\n\t\t\treturn string(abi.encodePacked(baseURI_, \"prereveal.json\"));\r\n\t\t}\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"changeBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_revealed\",\"type\":\"bool\"}],\"name\":\"changeRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "avril15_SeasonOne", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bdf6dc51154fa9ffa6beb475c0a45c91efea089a5880aa13d19f5453fed89cda"}]}