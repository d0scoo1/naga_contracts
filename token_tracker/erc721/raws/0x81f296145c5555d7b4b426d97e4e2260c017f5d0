{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\n\r\ninterface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    \r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external;\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n    \r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n    \r\n    function totalSupply() external view returns(uint256);\r\n    \r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\nabstract contract OMS { //Orcania Management Standard\r\n\r\n    address private _owner;\r\n    mapping(address => bool) private _manager;\r\n\r\n    event OwnershipTransfer(address indexed newOwner);\r\n    event SetManager(address indexed manager, bool state);\r\n\r\n    receive() external payable {}\r\n    \r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _manager[msg.sender] = true;\r\n\r\n        emit SetManager(msg.sender, true);\r\n    }\r\n\r\n    //Modifiers ==========================================================================================================================================\r\n    modifier Owner() {\r\n        require(msg.sender == _owner, \"OMS: NOT_OWNER\");\r\n        _;  \r\n    }\r\n\r\n    modifier Manager() {\r\n      require(_manager[msg.sender], \"OMS: MOT_MANAGER\");\r\n      _;  \r\n    }\r\n\r\n    //Read functions =====================================================================================================================================\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function manager(address user) external view returns(bool) {\r\n        return _manager[user];\r\n    }\r\n\r\n    \r\n    //Write functions ====================================================================================================================================\r\n    function setNewOwner(address user) external Owner {\r\n        _owner = user;\r\n        emit OwnershipTransfer(user);\r\n    }\r\n\r\n    function setManager(address user, bool state) external Owner {\r\n        _manager[user] = state;\r\n        emit SetManager(user, state);\r\n    }\r\n\r\n    //===============\r\n\r\n    function withdraw(address payable to, uint256 value) external Manager {\r\n        require(to.send(value), \"OMS: ISSUE_SENDING_FUNDS\");\r\n    }\r\n\r\n}\r\n\r\nabstract contract O_ERC721 is OMS, ERC165, IERC721, IERC721Metadata{ //OrcaniaERC721 Standard\r\n    using Strings for uint256;\r\n\r\n    string internal uriLink;\r\n    \r\n    uint256 internal _totalSupply;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n\r\n    mapping(uint256 => address) internal _owners;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(uint256 => address) public _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) public _operatorApprovals;\r\n\r\n    //Read Functions======================================================================================================================================================\r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function balanceOf(address owner) external view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) external view override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function totalSupply() public view override returns(uint256){return _totalSupply;}\r\n\r\n    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {\r\n        return string(abi.encodePacked(uriLink, tokenId.toString(), \".json\"));\r\n\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) external view override returns (address) {\r\n        require(_owners[tokenId] != address(0), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function tokensOf(address user, uint256 limit) external view returns(uint256[] memory nfts) {\r\n        nfts = new uint256[](limit);\r\n        uint256 index;\r\n\r\n        for(uint256 t=1; t <= _totalSupply && index < limit; ++t) {\r\n            if(_owners[t] == user) {nfts[index++] = t;}\r\n        }\r\n    }\r\n    \r\n    //Moderator Functions======================================================================================================================================================\r\n\r\n    function changeURIlink(string calldata newUri) external Manager {\r\n        uriLink = newUri;\r\n    }\r\n\r\n    function changeData(string calldata name, string calldata symbol) external Manager {\r\n        _name = name;\r\n        _symbol = symbol;\r\n    }\r\n\r\n    function adminMint(address to, uint256 amount) external Manager {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function adminMint(address to) external payable Manager {\r\n        _mint(to, msg.value);\r\n    }\r\n\r\n    function adminMint(address[] calldata to, uint256[] calldata amount) external Manager {\r\n        uint256 size = to.length;\r\n\r\n        for(uint256 t; t < size; ++t) {\r\n            _mint(to[t], amount[t]);\r\n        }\r\n    }\r\n\r\n    //User Functions======================================================================================================================================================\r\n    function approve(address to, uint256 tokenId) external override {\r\n        address owner = _owners[tokenId];\r\n\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        require(operator != msg.sender, \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata _data) external override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    //Internal Functions======================================================================================================================================================\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_owners[tokenId] != address(0), \"ERC721: operator query for nonexistent token\");\r\n        address owner = _owners[tokenId];\r\n        require(spender == owner || _tokenApprovals[tokenId] == spender || isApprovedForAll(owner, spender), \"ERC721: Not approved or owner\");\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 tokenId) internal {\r\n        require(_owners[tokenId] == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(_owners[tokenId], to, tokenId);\r\n    }\r\n\r\n    function _mint(address user, uint256 amount) internal {\r\n        uint256 tokenID = _totalSupply;\r\n\r\n        _balances[user] += amount;\r\n        _totalSupply += amount;\r\n        \r\n        for(uint256 t; t < amount; ++t) {\r\n            \r\n            _owners[++tokenID] = user;\r\n                \r\n            emit Transfer(address(0), user, tokenID);\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n\r\ncontract TRAF is O_ERC721 {\r\n\r\n    constructor() {\r\n        _name = \"The Red Ape Family\";\r\n        _symbol = \"TRAF\";\r\n        uriLink = \"https://ipfs.io/ipfs/QmNLozPFC34fZuzKWDb35hbmpUUZg9MBBVjBg8c6aUHc2A/EpisodeData\";\r\n    }\r\n\r\n    mapping(address => uint256) private _holdersMint_Mints;\r\n    bool private _holdersMint_Active;\r\n    function holdersMint() external payable{\r\n        require(_holdersMint_Active, \"MINT_OFF\");\r\n        require(_balances[msg.sender] > 0, \"NOT_HOLDER\");\r\n        require(msg.value % 250000000000000000 == 0, \"WRONG_VALUE\");\r\n\r\n        uint256 amount = msg.value / 250000000000000000;\r\n        require((_holdersMint_Mints[msg.sender] += amount) < 11, \"USER_MINT_LIMIT_REACHED\"); //Total mints of 10 per wallet\r\n\r\n        _mint(msg.sender, amount);\r\n\r\n        require(_totalSupply < 1778, \"MINT_LIMIT_REACHED\"); //Max of 1111 NFTs for ep3\r\n    }\r\n\r\n    mapping(address => uint256) private _wlPartnersMint_Mints;\r\n    uint256 private _wlPartnersMint_TotalMinted;\r\n    bool private _wlPartnersMint_Active;\r\n    function wlPartnersMint() external payable{\r\n        require(_wlPartnersMint_Active, \"MINT_OFF\");\r\n        require(\r\n            IERC721(0x219B8aB790dECC32444a6600971c7C3718252539).balanceOf(msg.sender) > 0 ||\r\n            IERC721(0xF1268733C6FB05EF6bE9cF23d24436Dcd6E0B35E).balanceOf(msg.sender) > 0 ||\r\n            IERC721(0x5DF340b5D1618c543aC81837dA1C2d2B17b3B5d8).balanceOf(msg.sender) > 0 ||\r\n            IERC721(0x9ee36cD3E78bAdcAF0cBED71c824bD8C5Cb65a8C).balanceOf(msg.sender) > 0 ||\r\n            IERC721(0x3a4cA1c1bB243D299032753fdd75e8FEc1F0d585).balanceOf(msg.sender) > 0 ||\r\n            IERC721(0xF3114DD5c5b50a573E66596563D15A630ED359b4).balanceOf(msg.sender) > 0\r\n        , \"NOT_PARTNER_HOLDER\");\r\n\r\n        require(msg.value % 350000000000000000 == 0, \"WRONG_VALUE\");\r\n\r\n        uint256 amount = msg.value / 350000000000000000;\r\n        require((_wlPartnersMint_Mints[msg.sender] += amount) < 2, \"USER_MINT_LIMIT_REACHED\"); //Total mints of 1 per wallet\r\n        require((_wlPartnersMint_TotalMinted += amount) < 889, \"MINT_LIMIT_REACHED\"); //Total mints of 888 for this mint\r\n\r\n        _mint(msg.sender, amount);\r\n\r\n        require(_totalSupply < 1778, \"MINT_LIMIT_REACHED\"); //Max of 1111 NFTs for ep3\r\n    }\r\n\r\n    mapping(address => uint256) private _nonWlPartnersMint_Mints;\r\n    bool private _nonWlPartnersMint_Active;\r\n    function nonWlPartnersMint() external payable{\r\n        require(_nonWlPartnersMint_Active, \"MINT_OFF\");\r\n        require(\r\n            IERC721(0x369156da04B6F313b532F7aE08E661e402B1C2F2).balanceOf(msg.sender) > 0 ||\r\n            IERC721(0x91cc3844B8271337679F8C00cB2d238886917d40).balanceOf(msg.sender) > 0 ||\r\n            IERC721(0x21AE791a447c7EeC28c40Bba0B297b00D7D0e8F4).balanceOf(msg.sender) > 0 \r\n        , \"NOT_PARTNER_HOLDER\");\r\n        \r\n        require(msg.value % 400000000000000000 == 0, \"WRONG_VALUE\");\r\n\r\n        uint256 amount = msg.value / 400000000000000000;\r\n        require((_nonWlPartnersMint_Mints[msg.sender] += amount) < 11, \"USER_MINT_LIMIT_REACHED\"); //Total mints of 10 per wallet\r\n\r\n        _mint(msg.sender, amount);\r\n\r\n        require(_totalSupply < 1778, \"MINT_LIMIT_REACHED\"); //Max of 1111 NFTs for ep3\r\n    }\r\n\r\n    function setMints(bool holdersMint_Active, bool wlPartnersMint_Active, bool nonWlPartnersMint_Active) external Manager {\r\n        _holdersMint_Active = holdersMint_Active;\r\n        _wlPartnersMint_Active = wlPartnersMint_Active;\r\n        _nonWlPartnersMint_Active = nonWlPartnersMint_Active;\r\n    }\r\n \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_operatorApprovals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenApprovals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"changeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"changeURIlink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonWlPartnersMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"holdersMint_Active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"wlPartnersMint_Active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nonWlPartnersMint_Active\",\"type\":\"bool\"}],\"name\":\"setMints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"tokensOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nfts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlPartnersMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TRAF", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://98533235b3c104e16cb56a31a6f8c845f8ca4ff7e5464dfbff4cb56f971ba5a0"}]}