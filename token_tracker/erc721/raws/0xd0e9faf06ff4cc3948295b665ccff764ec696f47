{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FeatheredFrens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Package.sol\\\";\\n\\n/**\\n * @title Feathered Frens\\n */\\ncontract FeatheredFrens is Package {\\n    receive() external payable {}\\n    fallback() external payable {}\\n\\n    event Withdraw(address operator, address receiver, uint256 value);\\n\\n    mapping(address => bool) private _whitelist;\\n    mapping(address => uint256) _mintLimit;\\n\\n    uint256 private _limit;\\n\\n    bool private _mintPaused;\\n    bool private _freeForAllPaused;\\n    bool private _locked;\\n\\n    modifier gate() {\\n        require(_locked == false, \\\"FF: reentrancy denied\\\");\\n        _locked = true;\\n        _;\\n        _locked = false;\\n    }\\n\\n    constructor(address _contractOwner, bytes32 _merkleRoot) Package(\\\"Feathered Frens\\\", \\\"FF\\\") {\\n        _transferOwnership(_contractOwner);\\n        _mintPaused = true;\\n        _freeForAllPaused = true;\\n        _locked == false;\\n        setMintLimit(10);\\n        setMerkleRoot(_merkleRoot);\\n    }\\n\\n    function mintPause(bool _bool) public ownership {\\n        _mintPaused = _bool;\\n    }\\n\\n    function mintPauseStatus() public view returns (bool) {\\n        return _mintPaused;\\n    }\\n\\n    function freeForAllPause(bool _bool) public ownership {\\n        _freeForAllPaused = _bool;\\n    }\\n\\n    function freeForAllPauseStatus() public view returns (bool) {\\n        return _freeForAllPaused;\\n    }\\n\\n    function setMintLimit(uint256 _amount) public ownership {\\n        _limit = _amount;\\n    }\\n\\n    function mintLimit() public view returns (uint256) {\\n        return _limit;\\n    }\\n\\n    function setMerkleRoot(bytes32 _merkleRoot) public ownership {\\n        _setMerkleRoot(_merkleRoot);\\n    }\\n\\n    function totalMinted(address _account) public view returns (uint256) {\\n        return _mintLimit[_account];\\n    }\\n\\n    function freeForAll(address _to, uint256 _quantity) public gate {\\n        require(_quantity + totalSupply() <= 5555, \\\"FF: maximum tokens minted\\\");\\n        require(_quantity <= mintLimit(), \\\"FF: 10 tokens allowed to mint\\\");\\n        require(_quantity + _mintLimit[_to] <= mintLimit(), \\\"FF: 10 tokens allowed to mint\\\");\\n        require(_freeForAllPaused != true, \\\"FF: minting is paused\\\");\\n        _mintLimit[_to] += _quantity;\\n        for (uint256 i=0; i < _quantity; i++) {\\n            _mint(_to);\\n        }\\n    }\\n\\n    function mint(address _to, bytes32[] calldata _merkleProof, uint256 _quantity) public gate {\\n        require(_quantity + totalSupply() <= 5555, \\\"FF: maximum tokens minted\\\");\\n        require(_quantity <= mintLimit(), \\\"FF: 10 tokens allowed to mint\\\");\\n        require(_quantity + _mintLimit[_to] <= mintLimit(), \\\"FF: 10 tokens allowed to mint\\\");\\n        require(_mintPaused != true, \\\"FF: minting is paused\\\");\\n        _mintLimit[_to] += _quantity;\\n        for (uint256 i=0; i < _quantity; i++) {\\n            _whitelistMint(_to, _merkleProof, merkleRoot());\\n        }\\n    }\\n\\n    function airdropBatch(address[] memory _to) public ownership {\\n        require(_to.length + totalSupply() <= 5555, \\\"FF: maximum tokens minted\\\");\\n        for (uint256 i = 0; i < _to.length; i++) {\\n            _mint(_to[i]);\\n        }\\n    }\\n\\n    function airdrop(address _to, uint256 _quantity) public ownership {\\n        require(_quantity + totalSupply() <= 5555, \\\"FF: maximum tokens minted\\\");\\n        for (uint256 i=0; i < _quantity; i++) {\\n            _mint(_to);\\n        }\\n    }\\n\\n    function withdraw(address _account) public ownership {\\n        uint256 balance = address(this).balance;\\n        (bool success, ) = payable(_account).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"FF: ether transfer failed\\\");\\n\\n        emit Withdraw(msg.sender, _account, balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Package.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC/721/ERC721.sol\\\";\\nimport \\\"./ERC/721/extensions/ERC721Metadata.sol\\\";\\nimport \\\"./ERC/721/receiver/ERC721Receiver.sol\\\";\\nimport \\\"./ERC/173/ERC173.sol\\\";\\nimport \\\"./ERC/165/ERC165.sol\\\";\\nimport \\\"./library/utils.sol\\\";\\n\\n/**\\n * @dev Feathered Frens package\\n */\\ncontract Package is ERC721, ERC721Metadata, ERC173, ERC165 {\\n    mapping(uint256 => address) private _tokenOwner;\\n    mapping(address => uint256) private _ownerBalance;\\n    mapping(uint256 => address) private _tokenApproval;\\n    mapping(address => mapping(address => bool)) private _operatorApproval;\\n\\n    bool private _reveal = false;\\n    bool private _baseSet = false;\\n    bool private _baseLock = false;\\n    bool _jsonExtension = false;\\n\\n    string private _name;\\n    string private _symbol;\\n    string private _extendedBaseUri;\\n\\n    uint256 private _currentId = 0;\\n    uint256 private _totalSupply = 0;\\n\\n    address private _ownership;\\n\\n    bytes32 private root;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function transferOwnership(address _newOwner) public override ownership {\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    function _transferOwnership(address _newOwner) internal {\\n        address previousOwner = _ownership;\\n        _ownership = _newOwner;\\n    \\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    modifier ownership() {\\n        require(owner() == msg.sender, \\\"ERC173: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function owner() public view override returns (address) {\\n        return _ownership;\\n    }\\n    \\n    function _setMerkleRoot(bytes32 _root) internal {\\n        root = _root;\\n    }\\n    \\n    function merkleRoot() internal view returns (bytes32) {\\n        return root;\\n    }\\n\\n    function _whitelistMint(address _to, bytes32[] calldata _merkleProof, bytes32 _merkleRoot) internal {\\n        bytes32 leaf = keccak256(abi.encodePacked(_to));\\n        require(utils.verify(_merkleProof, _merkleRoot, leaf), \\\"FF: invalid merkle proof.\\\");\\n        require(_currentId < 5555, \\\"ERC721: maximum tokens minted\\\");\\n        require(_to != address(0), \\\"ERC721: cannot mint to zero address\\\");\\n\\n        _currentId += 1;\\n        _totalSupply += 1;\\n        _tokenOwner[_currentId] = _to;\\n        _ownerBalance[_to] += 1;\\n\\n        emit Transfer(address(0), _to, _currentId);\\n    }\\n\\n    function _mint(address _to) internal {\\n        require(_currentId < 5555, \\\"ERC721: maximum tokens minted\\\");\\n        require(_to != address(0), \\\"ERC721: cannot mint to zero address\\\");\\n\\n        _currentId += 1;\\n        _totalSupply += 1;\\n        _tokenOwner[_currentId] = _to;\\n        _ownerBalance[_to] += 1;\\n\\n        emit Transfer(address(0), _to, _currentId);\\n    }\\n\\n    function reveal() public ownership {\\n        require(_baseLock == true, \\\"FF: reveal base not locked\\\");\\n        _reveal = true;\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_tokenId != 0, \\\"FF: token ID out of range\\\");\\n        require(_currentId >= _tokenId, \\\"FF: token ID out of range\\\");\\n        if (_reveal == true) {\\n            if (_jsonExtension == true) {\\n                return string(abi.encodePacked(_ipfs(), _extendedBaseUri, \\\"/\\\", utils.toString(_tokenId), \\\".json\\\"));\\n            } else {\\n                return string(abi.encodePacked(_ipfs(), _extendedBaseUri, \\\"/\\\", utils.toString(_tokenId)));\\n            }\\n        } else {\\n            return string(abi.encodePacked(_ipfs(), \\\"bafybeidvzxfejqzlftewxphrrqvee3r6sxf7mf6etdajcoawpz4sf5hve4/prereveal.json\\\"));\\n        }\\n    }\\n\\n    function checkURI(uint256 _tokenId) public view returns (string memory) {\\n        require(_baseSet == true, \\\"FF: CID has not been set\\\");\\n        require(_baseLock == false, \\\"FF: URI has been set\\\");\\n        if (_jsonExtension == true) {\\n            return string(abi.encodePacked(_ipfs(), _extendedBaseUri, \\\"/\\\", utils.toString(_tokenId), \\\".json\\\"));\\n        } else {\\n            return string(abi.encodePacked(_ipfs(), _extendedBaseUri, \\\"/\\\", utils.toString(_tokenId)));\\n        }\\n    }\\n\\n    function _ipfs() internal pure returns (string memory) {\\n        return \\\"ipfs://\\\";\\n    }\\n\\n    function revealBaseLocked() public view returns (bool) {\\n        return _baseLock;\\n    }\\n\\n    function lockRevealBase(bool _lockStatus) public ownership {\\n        require(_reveal == false, \\\"FF: reveal has already occured\\\");\\n        require(_baseSet == true, \\\"FF: reveal base not set\\\");\\n        _baseLock = _lockStatus;\\n    }\\n\\n    function setRevealBase(string memory _cid, bool _isExtension) public ownership {\\n        require(_baseLock == false, \\\"FF: already revealed\\\");\\n        _extendedBaseUri = _cid;\\n        _jsonExtension = _isExtension;\\n        _baseSet = true;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n    \\n    function balanceOf(address _owner) public view override returns (uint256) {\\n        return _ownerBalance[_owner];\\n    }\\n\\n    function ownerOf(uint256 _tokenId) public view override returns (address) {\\n        return _tokenOwner[_tokenId];\\n    }\\n\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public override {\\n        safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public override {\\n        _transfer(_from, _to, _tokenId);\\n    \\n        _onERC721Received(_from, _to, _tokenId, _data);\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _tokenId) public override {\\n        _transfer(_from, _to, _tokenId);\\n    }\\n\\n    function approve(address _approved, uint256 _tokenId) public override {\\n        require(_tokenOwner[_tokenId] == msg.sender);\\n        _tokenApproval[_tokenId] = _approved;\\n\\n        emit Approval(msg.sender, _approved, _tokenId);\\n    }\\n\\n    function setApprovalForAll(address _operator, bool _approved) public override {\\n        require(msg.sender != _operator, \\\"ERC721: cannot approve the owner\\\");\\n        _operatorApproval[msg.sender][_operator] = _approved;\\n    \\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    function getApproved(uint256 _tokenId) public view override returns (address) {\\n        return _tokenApproval[_tokenId];\\n    }\\n\\n    function isApprovedForAll(address _owner, address _operator) public view override returns (bool) {\\n        return _operatorApproval[_owner][_operator];\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\\n        require(ownerOf(_tokenId) == _from, \\\"ERC721: from address is not owner of token\\\");\\n        require(_tokenOwner[_tokenId] == msg.sender || _tokenApproval[_tokenId] == msg.sender || _operatorApproval[_from][msg.sender] == true, \\\"ERC721: unauthorized transfer\\\");\\n        require(_to != address(0), \\\"ERC721: cannot transfer to the zero address\\\");\\n        _ownerBalance[_from] -= 1;\\n        _tokenOwner[_tokenId] = _to;\\n        _tokenApproval[_tokenId] = address(0);\\n        _ownerBalance[_to] += 1;\\n\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    function _onERC721Received(address _from, address _to, uint256 _tokenId, bytes memory _data) private {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_to)\\n        }\\n        if (size > 0) {\\n            try ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) returns (bytes4 response) {\\n                if (response != ERC721Receiver.onERC721Received.selector) {\\n                    revert(\\\"ERC721: ERC721Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public pure override(ERC165) returns (bool) {\\n        return\\n            interfaceId == type(ERC165).interfaceId ||\\n            interfaceId == type(ERC173).interfaceId ||\\n            interfaceId == type(ERC721).interfaceId ||\\n            interfaceId == type(ERC721Metadata).interfaceId ||\\n            interfaceId == type(ERC721Receiver).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC/721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC721 standard\\n */\\ninterface ERC721 {\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;\\n\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n    function approve(address _approved, uint256 _tokenId) external;\\n\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC/721/extensions/ERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC721Metadata\\n */\\ninterface ERC721Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC/721/receiver/ERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC721Receiver\\n */\\ninterface ERC721Receiver {\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC/173/ERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC173 standard\\n */\\ninterface ERC173 {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() view external returns (address);\\n\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ERC/165/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard\\n */\\ninterface ERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/library/utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary utils {\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"airdropBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"freeForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"freeForAllPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeForAllPauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockStatus\",\"type\":\"bool\"}],\"name\":\"lockRevealBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"mintPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealBaseLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMintLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isExtension\",\"type\":\"bool\"}],\"name\":\"setRevealBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FeatheredFrens", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001ca3242f4065b0e75278feba3fb304f73d19f7b17389adee2a47b157dfee50442490ffcf11853ac3ad1b81621d455481aa25c5a9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}