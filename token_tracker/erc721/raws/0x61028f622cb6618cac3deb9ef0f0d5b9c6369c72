{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\r\n *\r\n * Does not support burning tokens to address(0).\r\n */\r\ncontract ERC721A is\r\n    Context,\r\n    ERC165,\r\n    IERC721,\r\n    IERC721Metadata,\r\n    IERC721Enumerable\r\n{\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint128 balance;\r\n        uint128 numberMinted;\r\n    }\r\n\r\n    uint256 private currentIndex = 0;\r\n\r\n    uint256 internal immutable collectionSize;\r\n    uint256 internal immutable maxBatchSize;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) private _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev\r\n     * `maxBatchSize` refers to how much a minter can mint at a time.\r\n     * `collectionSize_` refers to how many tokens are in the collection.\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 maxBatchSize_,\r\n        uint256 collectionSize_\r\n    ) {\r\n        require(\r\n            collectionSize_ > 0,\r\n            \"ERC721A: collection must have a nonzero supply\"\r\n        );\r\n        require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        maxBatchSize = maxBatchSize_;\r\n        collectionSize = collectionSize_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(index < totalSupply(), \"ERC721A: global index out of bounds\");\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\r\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\r\n        uint256 numMintedSoFar = totalSupply();\r\n        uint256 tokenIdsIdx = 0;\r\n        address currOwnershipAddr = address(0);\r\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\r\n            TokenOwnership memory ownership = _ownerships[i];\r\n            if (ownership.addr != address(0)) {\r\n                currOwnershipAddr = ownership.addr;\r\n            }\r\n            if (currOwnershipAddr == owner) {\r\n                if (tokenIdsIdx == index) {\r\n                    return i;\r\n                }\r\n                tokenIdsIdx++;\r\n            }\r\n        }\r\n        revert(\"ERC721A: unable to get token of owner by index\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC721Enumerable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721A: balance query for the zero address\"\r\n        );\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721A: number minted query for the zero address\"\r\n        );\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    function ownershipOf(uint256 tokenId)\r\n        internal\r\n        view\r\n        returns (TokenOwnership memory)\r\n    {\r\n        require(_exists(tokenId), \"ERC721A: owner query for nonexistent token\");\r\n\r\n        uint256 lowestTokenToCheck;\r\n        if (tokenId >= maxBatchSize) {\r\n            lowestTokenToCheck = tokenId - maxBatchSize + 1;\r\n        }\r\n\r\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\r\n            TokenOwnership memory ownership = _ownerships[curr];\r\n            if (ownership.addr != address(0)) {\r\n                return ownership;\r\n            }\r\n        }\r\n\r\n        revert(\"ERC721A: unable to determine the owner of token\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721A: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721A: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721A: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return tokenId < currentIndex;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - there must be `quantity` tokens remaining unminted in the total collection.\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` cannot be larger than the max batch size.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        uint256 startTokenId = currentIndex;\r\n        require(to != address(0), \"ERC721A: mint to the zero address\");\r\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\r\n        require(!_exists(startTokenId), \"ERC721A: token already minted\");\r\n        require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        AddressData memory addressData = _addressData[to];\r\n        _addressData[to] = AddressData(\r\n            addressData.balance + uint128(quantity),\r\n            addressData.numberMinted + uint128(quantity)\r\n        );\r\n        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n        uint256 updatedIndex = startTokenId;\r\n\r\n        for (uint256 i = 0; i < quantity; i++) {\r\n            emit Transfer(address(0), to, updatedIndex);\r\n            require(\r\n                _checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n                \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n            );\r\n            updatedIndex++;\r\n        }\r\n\r\n        currentIndex = updatedIndex;\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n        require(\r\n            isApprovedOrOwner,\r\n            \"ERC721A: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        require(\r\n            prevOwnership.addr == from,\r\n            \"ERC721A: transfer from incorrect owner\"\r\n        );\r\n        require(to != address(0), \"ERC721A: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        _addressData[from].balance -= 1;\r\n        _addressData[to].balance += 1;\r\n        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n        uint256 nextTokenId = tokenId + 1;\r\n        if (_ownerships[nextTokenId].addr == address(0)) {\r\n            if (_exists(nextTokenId)) {\r\n                _ownerships[nextTokenId] = TokenOwnership(\r\n                    prevOwnership.addr,\r\n                    prevOwnership.startTimestamp\r\n                );\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    uint256 public nextOwnerToExplicitlySet = 0;\r\n\r\n    /**\r\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\r\n     */\r\n    function _setOwnersExplicit(uint256 quantity) internal {\r\n        uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\r\n        require(quantity > 0, \"quantity must be nonzero\");\r\n        uint256 endIndex = oldNextOwnerToSet + quantity - 1;\r\n        if (endIndex > collectionSize - 1) {\r\n            endIndex = collectionSize - 1;\r\n        }\r\n        // We know if the last one in the group exists, all in the group exist, due to serial ordering.\r\n        require(_exists(endIndex), \"not enough minted yet for this cleanup\");\r\n        for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\r\n            if (_ownerships[i].addr == address(0)) {\r\n                TokenOwnership memory ownership = ownershipOf(i);\r\n                _ownerships[i] = TokenOwnership(\r\n                    ownership.addr,\r\n                    ownership.startTimestamp\r\n                );\r\n            }\r\n        }\r\n        nextOwnerToExplicitlySet = endIndex + 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract ApeRaffle is ERC721A, Ownable {\r\n\r\n    uint256 public apePrice = 42000000000000000;\r\n    uint256 public apeWlPrice = 0;\r\n    uint public maxApePurchase = 25;\r\n    uint public maxWlApePurchase = 1;\r\n    uint public ApeSup = 4200;\r\n    bool public drop_is_active = false;\r\n    bool public presale_is_active = true;\r\n    string public baseURI = \"https://ipfs.io/ipfs/QmNoKJrk5fLbaG1taXv1sYnuv3APrMsMs9JXYaQqFjTtXU\";\r\n    uint256 public tokensMinted = 0;\r\n\r\n    mapping(address => uint) addressesThatMinted;\r\n\r\n    struct Whitelistaddr {\r\n        uint256 presalemints;\r\n        bool exists;\r\n    }\r\n    mapping(address => Whitelistaddr) private whitelist;\r\n\r\n    constructor() ERC721A(\"ApeRaffle\", \"APED\",24, 10000){\r\n   \r\n   whitelist[0xdcf90FDd7EF37178A1dfB414D2Ef028d8681a83B].exists = true;\r\nwhitelist[0xE187F9D2abAd356D3Cd84fBb446766CB1dFDe5A4].exists = true;\r\nwhitelist[0x56ae97EDfdab3b367E8e0DDcdB63A0C4072B96D2].exists = true;\r\nwhitelist[0x6099381e17d4Ffb7a2717bb7Ee8067867442aA55].exists = true;\r\nwhitelist[0xD9e6E096649e183eB3F51f3A424EA940d4126a07].exists = true;\r\nwhitelist[0xea06264f9324c417d633a867B62D5f03e1346418].exists = true;\r\nwhitelist[0x77a38728E69098ACB6F6Dc343a69ad28a4B913a0].exists = true;\r\nwhitelist[0x5ED2698484c888C5701Bc0Af690ccA67F67Bc000].exists = true;\r\nwhitelist[0x035f4B090F4fE6a2d95a3e3617ba0FAF8C8322e5].exists = true;\r\nwhitelist[0x5382718773076C66198ee1a4fb82c2Ed47B362ED].exists = true;\r\nwhitelist[0xd5d1c5daF1Ef2807b4033c169eCc0F7e1CbCdFf9].exists = true;\r\nwhitelist[0x2318C512B95404d05b09936DB4836c78054253f7].exists = true;\r\nwhitelist[0x6eD487770e3065Ab5Ff038f757AAde4a35601C43].exists = true;\r\nwhitelist[0x1B065C320a3f889E57D2dA4C218b1d97e90C609a].exists = true;\r\nwhitelist[0xe819D78c8AE7Eb2c3BEBBED6CaCB6f91D6221735].exists = true;\r\nwhitelist[0x995484306Fa2833dc37A0cfCCDc237ECD54019e2].exists = true;\r\nwhitelist[0x93e4a8D7aA34CAed7669bfbd24037680277D277C].exists = true;\r\nwhitelist[0x1329eE6b4DeA88F48ecB25858F911b409847a74e].exists = true;\r\nwhitelist[0x6B18fb2248eD2fddD1c639EEC40fEd4A5d596747].exists = true;\r\nwhitelist[0x72466e0A114aC95661e2011633759F73Ef77943F].exists = true;\r\nwhitelist[0xe4FaDECA360813E6d0AFF959E0f7F256EEA5A26b].exists = true;\r\nwhitelist[0xd7cc1a676F987001b9F622adfC50788ad908e505].exists = true;\r\nwhitelist[0x64BC4Ed143D0c2043D6A93C1C3214022622b7D6C].exists = true;\r\nwhitelist[0x70627c9376F78F4e69b12094c2eEC4d187433340].exists = true;\r\nwhitelist[0xf1D6212ee15486a0E1541FD68318a2de4abF872d].exists = true;\r\nwhitelist[0xD9393a4EC941E0456Dd51Ce8EA65765C76295366].exists = true;\r\nwhitelist[0x6D1DEDAceB920980Ae80e2C901971755296Ca41e].exists = true;\r\nwhitelist[0x6F9a0Ab8B1e7098B31031d1b2ca6daD090E2122E].exists = true;\r\nwhitelist[0x9BeB2df4Bf7Ddd5f06f7Ac71ecaB0440246278CE].exists = true;\r\nwhitelist[0xaF88a198559D08B5932a5dF63b6Be42bE8f96eE1].exists = true;\r\nwhitelist[0x0C07747AB98EE84971C90Fbd353eda207B737c43].exists = true;\r\nwhitelist[0xB72eDF2669F2b05571aE4eE0E045D5927982b1a9].exists = true;\r\nwhitelist[0xA2B48C299A90303E758680E4FdEcE6C0AdC1D588].exists = true;\r\nwhitelist[0x974BFb4a344da64Ae216E8c21b70c3235cac7CF8].exists = true;\r\nwhitelist[0x36Fa3E52D58A7401Be46353F50667FBf931e4F42].exists = true;\r\nwhitelist[0x65960E16ff98732704d8FFc86ff736f5A4a032F2].exists = true;\r\nwhitelist[0x0D54d4500FACb7f836868A94daAb41ABdcFAB0A8].exists = true;\r\nwhitelist[0x18651bC48BC18110C99332f63BB921Cf0592cA53].exists = true;\r\nwhitelist[0xD75301B8Aad060377D616098d91Bbc42054C2074].exists = true;\r\nwhitelist[0x21EbFbbb8dF82E20d7130e0A35B1C6A22068380a].exists = true;\r\nwhitelist[0x6C8A0db8610F08159d3be7a2bFeCb8624E76aC79].exists = true;\r\nwhitelist[0x7AD79B83575BECB692bddF23909b74f1F52503De].exists = true;\r\nwhitelist[0x9Baf7C87825e382408a5C17D36af48d3c8A4756B].exists = true;\r\nwhitelist[0xE77c2317E7d9170f374A6ce32877E95E91E6AE92].exists = true;\r\nwhitelist[0xA3C35f9eb6EB55db0Ab0311749b7D95Ce2B9bC52].exists = true;\r\nwhitelist[0x75256484A5f5e56D2c0189ed64Aa7CF4C677E2E6].exists = true;\r\nwhitelist[0x63ff0cBf0A777e9c2F84F0386947F0c86B99a939].exists = true;\r\nwhitelist[0xAB8782298BB8c647562c8D80c794E6E013852f99].exists = true;\r\nwhitelist[0x1cFacf54fcA7A1574666325cDf0F5387db97752a].exists = true;\r\nwhitelist[0x66Ce82ab8dc9ce4C93f244E56e7647d81a8a97D5].exists = true;\r\nwhitelist[0xE31515776f6CC88F57B6f697f4F5c11D2269e862].exists = true;\r\nwhitelist[0x3ef083f9f48B5f3b7734aA582f7BF04cf2D4b173].exists = true;\r\nwhitelist[0x5BE48Eb33ecC783CE0dBf17Ce0d392bDC3D1C5de].exists = true;\r\nwhitelist[0x97F7c8A4F4734CB893024Ea0fD563CebEEc5B0e2].exists = true;\r\nwhitelist[0x973477e108f9e5B4aA61CC5B972015daf3c20f5a].exists = true;\r\nwhitelist[0xfebbB48C8f7A67Dc3DcEE19524A410E078e6A6a1].exists = true;\r\nwhitelist[0xA15Cee6667054F7cE834c7E5d2a06dBa4454a227].exists = true;\r\nwhitelist[0x219C9F6799a890f2093Fa0a87277C976DDc46f2D].exists = true;\r\nwhitelist[0xd0aA5209e5B1594215e1450C4e7596bB3066E330].exists = true;\r\nwhitelist[0x54A987BB76eB866dc2359D6a7f7B8E160BD48f39].exists = true;\r\nwhitelist[0xEB0AADED83e56137a526ed20D66645D6955cA0fb].exists = true;\r\nwhitelist[0x2eCC650E73D984DB98c2d239108D2931BdAB7028].exists = true;\r\nwhitelist[0x97E054d5C8BAdE27F527b8d76287F78978f1242F].exists = true;\r\nwhitelist[0xF96CB1BB32542129b2F2f3248e90252D7291f27F].exists = true;\r\nwhitelist[0x441839Ca1653706192D4cc1B1d1698f50108e01b].exists = true;\r\nwhitelist[0x8a8117c238f01F7F9AA835BE5735c7B2B33d7315].exists = true;\r\nwhitelist[0xd3F332cF93Cb42dBF4f39dF4001f157165eaC1E6].exists = true;\r\nwhitelist[0x5100650a6F0d69795Ed52ccCfdD5f6651A18EDed].exists = true;\r\nwhitelist[0x027C73dF1f9F1b846bb79c0D23C6c5a5798a747F].exists = true;\r\nwhitelist[0x63a5b7C95447E2c1CfbC904932027E19534e63e2].exists = true;\r\nwhitelist[0xABA5509bDcAF5D7B97d65a3Bc9aA5261a14119b1].exists = true;\r\nwhitelist[0xfB63762F4D921437B09dd1E69cfcc357D3299175].exists = true;\r\nwhitelist[0x5F6777cfD0652d7E8C249152fF1B36c721E250eA].exists = true;\r\nwhitelist[0x1F1D2A3fa9b32429B709694BEa92192A685eaF72].exists = true;\r\nwhitelist[0x18eb9EFBAb54297cb2c75b3eE01F8471a3953571].exists = true;\r\nwhitelist[0xDE051A2A43A18F76626296F09207934270EF5D71].exists = true;\r\nwhitelist[0x99FD27b7A783a69e71D56C8B1309ee1e158Ba48a].exists = true;\r\nwhitelist[0x79E19185F624a861051be468cc137Ab1e90539a9].exists = true;\r\nwhitelist[0x95e122628A0f323598460A071555c38cdc46fe00].exists = true;\r\nwhitelist[0xb342eFb33f6AeA4184bF0917b3883d4333Fb3950].exists = true;\r\nwhitelist[0x454f40135BFfB862559223fb2A8614ddb5977aDD].exists = true;\r\nwhitelist[0xfBfc29e19B1E235b3a1B86DD3BE037e9617b1991].exists = true;\r\nwhitelist[0xEA771c3aA97fC8DbA614ECf6de91D7B2b595EF1a].exists = true;\r\nwhitelist[0xe6723F96A3485783cb89F84C0C53Ea88B0410a17].exists = true;\r\nwhitelist[0x5F1F88a17BEB89E9B51C8167382569F8F5FB89Af].exists = true;\r\nwhitelist[0x097bf2c7CDF1543238e88abd675A26cde1aa3259].exists = true;\r\nwhitelist[0xc74b35a30e6CEf0a0c7dAE582b87200285C2af6b].exists = true;\r\nwhitelist[0x9d509C23f0170760920FDf24D0315e7E70903fC6].exists = true;\r\nwhitelist[0x29146D7c15d94f19fb92863b80898ca93a659C54].exists = true;\r\nwhitelist[0x626f1Ceb00a2112f1dEfBb1ebF9EFdb98d88830f].exists = true;\r\nwhitelist[0x0B0237aD59e1BbCb611fdf0c9Fa07350C3f41e87].exists = true;\r\nwhitelist[0xD8dBC8Db662B2712c5C9E1e66A961c427a81bE3d].exists = true;\r\nwhitelist[0x4e4CC29ab82cf8aa4EcD3578A26409E57793de4b].exists = true;\r\nwhitelist[0xd7DFF7399E8F45490c708f5eC1A4a39993B7b4A6].exists = true;\r\nwhitelist[0xe973B9fDC98586D0BE196fC5dA93e6D26CE9A899].exists = true;\r\nwhitelist[0xcd245Eb87Cce56756BBF4661A5a88999A48d8752].exists = true;\r\nwhitelist[0x212Ed9cf16aA66e0DB9b8483E82908659D3f5370].exists = true;\r\nwhitelist[0xB5905960c0224d9333fC58eb60E2B57423b18d99].exists = true;\r\nwhitelist[0x036D0560582c444ff13d5822e2759A9f1E3D1e1e].exists = true;\r\nwhitelist[0xd7125Fec3a9a58EcC15449e124813887b1ea2ecF].exists = true;\r\nwhitelist[0xdC18E236e31aB28115E35ebE446ddCf333fE9a58].exists = true;\r\n\r\n    }\r\n\r\n    function OnWhiteList(address walletaddr)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        if (whitelist[walletaddr].exists){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function addToWhiteList (address[] memory newWalletaddr) public onlyOwner{\r\n        for (uint256 i = 0; i<newWalletaddr.length;i++){\r\n            whitelist[newWalletaddr[i]].exists = true;\r\n        }        \r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n    require(payable(msg.sender).send(address(this).balance));\r\n    }\r\n\r\n    function flipDropState() public onlyOwner {\r\n        drop_is_active = !drop_is_active;\r\n    }\r\n\r\n    function flipPresaleSate() public onlyOwner {\r\n        presale_is_active = !presale_is_active;\r\n    }\r\n\r\n    function PresaleMint(uint256 numberOfTokens) public payable{\r\n        require(presale_is_active, \"Please wait until the PreMint has begun!\");\r\n        require(whitelist[msg.sender].exists == true, \"This Wallet is not able mint for presale\"); \r\n        require(numberOfTokens > 0 && tokensMinted + numberOfTokens <= ApeSup, \"Purchase would exceed current max supply of tickets\");\r\n        require(whitelist[msg.sender].presalemints + numberOfTokens <= maxWlApePurchase,\"This Wallet has already minted its reserved tickets\");\r\n        require(msg.value >= apeWlPrice * numberOfTokens, \"ETH value sent is too little for this many tickets\");\r\n        addressesThatMinted[msg.sender] += numberOfTokens;\r\n        whitelist[msg.sender].presalemints += numberOfTokens;\r\n\r\n        _safeMint(msg.sender, numberOfTokens);\r\n    }\r\n\r\n    function mintApeRaffle(uint numberOfTokens) public payable {\r\n        require(drop_is_active, \"Please wait until the Public sale is active to mint\");\r\n        require(numberOfTokens > 0 && numberOfTokens <= maxApePurchase);\r\n        require(tokensMinted + numberOfTokens <= ApeSup, \"Purchase would exceed max supply of tickets\");\r\n        require(msg.value >= apePrice * numberOfTokens, \"ETH value sent is too little for this many tickets\");\r\n        require(((addressesThatMinted[msg.sender] + numberOfTokens) ) <= maxApePurchase , \"this would exceed mint max allowance\");\r\n\r\n        addressesThatMinted[msg.sender] += numberOfTokens;\r\n\r\n        _safeMint(msg.sender, numberOfTokens);\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function setBaseURI(string memory newBaseURI)public onlyOwner{\r\n        baseURI = newBaseURI;\r\n    }\r\n    function changeMintPrice(uint256 newPrice) public onlyOwner {\r\n        // require(newPrice < apePrice); removing mandate to go lower\r\n        apePrice = newPrice;\r\n    }\r\n    function changeWlMintPrice(uint256 newWlPrice) public onlyOwner {\r\n        // require(newPrice < apePrice); removing mandate to go lower\r\n        apeWlPrice = newWlPrice;\r\n    }\r\n    function changeMintSupply(uint256 newSupply) public onlyOwner {\r\n        // require(newSupply < ApeSup); removing mandate to go lower\r\n        require(newSupply > totalSupply());\r\n        ApeSup = newSupply;\r\n    }\r\n    function changeMaxApePurchase(uint256 newMaxApePurchase) public onlyOwner {\r\n\r\n        maxApePurchase = newMaxApePurchase;\r\n    }\r\n    function changeMaxWlApePurchase(uint256 newMaxWlApePurchase) public onlyOwner {\r\n\r\n        maxWlApePurchase = newMaxWlApePurchase;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ApeSup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletaddr\",\"type\":\"address\"}],\"name\":\"OnWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"PresaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newWalletaddr\",\"type\":\"address[]\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeWlPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxApePurchase\",\"type\":\"uint256\"}],\"name\":\"changeMaxApePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWlApePurchase\",\"type\":\"uint256\"}],\"name\":\"changeMaxWlApePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSupply\",\"type\":\"uint256\"}],\"name\":\"changeMintSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWlPrice\",\"type\":\"uint256\"}],\"name\":\"changeWlMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drop_is_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipDropState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPresaleSate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApePurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWlApePurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintApeRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale_is_active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ApeRaffle", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a3ea1ae6ff35caf3ce3d02e358f13d433a93bb9b10178d4061316be7d76765cb"}]}