{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SubdomainFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\n//Author: @hodl_pcc << twitter\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./registration-rules.sol\\\";\\r\\nimport \\\"./interfaces/IERC2981.sol\\\";\\r\\nimport \\\"./interfaces/IENSToken.sol\\\";\\r\\nimport \\\"./interfaces/IManager.sol\\\";\\r\\nimport \\\"./interfaces/IMetadata.sol\\\";\\r\\nimport \\\"./interfaces/IRegister.sol\\\";\\r\\nimport \\\"./interfaces/IENSAdmin.sol\\\";\\r\\nimport \\\"./interfaces/IReverseResolver.sol\\\";\\r\\nimport \\\"./interfaces/ICCIPResolver.sol\\\";\\r\\nimport \\\"./metadata-provider.sol\\\";\\r\\nimport \\\"./ENSEnumerable.sol\\\";\\r\\nimport \\\"./EnsTldWrapper.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n\\r\\nstruct EnsInfo {\\r\\n    uint256 id;\\r\\n    string domain;\\r\\n    uint256 royalty;\\r\\n    address owner;\\r\\n    bool locked;\\r\\n    uint256 price;\\r\\n    string image;\\r\\n    bytes32 domainHash;\\r\\n    address currentLocation;\\r\\n    uint256 expiry;\\r\\n\\r\\n}\\r\\n\\r\\ncontract SubdomainFactory is  IManager, IERC721Receiver, Ownable, ERC165, ERC721, IERC2981, ENSEnumerable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    event DepositEns(address indexed _from, uint256 indexed _id, string _domainLabel);\\r\\n    event TransferEnsOwnership(address indexed _from, address indexed _to, uint256 indexed _id);\\r\\n    event WithdrawEns(address indexed _to, uint256 indexed _id);\\r\\n    event WithdrawFunds(address indexed _addr, uint256 _funds);\\r\\n    event UpdateDomainDefaultImage(address indexed _addr, uint256 indexed _id, string _image);\\r\\n    event UpdateDomainDefaultMintPrice(address indexed _addr, uint256 indexed _id, uint256 _defaultPriceInWei);\\r\\n    event UpdateDomainRoyaltyPercentage(address indexed _addr, uint256 indexed _id, uint256 _percentage);\\r\\n    event UpdateDomainRegistrationRules(address indexed _addr, uint256 indexed _id, address indexed _registrationStrategy);\\r\\n    event LockEnsDomain(address indexed _addr, uint256 indexed _id);\\r\\n    event SubdomainRegistered(address indexed _addr, uint256 indexed _id, uint256 indexed _subdomainId, string _subDomain);\\r\\n    event AddrChanged(bytes32 indexed node, address a);\\r\\n\\r\\n    address constant ENS_ADDRESS = 0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e;\\r\\n    address constant PUBLIC_RESOLVER_ADDRESS = 0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41;\\r\\n    address constant REVERSE_RESOLVER_ADDRESS = 0x084b1c3C81545d370f3634392De611CaaBFf8148;\\r\\n    address constant ENS_TOKEN_ADDRESS = 0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85;\\r\\n\\r\\n    IReverseResolver public ReverseResolver = IReverseResolver(REVERSE_RESOLVER_ADDRESS);\\r\\n    IENSAdmin public PublicResolver = IENSAdmin(PUBLIC_RESOLVER_ADDRESS);\\r\\n    IENSToken public EnsToken = IENSToken(ENS_TOKEN_ADDRESS);\\r\\n    ENS private ens = ENS(ENS_ADDRESS); \\r\\n\\r\\n    EnsTldWrapper public EnsWrapper;\\r\\n    IRegister public DefaultRegister;\\r\\n    ICCIPResolver public CCIPResolver;\\r\\n    bool public CCIPResolverLocked;   \\r\\n    IMetadata public MetaData;\\r\\n    uint256 private currentId; \\r\\n    uint256 public ContractOwnerPrimaryRoyalties = 2;\\r\\n    uint256 public MinDomainExpiry = 90 days;\\r\\n    mapping(uint256 => address) public TokenOwnerMap;\\r\\n    mapping(uint256 => bool) public TokenLocked;\\r\\n    mapping(bytes32 => uint256) public HashToIdMap;\\r\\n    mapping(uint256 => bytes32) public IdToHashMap;\\r\\n    mapping(uint256 => uint256) public IdToOwnerId;\\r\\n    mapping(uint256 => string) public IdToLabelMap;\\r\\n    mapping(uint256 => IRegister) public IdToRegisterMap;\\r\\n    mapping(uint256 => bool) public IdToUseCCIPMap;\\r\\n    mapping(address => mapping(uint256 => address)) public RedirectAddress;\\r\\n    mapping(bytes32 => mapping(string => string)) public texts;\\r\\n    mapping(uint256 => string) public IdToDomain;\\r\\n    mapping(uint256 => uint256) public IdRoyaltyMap;\\r\\n    mapping(uint256 => string) public IdImageMap;\\r\\n    mapping(uint256 => uint256) public DefaultMintPrice;\\r\\n    mapping(address => uint256) public OwnerFunds;\\r\\n\\r\\n    uint256 public ContractOwnerFunds;\\r\\n\\r\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\r\\n\\r\\n    uint256 public DepositCost = 0.1 ether;\\r\\n\\r\\n    constructor() ERC721(\\\"ENS sub-domains\\\", \\\"ESF\\\"){\\r\\n         MetaData = new MetadataProviderV1(this);\\r\\n         DefaultRegister = new RegistrationRulesV1(this);\\r\\n         EnsWrapper = new EnsTldWrapper(this);\\r\\n         EnsWrapper.transferOwnership(msg.sender); //just so can update metadata link\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,   \\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4){\\r\\n        require(address(this) == operator, \\\"only transfer from contract address\\\");\\r\\n        return bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"));\\r\\n    }\\r\\n\\r\\n\\r\\n    fallback() payable external {\\r\\n        ContractOwnerFunds += msg.value;\\r\\n    }\\r\\n\\r\\n    receive() payable external {\\r\\n        ContractOwnerFunds += msg.value;\\r\\n    }\\r\\n\\r\\n    function withdrawEns(uint256 _id) external tokenOwner(_id) {\\r\\n\\r\\n        require(!TokenLocked[_id], \\\"token is locked\\\");\\r\\n        EnsToken.safeTransferFrom(address(this), msg.sender, _id);\\r\\n        EnsWrapper.burn(_id);\\r\\n        _beforeTLDTransfer(msg.sender, address(0), _id);\\r\\n\\r\\n        emit WithdrawEns(msg.sender, _id);\\r\\n    }\\r\\n\\r\\n\\r\\nfunction depositEns(string calldata _label, uint256 _royalty, uint256 _mintPrice, string calldata _defaultImageUri) payable external {\\r\\n    depositEns(_label, _royalty, _mintPrice, _defaultImageUri, DefaultRegister, false);\\r\\n}\\r\\n\\r\\n    //only pay for the first deposit of a token.\\r\\n    function getDepositCost(uint256 _id) public view returns(uint256) {\\r\\n        return TokenOwnerMap[_id] == address(0) ? DepositCost : 0;\\r\\n    }\\r\\n\\r\\n    function getSubdomainCost(uint256 _tokenId, string calldata _label, address _addr, bytes32[] calldata _proofs) external view returns (uint256){\\r\\n        require(EnsToken.ownerOf(_tokenId) == address(this), \\\"token not in contract\\\");\\r\\n        return IdToRegisterMap[_tokenId].mintPrice(_tokenId, _label, _addr, _proofs);\\r\\n    }\\r\\n    ///Deposit the ENS token and register it for sub-domain creation\\r\\n    ///This costs the fixed amount that is set by the contract owner\\r\\n    ///@param _label label of the .eth domain that is being deposited\\r\\n    // the id is worked out from the text\\r\\n    ///@param _royalty Royalty % should be integer 0 - 10\\r\\n    ///@param _mintPrice should be more than 0.01 ether\\r\\n    function depositEns(string calldata _label, uint256 _royalty, uint256 _mintPrice, string calldata _defaultImageUri, IRegister _registrationStrategy, bool _useCCIP) payable public {\\r\\n        uint256 id = getIdFromLabel(_label);\\r\\n        require(msg.value == getDepositCost(id), \\\"incorrect ether\\\");             \\r\\n        require(EnsToken.nameExpires(id) > (block.timestamp.add(MinDomainExpiry)), \\\"domain expires too early\\\");\\r\\n\\r\\n        EnsToken.reclaim(id, address(this));\\r\\n        bytes32 domainHash = getDomainHash(_label);\\r\\n\\r\\n        if (ens.resolver(domainHash) != address(PublicResolver) \\r\\n            && (!_useCCIP || address(CCIPResolver) == address(0))){\\r\\n\\r\\n                ens.setResolver(domainHash, address(PublicResolver));\\r\\n        }\\r\\n\\r\\n        //if resolver is already set to public and _useCCIP is false then do nothing\\r\\n\\r\\n        if (_useCCIP && address(CCIPResolver) != address(0)){\\r\\n            ens.setResolver(domainHash, address(this));\\r\\n            IdToUseCCIPMap[id] = true;\\r\\n        }\\r\\n\\r\\n        EnsToken.safeTransferFrom(msg.sender, address(this), id);\\r\\n        TokenOwnerMap[id] = msg.sender;\\r\\n        IdToDomain[id] = _label;\\r\\n\\r\\n        IdToRegisterMap[id] = _registrationStrategy;\\r\\n\\r\\n        ContractOwnerFunds = ContractOwnerFunds.add(msg.value);\\r\\n\\r\\n        if(_royalty > 0){\\r\\n            setRoyaltyPercent(id, _royalty);            \\r\\n        }\\r\\n\\r\\n        if(_mintPrice > 0){\\r\\n            setMintPrice(id, _mintPrice);                      \\r\\n        }\\r\\n\\r\\n        if(bytes(_defaultImageUri).length > 0){\\r\\n            setSubdomainImageUri(id, _defaultImageUri);           \\r\\n        }\\r\\n\\r\\n        IdToRegisterMap[id] = _registrationStrategy;\\r\\n\\r\\n        emit UpdateDomainRegistrationRules(msg.sender, id, address(_registrationStrategy));\\r\\n        emit DepositEns(msg.sender, id, _label);\\r\\n\\r\\n        //if the token has expired then it may be redeposited\\r\\n        if(EnsWrapper.exists(id)){\\r\\n            EnsWrapper.burn(id);\\r\\n            TokenLocked[id] = false;\\r\\n            _beforeTLDTransfer(msg.sender, address(0), id);\\r\\n        }\\r\\n\\r\\n            EnsWrapper.mint(msg.sender, id);\\r\\n            _beforeTLDTransfer(address(0), msg.sender, id);                 \\r\\n    }\\r\\n\\r\\n    ///helper method for getting ens id from the domain label\\r\\n    function getIdFromLabel(string calldata _label) public pure returns(uint256 id) {\\r\\n        bytes32 labelHash = keccak256(abi.encodePacked(_label));\\r\\n        id = uint256(labelHash);\\r\\n    }\\r\\n\\r\\n    ///function to register sub-domain\\r\\n    ///@param _id token id of the parent ens domain\\r\\n    ///@param _label label for the subdomain, should be lower-case, numeric not uppercase\\r\\n    function registerSubdomain(uint256 _id, string calldata _label, bytes32[] calldata _proofs) payable public {\\r\\n        address owner = TokenOwnerMap[_id];\\r\\n        //owner can always mint sub-domains of their TLD\\r\\n        if (msg.sender != owner){\\r\\n            //use ID specific registration strategy    \\r\\n            //can be used for whitelist minting / payment strategy / label exclusion etc        \\r\\n            require(IdToRegisterMap[_id].canRegister(_id, _label, msg.sender, msg.value, _proofs));\\r\\n        }\\r\\n\\r\\n        uint256 ownerCut;\\r\\n\\r\\n        if (msg.value > 0){\\r\\n            //owner primary cut is maximum 5% (set at 2% for contract deployment, unlikely to change)\\r\\n            ownerCut = (msg.value / 100) * ContractOwnerPrimaryRoyalties;\\r\\n            ContractOwnerFunds = ContractOwnerFunds.add(ownerCut);\\r\\n            OwnerFunds[owner] = OwnerFunds[owner].add(msg.value - ownerCut);\\r\\n        }\\r\\n\\r\\n        register(_id, _label, msg.sender);       \\r\\n    }\\r\\n\\r\\n    function register(uint256 _tokenId, string memory _label, address _addr) private {\\r\\n        bytes32 encoded_label = keccak256(abi.encodePacked(_label));\\r\\n        bytes32 domainHash = getDomainHash(IdToDomain[_tokenId]);\\r\\n        bytes32 hashed = keccak256(abi.encodePacked(domainHash, encoded_label));\\r\\n\\r\\n        //we only check this contract for minted sub-domains. If you wish to protect sub-domains\\r\\n        //registered externally then these will require specifying in some custom registration rules\\r\\n        require(HashToIdMap[hashed] == 0, \\\"sub-domain already exists\\\");\\r\\n        require(!ens.recordExists(hashed), \\\"sub-domain already exists outside of esf.eth\\\");\\r\\n\\r\\n        //start from ID 1, this is because of the above check ^^\\r\\n        uint256 id = ++currentId;\\r\\n\\r\\n        IdToHashMap[id] = hashed;\\r\\n        HashToIdMap[hashed] = id;\\r\\n        _safeMint(_addr, id);\\r\\n        IdToOwnerId[id] = _tokenId; //_tokenId is the parent ens id\\r\\n        IdToLabelMap[id] = _label;\\r\\n        ens.setSubnodeRecord(domainHash, encoded_label, address(this), address(this), 0);\\r\\n\\r\\n        emit SubdomainRegistered(_addr, _tokenId, id, name(hashed));\\r\\n    }\\r\\n\\r\\n\\r\\n    ///@param node nodes representaion of the full domain\\r\\n    ///@param key key of the key:value pair to return\\r\\n    ///@return value of the key. avatar is default but it can be overridden\\r\\n    function rawText(bytes32 node, string calldata key) public view returns (string memory) {\\r\\n        string memory value = texts[node][key];\\r\\n        \\r\\n        if(keccak256(abi.encodePacked(key)) == keccak256(\\\"avatar\\\") && bytes(value).length == 0){\\r\\n            uint256 id = HashToIdMap[node];\\r\\n            uint256 owner = IdToOwnerId[id];\\r\\n            value = IdImageMap[owner];\\r\\n        }\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n\\r\\n    ///interface method\\r\\n    ///@param node nodes representaion of the full domain\\r\\n    ///@param key key of the key:value pair to return\\r\\n    ///@return value of the key. avatar is default but it can be overridden\\r\\n    function text(bytes32 node, string calldata key) external view returns (string memory) {\\r\\n        uint256 id = HashToIdMap[node];\\r\\n        //added ccip proxy resolver to \\\"future proof\\\"\\r\\n        if (shouldUseCcipResolver(IdToOwnerId[id])) {\\r\\n            return CCIPResolver.text(node, key);\\r\\n        }\\r\\n        else {\\r\\n            return rawText(node, key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //standard interface method\\r\\n    function addr(bytes32 nodeID) public view returns (address) {\\r\\n        uint256 id = HashToIdMap[nodeID];\\r\\n\\r\\n        //added in ccip resolver to \\\"future proof\\\"\\r\\n        if (shouldUseCcipResolver(IdToOwnerId[id])) {\\r\\n            return CCIPResolver.addr(nodeID);\\r\\n        }\\r\\n        else {\\r\\n            address owner = ownerOf(id);\\r\\n            address redirect = RedirectAddress[owner][id];\\r\\n            return (redirect == address(0)) ? owner : redirect;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function shouldUseCcipResolver(uint256 _id) private view returns(bool){\\r\\n        //0 for wildcard entries.. will need to add extra logic inside of registration\\r\\n        //rules to stop off-chain sub-domains being reregistered\\r\\n        return (IdToUseCCIPMap[_id] || _id == 0) \\r\\n                && address(CCIPResolver) != address(0);\\r\\n    }\\r\\n\\r\\n\\r\\n    function name(bytes32 node) view public returns (string memory){\\r\\n        uint256 id = HashToIdMap[node];\\r\\n        uint256 owner = IdToOwnerId[id];\\r\\n\\r\\n        //added in ccip resolver to \\\"future proof\\\"\\r\\n        if (shouldUseCcipResolver(owner)) {\\r\\n            return CCIPResolver.name(node);\\r\\n        }\\r\\n        else {\\r\\n\\r\\n            string memory domain = IdToDomain[owner];\\r\\n            string memory label = IdToLabelMap[id];\\r\\n            return string(abi.encodePacked(label,\\\".\\\",domain,\\\".eth\\\"));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, ERC165, ERC721) returns(bool){\\r\\n        return super.supportsInterface(interfaceId) \\r\\n        || interfaceId == 0x3b3b57de //addr\\r\\n        || interfaceId == 0x59d1d43c //text\\r\\n        || interfaceId == 0x691f3431 //name\\r\\n        || interfaceId == 0x2a55205a //royalties\\r\\n        || interfaceId == 0x01ffc9a7; //supportsInterface << [inception];\\r\\n    }\\r\\n    ///this is the correct method for creating a 2 level ENS namehash\\r\\n    function getDomainHash(string memory _domain) public pure returns (bytes32 namehash) {\\r\\n            namehash = 0x0;\\r\\n            namehash = keccak256(abi.encodePacked(namehash, keccak256(abi.encodePacked('eth'))));\\r\\n            namehash = keccak256(abi.encodePacked(namehash, keccak256(abi.encodePacked(_domain))));\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view  override(ERC721) returns(string memory){\\r\\n        require(_exists(tokenId), \\\"token does not exist\\\");\\r\\n\\r\\n        return MetaData.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    //user can set an address redirect for any delegated address. The redirect is only active\\r\\n    //whilst the NFT is in the wallet that set it. Set to `0x0000000000000000000000000000000000000000`\\r\\n    //to remove redirect\\r\\n    function setRedirect(uint256 _id, address _to) external {\\r\\n        //token checked if it exists in _isApprovedOrOwner method\\r\\n        require(_isApprovedOrOwner(msg.sender, _id), \\\"not approved\\\");\\r\\n        address owner = ownerOf(_id);\\r\\n        RedirectAddress[owner][_id] = _to;\\r\\n        emit AddrChanged(IdToHashMap[_id], _to == address(0) ? owner : _to);\\r\\n    }\\r\\n\\r\\n        function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override {\\r\\n        emit AddrChanged(IdToHashMap[tokenId], RedirectAddress[to][tokenId] == address(0) ? to : RedirectAddress[to][tokenId]);\\r\\n    }\\r\\n\\r\\n    function setText(bytes32 node, string calldata key, string calldata value) external {\\r\\n        uint256 token_id = HashToIdMap[node];\\r\\n        require(_exists(token_id), \\\"token does not exist\\\");\\r\\n        require(_isApprovedOrOwner(msg.sender, token_id), \\\"not approved\\\");\\r\\n        \\r\\n        texts[node][key] = value;\\r\\n        emit TextChanged(node, key, key);\\r\\n    }\\r\\n\\r\\n///token owner functions\\r\\n\\r\\n    ///This is the royalty percentage for secondary sales. It's set per sub-domain\\r\\n    ///owner of the TLD can set this 0-10%, this works on all marketplaces that support \\r\\n    ///on-chain royalties :-)\\r\\n    function setRoyaltyPercent(uint256 _id, uint256 _percent) public tokenOwner(_id) {\\r\\n        require(_percent <= 10, \\\"max 10 percent\\\");\\r\\n\\r\\n        IdRoyaltyMap[_id] = _percent;\\r\\n        emit UpdateDomainRoyaltyPercentage(msg.sender, _id, _percent);\\r\\n    }\\r\\n\\r\\n    ///token owner can set mint price. 0 mint price means that it is not for minting by\\r\\n    ///anyone apart from the token owner. Additional logic for mint price can be applied \\r\\n    ///in custom registration-rules that can be applied to any ENS domain. eg. you want to charge\\r\\n    ///more for shorter labels / give certain wallets reduced price, many other ideas\\r\\n    function setMintPrice(uint256 _id, uint256 _price) public tokenOwner(_id) {\\r\\n\\r\\n        require(_price >= 0.01 ether || _price == 0, \\\"min 0.01 ether\\\");\\r\\n        DefaultMintPrice[_id] = _price;\\r\\n        emit UpdateDomainDefaultMintPrice(msg.sender, _id, _price); \\r\\n    }\\r\\n\\r\\n    ///this is the default image that will display when users mint a sub-domain. This can be overridden\\r\\n    ///by the user setting a value for the 'avatar' key in their text mappings\\r\\n    function setSubdomainImageUri(uint256 _id, string calldata _uri) tokenOwner(_id) public {\\r\\n        \\r\\n        IdImageMap[_id] = _uri;\\r\\n        emit UpdateDomainDefaultImage(msg.sender, _id, _uri);\\r\\n    }\\r\\n\\r\\n    ///proxy method so that the TLD owner can still manage various public resolver\\r\\n    ///functions for their token despite it being contained in this contract\\r\\n    function setTldAddr(uint256 _id, uint256 coinType, bytes  memory a) tokenOwner(_id) public {\\r\\n        bytes32 node = getDomainHash(IdToDomain[_id]);\\r\\n        PublicResolver.setAddr(node, coinType, a);\\r\\n    }\\r\\n\\r\\n    function setTldAddr(uint256 _id, address a) tokenOwner(_id) public {\\r\\n        bytes32 node = getDomainHash(IdToDomain[_id]);\\r\\n        PublicResolver.setAddr(node, a);\\r\\n    }\\r\\n\\r\\n    function setTldDNSRecords(uint256 _id, bytes memory data) tokenOwner(_id) public {\\r\\n        bytes32 node = getDomainHash(IdToDomain[_id]);\\r\\n        PublicResolver.setDNSRecords(node, data);\\r\\n    }\\r\\n\\r\\n    function setTldText(uint256 _id, string memory key, string memory value) tokenOwner(_id) public {\\r\\n        bytes32 node = getDomainHash(IdToDomain[_id]);\\r\\n        PublicResolver.setText(node, key, value);\\r\\n    }\\r\\n\\r\\n\\r\\n    ///use this method to update the registration stategy for any ENS domains. Can only be called by the \\r\\n    ///account that owns the tokens. Can update multiple at the same time.\\r\\n    function updateRegistrationStrategy(uint256[] calldata _ids, IRegister _registrationStrategy) public {\\r\\n        for(uint256 i; i < _ids.length;){\\r\\n            require(TokenOwnerMap[_ids[i]] == msg.sender, \\\"not owner\\\");\\r\\n\\r\\n            IdToRegisterMap[_ids[i]] = _registrationStrategy;\\r\\n\\r\\n            emit UpdateDomainRegistrationRules(msg.sender, _ids[i], address(_registrationStrategy));\\r\\n\\r\\n            //we do this because it's the most gas efficient way of doing the loop          \\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///I don't really like ccip, but need to make sure we provide a way of updating this in the future if it\\r\\n    ///matures to a usable state.\\r\\n    function updateUseCCIPResolver(uint256[] calldata _ids, bool _shouldUse) public {\\r\\n        require(address(CCIPResolver) != address(0), \\\"ccip resolver not set\\\");\\r\\n        for(uint256 i; i < _ids.length;){\\r\\n            require(TokenOwnerMap[_ids[i]] == msg.sender, \\\"not owner\\\");\\r\\n\\r\\n            IdToUseCCIPMap[_ids[i]] = _shouldUse;\\r\\n            \\r\\n            ens.setResolver(getDomainHash(IdToDomain[_ids[i]])\\r\\n                            , _shouldUse ? address(this) : address(PublicResolver)\\r\\n                            );\\r\\n\\r\\n            //we do this because it's the most gas efficient way of doing the loop\\r\\n            unchecked { ++i; }\\r\\n        }        \\r\\n    }\\r\\n\\r\\n    ///this action cannot be undone. locked domain will remain permenantly locked in the contract unless\\r\\n    ///it expires (remember that anyone can renew a domain, so it is our intention that project funds could be \\r\\n    ///redirected to fund renewals for popular domains)\\r\\n    function lockDomain(uint256 _id) tokenOwner(_id) public {\\r\\n        require(EnsToken.ownerOf(_id) == address(this), \\\"token not in contract\\\");\\r\\n        require(!TokenLocked[_id], \\\"token already locked\\\");\\r\\n        TokenLocked[_id] = true;\\r\\n\\r\\n        emit LockEnsDomain(msg.sender, _id);\\r\\n    }\\r\\n\\r\\n///end token owner functions\\r\\n//\\r\\n// ------------------------------------\\r\\n\\r\\n    ///if the \\\"wrapped\\\" ens domain is transferred then this method is called which will change the ownership\\r\\n    ///of the domain for admin and payout purposes. We can't just link to the owner of this token because\\r\\n    ///it is burned when the ENS is withdrawn.\\r\\n    function transferDomainOwnership(uint256 _id, address _newOwner) external {       \\r\\n        require(address(EnsWrapper) == msg.sender, \\\"only through EnsWrapper transfer\\\");\\r\\n        address currentOwner = TokenOwnerMap[_id];\\r\\n        TokenOwnerMap[_id] = _newOwner;\\r\\n       \\r\\n        _beforeTLDTransfer(currentOwner, _newOwner, _id);\\r\\n        emit TransferEnsOwnership(currentOwner, _newOwner, _id);\\r\\n    }\\r\\n\\r\\n    ///this is for the ENS owners to withdraw primary sales. It's collected by wallet not by ID\\r\\n    ///so that only 1 withdrawal is required and if a domain is sold then previous sales can still be\\r\\n    ///claimed by the original owner.\\r\\n    function withdrawPrimarySalesFunds() external  {        \\r\\n        require(OwnerFunds[msg.sender] > 0, \\\"no funds to claim\\\");\\r\\n        \\r\\n        //we do this like this to prevent re-entrency\\r\\n        uint256 balance = OwnerFunds[msg.sender];\\r\\n        OwnerFunds[msg.sender] = 0;\\r\\n        payable(msg.sender).transfer(balance);\\r\\n\\r\\n        emit WithdrawFunds(msg.sender, balance);\\r\\n    }\\r\\n\\r\\n///contract owner functions\\r\\n\\r\\n    ///contract owner to set default registration strategy. This will not alter any exsting domains that \\r\\n    ///are using the current default strategy only future registered ones. currently the default\\r\\n    ///registration strategy is quite basic so there is lots of room to be able to improve this in the future\\r\\n    function updateDefaultRegister(IRegister _registrationStrategy) external onlyOwner {\\r\\n        DefaultRegister = _registrationStrategy;\\r\\n    }\\r\\n\\r\\n    ///contract owner withdraw for any primary sale commission / \\r\\n    function contractOwnerWithdrawFunds() external onlyOwner {        \\r\\n        require(ContractOwnerFunds > 0, \\\"no funds to claim\\\");\\r\\n        \\r\\n        //we do this like this to prevent re-entrency\\r\\n        uint256 balance = ContractOwnerFunds;\\r\\n        ContractOwnerFunds = 0;\\r\\n        payable(msg.sender).transfer(balance);\\r\\n    }\\r\\n\\r\\n    function setCCIPResolver(ICCIPResolver _ccip) onlyOwner external {\\r\\n        require(!CCIPResolverLocked, \\\"resolver already locked\\\");\\r\\n        CCIPResolver = _ccip;\\r\\n    }\\r\\n\\r\\n    function setCCIPLocked() onlyOwner external {\\r\\n        require(!CCIPResolverLocked, \\\"resolver already locked\\\");\\r\\n        CCIPResolverLocked = true;\\r\\n    }\\r\\n\\r\\n    function setMetadataContract(IMetadata _metadata) onlyOwner external {\\r\\n        MetaData = _metadata;\\r\\n    }\\r\\n\\r\\n    function setDepositCost(uint256 _priceInWei) onlyOwner external {\\r\\n        DepositCost = _priceInWei;\\r\\n    }\\r\\n\\r\\n    ///contract owner percentage for primary sales. this cannot be set to higher than 5%\\r\\n    ///probably set to 2% when the contract is initially deployed\\r\\n    function setContractOwnerPrimaryRoyalty(uint256 _percent) onlyOwner external {\\r\\n        require(_percent <= 5, \\\"max 5 percent\\\");\\r\\n        ContractOwnerPrimaryRoyalties = _percent;\\r\\n    }\\r\\n\\r\\n    //set the minimum requirement for a deposited domain to expire. 30 days seems low, default is 90 days\\r\\n    function setMinDomainExpiryForDeposit(uint256 _minNumberOfDays) onlyOwner external {\\r\\n        MinDomainExpiry = (_minNumberOfDays * 1 days);\\r\\n        require(MinDomainExpiry >= 30 days, \\\"must be minimum of 30 days\\\");\\r\\n    }\\r\\n\\r\\n    ///underutilised ENS functionality. Naming a contract using the reverse registrar\\r\\n    function setContractName(string calldata _name) onlyOwner external {\\r\\n        ReverseResolver.setName(_name);\\r\\n    }\\r\\n\\r\\n/// <end> contract owner functions\\r\\n//\\r\\n// ------------------------------------\\r\\n\\r\\n    ///IERC2981 interface method for on-chain royalty. This is so we can charge different royalty %\\r\\n    ///per ENS domain and also pay out to the contract owner. This standard is only supported by good reputable\\r\\n    ///ethereum marketplaces\\r\\n    function royaltyInfo( \\r\\n    uint256 _tokenId,\\r\\n    uint256 _salePrice\\r\\n        ) external view returns (\\r\\n            address receiver,\\r\\n            uint256 royaltyAmount\\r\\n        ){\\r\\n            uint256 parentId = IdToOwnerId[_tokenId];\\r\\n            address owner = TokenOwnerMap[parentId];\\r\\n            uint256 percent = IdRoyaltyMap[parentId];\\r\\n            uint256 royalty = _salePrice.div(100).mul(percent);\\r\\n\\r\\n            return (owner, royalty);\\r\\n        }\\r\\n\\r\\n   ///read method to get some information for the UI\\r\\n    function getTokenInfo(uint256[] calldata _ids) external view returns(EnsInfo[] memory){\\r\\n        EnsInfo[] memory infos = new EnsInfo[](_ids.length);\\r\\n\\r\\n        for(uint256 i; i < _ids.length;){\\r\\n            infos[i] = getInfo(_ids[i]);\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n\\r\\n        return infos;\\r\\n    }\\r\\n\\r\\n    function getInfo(uint256 _id) private view returns(EnsInfo memory){\\r\\n        EnsInfo memory info;\\r\\n\\r\\n        info.id = _id;\\r\\n        info.domain = IdToDomain[_id];\\r\\n        info.royalty = IdRoyaltyMap[_id];\\r\\n        info.owner = TokenOwnerMap[_id];\\r\\n        info.locked = TokenLocked[_id];\\r\\n        info.price = DefaultMintPrice[_id];\\r\\n        info.image = IdImageMap[_id];\\r\\n        info.domainHash = getDomainHash(info.domain);\\r\\n        info.currentLocation = EnsToken.ownerOf(_id);\\r\\n        info.expiry = EnsToken.nameExpires(_id);\\r\\n    \\r\\n        return info;\\r\\n    }\\r\\n\\r\\n        function tldBalanceOf(address _addr) public view returns(uint256){\\r\\n            return TLDBalances[_addr];\\r\\n        }\\r\\n\\r\\n        function totalSupply() public view returns(uint256){\\r\\n            return currentId;\\r\\n        }\\r\\n\\r\\n   modifier tokenOwner(uint256 _id) {\\r\\n        require(TokenOwnerMap[_id] == msg.sender, \\\"is not owner\\\");\\r\\n      _;\\r\\n   }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@ensdomains/ens-contracts/contracts/registry/ENS.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registration-rules.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./interfaces/IManager.sol\\\";\\r\\nimport \\\"./interfaces/IRegister.sol\\\";\\r\\n\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ncontract RegistrationRulesV1 is IRegister {\\r\\n\\r\\n    IManager public DomainManager;\\r\\n    constructor(IManager _manager){\\r\\n        DomainManager = _manager;\\r\\n    }\\r\\n\\r\\n    function canRegister(uint256 _tokenId, string calldata _label, address _addr, uint256 _priceInWei, bytes32[] calldata _proofs) external view returns(bool){\\r\\n        uint256 price = DomainManager.DefaultMintPrice(_tokenId);\\r\\n        require(price == _priceInWei, \\\"incorrect ether\\\");\\r\\n        require(price != 0, \\\"not for primary sale\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintPrice(uint256 _tokenId, string calldata _label, address _addr, bytes32[] calldata _proofs) external view returns(uint256){\\r\\n        uint256 price = DomainManager.DefaultMintPrice(_tokenId);\\r\\n        address owner = DomainManager.TokenOwnerMap(_tokenId);\\r\\n        return owner == _addr ? 0 : price;\\r\\n    }\\r\\n \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IERC2981 is IERC165 {\\r\\n    /// ERC165 bytes to add to interface array - set in parent contract\\r\\n    /// implementing this standard\\r\\n    ///\\r\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\r\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\r\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\r\\n\\r\\n    /// @notice Called with the sale price to determine how much royalty\\r\\n    //          is owed and to whom.\\r\\n    /// @param _tokenId - the NFT asset queried for royalty information\\r\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\r\\n    /// @return receiver - address of who should be sent the royalty payment\\r\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\r\\n    function royaltyInfo(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _salePrice\\r\\n    ) external view returns (\\r\\n        address receiver,\\r\\n        uint256 royaltyAmount\\r\\n    );\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IENSToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n\\r\\ninterface IENSToken {\\r\\n    function nameExpires(uint256 id) external view returns(uint256);\\r\\n    function reclaim(uint256 id, address addr) external;\\r\\n    function setResolver(address _resolverAddress) external;\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IManager {\\r\\n\\r\\nfunction IdToLabelMap( uint256 _tokenId) external view returns (string memory label);\\r\\nfunction IdToOwnerId( uint256 _tokenId) external view returns (uint256 ownerId);\\r\\nfunction IdToDomain( uint256 _tokenId) external view returns (string memory domain);\\r\\nfunction TokenLocked( uint256 _tokenId) external view returns (bool locked);\\r\\nfunction IdImageMap( uint256 _tokenId) external view returns (string memory image);\\r\\nfunction IdToHashMap(uint256 _tokenId) external view returns (bytes32 _hash);\\r\\nfunction text(bytes32 node, string calldata key) external view returns (string memory _value);\\r\\nfunction DefaultMintPrice(uint256 _tokenId) external view returns (uint256 _priceInWei);\\r\\nfunction transferDomainOwnership(uint256 _id, address _newOwner) external;\\r\\nfunction TokenOwnerMap(uint256 _id) external view returns(address); \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IMetadata {\\r\\n    function tokenURI(uint256 tokenId) external view returns(string memory);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRegister.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IRegister {\\r\\n    function canRegister(uint256 _tokenId, string memory _label, address _addr, uint256 _priceInWei, bytes32[] calldata _proofs) external view returns(bool);\\r\\n    function mintPrice(uint256 _tokenId, string calldata _label, address _addr, bytes32[] calldata _proofs) external view returns(uint256);\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IENSAdmin.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n\\r\\ninterface IENSAdmin {\\r\\n    function setAddr(bytes32 node, uint256 coinType, bytes  memory a) external;\\r\\n    function setAddr(bytes32 node, address a) external;\\r\\n    function setDNSRecords(bytes32 node, bytes memory data) external;\\r\\n    function setText(bytes32 node, string memory key, string memory value) external;\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IReverseResolver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IReverseResolver {\\r\\n    function setName(string memory name) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICCIPResolver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n\\r\\ninterface ICCIPResolver {\\r\\n    function text(bytes32 _node, string calldata _key) external view returns(string memory _value);\\r\\n    function addr(bytes32 _node) external view returns(address _addr);\\r\\n    function name(bytes32 node) external view returns (string memory);\\r\\n}\"\r\n    },\r\n    \"contracts/metadata-provider.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\r\\nimport \\\"./interfaces/IENSToken.sol\\\";\\r\\nimport \\\"./interfaces/IManager.sol\\\";\\r\\nimport \\\"./interfaces/IMetadata.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ncontract MetadataProviderV1 is IMetadata {\\r\\n\\r\\n    using Strings for uint256;\\r\\n\\r\\n    IManager public Manager;\\r\\n    ENS private ens = ENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e); \\r\\n    IENSToken public ensToken = IENSToken(0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85);\\r\\n    string public DefaultImage = 'ipfs://QmYWSU93qnqDvAwHGEpJbEEghGa7w7RbsYo9mYYroQnr1D'; //QmaTFCsJ9jsPEQq9zgJt9F38TJ5Ys3KwVML3mN1sZLZbxE\\r\\n\\r\\n    constructor(IManager _manager){\\r\\n        Manager = _manager;\\r\\n    }\\r\\n\\r\\n   function tokenURI(uint256 tokenId) public view returns(string memory){\\r\\n        \\r\\n        string memory label = Manager.IdToLabelMap(tokenId);\\r\\n\\r\\n        uint256 ownerId = Manager.IdToOwnerId(tokenId);\\r\\n        string memory parentName = Manager.IdToDomain(ownerId);\\r\\n        string memory ensName = string(abi.encodePacked(label, \\\".\\\", parentName, \\\".eth\\\"));\\r\\n        string memory locked = (ensToken.ownerOf(ownerId) == address(Manager)) && (Manager.TokenLocked(ownerId)) ? \\\"True\\\" : \\\"False\\\";\\r\\n        string memory image = Manager.IdImageMap(ownerId);\\r\\n\\r\\n        bytes32 hashed = Manager.IdToHashMap(tokenId);\\r\\n        string memory avatar = Manager.text(hashed, \\\"avatar\\\");\\r\\n        address resolver = ens.resolver(hashed);\\r\\n        string memory active = resolver == address(Manager) ? \\\"True\\\" : \\\"False\\\";\\r\\n\\r\\n        uint256 expiry = ensToken.nameExpires(ownerId);\\r\\n        \\r\\n        return string(  \\r\\n            abi.encodePacked(\\r\\n                'data:application/json;utf8,{\\\"name\\\": \\\"'\\r\\n                , ensName\\r\\n                , '\\\",\\\"description\\\": \\\"Transferable '\\r\\n                , parentName\\r\\n                , '.eth sub-domain\\\",\\\"image\\\":\\\"'\\r\\n                , bytes(avatar).length == 0 ? \\r\\n                    (bytes(image).length == 0 ? DefaultImage : image)\\r\\n                    : avatar\\r\\n                , '\\\",\\\"attributes\\\":[{\\\"trait_type\\\" : \\\"parent name\\\", \\\"value\\\" : \\\"'\\r\\n                , parentName\\r\\n                , '.eth\\\"},{\\\"trait_type\\\" : \\\"parent locked\\\", \\\"value\\\" : \\\"'\\r\\n                , locked\\r\\n                , '\\\"},{\\\"trait_type\\\" : \\\"active\\\", \\\"value\\\" : \\\"'\\r\\n                , active\\r\\n                , '\\\" },{\\\"trait_type\\\" : \\\"parent expiry\\\", \\\"display_type\\\": \\\"date\\\",\\\"value\\\": ', expiry.toString(), '}]}'\\r\\n                        )\\r\\n                            );               \\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/ENSEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Adapted this from the ERC721Enumerable extension\\r\\n */\\r\\nabstract contract ENSEnumerable  {\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 => uint256) private _allTokensIndex;\\r\\n\\r\\n    mapping(address => uint256) public TLDBalances;\\r\\n\\r\\n    /**\\r\\n     * @dev \\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\r\\n        require(index < TLDBalances[owner], \\\"ENSEnumerable: owner index out of bounds\\\");\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\r\\n     */\\r\\n    function totalTLDCount() public view virtual returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\r\\n        require(index < totalTLDCount(), \\\"ENSEnumerable: global index out of bounds\\\");\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTLDTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        \\r\\n\\r\\n        if (from == address(0)) {\\r\\n            _addTokenToAllTokensEnumeration(tokenId);\\r\\n        } else if (from != to) {\\r\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\r\\n        } else if (to != from) {\\r\\n            _addTokenToOwnerEnumeration(to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\r\\n     * @param to address representing the new owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\r\\n     */\\r\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\r\\n        uint256 length = TLDBalances[to];\\r\\n        _ownedTokens[to][length] = tokenId;\\r\\n        _ownedTokensIndex[tokenId] = length;\\r\\n        ++TLDBalances[to];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\r\\n     */\\r\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\r\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\r\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\r\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\r\\n     */\\r\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\r\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n\\r\\n        uint256 lastTokenIndex = TLDBalances[from] - 1;\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary\\r\\n        if (tokenIndex != lastTokenIndex) {\\r\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n        }\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _ownedTokensIndex[tokenId];\\r\\n        delete _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n        --TLDBalances[from];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\r\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\r\\n     */\\r\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\r\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\r\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\r\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\r\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _allTokensIndex[tokenId];\\r\\n        _allTokens.pop();\\r\\n    }\\r\\n\\r\\n    function getTokenOwnerArray(address _addr, uint256 _start, uint256 _count) view external returns(uint256[] memory){\\r\\n        uint256 balance = TLDBalances[_addr];\\r\\n\\r\\n        uint256 num = (_count + _start) > (balance - _start) ? (balance - _start) : _count;\\r\\n        uint256[] memory arr = new uint256[](num);\\r\\n\\r\\n        for(uint256 i; i < num;){\\r\\n            arr[i] = _ownedTokens[_addr][_start + i];\\r\\n\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n\\r\\n        return arr;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/EnsTldWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IENSToken.sol\\\";\\r\\nimport \\\"./interfaces/IManager.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ncontract EnsTldWrapper is ERC721, Ownable {\\r\\n    address constant ENS_TOKEN_ADDRESS = 0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85;\\r\\n    IENSToken public EnsToken = IENSToken(ENS_TOKEN_ADDRESS);\\r\\n    IManager public DomainManager;\\r\\n    string public BaseUri = 'https://esf.tools/api/wrapped-ens-metadata/';\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    constructor(IManager _manager) ERC721(\\\"Wrapped ENS\\\", \\\"WENS\\\"){\\r\\n        DomainManager = _manager;\\r\\n    }\\r\\n\\r\\n    function mint(address _addr, uint256 _tokenId) public isDomainManager {\\r\\n        _safeMint(_addr, _tokenId);\\r\\n        unchecked { ++totalSupply; }\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _tokenId) public isDomainManager {\\r\\n        _burn(_tokenId);\\r\\n        unchecked { --totalSupply; } //this is only used for display generally.\\r\\n    }\\r\\n\\r\\n    function exists(uint256 _tokenId) public view returns(bool) {\\r\\n        return _exists(_tokenId);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override {\\r\\n        if (from != address(0) && to != address(0)){\\r\\n            //the token could expire and then this token would not be bound to it and could be sold independently.\\r\\n            //this should stop that from happening. \\r\\n          require(EnsToken.ownerOf(tokenId) == address(DomainManager) \\r\\n                    && EnsToken.nameExpires(tokenId) > block.timestamp\\r\\n          , \\\"cannot transfer if expired or not in contract\\\"); \\r\\n          \\r\\n            DomainManager.transferDomainOwnership(tokenId, to); \\r\\n        \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBaseUri(string calldata _uri) public onlyOwner {\\r\\n        BaseUri = _uri;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return BaseUri;\\r\\n    }\\r\\n\\r\\n   modifier isDomainManager() {\\r\\n        require(address(DomainManager) == msg.sender, \\\"is not domain manager\\\");\\r\\n      _;\\r\\n   }\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_domainLabel\",\"type\":\"string\"}],\"name\":\"DepositEns\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"LockEnsDomain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_subdomainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_subDomain\",\"type\":\"string\"}],\"name\":\"SubdomainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"TransferEnsOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"name\":\"UpdateDomainDefaultImage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_defaultPriceInWei\",\"type\":\"uint256\"}],\"name\":\"UpdateDomainDefaultMintPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_registrationStrategy\",\"type\":\"address\"}],\"name\":\"UpdateDomainRegistrationRules\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"UpdateDomainRoyaltyPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"WithdrawEns\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_funds\",\"type\":\"uint256\"}],\"name\":\"WithdrawFunds\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CCIPResolver\",\"outputs\":[{\"internalType\":\"contract ICCIPResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCIPResolverLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ContractOwnerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ContractOwnerPrimaryRoyalties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DefaultMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DefaultRegister\",\"outputs\":[{\"internalType\":\"contract IRegister\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DepositCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnsToken\",\"outputs\":[{\"internalType\":\"contract IENSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnsWrapper\",\"outputs\":[{\"internalType\":\"contract EnsTldWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"HashToIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdImageMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdRoyaltyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdToDomain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdToHashMap\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdToLabelMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdToOwnerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdToRegisterMap\",\"outputs\":[{\"internalType\":\"contract IRegister\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"IdToUseCCIPMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MetaData\",\"outputs\":[{\"internalType\":\"contract IMetadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinDomainExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnerFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PublicResolver\",\"outputs\":[{\"internalType\":\"contract IENSAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RedirectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReverseResolver\",\"outputs\":[{\"internalType\":\"contract IReverseResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TLDBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenOwnerMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeID\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwnerWithdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_defaultImageUri\",\"type\":\"string\"},{\"internalType\":\"contract IRegister\",\"name\":\"_registrationStrategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useCCIP\",\"type\":\"bool\"}],\"name\":\"depositEns\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_defaultImageUri\",\"type\":\"string\"}],\"name\":\"depositEns\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDepositCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domain\",\"type\":\"string\"}],\"name\":\"getDomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"namehash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"}],\"name\":\"getIdFromLabel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proofs\",\"type\":\"bytes32[]\"}],\"name\":\"getSubdomainCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"domainHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currentLocation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct EnsInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getTokenOwnerArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"lockDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"rawText\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proofs\",\"type\":\"bytes32[]\"}],\"name\":\"registerSubdomain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCCIPLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICCIPResolver\",\"name\":\"_ccip\",\"type\":\"address\"}],\"name\":\"setCCIPResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setContractName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setContractOwnerPrimaryRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"name\":\"setDepositCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetadata\",\"name\":\"_metadata\",\"type\":\"address\"}],\"name\":\"setMetadataContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minNumberOfDays\",\"type\":\"uint256\"}],\"name\":\"setMinDomainExpiryForDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setRedirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setSubdomainImageUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"}],\"name\":\"setTldAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setTldAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setTldDNSRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setTldText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"texts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"tldBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTLDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferDomainOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRegister\",\"name\":\"_registrationStrategy\",\"type\":\"address\"}],\"name\":\"updateDefaultRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IRegister\",\"name\":\"_registrationStrategy\",\"type\":\"address\"}],\"name\":\"updateRegistrationStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_shouldUse\",\"type\":\"bool\"}],\"name\":\"updateUseCCIPResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawEns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPrimarySalesFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SubdomainFactory", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}